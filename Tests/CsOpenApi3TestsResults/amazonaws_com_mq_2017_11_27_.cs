//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 6,
	}
	
	/// <summary>
	/// A user associated with the broker. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplicationUser { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnauthorizedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthenticationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIMPLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LDAP = 1,
	}
	
	/// <summary>
	/// Returns information about the specified configuration revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigurationRevision
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Revision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ActionRequired[] ActionsRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerInstance[] BrokerInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerState BrokerState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configurations Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentMode DeploymentMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionOptions EncryptionOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LdapServerMetadataOutput LdapServerMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogsSummary Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WeeklyStartTime MaintenanceWindowStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy PendingAuthenticationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PendingEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PendingHostInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LdapServerMetadataOutput PendingLdapServerMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PendingSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerStorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSummary[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMetadataOutput DataReplicationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMode DataReplicationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMetadataOutput PendingDataReplicationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMode PendingDataReplicationMode { get; set; }
	}
	
	/// <summary>
	/// Action required for a broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionRequired
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionRequiredCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionRequiredInfo { get; set; }
	}
	
	/// <summary>
	/// Returns information about all brokers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrokerInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsoleURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	/// <summary>
	/// The broker's status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BrokerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBOOT_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL_ACTION_REQUIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICA = 6,
	}
	
	/// <summary>
	/// Broker configuration information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Configurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Current { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId[] History { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Pending { get; set; }
	}
	
	/// <summary>
	/// A list of information about the configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigurationId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// The broker's deployment mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_STANDBY_MULTI_AZ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_MULTI_AZ = 2,
	}
	
	/// <summary>
	/// Encryption options for the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool UseAwsOwnedKey { get; set; }
	}
	
	/// <summary>
	/// The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RABBITMQ = 1,
	}
	
	/// <summary>
	/// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LdapServerMetadataOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Hosts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RoleSearchSubtree { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccountUsername { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserRoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserSearchSubtree { get; set; }
	}
	
	/// <summary>
	/// The list of information about logs currently enabled and pending to be deployed for the specified broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogsSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditLogGroup { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool General { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GeneralLogGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingLogs Pending { get; set; }
	}
	
	/// <summary>
	/// The list of information about logs to be enabled for the specified broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> General { get; set; }
	}
	
	/// <summary>
	/// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeeklyStartTime
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DayOfWeek DayOfWeek { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TimeOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// <p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BrokerStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class @__mapOf__string
	{
	}
	
	/// <summary>
	/// Returns a list of all broker users. Does not apply to RabbitMQ brokers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeType PendingChange { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The type of change pending for the ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	/// <summary>
	/// The replication details of the data replication-enabled broker. Only returned if dataReplicationMode or pendingDataReplicationMode is set to CRDR.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataReplicationMetadataOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationCounterpart DataReplicationCounterpart { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataReplicationRole { get; set; }
	}
	
	/// <summary>
	/// Specifies a broker in a data replication pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataReplicationCounterpart
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Specifies whether a broker is a part of a data replication pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataReplicationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRDR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBrokerEngineTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerEngineType[] BrokerEngineTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Types of broker engines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrokerEngineType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineVersion[] EngineVersions { get; set; }
	}
	
	/// <summary>
	/// Id of the engine version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EngineVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBrokerInstanceOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerInstanceOption[] BrokerInstanceOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Option for host instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrokerInstanceOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerStorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentMode[] SupportedDeploymentModes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedEngineVersions { get; set; }
	}
	
	/// <summary>
	/// Name of the availability zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeConfigurationRevisionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPendingChanges Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplicationUser { get; set; }
	}
	
	/// <summary>
	/// Returns information about the status of the changes pending for the ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserPendingChanges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChangeType PendingChange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBrokersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerSummary[] BrokerSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about all brokers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrokerSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerState BrokerState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentMode DeploymentMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConfigurationRevisionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision[] Revisions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about all configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Configuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSummary[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromoteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RebootBrokerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LdapServerMetadataOutput LdapServerMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Logs Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WeeklyStartTime MaintenanceWindowStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMetadataOutput DataReplicationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMode DataReplicationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMetadataOutput PendingDataReplicationMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMode PendingDataReplicationMode { get; set; }
	}
	
	/// <summary>
	/// The list of information about logs to be enabled for the specified broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Logs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> General { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SanitizationWarning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Returns information about the configuration element or attribute that was sanitized in the configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SanitizationWarning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElementName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SanitizationWarningReason Reason { get; set; }
	}
	
	/// <summary>
	/// The reason for which the configuration elements or attributes were sanitized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SanitizationWarningReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOWED_ELEMENT_REMOVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOWED_ATTRIBUTE_REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ATTRIBUTE_VALUE_REMOVED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserResponse
	{
	}
	
	/// <summary>
	/// <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LdapServerMetadataInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Hosts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RoleSearchSubtree { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccountPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccountUsername { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserRoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserSearchSubtree { get; set; }
	}
	
	/// <summary>
	/// Creates a broker using the specified properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBrokerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoMinorVersionUpgrade { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BrokerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentMode DeploymentMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionOptions EncryptionOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LdapServerMetadataInput LdapServerMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Logs Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WeeklyStartTime MaintenanceWindowStartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerStorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMode DataReplicationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataReplicationPrimaryBrokerArn { get; set; }
	}
	
	/// <summary>
	/// Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// A map of the key-value pairs for the resource tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTagsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// Creates a new ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplicationUser { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBrokerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTagsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBrokerEngineTypesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBrokerInstanceOptionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeBrokerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeConfigurationRevisionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBrokersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConfigurationRevisionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConfigurationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUsersRequest
	{
	}
	
	/// <summary>
	/// The Promote mode requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PromoteMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCHOVER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILOVER = 1,
	}
	
	/// <summary>
	/// Promotes a data replication replica broker to the primary broker role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromoteRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PromoteMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RebootBrokerRequest
	{
	}
	
	/// <summary>
	/// Updates the broker using the specified properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBrokerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LdapServerMetadataInput LdapServerMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Logs Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WeeklyStartTime MaintenanceWindowStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataReplicationMode DataReplicationMode { get; set; }
	}
	
	/// <summary>
	/// Updates the specified configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Updates the information for an ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplicationUser { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a broker. Note: This API is asynchronous.</p> <p>To create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.</p> <ul><li><p>ec2:CreateNetworkInterface</p> <p>This permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.</p></li> <li><p>ec2:CreateNetworkInterfacePermission</p> <p>This permission is required to attach the ENI to the broker instance.</p></li> <li><p>ec2:DeleteNetworkInterface</p></li> <li><p>ec2:DeleteNetworkInterfacePermission</p></li> <li><p>ec2:DetachNetworkInterface</p></li> <li><p>ec2:DescribeInternetGateways</p></li> <li><p>ec2:DescribeNetworkInterfaces</p></li> <li><p>ec2:DescribeNetworkInterfacePermissions</p></li> <li><p>ec2:DescribeRouteTables</p></li> <li><p>ec2:DescribeSecurityGroups</p></li> <li><p>ec2:DescribeSubnets</p></li> <li><p>ec2:DescribeVpcs</p></li></ul> <p>For more information, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user">Create an IAM User and Get Your Amazon Web Services Credentials</a> and <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface">Never Modify or Delete the Amazon MQ Elastic Network Interface</a> in the <i>Amazon MQ Developer Guide</i>.</p>
		/// CreateBroker v1/brokers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBrokerResponse> CreateBrokerAsync(CreateBrokerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateBrokerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of all brokers.
		/// ListBrokers v1/brokers
		/// </summary>
		/// <param name="maxResults">The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBrokersResponse> ListBrokersAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListBrokersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
		/// CreateConfiguration v1/configurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConfigurationResponse> CreateConfigurationAsync(CreateConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateConfigurationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of all configurations.
		/// ListConfigurations v1/configurations
		/// </summary>
		/// <param name="maxResults">The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<ListConfigurationsResponse> ListConfigurationsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConfigurationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a tag to a resource.
		/// CreateTags v1/tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource tag.</param>
		public async Task CreateTagsAsync(string resource_arn, CreateTagsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/{resource_arn}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists tags for a resource.
		/// ListTags v1/tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource tag.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsResponse> ListTagsAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/{resource_arn}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates an ActiveMQ user.</p> <important><p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker usernames are not intended to be used for private or sensitive data.</p></important>
		/// CreateUser v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<CreateUserResponse> CreateUserAsync(string broker_id, string username, CreateUserPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}/users/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateUserResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an ActiveMQ user.
		/// DeleteUser v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<DeleteUserResponse> DeleteUserAsync(string broker_id, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}/users/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteUserResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about an ActiveMQ user.
		/// DescribeUser v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<DescribeUserResponse> DescribeUserAsync(string broker_id, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}/users/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeUserResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the information for an ActiveMQ user.
		/// UpdateUser v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<UpdateUserResponse> UpdateUserAsync(string broker_id, string username, UpdateUserPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}/users/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateUserResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a broker. Note: This API is asynchronous.
		/// DeleteBroker v1/brokers/{broker_id}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBrokerResponse> DeleteBrokerAsync(string broker_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteBrokerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the specified broker.
		/// DescribeBroker v1/brokers/{broker_id}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBrokerResponse> DescribeBrokerAsync(string broker_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeBrokerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a pending configuration change to a broker.
		/// UpdateBroker v1/brokers/{broker_id}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBrokerResponse> UpdateBrokerAsync(string broker_id, UpdateBrokerPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateBrokerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes a tag from a resource.
		/// DeleteTags v1/tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource tag.</param>
		/// <param name="tagKeys">An array of tag keys to delete</param>
		public async Task DeleteTagsAsync(string resource_arn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/{resource_arn}#tagKeys?"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describe available engine types and versions.
		/// DescribeBrokerEngineTypes v1/broker-engine-types
		/// </summary>
		/// <param name="engineType">Filter response by engine type.</param>
		/// <param name="maxResults">The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBrokerEngineTypesResponse> DescribeBrokerEngineTypesAsync(string engineType, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/broker-engine-types?engineType=" + (engineType==null? "" : System.Uri.EscapeDataString(engineType))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeBrokerEngineTypesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describe available broker instance options.
		/// DescribeBrokerInstanceOptions v1/broker-instance-options
		/// </summary>
		/// <param name="engineType">Filter response by engine type.</param>
		/// <param name="hostInstanceType">Filter response by host instance type.</param>
		/// <param name="maxResults">The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <param name="storageType">Filter response by storage type.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBrokerInstanceOptionsResponse> DescribeBrokerInstanceOptionsAsync(string engineType, string hostInstanceType, int maxResults, string nextToken, string storageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/broker-instance-options?engineType=" + (engineType==null? "" : System.Uri.EscapeDataString(engineType))+"&hostInstanceType=" + (hostInstanceType==null? "" : System.Uri.EscapeDataString(hostInstanceType))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&storageType=" + (storageType==null? "" : System.Uri.EscapeDataString(storageType));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeBrokerInstanceOptionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the specified configuration.
		/// DescribeConfiguration v1/configurations/{configuration_id}
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationResponse> DescribeConfigurationAsync(string configuration_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations/{configuration_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeConfigurationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the specified configuration.
		/// UpdateConfiguration v1/configurations/{configuration_id}
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <returns>Success</returns>
		public async Task<UpdateConfigurationResponse> UpdateConfigurationAsync(string configuration_id, UpdateConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations/{configuration_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateConfigurationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the specified configuration revision for the specified configuration.
		/// DescribeConfigurationRevision v1/configurations/{configuration_id}/revisions/{configuration_revision}
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <param name="configuration_revision">The revision of the configuration.</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationRevisionResponse> DescribeConfigurationRevisionAsync(string configuration_id, string configuration_revision, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations/{configuration_id}/revisions/{configuration_revision}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeConfigurationRevisionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of all revisions for the specified configuration.
		/// ListConfigurationRevisions v1/configurations/{configuration_id}/revisions
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <param name="maxResults">The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<ListConfigurationRevisionsResponse> ListConfigurationRevisionsAsync(string configuration_id, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations/{configuration_id}/revisions?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConfigurationRevisionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of all ActiveMQ users.
		/// ListUsers v1/brokers/{broker_id}/users
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="maxResults">The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> ListUsersAsync(string broker_id, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}/users?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListUsersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Promotes a data replication replica broker to the primary broker role.
		/// Promote v1/brokers/{broker_id}/promote
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <returns>Success</returns>
		public async Task<PromoteResponse> PromoteAsync(string broker_id, PromotePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}/promote";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PromoteResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reboots a broker. Note: This API is asynchronous.
		/// RebootBroker v1/brokers/{broker_id}/reboot
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <returns>Success</returns>
		public async Task<RebootBrokerResponse> RebootBrokerAsync(string broker_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brokers/{broker_id}/reboot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RebootBrokerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CreateBrokerPostBody
	{
		
		/// <summary>
		/// Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationStrategy")]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		/// <summary>
		/// Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="autoMinorVersionUpgrade")]
		public bool AutoMinorVersionUpgrade { get; set; }
		
		/// <summary>
		/// <p>Required. The broker's name. This value must be unique in your Amazon Web Services account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p> <important><p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker names are not intended to be used for private or sensitive data.</p></important>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brokerName")]
		public string BrokerName { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public CreateBrokerPostBodyConfiguration Configuration { get; set; }
		
		/// <summary>
		/// <p>The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action.</p> <note><p>We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.</p></note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorRequestId")]
		public string CreatorRequestId { get; set; }
		
		/// <summary>
		/// The broker's deployment mode.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentMode")]
		public DeploymentMode DeploymentMode { get; set; }
		
		/// <summary>
		/// Encryption options for the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionOptions")]
		public CreateBrokerPostBodyEncryptionOptions EncryptionOptions { get; set; }
		
		/// <summary>
		/// The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// Required. The broker engine's version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required. The broker's instance type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostInstanceType")]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ldapServerMetadata")]
		public CreateBrokerPostBodyLdapServerMetadata LdapServerMetadata { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public CreateBrokerPostBodyLogs Logs { get; set; }
		
		/// <summary>
		/// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindowStartTime")]
		public CreateBrokerPostBodyMaintenanceWindowStartTime MaintenanceWindowStartTime { get; set; }
		
		/// <summary>
		/// Enables connections from applications outside of the VPC that hosts the broker's subnets. Set to false by default, if no value is provided.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public bool PubliclyAccessible { get; set; }
		
		/// <summary>
		/// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroups")]
		public string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// <p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public BrokerStorageType StorageType { get; set; }
		
		/// <summary>
		/// <p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your Amazon Web Services account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your Amazon Web Services account.</p></important>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// Create tags when creating the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The list of broker users (persons or applications) who can access queues and topics. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
		
		/// <summary>
		/// Specifies whether a broker is a part of a data replication pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataReplicationMode")]
		public DataReplicationMode DataReplicationMode { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when dataReplicationMode is set to CRDR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataReplicationPrimaryBrokerArn")]
		public string DataReplicationPrimaryBrokerArn { get; set; }
	}
	
	public class CreateBrokerPostBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	public class CreateBrokerPostBodyEncryptionOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseAwsOwnedKey { get; set; }
	}
	
	public class CreateBrokerPostBodyLdapServerMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Hosts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RoleSearchSubtree { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccountPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccountUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserRoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserSearchSubtree { get; set; }
	}
	
	public class CreateBrokerPostBodyLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> General { get; set; }
	}
	
	public class CreateBrokerPostBodyMaintenanceWindowStartTime
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DayOfWeek DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	public class CreateConfigurationPostBody
	{
		
		/// <summary>
		/// Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationStrategy")]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		/// <summary>
		/// The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// Required. The broker engine's version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Create tags when creating the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateTagsPostBody
	{
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateUserPostBody
	{
		
		/// <summary>
		/// Enables access to the ActiveMQ Web Console for the ActiveMQ user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consoleAccess")]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		/// <summary>
		/// The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Defines if this user is intended for CRDR replication purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationUser")]
		public System.Nullable<System.Boolean> ReplicationUser { get; set; }
	}
	
	public class UpdateUserPutBody
	{
		
		/// <summary>
		/// Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consoleAccess")]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		/// <summary>
		/// The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Defines whether the user is intended for data replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationUser")]
		public System.Nullable<System.Boolean> ReplicationUser { get; set; }
	}
	
	public class UpdateBrokerPutBody
	{
		
		/// <summary>
		/// Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationStrategy")]
		public AuthenticationStrategy AuthenticationStrategy { get; set; }
		
		/// <summary>
		/// Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoMinorVersionUpgrade")]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public UpdateBrokerPutBodyConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The broker engine version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// The broker's host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostInstanceType")]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ldapServerMetadata")]
		public UpdateBrokerPutBodyLdapServerMetadata LdapServerMetadata { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public UpdateBrokerPutBodyLogs Logs { get; set; }
		
		/// <summary>
		/// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindowStartTime")]
		public UpdateBrokerPutBodyMaintenanceWindowStartTime MaintenanceWindowStartTime { get; set; }
		
		/// <summary>
		/// The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroups")]
		public string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// Specifies whether a broker is a part of a data replication pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataReplicationMode")]
		public DataReplicationMode DataReplicationMode { get; set; }
	}
	
	public class UpdateBrokerPutBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	public class UpdateBrokerPutBodyLdapServerMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Hosts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RoleSearchSubtree { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccountPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccountUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserBase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserRoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserSearchMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserSearchSubtree { get; set; }
	}
	
	public class UpdateBrokerPutBodyLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> General { get; set; }
	}
	
	public class UpdateBrokerPutBodyMaintenanceWindowStartTime
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DayOfWeek DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	public class UpdateConfigurationPutBody
	{
		
		/// <summary>
		/// Amazon MQ for Active MQ: The base64-encoded XML configuration. Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The description of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class PromotePostBody
	{
		
		/// <summary>
		/// The Promote mode requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public PromoteMode Mode { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
