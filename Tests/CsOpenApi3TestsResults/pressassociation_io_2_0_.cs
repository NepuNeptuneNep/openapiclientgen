//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Asset Collection
		/// Return a collection of Assets.
		/// ListAssets asset
		/// </summary>
		/// <param name="updatedAfter">Updated After</param>
		/// <param name="limit">Limit the the number of items to be returned per page. For example: 5.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> ListAssetsAsync(string updatedAfter, int limit, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "asset?updatedAfter=" + (updatedAfter==null? "" : System.Uri.EscapeDataString(updatedAfter))+"&limit="+limit+"&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Asset Detail
		/// Return the content of the selected asset.
		/// GetAsset asset/{assetId}
		/// </summary>
		/// <param name="assetId">A asset ID filter for the schedule collection. This can be a reference to any type of asset i.e. movie, season, series or episode.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> GetAssetAsync(string assetId, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "asset/"+ (assetId==null? "" : System.Uri.EscapeDataString(assetId))+"&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Asset Contributors
		/// Return the contributors of the selected asset.
		/// GetAssetContributors asset/{assetId}/contributor
		/// </summary>
		/// <param name="assetId">A asset ID filter for the schedule collection. This can be a reference to any type of asset i.e. movie, season, series or episode.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> GetAssetContributorsAsync(string assetId, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "asset/"+ (assetId==null? "" : System.Uri.EscapeDataString(assetId))+"/contributor&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Catalogue Collection
		/// Return a collection of Catalogues.
		/// ListCatalogues catalogue
		/// </summary>
		public async Task<string> ListCataloguesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "catalogue";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Catalogue Detail
		/// Return the content of the selected catalogue.
		/// GetCatalogue catalogue/{catalogueId}
		/// </summary>
		/// <param name="catalogueId">The identifier for the selected catalogue.</param>
		public async Task<string> GetCatalogueAsync(string catalogueId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "catalogue/"+ (catalogueId==null? "" : System.Uri.EscapeDataString(catalogueId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Catalogue Asset Collection
		/// Return the content of the selected catalogue.
		/// GetCatalogueAsset catalogue/{catalogueId}/asset
		/// </summary>
		/// <param name="catalogueId">The identifier for the selected catalogue.</param>
		/// <param name="title">The query string for a title search</param>
		/// <param name="start">The Start Date for the catalogue date range.</param>
		/// <param name="end">The End Date for the catalogue date range.</param>
		/// <param name="updatedAfter">Retrieve items only that have been updated after this point.</param>
		/// <param name="limit">Restrict number of returned items Min = 1, Max = 500.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> GetCatalogueAssetAsync(string catalogueId, string title, string start, string end, string updatedAfter, double limit, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "catalogue/"+ (catalogueId==null? "" : System.Uri.EscapeDataString(catalogueId))+"/asset&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&start=" + (start==null? "" : System.Uri.EscapeDataString(start))+"&end=" + (end==null? "" : System.Uri.EscapeDataString(end))+"&updatedAfter=" + (updatedAfter==null? "" : System.Uri.EscapeDataString(updatedAfter))+"&limit="+limit+"&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Catalogue Asset Detail
		/// Return the content of the selected catalogue asset.
		/// GetCatalogueAssetDetail catalogue/{catalogueId}/asset/{assetId}
		/// </summary>
		/// <param name="catalogueId">The identifier for the selected catalogue.</param>
		/// <param name="assetId">The identifier for the selected catalogue asset.</param>
		public async Task<string> GetCatalogueAssetDetailAsync(string catalogueId, string assetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "catalogue/"+ (catalogueId==null? "" : System.Uri.EscapeDataString(catalogueId))+"/asset/"+ (assetId==null? "" : System.Uri.EscapeDataString(assetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Channel Collection
		/// If you are interested in a list of channels that have had there schedule updated you can filter by the following query params.
		/// - scheduleStart
		/// - scheduleEnd
		/// - scheduleUpdatedSince
		/// 
		/// adding these query params will filter the channel collection to only return channels that have been updated within the given range, updatedSince stores the state of your previous call.
		/// 
		/// Example Usage: Every 10 minutes get me the channels that have updated schedules for the next 2 weeks.
		/// 
		/// /channel?platform={uuid}&scheduleStart={today}&scheduleEnd={today + 2 weeks}&updatedSince={10 minutes ago}
		/// 
		/// Also please note epg numbers are only exposed when a platform and region are passed to the query.
		/// ListChannels channel
		/// </summary>
		/// <param name="platformId">The identifier for the selected platform. Multiple platforms can be passed to the API without a region Id. Passing multiple platforms without a region will not return epg numbers as these are linked to a platform and region.</param>
		/// <param name="regionId">The platform region ID for the channel selection.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		/// <param name="date">Date of the Channel State to select, this will display channel names and attributes in the future or past.</param>
		/// <param name="scheduleStart">The Start Date for the schedule.</param>
		/// <param name="scheduleEnd">The End Date for the schedule.</param>
		/// <param name="scheduleUpdatedSince">Schedule Updated Since</param>
		public async Task<string> ListChannelsAsync(string platformId, string regionId, bool aliases, string date, string scheduleStart, string scheduleEnd, string scheduleUpdatedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channel?platformId=" + (platformId==null? "" : System.Uri.EscapeDataString(platformId))+"&regionId=" + (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"&aliases="+aliases+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&scheduleStart=" + (scheduleStart==null? "" : System.Uri.EscapeDataString(scheduleStart))+"&scheduleEnd=" + (scheduleEnd==null? "" : System.Uri.EscapeDataString(scheduleEnd))+"&scheduleUpdatedSince=" + (scheduleUpdatedSince==null? "" : System.Uri.EscapeDataString(scheduleUpdatedSince));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Channel Detail
		/// Return the content of the selected channel.
		/// GetChannel channel/{channelId}
		/// </summary>
		/// <param name="channelId">The identifier for the selected channel.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> GetChannelAsync(string channelId, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channel/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Contributor Collection
		/// Return a collection of Contributors.
		/// ListContributor contributor
		/// </summary>
		/// <param name="updatedAfter">Updated After</param>
		/// <param name="limit">Limit the the number of items to be returned per page. For example: 5.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> ListContributorAsync(string updatedAfter, int limit, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributor?updatedAfter=" + (updatedAfter==null? "" : System.Uri.EscapeDataString(updatedAfter))+"&limit="+limit+"&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Contributor Detail
		/// Return the content of the selected contributor.
		/// GetContributor contributor/{contributorId}
		/// </summary>
		/// <param name="contributorId">Filter the schedule items by contributor ID</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> GetContributorAsync(string contributorId, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contributor/"+ (contributorId==null? "" : System.Uri.EscapeDataString(contributorId))+"&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Feature Collection
		/// Return a collection of Feature.
		/// ListFeatures feature
		/// </summary>
		/// <param name="type">The namespace of the feature type.</param>
		/// <param name="date">Date of the collection of feature items.</param>
		/// <param name="start">Start date for a range of features.</param>
		/// <param name="end">End date for a range of features.</param>
		public async Task<string> ListFeaturesAsync(string type, string date, string start, string end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "feature?type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&start=" + (start==null? "" : System.Uri.EscapeDataString(start))+"&end=" + (end==null? "" : System.Uri.EscapeDataString(end));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Feature Type Collection
		/// Return a collection of Feature Types.
		/// ListFeatureTypes feature-type
		/// </summary>
		public async Task<string> ListFeatureTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "feature-type";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Feature Detail
		/// Return the content of the selected feature.
		/// GetFeature feature/{featureId}
		/// </summary>
		/// <param name="featureId">The identifier for the selected feature.</param>
		public async Task<string> GetFeatureAsync(string featureId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "feature/"+ (featureId==null? "" : System.Uri.EscapeDataString(featureId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Platform Collection
		/// Return a list of available platforms.
		/// ListPlatforms platform
		/// </summary>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> ListPlatformsAsync(bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "platform?aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Platform Detail
		/// Return the content of the selected platform.
		/// GetPlatform platform/{platformId}
		/// </summary>
		/// <param name="platformId">The identifier for the selected platform.</param>
		public async Task<string> GetPlatformAsync(string platformId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "platform/"+ (platformId==null? "" : System.Uri.EscapeDataString(platformId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Platform Region Collection
		/// Return a list of regions for a platform.
		/// ListPlatformRegions platform/{platformId}/region
		/// </summary>
		/// <param name="platformId">The identifier for the selected platform.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> ListPlatformRegionsAsync(string platformId, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "platform/"+ (platformId==null? "" : System.Uri.EscapeDataString(platformId))+"/region&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Schedule Collection
		/// The schedule endpoint produces a linear TV schedule for a given channel and date range.
		/// 
		/// - The date range supplied must be no larger than 21 days.
		/// - If no end data is passed the API will default to start date + 24 hours.
		/// ListSchedule schedule
		/// </summary>
		/// <param name="channelId">The identifier for the selected channel.</param>
		/// <param name="start">The Start Date for the schedule.</param>
		/// <param name="end">The End Date for the schedule.</param>
		/// <param name="aliases">Flag to display Legacy and Provider Ids.</param>
		public async Task<string> ListScheduleAsync(string channelId, string start, string end, bool aliases, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedule?channelId=" + (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&start=" + (start==null? "" : System.Uri.EscapeDataString(start))+"&end=" + (end==null? "" : System.Uri.EscapeDataString(end))+"&aliases="+aliases;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
