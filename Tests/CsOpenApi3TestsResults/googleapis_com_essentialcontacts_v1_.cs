//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Response message for the ComputeContacts method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudEssentialcontactsV1ComputeContactsResponse
	{
		
		/// <summary>
		/// All contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public GoogleCloudEssentialcontactsV1Contact[] Contacts { get; set; }
		
		/// <summary>
		/// If there are more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token` and the rest of the parameters the same as the original request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A contact that will receive notifications from Google Cloud.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudEssentialcontactsV1Contact
	{
		
		/// <summary>
		/// Required. The email address to send notifications to. The email address does not need to be a Google Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required. The preferred language for notifications, as a ISO 639-1 language code. See [Supported languages](https://cloud.google.com/resource-manager/docs/managing-notification-contacts#supported-languages) for a list of supported languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageTag")]
		public string LanguageTag { get; set; }
		
		/// <summary>
		/// Output only. The identifier for the contact. Format: {resource_type}/{resource_id}/contacts/{contact_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The categories of notifications that the contact will receive communications for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationCategorySubscriptions")]
		public string[] NotificationCategorySubscriptions { get; set; }
		
		/// <summary>
		/// The last time the validation_state was updated, either manually or automatically. A contact is considered stale if its validation state was updated more than 1 year ago.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateTime")]
		public string ValidateTime { get; set; }
		
		/// <summary>
		/// The validity of the contact. A contact is considered valid if it is the correct recipient for notifications for a particular resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationState")]
		public System.Nullable<GoogleCloudEssentialcontactsV1ContactValidationState> ValidationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudEssentialcontactsV1ContactValidationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID = 2,
	}
	
	/// <summary>
	/// Response message for the ListContacts method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudEssentialcontactsV1ListContactsResponse
	{
		
		/// <summary>
		/// The contacts for the specified resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public GoogleCloudEssentialcontactsV1Contact[] Contacts { get; set; }
		
		/// <summary>
		/// If there are more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token` and the rest of the parameters the same as the original request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Request message for the SendTestMessage method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudEssentialcontactsV1SendTestMessageRequest
	{
		
		/// <summary>
		/// Required. The list of names of the contacts to send a test message to. Format: organizations/{organization_id}/contacts/{contact_id}, folders/{folder_id}/contacts/{contact_id} or projects/{project_id}/contacts/{contact_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
		
		/// <summary>
		/// Required. The notification category to send the test message for. All contacts must be subscribed to this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationCategory")]
		public System.Nullable<GoogleCloudEssentialcontactsV1SendTestMessageRequestNotificationCategory> NotificationCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudEssentialcontactsV1SendTestMessageRequestNotificationCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTIFICATION_CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TECHNICAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_UPDATES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TECHNICAL_INCIDENTS = 8,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a contact.
		/// Essentialcontacts_projects_contacts_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the contact to delete. Format: organizations/{organization_id}/contacts/{contact_id}, folders/{folder_id}/contacts/{contact_id} or projects/{project_id}/contacts/{contact_id}</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Essentialcontacts_projects_contacts_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a single contact.
		/// Essentialcontacts_projects_contacts_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the contact to retrieve. Format: organizations/{organization_id}/contacts/{contact_id}, folders/{folder_id}/contacts/{contact_id} or projects/{project_id}/contacts/{contact_id}</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudEssentialcontactsV1Contact> Essentialcontacts_projects_contacts_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleCloudEssentialcontactsV1Contact>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a contact. Note: A contact's email address cannot be changed.
		/// Essentialcontacts_projects_contacts_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. The identifier for the contact. Format: {resource_type}/{resource_id}/contacts/{contact_id}</param>
		/// <param name="updateMask">Optional. The update mask applied to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudEssentialcontactsV1Contact> Essentialcontacts_projects_contacts_patchAsync(string name, string updateMask, GoogleCloudEssentialcontactsV1Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleCloudEssentialcontactsV1Contact>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the contacts that have been set on a resource.
		/// Essentialcontacts_projects_contacts_list v1/{parent}/contacts
		/// </summary>
		/// <param name="parent">Required. The parent resource name. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}</param>
		/// <param name="pageSize">Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of `next_page_token` in the response indicates that more results might be available. If not specified, the default page_size is 100.</param>
		/// <param name="pageToken">Optional. If present, retrieves the next batch of results from the preceding call to this method. `page_token` must be the value of `next_page_token` from the previous response. The values of other method parameters should be identical to those in the previous call.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudEssentialcontactsV1ListContactsResponse> Essentialcontacts_projects_contacts_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/contacts&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleCloudEssentialcontactsV1ListContactsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a new contact for a resource.
		/// Essentialcontacts_projects_contacts_create v1/{parent}/contacts
		/// </summary>
		/// <param name="parent">Required. The resource to save this contact for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudEssentialcontactsV1Contact> Essentialcontacts_projects_contacts_createAsync(string parent, GoogleCloudEssentialcontactsV1Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/contacts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleCloudEssentialcontactsV1Contact>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.
		/// Essentialcontacts_projects_contacts_compute v1/{parent}/contacts:compute
		/// </summary>
		/// <param name="parent">Required. The name of the resource to compute contacts for. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}</param>
		/// <param name="notificationCategories">The categories of notifications to compute contacts for. If ALL is included in this list, contacts subscribed to any notification category will be returned.</param>
		/// <param name="pageSize">Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of `next_page_token` in the response indicates that more results might be available. If not specified, the default page_size is 100.</param>
		/// <param name="pageToken">Optional. If present, retrieves the next batch of results from the preceding call to this method. `page_token` must be the value of `next_page_token` from the previous response. The values of other method parameters should be identical to those in the previous call.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudEssentialcontactsV1ComputeContactsResponse> Essentialcontacts_projects_contacts_computeAsync(string parent, GoogleCloudEssentialcontactsV1SendTestMessageRequestNotificationCategory[] notificationCategories, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/contacts:compute&"+string.Join("&", notificationCategories.Select(z => $"notificationCategories={z}"))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleCloudEssentialcontactsV1ComputeContactsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allows a contact admin to send a test message to contact to verify that it has been configured correctly.
		/// Essentialcontacts_projects_contacts_sendTestMessage v1/{resource}/contacts:sendTestMessage
		/// </summary>
		/// <param name="resource">Required. The name of the resource to send the test message for. All contacts must either be set directly on this resource or inherited from another resource that is an ancestor of this one. Format: organizations/{organization_id}, folders/{folder_id} or projects/{project_id}</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Essentialcontacts_projects_contacts_sendTestMessageAsync(string resource, GoogleCloudEssentialcontactsV1SendTestMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"/contacts:sendTestMessage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
