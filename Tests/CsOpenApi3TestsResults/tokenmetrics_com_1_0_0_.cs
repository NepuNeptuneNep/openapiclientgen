//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Correlation
		/// Correlation
		/// Correlation v1/correlation
		/// </summary>
		public async Task CorrelationAsync(string tokens, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/correlation?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Indices
		/// Indices
		/// Indices v1/indices
		/// </summary>
		public async Task IndicesAsync(string exchanges, string timeHorizon, string lowCap, string startDate, string endDate, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/indices?exchanges=" + (exchanges==null? "" : System.Uri.EscapeDataString(exchanges))+"&timeHorizon=" + (timeHorizon==null? "" : System.Uri.EscapeDataString(timeHorizon))+"&lowCap=" + (lowCap==null? "" : System.Uri.EscapeDataString(lowCap))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Investor Grades
		/// Investor Grades
		/// InvestorGrades v1/investor-grades
		/// </summary>
		public async Task InvestorGradesAsync(string tokens, string startDate, string endDate, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/investor-grades?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Market Indicator
		/// Market Indicator
		/// MarketIndicator v1/market-indicator
		/// </summary>
		public async Task MarketIndicatorAsync(string startDate, string endDate, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/market-indicator?startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Price
		/// Price
		/// Price v1/price
		/// </summary>
		public async Task PriceAsync(string tokens, string startDate, string endDate, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/price?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Price Prediction
		/// Price Prediction
		/// PricePrediction v1/price-prediction
		/// </summary>
		public async Task PricePredictionAsync(string tokens, string date, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/price-prediction?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Quantmetrics Tier 1
		/// Quantmetrics Tier 1
		/// QuantmetricsTier1 v1/quantmetrics-tier-1
		/// </summary>
		public async Task QuantmetricsTier1Async(string tokens, string date, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quantmetrics-tier-1?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Quantmetrics Tier 2
		/// Quantmetrics Tier 2
		/// QuantmetricsTier2 v1/quantmetrics-tier-2
		/// </summary>
		public async Task QuantmetricsTier2Async(string tokens, string date, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/quantmetrics-tier-2?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Resistance & Support
		/// Resistance & Support
		/// ResistanceSupport v1/resistance-support
		/// </summary>
		public async Task ResistanceSupportAsync(string tokens, string startDate, string endDate, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/resistance-support?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Scenario Analysis
		/// Scenario Analysis
		/// ScenarioAnalysis v1/scenario-analysis
		/// </summary>
		public async Task ScenarioAnalysisAsync(string tokens, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/scenario-analysis?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sentiments
		/// Sentiments
		/// Sentiments v1/sentiments
		/// </summary>
		public async Task SentimentsAsync(string tokens, string startDate, string endDate, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sentiments?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tokens
		/// Tokens
		/// Tokens v1/tokens
		/// </summary>
		public async Task TokensAsync(string token_ids, string token_names, string token_symbols, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tokens?token_ids=" + (token_ids==null? "" : System.Uri.EscapeDataString(token_ids))+"&token_names=" + (token_names==null? "" : System.Uri.EscapeDataString(token_names))+"&token_symbols=" + (token_symbols==null? "" : System.Uri.EscapeDataString(token_symbols));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Trader Grades
		/// Trader Grades
		/// TraderGrades v1/trader-grades
		/// </summary>
		public async Task TraderGradesAsync(string tokens, string startDate, string endDate, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/trader-grades?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Trading Indicator
		/// Trading Indicator
		/// TradingIndicator v1/trading-indicator
		/// </summary>
		public async Task TradingIndicatorAsync(string tokens, string limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/trading-indicator?tokens=" + (tokens==null? "" : System.Uri.EscapeDataString(tokens))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
