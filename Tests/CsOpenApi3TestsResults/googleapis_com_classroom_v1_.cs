//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Announcement created by a teacher for students of the course
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Announcement
	{
		
		/// <summary>
		/// Absolute link to this announcement in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Assignee mode of the announcement. If unspecified, the default value is `ALL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigneeMode")]
		public System.Nullable<AnnouncementAssigneeMode> AssigneeMode { get; set; }
		
		/// <summary>
		/// Identifier of the course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// Timestamp when this announcement was created. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Identifier for the user that created the announcement. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public string CreatorUserId { get; set; }
		
		/// <summary>
		/// Classroom-assigned identifier of this announcement, unique per course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualStudentsOptions")]
		public IndividualStudentsOptions IndividualStudentsOptions { get; set; }
		
		/// <summary>
		/// Additional materials. Announcements must have no more than 20 material items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public Material[] Materials { get; set; }
		
		/// <summary>
		/// Optional timestamp when this announcement is scheduled to be published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public string ScheduledTime { get; set; }
		
		/// <summary>
		/// Status of this announcement. If unspecified, the default state is `DRAFT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AnnouncementState> State { get; set; }
		
		/// <summary>
		/// Description of this announcement. The text must be a valid UTF-8 string containing no more than 30,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Timestamp of the most recent change to this announcement. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnnouncementAssigneeMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSIGNEE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_STUDENTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDIVIDUAL_STUDENTS = 2,
	}
	
	/// <summary>
	/// Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndividualStudentsOptions
	{
		
		/// <summary>
		/// Identifiers for the students that have access to the coursework/announcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studentIds")]
		public string[] StudentIds { get; set; }
	}
	
	/// <summary>
	/// Material attached to course work. When creating attachments, setting the `form` field is not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Material
	{
		
		/// <summary>
		/// Drive file that is used as material for course work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveFile")]
		public SharedDriveFile DriveFile { get; set; }
		
		/// <summary>
		/// Google Forms item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public Form Form { get; set; }
		
		/// <summary>
		/// URL item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// YouTube video item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeVideo")]
		public YouTubeVideo YoutubeVideo { get; set; }
	}
	
	/// <summary>
	/// Drive file that is used as material for course work.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedDriveFile
	{
		
		/// <summary>
		/// Representation of a Google Drive file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveFile")]
		public DriveFile DriveFile { get; set; }
		
		/// <summary>
		/// Mechanism by which students access the Drive item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareMode")]
		public System.Nullable<SharedDriveFileShareMode> ShareMode { get; set; }
	}
	
	/// <summary>
	/// Representation of a Google Drive file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveFile
	{
		
		/// <summary>
		/// URL that can be used to access the Drive item. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Drive API resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// URL of a thumbnail image of the Drive item. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Title of the Drive item. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SharedDriveFileShareMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_SHARE_MODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDENT_COPY = 3,
	}
	
	/// <summary>
	/// Google Forms item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Form
	{
		
		/// <summary>
		/// URL of the form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formUrl")]
		public string FormUrl { get; set; }
		
		/// <summary>
		/// URL of the form responses document. Only set if responses have been recorded and only when the requesting user is an editor of the form. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseUrl")]
		public string ResponseUrl { get; set; }
		
		/// <summary>
		/// URL of a thumbnail image of the Form. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Title of the Form. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// URL item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		/// <summary>
		/// URL of a thumbnail image of the target URL. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Title of the target of the URL. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// URL to link to. This must be a valid UTF-8 string containing between 1 and 2024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// YouTube video item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class YouTubeVideo
	{
		
		/// <summary>
		/// URL that can be used to view the YouTube video. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// YouTube API resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// URL of a thumbnail image of the YouTube video. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Title of the YouTube video. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnnouncementState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNOUNCEMENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Additional details for assignments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Assignment
	{
		
		/// <summary>
		/// Representation of a Google Drive folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studentWorkFolder")]
		public DriveFolder StudentWorkFolder { get; set; }
	}
	
	/// <summary>
	/// Representation of a Google Drive folder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveFolder
	{
		
		/// <summary>
		/// URL that can be used to access the Drive folder. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Drive API resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Title of the Drive folder. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Student work for an assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignmentSubmission
	{
		
		/// <summary>
		/// Attachments added by the student. Drive files that correspond to materials with a share mode of STUDENT_COPY may not exist yet if the student has not accessed the assignment in Classroom. Some attachment metadata is only populated if the requesting user has permission to access it. Identifier and alternate_link fields are always available, but others (for example, title) may not be.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public Attachment[] Attachments { get; set; }
	}
	
	/// <summary>
	/// Attachment added to student assignment work. When creating attachments, setting the `form` field is not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attachment
	{
		
		/// <summary>
		/// Representation of a Google Drive file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveFile")]
		public DriveFile DriveFile { get; set; }
		
		/// <summary>
		/// Google Forms item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public Form Form { get; set; }
		
		/// <summary>
		/// URL item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// YouTube video item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youTubeVideo")]
		public YouTubeVideo YouTubeVideo { get; set; }
	}
	
	/// <summary>
	/// A reference to a Cloud Pub/Sub topic. To register for notifications, the owner of the topic must grant `classroom-notifications@system.gserviceaccount.com` the `projects.topics.publish` permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudPubsubTopic
	{
		
		/// <summary>
		/// The `name` field of a Cloud Pub/Sub [Topic](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicName")]
		public string TopicName { get; set; }
	}
	
	/// <summary>
	/// A Course in Classroom.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Course
	{
		
		/// <summary>
		/// Absolute link to this course in the Classroom web UI. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. The Calendar for a course is created asynchronously when the course is set to `CourseState.ACTIVE` for the first time (at creation time or when it is updated to `ACTIVE` through the UI or the API). The Calendar ID will not be populated until the creation process is completed. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		/// <summary>
		/// The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseGroupEmail")]
		public string CourseGroupEmail { get; set; }
		
		/// <summary>
		/// Sets of materials that appear on the "about" page of this course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseMaterialSets")]
		public CourseMaterialSet[] CourseMaterialSets { get; set; }
		
		/// <summary>
		/// State of the course. If unspecified, the default state is `PROVISIONED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseState")]
		public System.Nullable<CourseCourseState> CourseState { get; set; }
		
		/// <summary>
		/// Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Optional description. For example, "We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional heading for the description. For example, "Welcome to 10th Grade Biology." If set, this field must be a valid UTF-8 string and no longer than 3600 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionHeading")]
		public string DescriptionHeading { get; set; }
		
		/// <summary>
		/// Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentCode")]
		public string EnrollmentCode { get; set; }
		
		/// <summary>
		/// The gradebook settings for a course. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradebookSettings")]
		public GradebookSettings GradebookSettings { get; set; }
		
		/// <summary>
		/// Whether or not guardian notifications are enabled for this course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guardiansEnabled")]
		public System.Nullable<System.Boolean> GuardiansEnabled { get; set; }
		
		/// <summary>
		/// Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the course. For example, "10th Grade Biology". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public string OwnerId { get; set; }
		
		/// <summary>
		/// Optional room location. For example, "301". If set, this field must be a valid UTF-8 string and no longer than 650 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room")]
		public string Room { get; set; }
		
		/// <summary>
		/// Section of the course. For example, "Period 2". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="section")]
		public string Section { get; set; }
		
		/// <summary>
		/// Representation of a Google Drive folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teacherFolder")]
		public DriveFolder TeacherFolder { get; set; }
		
		/// <summary>
		/// The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teacherGroupEmail")]
		public string TeacherGroupEmail { get; set; }
		
		/// <summary>
		/// Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A set of materials that appears on the "About" page of the course. These materials might include a syllabus, schedule, or other background information relating to the course as a whole.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourseMaterialSet
	{
		
		/// <summary>
		/// Materials attached to this set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public CourseMaterial[] Materials { get; set; }
		
		/// <summary>
		/// Title for this set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A material attached to a course as part of a material set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourseMaterial
	{
		
		/// <summary>
		/// Representation of a Google Drive file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveFile")]
		public DriveFile DriveFile { get; set; }
		
		/// <summary>
		/// Google Forms item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public Form Form { get; set; }
		
		/// <summary>
		/// URL item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// YouTube video item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youTubeVideo")]
		public YouTubeVideo YouTubeVideo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CourseCourseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COURSE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECLINED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 5,
	}
	
	/// <summary>
	/// The gradebook settings for a course. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GradebookSettings
	{
		
		/// <summary>
		/// Indicates how the overall grade is calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculationType")]
		public System.Nullable<GradebookSettingsCalculationType> CalculationType { get; set; }
		
		/// <summary>
		/// Indicates who can see the overall grade..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displaySetting")]
		public System.Nullable<GradebookSettingsDisplaySetting> DisplaySetting { get; set; }
		
		/// <summary>
		/// Grade categories that are available for coursework in the course.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradeCategories")]
		public GradeCategory[] GradeCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GradebookSettingsCalculationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALCULATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTAL_POINTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEIGHTED_CATEGORIES = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GradebookSettingsDisplaySetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY_SETTING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOW_OVERALL_GRADE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIDE_OVERALL_GRADE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOW_TEACHERS_ONLY = 3,
	}
	
	/// <summary>
	/// Details for a grade category in a course. Coursework may have zero or one grade category, and the category may be used in computing the overall grade. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GradeCategory
	{
		
		/// <summary>
		/// Default value of denominator. Only applicable when grade calculation type is TOTAL_POINTS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultGradeDenominator")]
		public System.Nullable<System.Int32> DefaultGradeDenominator { get; set; }
		
		/// <summary>
		/// ID of the grade category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the grade category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The weight of the category average as part of overall average. A weight of 12.34% is represented as 123400 (100% is 1,000,000). The last two digits should always be zero since we use two decimal precision. Only applicable when grade calculation type is WEIGHTED_CATEGORIES.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// Alternative identifier for a course. An alias uniquely identifies a course. It must be unique within one of the following scopes: * domain: A domain-scoped alias is visible to all users within the alias creator's domain and can be created only by a domain admin. A domain-scoped alias is often used when a course has an identifier external to Classroom. * project: A project-scoped alias is visible to any request from an application using the Developer Console project ID that created the alias and can be created by any project. A project-scoped alias is often used when an application has alternative identifiers. A random value can also be used to avoid duplicate courses in the event of transmission failures, as retrying a request will return `ALREADY_EXISTS` if a previous one has succeeded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourseAlias
	{
		
		/// <summary>
		/// Alias string. The format of the string indicates the desired alias scoping. * `d:` indicates a domain-scoped alias. Example: `d:math_101` * `p:` indicates a project-scoped alias. Example: `p:abc123` This field has a maximum length of 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
	}
	
	/// <summary>
	/// Information about a `Feed` with a `feed_type` of `COURSE_ROSTER_CHANGES`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourseRosterChangesInfo
	{
		
		/// <summary>
		/// The `course_id` of the course to subscribe to roster changes for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
	}
	
	/// <summary>
	/// Course work created by a teacher for students of the course.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourseWork
	{
		
		/// <summary>
		/// Absolute link to this course work in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigneeMode")]
		public AnnouncementAssigneeMode AssigneeMode { get; set; }
		
		/// <summary>
		/// Additional details for assignments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public Assignment Assignment { get; set; }
		
		/// <summary>
		/// Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedWithDeveloper")]
		public System.Nullable<System.Boolean> AssociatedWithDeveloper { get; set; }
		
		/// <summary>
		/// Identifier of the course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// Timestamp when this course work was created. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Identifier for the user that created the coursework. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public string CreatorUserId { get; set; }
		
		/// <summary>
		/// Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public Date DueDate { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueTime")]
		public TimeOfDay DueTime { get; set; }
		
		/// <summary>
		/// Details for a grade category in a course. Coursework may have zero or one grade category, and the category may be used in computing the overall grade. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradeCategory")]
		public GradeCategory GradeCategory { get; set; }
		
		/// <summary>
		/// Classroom-assigned identifier of this course work, unique per course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualStudentsOptions")]
		public IndividualStudentsOptions IndividualStudentsOptions { get; set; }
		
		/// <summary>
		/// Additional materials. CourseWork must have no more than 20 material items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public Material[] Materials { get; set; }
		
		/// <summary>
		/// Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPoints")]
		public System.Nullable<System.Double> MaxPoints { get; set; }
		
		/// <summary>
		/// Additional details for multiple-choice questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleChoiceQuestion")]
		public MultipleChoiceQuestion MultipleChoiceQuestion { get; set; }
		
		/// <summary>
		/// Optional timestamp when this course work is scheduled to be published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public string ScheduledTime { get; set; }
		
		/// <summary>
		/// Status of this course work. If unspecified, the default state is `DRAFT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CourseWorkState> State { get; set; }
		
		/// <summary>
		/// Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submissionModificationMode")]
		public System.Nullable<CourseWorkSubmissionModificationMode> SubmissionModificationMode { get; set; }
		
		/// <summary>
		/// Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Identifier for the topic that this coursework is associated with. Must match an existing topic in the course.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public string TopicId { get; set; }
		
		/// <summary>
		/// Timestamp of the most recent change to this course work. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Type of this course work. The type is set when the course work is created and cannot be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public System.Nullable<CourseWorkWorkType> WorkType { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// Additional details for multiple-choice questions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultipleChoiceQuestion
	{
		
		/// <summary>
		/// Possible choices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="choices")]
		public string[] Choices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CourseWorkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COURSE_WORK_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CourseWorkSubmissionModificationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMISSION_MODIFICATION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIABLE_UNTIL_TURNED_IN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIABLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CourseWorkWorkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COURSE_WORK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSIGNMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHORT_ANSWER_QUESTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE_CHOICE_QUESTION = 3,
	}
	
	/// <summary>
	/// Information about a `Feed` with a `feed_type` of `COURSE_WORK_CHANGES`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourseWorkChangesInfo
	{
		
		/// <summary>
		/// The `course_id` of the course to subscribe to work changes for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
	}
	
	/// <summary>
	/// Course work material created by a teacher for students of the course
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourseWorkMaterial
	{
		
		/// <summary>
		/// Absolute link to this course work material in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Assignee mode of the course work material. If unspecified, the default value is `ALL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigneeMode")]
		public AnnouncementAssigneeMode AssigneeMode { get; set; }
		
		/// <summary>
		/// Identifier of the course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// Timestamp when this course work material was created. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Identifier for the user that created the course work material. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorUserId")]
		public string CreatorUserId { get; set; }
		
		/// <summary>
		/// Optional description of this course work material. The text must be a valid UTF-8 string containing no more than 30,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Classroom-assigned identifier of this course work material, unique per course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualStudentsOptions")]
		public IndividualStudentsOptions IndividualStudentsOptions { get; set; }
		
		/// <summary>
		/// Additional materials. A course work material must have no more than 20 material items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public Material[] Materials { get; set; }
		
		/// <summary>
		/// Optional timestamp when this course work material is scheduled to be published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public string ScheduledTime { get; set; }
		
		/// <summary>
		/// Status of this course work material. If unspecified, the default state is `DRAFT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CourseWorkMaterialState> State { get; set; }
		
		/// <summary>
		/// Title of this course work material. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Identifier for the topic that this course work material is associated with. Must match an existing topic in the course.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public string TopicId { get; set; }
		
		/// <summary>
		/// Timestamp of the most recent change to this course work material. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CourseWorkMaterialState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COURSEWORK_MATERIAL_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A class of notifications that an application can register to receive. For example: "all roster changes for a domain".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Feed
	{
		
		/// <summary>
		/// Information about a `Feed` with a `feed_type` of `COURSE_ROSTER_CHANGES`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseRosterChangesInfo")]
		public CourseRosterChangesInfo CourseRosterChangesInfo { get; set; }
		
		/// <summary>
		/// Information about a `Feed` with a `feed_type` of `COURSE_WORK_CHANGES`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseWorkChangesInfo")]
		public CourseWorkChangesInfo CourseWorkChangesInfo { get; set; }
		
		/// <summary>
		/// The type of feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedType")]
		public System.Nullable<FeedFeedType> FeedType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FeedFeedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEED_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_ROSTER_CHANGES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COURSE_ROSTER_CHANGES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COURSE_WORK_CHANGES = 3,
	}
	
	/// <summary>
	/// Global user permission description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalPermission
	{
		
		/// <summary>
		/// Permission value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public System.Nullable<GlobalPermissionPermission> Permission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GlobalPermissionPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_COURSE = 1,
	}
	
	/// <summary>
	/// The history of each grade on this submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GradeHistory
	{
		
		/// <summary>
		/// The teacher who made the grade change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actorUserId")]
		public string ActorUserId { get; set; }
		
		/// <summary>
		/// The type of grade change at this time in the submission grade history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradeChangeType")]
		public System.Nullable<GradeHistoryGradeChangeType> GradeChangeType { get; set; }
		
		/// <summary>
		/// When the grade of the submission was changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradeTimestamp")]
		public string GradeTimestamp { get; set; }
		
		/// <summary>
		/// The denominator of the grade at this time in the submission grade history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPoints")]
		public System.Nullable<System.Double> MaxPoints { get; set; }
		
		/// <summary>
		/// The numerator of the grade at this time in the submission grade history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointsEarned")]
		public System.Nullable<System.Double> PointsEarned { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GradeHistoryGradeChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_GRADE_CHANGE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT_GRADE_POINTS_EARNED_CHANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSIGNED_GRADE_POINTS_EARNED_CHANGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_POINTS_CHANGE = 3,
	}
	
	/// <summary>
	/// Association between a student and a guardian of that student. The guardian may receive information about the student's course work.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Guardian
	{
		
		/// <summary>
		/// Identifier for the guardian.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guardianId")]
		public string GuardianId { get; set; }
		
		/// <summary>
		/// Global information for a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guardianProfile")]
		public UserProfile GuardianProfile { get; set; }
		
		/// <summary>
		/// The email address to which the initial guardian invitation was sent. This field is only visible to domain administrators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitedEmailAddress")]
		public string InvitedEmailAddress { get; set; }
		
		/// <summary>
		/// Identifier for the student to whom the guardian relationship applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studentId")]
		public string StudentId { get; set; }
	}
	
	/// <summary>
	/// Global information for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserProfile
	{
		
		/// <summary>
		/// Email address of the user. Must request `https://www.googleapis.com/auth/classroom.profile.emails` scope for this field to be populated in a response body. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Identifier of the user. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Details of the user's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		/// <summary>
		/// Global permissions of the user. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public GlobalPermission[] Permissions { get; set; }
		
		/// <summary>
		/// URL of user's profile photo. Must request `https://www.googleapis.com/auth/classroom.profile.photos` scope for this field to be populated in a response body. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// Represents whether a Google Workspace for Education user's domain administrator has explicitly verified them as being a teacher. This field is always false if the user is not a member of a Google Workspace for Education domain. Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedTeacher")]
		public System.Nullable<System.Boolean> VerifiedTeacher { get; set; }
	}
	
	/// <summary>
	/// Details of the user's name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Name
	{
		
		/// <summary>
		/// The user's last name. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The user's full name formed by concatenating the first and last name values. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// The user's first name. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
	}
	
	/// <summary>
	/// An invitation to become the guardian of a specified user, sent to a specified email address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GuardianInvitation
	{
		
		/// <summary>
		/// The time that this invitation was created. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Unique identifier for this invitation. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// Email address that the invitation was sent to. This field is only visible to domain administrators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitedEmailAddress")]
		public string InvitedEmailAddress { get; set; }
		
		/// <summary>
		/// The state that this invitation is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GuardianInvitationState> State { get; set; }
		
		/// <summary>
		/// ID of the student (in standard format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studentId")]
		public string StudentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GuardianInvitationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUARDIAN_INVITATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
	}
	
	/// <summary>
	/// An invitation to join a course.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Invitation
	{
		
		/// <summary>
		/// Identifier of the course to invite the user to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// Identifier assigned by Classroom. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<InvitationRole> Role { get; set; }
		
		/// <summary>
		/// Identifier of the invited user. When specified as a parameter of a request, this identifier can be set to one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InvitationRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COURSE_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEACHER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNER = 3,
	}
	
	/// <summary>
	/// Response when listing course work.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnnouncementsResponse
	{
		
		/// <summary>
		/// Announcement items that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="announcements")]
		public Announcement[] Announcements { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing course aliases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCourseAliasesResponse
	{
		
		/// <summary>
		/// The course aliases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public CourseAlias[] Aliases { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing course work material.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCourseWorkMaterialResponse
	{
		
		/// <summary>
		/// Course work material items that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseWorkMaterial")]
		public CourseWorkMaterial[] CourseWorkMaterial { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing course work.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCourseWorkResponse
	{
		
		/// <summary>
		/// Course work items that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseWork")]
		public CourseWork[] CourseWork { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing courses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoursesResponse
	{
		
		/// <summary>
		/// Courses that match the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courses")]
		public Course[] Courses { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing guardian invitations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGuardianInvitationsResponse
	{
		
		/// <summary>
		/// Guardian invitations that matched the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guardianInvitations")]
		public GuardianInvitation[] GuardianInvitations { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing guardians.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGuardiansResponse
	{
		
		/// <summary>
		/// Guardians on this page of results that met the criteria specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guardians")]
		public Guardian[] Guardians { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing invitations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInvitationsResponse
	{
		
		/// <summary>
		/// Invitations that match the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitations")]
		public Invitation[] Invitations { get; set; }
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response when listing student submissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudentSubmissionsResponse
	{
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Student work that matches the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studentSubmissions")]
		public StudentSubmission[] StudentSubmissions { get; set; }
	}
	
	/// <summary>
	/// Student submission for course work. `StudentSubmission` items are generated when a `CourseWork` item is created. Student submissions that have never been accessed (i.e. with `state` = NEW) may not have a creation time or update time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudentSubmission
	{
		
		/// <summary>
		/// Absolute link to the submission in the Classroom web UI. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedGrade")]
		public System.Nullable<System.Double> AssignedGrade { get; set; }
		
		/// <summary>
		/// Student work for an assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignmentSubmission")]
		public AssignmentSubmission AssignmentSubmission { get; set; }
		
		/// <summary>
		/// Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedWithDeveloper")]
		public System.Nullable<System.Boolean> AssociatedWithDeveloper { get; set; }
		
		/// <summary>
		/// Identifier of the course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// Identifier for the course work this corresponds to. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseWorkId")]
		public string CourseWorkId { get; set; }
		
		/// <summary>
		/// Type of course work this submission is for. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseWorkType")]
		public CourseWorkWorkType CourseWorkType { get; set; }
		
		/// <summary>
		/// Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draftGrade")]
		public System.Nullable<System.Double> DraftGrade { get; set; }
		
		/// <summary>
		/// Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this submission is late. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="late")]
		public System.Nullable<System.Boolean> Late { get; set; }
		
		/// <summary>
		/// Student work for a multiple-choice question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multipleChoiceSubmission")]
		public MultipleChoiceSubmission MultipleChoiceSubmission { get; set; }
		
		/// <summary>
		/// Student work for a short answer question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortAnswerSubmission")]
		public ShortAnswerSubmission ShortAnswerSubmission { get; set; }
		
		/// <summary>
		/// State of this submission. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<StudentSubmissionState> State { get; set; }
		
		/// <summary>
		/// The history of the submission (includes state and grade histories). Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submissionHistory")]
		public SubmissionHistory[] SubmissionHistory { get; set; }
		
		/// <summary>
		/// Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Identifier for the student that owns this submission. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Student work for a multiple-choice question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultipleChoiceSubmission
	{
		
		/// <summary>
		/// Student's select choice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
	}
	
	/// <summary>
	/// Student work for a short answer question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShortAnswerSubmission
	{
		
		/// <summary>
		/// Student response to a short-answer question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudentSubmissionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMISSION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TURNED_IN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECLAIMED_BY_STUDENT = 5,
	}
	
	/// <summary>
	/// The history of the submission. This currently includes state and grade histories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubmissionHistory
	{
		
		/// <summary>
		/// The history of each grade on this submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradeHistory")]
		public GradeHistory GradeHistory { get; set; }
		
		/// <summary>
		/// The history of each state this submission has been in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateHistory")]
		public StateHistory StateHistory { get; set; }
	}
	
	/// <summary>
	/// The history of each state this submission has been in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StateHistory
	{
		
		/// <summary>
		/// The teacher or student who made the change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actorUserId")]
		public string ActorUserId { get; set; }
		
		/// <summary>
		/// The workflow pipeline stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<StateHistoryState> State { get; set; }
		
		/// <summary>
		/// When the submission entered this state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTimestamp")]
		public string StateTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StateHistoryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TURNED_IN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECLAIMED_BY_STUDENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDENT_EDITED_AFTER_TURN_IN = 5,
	}
	
	/// <summary>
	/// Response when listing students.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudentsResponse
	{
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Students who match the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="students")]
		public Student[] Students { get; set; }
	}
	
	/// <summary>
	/// Student in a course.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Student
	{
		
		/// <summary>
		/// Identifier of the course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// Global information for a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public UserProfile Profile { get; set; }
		
		/// <summary>
		/// Representation of a Google Drive folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studentWorkFolder")]
		public DriveFolder StudentWorkFolder { get; set; }
		
		/// <summary>
		/// Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Response when listing teachers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTeachersResponse
	{
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Teachers who match the list request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teachers")]
		public Teacher[] Teachers { get; set; }
	}
	
	/// <summary>
	/// Teacher of a course.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Teacher
	{
		
		/// <summary>
		/// Identifier of the course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// Global information for a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public UserProfile Profile { get; set; }
		
		/// <summary>
		/// Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Response when listing topics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTopicResponse
	{
		
		/// <summary>
		/// Token identifying the next page of results to return. If empty, no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Topic items that match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public Topic[] Topic { get; set; }
	}
	
	/// <summary>
	/// Topic created by a teacher for the course
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Topic
	{
		
		/// <summary>
		/// Identifier of the course. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="courseId")]
		public string CourseId { get; set; }
		
		/// <summary>
		/// The name of the topic, generated by the user. Leading and trailing whitespaces, if any, are trimmed. Also, multiple consecutive whitespaces are collapsed into one inside the name. The result must be a non-empty string. Topic names are case sensitive, and must be no longer than 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique identifier for the topic. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public string TopicId { get; set; }
		
		/// <summary>
		/// The time the topic was last updated by the system. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Request to modify assignee mode and options of an announcement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyAnnouncementAssigneesRequest
	{
		
		/// <summary>
		/// Mode of the announcement describing whether it is accessible by all students or specified individual students.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigneeMode")]
		public AnnouncementAssigneeMode AssigneeMode { get; set; }
		
		/// <summary>
		/// Contains fields to add or remove students from a course work or announcement where the `assigneeMode` is set to `INDIVIDUAL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifyIndividualStudentsOptions")]
		public ModifyIndividualStudentsOptions ModifyIndividualStudentsOptions { get; set; }
	}
	
	/// <summary>
	/// Contains fields to add or remove students from a course work or announcement where the `assigneeMode` is set to `INDIVIDUAL_STUDENTS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyIndividualStudentsOptions
	{
		
		/// <summary>
		/// IDs of students to be added as having access to this coursework/announcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addStudentIds")]
		public string[] AddStudentIds { get; set; }
		
		/// <summary>
		/// IDs of students to be removed from having access to this coursework/announcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeStudentIds")]
		public string[] RemoveStudentIds { get; set; }
	}
	
	/// <summary>
	/// Request to modify the attachments of a student submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyAttachmentsRequest
	{
		
		/// <summary>
		/// Attachments to add. A student submission may not have more than 20 attachments. Form attachments are not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addAttachments")]
		public Attachment[] AddAttachments { get; set; }
	}
	
	/// <summary>
	/// Request to modify assignee mode and options of a coursework.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyCourseWorkAssigneesRequest
	{
		
		/// <summary>
		/// Mode of the coursework describing whether it will be assigned to all students or specified individual students.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assigneeMode")]
		public AnnouncementAssigneeMode AssigneeMode { get; set; }
		
		/// <summary>
		/// Contains fields to add or remove students from a course work or announcement where the `assigneeMode` is set to `INDIVIDUAL_STUDENTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifyIndividualStudentsOptions")]
		public ModifyIndividualStudentsOptions ModifyIndividualStudentsOptions { get; set; }
	}
	
	/// <summary>
	/// Request to reclaim a student submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReclaimStudentSubmissionRequest
	{
	}
	
	/// <summary>
	/// An instruction to Classroom to send notifications from the `feed` to the provided destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Registration
	{
		
		/// <summary>
		/// A reference to a Cloud Pub/Sub topic. To register for notifications, the owner of the topic must grant `classroom-notifications@system.gserviceaccount.com` the `projects.topics.publish` permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudPubsubTopic")]
		public CloudPubsubTopic CloudPubsubTopic { get; set; }
		
		/// <summary>
		/// The time until which the `Registration` is effective. This is a read-only field assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public string ExpiryTime { get; set; }
		
		/// <summary>
		/// A class of notifications that an application can register to receive. For example: "all roster changes for a domain".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feed")]
		public Feed Feed { get; set; }
		
		/// <summary>
		/// A server-generated unique identifier for this `Registration`. Read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registrationId")]
		public string RegistrationId { get; set; }
	}
	
	/// <summary>
	/// Request to return a student submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReturnStudentSubmissionRequest
	{
	}
	
	/// <summary>
	/// Request to turn in a student submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TurnInStudentSubmissionRequest
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of courses that the requesting user is permitted to view, restricted to those that match the request. Returned courses are ordered by creation time, with the most recently created coming first. This method returns the following error codes: * `PERMISSION_DENIED` for access errors. * `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in the query arguments do not exist.
		/// Classroom_courses_list v1/courses
		/// </summary>
		/// <param name="courseStates">Restricts returned courses to those in one of the specified states The default value is ACTIVE, ARCHIVED, PROVISIONED, DECLINED.</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <param name="studentId">Restricts returned courses to those having a student with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <param name="teacherId">Restricts returned courses to those having a teacher with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<ListCoursesResponse> Classroom_courses_listAsync(CourseCourseState[] courseStates, int pageSize, string pageToken, string studentId, string teacherId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses?"+string.Join("&", courseStates.Select(z => $"courseStates={z}"))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&studentId=" + (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"&teacherId=" + (teacherId==null? "" : System.Uri.EscapeDataString(teacherId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCoursesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a course. The user specified in `ownerId` is the owner of the created course and added as a teacher. A non-admin requesting user can only create a course with themselves as the owner. Domain admins can create courses owned by any user within their domain. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is not a valid user. * `FAILED_PRECONDITION` if the course owner's account is disabled or for the following request errors: * UserCannotOwnCourse * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and already exists.
		/// Classroom_courses_create v1/courses
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Course> Classroom_courses_createAsync(Course requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Course>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of aliases for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access errors. * `NOT_FOUND` if the course does not exist.
		/// Classroom_courses_aliases_list v1/courses/{courseId}/aliases
		/// </summary>
		/// <param name="courseId">The identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCourseAliasesResponse> Classroom_courses_aliases_listAsync(string courseId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/aliases&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCourseAliasesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an alias for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already exists. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to access a domain-scoped alias).
		/// Classroom_courses_aliases_create v1/courses/{courseId}/aliases
		/// </summary>
		/// <param name="courseId">Identifier of the course to alias. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<CourseAlias> Classroom_courses_aliases_createAsync(string courseId, CourseAlias requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/aliases";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseAlias>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an alias of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access errors. * `NOT_FOUND` if the alias does not exist. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to delete a domain-scoped alias).
		/// Classroom_courses_aliases_delete v1/courses/{courseId}/aliases/{alias}
		/// </summary>
		/// <param name="courseId">Identifier of the course whose alias should be deleted. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="alias">Alias to delete. This may not be the Classroom-assigned identifier.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_aliases_deleteAsync(string courseId, string alias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/aliases/"+ (alias==null? "" : System.Uri.EscapeDataString(alias));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of announcements that the requester is permitted to view. Course students may only view `PUBLISHED` announcements. Course teachers and domain administrators may view all announcements. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
		/// Classroom_courses_announcements_list v1/courses/{courseId}/announcements
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="announcementStates">Restriction on the `state` of announcements returned. If this argument is left unspecified, the default value is `PUBLISHED`.</param>
		/// <param name="orderBy">Optional sort ordering for results. A comma-separated list of fields with an optional sort direction keyword. Supported field is `updateTime`. Supported direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples: `updateTime asc`, `updateTime`</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAnnouncementsResponse> Classroom_courses_announcements_listAsync(string courseId, AnnouncementState[] announcementStates, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/announcements&"+string.Join("&", announcementStates.Select(z => $"announcementStates={z}"))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAnnouncementsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create announcements in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible
		/// Classroom_courses_announcements_create v1/courses/{courseId}/announcements
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<Announcement> Classroom_courses_announcements_createAsync(string courseId, Announcement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/announcements";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Announcement>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an announcement. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding announcement item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.
		/// Classroom_courses_announcements_delete v1/courses/{courseId}/announcements/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the announcement to delete. This identifier is a Classroom-assigned identifier.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_announcements_deleteAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/announcements/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or announcement, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or announcement does not exist.
		/// Classroom_courses_announcements_get v1/courses/{courseId}/announcements/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the announcement.</param>
		/// <returns>Successful response</returns>
		public async Task<Announcement> Classroom_courses_announcements_getAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/announcements/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Announcement>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates one or more fields of an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if the requested course or announcement does not exist
		/// Classroom_courses_announcements_patch v1/courses/{courseId}/announcements/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the announcement.</param>
		/// <param name="updateMask">Mask that identifies which fields on the announcement to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the Announcement object. If a field that does not support empty values is included in the update mask and not set in the Announcement object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified by teachers: * `text` * `state` * `scheduled_time`</param>
		/// <returns>Successful response</returns>
		public async Task<Announcement> Classroom_courses_announcements_patchAsync(string courseId, string id, string updateMask, Announcement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/announcements/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Announcement>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Modifies assignee mode and options of an announcement. Only a teacher of the course that contains the announcement may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.
		/// Classroom_courses_announcements_modifyAssignees v1/courses/{courseId}/announcements/{id}:modifyAssignees
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the announcement.</param>
		/// <returns>Successful response</returns>
		public async Task<Announcement> Classroom_courses_announcements_modifyAssigneesAsync(string courseId, string id, ModifyAnnouncementAssigneesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/announcements/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":modifyAssignees";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Announcement>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of course work that the requester is permitted to view. Course students may only view `PUBLISHED` course work. Course teachers and domain administrators may view all course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
		/// Classroom_courses_courseWork_list v1/courses/{courseId}/courseWork
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkStates">Restriction on the work status to return. Only courseWork that matches is returned. If unspecified, items with a work status of `PUBLISHED` is returned.</param>
		/// <param name="orderBy">Optional sort ordering for results. A comma-separated list of fields with an optional sort direction keyword. Supported fields are `updateTime` and `dueDate`. Supported direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples: `dueDate asc,updateTime desc`, `updateTime,dueDate desc`</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCourseWorkResponse> Classroom_courses_courseWork_listAsync(string courseId, CourseWorkState[] courseWorkStates, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork&"+string.Join("&", courseWorkStates.Select(z => $"courseWorkStates={z}"))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCourseWorkResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates course work. The resulting course work (and corresponding student submissions) are associated with the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to make the request. Classroom API requests to modify course work and student submissions must be made with an OAuth client ID from the associated Developer Console project. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible
		/// Classroom_courses_courseWork_create v1/courses/{courseId}/courseWork
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<CourseWork> Classroom_courses_courseWork_createAsync(string courseId, CourseWork requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseWork>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of student submissions that the requester is permitted to view, factoring in the OAuth scopes of the request. `-` may be specified as the `course_work_id` to include student submissions for multiple course work items. Course students may only view their own work. Course teachers and domain administrators may view all student submissions. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
		/// Classroom_courses_courseWork_studentSubmissions_list v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkId">Identifier of the student work to request. This may be set to the string literal `"-"` to request student work for all course work in the specified course.</param>
		/// <param name="late">Requested lateness value. If specified, returned student submissions are restricted by the requested value. If unspecified, submissions are returned regardless of `late` value.</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <param name="states">Requested submission states. If specified, returned student submissions match one of the specified submission states.</param>
		/// <param name="userId">Optional argument to restrict returned student work to those owned by the student with the specified identifier. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<ListStudentSubmissionsResponse> Classroom_courses_courseWork_studentSubmissions_listAsync(string courseId, string courseWorkId, Classroom_courses_courseWork_studentSubmissions_listLate late, int pageSize, string pageToken, StudentSubmissionState[] states, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (courseWorkId==null? "" : System.Uri.EscapeDataString(courseWorkId))+"/studentSubmissions&late=" + late+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", states.Select(z => $"states={z}"))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStudentSubmissionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a student submission. * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, course work, or student submission or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
		/// Classroom_courses_courseWork_studentSubmissions_get v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkId">Identifier of the course work.</param>
		/// <param name="id">Identifier of the student submission.</param>
		/// <returns>Successful response</returns>
		public async Task<StudentSubmission> Classroom_courses_courseWork_studentSubmissions_getAsync(string courseId, string courseWorkId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (courseWorkId==null? "" : System.Uri.EscapeDataString(courseWorkId))+"/studentSubmissions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StudentSubmission>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates one or more fields of a student submission. See google.classroom.v1.StudentSubmission for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
		/// Classroom_courses_courseWork_studentSubmissions_patch v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkId">Identifier of the course work.</param>
		/// <param name="id">Identifier of the student submission.</param>
		/// <param name="updateMask">Mask that identifies which fields on the student submission to update. This field is required to do an update. The update fails if invalid fields are specified. The following fields may be specified by teachers: * `draft_grade` * `assigned_grade`</param>
		/// <returns>Successful response</returns>
		public async Task<StudentSubmission> Classroom_courses_courseWork_studentSubmissions_patchAsync(string courseId, string courseWorkId, string id, string updateMask, StudentSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (courseWorkId==null? "" : System.Uri.EscapeDataString(courseWorkId))+"/studentSubmissions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StudentSubmission>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Modifies attachments of student submission. Attachments may only be added to student submissions belonging to course work objects with a `workType` of `ASSIGNMENT`. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, if the user is not permitted to modify attachments on the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
		/// Classroom_courses_courseWork_studentSubmissions_modifyAttachments v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkId">Identifier of the course work.</param>
		/// <param name="id">Identifier of the student submission.</param>
		/// <returns>Successful response</returns>
		public async Task<StudentSubmission> Classroom_courses_courseWork_studentSubmissions_modifyAttachmentsAsync(string courseId, string courseWorkId, string id, ModifyAttachmentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (courseWorkId==null? "" : System.Uri.EscapeDataString(courseWorkId))+"/studentSubmissions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":modifyAttachments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StudentSubmission>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reclaims a student submission on behalf of the student that owns it. Reclaiming a student submission transfers ownership of attached Drive files to the student and updates the submission state. Only the student that owns the requested student submission may call this method, and only for a student submission that has been turned in. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, unsubmit the requested student submission, or for access errors. * `FAILED_PRECONDITION` if the student submission has not been turned in. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
		/// Classroom_courses_courseWork_studentSubmissions_reclaim v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkId">Identifier of the course work.</param>
		/// <param name="id">Identifier of the student submission.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_courseWork_studentSubmissions_reclaimAsync(string courseId, string courseWorkId, string id, ReclaimStudentSubmissionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (courseWorkId==null? "" : System.Uri.EscapeDataString(courseWorkId))+"/studentSubmissions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":reclaim";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a student submission. Returning a student submission transfers ownership of attached Drive files to the student and may also update the submission state. Unlike the Classroom application, returning a student submission does not set assignedGrade to the draftGrade value. Only a teacher of the course that contains the requested student submission may call this method. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, return the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
		/// Classroom_courses_courseWork_studentSubmissions_return v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkId">Identifier of the course work.</param>
		/// <param name="id">Identifier of the student submission.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_courseWork_studentSubmissions_returnAsync(string courseId, string courseWorkId, string id, ReturnStudentSubmissionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (courseWorkId==null? "" : System.Uri.EscapeDataString(courseWorkId))+"/studentSubmissions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":return";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Turns in a student submission. Turning in a student submission transfers ownership of attached Drive files to the teacher and may also update the submission state. This may only be called by the student that owns the specified student submission. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, turn in the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
		/// Classroom_courses_courseWork_studentSubmissions_turnIn v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkId">Identifier of the course work.</param>
		/// <param name="id">Identifier of the student submission.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_courseWork_studentSubmissions_turnInAsync(string courseId, string courseWorkId, string id, TurnInStudentSubmissionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (courseWorkId==null? "" : System.Uri.EscapeDataString(courseWorkId))+"/studentSubmissions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":turnIn";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a course work. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.
		/// Classroom_courses_courseWork_delete v1/courses/{courseId}/courseWork/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the course work to delete. This identifier is a Classroom-assigned identifier.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_courseWork_deleteAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.
		/// Classroom_courses_courseWork_get v1/courses/{courseId}/courseWork/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the course work.</param>
		/// <returns>Successful response</returns>
		public async Task<CourseWork> Classroom_courses_courseWork_getAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseWork>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates one or more fields of a course work. See google.classroom.v1.CourseWork for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
		/// Classroom_courses_courseWork_patch v1/courses/{courseId}/courseWork/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the course work.</param>
		/// <param name="updateMask">Mask that identifies which fields on the course work to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the `CourseWork` object. If a field that does not support empty values is included in the update mask and not set in the `CourseWork` object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified by teachers: * `title` * `description` * `state` * `due_date` * `due_time` * `max_points` * `scheduled_time` * `submission_modification_mode` * `topic_id`</param>
		/// <returns>Successful response</returns>
		public async Task<CourseWork> Classroom_courses_courseWork_patchAsync(string courseId, string id, string updateMask, CourseWork requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseWork>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Modifies assignee mode and options of a coursework. Only a teacher of the course that contains the coursework may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.
		/// Classroom_courses_courseWork_modifyAssignees v1/courses/{courseId}/courseWork/{id}:modifyAssignees
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the coursework.</param>
		/// <returns>Successful response</returns>
		public async Task<CourseWork> Classroom_courses_courseWork_modifyAssigneesAsync(string courseId, string id, ModifyCourseWorkAssigneesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWork/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":modifyAssignees";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseWork>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of course work material that the requester is permitted to view. Course students may only view `PUBLISHED` course work material. Course teachers and domain administrators may view all course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
		/// Classroom_courses_courseWorkMaterials_list v1/courses/{courseId}/courseWorkMaterials
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="courseWorkMaterialStates">Restriction on the work status to return. Only course work material that matches is returned. If unspecified, items with a work status of `PUBLISHED` is returned.</param>
		/// <param name="materialDriveId">Optional filtering for course work material with at least one Drive material whose ID matches the provided string. If `material_link` is also specified, course work material must have materials matching both filters.</param>
		/// <param name="materialLink">Optional filtering for course work material with at least one link material whose URL partially matches the provided string.</param>
		/// <param name="orderBy">Optional sort ordering for results. A comma-separated list of fields with an optional sort direction keyword. Supported field is `updateTime`. Supported direction keywords are `asc` and `desc`. If not specified, `updateTime desc` is the default behavior. Examples: `updateTime asc`, `updateTime`</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCourseWorkMaterialResponse> Classroom_courses_courseWorkMaterials_listAsync(string courseId, CourseWorkMaterialState[] courseWorkMaterialStates, string materialDriveId, string materialLink, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWorkMaterials&"+string.Join("&", courseWorkMaterialStates.Select(z => $"courseWorkMaterialStates={z}"))+"&materialDriveId=" + (materialDriveId==null? "" : System.Uri.EscapeDataString(materialDriveId))+"&materialLink=" + (materialLink==null? "" : System.Uri.EscapeDataString(materialLink))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCourseWorkMaterialResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work material in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed or if more than 20 * materials are provided. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible
		/// Classroom_courses_courseWorkMaterials_create v1/courses/{courseId}/courseWorkMaterials
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<CourseWorkMaterial> Classroom_courses_courseWorkMaterials_createAsync(string courseId, CourseWorkMaterial requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWorkMaterials";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseWorkMaterial>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a course work material. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work material item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work material, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.
		/// Classroom_courses_courseWorkMaterials_delete v1/courses/{courseId}/courseWorkMaterials/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the course work material to delete. This identifier is a Classroom-assigned identifier.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_courseWorkMaterials_deleteAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWorkMaterials/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work material, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work material does not exist.
		/// Classroom_courses_courseWorkMaterials_get v1/courses/{courseId}/courseWorkMaterials/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the course work material.</param>
		/// <returns>Successful response</returns>
		public async Task<CourseWorkMaterial> Classroom_courses_courseWorkMaterials_getAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWorkMaterials/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseWorkMaterial>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates one or more fields of a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if the requested course or course work material does not exist
		/// Classroom_courses_courseWorkMaterials_patch v1/courses/{courseId}/courseWorkMaterials/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the course work material.</param>
		/// <param name="updateMask">Mask that identifies which fields on the course work material to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the course work material object. If a field that does not support empty values is included in the update mask and not set in the course work material object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified by teachers: * `title` * `description` * `state` * `scheduled_time` * `topic_id`</param>
		/// <returns>Successful response</returns>
		public async Task<CourseWorkMaterial> Classroom_courses_courseWorkMaterials_patchAsync(string courseId, string id, string updateMask, CourseWorkMaterial requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/courseWorkMaterials/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CourseWorkMaterial>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of students of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
		/// Classroom_courses_students_list v1/courses/{courseId}/students
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="pageSize">Maximum number of items to return. The default is 30 if unspecified or `0`. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListStudentsResponse> Classroom_courses_students_listAsync(string courseId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/students&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStudentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a user as a student of a course. Domain administrators are permitted to [directly add](https://developers.google.com/classroom/guides/manage-users) users within their domain as students to courses within their domain. Students are permitted to add themselves to a course using an enrollment code. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * UserGroupsMembershipLimitReached * InactiveCourseOwner * `ALREADY_EXISTS` if the user is already a student or teacher in the course.
		/// Classroom_courses_students_create v1/courses/{courseId}/students
		/// </summary>
		/// <param name="courseId">Identifier of the course to create the student in. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="enrollmentCode">Enrollment code of the course to create the student in. This code is required if userId corresponds to the requesting user; it may be omitted if the requesting user has administrative permissions to create students for any user.</param>
		/// <returns>Successful response</returns>
		public async Task<Student> Classroom_courses_students_createAsync(string courseId, string enrollmentCode, Student requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/students&enrollmentCode=" + (enrollmentCode==null? "" : System.Uri.EscapeDataString(enrollmentCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Student>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.
		/// Classroom_courses_students_delete v1/courses/{courseId}/students/{userId}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="userId">Identifier of the student to delete. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_students_deleteAsync(string courseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/students/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.
		/// Classroom_courses_students_get v1/courses/{courseId}/students/{userId}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="userId">Identifier of the student to return. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<Student> Classroom_courses_students_getAsync(string courseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/students/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Student>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of teachers of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.
		/// Classroom_courses_teachers_list v1/courses/{courseId}/teachers
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="pageSize">Maximum number of items to return. The default is 30 if unspecified or `0`. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTeachersResponse> Classroom_courses_teachers_listAsync(string courseId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/teachers&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTeachersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a teacher of a course. Domain administrators are permitted to [directly add](https://developers.google.com/classroom/guides/manage-users) users within their domain as teachers to courses within their domain. Non-admin users should send an Invitation instead. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * InactiveCourseOwner * `ALREADY_EXISTS` if the user is already a teacher or student in the course.
		/// Classroom_courses_teachers_create v1/courses/{courseId}/teachers
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<Teacher> Classroom_courses_teachers_createAsync(string courseId, Teacher requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/teachers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Teacher>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the specified teacher from the specified course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher of this course. * `FAILED_PRECONDITION` if the requested ID belongs to the owner of the course Drive folder. * `FAILED_PRECONDITION` if the course no longer has an active owner.
		/// Classroom_courses_teachers_delete v1/courses/{courseId}/teachers/{userId}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="userId">Identifier of the teacher to delete. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_teachers_deleteAsync(string courseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/teachers/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a teacher of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist.
		/// Classroom_courses_teachers_get v1/courses/{courseId}/teachers/{userId}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="userId">Identifier of the teacher to return. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<Teacher> Classroom_courses_teachers_getAsync(string courseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/teachers/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Teacher>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of topics that the requester is permitted to view. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
		/// Classroom_courses_topics_list v1/courses/{courseId}/topics
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTopicResponse> Classroom_courses_topics_listAsync(string courseId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/topics&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTopicResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create a topic in the requested course, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.
		/// Classroom_courses_topics_create v1/courses/{courseId}/topics
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<Topic> Classroom_courses_topics_createAsync(string courseId, Topic requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/topics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Topic>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not allowed to delete the requested topic or for access errors. * `FAILED_PRECONDITION` if the requested topic has already been deleted. * `NOT_FOUND` if no course or topic exists with the requested ID.
		/// Classroom_courses_topics_delete v1/courses/{courseId}/topics/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the topic to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_topics_deleteAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/topics/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or topic, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist.
		/// Classroom_courses_topics_get v1/courses/{courseId}/topics/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course.</param>
		/// <param name="id">Identifier of the topic.</param>
		/// <returns>Successful response</returns>
		public async Task<Topic> Classroom_courses_topics_getAsync(string courseId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/topics/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Topic>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates one or more fields of a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding topic or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist
		/// Classroom_courses_topics_patch v1/courses/{courseId}/topics/{id}
		/// </summary>
		/// <param name="courseId">Identifier of the course. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="id">Identifier of the topic.</param>
		/// <param name="updateMask">Mask that identifies which fields on the topic to update. This field is required to do an update. The update fails if invalid fields are specified. If a field supports empty values, it can be cleared by specifying it in the update mask and not in the Topic object. If a field that does not support empty values is included in the update mask and not set in the Topic object, an `INVALID_ARGUMENT` error is returned. The following fields may be specified: * `name`</param>
		/// <returns>Successful response</returns>
		public async Task<Topic> Classroom_courses_topics_patchAsync(string courseId, string id, string updateMask, Topic requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"/topics/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Topic>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.
		/// Classroom_courses_delete v1/courses/{id}
		/// </summary>
		/// <param name="id">Identifier of the course to delete. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_courses_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.
		/// Classroom_courses_get v1/courses/{id}
		/// </summary>
		/// <param name="id">Identifier of the course to return. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<Course> Classroom_courses_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Course>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates one or more fields in a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields are specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable * InactiveCourseOwner * IneligibleOwner
		/// Classroom_courses_patch v1/courses/{id}
		/// </summary>
		/// <param name="id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <param name="updateMask">Mask that identifies which fields on the course to update. This field is required to do an update. The update will fail if invalid fields are specified. The following fields are valid: * `name` * `section` * `descriptionHeading` * `description` * `room` * `courseState` * `ownerId` Note: patches to ownerId are treated as being effective immediately, but in practice it may take some time for the ownership transfer of all affected resources to complete. When set in a query parameter, this field should be specified as `updateMask=,,...`</param>
		/// <returns>Successful response</returns>
		public async Task<Course> Classroom_courses_patchAsync(string id, string updateMask, Course requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Course>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable
		/// Classroom_courses_update v1/courses/{id}
		/// </summary>
		/// <param name="id">Identifier of the course to update. This identifier can be either the Classroom-assigned identifier or an alias.</param>
		/// <returns>Successful response</returns>
		public async Task<Course> Classroom_courses_updateAsync(string id, Course requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/courses/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Course>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of invitations that the requesting user is permitted to view, restricted to those that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for access errors.
		/// Classroom_invitations_list v1/invitations
		/// </summary>
		/// <param name="courseId">Restricts returned invitations to those for a course with the specified identifier.</param>
		/// <param name="pageSize">Maximum number of items to return. The default is 500 if unspecified or `0`. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <param name="userId">Restricts returned invitations to those for a specific user. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<ListInvitationsResponse> Classroom_invitations_listAsync(string courseId, int pageSize, string pageToken, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invitations?courseId=" + (courseId==null? "" : System.Uri.EscapeDataString(courseId))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListInvitationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an invitation. Only one invitation for a user and course may exist at a time. Delete and re-create an invitation to make changes. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION`: * if the requested user's account is disabled. * if the user already has this role or a role with greater permissions. * for the following request errors: * IneligibleOwner * `ALREADY_EXISTS` if an invitation for the specified user and course already exists.
		/// Classroom_invitations_create v1/invitations
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Invitation> Classroom_invitations_createAsync(Invitation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invitations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Invitation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
		/// Classroom_invitations_delete v1/invitations/{id}
		/// </summary>
		/// <param name="id">Identifier of the invitation to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_invitations_deleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invitations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.
		/// Classroom_invitations_get v1/invitations/{id}
		/// </summary>
		/// <param name="id">Identifier of the invitation to return.</param>
		/// <returns>Successful response</returns>
		public async Task<Invitation> Classroom_invitations_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invitations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Invitation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Accepts an invitation, removing it and adding the invited user to the teachers or students (as appropriate) of the specified course. Only the invited user may accept an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to accept the requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.
		/// Classroom_invitations_accept v1/invitations/{id}:accept
		/// </summary>
		/// <param name="id">Identifier of the invitation to accept.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_invitations_acceptAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invitations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":accept";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a `Registration`, causing Classroom to start sending notifications from the provided `feed` to the destination provided in `cloudPubSubTopic`. Returns the created `Registration`. Currently, this will be the same as the argument, but with server-assigned fields such as `expiry_time` and `id` filled in. Note that any value specified for the `expiry_time` or `id` fields will be ignored. While Classroom may validate the `cloudPubSubTopic` and return errors on a best effort basis, it is the caller's responsibility to ensure that it exists and that Classroom has permission to publish to it. This method may return the following error codes: * `PERMISSION_DENIED` if: * the authenticated user does not have permission to receive notifications from the requested field; or * the current user has not granted access to the current Cloud project with the appropriate scope for the requested feed. Note that domain-wide delegation of authority is not currently supported for this purpose. If the request has the appropriate scope, but no grant exists, a Request Errors is returned. * another access error is encountered. * `INVALID_ARGUMENT` if: * no `cloudPubsubTopic` is specified, or the specified `cloudPubsubTopic` is not valid; or * no `feed` is specified, or the specified `feed` is not valid. * `NOT_FOUND` if: * the specified `feed` cannot be located, or the requesting user does not have permission to determine whether or not it exists; or * the specified `cloudPubsubTopic` cannot be located, or Classroom has not been granted permission to publish to it.
		/// Classroom_registrations_create v1/registrations
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Registration> Classroom_registrations_createAsync(Registration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registrations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Registration>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a `Registration`, causing Classroom to stop sending notifications for that `Registration`.
		/// Classroom_registrations_delete v1/registrations/{registrationId}
		/// </summary>
		/// <param name="registrationId">The `registration_id` of the `Registration` to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_registrations_deleteAsync(string registrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/registrations/"+ (registrationId==null? "" : System.Uri.EscapeDataString(registrationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of guardian invitations that the requesting user is permitted to view, filtered by the parameters provided. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian invitations for that student, if `"-"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` or `state` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.
		/// Classroom_userProfiles_guardianInvitations_list v1/userProfiles/{studentId}/guardianInvitations
		/// </summary>
		/// <param name="studentId">The ID of the student whose guardian invitations are to be returned. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating that results should be returned for all students that the requesting user is permitted to view guardian invitations.</param>
		/// <param name="invitedEmailAddress">If specified, only results with the specified `invited_email_address` are returned.</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <param name="states">If specified, only results with the specified `state` values are returned. Otherwise, results with a `state` of `PENDING` are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGuardianInvitationsResponse> Classroom_userProfiles_guardianInvitations_listAsync(string studentId, string invitedEmailAddress, int pageSize, string pageToken, GuardianInvitationState[] states, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"/guardianInvitations&invitedEmailAddress=" + (invitedEmailAddress==null? "" : System.Uri.EscapeDataString(invitedEmailAddress))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&"+string.Join("&", states.Select(z => $"states={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListGuardianInvitationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a guardian invitation, and sends an email to the guardian asking them to confirm that they are the student's guardian. Once the guardian accepts the invitation, their `state` will change to `COMPLETED` and they will start receiving guardian notifications. A `Guardian` resource will also be created to represent the active guardian. The request object must have the `student_id` and `invited_email_address` fields set. Failing to set these fields, or setting any other fields in the request, will result in an error. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if the guardian in question has already rejected too many requests for that student, if guardians are not enabled for the domain in question, or for other access errors. * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian link limit. * `INVALID_ARGUMENT` if the guardian email address is not valid (for example, if it is too long), or if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API). This error will also be returned if read-only fields are set, or if the `state` field is set to to a value other than `PENDING`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student. * `ALREADY_EXISTS` if there is already a pending guardian invitation for the student and `invited_email_address` provided, or if the provided `invited_email_address` matches the Google account of an existing `Guardian` for this user.
		/// Classroom_userProfiles_guardianInvitations_create v1/userProfiles/{studentId}/guardianInvitations
		/// </summary>
		/// <param name="studentId">ID of the student (in standard format)</param>
		/// <returns>Successful response</returns>
		public async Task<GuardianInvitation> Classroom_userProfiles_guardianInvitations_createAsync(string studentId, GuardianInvitation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"/guardianInvitations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GuardianInvitation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a specific guardian invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view guardian invitations for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if Classroom cannot find any record of the given student or `invitation_id`. May also be returned if the student exists, but the requesting user does not have access to see that student.
		/// Classroom_userProfiles_guardianInvitations_get v1/userProfiles/{studentId}/guardianInvitations/{invitationId}
		/// </summary>
		/// <param name="studentId">The ID of the student whose guardian invitation is being requested.</param>
		/// <param name="invitationId">The `id` field of the `GuardianInvitation` being requested.</param>
		/// <returns>Successful response</returns>
		public async Task<GuardianInvitation> Classroom_userProfiles_guardianInvitations_getAsync(string studentId, string invitationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"/guardianInvitations/"+ (invitationId==null? "" : System.Uri.EscapeDataString(invitationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GuardianInvitation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Modifies a guardian invitation. Currently, the only valid modification is to change the `state` from `PENDING` to `COMPLETE`. This has the effect of withdrawing the invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if guardians are not enabled for the domain in question or for other access errors. * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state. * `INVALID_ARGUMENT` if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API), or if the passed `GuardianInvitation` has a `state` other than `COMPLETE`, or if it modifies fields other than `state`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student, or if the `id` field does not refer to a guardian invitation known to Classroom.
		/// Classroom_userProfiles_guardianInvitations_patch v1/userProfiles/{studentId}/guardianInvitations/{invitationId}
		/// </summary>
		/// <param name="studentId">The ID of the student whose guardian invitation is to be modified.</param>
		/// <param name="invitationId">The `id` field of the `GuardianInvitation` to be modified.</param>
		/// <param name="updateMask">Mask that identifies which fields on the course to update. This field is required to do an update. The update fails if invalid fields are specified. The following fields are valid: * `state` When set in a query parameter, this field should be specified as `updateMask=,,...`</param>
		/// <returns>Successful response</returns>
		public async Task<GuardianInvitation> Classroom_userProfiles_guardianInvitations_patchAsync(string studentId, string invitationId, string updateMask, GuardianInvitation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"/guardianInvitations/"+ (invitationId==null? "" : System.Uri.EscapeDataString(invitationId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GuardianInvitation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of guardians that the requesting user is permitted to view, restricted to those that match the request. To list guardians for any student that the requesting user may view guardians for, use the literal character `-` for the student ID. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian information for that student, if `"-"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, if the `invited_email_address` filter is set by a user who is not a domain administrator, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.
		/// Classroom_userProfiles_guardians_list v1/userProfiles/{studentId}/guardians
		/// </summary>
		/// <param name="studentId">Filter results by the student who the guardian is linked to. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user * the string literal `"-"`, indicating that results should be returned for all students that the requesting user has access to view.</param>
		/// <param name="invitedEmailAddress">Filter results by the email address that the original invitation was sent to, resulting in this guardian link. This filter can only be used by domain administrators.</param>
		/// <param name="pageSize">Maximum number of items to return. Zero or unspecified indicates that the server may assign a maximum. The server may return fewer than the specified number of results.</param>
		/// <param name="pageToken">nextPageToken value returned from a previous list call, indicating that the subsequent page of results should be returned. The list request must be otherwise identical to the one that resulted in this token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGuardiansResponse> Classroom_userProfiles_guardians_listAsync(string studentId, string invitedEmailAddress, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"/guardians&invitedEmailAddress=" + (invitedEmailAddress==null? "" : System.Uri.EscapeDataString(invitedEmailAddress))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListGuardiansResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a guardian. The guardian will no longer receive guardian notifications and the guardian will no longer be accessible via the API. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to manage guardians for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API). * `NOT_FOUND` if the requesting user is permitted to modify guardians for the requested `student_id`, but no `Guardian` record exists for that student with the provided `guardian_id`.
		/// Classroom_userProfiles_guardians_delete v1/userProfiles/{studentId}/guardians/{guardianId}
		/// </summary>
		/// <param name="studentId">The student whose guardian is to be deleted. One of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <param name="guardianId">The `id` field from a `Guardian`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Classroom_userProfiles_guardians_deleteAsync(string studentId, string guardianId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"/guardians/"+ (guardianId==null? "" : System.Uri.EscapeDataString(guardianId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a specific guardian. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to view guardian information for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if the requesting user is permitted to view guardians for the requested `student_id`, but no `Guardian` record exists for that student that matches the provided `guardian_id`.
		/// Classroom_userProfiles_guardians_get v1/userProfiles/{studentId}/guardians/{guardianId}
		/// </summary>
		/// <param name="studentId">The student whose guardian is being requested. One of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <param name="guardianId">The `id` field from a `Guardian`.</param>
		/// <returns>Successful response</returns>
		public async Task<Guardian> Classroom_userProfiles_guardians_getAsync(string studentId, string guardianId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (studentId==null? "" : System.Uri.EscapeDataString(studentId))+"/guardians/"+ (guardianId==null? "" : System.Uri.EscapeDataString(guardianId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Guardian>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access this user profile, if no profile exists with the requested ID, or for access errors.
		/// Classroom_userProfiles_get v1/userProfiles/{userId}
		/// </summary>
		/// <param name="userId">Identifier of the profile to return. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user</param>
		/// <returns>Successful response</returns>
		public async Task<UserProfile> Classroom_userProfiles_getAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/userProfiles/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserProfile>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Classroom_courses_courseWork_studentSubmissions_listLate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATE_VALUES_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_LATE_ONLY = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
