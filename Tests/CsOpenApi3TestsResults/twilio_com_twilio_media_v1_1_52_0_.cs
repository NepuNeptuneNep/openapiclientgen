//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mediav1media_processor
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MediaProcessor resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The reason why a MediaProcessor ended. When a MediaProcessor is in progress, will be `null`. When a MediaProcessor is completed, can be `ended-via-api`, `max-duration-exceeded`, `error-loading-extension`, `error-streaming-media` or `internal-service-error`. See [ended reasons](/docs/live/api/mediaprocessors#mediaprocessor-ended-reason-values) for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ended_reason")]
		public string Ended_reason { get; set; }
		
		/// <summary>
		/// The [Media Extension](/docs/live/media-extensions-overview) name or URL. Ex: `video-composer-v2`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		/// <summary>
		/// The context of the Media Extension, represented as a JSON dictionary. See the documentation for the specific [Media Extension](/docs/live/media-extensions-overview) you are using for more information about the context to send.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension_context")]
		public string Extension_context { get; set; }
		
		/// <summary>
		/// The maximum time, in seconds, that the MediaProcessor can run before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the MediaProcessor, regardless of whether media is still streaming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_duration")]
		public System.Nullable<System.Int32> Max_duration { get; set; }
		
		/// <summary>
		/// The unique string generated to identify the MediaProcessor resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^ZX[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^ZX[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Mediav1media_processorStatus> Status { get; set; }
		
		/// <summary>
		/// The URL to which Twilio will send asynchronous webhook requests for every MediaProcessor event. See [Status Callbacks](/docs/live/api/status-callbacks) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback")]
		public string Status_callback { get; set; }
		
		/// <summary>
		/// The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback_method")]
		public System.Nullable<Mediav1media_processorStatus_callback_method> Status_callback_method { get; set; }
		
		/// <summary>
		/// The absolute URL of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Mediav1media_processorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Mediav1media_processorStatus_callback_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mediav1media_recording
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the MediaRecording resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The duration of the MediaRecording in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<Mediav1media_recordingFormat> Format { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The size of the recording media in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_size")]
		public System.Nullable<System.Int64> Media_size { get; set; }
		
		/// <summary>
		/// The SID of the MediaProcessor resource which produced the MediaRecording.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^ZX[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processor_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^ZX[0-9a-fA-F]{32}$")]
		public string Processor_sid { get; set; }
		
		/// <summary>
		/// The dimensions of the video image in pixels expressed as columns (width) and rows (height).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		/// <summary>
		/// The unique string generated to identify the MediaRecording resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^KV[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^KV[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The SID of the resource that generated the original media track(s) of the MediaRecording.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^[a-zA-Z]{2}[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z]{2}[0-9a-fA-F]{32}$")]
		public string Source_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Mediav1media_recordingStatus> Status { get; set; }
		
		/// <summary>
		/// The URL to which Twilio will send asynchronous webhook requests for every MediaRecording event. See [Status Callbacks](/docs/live/api/status-callbacks) for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback")]
		public string Status_callback { get; set; }
		
		/// <summary>
		/// The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback_method")]
		public Mediav1media_processorStatus_callback_method Status_callback_method { get; set; }
		
		/// <summary>
		/// The absolute URL of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Mediav1media_recordingFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webm = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Mediav1media_recordingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mediav1player_streamer
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the PlayerStreamer resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ended_reason")]
		public System.Nullable<Mediav1player_streamerEnded_reason> Ended_reason { get; set; }
		
		/// <summary>
		/// The URLs of related resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The maximum time, in seconds, that the PlayerStreamer is active (`created` or `started`) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_duration")]
		public System.Nullable<System.Int32> Max_duration { get; set; }
		
		/// <summary>
		/// The unique string generated to identify the PlayerStreamer resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^VJ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^VJ[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Mediav1player_streamerStatus> Status { get; set; }
		
		/// <summary>
		/// The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/api/status-callbacks) for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback")]
		public string Status_callback { get; set; }
		
		/// <summary>
		/// The HTTP method Twilio should use to call the `status_callback` URL. Can be `POST` or `GET` and the default is `POST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_callback_method")]
		public Mediav1media_processorStatus_callback_method Status_callback_method { get; set; }
		
		/// <summary>
		/// The absolute URL of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Specifies whether the PlayerStreamer is configured to stream video. Defaults to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public System.Nullable<System.Boolean> Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Mediav1player_streamerEnded_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ended-via-api")]
		endedMinusviaMinusapi = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max-duration-exceeded")]
		maxMinusdurationMinusexceeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stream-disconnected-by-source")]
		streamMinusdisconnectedMinusbyMinussource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unexpected-failure")]
		unexpectedMinusfailure = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Mediav1player_streamerStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mediav1player_streamerplayer_streamer_playback_grant
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this resource.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The grant that authorizes the player sdk to connect to the livestream
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grant")]
		public object Grant { get; set; }
		
		/// <summary>
		/// The unique string generated to identify the PlayerStreamer resource that this PlaybackGrant authorizes views for.
		/// Min length: 34
		/// Max length: 34
		/// Pattern: ^VJ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^VJ[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Media_processor_enum_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Media_processor_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Media_processor_enum_update_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Media_recording_enum_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webm = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Media_recording_enum_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Media_recording_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Player_streamer_enum_ended_reason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ended-via-api")]
		endedMinusviaMinusapi = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="max-duration-exceeded")]
		maxMinusdurationMinusexceeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stream-disconnected-by-source")]
		streamMinusdisconnectedMinusbyMinussource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unexpected-failure")]
		unexpectedMinusfailure = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Player_streamer_enum_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Player_streamer_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Player_streamer_enum_update_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of MediaProcessors.
		/// ListMediaProcessor v1/MediaProcessors
		/// </summary>
		/// <param name="Order">The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.</param>
		/// <param name="Status">Status to filter by, with possible values `started`, `ended` or `failed`.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListMediaProcessorReturn> ListMediaProcessorAsync(Media_processor_enum_order Order, Mediav1media_processorStatus Status, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/MediaProcessors?Order=" + Order+"&Status=" + Status+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListMediaProcessorReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single MediaProcessor resource identified by a SID.
		/// FetchMediaProcessor v1/MediaProcessors/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the MediaProcessor resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Mediav1media_processor> FetchMediaProcessorAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/MediaProcessors/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Mediav1media_processor>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of MediaRecordings.
		/// ListMediaRecording v1/MediaRecordings
		/// </summary>
		/// <param name="Order">The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.</param>
		/// <param name="Status">Status to filter by, with possible values `processing`, `completed`, `deleted`, or `failed`.</param>
		/// <param name="ProcessorSid">SID of a MediaProcessor to filter by.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="SourceSid">SID of a MediaRecording source to filter by.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListMediaRecordingReturn> ListMediaRecordingAsync(Media_processor_enum_order Order, Mediav1media_recordingStatus Status, string ProcessorSid, string SourceSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/MediaRecordings?Order=" + Order+"&Status=" + Status+"&ProcessorSid=" + (ProcessorSid==null? "" : System.Uri.EscapeDataString(ProcessorSid))+"&SourceSid=" + (SourceSid==null? "" : System.Uri.EscapeDataString(SourceSid))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListMediaRecordingReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a MediaRecording resource identified by a SID.
		/// DeleteMediaRecording v1/MediaRecordings/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the MediaRecording resource to delete.
		/// Min length: 34
		/// Max length: 34
		// </param>
		public async Task DeleteMediaRecordingAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/MediaRecordings/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single MediaRecording resource identified by a SID.
		/// FetchMediaRecording v1/MediaRecordings/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the MediaRecording resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Mediav1media_recording> FetchMediaRecordingAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/MediaRecordings/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Mediav1media_recording>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of PlayerStreamers.
		/// ListPlayerStreamer v1/PlayerStreamers
		/// </summary>
		/// <param name="Order">The sort order of the list by `date_created`. Can be: `asc` (ascending) or `desc` (descending) with `desc` as the default.</param>
		/// <param name="Status">Status to filter by, with possible values `created`, `started`, `ended`, or `failed`.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListPlayerStreamerReturn> ListPlayerStreamerAsync(Media_processor_enum_order Order, Mediav1player_streamerStatus Status, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/PlayerStreamers?Order=" + Order+"&Status=" + Status+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPlayerStreamerReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a single PlayerStreamer resource identified by a SID.
		/// FetchPlayerStreamer v1/PlayerStreamers/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the PlayerStreamer resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Mediav1player_streamer> FetchPlayerStreamerAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/PlayerStreamers/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Mediav1player_streamer>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
		/// FetchPlayerStreamerPlaybackGrant v1/PlayerStreamers/{Sid}/PlaybackGrant
		/// </summary>
		/// <param name="Sid">The SID of the PlayerStreamer resource to fetch.
		/// Min length: 34
		/// Max length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Mediav1player_streamerplayer_streamer_playback_grant> FetchPlayerStreamerPlaybackGrantAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/PlayerStreamers/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid))+"/PlaybackGrant";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Mediav1player_streamerplayer_streamer_playback_grant>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class ListMediaProcessorReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="media_processors")]
		public Mediav1media_processor[] Media_processors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListMediaProcessorReturnMeta Meta { get; set; }
	}
	
	public class ListMediaProcessorReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListMediaRecordingReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="media_recordings")]
		public Mediav1media_recording[] Media_recordings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListMediaRecordingReturnMeta Meta { get; set; }
	}
	
	public class ListMediaRecordingReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListPlayerStreamerReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListPlayerStreamerReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="player_streamers")]
		public Mediav1player_streamer[] Player_streamers { get; set; }
	}
	
	public class ListPlayerStreamerReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
