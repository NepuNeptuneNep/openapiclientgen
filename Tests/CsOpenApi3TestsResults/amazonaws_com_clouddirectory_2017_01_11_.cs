//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddFacetToObjectResponse
	{
	}
	
	/// <summary>
	/// The combination of an attribute key and an attribute value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeKeyAndValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeKey Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue Value { get; set; }
	}
	
	/// <summary>
	/// A unique identifier for an attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeKey
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FacetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the data for a typed attribute. You can set one, and only one, of the elements. Each attribute in an item is a name-value pair. Attributes have a single value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedAttributeValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BinaryValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BooleanValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NumberValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DatetimeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServiceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetryableConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectoryNotEnabledException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplySchemaResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppliedSchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidAttachmentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachedObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkNameAlreadyInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachPolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotPolicyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachToIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachedObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexedAttributeMissingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotIndexException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachTypedLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
	}
	
	/// <summary>
	/// Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedLinkSpecifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName TypedLinkFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference SourceObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameAndValue[] IdentityAttributeValues { get; set; }
	}
	
	/// <summary>
	/// Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedLinkSchemaAndFacetName
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TypedLinkName { get; set; }
	}
	
	/// <summary>
	/// The reference that identifies an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// Identifies the attribute name and value for a typed link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeNameAndValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchReadResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchReadOperationResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchRead</code> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchReadOperationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchReadSuccessfulResponse SuccessfulResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchReadException ExceptionResponse { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchRead</code> success response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchReadSuccessfulResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectAttributesResponse ListObjectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectChildrenResponse ListObjectChildren { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchGetObjectInformationResponse GetObjectInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchGetObjectAttributesResponse GetObjectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListAttachedIndicesResponse ListAttachedIndices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectParentPathsResponse ListObjectParentPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectPoliciesResponse ListObjectPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListPolicyAttachmentsResponse ListPolicyAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchLookupPolicyResponse LookupPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListIndexResponse ListIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListOutgoingTypedLinksResponse ListOutgoingTypedLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListIncomingTypedLinksResponse ListIncomingTypedLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchGetLinkAttributesResponse GetLinkAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectParentsResponse ListObjectParents { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListObjectAttributes</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListObjectChildren</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectChildrenResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LinkNameToObjectIdentifierMap Children { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkNameToObjectIdentifierMap
	{
	}
	
	/// <summary>
	/// Represents the output of a <a>GetObjectInformation</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetObjectInformationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet[] SchemaFacets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// A facet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaFacet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FacetName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>GetObjectAttributes</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetObjectAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] Attributes { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListAttachedIndices</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListAttachedIndicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IndexAttachment[] IndexAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an index and an attached object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] IndexedAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListObjectParentPaths</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectParentPathsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PathToObjectIdentifiers[] PathToObjectIdentifiersList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns the path to the <code>ObjectIdentifiers</code> that is associated with the directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathToObjectIdentifiers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ObjectIdentifiers { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListObjectPolicies</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttachedPolicyIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListPolicyAttachments</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListPolicyAttachmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ObjectIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>LookupPolicy</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchLookupPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyToPath[] PolicyToPathList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Used when a regular object exists in a <a>Directory</a> and you want to find all of the policies that are associated with that object and the parent to that object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyToPath
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyAttachment[] Policies { get; set; }
	}
	
	/// <summary>
	/// Contains the <code>PolicyType</code>, <code>PolicyId</code>, and the <code>ObjectIdentifier</code> to which it is attached. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyType { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListIndex</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IndexAttachment[] IndexAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListOutgoingTypedLinks</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListOutgoingTypedLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier[] TypedLinkSpecifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListIncomingTypedLinks</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListIncomingTypedLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier[] LinkSpecifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>GetLinkAttributes</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetLinkAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] Attributes { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListObjectParents</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectParentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectIdentifierAndLinkNameTuple[] ParentLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A pair of ObjectIdentifier and LinkName.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectIdentifierAndLinkNameTuple
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
	}
	
	/// <summary>
	/// The batch read exception structure, which contains the exception type and message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchReadException
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchReadExceptionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchReadExceptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ValidationException = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidArnException = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceNotFoundException = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidNextTokenException = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDeniedException = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotNodeException = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FacetValidationException = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CannotListParentOfRootException = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotIndexException = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotPolicyException = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DirectoryNotEnabledException = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitExceededException = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServiceException = 12,
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchRead</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchReadOperation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectAttributes ListObjectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectChildren ListObjectChildren { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListAttachedIndices ListAttachedIndices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectParentPaths ListObjectParentPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchGetObjectInformation GetObjectInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchGetObjectAttributes GetObjectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectParents ListObjectParents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListObjectPolicies ListObjectPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListPolicyAttachments ListPolicyAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchLookupPolicy LookupPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListIndex ListIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListOutgoingTypedLinks ListOutgoingTypedLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchListIncomingTypedLinks ListIncomingTypedLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchGetLinkAttributes GetLinkAttributes { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListObjectAttributes</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet FacetFilter { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>ListObjectChildren</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectChildren
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Lists indices attached to an object inside a <a>BatchRead</a> operation. For more information, see <a>ListAttachedIndices</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListAttachedIndices
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects inside a <a>BatchRead</a> operation. For more information, see <a>ListObjectParentPaths</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectParentPaths
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Retrieves metadata about an object inside a <a>BatchRead</a> operation. For more information, see <a>GetObjectInformation</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetObjectInformation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	/// <summary>
	/// Retrieves attributes within a facet that are associated with an object inside an <a>BatchRead</a> operation. For more information, see <a>GetObjectAttributes</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetObjectAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
	}
	
	/// <summary>
	/// Lists parent objects that are associated with a given object in pagination fashion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectParents
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Returns policies attached to an object in pagination fashion inside a <a>BatchRead</a> operation. For more information, see <a>ListObjectPolicies</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListObjectPolicies
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached inside a <a>BatchRead</a> operation. For more information, see <a>ListPolicyAttachments</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListPolicyAttachments
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference PolicyReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Lists all policies from the root of the Directory to the object specified inside a <a>BatchRead</a> operation. For more information, see <a>LookupPolicy</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchLookupPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Lists objects attached to the specified index inside a <a>BatchRead</a> operation. For more information, see <a>ListIndex</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListIndex
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectAttributeRange[] RangesOnIndexedValues { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference IndexReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A range of attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectAttributeRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKey AttributeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValueRange Range { get; set; }
	}
	
	/// <summary>
	/// A range of attribute values. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_range_filters.html">Range Filters</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedAttributeValueRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RangeMode StartMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue StartValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RangeMode EndMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue EndValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RangeMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_BEFORE_MISSING_VALUES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUSIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUSIVE = 4,
	}
	
	/// <summary>
	/// Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object inside a <a>BatchRead</a> operation. For more information, see <a>ListOutgoingTypedLinks</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListOutgoingTypedLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeRange[] FilterAttributeRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName FilterTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Identifies the range of attributes that are used by a specified filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedLinkAttributeRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValueRange Range { get; set; }
	}
	
	/// <summary>
	/// Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object inside a <a>BatchRead</a> operation. For more information, see <a>ListIncomingTypedLinks</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchListIncomingTypedLinks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeRange[] FilterAttributeRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName FilterTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Retrieves attributes that are associated with a typed link inside a <a>BatchRead</a> operation. For more information, see <a>GetLinkAttributes</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetLinkAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchWriteOperationResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchWrite</code> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteOperationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchCreateObjectResponse CreateObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachObjectResponse AttachObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachObjectResponse DetachObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchUpdateObjectAttributesResponse UpdateObjectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDeleteObjectResponse DeleteObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAddFacetToObjectResponse AddFacetToObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchRemoveFacetFromObjectResponse RemoveFacetFromObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachPolicyResponse AttachPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachPolicyResponse DetachPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchCreateIndexResponse CreateIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachToIndexResponse AttachToIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachFromIndexResponse DetachFromIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachTypedLinkResponse AttachTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachTypedLinkResponse DetachTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchUpdateLinkAttributesResponse UpdateLinkAttributes { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>CreateObject</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output batch <a>AttachObject</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachedObjectIdentifier")]
		public string AttachedObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>DetachObject</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="detachedObjectIdentifier")]
		public string DetachedObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchUpdate</code> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateObjectAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>DeleteObject</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteObjectResponse
	{
	}
	
	/// <summary>
	/// The result of a batch add facet to object operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAddFacetToObjectResponse
	{
	}
	
	/// <summary>
	/// An empty result that represents success.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchRemoveFacetFromObjectResponse
	{
	}
	
	/// <summary>
	/// Represents the output of an <a>AttachPolicy</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachPolicyResponse
	{
	}
	
	/// <summary>
	/// Represents the output of a <a>DetachPolicy</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachPolicyResponse
	{
	}
	
	/// <summary>
	/// Represents the output of a <a>CreateIndex</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>AttachToIndex</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachToIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachedObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>DetachFromIndex</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachFromIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetachedObjectIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>AttachTypedLink</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachTypedLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>DetachTypedLink</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachTypedLinkResponse
	{
	}
	
	/// <summary>
	/// Represents the output of a <a>UpdateLinkAttributes</a> response operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateLinkAttributesResponse
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchWrite</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteOperation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchCreateObject CreateObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachObject AttachObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachObject DetachObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchUpdateObjectAttributes UpdateObjectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDeleteObject DeleteObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAddFacetToObject AddFacetToObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchRemoveFacetFromObject RemoveFacetFromObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachPolicy AttachPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachPolicy DetachPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchCreateIndex CreateIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachToIndex AttachToIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachFromIndex DetachFromIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchAttachTypedLink AttachTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDetachTypedLink DetachTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchUpdateLinkAttributes UpdateLinkAttributes { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>CreateObject</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet[] SchemaFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] ObjectAttributeList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BatchReferenceName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of an <a>AttachObject</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ChildReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <a>DetachObject</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BatchReferenceName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchUpdate</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateObjectAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectAttributeUpdate[] AttributeUpdates { get; set; }
	}
	
	/// <summary>
	/// Structure that contains attribute update information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectAttributeUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKey ObjectAttributeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectAttributeAction ObjectAttributeAction { get; set; }
	}
	
	/// <summary>
	/// The action to take on the object attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectAttributeAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateActionType ObjectAttributeActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue ObjectAttributeUpdateValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_OR_UPDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
	}
	
	/// <summary>
	/// Represents the output of a <a>DeleteObject</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a batch add facet to object operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAddFacetToObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] ObjectAttributeList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	/// <summary>
	/// A batch operation to remove a facet from an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchRemoveFacetFromObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	/// <summary>
	/// Attaches a policy object to a regular object inside a <a>BatchRead</a> operation. For more information, see <a>AttachPolicy</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference PolicyReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	/// <summary>
	/// Detaches the specified policy from the specified directory inside a <a>BatchWrite</a> operation. For more information, see <a>DetachPolicy</a> and <a>BatchWriteRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachPolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference PolicyReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	/// <summary>
	/// Creates an index object inside of a <a>BatchRead</a> operation. For more information, see <a>CreateIndex</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateIndex
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeKey[] OrderedIndexedAttributeList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsUnique { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BatchReferenceName { get; set; }
	}
	
	/// <summary>
	/// Attaches the specified object to the specified index inside a <a>BatchRead</a> operation. For more information, see <a>AttachToIndex</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachToIndex
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference IndexReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetReference { get; set; }
	}
	
	/// <summary>
	/// Detaches the specified object from the specified index inside a <a>BatchRead</a> operation. For more information, see <a>DetachFromIndex</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachFromIndex
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference IndexReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetReference { get; set; }
	}
	
	/// <summary>
	/// Attaches a typed link to a specified source and target object inside a <a>BatchRead</a> operation. For more information, see <a>AttachTypedLink</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAttachTypedLink
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference SourceObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName TypedLinkFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameAndValue[] Attributes { get; set; }
	}
	
	/// <summary>
	/// Detaches a typed link from a specified source and target object inside a <a>BatchRead</a> operation. For more information, see <a>DetachTypedLink</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetachTypedLink
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
	}
	
	/// <summary>
	/// Updates a given typed link’s attributes inside a <a>BatchRead</a> operation. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>. For more information, see <a>UpdateLinkAttributes</a> and <a>BatchReadRequest$Operations</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateLinkAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LinkAttributeUpdate[] AttributeUpdates { get; set; }
	}
	
	/// <summary>
	/// Structure that contains attribute update information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkAttributeUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKey AttributeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkAttributeAction AttributeAction { get; set; }
	}
	
	/// <summary>
	/// The action to take on a typed link attribute value. Updates are only supported for attributes which don’t contribute to link identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkAttributeAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateActionType AttributeActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue AttributeUpdateValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDirectoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppliedSchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectoryAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFacetResponse
	{
	}
	
	/// <summary>
	/// An attribute that is associated with the <a>Facet</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetAttribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FacetAttributeDefinition AttributeDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FacetAttributeReference AttributeReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequiredAttributeBehavior RequiredBehavior { get; set; }
	}
	
	/// <summary>
	/// A facet attribute definition. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_attributereferences.html">Attribute References</a> for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetAttributeDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FacetAttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsImmutable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleMap Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FacetAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BINARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleMap
	{
	}
	
	/// <summary>
	/// The facet attribute reference that specifies the attribute definition that contains the attribute facet name and attribute name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetAttributeReference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetFacetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetAttributeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RequiredAttributeBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED_ALWAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_REQUIRED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRuleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedIndexTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSchemaResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTypedLinkFacetResponse
	{
	}
	
	/// <summary>
	/// A typed link attribute definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedLinkAttributeDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FacetAttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedAttributeValue DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsImmutable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleMap Rules { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequiredAttributeBehavior RequiredBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDirectoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectoryNotDisabledException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DirectoryDeletedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFacetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteObjectResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectNotDetachedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSchemaResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StillContainsLinksException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTypedLinkFacetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachFromIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetachedObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectAlreadyDetachedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetachedObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotNodeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachPolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableDirectoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnableDirectoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAppliedSchemaVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppliedSchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDirectoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Directory Directory { get; set; }
	}
	
	/// <summary>
	/// Directory structure that includes the directory name and directory ARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Directory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DirectoryState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DirectoryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFacetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Facet Facet { get; set; }
	}
	
	/// <summary>
	/// A structure that contains <code>Name</code>, <code>ARN</code>, <code>Attributes</code>, <code> <a>Rule</a>s</code>, and <code>ObjectTypes</code>. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_whatarefacets.html">Facets</a> for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Facet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectType ObjectType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FacetStyle FacetStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEAF_NODE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLICY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDEX = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FacetStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLinkAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetObjectAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetObjectInformationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet[] SchemaFacets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSchemaAsJsonResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTypedLinkFacetInformationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentityAttributeOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidNextTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAppliedSchemaArnsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SchemaArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAttachedIndicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IndexAttachment[] IndexAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevelopmentSchemaArnsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SchemaArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDirectoriesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Directory[] Directories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFacetAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FacetAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFacetNamesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FacetNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIncomingTypedLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier[] LinkSpecifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IndexAttachment[] IndexAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListManagedSchemaArnsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SchemaArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectChildrenResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LinkNameToObjectIdentifierMap Children { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectParentPathsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PathToObjectIdentifiers[] PathToObjectIdentifiersList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectParentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectIdentifierToLinkNameMap Parents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectIdentifierAndLinkNameTuple[] ParentLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectIdentifierToLinkNameMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CannotListParentOfRootException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttachedPolicyIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOutgoingTypedLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier[] TypedLinkSpecifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPolicyAttachmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ObjectIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPublishedSchemaArnsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SchemaArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The tag structure that contains a tag key and value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTaggingRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTypedLinkFacetAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeDefinition[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTypedLinkFacetNamesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FacetNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LookupPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyToPath[] PolicyToPathList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishSchemaResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PublishedSchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaAlreadyPublishedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSchemaFromJsonResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSchemaDocException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveFacetFromObjectResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFacetResponse
	{
	}
	
	/// <summary>
	/// A structure that contains information used to update an attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacetAttributeUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FacetAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateActionType Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidFacetUpdateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLinkAttributesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateObjectAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSchemaResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTypedLinkFacetResponse
	{
	}
	
	/// <summary>
	/// A typed link facet attribute update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedLinkFacetAttributeUpdate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeDefinition Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateActionType Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeAppliedSchemaResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UpgradedSchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IncompatibleSchemaException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradePublishedSchemaResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UpgradedSchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddFacetToObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet SchemaFacet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] ObjectAttributeList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplySchemaRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublishedSchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ChildReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference PolicyReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachToIndexRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference IndexReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachTypedLinkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference SourceObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName TypedLinkFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameAndValue[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConsistencyLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERIALIZABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENTUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchReadRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchReadOperation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchWriteOperation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDirectoryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFacetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FacetAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectType ObjectType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FacetStyle FacetStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIndexRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeKey[] OrderedIndexedAttributeList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsUnique { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet[] SchemaFacets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] ObjectAttributeList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSchemaRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Defines the typed links structure and its attributes. To create a typed link facet, use the <a>CreateTypedLinkFacet</a> API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypedLinkFacet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeDefinition[] Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentityAttributeOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTypedLinkFacetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkFacet Facet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDirectoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFacetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSchemaRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTypedLinkFacetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachFromIndexRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference IndexReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ParentReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference PolicyReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetachTypedLinkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableDirectoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnableDirectoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAppliedSchemaVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDirectoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFacetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLinkAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConsistencyLevel ConsistencyLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetObjectAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetObjectInformationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSchemaAsJsonRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTypedLinkFacetInformationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAppliedSchemaArnsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAttachedIndicesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevelopmentSchemaArnsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDirectoriesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DirectoryState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFacetAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFacetNamesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIncomingTypedLinksRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeRange[] FilterAttributeRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName FilterTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConsistencyLevel ConsistencyLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIndexRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectAttributeRange[] RangesOnIndexedValues { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference IndexReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListManagedSchemaArnsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet FacetFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectChildrenRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectParentPathsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectParentsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeAllLinksToEachParent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectPoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOutgoingTypedLinksRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeRange[] FilterAttributeRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName FilterTypedLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConsistencyLevel ConsistencyLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPolicyAttachmentsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference PolicyReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPublishedSchemaArnsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTypedLinkFacetAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTypedLinkFacetNamesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LookupPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishSchemaRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinorVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSchemaFromJsonRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveFacetFromObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BINARY_LENGTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_COMPARISON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_FROM_SET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_LENGTH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleParameterMap
	{
	}
	
	/// <summary>
	/// Contains an Amazon Resource Name (ARN) and parameters that are associated with the rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RuleType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleParameterMap Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFacetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FacetAttributeUpdate[] AttributeUpdates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectType ObjectType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLinkAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSpecifier TypedLinkSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LinkAttributeUpdate[] AttributeUpdates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateObjectAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectAttributeUpdate[] AttributeUpdates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSchemaRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTypedLinkFacetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkFacetAttributeUpdate[] AttributeUpdates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentityAttributeOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeAppliedSchemaRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublishedSchemaArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradePublishedSchemaRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DevelopmentSchemaArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublishedSchemaArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MinorVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it.
		/// AddFacetToObject amazonclouddirectory/2017-01-11/object/facets#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddFacetToObjectResponse> AddFacetToObjectAsync(AddFacetToObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/facets#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AddFacetToObjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Copies the input published schema, at the specified version, into the <a>Directory</a> with the same name and version as that of the published schema.
		/// ApplySchema amazonclouddirectory/2017-01-11/schema/apply#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ApplySchemaResponse> ApplySchemaAsync(ApplySchemaPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/apply#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApplySchemaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Attaches an existing object to another object. An object can be accessed in two ways:</p> <ol> <li> <p>Using the path</p> </li> <li> <p>Using <code>ObjectIdentifier</code> </p> </li> </ol>
		/// AttachObject amazonclouddirectory/2017-01-11/object/attach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachObjectResponse> AttachObjectAsync(AttachObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/attach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AttachObjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Attaches a policy object to a regular object. An object can have a limited number of attached policies.
		/// AttachPolicy amazonclouddirectory/2017-01-11/policy/attach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachPolicyResponse> AttachPolicyAsync(AttachPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/policy/attach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AttachPolicyResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Attaches the specified object to the specified index.
		/// AttachToIndex amazonclouddirectory/2017-01-11/index/attach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachToIndexResponse> AttachToIndexAsync(AttachToIndexPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/index/attach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AttachToIndexResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Attaches a typed link to a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// AttachTypedLink amazonclouddirectory/2017-01-11/typedlink/attach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachTypedLinkResponse> AttachTypedLinkAsync(AttachTypedLinkPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/attach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AttachTypedLinkResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Performs all the read operations in a batch.
		/// BatchRead amazonclouddirectory/2017-01-11/batchread#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchReadResponse> BatchReadAsync(BatchReadPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/batchread#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BatchReadResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Performs all the write operations in a batch. Either all the operations succeed or none.
		/// BatchWrite amazonclouddirectory/2017-01-11/batchwrite#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchWriteResponse> BatchWriteAsync(BatchWritePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/batchwrite#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BatchWriteResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a <a>Directory</a> by copying the published schema into the directory. A directory cannot be created without a schema.</p> <p>You can also quickly create a directory using a managed schema, called the <code>QuickStartSchema</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html">Managed Schema</a> in the <i>Amazon Cloud Directory Developer Guide</i>.</p>
		/// CreateDirectory amazonclouddirectory/2017-01-11/directory/create#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDirectoryResponse> CreateDirectoryAsync(CreateDirectoryPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/directory/create#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateDirectoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new <a>Facet</a> in a schema. Facet creation is allowed only in development or applied schemas.
		/// CreateFacet amazonclouddirectory/2017-01-11/facet/create#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFacetResponse> CreateFacetAsync(CreateFacetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/facet/create#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateFacetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html">Indexing and search</a> for more information.
		/// CreateIndex amazonclouddirectory/2017-01-11/index#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateIndexResponse> CreateIndexAsync(CreateIndexPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/index#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateIndexResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet.
		/// CreateObject amazonclouddirectory/2017-01-11/object#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateObjectResponse> CreateObjectAsync(CreateObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateObjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a new schema in a development state. A schema can exist in three phases:</p> <ul> <li> <p> <i>Development:</i> This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.</p> </li> <li> <p> <i>Published:</i> Published schemas are immutable and have a version associated with them.</p> </li> <li> <p> <i>Applied:</i> Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. </p> </li> </ul>
		/// CreateSchema amazonclouddirectory/2017-01-11/schema/create
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSchemaResponse> CreateSchemaAsync(CreateSchemaPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/create";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSchemaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// CreateTypedLinkFacet amazonclouddirectory/2017-01-11/typedlink/facet/create#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTypedLinkFacetResponse> CreateTypedLinkFacetAsync(CreateTypedLinkFacetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/facet/create#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateTypedLinkFacetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
		/// DeleteDirectory amazonclouddirectory/2017-01-11/directory#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDirectoryResponse> DeleteDirectoryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/directory#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteDirectoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
		/// DeleteFacet amazonclouddirectory/2017-01-11/facet/delete#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteFacetResponse> DeleteFacetAsync(DeleteFacetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/facet/delete#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteFacetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.
		/// DeleteObject amazonclouddirectory/2017-01-11/object/delete#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteObjectResponse> DeleteObjectAsync(DeleteObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/delete#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteObjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a given schema. Schemas in a development and published state can only be deleted.
		/// DeleteSchema amazonclouddirectory/2017-01-11/schema#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSchemaResponse> DeleteSchemaAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteSchemaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// DeleteTypedLinkFacet amazonclouddirectory/2017-01-11/typedlink/facet/delete#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTypedLinkFacetResponse> DeleteTypedLinkFacetAsync(DeleteTypedLinkFacetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/facet/delete#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteTypedLinkFacetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detaches the specified object from the specified index.
		/// DetachFromIndex amazonclouddirectory/2017-01-11/index/detach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachFromIndexResponse> DetachFromIndexAsync(DetachFromIndexPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/index/detach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DetachFromIndexResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
		/// DetachObject amazonclouddirectory/2017-01-11/object/detach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachObjectResponse> DetachObjectAsync(DetachObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/detach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DetachObjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detaches a policy from an object.
		/// DetachPolicy amazonclouddirectory/2017-01-11/policy/detach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachPolicyResponse> DetachPolicyAsync(DetachPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/policy/detach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DetachPolicyResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detaches a typed link from a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// DetachTypedLink amazonclouddirectory/2017-01-11/typedlink/detach#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task DetachTypedLinkAsync(DetachTypedLinkPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/detach#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
		/// DisableDirectory amazonclouddirectory/2017-01-11/directory/disable#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableDirectoryResponse> DisableDirectoryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/directory/disable#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisableDirectoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
		/// EnableDirectory amazonclouddirectory/2017-01-11/directory/enable#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableDirectoryResponse> EnableDirectoryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/directory/enable#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EnableDirectoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns current applied schema version ARN, including the minor version in use.
		/// GetAppliedSchemaVersion amazonclouddirectory/2017-01-11/schema/getappliedschema
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppliedSchemaVersionResponse> GetAppliedSchemaVersionAsync(GetAppliedSchemaVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/getappliedschema";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAppliedSchemaVersionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves metadata about a directory.
		/// GetDirectory amazonclouddirectory/2017-01-11/directory/get#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDirectoryResponse> GetDirectoryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/directory/get#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDirectoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema facets -- published, development, or applied.
		/// GetFacet amazonclouddirectory/2017-01-11/facet#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetFacetResponse> GetFacetAsync(GetFacetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetFacetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Does the following:</p> <ol> <li> <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> </ol>
		/// UpdateFacet amazonclouddirectory/2017-01-11/facet#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateFacetResponse> UpdateFacetAsync(UpdateFacetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateFacetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves attributes that are associated with a typed link.
		/// GetLinkAttributes amazonclouddirectory/2017-01-11/typedlink/attributes/get#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLinkAttributesResponse> GetLinkAttributesAsync(GetLinkAttributesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/attributes/get#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLinkAttributesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves attributes within a facet that are associated with an object.
		/// GetObjectAttributes amazonclouddirectory/2017-01-11/object/attributes/get#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetObjectAttributesResponse> GetObjectAttributesAsync(GetObjectAttributesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/attributes/get#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetObjectAttributesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves metadata about an object.
		/// GetObjectInformation amazonclouddirectory/2017-01-11/object/information#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetObjectInformationResponse> GetObjectInformationAsync(GetObjectInformationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/information#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetObjectInformationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a JSON representation of the schema. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.
		/// GetSchemaAsJson amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSchemaAsJsonResponse> GetSchemaAsJsonAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSchemaAsJsonResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.
		/// PutSchemaFromJson amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutSchemaFromJsonResponse> PutSchemaFromJsonAsync(PutSchemaFromJsonPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutSchemaFromJsonResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// GetTypedLinkFacetInformation amazonclouddirectory/2017-01-11/typedlink/facet/get#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTypedLinkFacetInformationResponse> GetTypedLinkFacetInformationAsync(GetTypedLinkFacetInformationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/facet/get#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTypedLinkFacetInformationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version.
		/// ListAppliedSchemaArns amazonclouddirectory/2017-01-11/schema/applied
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppliedSchemaArnsResponse> ListAppliedSchemaArnsAsync(string MaxResults, string NextToken, ListAppliedSchemaArnsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/applied?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAppliedSchemaArnsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists indices attached to the specified object.
		/// ListAttachedIndices amazonclouddirectory/2017-01-11/object/indices#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAttachedIndicesResponse> ListAttachedIndicesAsync(string MaxResults, string NextToken, ListAttachedIndicesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/indices#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAttachedIndicesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
		/// ListDevelopmentSchemaArns amazonclouddirectory/2017-01-11/schema/development
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevelopmentSchemaArnsResponse> ListDevelopmentSchemaArnsAsync(string MaxResults, string NextToken, ListDevelopmentSchemaArnsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/development?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDevelopmentSchemaArnsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists directories created within an account.
		/// ListDirectories amazonclouddirectory/2017-01-11/directory/list
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDirectoriesResponse> ListDirectoriesAsync(string MaxResults, string NextToken, ListDirectoriesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/directory/list?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDirectoriesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves attributes attached to the facet.
		/// ListFacetAttributes amazonclouddirectory/2017-01-11/facet/attributes#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFacetAttributesResponse> ListFacetAttributesAsync(string MaxResults, string NextToken, ListFacetAttributesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/facet/attributes#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFacetAttributesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the names of facets that exist in a schema.
		/// ListFacetNames amazonclouddirectory/2017-01-11/facet/list#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFacetNamesResponse> ListFacetNamesAsync(string MaxResults, string NextToken, ListFacetNamesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/facet/list#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFacetNamesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// ListIncomingTypedLinks amazonclouddirectory/2017-01-11/typedlink/incoming#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListIncomingTypedLinksResponse> ListIncomingTypedLinksAsync(ListIncomingTypedLinksPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/incoming#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListIncomingTypedLinksResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists objects attached to the specified index.
		/// ListIndex amazonclouddirectory/2017-01-11/index/targets#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIndexResponse> ListIndexAsync(string MaxResults, string NextToken, ListIndexPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/index/targets#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListIndexResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.
		/// ListManagedSchemaArns amazonclouddirectory/2017-01-11/schema/managed
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListManagedSchemaArnsResponse> ListManagedSchemaArnsAsync(string MaxResults, string NextToken, ListManagedSchemaArnsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/managed?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListManagedSchemaArnsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all attributes that are associated with an object.
		/// ListObjectAttributes amazonclouddirectory/2017-01-11/object/attributes#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListObjectAttributesResponse> ListObjectAttributesAsync(string MaxResults, string NextToken, ListObjectAttributesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/attributes#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListObjectAttributesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a paginated list of child objects that are associated with a given object.
		/// ListObjectChildren amazonclouddirectory/2017-01-11/object/children#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListObjectChildrenResponse> ListObjectChildrenAsync(string MaxResults, string NextToken, ListObjectChildrenPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/children#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListObjectChildrenResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html">Directory Structure</a>.</p> <p>Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.</p>
		/// ListObjectParentPaths amazonclouddirectory/2017-01-11/object/parentpaths#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListObjectParentPathsResponse> ListObjectParentPathsAsync(string MaxResults, string NextToken, ListObjectParentPathsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/parentpaths#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListObjectParentPathsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists parent objects that are associated with a given object in pagination fashion.
		/// ListObjectParents amazonclouddirectory/2017-01-11/object/parent#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListObjectParentsResponse> ListObjectParentsAsync(string MaxResults, string NextToken, ListObjectParentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/parent#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListObjectParentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns policies attached to an object in pagination fashion.
		/// ListObjectPolicies amazonclouddirectory/2017-01-11/object/policy#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListObjectPoliciesResponse> ListObjectPoliciesAsync(string MaxResults, string NextToken, ListObjectPoliciesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/policy#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListObjectPoliciesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// ListOutgoingTypedLinks amazonclouddirectory/2017-01-11/typedlink/outgoing#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListOutgoingTypedLinksResponse> ListOutgoingTypedLinksAsync(ListOutgoingTypedLinksPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/outgoing#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOutgoingTypedLinksResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.
		/// ListPolicyAttachments amazonclouddirectory/2017-01-11/policy/attachment#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPolicyAttachmentsResponse> ListPolicyAttachmentsAsync(string MaxResults, string NextToken, ListPolicyAttachmentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/policy/attachment#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPolicyAttachmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead.
		/// ListPublishedSchemaArns amazonclouddirectory/2017-01-11/schema/published
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPublishedSchemaArnsResponse> ListPublishedSchemaArnsAsync(string MaxResults, string NextToken, ListPublishedSchemaArnsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/published?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPublishedSchemaArnsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
		/// ListTagsForResource amazonclouddirectory/2017-01-11/tags
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string MaxResults, string NextToken, ListTagsForResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/tags?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// ListTypedLinkFacetAttributes amazonclouddirectory/2017-01-11/typedlink/facet/attributes#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTypedLinkFacetAttributesResponse> ListTypedLinkFacetAttributesAsync(string MaxResults, string NextToken, ListTypedLinkFacetAttributesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/facet/attributes#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTypedLinkFacetAttributesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a paginated list of <code>TypedLink</code> facet names for a particular schema. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// ListTypedLinkFacetNames amazonclouddirectory/2017-01-11/typedlink/facet/list#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTypedLinkFacetNamesResponse> ListTypedLinkFacetNamesAsync(string MaxResults, string NextToken, ListTypedLinkFacetNamesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/facet/list#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTypedLinkFacetNamesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.
		/// LookupPolicy amazonclouddirectory/2017-01-11/policy/lookup#x-amz-data-partition
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<LookupPolicyResponse> LookupPolicyAsync(string MaxResults, string NextToken, LookupPolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/policy/lookup#x-amz-data-partition?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LookupPolicyResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Publishes a development schema with a major version and a recommended minor version.
		/// PublishSchema amazonclouddirectory/2017-01-11/schema/publish#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PublishSchemaResponse> PublishSchemaAsync(PublishSchemaPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/publish#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PublishSchemaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes the specified facet from the specified object.
		/// RemoveFacetFromObject amazonclouddirectory/2017-01-11/object/facets/delete#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveFacetFromObjectResponse> RemoveFacetFromObjectAsync(RemoveFacetFromObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/facets/delete#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RemoveFacetFromObjectResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// An API operation for adding tags to a resource.
		/// TagResource amazonclouddirectory/2017-01-11/tags/add
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourcePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/tags/add";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// An API operation for removing tags from a resource.
		/// UntagResource amazonclouddirectory/2017-01-11/tags/remove
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourcePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/tags/remove";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>.
		/// UpdateLinkAttributes amazonclouddirectory/2017-01-11/typedlink/attributes/update#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateLinkAttributesResponse> UpdateLinkAttributesAsync(UpdateLinkAttributesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/attributes/update#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateLinkAttributesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a given object's attributes.
		/// UpdateObjectAttributes amazonclouddirectory/2017-01-11/object/update#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateObjectAttributesResponse> UpdateObjectAttributesAsync(UpdateObjectAttributesPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/object/update#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateObjectAttributesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the schema name with a new name. Only development schema names can be updated.
		/// UpdateSchema amazonclouddirectory/2017-01-11/schema/update#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSchemaResponse> UpdateSchemaAsync(UpdateSchemaPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/update#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSchemaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// UpdateTypedLinkFacet amazonclouddirectory/2017-01-11/typedlink/facet#x-amz-data-partition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTypedLinkFacetResponse> UpdateTypedLinkFacetAsync(UpdateTypedLinkFacetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/typedlink/facet#x-amz-data-partition";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateTypedLinkFacetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.
		/// UpgradeAppliedSchema amazonclouddirectory/2017-01-11/schema/upgradeapplied
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpgradeAppliedSchemaResponse> UpgradeAppliedSchemaAsync(UpgradeAppliedSchemaPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/upgradeapplied";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpgradeAppliedSchemaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>.
		/// UpgradePublishedSchema amazonclouddirectory/2017-01-11/schema/upgradepublished
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpgradePublishedSchemaResponse> UpgradePublishedSchemaAsync(UpgradePublishedSchemaPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amazonclouddirectory/2017-01-11/schema/upgradepublished";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpgradePublishedSchemaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class AddFacetToObjectPutBody
	{
		
		/// <summary>
		/// A facet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddFacetToObjectPutBodySchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// Attributes on the facet that you are adding to the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] ObjectAttributeList { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddFacetToObjectPutBodyObjectReference ObjectReference { get; set; }
	}
	
	public class AddFacetToObjectPutBodySchemaFacet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FacetName { get; set; }
	}
	
	public class AddFacetToObjectPutBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ApplySchemaPutBody
	{
		
		/// <summary>
		/// Published schema Amazon Resource Name (ARN) that needs to be copied. For more information, see <a>arns</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublishedSchemaArn { get; set; }
	}
	
	public class AttachObjectPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachObjectPutBodyParentReference ParentReference { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachObjectPutBodyChildReference ChildReference { get; set; }
		
		/// <summary>
		/// The link name with which the child object is attached to the parent.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [^\/\[\]\(\):\{\}#@!?\s\\;]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\/\[\]\(\):\{\}#@!?\s\\;]+")]
		public string LinkName { get; set; }
	}
	
	public class AttachObjectPutBodyParentReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachObjectPutBodyChildReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachPolicyPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachPolicyPutBodyPolicyReference PolicyReference { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachPolicyPutBodyObjectReference ObjectReference { get; set; }
	}
	
	public class AttachPolicyPutBodyPolicyReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachPolicyPutBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachToIndexPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachToIndexPutBodyIndexReference IndexReference { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachToIndexPutBodyTargetReference TargetReference { get; set; }
	}
	
	public class AttachToIndexPutBodyIndexReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachToIndexPutBodyTargetReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachTypedLinkPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachTypedLinkPutBodySourceObjectReference SourceObjectReference { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachTypedLinkPutBodyTargetObjectReference TargetObjectReference { get; set; }
		
		/// <summary>
		/// Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttachTypedLinkPutBodyTypedLinkFacet TypedLinkFacet { get; set; }
		
		/// <summary>
		/// A set of attributes that are associated with the typed link.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameAndValue[] Attributes { get; set; }
	}
	
	public class AttachTypedLinkPutBodySourceObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachTypedLinkPutBodyTargetObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class AttachTypedLinkPutBodyTypedLinkFacet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TypedLinkName { get; set; }
	}
	
	public class BatchReadPostBody
	{
		
		/// <summary>
		/// A list of operations that are part of the batch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchReadOperation[] Operations { get; set; }
	}
	
	public class BatchWritePutBody
	{
		
		/// <summary>
		/// A list of operations that are part of the batch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchWriteOperation[] Operations { get; set; }
	}
	
	public class CreateDirectoryPutBody
	{
		
		/// <summary>
		/// The name of the <a>Directory</a>. Should be unique per account, per region.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class CreateFacetPutBody
	{
		
		/// <summary>
		/// The name of the <a>Facet</a>, which is unique for a given schema.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The attributes that are associated with the <a>Facet</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FacetAttribute[] Attributes { get; set; }
		
		/// <summary>
		/// <p>Specifies whether a given object created from this facet is of type node, leaf node, policy or index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectType ObjectType { get; set; }
		
		/// <summary>
		/// There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FacetStyle FacetStyle { get; set; }
	}
	
	public class CreateIndexPutBody
	{
		
		/// <summary>
		/// Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeKey[] OrderedIndexedAttributeList { get; set; }
		
		/// <summary>
		/// Indicates whether the attribute that is being indexed has unique values or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsUnique { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateIndexPutBodyParentReference ParentReference { get; set; }
		
		/// <summary>
		/// The name of the link between the parent object and the index object.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [^\/\[\]\(\):\{\}#@!?\s\\;]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\/\[\]\(\):\{\}#@!?\s\\;]+")]
		public string LinkName { get; set; }
	}
	
	public class CreateIndexPutBodyParentReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class CreateObjectPutBody
	{
		
		/// <summary>
		/// A list of schema facets to be associated with the object. Do not provide minor version components. See <a>SchemaFacet</a> for details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchemaFacet[] SchemaFacets { get; set; }
		
		/// <summary>
		/// The attribute map whose attribute ARN contains the key and attribute value as the map value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeKeyAndValue[] ObjectAttributeList { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateObjectPutBodyParentReference ParentReference { get; set; }
		
		/// <summary>
		/// The name of link that is used to attach this object to a parent.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [^\/\[\]\(\):\{\}#@!?\s\\;]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\/\[\]\(\):\{\}#@!?\s\\;]+")]
		public string LinkName { get; set; }
	}
	
	public class CreateObjectPutBodyParentReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class CreateSchemaPutBody
	{
		
		/// <summary>
		/// The name that is associated with the schema. This is unique to each account and in each region.
		/// Required
		/// Min length: 1
		/// Max length: 32
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class CreateTypedLinkFacetPutBody
	{
		
		/// <summary>
		/// Defines the typed links structure and its attributes. To create a typed link facet, use the <a>CreateTypedLinkFacet</a> API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateTypedLinkFacetPutBodyFacet Facet { get; set; }
	}
	
	public class CreateTypedLinkFacetPutBodyFacet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeDefinition[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentityAttributeOrder { get; set; }
	}
	
	public class DeleteFacetPutBody
	{
		
		/// <summary>
		/// The name of the facet to delete.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class DeleteObjectPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeleteObjectPutBodyObjectReference ObjectReference { get; set; }
	}
	
	public class DeleteObjectPutBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class DeleteTypedLinkFacetPutBody
	{
		
		/// <summary>
		/// The unique name of the typed link facet.
		/// Required
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class DetachFromIndexPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetachFromIndexPutBodyIndexReference IndexReference { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetachFromIndexPutBodyTargetReference TargetReference { get; set; }
	}
	
	public class DetachFromIndexPutBodyIndexReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class DetachFromIndexPutBodyTargetReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class DetachObjectPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetachObjectPutBodyParentReference ParentReference { get; set; }
		
		/// <summary>
		/// The link name associated with the object that needs to be detached.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [^\/\[\]\(\):\{\}#@!?\s\\;]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[^\/\[\]\(\):\{\}#@!?\s\\;]+")]
		public string LinkName { get; set; }
	}
	
	public class DetachObjectPutBodyParentReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class DetachPolicyPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetachPolicyPutBodyPolicyReference PolicyReference { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetachPolicyPutBodyObjectReference ObjectReference { get; set; }
	}
	
	public class DetachPolicyPutBodyPolicyReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class DetachPolicyPutBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class DetachTypedLinkPutBody
	{
		
		/// <summary>
		/// Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DetachTypedLinkPutBodyTypedLinkSpecifier TypedLinkSpecifier { get; set; }
	}
	
	public class DetachTypedLinkPutBodyTypedLinkSpecifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName TypedLinkFacet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference SourceObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameAndValue[] IdentityAttributeValues { get; set; }
	}
	
	public class GetAppliedSchemaVersionPostBody
	{
		
		/// <summary>
		/// The ARN of the applied schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
	}
	
	public class GetFacetPostBody
	{
		
		/// <summary>
		/// The name of the facet to retrieve.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class UpdateFacetPutBody
	{
		
		/// <summary>
		/// The name of the facet.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FacetAttributeUpdate[] AttributeUpdates { get; set; }
		
		/// <summary>
		/// The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectType ObjectType { get; set; }
	}
	
	public class GetLinkAttributesPostBody
	{
		
		/// <summary>
		/// Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetLinkAttributesPostBodyTypedLinkSpecifier TypedLinkSpecifier { get; set; }
		
		/// <summary>
		/// A list of attribute names whose values will be retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
		
		/// <summary>
		/// The consistency level at which to retrieve the attributes on a typed link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConsistencyLevel ConsistencyLevel { get; set; }
	}
	
	public class GetLinkAttributesPostBodyTypedLinkSpecifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName TypedLinkFacet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference SourceObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameAndValue[] IdentityAttributeValues { get; set; }
	}
	
	public class GetObjectAttributesPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetObjectAttributesPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// A facet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetObjectAttributesPostBodySchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// List of attribute names whose values will be retrieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
	}
	
	public class GetObjectAttributesPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class GetObjectAttributesPostBodySchemaFacet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FacetName { get; set; }
	}
	
	public class GetObjectInformationPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetObjectInformationPostBodyObjectReference ObjectReference { get; set; }
	}
	
	public class GetObjectInformationPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class PutSchemaFromJsonPutBody
	{
		
		/// <summary>
		/// The replacement JSON schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Document { get; set; }
	}
	
	public class GetTypedLinkFacetInformationPostBody
	{
		
		/// <summary>
		/// The unique name of the typed link facet.
		/// Required
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class ListAppliedSchemaArnsPostBody
	{
		
		/// <summary>
		/// The ARN of the directory you are listing.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
		
		/// <summary>
		/// The response for <code>ListAppliedSchemaArns</code> when this parameter is used will list all minor version ARNs for a major version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListAttachedIndicesPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListAttachedIndicesPostBodyTargetReference TargetReference { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListAttachedIndicesPostBodyTargetReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListDevelopmentSchemaArnsPostBody
	{
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListDirectoriesPostBody
	{
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The state of the directories in the list. Can be either Enabled, Disabled, or Deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DirectoryState State { get; set; }
	}
	
	public class ListFacetAttributesPostBody
	{
		
		/// <summary>
		/// The name of the facet whose attributes will be retrieved.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListFacetNamesPostBody
	{
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListIncomingTypedLinksPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListIncomingTypedLinksPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeRange[] FilterAttributeRanges { get; set; }
		
		/// <summary>
		/// Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListIncomingTypedLinksPostBodyFilterTypedLink FilterTypedLink { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The consistency level to execute the request at.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConsistencyLevel ConsistencyLevel { get; set; }
	}
	
	public class ListIncomingTypedLinksPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListIncomingTypedLinksPostBodyFilterTypedLink
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TypedLinkName { get; set; }
	}
	
	public class ListIndexPostBody
	{
		
		/// <summary>
		/// Specifies the ranges of indexed values that you want to query.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectAttributeRange[] RangesOnIndexedValues { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListIndexPostBodyIndexReference IndexReference { get; set; }
		
		/// <summary>
		/// The maximum number of objects in a single page to retrieve from the index during a request. For more information, see <a href="http://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	public class ListIndexPostBodyIndexReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListManagedSchemaArnsPostBody
	{
		
		/// <summary>
		/// The response for ListManagedSchemaArns. When this parameter is used, all minor version ARNs for a major version are listed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListObjectAttributesPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListObjectAttributesPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of items to be retrieved in a single call. This is an approximate number.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A facet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListObjectAttributesPostBodyFacetFilter FacetFilter { get; set; }
	}
	
	public class ListObjectAttributesPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListObjectAttributesPostBodyFacetFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FacetName { get; set; }
	}
	
	public class ListObjectChildrenPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListObjectChildrenPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of items to be retrieved in a single call. This is an approximate number.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListObjectChildrenPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListObjectParentPathsPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListObjectParentPathsPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of items to be retrieved in a single call. This is an approximate number.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListObjectParentPathsPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListObjectParentsPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListObjectParentsPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of items to be retrieved in a single call. This is an approximate number.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// When set to True, returns all <a>ListObjectParentsResponse$ParentLinks</a>. There could be multiple links between a parent-child pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeAllLinksToEachParent { get; set; }
	}
	
	public class ListObjectParentsPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListObjectPoliciesPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListObjectPoliciesPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of items to be retrieved in a single call. This is an approximate number.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListObjectPoliciesPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListOutgoingTypedLinksPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListOutgoingTypedLinksPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkAttributeRange[] FilterAttributeRanges { get; set; }
		
		/// <summary>
		/// Identifies the schema Amazon Resource Name (ARN) and facet name for the typed link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListOutgoingTypedLinksPostBodyFilterTypedLink FilterTypedLink { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The consistency level to execute the request at.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConsistencyLevel ConsistencyLevel { get; set; }
	}
	
	public class ListOutgoingTypedLinksPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListOutgoingTypedLinksPostBodyFilterTypedLink
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TypedLinkName { get; set; }
	}
	
	public class ListPolicyAttachmentsPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListPolicyAttachmentsPostBodyPolicyReference PolicyReference { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of items to be retrieved in a single call. This is an approximate number.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListPolicyAttachmentsPostBodyPolicyReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class ListPublishedSchemaArnsPostBody
	{
		
		/// <summary>
		/// The response for <code>ListPublishedSchemaArns</code> when this parameter is used will list all minor version ARNs for a major version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListTagsForResourcePostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The pagination token. This is for future use. Currently pagination is not supported for tagging.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently.
		/// Minimum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(50, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListTypedLinkFacetAttributesPostBody
	{
		
		/// <summary>
		/// The unique name of the typed link facet.
		/// Required
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListTypedLinkFacetNamesPostBody
	{
		
		/// <summary>
		/// The pagination token.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to retrieve.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class LookupPolicyPostBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LookupPolicyPostBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// The token to request the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of items to be retrieved in a single call. This is an approximate number.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class LookupPolicyPostBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class PublishSchemaPutBody
	{
		
		/// <summary>
		/// The major version under which the schema will be published. Schemas have both a major and minor version associated with them.
		/// Required
		/// Min length: 1
		/// Max length: 10
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Version { get; set; }
		
		/// <summary>
		/// The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.
		/// Min length: 1
		/// Max length: 10
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string MinorVersion { get; set; }
		
		/// <summary>
		/// The new name under which the schema will be published. If this is not provided, the development schema is considered.
		/// Min length: 1
		/// Max length: 32
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class RemoveFacetFromObjectPutBody
	{
		
		/// <summary>
		/// A facet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemoveFacetFromObjectPutBodySchemaFacet SchemaFacet { get; set; }
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemoveFacetFromObjectPutBodyObjectReference ObjectReference { get; set; }
	}
	
	public class RemoveFacetFromObjectPutBodySchemaFacet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SchemaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FacetName { get; set; }
	}
	
	public class RemoveFacetFromObjectPutBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class TagResourcePutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// A list of tag key-value pairs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	public class UntagResourcePutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Keys of the tag that need to be removed from the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	public class UpdateLinkAttributesPostBody
	{
		
		/// <summary>
		/// Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateLinkAttributesPostBodyTypedLinkSpecifier TypedLinkSpecifier { get; set; }
		
		/// <summary>
		/// The attributes update structure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LinkAttributeUpdate[] AttributeUpdates { get; set; }
	}
	
	public class UpdateLinkAttributesPostBodyTypedLinkSpecifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkSchemaAndFacetName TypedLinkFacet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference SourceObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectReference TargetObjectReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameAndValue[] IdentityAttributeValues { get; set; }
	}
	
	public class UpdateObjectAttributesPutBody
	{
		
		/// <summary>
		/// The reference that identifies an object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateObjectAttributesPutBodyObjectReference ObjectReference { get; set; }
		
		/// <summary>
		/// The attributes update structure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectAttributeUpdate[] AttributeUpdates { get; set; }
	}
	
	public class UpdateObjectAttributesPutBodyObjectReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Selector { get; set; }
	}
	
	public class UpdateSchemaPutBody
	{
		
		/// <summary>
		/// The name of the schema.
		/// Required
		/// Min length: 1
		/// Max length: 32
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
	}
	
	public class UpdateTypedLinkFacetPutBody
	{
		
		/// <summary>
		/// The unique name of the typed link facet.
		/// Required
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Attributes update structure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TypedLinkFacetAttributeUpdate[] AttributeUpdates { get; set; }
		
		/// <summary>
		/// The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentityAttributeOrder { get; set; }
	}
	
	public class UpgradeAppliedSchemaPutBody
	{
		
		/// <summary>
		/// The revision of the published schema to upgrade the directory to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublishedSchemaArn { get; set; }
		
		/// <summary>
		/// The ARN for the directory to which the upgraded schema will be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryArn { get; set; }
		
		/// <summary>
		/// Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	public class UpgradePublishedSchemaPutBody
	{
		
		/// <summary>
		/// The ARN of the development schema with the changes used for the upgrade.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DevelopmentSchemaArn { get; set; }
		
		/// <summary>
		/// The ARN of the published schema to be upgraded.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublishedSchemaArn { get; set; }
		
		/// <summary>
		/// Identifies the minor version of the published schema that will be created. This parameter is NOT optional.
		/// Required
		/// Min length: 1
		/// Max length: 10
		/// Pattern: ^[a-zA-Z0-9._-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]*$")]
		public string MinorVersion { get; set; }
		
		/// <summary>
		/// Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
