//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityEntryForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="archivedVersion")]
		public ArchivedObjectVersionForApiContract ArchivedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editEvent")]
		public System.Nullable<ActivityEntryForApiContractEditEvent> EditEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public EntryForApiContract Entry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchivedObjectVersionForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentName")]
		public string AgentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="anythingChanged")]
		public System.Nullable<System.Boolean> AnythingChanged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedFields")]
		public string[] ChangedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSnapshot")]
		public System.Nullable<System.Boolean> IsSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ArchivedObjectVersionForApiContractStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<UserForApiContractGroupId> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="knownLanguages")]
		public UserKnownLanguageContract[] KnownLanguages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberSince")]
		public System.Nullable<System.DateTimeOffset> MemberSince { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldUsernames")]
		public OldUsernameContract[] OldUsernames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verifiedArtist")]
		public System.Nullable<System.Boolean> VerifiedArtist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserForApiContractGroupId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Limited")]
		Limited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Regular")]
		Regular = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Trusted")]
		Trusted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Moderator")]
		Moderator = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Admin")]
		Admin = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserKnownLanguageContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="cultureCode")]
		public string CultureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proficiency")]
		public System.Nullable<UserKnownLanguageContractProficiency> Proficiency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserKnownLanguageContractProficiency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Basics")]
		Basics = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Intermediate")]
		Intermediate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Advanced")]
		Advanced = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Native")]
		Native = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntryThumbForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="mime")]
		public string Mime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlOriginal")]
		public string UrlOriginal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSmallThumb")]
		public string UrlSmallThumb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlThumb")]
		public string UrlThumb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlTinyThumb")]
		public string UrlTinyThumb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OldUsernameContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldName")]
		public string OldName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArchivedObjectVersionForApiContractStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Draft")]
		Draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Finished")]
		Finished = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Approved")]
		Approved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Locked")]
		Locked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityEntryForApiContractEditEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Created")]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Updated")]
		Updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Deleted")]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Restored")]
		Restored = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntryForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityDate")]
		public System.Nullable<System.DateTimeOffset> ActivityDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistType")]
		public System.Nullable<EntryForApiContractArtistType> ArtistType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public System.Nullable<EntryForApiContractDefaultNameLanguage> DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discType")]
		public System.Nullable<EntryForApiContractDiscType> DiscType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryType")]
		public System.Nullable<EntryForApiContractEntryType> EntryType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventCategory")]
		public System.Nullable<EntryForApiContractEventCategory> EventCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvs")]
		public PVContract[] Pvs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEventSeriesName")]
		public string ReleaseEventSeriesName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songListFeaturedCategory")]
		public System.Nullable<EntryForApiContractSongListFeaturedCategory> SongListFeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songType")]
		public System.Nullable<EntryForApiContractSongType> SongType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagCategoryName")]
		public string TagCategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public ArchivedWebLinkContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryForApiContractArtistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Circle")]
		Circle = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Label")]
		Label = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Producer")]
		Producer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Animator")]
		Animator = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lyricist")]
		Lyricist = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocaloid")]
		Vocaloid = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTAU")]
		UTAU = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CeVIO")]
		CeVIO = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherVoiceSynthesizer")]
		OtherVoiceSynthesizer = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherVocalist")]
		OtherVocalist = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherGroup")]
		OtherGroup = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherIndividual")]
		OtherIndividual = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Utaite")]
		Utaite = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Band")]
		Band = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Character")]
		Character = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SynthesizerV")]
		SynthesizerV = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CoverArtist")]
		CoverArtist = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryForApiContractDefaultNameLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Japanese")]
		Japanese = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Romaji")]
		Romaji = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="English")]
		English = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryForApiContractDiscType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Album")]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Single")]
		Single = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EP")]
		EP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SplitAlbum")]
		SplitAlbum = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Compilation")]
		Compilation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Video")]
		Video = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artbook")]
		Artbook = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Game")]
		Game = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fanmade")]
		Fanmade = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumental")]
		Instrumental = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryForApiContractEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Undefined")]
		Undefined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Album")]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artist")]
		Artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiscussionTopic")]
		DiscussionTopic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PV")]
		PV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEvent")]
		ReleaseEvent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEventSeries")]
		ReleaseEventSeries = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Song")]
		Song = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongList")]
		SongList = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tag")]
		Tag = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Venue")]
		Venue = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryForApiContractEventCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlbumRelease")]
		AlbumRelease = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Anniversary")]
		Anniversary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Club")]
		Club = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Concert")]
		Concert = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contest")]
		Contest = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Convention")]
		Convention = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Festival")]
		Festival = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalizedStringContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public EntryForApiContractDefaultNameLanguage Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PVContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<System.Int32> CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendedMetadata")]
		public PVExtendedMetadata ExtendedMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvId")]
		public string PvId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvType")]
		public System.Nullable<PVContractPvType> PvType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public System.Nullable<PVContractService> Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PVExtendedMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="json")]
		public string Json { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PVContractPvType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Original")]
		Original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Reprint")]
		Reprint = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PVContractService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NicoNicoDouga")]
		NicoNicoDouga = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Youtube")]
		Youtube = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundCloud")]
		SoundCloud = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vimeo")]
		Vimeo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Piapro")]
		Piapro = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bilibili")]
		Bilibili = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="File")]
		File = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LocalFile")]
		LocalFile = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Creofuga")]
		Creofuga = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bandcamp")]
		Bandcamp = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryForApiContractSongListFeaturedCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Concerts")]
		Concerts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VocaloidRanking")]
		VocaloidRanking = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pools")]
		Pools = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryForApiContractSongType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Original")]
		Original = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Remaster")]
		Remaster = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Remix")]
		Remix = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cover")]
		Cover = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arrangement")]
		Arrangement = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumental")]
		Instrumental = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mashup")]
		Mashup = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MusicPV")]
		MusicPV = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DramaPV")]
		DramaPV = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Live")]
		Live = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustration")]
		Illustration = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagUsageForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public TagBaseContract Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagBaseContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArchivedWebLinkContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ArchivedWebLinkContractCategory> Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArchivedWebLinkContractCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Official")]
		Official = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Commercial")]
		Commercial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Reference")]
		Reference = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityEntryForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ActivityEntryForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityEntryOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArchivedVersion")]
		ArchivedVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Entry")]
		Entry = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityEntrySortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDateDescending")]
		CreateDateDescending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDate")]
		CreateDate = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdvancedFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArtistType")]
		ArtistType = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLink")]
		WebLink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasUserAccount")]
		HasUserAccount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RootVoicebank")]
		RootVoicebank = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceProvider")]
		VoiceProvider = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasStoreLink")]
		HasStoreLink = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasTracks")]
		HasTracks = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoCoverPicture")]
		NoCoverPicture = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasAlbum")]
		HasAlbum = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasOriginalMedia")]
		HasOriginalMedia = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasMedia")]
		HasMedia = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasMultipleVoicebanks")]
		HasMultipleVoicebanks = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasPublishDate")]
		HasPublishDate = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lyrics")]
		Lyrics = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LyricsContent")]
		LyricsContent = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdvancedSearchFilterParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="filterType")]
		public AdvancedFilterType FilterType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="negate")]
		public System.Nullable<System.Boolean> Negate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="param")]
		public string Param { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverPictureMime")]
		public string CoverPictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discType")]
		public EntryForApiContractDiscType DiscType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingAverage")]
		public System.Nullable<System.Double> RatingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingCount")]
		public System.Nullable<System.Int32> RatingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public OptionalDateTimeContract ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEvent")]
		public ReleaseEventForApiContract ReleaseEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionalDateTimeContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEmpty")]
		public System.Nullable<System.Boolean> IsEmpty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseEventForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistForEventContract[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EntryForApiContractEventCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvs")]
		public PVContract[] Pvs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="series")]
		public ReleaseEventSeriesContract Series { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesId")]
		public System.Nullable<System.Int32> SeriesId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesNumber")]
		public System.Nullable<System.Int32> SeriesNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesSuffix")]
		public string SeriesSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songList")]
		public SongListBaseContract SongList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venue")]
		public VenueForApiContract Venue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venueName")]
		public string VenueName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForEventContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveRoles")]
		public System.Nullable<ArtistForEventContractEffectiveRoles> EffectiveRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public ArtistForEventContractEffectiveRoles Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistType")]
		public EntryForApiContractArtistType ArtistType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureMime")]
		public string PictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistForEventContractEffectiveRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dancer")]
		Dancer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJ")]
		DJ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumentalist")]
		Instrumentalist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Organizer")]
		Organizer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Promoter")]
		Promoter = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VJ")]
		VJ = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceManipulator")]
		VoiceManipulator = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherPerformer")]
		OtherPerformer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseEventSeriesContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EntryForApiContractEventCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureMime")]
		public string PictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebLinkContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ArchivedWebLinkContractCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="descriptionOrUrl")]
		public string DescriptionOrUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongListBaseContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="featuredCategory")]
		public EntryForApiContractSongListFeaturedCategory FeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VenueForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressCountryCode")]
		public string AddressCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public OptionalGeoPointContract Coordinates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ReleaseEventContract[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionalGeoPointContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasValue")]
		public System.Nullable<System.Boolean> HasValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseEventContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EntryForApiContractEventCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customName")]
		public System.Nullable<System.Boolean> CustomName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasVenueOrVenueName")]
		public System.Nullable<System.Boolean> HasVenueOrVenueName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inheritedCategory")]
		public EntryForApiContractEventCategory InheritedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureMime")]
		public string PictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="series")]
		public ReleaseEventSeriesContract Series { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songList")]
		public SongListBaseContract SongList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venue")]
		public VenueContract Venue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="venueName")]
		public string VenueName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VenueContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressCountryCode")]
		public string AddressCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public OptionalGeoPointContract Coordinates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebLinkForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ArchivedWebLinkContractCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="descriptionOrUrl")]
		public string DescriptionOrUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumDiscPropertiesContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="discNumber")]
		public System.Nullable<System.Int32> DiscNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public System.Nullable<AlbumDiscPropertiesContractMediaType> MediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlbumDiscPropertiesContractMediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Audio")]
		Audio = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Video")]
		Video = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistForAlbumForApiContract[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public string Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="catalogNumber")]
		public string CatalogNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discType")]
		public EntryForApiContractDiscType DiscType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discs")]
		public AlbumDiscPropertiesContract[] Discs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public AlbumIdentifierContract[] Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedTo")]
		public System.Nullable<System.Int32> MergedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvs")]
		public PVContract[] Pvs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingAverage")]
		public System.Nullable<System.Double> RatingAverage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingCount")]
		public System.Nullable<System.Int32> RatingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public OptionalDateTimeContract ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEvent")]
		public ReleaseEventForApiContract ReleaseEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public SongInAlbumForApiContract[] Tracks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForAlbumForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public System.Nullable<ArtistForAlbumForApiContractCategories> Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveRoles")]
		public System.Nullable<ArtistForAlbumForApiContractEffectiveRoles> EffectiveRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSupport")]
		public System.Nullable<System.Boolean> IsSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public ArtistForAlbumForApiContractEffectiveRoles Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistForAlbumForApiContractCategories
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Producer")]
		Producer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Animator")]
		Animator = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Label")]
		Label = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Circle")]
		Circle = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Band")]
		Band = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subject")]
		Subject = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistForAlbumForApiContractEffectiveRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Animator")]
		Animator = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arranger")]
		Arranger = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Composer")]
		Composer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Distributor")]
		Distributor = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumentalist")]
		Instrumentalist = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lyricist")]
		Lyricist = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mastering")]
		Mastering = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Publisher")]
		Publisher = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceManipulator")]
		VoiceManipulator = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mixer")]
		Mixer = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Chorus")]
		Chorus = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Encoder")]
		Encoder = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VocalDataProvider")]
		VocalDataProvider = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumIdentifierContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongInAlbumForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="discNumber")]
		public System.Nullable<System.Int32> DiscNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<SongInAlbumForApiContractRating> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackNumber")]
		public System.Nullable<System.Int32> TrackNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongInAlbumForApiContractRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dislike")]
		Dislike = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Like")]
		Like = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Favorite")]
		Favorite = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public AlbumContract[] Albums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistForSongContract[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="favoritedTimes")]
		public System.Nullable<System.Int32> FavoritedTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lengthSeconds")]
		public System.Nullable<System.Int32> LengthSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lyrics")]
		public LyricsForSongContract[] Lyrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxMilliBpm")]
		public System.Nullable<System.Int32> MaxMilliBpm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedTo")]
		public System.Nullable<System.Int32> MergedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minMilliBpm")]
		public System.Nullable<System.Int32> MinMilliBpm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalVersionId")]
		public System.Nullable<System.Int32> OriginalVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvServices")]
		public System.Nullable<SongForApiContractPvServices> PvServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvs")]
		public PVContract[] Pvs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingScore")]
		public System.Nullable<System.Int32> RatingScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseEvent")]
		public ReleaseEventForApiContract ReleaseEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songType")]
		public EntryForApiContractSongType SongType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForSongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public ArtistForAlbumForApiContractCategories Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveRoles")]
		public ArtistForAlbumForApiContractEffectiveRoles EffectiveRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustomName")]
		public System.Nullable<System.Boolean> IsCustomName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSupport")]
		public System.Nullable<System.Boolean> IsSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public ArtistForAlbumForApiContractEffectiveRoles Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LyricsForSongContract
	{
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="cultureCode")]
		public string CultureCode { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="translationType")]
		public System.Nullable<LyricsForSongContractTranslationType> TranslationType { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LyricsForSongContractTranslationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Original")]
		Original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Romanized")]
		Romanized = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Translation")]
		Translation = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongForApiContractPvServices
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NicoNicoDouga")]
		NicoNicoDouga = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Youtube")]
		Youtube = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundCloud")]
		SoundCloud = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vimeo")]
		Vimeo = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Piapro")]
		Piapro = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bilibili")]
		Bilibili = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="File")]
		File = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LocalFile")]
		LocalFile = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Creofuga")]
		Creofuga = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bandcamp")]
		Bandcamp = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AlbumForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="album")]
		public AlbumForApiContract Album { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public System.Nullable<AlbumForUserForApiContractMediaType> MediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseStatus")]
		public System.Nullable<AlbumForUserForApiContractPurchaseStatus> PurchaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Int32> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserForApiContract User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlbumForUserForApiContractMediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PhysicalDisc")]
		PhysicalDisc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DigitalDownload")]
		DigitalDownload = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlbumForUserForApiContractPurchaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wishlisted")]
		Wishlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ordered")]
		Ordered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Owned")]
		Owned = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumForUserForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AlbumForUserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlbumOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artists")]
		Artists = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Discs")]
		Discs = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Identifiers")]
		Identifiers = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PVs")]
		PVs = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEvent")]
		ReleaseEvent = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tags")]
		Tags = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tracks")]
		Tracks = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlbumReviewContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="albumId")]
		public System.Nullable<System.Int32> AlbumId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserForApiContract User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlbumSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseDate")]
		ReleaseDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseDateWithNulls")]
		ReleaseDateWithNulls = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDate")]
		AdditionDate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RatingAverage")]
		RatingAverage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RatingTotal")]
		RatingTotal = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NameThenReleaseDate")]
		NameThenReleaseDate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CollectionCount")]
		CollectionCount = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistAlbumParticipationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Everything")]
		Everything = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnlyMainAlbums")]
		OnlyMainAlbums = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnlyCollaborations")]
		OnlyCollaborations = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistCategories
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Producer")]
		Producer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Animator")]
		Animator = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Label")]
		Label = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Circle")]
		Circle = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Band")]
		Band = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subject")]
		Subject = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistEventRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dancer")]
		Dancer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DJ")]
		DJ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumentalist")]
		Instrumentalist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Organizer")]
		Organizer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Promoter")]
		Promoter = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VJ")]
		VJ = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceManipulator")]
		VoiceManipulator = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherPerformer")]
		OtherPerformer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistLinks")]
		public ArtistForArtistForApiContract[] ArtistLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistLinksReverse")]
		public ArtistForArtistForApiContract[] ArtistLinksReverse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistType")]
		public EntryForApiContractArtistType ArtistType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseVoicebank")]
		public ArtistContract BaseVoicebank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultName")]
		public string DefaultName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedTo")]
		public System.Nullable<System.Int32> MergedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureMime")]
		public string PictureMime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public ArtistRelationsForApi Relations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForArtistForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public System.Nullable<ArtistForArtistForApiContractLinkType> LinkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistForArtistForApiContractLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CharacterDesigner")]
		CharacterDesigner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Manager")]
		Manager = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceProvider")]
		VoiceProvider = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistRelationsForApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="latestAlbums")]
		public AlbumForApiContract[] LatestAlbums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestEvents")]
		public ReleaseEventForApiContract[] LatestEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestSongs")]
		public SongForApiContract[] LatestSongs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="popularAlbums")]
		public AlbumForApiContract[] PopularAlbums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="popularSongs")]
		public SongForApiContract[] PopularSongs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ArtistForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public ArtistForApiContract Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtistForUserForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ArtistForUserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CharacterDesigner")]
		CharacterDesigner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Manager")]
		Manager = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceProvider")]
		VoiceProvider = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArtistLinks")]
		ArtistLinks = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArtistLinksReverse")]
		ArtistLinksReverse = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BaseVoicebank")]
		BaseVoicebank = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tags")]
		Tags = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistRelationsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LatestAlbums")]
		LatestAlbums = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LatestEvents")]
		LatestEvents = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LatestSongs")]
		LatestSongs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PopularAlbums")]
		PopularAlbums = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PopularSongs")]
		PopularSongs = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistRoles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Animator")]
		Animator = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arranger")]
		Arranger = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Composer")]
		Composer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Distributor")]
		Distributor = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumentalist")]
		Instrumentalist = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lyricist")]
		Lyricist = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mastering")]
		Mastering = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Publisher")]
		Publisher = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VoiceManipulator")]
		VoiceManipulator = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mixer")]
		Mixer = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Chorus")]
		Chorus = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Encoder")]
		Encoder = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VocalDataProvider")]
		VocalDataProvider = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDate")]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDateAsc")]
		AdditionDateAsc = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseDate")]
		ReleaseDate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongCount")]
		SongCount = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongRating")]
		SongRating = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FollowerCount")]
		FollowerCount = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArtistType")]
		ArtistType = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ArtistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Circle")]
		Circle = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Label")]
		Label = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Producer")]
		Producer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Animator")]
		Animator = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustrator")]
		Illustrator = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lyricist")]
		Lyricist = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocaloid")]
		Vocaloid = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTAU")]
		UTAU = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CeVIO")]
		CeVIO = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherVoiceSynthesizer")]
		OtherVoiceSynthesizer = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherVocalist")]
		OtherVocalist = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherGroup")]
		OtherGroup = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherIndividual")]
		OtherIndividual = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Utaite")]
		Utaite = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Band")]
		Band = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocalist")]
		Vocalist = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Character")]
		Character = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SynthesizerV")]
		SynthesizerV = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CoverArtist")]
		CoverArtist = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public EntryForApiContract Entry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CommentForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommentOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Entry")]
		Entry = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommentSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDateDescending")]
		CreateDateDescending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDate")]
		CreateDate = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentLanguagePreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Japanese")]
		Japanese = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Romaji")]
		Romaji = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="English")]
		English = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentLanguageSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Japanese")]
		Japanese = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Romaji")]
		Romaji = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="English")]
		English = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReportModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportType")]
		public System.Nullable<CreateReportModelReportType> ReportType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateReportModelReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MaliciousIP")]
		MaliciousIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Spamming")]
		Spamming = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RemovePermissions")]
		RemovePermissions = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiscMediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Audio")]
		Audio = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Video")]
		Video = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiscType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Album")]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Single")]
		Single = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EP")]
		EP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SplitAlbum")]
		SplitAlbum = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Compilation")]
		Compilation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Video")]
		Video = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artbook")]
		Artbook = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Game")]
		Game = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fanmade")]
		Fanmade = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumental")]
		Instrumental = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscussionFolderContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTopicAuthor")]
		public UserForApiContract LastTopicAuthor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTopicDate")]
		public System.Nullable<System.DateTimeOffset> LastTopicDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topicCount")]
		public System.Nullable<System.Int32> TopicCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiscussionFolderOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LastTopic")]
		LastTopic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TopicCount")]
		TopicCount = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscussionTopicContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commentCount")]
		public System.Nullable<System.Int32> CommentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public CommentForApiContract[] Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="folderId")]
		public System.Nullable<System.Int32> FolderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastComment")]
		public CommentForApiContract LastComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locked")]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiscussionTopicContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DiscussionTopicContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiscussionTopicOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comments")]
		Comments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CommentCount")]
		CommentCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Content")]
		Content = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LastComment")]
		LastComment = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiscussionTopicSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DateCreated")]
		DateCreated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LastCommentDate")]
		LastCommentDate = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DistanceUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilometers")]
		Kilometers = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Miles")]
		Miles = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnglishTranslatedStringContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="english")]
		public string English { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original")]
		public string Original { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntryEditDataContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int32> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryEditEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Created")]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Updated")]
		Updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Deleted")]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Restored")]
		Restored = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntryForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EntryForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PVs")]
		PVs = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tags")]
		Tags = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntrySortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDate")]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityDate")]
		ActivityDate = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Draft")]
		Draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Finished")]
		Finished = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Approved")]
		Approved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Locked")]
		Locked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Undefined")]
		Undefined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Album")]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artist")]
		Artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiscussionTopic")]
		DiscussionTopic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PV")]
		PV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEvent")]
		ReleaseEvent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEventSeries")]
		ReleaseEventSeries = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Song")]
		Song = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongList")]
		SongList = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tag")]
		Tag = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Venue")]
		Venue = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Album")]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artist")]
		Artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiscussionTopic")]
		DiscussionTopic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PV")]
		PV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEvent")]
		ReleaseEvent = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEventSeries")]
		ReleaseEventSeries = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Song")]
		Song = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongList")]
		SongList = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tag")]
		Tag = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Venue")]
		Venue = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlbumRelease")]
		AlbumRelease = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Anniversary")]
		Anniversary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Club")]
		Club = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Concert")]
		Concert = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contest")]
		Contest = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Convention")]
		Convention = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Festival")]
		Festival = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidInfo")]
		InvalidInfo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Duplicate")]
		Duplicate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inappropriate")]
		Inappropriate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Date")]
		Date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDate")]
		AdditionDate = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SeriesName")]
		SeriesName = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VenueName")]
		VenueName = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalizedStringWithIdContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public EntryForApiContractDefaultNameLanguage Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LogicalGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="And")]
		And = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Or")]
		Or = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PhysicalDisc")]
		PhysicalDisc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DigitalDownload")]
		DigitalDownload = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NameMatchMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Auto")]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Partial")]
		Partial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StartsWith")]
		StartsWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Exact")]
		Exact = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Words")]
		Words = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PVForSongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<System.Int32> CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extendedMetadata")]
		public PVExtendedMetadata ExtendedMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvId")]
		public string PvId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvType")]
		public PVContractPvType PvType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public PVContractService Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artistString")]
		public string ArtistString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="favoritedTimes")]
		public System.Nullable<System.Int32> FavoritedTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lengthSeconds")]
		public System.Nullable<System.Int32> LengthSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nicoId")]
		public string NicoId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pvServices")]
		public SongForApiContractPvServices PvServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingScore")]
		public System.Nullable<System.Int32> RatingScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songType")]
		public EntryForApiContractSongType SongType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbUrl")]
		public string ThumbUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PVForSongContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PVForSongContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PVService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NicoNicoDouga")]
		NicoNicoDouga = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Youtube")]
		Youtube = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundCloud")]
		SoundCloud = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vimeo")]
		Vimeo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Piapro")]
		Piapro = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bilibili")]
		Bilibili = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="File")]
		File = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LocalFile")]
		LocalFile = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Creofuga")]
		Creofuga = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bandcamp")]
		Bandcamp = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PVServices
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NicoNicoDouga")]
		NicoNicoDouga = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Youtube")]
		Youtube = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundCloud")]
		SoundCloud = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vimeo")]
		Vimeo = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Piapro")]
		Piapro = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bilibili")]
		Bilibili = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="File")]
		File = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LocalFile")]
		LocalFile = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Creofuga")]
		Creofuga = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bandcamp")]
		Bandcamp = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PVType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Original")]
		Original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Reprint")]
		Reprint = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PurchaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wishlisted")]
		Wishlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ordered")]
		Ordered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Owned")]
		Owned = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PurchaseStatuses
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wishlisted")]
		Wishlisted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ordered")]
		Ordered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Owned")]
		Owned = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RatedSongForUserForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public SongInAlbumForApiContractRating Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserForApiContract User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RatedSongForUserForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RatedSongForUserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RatedSongForUserSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDate")]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PublishDate")]
		PublishDate = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FavoritedTimes")]
		FavoritedTimes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RatingScore")]
		RatingScore = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RatingDate")]
		RatingDate = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelatedSongsContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="artistMatches")]
		public SongForApiContract[] ArtistMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="likeMatches")]
		public SongForApiContract[] LikeMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagMatches")]
		public SongForApiContract[] TagMatches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseEventForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ReleaseEventForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReleaseEventOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artists")]
		Artists = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Series")]
		Series = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongList")]
		SongList = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tags")]
		Tags = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Venue")]
		Venue = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PVs")]
		PVs = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseEventSeriesForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EntryForApiContractEventCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ReleaseEventForApiContract[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseEventSeriesForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ReleaseEventSeriesForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseEventSeriesForEditForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public EntryForApiContractEventCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringWithIdContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReleaseEventSeriesOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Events")]
		Events = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SongForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongInListEditContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songInListId")]
		public System.Nullable<System.Int32> SongInListId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongInListForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="song")]
		public SongForApiContract Song { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongInListForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SongInListForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongListFeaturedCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Concerts")]
		Concerts = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VocaloidRanking")]
		VocaloidRanking = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pools")]
		Pools = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongListForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserForApiContract Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateTimeOffset> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ReleaseEventForApiContract[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featuredCategory")]
		public EntryForApiContractSongListFeaturedCategory FeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestComments")]
		public CommentForApiContract[] LatestComments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagUsageForApiContract[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongListForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SongListForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongListForEditForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateTimeOffset> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featuredCategory")]
		public EntryForApiContractSongListFeaturedCategory FeaturedCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="songLinks")]
		public SongInListEditContract[] SongLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateNotes")]
		public string UpdateNotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongListOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Events")]
		Events = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tags")]
		Tags = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongListSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Date")]
		Date = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDate")]
		CreateDate = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Albums")]
		Albums = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artists")]
		Artists = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lyrics")]
		Lyrics = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PVs")]
		PVs = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseEvent")]
		ReleaseEvent = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tags")]
		Tags = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ThumbUrl")]
		ThumbUrl = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bpm")]
		Bpm = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SongRatingContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public SongInAlbumForApiContractRating Rating { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDate")]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PublishDate")]
		PublishDate = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FavoritedTimes")]
		FavoritedTimes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RatingScore")]
		RatingScore = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TagUsageCount")]
		TagUsageCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongType")]
		SongType = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unspecified")]
		Unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Original")]
		Original = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Remaster")]
		Remaster = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Remix")]
		Remix = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cover")]
		Cover = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arrangement")]
		Arrangement = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instrumental")]
		Instrumental = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mashup")]
		Mashup = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MusicPV")]
		MusicPV = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DramaPV")]
		DramaPV = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Live")]
		Live = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Illustration")]
		Illustration = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongVocalistSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Vocaloid")]
		Vocaloid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTAU")]
		UTAU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SongVoteRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dislike")]
		Dislike = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Like")]
		Like = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Favorite")]
		Favorite = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ascending")]
		Ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Descending")]
		Descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagForApiContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalNames")]
		public string AdditionalNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aliasedTo")]
		public TagBaseContract AliasedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultNameLanguage")]
		public EntryForApiContractDefaultNameLanguage DefaultNameLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainPicture")]
		public EntryThumbForApiContract MainPicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public LocalizedStringWithIdContract[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public TagBaseContract Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedTags")]
		public TagBaseContract[] RelatedTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ArchivedObjectVersionForApiContractStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public System.Nullable<System.Int32> Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translatedDescription")]
		public EnglishTranslatedStringContract TranslatedDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlSlug")]
		public string UrlSlug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageCount")]
		public System.Nullable<System.Int32> UsageCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webLinks")]
		public WebLinkForApiContract[] WebLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TagForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TagOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AliasedTo")]
		AliasedTo = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Parent")]
		Parent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RelatedTags")]
		RelatedTags = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TranslatedDescription")]
		TranslatedDescription = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TagReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidInfo")]
		InvalidInfo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Duplicate")]
		Duplicate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inappropriate")]
		Inappropriate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TagSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionDate")]
		AdditionDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UsageCount")]
		UsageCount = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TagTargetTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Album")]
		Album = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Artist")]
		Artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlbumArtist")]
		AlbumArtist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Event")]
		Event = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Song")]
		Song = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlbumSong")]
		AlbumSong = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArtistSong")]
		ArtistSong = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SongList")]
		SongList = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TopSongsDateFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDate")]
		CreateDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PublishDate")]
		PublishDate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Popularity")]
		Popularity = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TranslationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Original")]
		Original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Romanized")]
		Romanized = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Translation")]
		Translation = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserEventRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Interested")]
		Interested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Attending")]
		Attending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserGroupId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Limited")]
		Limited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Regular")]
		Regular = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Trusted")]
		Trusted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Moderator")]
		Moderator = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Admin")]
		Admin = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserInboxType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Received")]
		Received = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sent")]
		Sent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Notifications")]
		Notifications = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserLanguageProficiency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nothing")]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Basics")]
		Basics = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Intermediate")]
		Intermediate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Advanced")]
		Advanced = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Native")]
		Native = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserMessageContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdFormatted")]
		public string CreatedFormatted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="highPriority")]
		public System.Nullable<System.Boolean> HighPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inbox")]
		public UserInboxType Inbox { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="read")]
		public System.Nullable<System.Boolean> Read { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiver")]
		public UserForApiContract Receiver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sender")]
		public UserForApiContract Sender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserMessageContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserMessageContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KnownLanguages")]
		KnownLanguages = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MainPicture")]
		MainPicture = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OldUsernames")]
		OldUsernames = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MaliciousIP")]
		MaliciousIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Spamming")]
		Spamming = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RemovePermissions")]
		RemovePermissions = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegisterDate")]
		RegisterDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VenueForApiContractPartialFindResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VenueForApiContract[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VenueOptionalFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdditionalNames")]
		AdditionalNames = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Description")]
		Description = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Events")]
		Events = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Names")]
		Names = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WebLinks")]
		WebLinks = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VenueReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidInfo")]
		InvalidInfo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Duplicate")]
		Duplicate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inappropriate")]
		Inappropriate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VenueSortRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Distance")]
		Distance = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebLinkCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Official")]
		Official = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Commercial")]
		Commercial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Reference")]
		Reference = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndEntryTypeAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangAndSortRule api/activityEntries
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivityEntryForApiContractPartialFindResult> ApiActivityEntriesGetByBeforeAndSinceAndUserIdAndEditEventAndEntryTypeAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangAndSortRuleAsync(System.DateTimeOffset before, System.DateTimeOffset since, int userId, ActivityEntryForApiContractEditEvent editEvent, EntryForApiContractEntryType entryType, int maxResults, bool getTotalCount, ActivityEntryOptionalFields fields, EntryOptionalFields entryFields, ContentLanguagePreference lang, ActivityEntrySortRule sortRule, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/activityEntries?before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since=" + since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&userId="+userId+"&editEvent=" + editEvent+"&entryType=" + entryType+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&fields=" + fields+"&entryFields=" + entryFields+"&lang=" + lang+"&sortRule=" + sortRule;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityEntryForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbumsGetByQueryAndDiscTypesAndTagName_AndTagId_AndChildTagsAndArtistId_AndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLang api/albums
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForApiContractPartialFindResult> ApiAlbumsGetByQueryAndDiscTypesAndTagName_AndTagId_AndChildTagsAndArtistId_AndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndBarcodeAndStatusAndReleaseDateAfterAndReleaseDateBeforeAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndDeletedAndNameMatchModeAndFieldsAndLangAsync(
					string query, 
					EntryForApiContractDiscType discTypes, 
					string[] tagName_, 
					int[] tagId_, 
					bool childTags, 
					int[] artistId_, 
					ArtistAlbumParticipationStatus artistParticipationStatus, 
					bool childVoicebanks, 
					bool includeMembers, 
					string barcode, 
					ArchivedObjectVersionForApiContractStatus status, 
					System.DateTimeOffset releaseDateAfter, 
					System.DateTimeOffset releaseDateBefore, 
					AdvancedSearchFilterParams[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					AlbumSortRule sort, 
					bool preferAccurateMatches, 
					bool deleted, 
					NameMatchMode nameMatchMode, 
					AlbumOptionalFields fields, 
					ContentLanguagePreference lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&discTypes=" + discTypes+"&"+string.Join("&", tagName_.Select(z => $"tagName[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&childTags="+childTags+"&"+string.Join("&", artistId_.Select(z => $"artistId[]={z}"))+"&artistParticipationStatus=" + artistParticipationStatus+"&childVoicebanks="+childVoicebanks+"&includeMembers="+includeMembers+"&barcode=" + (barcode==null? "" : System.Uri.EscapeDataString(barcode))+"&status=" + status+"&releaseDateAfter=" + releaseDateAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&releaseDateBefore=" + releaseDateBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={z}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&deleted="+deleted+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbumsComments_commentIdDelete api/albums/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiAlbumsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbumsComments_commentIdPost api/albums/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiAlbumsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbumsNamesGetByQueryAndNameMatchModeAndMaxResults api/albums/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiAlbumsNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, NameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbumsNewGetByLanguagePreferenceAndFields api/albums/new
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForApiContract[]> ApiAlbumsNewGetByLanguagePreferenceAndFieldsAsync(ContentLanguagePreference languagePreference, AlbumOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/new?languagePreference=" + languagePreference+"&fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbumsTopGetByIgnoreIds_AndLanguagePreferenceAndFields api/albums/top
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForApiContract[]> ApiAlbumsTopGetByIgnoreIds_AndLanguagePreferenceAndFieldsAsync(int[] ignoreIds_, ContentLanguagePreference languagePreference, AlbumOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/top?"+string.Join("&", ignoreIds_.Select(z => $"ignoreIds[]={z}"))+"&languagePreference=" + languagePreference+"&fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idDeleteByNotes api/albums/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiAlbums_idDeleteByNotesAsync(int id, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idGetByFieldsAndSongFieldsAndLang api/albums/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForApiContract> ApiAlbums_idGetByFieldsAndSongFieldsAndLangAsync(int id, AlbumOptionalFields fields, SongOptionalFields songFields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"?fields=" + fields+"&songFields=" + songFields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idCommentsGet api/albums/{id}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract[]> ApiAlbums_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idCommentsPost api/albums/{id}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiAlbums_idCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idReviewsGetByLanguageCode api/albums/{id}/reviews
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumReviewContract[]> ApiAlbums_idReviewsGetByLanguageCodeAsync(int id, string languageCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/reviews?languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumReviewContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idReviewsPost api/albums/{id}/reviews
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumReviewContract> ApiAlbums_idReviewsPostAsync(int id, AlbumReviewContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/reviews";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumReviewContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idReviews_reviewIdDelete api/albums/{id}/reviews/{reviewId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiAlbums_idReviews_reviewIdDeleteAsync(int reviewId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reviews/"+reviewId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idTracksGetByFieldsAndLang api/albums/{id}/tracks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongInAlbumForApiContract[]> ApiAlbums_idTracksGetByFieldsAndLangAsync(int id, SongOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/tracks?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongInAlbumForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idTracksFieldsGetByField_AndDiscNumberAndLang api/albums/{id}/tracks/fields
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiAlbums_idTracksFieldsGetByField_AndDiscNumberAndLangAsync(int id, string[] field_, int discNumber, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/tracks/fields?"+string.Join("&", field_.Select(z => $"field[]={System.Uri.EscapeDataString(z.ToString())}"))+"&discNumber="+discNumber+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiAlbums_idUser_collectionsGetByLanguagePreference api/albums/{id}/user-collections
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForUserForApiContract[]> ApiAlbums_idUser_collectionsGetByLanguagePreferenceAsync(int id, ContentLanguagePreference languagePreference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/albums/"+id+"/user-collections?languagePreference=" + languagePreference;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForUserForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagName_AndTagId_AndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLang api/artists
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ArtistForApiContractPartialFindResult> ApiArtistsGetByQueryAndArtistTypesAndAllowBaseVoicebanksAndTagName_AndTagId_AndChildTagsAndFollowedByUserIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangAsync(
					string query, 
					string artistTypes, 
					bool allowBaseVoicebanks, 
					string[] tagName_, 
					int[] tagId_, 
					bool childTags, 
					int followedByUserId, 
					ArchivedObjectVersionForApiContractStatus status, 
					AdvancedSearchFilterParams[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					ArtistSortRule sort, 
					bool preferAccurateMatches, 
					NameMatchMode nameMatchMode, 
					ArtistOptionalFields fields, 
					ContentLanguagePreference lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&artistTypes=" + (artistTypes==null? "" : System.Uri.EscapeDataString(artistTypes))+"&allowBaseVoicebanks="+allowBaseVoicebanks+"&"+string.Join("&", tagName_.Select(z => $"tagName[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&childTags="+childTags+"&followedByUserId="+followedByUserId+"&status=" + status+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={z}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtistForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtistsComments_commentIdDelete api/artists/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiArtistsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtistsComments_commentIdPost api/artists/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiArtistsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtistsNamesGetByQueryAndNameMatchModeAndMaxResults api/artists/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiArtistsNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, NameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtists_idDeleteByNotes api/artists/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiArtists_idDeleteByNotesAsync(int id, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtists_idGetByFieldsAndRelationsAndLang api/artists/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ArtistForApiContract> ApiArtists_idGetByFieldsAndRelationsAndLangAsync(int id, ArtistOptionalFields fields, ArtistRelationsFields relations, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"?fields=" + fields+"&relations=" + relations+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtistForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtists_idCommentsGet api/artists/{id}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract[]> ApiArtists_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiArtists_idCommentsPost api/artists/{id}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiArtists_idCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/artists/"+id+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiCommentsGetByBeforeAndSinceAndUserIdAndEntryTypeAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangAndSortRule api/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContractPartialFindResult> ApiCommentsGetByBeforeAndSinceAndUserIdAndEntryTypeAndMaxResultsAndGetTotalCountAndFieldsAndEntryFieldsAndLangAndSortRuleAsync(System.DateTimeOffset before, System.DateTimeOffset since, int userId, EntryForApiContractEntryType entryType, int maxResults, bool getTotalCount, CommentOptionalFields fields, EntryOptionalFields entryFields, ContentLanguagePreference lang, ActivityEntrySortRule sortRule, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments?before=" + before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since=" + since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&userId="+userId+"&entryType=" + entryType+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&fields=" + fields+"&entryFields=" + entryFields+"&lang=" + lang+"&sortRule=" + sortRule;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiComments_entryType_commentsGetByEntryId api/comments/{entryType}-comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContractPartialFindResult> ApiComments_entryType_commentsGetByEntryIdAsync(EntryForApiContractEntryType entryType, int entryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments?entryId="+entryId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiComments_entryType_commentsPost api/comments/{entryType}-comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiComments_entryType_commentsPostAsync(EntryForApiContractEntryType entryType, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiComments_entryType_comments_commentIdDelete api/comments/{entryType}-comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiComments_entryType_comments_commentIdDeleteAsync(EntryForApiContractEntryType entryType, int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiComments_entryType_comments_commentIdPost api/comments/{entryType}-comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiComments_entryType_comments_commentIdPostAsync(EntryForApiContractEntryType entryType, int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/comments/"+entryType+"-comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsComments_commentIdDelete api/discussions/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiDiscussionsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsComments_commentIdPost api/discussions/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiDiscussionsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFoldersGetByFields api/discussions/folders
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DiscussionFolderContract[]> ApiDiscussionsFoldersGetByFieldsAsync(DiscussionFolderOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders?fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscussionFolderContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFoldersPost api/discussions/folders
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DiscussionFolderContract> ApiDiscussionsFoldersPostAsync(DiscussionFolderContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscussionFolderContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFolders_folderIdTopicsGetByFields api/discussions/folders/{folderId}/topics
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DiscussionTopicContract[]> ApiDiscussionsFolders_folderIdTopicsGetByFieldsAsync(int folderId, DiscussionTopicOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders/"+folderId+"/topics?fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscussionTopicContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsFolders_folderIdTopicsPost api/discussions/folders/{folderId}/topics
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DiscussionTopicContract> ApiDiscussionsFolders_folderIdTopicsPostAsync(int folderId, DiscussionTopicContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/folders/"+folderId+"/topics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscussionTopicContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopicsGetByFolderIdAndStartAndMaxResultsAndGetTotalCountAndSortAndFields api/discussions/topics
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DiscussionTopicContractPartialFindResult> ApiDiscussionsTopicsGetByFolderIdAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAsync(int folderId, int start, int maxResults, bool getTotalCount, DiscussionTopicSortRule sort, DiscussionTopicOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics?folderId="+folderId+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscussionTopicContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdDelete api/discussions/topics/{topicId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiDiscussionsTopics_topicIdDeleteAsync(int topicId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdGetByFields api/discussions/topics/{topicId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DiscussionTopicContract> ApiDiscussionsTopics_topicIdGetByFieldsAsync(int topicId, DiscussionTopicOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId+"?fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DiscussionTopicContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdPost api/discussions/topics/{topicId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiDiscussionsTopics_topicIdPostAsync(int topicId, DiscussionTopicContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiDiscussionsTopics_topicIdCommentsPost api/discussions/topics/{topicId}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiDiscussionsTopics_topicIdCommentsPostAsync(int topicId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/discussions/topics/"+topicId+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiEntriesGetByQueryAndTagName_AndTagId_AndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/entries
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EntryForApiContractPartialFindResult> ApiEntriesGetByQueryAndTagName_AndTagId_AndChildTagsAndEntryTypesAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(string query, string[] tagName_, int[] tagId_, bool childTags, EntryTypes entryTypes, ArchivedObjectVersionForApiContractStatus status, int start, int maxResults, bool getTotalCount, EntrySortRule sort, NameMatchMode nameMatchMode, EntryOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/entries?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagName_.Select(z => $"tagName[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&childTags="+childTags+"&entryTypes=" + entryTypes+"&status=" + status+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntryForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiEntriesNamesGetByQueryAndNameMatchModeAndMaxResults api/entries/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiEntriesNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, NameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/entries/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiEntry_types_entryType_subTypeTagGetByFields api/entry-types/{entryType}/{subType}/tag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagForApiContract> ApiEntry_types_entryType_subTypeTagGetByFieldsAsync(EntryForApiContractEntryType entryType, string subType, TagOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/entry-types/"+entryType+"/"+ (subType==null? "" : System.Uri.EscapeDataString(subType))+"/tag&fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiPvsFor_songsGetByNameAndAuthorAndServiceAndMaxResultsAndGetTotalCountAndLang api/pvs/for-songs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PVForSongContractPartialFindResult> ApiPvsFor_songsGetByNameAndAuthorAndServiceAndMaxResultsAndGetTotalCountAndLangAsync(string name, string author, PVContractService service, int maxResults, bool getTotalCount, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pvs/for-songs?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&author=" + (author==null? "" : System.Uri.EscapeDataString(author))+"&service=" + service+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PVForSongContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEventSeriesGetByQueryAndFieldsAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndLang api/releaseEventSeries
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseEventSeriesForApiContractPartialFindResult> ApiReleaseEventSeriesGetByQueryAndFieldsAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndLangAsync(string query, ReleaseEventSeriesOptionalFields fields, int start, int maxResults, bool getTotalCount, NameMatchMode nameMatchMode, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEventSeries?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&fields=" + fields+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&nameMatchMode=" + nameMatchMode+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleaseEventSeriesForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEventSeries_idDeleteByNotesAndHardDelete api/releaseEventSeries/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiReleaseEventSeries_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEventSeries/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEventSeries_idGetByFieldsAndLang api/releaseEventSeries/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseEventSeriesForApiContract> ApiReleaseEventSeries_idGetByFieldsAndLangAsync(int id, ReleaseEventSeriesOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEventSeries/"+id+"?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleaseEventSeriesForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEventSeries_idFor_editGet api/releaseEventSeries/{id}/for-edit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseEventSeriesForEditForApiContract> ApiReleaseEventSeries_idFor_editGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEventSeries/"+id+"/for-edit";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleaseEventSeriesForEditForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagId_AndChildTagsAndArtistId_AndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangAndSortDirection api/releaseEvents
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseEventForApiContractPartialFindResult> ApiReleaseEventsGetByQueryAndNameMatchModeAndSeriesIdAndAfterDateAndBeforeDateAndCategoryAndUserCollectionIdAndTagId_AndChildTagsAndArtistId_AndChildVoicebanksAndIncludeMembersAndStatusAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangAndSortDirectionAsync(
					string query, 
					NameMatchMode nameMatchMode, 
					int seriesId, 
					System.DateTimeOffset afterDate, 
					System.DateTimeOffset beforeDate, 
					EntryForApiContractEventCategory category, 
					int userCollectionId, 
					int[] tagId_, 
					bool childTags, 
					int[] artistId_, 
					bool childVoicebanks, 
					bool includeMembers, 
					ArchivedObjectVersionForApiContractStatus status, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					EventSortRule sort, 
					ReleaseEventOptionalFields fields, 
					ContentLanguagePreference lang, 
					SortDirection sortDirection, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&seriesId="+seriesId+"&afterDate=" + afterDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&beforeDate=" + beforeDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&category=" + category+"&userCollectionId="+userCollectionId+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&childTags="+childTags+"&"+string.Join("&", artistId_.Select(z => $"artistId[]={z}"))+"&childVoicebanks="+childVoicebanks+"&includeMembers="+includeMembers+"&status=" + status+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&fields=" + fields+"&lang=" + lang+"&sortDirection=" + sortDirection;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleaseEventForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEventsNamesGetByQueryAndMaxResults api/releaseEvents/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiReleaseEventsNamesGetByQueryAndMaxResultsAsync(string query, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEvents_eventIdAlbumsGetByFieldsAndLang api/releaseEvents/{eventId}/albums
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForApiContract[]> ApiReleaseEvents_eventIdAlbumsGetByFieldsAndLangAsync(int eventId, AlbumOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+eventId+"/albums?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEvents_eventIdPublished_songsGetByFieldsAndLang api/releaseEvents/{eventId}/published-songs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongForApiContract[]> ApiReleaseEvents_eventIdPublished_songsGetByFieldsAndLangAsync(int eventId, SongOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+eventId+"/published-songs?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEvents_eventIdReportsPostByReportTypeAndNotesAndVersionNumber api/releaseEvents/{eventId}/reports
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiReleaseEvents_eventIdReportsPostByReportTypeAndNotesAndVersionNumberAsync(int eventId, EventReportType reportType, string notes, int versionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+eventId+"/reports?reportType=" + reportType+"&notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&versionNumber="+versionNumber;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEvents_idDeleteByNotesAndHardDelete api/releaseEvents/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiReleaseEvents_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiReleaseEvents_idGetByFieldsAndLang api/releaseEvents/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseEventForApiContract> ApiReleaseEvents_idGetByFieldsAndLangAsync(int id, ReleaseEventOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/releaseEvents/"+id+"?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleaseEventForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiResources_cultureCodeGetBySetNames_ api/resources/{cultureCode}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>> ApiResources_cultureCodeGetBySetNames_Async(string cultureCode, string[] setNames_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/resources/"+ (cultureCode==null? "" : System.Uri.EscapeDataString(cultureCode))+"&"+string.Join("&", setNames_.Select(z => $"setNames[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>>>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongListsPost api/songLists
		/// </summary>
		/// <returns>Success</returns>
		public async Task<int> ApiSongListsPostAsync(SongListForEditForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongListsComments_commentIdDelete api/songLists/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiSongListsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongListsComments_commentIdPost api/songLists/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiSongListsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongListsFeaturedGetByQueryAndTagId_AndChildTagsAndNameMatchModeAndFeaturedCategoryAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLang api/songLists/featured
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongListForApiContractPartialFindResult> ApiSongListsFeaturedGetByQueryAndTagId_AndChildTagsAndNameMatchModeAndFeaturedCategoryAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAndLangAsync(string query, int[] tagId_, bool childTags, NameMatchMode nameMatchMode, EntryForApiContractSongListFeaturedCategory featuredCategory, int start, int maxResults, bool getTotalCount, SongListSortRule sort, SongListOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/featured?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&childTags="+childTags+"&nameMatchMode=" + nameMatchMode+"&featuredCategory=" + featuredCategory+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongListForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongListsFeaturedNamesGetByQueryAndNameMatchModeAndFeaturedCategoryAndMaxResults api/songLists/featured/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiSongListsFeaturedNamesGetByQueryAndNameMatchModeAndFeaturedCategoryAndMaxResultsAsync(string query, NameMatchMode nameMatchMode, EntryForApiContractSongListFeaturedCategory featuredCategory, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/featured/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&featuredCategory=" + featuredCategory+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongLists_idDeleteByNotesAndHardDelete api/songLists/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiSongLists_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongLists_listIdCommentsGet api/songLists/{listId}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContractPartialFindResult> ApiSongLists_listIdCommentsGetAsync(int listId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+listId+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongLists_listIdCommentsPost api/songLists/{listId}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiSongLists_listIdCommentsPostAsync(int listId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+listId+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongLists_listIdSongsGetByQueryAndSongTypesAndPvServicesAndTagId_AndArtistId_AndChildVoicebanksAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/songLists/{listId}/songs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongInListForApiContractPartialFindResult> ApiSongLists_listIdSongsGetByQueryAndSongTypesAndPvServicesAndTagId_AndArtistId_AndChildVoicebanksAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(
					int listId, 
					string query, 
					string songTypes, 
					SongForApiContractPvServices pvServices, 
					int[] tagId_, 
					int[] artistId_, 
					bool childVoicebanks, 
					AdvancedSearchFilterParams[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					SongSortRule sort, 
					NameMatchMode nameMatchMode, 
					SongOptionalFields fields, 
					ContentLanguagePreference lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songLists/"+listId+"/songs?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&songTypes=" + (songTypes==null? "" : System.Uri.EscapeDataString(songTypes))+"&pvServices=" + pvServices+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&"+string.Join("&", artistId_.Select(z => $"artistId[]={z}"))+"&childVoicebanks="+childVoicebanks+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={z}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongInListForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsGetByQueryAndSongTypesAndAfterDateAndBeforeDateAndTagName_AndTagId_AndChildTagsAndUnifyTypesAndTagsAndArtistId_AndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndOnlyWithPvsAndPvServicesAndSinceAndMinScoreAndUserCollectionIdAndReleaseEventIdAndParentSongIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangAndMinMilliBpmAndMaxMilliBpmAndMinLengthAndMaxLength api/songs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongForApiContractPartialFindResult> ApiSongsGetByQueryAndSongTypesAndAfterDateAndBeforeDateAndTagName_AndTagId_AndChildTagsAndUnifyTypesAndTagsAndArtistId_AndArtistParticipationStatusAndChildVoicebanksAndIncludeMembersAndOnlyWithPvsAndPvServicesAndSinceAndMinScoreAndUserCollectionIdAndReleaseEventIdAndParentSongIdAndStatusAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndPreferAccurateMatchesAndNameMatchModeAndFieldsAndLangAndMinMilliBpmAndMaxMilliBpmAndMinLengthAndMaxLengthAsync(
					string query, 
					string songTypes, 
					System.DateTimeOffset afterDate, 
					System.DateTimeOffset beforeDate, 
					string[] tagName_, 
					int[] tagId_, 
					bool childTags, 
					bool unifyTypesAndTags, 
					int[] artistId_, 
					ArtistAlbumParticipationStatus artistParticipationStatus, 
					bool childVoicebanks, 
					bool includeMembers, 
					bool onlyWithPvs, 
					SongForApiContractPvServices pvServices, 
					int since, 
					int minScore, 
					int userCollectionId, 
					int releaseEventId, 
					int parentSongId, 
					ArchivedObjectVersionForApiContractStatus status, 
					AdvancedSearchFilterParams[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					SongSortRule sort, 
					bool preferAccurateMatches, 
					NameMatchMode nameMatchMode, 
					SongOptionalFields fields, 
					ContentLanguagePreference lang, 
					int minMilliBpm, 
					int maxMilliBpm, 
					int minLength, 
					int maxLength, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&songTypes=" + (songTypes==null? "" : System.Uri.EscapeDataString(songTypes))+"&afterDate=" + afterDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&beforeDate=" + beforeDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tagName_.Select(z => $"tagName[]={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&childTags="+childTags+"&unifyTypesAndTags="+unifyTypesAndTags+"&"+string.Join("&", artistId_.Select(z => $"artistId[]={z}"))+"&artistParticipationStatus=" + artistParticipationStatus+"&childVoicebanks="+childVoicebanks+"&includeMembers="+includeMembers+"&onlyWithPvs="+onlyWithPvs+"&pvServices=" + pvServices+"&since="+since+"&minScore="+minScore+"&userCollectionId="+userCollectionId+"&releaseEventId="+releaseEventId+"&parentSongId="+parentSongId+"&status=" + status+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={z}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang+"&minMilliBpm="+minMilliBpm+"&maxMilliBpm="+maxMilliBpm+"&minLength="+minLength+"&maxLength="+maxLength;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsByPvGetByPvServiceAndPvIdAndFieldsAndLang api/songs/byPv
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongForApiContract> ApiSongsByPvGetByPvServiceAndPvIdAndFieldsAndLangAsync(PVContractService pvService, string pvId, SongOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/byPv?pvService=" + pvService+"&pvId=" + (pvId==null? "" : System.Uri.EscapeDataString(pvId))+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsComments_commentIdDelete api/songs/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiSongsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsComments_commentIdPost api/songs/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiSongsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsHighlightedGetByLanguagePreferenceAndFields api/songs/highlighted
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongForApiContract[]> ApiSongsHighlightedGetByLanguagePreferenceAndFieldsAsync(ContentLanguagePreference languagePreference, SongOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/highlighted?languagePreference=" + languagePreference+"&fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsLyrics_lyricsIdGet api/songs/lyrics/{lyricsId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LyricsForSongContract> ApiSongsLyrics_lyricsIdGetAsync(int lyricsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/lyrics/"+lyricsId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LyricsForSongContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsNamesGetByQueryAndNameMatchModeAndMaxResults api/songs/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiSongsNamesGetByQueryAndNameMatchModeAndMaxResultsAsync(string query, NameMatchMode nameMatchMode, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreference api/songs/top-rated
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongForApiContract[]> ApiSongsTop_ratedGetByDurationHoursAndStartDateAndFilterByAndVocalistAndMaxResultsAndFieldsAndLanguagePreferenceAsync(int durationHours, System.DateTimeOffset startDate, TopSongsDateFilterType filterBy, SongVocalistSelection vocalist, int maxResults, SongOptionalFields fields, ContentLanguagePreference languagePreference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/top-rated?durationHours="+durationHours+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&filterBy=" + filterBy+"&vocalist=" + vocalist+"&maxResults="+maxResults+"&fields=" + fields+"&languagePreference=" + languagePreference;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idDeleteByNotes api/songs/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiSongs_idDeleteByNotesAsync(int id, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idGetByFieldsAndLang api/songs/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongForApiContract> ApiSongs_idGetByFieldsAndLangAsync(int id, SongOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idCommentsGet api/songs/{id}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract[]> ApiSongs_idCommentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idCommentsPost api/songs/{id}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiSongs_idCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idDerivedGetByFieldsAndLang api/songs/{id}/derived
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongForApiContract[]> ApiSongs_idDerivedGetByFieldsAndLangAsync(int id, SongOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/derived?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idRatingsGetByUserFieldsAndLang api/songs/{id}/ratings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RatedSongForUserForApiContract[]> ApiSongs_idRatingsGetByUserFieldsAndLangAsync(int id, UserOptionalFields userFields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/ratings?userFields=" + userFields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RatedSongForUserForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idRatingsPost api/songs/{id}/ratings
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiSongs_idRatingsPostAsync(int id, SongRatingContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/ratings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiSongs_idRelatedGetByFieldsAndLang api/songs/{id}/related
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RelatedSongsContract> ApiSongs_idRelatedGetByFieldsAndLangAsync(int id, SongOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/songs/"+id+"/related?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelatedSongsContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTarget api/tags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagForApiContractPartialFindResult> ApiTagsGetByQueryAndAllowChildrenAndCategoryNameAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndSortAndPreferAccurateMatchesAndFieldsAndLangAndTargetAsync(string query, bool allowChildren, string categoryName, int start, int maxResults, bool getTotalCount, NameMatchMode nameMatchMode, TagSortRule sort, bool preferAccurateMatches, TagOptionalFields fields, ContentLanguagePreference lang, TagTargetTypes target, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&allowChildren="+allowChildren+"&categoryName=" + (categoryName==null? "" : System.Uri.EscapeDataString(categoryName))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&nameMatchMode=" + nameMatchMode+"&sort=" + sort+"&preferAccurateMatches="+preferAccurateMatches+"&fields=" + fields+"&lang=" + lang+"&target=" + target;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsPostByName api/tags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagBaseContract> ApiTagsPostByNameAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags?name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagBaseContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsByName_nameGetByFieldsAndLang api/tags/byName/{name}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagForApiContract> ApiTagsByName_nameGetByFieldsAndLangAsync(string name, TagOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/byName/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsCategoryNamesGetByQueryAndNameMatchMode api/tags/categoryNames
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiTagsCategoryNamesGetByQueryAndNameMatchModeAsync(string query, NameMatchMode nameMatchMode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/categoryNames?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsComments_commentIdDelete api/tags/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiTagsComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsComments_commentIdPost api/tags/comments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiTagsComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/comments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsNamesGetByQueryAndAllowAliasesAndMaxResults api/tags/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiTagsNamesGetByQueryAndAllowAliasesAndMaxResultsAsync(string query, bool allowAliases, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&allowAliases="+allowAliases+"&maxResults="+maxResults;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTagsTopGetByCategoryNameAndEntryTypeAndMaxResultsAndLang api/tags/top
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagBaseContract[]> ApiTagsTopGetByCategoryNameAndEntryTypeAndMaxResultsAndLangAsync(string categoryName, EntryForApiContractEntryType entryType, int maxResults, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/top?categoryName=" + (categoryName==null? "" : System.Uri.EscapeDataString(categoryName))+"&entryType=" + entryType+"&maxResults="+maxResults+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagBaseContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTags_idDeleteByNotesAndHardDelete api/tags/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiTags_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTags_idGetByFieldsAndLang api/tags/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagForApiContract> ApiTags_idGetByFieldsAndLangAsync(int id, TagOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+id+"?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTags_tagIdChildrenGetByFieldsAndLang api/tags/{tagId}/children
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagForApiContract[]> ApiTags_tagIdChildrenGetByFieldsAndLangAsync(int tagId, TagOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/children?fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTags_tagIdCommentsGet api/tags/{tagId}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContractPartialFindResult> ApiTags_tagIdCommentsGetAsync(int tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTags_tagIdCommentsPost api/tags/{tagId}/comments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiTags_tagIdCommentsPostAsync(int tagId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/comments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiTags_tagIdReportsPostByReportTypeAndNotesAndVersionNumber api/tags/{tagId}/reports
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiTags_tagIdReportsPostByReportTypeAndNotesAndVersionNumberAsync(int tagId, EventReportType reportType, string notes, int versionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/tags/"+tagId+"/reports?reportType=" + reportType+"&notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&versionNumber="+versionNumber;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersGetByQueryAndGroupsAndJoinDateAfterAndJoinDateBeforeAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndIncludeDisabledAndOnlyVerifiedAndKnowsLanguageAndFields api/users
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserForApiContractPartialFindResult> ApiUsersGetByQueryAndGroupsAndJoinDateAfterAndJoinDateBeforeAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndIncludeDisabledAndOnlyVerifiedAndKnowsLanguageAndFieldsAsync(string query, UserForApiContractGroupId groups, System.DateTimeOffset joinDateAfter, System.DateTimeOffset joinDateBefore, NameMatchMode nameMatchMode, int start, int maxResults, bool getTotalCount, UserSortRule sort, bool includeDisabled, bool onlyVerified, string knowsLanguage, UserOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&groups=" + groups+"&joinDateAfter=" + joinDateAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&joinDateBefore=" + joinDateBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&nameMatchMode=" + nameMatchMode+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&includeDisabled="+includeDisabled+"&onlyVerified="+onlyVerified+"&knowsLanguage=" + (knowsLanguage==null? "" : System.Uri.EscapeDataString(knowsLanguage))+"&fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentGetByFields api/users/current
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserForApiContract> ApiUsersCurrentGetByFieldsAsync(UserOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current?fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentAlbum_collection_statuses_albumIdGet api/users/current/album-collection-statuses/{albumId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForUserForApiContract> ApiUsersCurrentAlbum_collection_statuses_albumIdGetAsync(int albumId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/album-collection-statuses/"+albumId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForUserForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentAlbums_albumIdPostByCollectionStatusAndMediaTypeAndRating api/users/current/albums/{albumId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> ApiUsersCurrentAlbums_albumIdPostByCollectionStatusAndMediaTypeAndRatingAsync(int albumId, AlbumForUserForApiContractPurchaseStatus collectionStatus, AlbumForUserForApiContractMediaType mediaType, int rating, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/albums/"+albumId+"?collectionStatus=" + collectionStatus+"&mediaType=" + mediaType+"&rating="+rating;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				return jsonReader.ReadAsString();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentFollowedArtists_artistIdGet api/users/current/followedArtists/{artistId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ArtistForUserForApiContract> ApiUsersCurrentFollowedArtists_artistIdGetAsync(int artistId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/followedArtists/"+artistId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtistForUserForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentFollowedTags_tagIdDelete api/users/current/followedTags/{tagId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiUsersCurrentFollowedTags_tagIdDeleteAsync(int tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/followedTags/"+tagId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentFollowedTags_tagIdPost api/users/current/followedTags/{tagId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiUsersCurrentFollowedTags_tagIdPostAsync(int tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/followedTags/"+tagId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentRatedSongs_songIdGet api/users/current/ratedSongs/{songId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongInAlbumForApiContractRating> ApiUsersCurrentRatedSongs_songIdGetAsync(int songId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/ratedSongs/"+songId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongInAlbumForApiContractRating>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentRefreshEntryEditPostByEntryTypeAndEntryId api/users/current/refreshEntryEdit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EntryEditDataContract> ApiUsersCurrentRefreshEntryEditPostByEntryTypeAndEntryIdAsync(EntryForApiContractEntryType entryType, int entryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/refreshEntryEdit?entryType=" + entryType+"&entryId="+entryId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EntryEditDataContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersCurrentSongTags_songIdPost api/users/current/songTags/{songId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiUsersCurrentSongTags_songIdPostAsync(int songId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/current/songTags/"+songId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersMessages_messageIdGet api/users/messages/{messageId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserMessageContract> ApiUsersMessages_messageIdGetAsync(int messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/messages/"+messageId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserMessageContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersNamesGetByQueryAndNameMatchModeAndMaxResultsAndIncludeDisabled api/users/names
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string[]> ApiUsersNamesGetByQueryAndNameMatchModeAndMaxResultsAndIncludeDisabledAsync(string query, NameMatchMode nameMatchMode, int maxResults, bool includeDisabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/names?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&nameMatchMode=" + nameMatchMode+"&maxResults="+maxResults+"&includeDisabled="+includeDisabled;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersProfileComments_commentIdDelete api/users/profileComments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiUsersProfileComments_commentIdDeleteAsync(int commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/profileComments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsersProfileComments_commentIdPost api/users/profileComments/{commentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiUsersProfileComments_commentIdPostAsync(int commentId, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/profileComments/"+commentId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idGetByFields api/users/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserForApiContract> ApiUsers_idGetByFieldsAsync(int id, UserOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"?fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idAlbum_collection_statuses_albumIdGet api/users/{id}/album-collection-statuses/{albumId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForUserForApiContract> ApiUsers_idAlbum_collection_statuses_albumIdGetAsync(int id, int albumId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/album-collection-statuses/"+albumId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForUserForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idAlbumsGetByQueryAndTagIdAndTagAndArtistIdAndPurchaseStatusesAndReleaseEventIdAndAlbumTypesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAndMediaType api/users/{id}/albums
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AlbumForUserForApiContractPartialFindResult> ApiUsers_idAlbumsGetByQueryAndTagIdAndTagAndArtistIdAndPurchaseStatusesAndReleaseEventIdAndAlbumTypesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAndMediaTypeAsync(
					int id, 
					string query, 
					int tagId, 
					string tag, 
					int artistId, 
					PurchaseStatuses purchaseStatuses, 
					int releaseEventId, 
					EntryForApiContractDiscType albumTypes, 
					AdvancedSearchFilterParams[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					AlbumSortRule sort, 
					NameMatchMode nameMatchMode, 
					AlbumOptionalFields fields, 
					ContentLanguagePreference lang, 
					AlbumForUserForApiContractMediaType mediaType, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/albums?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&tagId="+tagId+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag))+"&artistId="+artistId+"&purchaseStatuses=" + purchaseStatuses+"&releaseEventId="+releaseEventId+"&albumTypes=" + albumTypes+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={z}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang+"&mediaType=" + mediaType;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlbumForUserForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idEventsGetByRelationshipType api/users/{id}/events
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseEventForApiContract[]> ApiUsers_idEventsGetByRelationshipTypeAsync(int id, UserEventRelationshipType relationshipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/events?relationshipType=" + relationshipType;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleaseEventForApiContract[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idFollowedArtistsGetByQueryAndTagId_AndArtistTypeAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/users/{id}/followedArtists
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ArtistForUserForApiContractPartialFindResult> ApiUsers_idFollowedArtistsGetByQueryAndTagId_AndArtistTypeAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(int id, string query, int[] tagId_, EntryForApiContractArtistType artistType, int start, int maxResults, bool getTotalCount, ArtistSortRule sort, NameMatchMode nameMatchMode, ArtistOptionalFields fields, ContentLanguagePreference lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/followedArtists?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&artistType=" + artistType+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtistForUserForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idFollowedArtists_artistIdGet api/users/{id}/followedArtists/{artistId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ArtistForUserForApiContract> ApiUsers_idFollowedArtists_artistIdGetAsync(int id, int artistId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/followedArtists/"+artistId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArtistForUserForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idMessagesDeleteByMessageId api/users/{id}/messages
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiUsers_idMessagesDeleteByMessageIdAsync(int id, int[] messageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/messages?"+string.Join("&", messageId.Select(z => $"messageId={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idMessagesGetByInboxAndUnreadAndAnotherUserIdAndStartAndMaxResultsAndGetTotalCount api/users/{id}/messages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserMessageContractPartialFindResult> ApiUsers_idMessagesGetByInboxAndUnreadAndAnotherUserIdAndStartAndMaxResultsAndGetTotalCountAsync(int id, UserInboxType inbox, bool unread, int anotherUserId, int start, int maxResults, bool getTotalCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/messages?inbox=" + inbox+"&unread="+unread+"&anotherUserId="+anotherUserId+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserMessageContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idMessagesPost api/users/{id}/messages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserMessageContract> ApiUsers_idMessagesPostAsync(int id, UserMessageContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/messages";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserMessageContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idProfileCommentsGetByStartAndMaxResultsAndGetTotalCount api/users/{id}/profileComments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContractPartialFindResult> ApiUsers_idProfileCommentsGetByStartAndMaxResultsAndGetTotalCountAsync(int id, int start, int maxResults, bool getTotalCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/profileComments?start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idProfileCommentsPost api/users/{id}/profileComments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommentForApiContract> ApiUsers_idProfileCommentsPostAsync(int id, CommentForApiContract requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/profileComments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentForApiContract>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagId_AndArtistId_AndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLang api/users/{id}/ratedSongs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RatedSongForUserForApiContractPartialFindResult> ApiUsers_idRatedSongsGetByQueryAndTagNameAndTagId_AndArtistId_AndChildVoicebanksAndArtistGroupingAndRatingAndSongListIdAndGroupByRatingAndPvServicesAndAdvancedFiltersAndStartAndMaxResultsAndGetTotalCountAndSortAndNameMatchModeAndFieldsAndLangAsync(
					int id, 
					string query, 
					string tagName, 
					int[] tagId_, 
					int[] artistId_, 
					bool childVoicebanks, 
					LogicalGrouping artistGrouping, 
					SongInAlbumForApiContractRating rating, 
					int songListId, 
					bool groupByRating, 
					SongForApiContractPvServices pvServices, 
					AdvancedSearchFilterParams[] advancedFilters, 
					int start, 
					int maxResults, 
					bool getTotalCount, 
					RatedSongForUserSortRule sort, 
					NameMatchMode nameMatchMode, 
					SongOptionalFields fields, 
					ContentLanguagePreference lang, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/ratedSongs?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&tagName=" + (tagName==null? "" : System.Uri.EscapeDataString(tagName))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&"+string.Join("&", artistId_.Select(z => $"artistId[]={z}"))+"&childVoicebanks="+childVoicebanks+"&artistGrouping=" + artistGrouping+"&rating=" + rating+"&songListId="+songListId+"&groupByRating="+groupByRating+"&pvServices=" + pvServices+"&"+string.Join("&", advancedFilters.Select(z => $"advancedFilters={z}"))+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&nameMatchMode=" + nameMatchMode+"&fields=" + fields+"&lang=" + lang;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RatedSongForUserForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idRatedSongs_songIdGet api/users/{id}/ratedSongs/{songId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongInAlbumForApiContractRating> ApiUsers_idRatedSongs_songIdGetAsync(int id, int songId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/ratedSongs/"+songId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongInAlbumForApiContractRating>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idReportsPost api/users/{id}/reports
		/// </summary>
		/// <returns>Success</returns>
		public async Task<bool> ApiUsers_idReportsPostAsync(int id, CreateReportModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/reports";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idSettings_settingNamePost api/users/{id}/settings/{settingName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiUsers_idSettings_settingNamePostAsync(int id, string settingName, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/settings/"+ (settingName==null? "" : System.Uri.EscapeDataString(settingName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiUsers_idSongListsGetByQueryAndTagId_AndChildTagsAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndFields api/users/{id}/songLists
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SongListForApiContractPartialFindResult> ApiUsers_idSongListsGetByQueryAndTagId_AndChildTagsAndNameMatchModeAndStartAndMaxResultsAndGetTotalCountAndSortAndFieldsAsync(int id, string query, int[] tagId_, bool childTags, NameMatchMode nameMatchMode, int start, int maxResults, bool getTotalCount, SongListSortRule sort, SongListOptionalFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/users/"+id+"/songLists?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", tagId_.Select(z => $"tagId[]={z}"))+"&childTags="+childTags+"&nameMatchMode=" + nameMatchMode+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&sort=" + sort+"&fields=" + fields;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SongListForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiVenuesGetByQueryAndFieldsAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndLangAndSortRuleAndLatitudeAndLongitudeAndRadiusAndDistanceUnit api/venues
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VenueForApiContractPartialFindResult> ApiVenuesGetByQueryAndFieldsAndStartAndMaxResultsAndGetTotalCountAndNameMatchModeAndLangAndSortRuleAndLatitudeAndLongitudeAndRadiusAndDistanceUnitAsync(string query, VenueOptionalFields fields, int start, int maxResults, bool getTotalCount, NameMatchMode nameMatchMode, ContentLanguagePreference lang, VenueSortRule sortRule, double latitude, double longitude, double radius, DistanceUnit distanceUnit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/venues?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&fields=" + fields+"&start="+start+"&maxResults="+maxResults+"&getTotalCount="+getTotalCount+"&nameMatchMode=" + nameMatchMode+"&lang=" + lang+"&sortRule=" + sortRule+"&latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&distanceUnit=" + distanceUnit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VenueForApiContractPartialFindResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiVenues_idDeleteByNotesAndHardDelete api/venues/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiVenues_idDeleteByNotesAndHardDeleteAsync(int id, string notes, bool hardDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/venues/"+id+"?notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&hardDelete="+hardDelete;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiVenues_idReportsPostByReportTypeAndNotesAndVersionNumber api/venues/{id}/reports
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiVenues_idReportsPostByReportTypeAndNotesAndVersionNumberAsync(int id, EventReportType reportType, string notes, int versionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/venues/"+id+"/reports?reportType=" + reportType+"&notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes))+"&versionNumber="+versionNumber;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
