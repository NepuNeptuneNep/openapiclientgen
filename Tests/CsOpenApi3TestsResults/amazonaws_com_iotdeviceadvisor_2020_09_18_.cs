//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSuiteDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionId")]
		public string SuiteDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionArn")]
		public string SuiteDefinitionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionName")]
		public string SuiteDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	/// <summary>
	/// Information of a test device. A thing ARN, certificate ARN or device role ARN is required.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceUnderTest
	{
		
		[System.Runtime.Serialization.DataMember(Name="thingArn")]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceRoleArn")]
		public string DeviceRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Protocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttV3_1_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttV5 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttV3_1_1_OverWebSocket = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttV5_OverWebSocket = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSuiteDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSuiteDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionId")]
		public string SuiteDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionArn")]
		public string SuiteDefinitionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionVersion")]
		public string SuiteDefinitionVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestVersion")]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionConfiguration")]
		public SuiteDefinitionConfiguration SuiteDefinitionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedAt")]
		public System.DateTimeOffset LastModifiedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Gets the suite definition configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuiteDefinitionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionName")]
		public string SuiteDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public DeviceUnderTest[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intendedForQualification")]
		public System.Nullable<System.Boolean> IntendedForQualification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLongDurationTest")]
		public System.Nullable<System.Boolean> IsLongDurationTest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rootGroup")]
		public string RootGroup { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="devicePermissionRoleArn")]
		public string DevicePermissionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public Protocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSuiteRunResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionId")]
		public string SuiteDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionVersion")]
		public string SuiteDefinitionVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteRunId")]
		public string SuiteRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteRunArn")]
		public string SuiteRunArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteRunConfiguration")]
		public SuiteRunConfiguration SuiteRunConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testResult")]
		public TestResult TestResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorReason")]
		public string ErrorReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Gets suite run configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuiteRunConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primaryDevice")]
		public DeviceUnderTest PrimaryDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selectedTestList")]
		public string[] SelectedTestList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parallelRun")]
		public System.Nullable<System.Boolean> ParallelRun { get; set; }
	}
	
	/// <summary>
	/// Show each group result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public GroupResult[] Groups { get; set; }
	}
	
	/// <summary>
	/// Show Group Result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tests")]
		public TestCaseRun[] Tests { get; set; }
	}
	
	/// <summary>
	/// Provides the test case run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestCaseRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="testCaseRunId")]
		public string TestCaseRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testCaseDefinitionId")]
		public string TestCaseDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testCaseDefinitionName")]
		public string TestCaseDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logUrl")]
		public string LogUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failure")]
		public string Failure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testScenarios")]
		public TestCaseScenario[] TestScenarios { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS_WITH_WARNINGS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 8,
	}
	
	/// <summary>
	/// Provides test case scenario.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestCaseScenario
	{
		
		[System.Runtime.Serialization.DataMember(Name="testCaseScenarioId")]
		public string TestCaseScenarioId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testCaseScenarioType")]
		public TestCaseScenarioType TestCaseScenarioType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failure")]
		public string Failure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemMessage")]
		public string SystemMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestCaseScenarioType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSuiteRunReportResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="qualificationReportDownloadUrl")]
		public string QualificationReportDownloadUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSuiteDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionInformationList")]
		public SuiteDefinitionInformation[] SuiteDefinitionInformationList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the suite definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuiteDefinitionInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionId")]
		public string SuiteDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionName")]
		public string SuiteDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultDevices")]
		public DeviceUnderTest[] DefaultDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intendedForQualification")]
		public System.Nullable<System.Boolean> IntendedForQualification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLongDurationTest")]
		public System.Nullable<System.Boolean> IsLongDurationTest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public Protocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSuiteRunsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteRunsList")]
		public SuiteRunInformation[] SuiteRunsList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Information about the suite run.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SuiteRunInformation</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuiteRunInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionId")]
		public string SuiteDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionVersion")]
		public string SuiteDefinitionVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionName")]
		public string SuiteDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteRunId")]
		public string SuiteRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endAt")]
		public System.DateTimeOffset EndAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passed")]
		public System.Nullable<System.Int32> Passed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Int32> Failed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSuiteRunResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteRunId")]
		public string SuiteRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteRunArn")]
		public string SuiteRunArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSuiteRunResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSuiteDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionId")]
		public string SuiteDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionArn")]
		public string SuiteDefinitionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionName")]
		public string SuiteDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionVersion")]
		public string SuiteDefinitionVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthenticationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X509ClientCertificate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignatureVersion4 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSuiteDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionConfiguration")]
		public SuiteDefinitionConfiguration SuiteDefinitionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSuiteDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSuiteDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSuiteRunReportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSuiteRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SuiteRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS_WITH_WARNINGS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSuiteDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSuiteRunsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSuiteRunRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionVersion")]
		public string SuiteDefinitionVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suiteRunConfiguration")]
		public SuiteRunConfiguration SuiteRunConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSuiteRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TestCaseScenarioStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS_WITH_WARNINGS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSuiteDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionConfiguration")]
		public SuiteDefinitionConfiguration SuiteDefinitionConfiguration { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a Device Advisor test suite.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateSuiteDefinition</a> action.</p>
		/// CreateSuiteDefinition suiteDefinitions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSuiteDefinitionResponse> CreateSuiteDefinitionAsync(CreateSuiteDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSuiteDefinitionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists the Device Advisor test suites you have created.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSuiteDefinitions</a> action.</p>
		/// ListSuiteDefinitions suiteDefinitions
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at once.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">A token used to get the next set of results.
		/// Max length: 2000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSuiteDefinitionsResponse> ListSuiteDefinitionsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSuiteDefinitionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes a Device Advisor test suite.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteSuiteDefinition</a> action.</p>
		/// DeleteSuiteDefinition suiteDefinitions/{suiteDefinitionId}
		/// </summary>
		/// <param name="suiteDefinitionId">Suite definition ID of the test suite to be deleted.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSuiteDefinitionResponse> DeleteSuiteDefinitionAsync(string suiteDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions/"+ (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteSuiteDefinitionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets information about a Device Advisor test suite.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteDefinition</a> action.</p>
		/// GetSuiteDefinition suiteDefinitions/{suiteDefinitionId}
		/// </summary>
		/// <param name="suiteDefinitionId">Suite definition ID of the test suite to get.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <param name="suiteDefinitionVersion">Suite definition version of the test suite to get.
		/// Min length: 2
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSuiteDefinitionResponse> GetSuiteDefinitionAsync(string suiteDefinitionId, string suiteDefinitionVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions/"+ (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId))+"&suiteDefinitionVersion=" + (suiteDefinitionVersion==null? "" : System.Uri.EscapeDataString(suiteDefinitionVersion));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSuiteDefinitionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates a Device Advisor test suite.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateSuiteDefinition</a> action.</p>
		/// UpdateSuiteDefinition suiteDefinitions/{suiteDefinitionId}
		/// </summary>
		/// <param name="suiteDefinitionId">Suite definition ID of the test suite to be updated.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSuiteDefinitionResponse> UpdateSuiteDefinitionAsync(string suiteDefinitionId, UpdateSuiteDefinitionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions/"+ (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSuiteDefinitionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about an Device Advisor endpoint.
		/// GetEndpoint endpoint
		/// </summary>
		/// <param name="thingArn">The thing ARN of the device. This is an optional parameter.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="certificateArn">The certificate ARN of the device. This is an optional parameter.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="deviceRoleArn">The device role ARN of the device. This is an optional parameter.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="authenticationMethod">The authentication method used during the device connection.</param>
		/// <returns>Success</returns>
		public async Task<GetEndpointResponse> GetEndpointAsync(string thingArn, string certificateArn, string deviceRoleArn, AuthenticationMethod authenticationMethod, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "endpoint?thingArn=" + (thingArn==null? "" : System.Uri.EscapeDataString(thingArn))+"&certificateArn=" + (certificateArn==null? "" : System.Uri.EscapeDataString(certificateArn))+"&deviceRoleArn=" + (deviceRoleArn==null? "" : System.Uri.EscapeDataString(deviceRoleArn))+"&authenticationMethod=" + authenticationMethod;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetEndpointResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets information about a Device Advisor test suite run.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteRun</a> action.</p>
		/// GetSuiteRun suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}
		/// </summary>
		/// <param name="suiteDefinitionId">Suite definition ID for the test suite run.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <param name="suiteRunId">Suite run ID for the test suite run.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSuiteRunResponse> GetSuiteRunAsync(string suiteDefinitionId, string suiteRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions/"+ (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId))+"/suiteRuns/"+ (suiteRunId==null? "" : System.Uri.EscapeDataString(suiteRunId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSuiteRunResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets a report download link for a successful Device Advisor qualifying test suite run.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteRunReport</a> action.</p>
		/// GetSuiteRunReport suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/report
		/// </summary>
		/// <param name="suiteDefinitionId">Suite definition ID of the test suite.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <param name="suiteRunId">Suite run ID of the test suite run.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSuiteRunReportResponse> GetSuiteRunReportAsync(string suiteDefinitionId, string suiteRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions/"+ (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId))+"/suiteRuns/"+ (suiteRunId==null? "" : System.Uri.EscapeDataString(suiteRunId))+"/report";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSuiteRunReportResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists runs of the specified Device Advisor test suite. You can list all runs of the test suite, or the runs of a specific version of the test suite.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSuiteRuns</a> action.</p>
		/// ListSuiteRuns suiteRuns
		/// </summary>
		/// <param name="suiteDefinitionId">Lists the test suite runs of the specified test suite based on suite definition ID.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <param name="suiteDefinitionVersion">Must be passed along with <code>suiteDefinitionId</code>. Lists the test suite runs of the specified test suite based on suite definition version.
		/// Min length: 2
		/// Max length: 255
		// </param>
		/// <param name="maxResults">The maximum number of results to return at once.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">A token to retrieve the next set of results.
		/// Max length: 2000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSuiteRunsResponse> ListSuiteRunsAsync(string suiteDefinitionId, string suiteDefinitionVersion, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteRuns?suiteDefinitionId=" + (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId))+"&suiteDefinitionVersion=" + (suiteDefinitionVersion==null? "" : System.Uri.EscapeDataString(suiteDefinitionVersion))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSuiteRunsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists the tags attached to an IoT Device Advisor resource.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTagsForResource</a> action.</p>
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The resource ARN of the IoT Device Advisor resource. This can be SuiteDefinition ARN or SuiteRun ARN.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Adds to and modifies existing tags of an IoT Device Advisor resource.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">TagResource</a> action.</p>
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The resource ARN of an IoT Device Advisor resource. This can be SuiteDefinition ARN or SuiteRun ARN.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Starts a Device Advisor test suite run.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StartSuiteRun</a> action.</p>
		/// StartSuiteRun suiteDefinitions/{suiteDefinitionId}/suiteRuns
		/// </summary>
		/// <param name="suiteDefinitionId">Suite definition ID of the test suite.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartSuiteRunResponse> StartSuiteRunAsync(string suiteDefinitionId, StartSuiteRunPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions/"+ (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId))+"/suiteRuns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartSuiteRunResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Stops a Device Advisor test suite run that is currently running.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StopSuiteRun</a> action.</p>
		/// StopSuiteRun suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/stop
		/// </summary>
		/// <param name="suiteDefinitionId">Suite definition ID of the test suite run to be stopped.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <param name="suiteRunId">Suite run ID of the test suite run to be stopped.
		/// Min length: 12
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StopSuiteRunResponse> StopSuiteRunAsync(string suiteDefinitionId, string suiteRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suiteDefinitions/"+ (suiteDefinitionId==null? "" : System.Uri.EscapeDataString(suiteDefinitionId))+"/suiteRuns/"+ (suiteRunId==null? "" : System.Uri.EscapeDataString(suiteRunId))+"/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopSuiteRunResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Removes tags from an IoT Device Advisor resource.</p> <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UntagResource</a> action.</p>
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The resource ARN of an IoT Device Advisor resource. This can be SuiteDefinition ARN or SuiteRun ARN.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">List of tag keys to remove from the IoT Device Advisor resource.
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CreateSuiteDefinitionPostBody
	{
		
		/// <summary>
		/// Gets the suite definition configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionConfiguration")]
		public CreateSuiteDefinitionPostBodySuiteDefinitionConfiguration SuiteDefinitionConfiguration { get; set; }
		
		/// <summary>
		/// The tags to be attached to the suite definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateSuiteDefinitionPostBodySuiteDefinitionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionName")]
		public string SuiteDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public DeviceUnderTest[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intendedForQualification")]
		public System.Nullable<System.Boolean> IntendedForQualification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLongDurationTest")]
		public System.Nullable<System.Boolean> IsLongDurationTest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootGroup")]
		public string RootGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devicePermissionRoleArn")]
		public string DevicePermissionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public Protocol Protocol { get; set; }
	}
	
	public class UpdateSuiteDefinitionPatchBody
	{
		
		/// <summary>
		/// Gets the suite definition configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionConfiguration")]
		public UpdateSuiteDefinitionPatchBodySuiteDefinitionConfiguration SuiteDefinitionConfiguration { get; set; }
	}
	
	public class UpdateSuiteDefinitionPatchBodySuiteDefinitionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionName")]
		public string SuiteDefinitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public DeviceUnderTest[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intendedForQualification")]
		public System.Nullable<System.Boolean> IntendedForQualification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLongDurationTest")]
		public System.Nullable<System.Boolean> IsLongDurationTest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootGroup")]
		public string RootGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devicePermissionRoleArn")]
		public string DevicePermissionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public Protocol Protocol { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to be attached to the IoT Device Advisor resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartSuiteRunPostBody
	{
		
		/// <summary>
		/// Suite definition version of the test suite.
		/// Min length: 2
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiteDefinitionVersion")]
		[System.ComponentModel.DataAnnotations.Length(2, 255)]
		public string SuiteDefinitionVersion { get; set; }
		
		/// <summary>
		/// Gets suite run configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suiteRunConfiguration")]
		public StartSuiteRunPostBodySuiteRunConfiguration SuiteRunConfiguration { get; set; }
		
		/// <summary>
		/// The tags to be attached to the suite run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartSuiteRunPostBodySuiteRunConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="primaryDevice")]
		public DeviceUnderTest PrimaryDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selectedTestList")]
		public string[] SelectedTestList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parallelRun")]
		public System.Nullable<System.Boolean> ParallelRun { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
