//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Description of an address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// Street name and number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_1")]
		public string Address_1 { get; set; }
		
		/// <summary>
		/// Second line of address if applicable (such as a building number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_2")]
		public string Address_2 { get; set; }
		
		/// <summary>
		/// Third line of address if applicable (such as a unit or suite number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_3")]
		public string Address_3 { get; set; }
		
		/// <summary>
		/// City name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// State code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Postal (ZIP) code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	/// <summary>
	/// Collection of addresses associated with a facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Addresses
	{
		
		/// <summary>
		/// Description of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailing")]
		public Address Mailing { get; set; }
		
		/// <summary>
		/// Description of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physical")]
		public Address Physical { get; set; }
	}
	
	/// <summary>
	/// API invocation or processing error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorMessage[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Phone number information for scheduling an appointment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppointmentPhoneNumber
	{
		
		/// <summary>
		/// Appointment phone number extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		/// <summary>
		/// Appointment phone number label (e.g. 'Main phone', 'Appointment phone', etc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Appointment phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Appointment contact number type (e.g. 'tel', 'fax', etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Detailed information of a facility service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetailedService
	{
		
		/// <summary>
		/// Additional appointment information. May contain html / string formatting characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appointment_leadin")]
		public string Appointment_leadin { get; set; }
		
		/// <summary>
		/// List of phone numbers related to scheduling appointments for this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appointment_phones")]
		public AppointmentPhoneNumber[] Appointment_phones { get; set; }
		
		/// <summary>
		/// Deprecated until further notice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description_facility")]
		public string Description_facility { get; set; }
		
		/// <summary>
		/// Service name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// String detailing online scheduling availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="online_scheduling_available")]
		public string Online_scheduling_available { get; set; }
		
		/// <summary>
		/// URL to a page with additional details for this service within the associated facility's health care system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// String detailing if referrals are required for the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referral_required")]
		public string Referral_required { get; set; }
		
		/// <summary>
		/// Service id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		/// <summary>
		/// List of service locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_locations")]
		public DetailedServiceLocation[] Service_locations { get; set; }
		
		/// <summary>
		/// String detailing if walk-ins are accepted for the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walk_ins_accepted")]
		public string Walk_ins_accepted { get; set; }
	}
	
	/// <summary>
	/// Details for a location offering a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetailedServiceLocation
	{
		
		/// <summary>
		/// Additional information related to service location hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_hours_info")]
		public string Additional_hours_info { get; set; }
		
		/// <summary>
		/// List of appointment phone information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appointment_phones")]
		public AppointmentPhoneNumber[] Appointment_phones { get; set; }
		
		/// <summary>
		/// List of email contact information regarding facility services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_contacts")]
		public DetailedServiceEmailContact[] Email_contacts { get; set; }
		
		/// <summary>
		/// Standard hours of operation. Currently formatted as descriptive text suitable for display, with no guarantee of a standard parseable format. Hours of operation may vary due to holidays or other events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facility_service_hours")]
		public DetailedServiceHours Facility_service_hours { get; set; }
		
		/// <summary>
		/// Service location address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_location_address")]
		public DetailedServiceAddress Service_location_address { get; set; }
	}
	
	/// <summary>
	/// Email contact information for facility service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetailedServiceEmailContact
	{
		
		/// <summary>
		/// Email address for facility service contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// Email address label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_label")]
		public string Email_label { get; set; }
	}
	
	/// <summary>
	/// Standard hours of operation. Currently formatted as descriptive text suitable for display, with no guarantee of a standard parseable format. Hours of operation may vary due to holidays or other events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetailedServiceHours
	{
		
		/// <summary>
		/// Service availability on Fridays.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Friday { get; set; }
		
		/// <summary>
		/// Service availability on Mondays.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Monday { get; set; }
		
		/// <summary>
		/// Service availability on Saturdays.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Saturday { get; set; }
		
		/// <summary>
		/// Service availability on Sundays.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sunday { get; set; }
		
		/// <summary>
		/// Service availability on Thursdays.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Thursday { get; set; }
		
		/// <summary>
		/// Service availability on Tuesdays.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tuesday { get; set; }
		
		/// <summary>
		/// Service availability on Wednesdays.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Wednesday { get; set; }
	}
	
	/// <summary>
	/// Service location address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetailedServiceAddress
	{
		
		/// <summary>
		/// Street name and number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		/// <summary>
		/// Building number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		/// <summary>
		/// Building name and/or number of service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="building_name_number")]
		public string Building_name_number { get; set; }
		
		/// <summary>
		/// City name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Clinic name for service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clinic_name")]
		public string Clinic_name { get; set; }
		
		/// <summary>
		/// Country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// State code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Wing, floor, or room number of service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wing_floor_or_room_number")]
		public string Wing_floor_or_room_number { get; set; }
		
		/// <summary>
		/// Postal (ZIP) code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip_code")]
		public string Zip_code { get; set; }
	}
	
	/// <summary>
	/// Distance to facility in miles using decimal format. Used when querying for facilities proximal to a location. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Distance
	{
		
		/// <summary>
		/// Distance to facility in decimal format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public double Distance1 { get; set; }
		
		/// <summary>
		/// Identifier of facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// JSON API response for a query for facility ids.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacilitiesIdsResponse
	{
		
		/// <summary>
		/// List of VA facility ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	/// <summary>
	/// Metadata representation for data in response. This metadata includes paginated items that allow user to see the current page, objects perPage, total pages and total entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacilitiesMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="distances")]
		public Distance[] Distances { get; set; }
		
		/// <summary>
		/// Pagination data reflecting response that has been seperated into discrete pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	/// <summary>
	/// Pagination data reflecting response that has been seperated into discrete pages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pagination
	{
		
		/// <summary>
		/// Current page of response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="current_page")]
		public int Current_page { get; set; }
		
		/// <summary>
		/// Number of results per page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public int Per_page { get; set; }
		
		/// <summary>
		/// Total number of entries matching this query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_entries")]
		public int Total_entries { get; set; }
		
		/// <summary>
		/// Total number of pages matching this query.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_pages")]
		public int Total_pages { get; set; }
	}
	
	/// <summary>
	/// JSON API-compliant response object describing one or more VA facilities
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacilitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Facility[] Data { get; set; }
		
		/// <summary>
		/// Links for first page, next page, previous and last page of response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PageLinks Links { get; set; }
		
		/// <summary>
		/// Metadata representation for data in response. This metadata includes paginated items that allow user to see the current page, objects perPage, total pages and total entries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public FacilitiesMetadata Meta { get; set; }
	}
	
	/// <summary>
	/// JSON API representation of a Facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Facility
	{
		
		/// <summary>
		/// Details describing a facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public FacilityAttributes Attributes { get; set; }
		
		/// <summary>
		/// Identifier representing facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// One of 4 facility top-level type categories (e.g. health, benefits, cemetery and vet center).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FacilityType Type { get; set; }
	}
	
	/// <summary>
	/// Details describing a facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacilityAttributes
	{
		
		/// <summary>
		/// This field is deprecated and replaced with "operating_status".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active_status")]
		public System.Nullable<FacilityAttributesActive_status> Active_status { get; set; }
		
		/// <summary>
		/// Collection of addresses associated with a facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Addresses Address { get; set; }
		
		/// <summary>
		/// Subtype of facility which can further be used to describe facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public string Classification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailed_services")]
		public DetailedService[] Detailed_services { get; set; }
		
		/// <summary>
		/// One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="facility_type")]
		public FacilityAttributesFacility_type Facility_type { get; set; }
		
		/// <summary>
		/// Standard hours of operation. Currently formatted as descriptive text suitable for display, with no guarantee of a standard parseable format. Hours of operation may vary due to holidays or other events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public Hours Hours { get; set; }
		
		/// <summary>
		/// Facility latitude.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public float Lat { get; set; }
		
		/// <summary>
		/// Facility longitude.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="long")]
		public float Long { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public System.Nullable<System.Boolean> Mobile { get; set; }
		
		/// <summary>
		/// Name associated with given facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Current status of facility operations. The overall status of the facility, which can be: Normal Hours and Services, Facility Notice, Limited Hours and/or Services, or Closed. This field replaces active_status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operating_status")]
		public OperatingStatus Operating_status { get; set; }
		
		/// <summary>
		/// Additional information about a VA health or Vet Center facility's operating hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operational_hours_special_instructions")]
		public string Operational_hours_special_instructions { get; set; }
		
		/// <summary>
		/// Collection of all telephone contact numbers for given facility. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public Phone Phone { get; set; }
		
		/// <summary>
		/// Scores that indicate patient satisfaction at given facility per service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfaction")]
		public Satisfaction Satisfaction { get; set; }
		
		/// <summary>
		/// All services offered by a VA health or benefits facility grouped by service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Services Services { get; set; }
		
		/// <summary>
		/// Facility time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visn")]
		public string Visn { get; set; }
		
		/// <summary>
		/// Collection of wait times reported for various services based on access to care survey.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_times")]
		public WaitTimes Wait_times { get; set; }
		
		/// <summary>
		/// Web address of facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FacilityAttributesActive_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FacilityAttributesFacility_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		va_benefits_facility = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		va_cemetery = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		va_health_facility = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vet_center = 3,
	}
	
	/// <summary>
	/// Standard hours of operation. Currently formatted as descriptive text suitable for display, with no guarantee of a standard parseable format. Hours of operation may vary due to holidays or other events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hours
	{
		
		/// <summary>
		/// Hours of operation for Friday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friday")]
		public string Friday { get; set; }
		
		/// <summary>
		/// Hours of operation for Monday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monday")]
		public string Monday { get; set; }
		
		/// <summary>
		/// Hours of operation for Saturday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saturday")]
		public string Saturday { get; set; }
		
		/// <summary>
		/// Hours of operation for Sunday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sunday")]
		public string Sunday { get; set; }
		
		/// <summary>
		/// Hours of operation for Thursday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thursday")]
		public string Thursday { get; set; }
		
		/// <summary>
		/// Hours of operation for Tuesday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tuesday")]
		public string Tuesday { get; set; }
		
		/// <summary>
		/// Hours of operation for Wednesday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wednesday")]
		public string Wednesday { get; set; }
	}
	
	/// <summary>
	/// Current status of facility operations. The overall status of the facility, which can be: Normal Hours and Services, Facility Notice, Limited Hours and/or Services, or Closed. This field replaces active_status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingStatus
	{
		
		/// <summary>
		/// Details of facility notices for visitors, such as messages about parking lot closures or floor visitation information.
		/// Min length: 0
		/// Max length: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_info")]
		[System.ComponentModel.DataAnnotations.Length(0, 300)]
		public string Additional_info { get; set; }
		
		/// <summary>
		/// Status codes indicate normal hours/services, limited hours/services, closed operations, or published facility notices for visitors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<OperatingStatusCode> Code { get; set; }
		
		/// <summary>
		/// List of supplemental statuses for VA facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplemental_status")]
		public SupplementalStatus[] Supplemental_status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperatingStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIMITED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 3,
	}
	
	/// <summary>
	/// Supplemental status for VA facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SupplementalStatus
	{
		
		/// <summary>
		/// Unique id for supplemental status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Descriptive label for supplemental status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Collection of all telephone contact numbers for given facility. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Phone
	{
		
		/// <summary>
		/// Phone number that may be reached outside of operating hours for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after_hours")]
		public string After_hours { get; set; }
		
		/// <summary>
		/// Phone number for enrollment coordinator for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollment_coordinator")]
		public string Enrollment_coordinator { get; set; }
		
		/// <summary>
		/// Phone number used for faxing to given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		/// <summary>
		/// Phone number for VA Health Connect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health_connect")]
		public string Health_connect { get; set; }
		
		/// <summary>
		/// Phone number for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="main")]
		public string Main { get; set; }
		
		/// <summary>
		/// Phone number for mental health clinic for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mental_health_clinic")]
		public string Mental_health_clinic { get; set; }
		
		/// <summary>
		/// Phone number for patient advocate for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patient_advocate")]
		public string Patient_advocate { get; set; }
		
		/// <summary>
		/// Phone number for pharmacy for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pharmacy")]
		public string Pharmacy { get; set; }
	}
	
	/// <summary>
	/// Scores that indicate patient satisfaction at given facility per service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Satisfaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="effective_date")]
		public System.Nullable<System.DateOnly> Effective_date { get; set; }
		
		/// <summary>
		/// Veteran-reported satisfaction score for health care services at VA health facilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health")]
		public PatientSatisfaction Health { get; set; }
	}
	
	/// <summary>
	/// Veteran-reported satisfaction score for health care services at VA health facilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientSatisfaction
	{
		
		/// <summary>
		/// Percentage of Veterans who say they usually or always get an appointment when they need routine attention at a primary care location. NOTE: Veterans are rating their satisfaction of getting an appointment for a routine primary care visit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary_care_routine")]
		public System.Nullable<System.Single> Primary_care_routine { get; set; }
		
		/// <summary>
		/// Percentage of Veterans who say they usually or always get an appointment when they need urgent attention at a primary care location. NOTE: Veterans are rating their satisfaction of getting an appointment for an urgent primary care visit, NOT an urgent care visit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary_care_urgent")]
		public System.Nullable<System.Single> Primary_care_urgent { get; set; }
		
		/// <summary>
		/// Percentage of Veterans who say they usually or always get an appointment when they need routine attention at a specialty care location. NOTE: Veterans are rating their satisfaction of getting an appointment for a routine specialty care visit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialty_care_routine")]
		public System.Nullable<System.Single> Specialty_care_routine { get; set; }
		
		/// <summary>
		/// Percentage of Veterans who say they usually or always get an appointment when they need urgent attention at a specialty care location. NOTE: Veterans are rating their satisfaction of getting an appointment for an urgent specialty care visit, NOT an urgent care visit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialty_care_urgent")]
		public System.Nullable<System.Single> Specialty_care_urgent { get; set; }
	}
	
	/// <summary>
	/// All services offered by a VA health or benefits facility grouped by service type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Services
	{
		
		/// <summary>
		/// List of benefits services for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="benefits")]
		public string[] Benefits { get; set; }
		
		/// <summary>
		/// List of health services for given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health")]
		public string[] Health { get; set; }
		
		/// <summary>
		/// Date of the most recent change in offered services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_updated")]
		public System.Nullable<System.DateOnly> Last_updated { get; set; }
		
		/// <summary>
		/// List of other services not included in one of the other service categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public string[] Other { get; set; }
	}
	
	/// <summary>
	/// Collection of wait times reported for various services based on access to care survey.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaitTimes
	{
		
		/// <summary>
		/// The effective date of when the access to care survey was carried out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effective_date")]
		public System.Nullable<System.DateOnly> Effective_date { get; set; }
		
		/// <summary>
		/// List of expected patient wait times for given health service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health")]
		public PatientWaitTime[] Health { get; set; }
	}
	
	/// <summary>
	/// Expected wait times for new and established patients for a given health care service at VA health facilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientWaitTime
	{
		
		/// <summary>
		/// Average number of days a patient who has already been to this location has to wait for a non-urgent appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="established")]
		public System.Nullable<System.Double> Established { get; set; }
		
		/// <summary>
		/// Average number of days a Veteran who hasn't been to this location has to wait for a non-urgent appointment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="new")]
		public System.Nullable<System.Double> New { get; set; }
		
		/// <summary>
		/// Service being offered by facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service")]
		public PatientWaitTimeService Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PatientWaitTimeService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Audiology = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cardiology = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CaregiverSupport = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Covid19Vaccine = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DentalServices = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dermatology = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EmergencyCare = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gastroenterology = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gynecology = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MentalHealthCare = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ophthalmology = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optometry = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Orthopedics = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nutrition = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Podiatry = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrimaryCare = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SpecialtyCare = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UrgentCare = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Urology = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WomensHealth = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FacilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		va_facilities = 0,
	}
	
	/// <summary>
	/// Links for first page, next page, previous and last page of response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageLinks
	{
		
		/// <summary>
		/// Link to first page of response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		/// <summary>
		/// Link to last page of response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		/// <summary>
		/// Link to next page of response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Link to previous page of response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// Link to related pages of response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
		
		/// <summary>
		/// Link to current page of response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Response that contains facility data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FacilityReadResponse
	{
		
		/// <summary>
		/// JSON API representation of a Facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Facility Data { get; set; }
	}
	
	/// <summary>
	/// A general error json response for things like Authorization Errors or Bad Requests (ex. invalid parameter values).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenericError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// GeoJSON API-compliant response object describing one or more VA facilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoFacilitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public GeoFacility[] Features { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GeoFacilitiesResponseType Type { get; set; }
	}
	
	/// <summary>
	/// GeoJSON-complaint Feature object describing a VA Facility
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoFacility
	{
		
		/// <summary>
		/// Geometric data giving the physical location of a VA Facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="geometry")]
		public Geometry Geometry { get; set; }
		
		/// <summary>
		/// Details describing a facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Properties Properties { get; set; }
		
		/// <summary>
		/// Top level category describing the type of facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GeoFacilityType Type { get; set; }
	}
	
	/// <summary>
	/// Geometric data giving the physical location of a VA Facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Geometry
	{
		
		/// <summary>
		/// The latitude and longitude of the Facility's physical location.
		/// Minimum items: 2
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		[System.ComponentModel.DataAnnotations.Length(2, 2)]
		public double[] Coordinates { get; set; }
		
		/// <summary>
		/// Describes the type of geometric data provided.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GeometryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GeometryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Point = 0,
	}
	
	/// <summary>
	/// Details describing a facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Properties
	{
		
		/// <summary>
		/// This field is deprecated and replaced with "operating_status".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active_status")]
		public FacilityAttributesActive_status Active_status { get; set; }
		
		/// <summary>
		/// Collection of addresses associated with a facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Addresses Address { get; set; }
		
		/// <summary>
		/// Subtype of facility which can further be used to describe facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public string Classification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailed_services")]
		public DetailedService[] Detailed_services { get; set; }
		
		/// <summary>
		/// One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="facility_type")]
		public FacilityAttributesFacility_type Facility_type { get; set; }
		
		/// <summary>
		/// Standard hours of operation. Currently formatted as descriptive text suitable for display, with no guarantee of a standard parseable format. Hours of operation may vary due to holidays or other events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public Hours Hours { get; set; }
		
		/// <summary>
		/// Identifier representing the Facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public System.Nullable<System.Boolean> Mobile { get; set; }
		
		/// <summary>
		/// Name associated with given facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Current status of facility operations. The overall status of the facility, which can be: Normal Hours and Services, Facility Notice, Limited Hours and/or Services, or Closed. This field replaces active_status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operating_status")]
		public OperatingStatus Operating_status { get; set; }
		
		/// <summary>
		/// Additional information about facility operating hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operational_hours_special_instructions")]
		public string Operational_hours_special_instructions { get; set; }
		
		/// <summary>
		/// Collection of all telephone contact numbers for given facility. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public Phone Phone { get; set; }
		
		/// <summary>
		/// Scores that indicate patient satisfaction at given facility per service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfaction")]
		public Satisfaction Satisfaction { get; set; }
		
		/// <summary>
		/// All services offered by a VA health or benefits facility grouped by service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Services Services { get; set; }
		
		/// <summary>
		/// Facility time zone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visn")]
		public string Visn { get; set; }
		
		/// <summary>
		/// Collection of wait times reported for various services based on access to care survey.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait_times")]
		public WaitTimes Wait_times { get; set; }
		
		/// <summary>
		/// Web address of facility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GeoFacilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Feature = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GeoFacilitiesResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FeatureCollection = 0,
	}
	
	/// <summary>
	/// Response that contains GeoFacility data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoFacilityReadResponse
	{
		
		/// <summary>
		/// Geometric data giving the physical location of a VA Facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="geometry")]
		public Geometry Geometry { get; set; }
		
		/// <summary>
		/// Details describing a facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Properties Properties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GeoFacilityType Type { get; set; }
	}
	
	/// <summary>
	/// JSON API-compliant object containing metadata about this response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Meta
	{
		
		/// <summary>
		/// Version of the drive time band data set used to generate this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="band_version")]
		public string Band_version { get; set; }
	}
	
	/// <summary>
	/// JSON API-compliant object describing a nearby VA facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Nearby
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public NearbyAttributes Attributes { get; set; }
		
		/// <summary>
		/// Identifier for facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NearbyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NearbyAttributes
	{
		
		/// <summary>
		/// Maximum time to reach facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max_time")]
		public int Max_time { get; set; }
		
		/// <summary>
		/// Minimum time to reach facility.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="min_time")]
		public int Min_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NearbyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nearby_facility = 0,
	}
	
	/// <summary>
	/// Response which contains minimum and maximum time it takes to reach facility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NearbyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Nearby[] Data { get; set; }
		
		/// <summary>
		/// JSON API-compliant object containing metadata about this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Query facilities by location or IDs, with optional filters
		/// Query facilities by bounding box, latitude and longitude, state, visn, or zip code. Bounding box is specified as four `bbox[]` parameters, long1, lat1, long2, lat2. (Relative order is unimportant.)
		/// 
		/// A query by latitude and longitude returns all facilities in the system, sorted by distance from that location. Providing an optional radius in miles to this query will narrow the scope of the returned facilities to those falling within the specified radius from that location.
		/// 
		/// All location queries support filtering by facility type, available services, and mobile status.
		/// 
		/// One can also retrieve facilities by ID using a comma-separated list like `?ids=id1,id2`. When requesting multiple facilities by ID, the API will return as many results as it can find matches for, omitting IDs where there is no match. It will not return an HTTP error code if it is unable to match a requested ID. Clients may supply IDs up to the limit their HTTP client enforces for URI path lengths. (Usually 2048 characters.)
		/// 
		/// Results are paginated. JSON responses include pagination information in the standard JSON API "links" and "meta" elements.
		/// 
		/// ### Parameter combinations
		/// You may optionally specify `page` and `per_page` with any query. You must specify one of the following parameter combinations:
		/// 
		/// - `bbox[]`, with the option of any combination of `type`, `services[]`, or `mobile`
		/// 
		/// - `ids`
		/// 
		/// - `lat` and `long`, with the option of any combination of `radius`, `ids`, `type`, `services[]`, or `mobile`
		/// 
		/// - `state`, with the option of any combination of `type`, `services[]`, or `mobile`
		/// 
		/// - `visn`
		/// 
		/// - `zip`, with the option of any combination of `type`, `services[]`, or `mobile`
		/// 
		/// Invalid combinations will return `400 Bad Request`.
		/// GetFacilitiesByLocation facilities
		/// </summary>
		/// <param name="ids">List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location.</param>
		/// <param name="zip">Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return.</param>
		/// <param name="state">State in which to search for facilities. Except in rare cases, this is two characters.</param>
		/// <param name="lat">Latitude of point to search for facilities, in WGS84 coordinate reference system.</param>
		/// <param name="_long">Longitude of point to search for facilities, in WGS84 coordinate reference system.</param>
		/// <param name="radius">Optional radial distance from specified latitude and longitude to filter facilities search in WGS84 coordinate reference system.</param>
		/// <param name="bbox_">Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system)
		/// Minimum items: 4
		/// Maximum items: 4
		// </param>
		/// <param name="visn">VISN search of matching facilities.</param>
		/// <param name="type">Optional facility type search filter</param>
		/// <param name="services_">Optional facility service search filter</param>
		/// <param name="mobile">Optional facility mobile search filter</param>
		/// <param name="page">Page of results to return per paginated response.</param>
		/// <param name="per_page">Number of results to return per paginated response.</param>
		/// <returns>Success</returns>
		public async Task<FacilitiesResponse> GetFacilitiesByLocationAsync(string[] ids, string zip, string state, float lat, float _long, float radius, double[] bbox_, double visn, GetFacilitiesByLocationType type, string[] services_, bool mobile, long page, long per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "facilities?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&zip=" + (zip==null? "" : System.Uri.EscapeDataString(zip))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&lat="+lat+"&long="+_long+"&radius="+radius+"&"+string.Join("&", bbox_.Select(z => $"bbox[]={z}"))+"&visn="+visn+"&type=" + type+"&"+string.Join("&", services_.Select(z => $"services[]={System.Uri.EscapeDataString(z.ToString())}"))+"&mobile="+mobile+"&page="+page+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FacilitiesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Bulk download information for all facilities
		/// Retrieve all available facilities in a single operation, formatted as either a GeoJSON FeatureCollection or as a CSV. Due to the complexity of the facility resource type, the CSV response contains a subset of available facility data - specifically it omits the available services, patient satisfaction, and patient wait time data.
		/// GetAllFacilities facilities/all
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GeoFacilitiesResponse> GetAllFacilitiesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "facilities/all";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GeoFacilitiesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a specific facility by ID
		/// GetFacilityById facilities/{id}
		/// </summary>
		/// <param name="id">Facility ID, in the form `<prefix>_<station>`, where prefix is one of "vha", "vba", "nca", or "vc", for health facility, benefits, cemetery, or vet center, respectively.</param>
		/// <returns>Success</returns>
		public async Task<FacilityReadResponse> GetFacilityByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "facilities/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FacilityReadResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Bulk download of all facility IDs
		/// Retrieves all available facility IDs only
		/// GetFacilityIds ids
		/// </summary>
		/// <param name="type">Optional facility type search filter</param>
		/// <returns>Success</returns>
		public async Task<FacilitiesIdsResponse> GetFacilityIdsAsync(GetFacilitiesByLocationType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ids?type=" + type;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FacilitiesIdsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve all VA health facilities reachable by driving within the specified time period
		/// Retrieve all VA health facilities that are located within a specified drive time from a specified location based on coordinates (lat and lng). Optional filter parameters include drive_time and services[]. Address (street_address, city, state, and zip) no longer returns results.
		/// 
		/// The "attributes" element has information about the drive-time band that contains the requested location for each facility in the response. The values of `min_time` and `max_time` are in minutes. For example, a facility returned with a matched `min_time` of 10 and `max_time` of 20 is a 10 to 20 minute drive from the requested location.
		/// 
		/// To retrieve full details for nearby facilities, see the documentation for `/facilities?ids`.
		/// GetNearbyFacilities nearby
		/// </summary>
		/// <param name="lat">Latitude of the location from which drive time will be calculated.</param>
		/// <param name="lng">Longitude of the location from which drive time will be calculated.</param>
		/// <param name="street_address">Street address of the location from which drive time will be calculated.</param>
		/// <param name="city">City of the location from which drive time will be calculated.</param>
		/// <param name="state">Two character state code of the location from which drive time will be calculated.</param>
		/// <param name="zip">Zip code of the location from which drive time will be calculated.</param>
		/// <param name="drive_time">Filter to only include facilities that are within the specified number of drive time minutes from the requested location.</param>
		/// <param name="services_">Optional facility service search filter</param>
		/// <returns>Success</returns>
		public async Task<NearbyResponse> GetNearbyFacilitiesAsync(float lat, float lng, string street_address, string city, string state, string zip, GetNearbyFacilitiesDrive_time drive_time, string[] services_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nearby?lat="+lat+"&lng="+lng+"&street_address=" + (street_address==null? "" : System.Uri.EscapeDataString(street_address))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&zip=" + (zip==null? "" : System.Uri.EscapeDataString(zip))+"&drive_time="+drive_time+"&"+string.Join("&", services_.Select(z => $"services[]={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<NearbyResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum GetFacilitiesByLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		health = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cemetery = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		benefits = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vet_center = 3,
	}
	
	public enum GetAllFacilitiesAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/geo+json")]
		application_geoPlusjson = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/vnd.geo+json")]
		application_vnd_geoPlusjson = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text/csv")]
		text_csv = 2,
	}
	
	public enum GetNearbyFacilitiesDrive_time
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_20 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_30 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_40 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_50 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_60 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_70 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_80 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_90 = 90,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
