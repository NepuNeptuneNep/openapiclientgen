//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelJobRunResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobRunId")]
		public string JobRunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateApplicationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// The initial capacity configuration per worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitialCapacityConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workerCount")]
		public int WorkerCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workerConfiguration")]
		public WorkerResourceConfig WorkerConfiguration { get; set; }
	}
	
	/// <summary>
	/// The cumulative configuration requirements for every worker instance of the worker type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerResourceConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public string Cpu { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public string Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public string Disk { get; set; }
	}
	
	/// <summary>
	/// The specifications for a worker type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerTypeSpecificationInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageConfiguration")]
		public ImageConfigurationInput ImageConfiguration { get; set; }
	}
	
	/// <summary>
	/// The image configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageConfigurationInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteApplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="application")]
		public Application Application { get; set; }
	}
	
	/// <summary>
	/// Information about an application. Amazon EMR Serverless uses applications to run jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Application
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ApplicationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateDetails")]
		public string StateDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialCapacity")]
		public InitialCapacityConfigMap InitialCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumCapacity")]
		public MaximumAllowedResources MaximumCapacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoStartConfiguration")]
		public AutoStartConfig AutoStartConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoStopConfiguration")]
		public AutoStopConfig AutoStopConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public Architecture Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageConfiguration")]
		public ImageConfiguration ImageConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workerTypeSpecifications")]
		public WorkerTypeSpecificationMap WorkerTypeSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InitialCapacityConfigMap
	{
	}
	
	/// <summary>
	/// The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaximumAllowedResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public string Cpu { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public string Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public string Disk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	/// <summary>
	/// The configuration for an application to automatically start on job submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoStartConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// The configuration for an application to automatically stop after a certain amount of time being idle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoStopConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleTimeoutMinutes")]
		public System.Nullable<System.Int32> IdleTimeoutMinutes { get; set; }
	}
	
	/// <summary>
	/// The network configuration for customer VPC connectivity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Architecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM64 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X86_64 = 1,
	}
	
	/// <summary>
	/// The applied image configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedImageDigest")]
		public string ResolvedImageDigest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerTypeSpecificationMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDashboardForJobRunResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetJobRunResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobRun")]
		public JobRun JobRun { get; set; }
	}
	
	/// <summary>
	/// Information about a job run. A job run is a unit of work, such as a Spark JAR, Hive query, or SparkSQL query, that you submit to an Amazon EMR Serverless application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobRun
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobRunId")]
		public string JobRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionRole")]
		public string ExecutionRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobRunState State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateDetails")]
		public string StateDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationOverrides")]
		public ConfigurationOverrides ConfigurationOverrides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobDriver")]
		public JobDriver JobDriver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResourceUtilization")]
		public TotalResourceUtilization TotalResourceUtilization { get; set; }
		
		/// <summary>
		/// The network configuration for customer VPC connectivity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalExecutionDurationSeconds")]
		public System.Nullable<System.Int32> TotalExecutionDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionTimeoutMinutes")]
		public System.Nullable<System.Int32> ExecutionTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billedResourceUtilization")]
		public ResourceUtilization BilledResourceUtilization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobRunState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 7,
	}
	
	/// <summary>
	/// A configuration specification to be used to override existing configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigurationOverrides
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationConfiguration")]
		public Configuration[] ApplicationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitoringConfiguration")]
		public MonitoringConfiguration MonitoringConfiguration { get; set; }
	}
	
	/// <summary>
	/// A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Configuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public string Classification { get; set; }
		
		/// <summary>
		/// A set of properties specified within a configuration classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public Configuration[] Configurations { get; set; }
	}
	
	/// <summary>
	/// The configuration setting for monitoring.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonitoringConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3MonitoringConfiguration")]
		public S3MonitoringConfiguration S3MonitoringConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managedPersistenceMonitoringConfiguration")]
		public ManagedPersistenceMonitoringConfiguration ManagedPersistenceMonitoringConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLoggingConfiguration")]
		public CloudWatchLoggingConfiguration CloudWatchLoggingConfiguration { get; set; }
	}
	
	/// <summary>
	/// The Amazon S3 configuration for monitoring log publishing. You can configure your jobs to send log information to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3MonitoringConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="logUri")]
		public string LogUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyArn")]
		public string EncryptionKeyArn { get; set; }
	}
	
	/// <summary>
	/// The managed log persistence configuration for a job run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedPersistenceMonitoringConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyArn")]
		public string EncryptionKeyArn { get; set; }
	}
	
	/// <summary>
	/// The Amazon CloudWatch configuration for monitoring logs. You can configure your jobs to send log information to CloudWatch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudWatchLoggingConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logGroupName")]
		public string LogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logStreamNamePrefix")]
		public string LogStreamNamePrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyArn")]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logTypes")]
		public LogTypeMap LogTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogTypeMap
	{
	}
	
	/// <summary>
	/// The driver that the job runs on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobDriver
	{
		
		[System.Runtime.Serialization.DataMember(Name="sparkSubmit")]
		public SparkSubmit SparkSubmit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hive")]
		public Hive Hive { get; set; }
	}
	
	/// <summary>
	/// The configurations for the Spark submit job driver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SparkSubmit
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entryPoint")]
		public string EntryPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryPointArguments")]
		public string[] EntryPointArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sparkSubmitParameters")]
		public string SparkSubmitParameters { get; set; }
	}
	
	/// <summary>
	/// The configurations for the Hive job driver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hive
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initQueryFile")]
		public string InitQueryFile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
	}
	
	/// <summary>
	/// The aggregate vCPU, memory, and storage resources used from the time job start executing till the time job is terminated, rounded up to the nearest second.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TotalResourceUtilization
	{
		
		[System.Runtime.Serialization.DataMember(Name="vCPUHour")]
		public System.Nullable<System.Double> VCPUHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoryGBHour")]
		public System.Nullable<System.Double> MemoryGBHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageGBHour")]
		public System.Nullable<System.Double> StorageGBHour { get; set; }
	}
	
	/// <summary>
	/// The resource utilization for memory, storage, and vCPU for jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceUtilization
	{
		
		[System.Runtime.Serialization.DataMember(Name="vCPUHour")]
		public System.Nullable<System.Double> VCPUHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoryGBHour")]
		public System.Nullable<System.Double> MemoryGBHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageGBHour")]
		public System.Nullable<System.Double> StorageGBHour { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public ApplicationSummary[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of attributes associated with an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ApplicationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateDetails")]
		public string StateDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public Architecture Architecture { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobRunsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobRuns")]
		public JobRunSummary[] JobRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of attributes associated with a job run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobRunSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionRole")]
		public string ExecutionRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public JobRunState State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateDetails")]
		public string StateDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartApplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartJobRunResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobRunId")]
		public string JobRunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopApplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateApplicationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="application")]
		public Application Application { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelJobRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerTypeSpecificationInputMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialCapacity")]
		public InitialCapacityConfigMap InitialCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumCapacity")]
		public MaximumAllowedResources MaximumCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoStartConfiguration")]
		public AutoStartConfig AutoStartConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoStopConfiguration")]
		public AutoStopConfig AutoStopConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public Architecture Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageConfiguration")]
		public ImageConfigurationInput ImageConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workerTypeSpecifications")]
		public WorkerTypeSpecificationInputMap WorkerTypeSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDashboardForJobRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetJobRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobRunsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SensitivePropertiesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartJobRunRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionRoleArn")]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobDriver")]
		public JobDriver JobDriver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationOverrides")]
		public ConfigurationOverrides ConfigurationOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionTimeoutMinutes")]
		public System.Nullable<System.Int32> ExecutionTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateApplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initialCapacity")]
		public InitialCapacityConfigMap InitialCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumCapacity")]
		public MaximumAllowedResources MaximumCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoStartConfiguration")]
		public AutoStartConfig AutoStartConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoStopConfiguration")]
		public AutoStopConfig AutoStopConfiguration { get; set; }
		
		/// <summary>
		/// The network configuration for customer VPC connectivity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public NetworkConfiguration NetworkConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public Architecture Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageConfiguration")]
		public ImageConfigurationInput ImageConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workerTypeSpecifications")]
		public WorkerTypeSpecificationInputMap WorkerTypeSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
	}
	
	/// <summary>
	/// The specifications for a worker type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerTypeSpecification
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageConfiguration")]
		public ImageConfiguration ImageConfiguration { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels a job run.
		/// CancelJobRun applications/{applicationId}/jobruns/{jobRunId}
		/// </summary>
		/// <param name="applicationId">The ID of the application on which the job run will be canceled.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobRunId">The ID of the job run to cancel.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CancelJobRunResponse> CancelJobRunAsync(string applicationId, string jobRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/jobruns/"+ (jobRunId==null? "" : System.Uri.EscapeDataString(jobRunId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CancelJobRunResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Displays detailed information about a job run.
		/// GetJobRun applications/{applicationId}/jobruns/{jobRunId}
		/// </summary>
		/// <param name="applicationId">The ID of the application on which the job run is submitted.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobRunId">The ID of the job run.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetJobRunResponse> GetJobRunAsync(string applicationId, string jobRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/jobruns/"+ (jobRunId==null? "" : System.Uri.EscapeDataString(jobRunId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetJobRunResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an application.
		/// CreateApplication applications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateApplicationResponse> CreateApplicationAsync(CreateApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists applications based on a set of parameters.
		/// ListApplications applications
		/// </summary>
		/// <param name="nextToken">The token for the next set of application results.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="maxResults">The maximum number of applications that can be listed.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="states">An optional filter for application states. Note that if this filter contains multiple states, the resulting list will be grouped by the state.
		/// Minimum items: 1
		/// Maximum items: 7
		// </param>
		/// <returns>Success</returns>
		public async Task<ListApplicationsResponse> ListApplicationsAsync(string nextToken, int maxResults, ApplicationState[] states, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&"+string.Join("&", states.Select(z => $"states={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApplicationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an application. An application has to be in a stopped or created state in order to be deleted.
		/// DeleteApplication applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The ID of the application that will be deleted.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteApplicationResponse> DeleteApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Displays detailed information about a specified application.
		/// GetApplication applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The ID of the application that will be described.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetApplicationResponse> GetApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a specified application. An application has to be in a stopped or created state in order to be updated.
		/// UpdateApplication applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The ID of the application to update.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateApplicationResponse> UpdateApplicationAsync(string applicationId, UpdateApplicationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates and returns a URL that you can use to access the application UIs for a job run.</p> <p>For jobs in a running state, the application UI is a live user interface such as the Spark or Tez web UI. For completed jobs, the application UI is a persistent application user interface such as the Spark History Server or persistent Tez UI.</p> <note> <p>The URL is valid for one hour after you generate it. To access the application UI after that hour elapses, you must invoke the API again to generate a new URL.</p> </note>
		/// GetDashboardForJobRun applications/{applicationId}/jobruns/{jobRunId}/dashboard
		/// </summary>
		/// <param name="applicationId">The ID of the application.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobRunId">The ID of the job run.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDashboardForJobRunResponse> GetDashboardForJobRunAsync(string applicationId, string jobRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/jobruns/"+ (jobRunId==null? "" : System.Uri.EscapeDataString(jobRunId))+"/dashboard";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDashboardForJobRunResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists job runs based on a set of parameters.
		/// ListJobRuns applications/{applicationId}/jobruns
		/// </summary>
		/// <param name="applicationId">The ID of the application for which to list the job run.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="nextToken">The token for the next set of job run results.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="maxResults">The maximum number of job runs that can be listed.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="createdAtAfter">The lower bound of the option to filter by creation date and time.</param>
		/// <param name="createdAtBefore">The upper bound of the option to filter by creation date and time.</param>
		/// <param name="states">An optional filter for job run states. Note that if this filter contains multiple states, the resulting list will be grouped by the state.
		/// Minimum items: 0
		/// Maximum items: 8
		// </param>
		/// <returns>Success</returns>
		public async Task<ListJobRunsResponse> ListJobRunsAsync(string applicationId, string nextToken, int maxResults, System.DateTimeOffset createdAtAfter, System.DateTimeOffset createdAtBefore, JobRunState[] states, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/jobruns&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&createdAtAfter=" + createdAtAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAtBefore=" + createdAtBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", states.Select(z => $"states={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListJobRunsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts a job run.
		/// StartJobRun applications/{applicationId}/jobruns
		/// </summary>
		/// <param name="applicationId">The ID of the application on which to run the job.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<StartJobRunResponse> StartJobRunAsync(string applicationId, StartJobRunPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/jobruns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartJobRunResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the tags assigned to the resources.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.
		/// Min length: 60
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Assigns tags to resources. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize your Amazon Web Services resources by attributes such as purpose, owner, or environment. When you have many resources of the same type, you can quickly identify a specific resource based on the tags you've assigned to it.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.
		/// Min length: 60
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts a specified application and initializes initial capacity if configured.
		/// StartApplication applications/{applicationId}/start
		/// </summary>
		/// <param name="applicationId">The ID of the application to start.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<StartApplicationResponse> StartApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stops a specified application and releases initial capacity if configured. All scheduled and running jobs must be completed or cancelled before stopping an application.
		/// StopApplication applications/{applicationId}/stop
		/// </summary>
		/// <param name="applicationId">The ID of the application to stop.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<StopApplicationResponse> StopApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes tags from resources.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.
		/// Min length: 60
		/// Max length: 1024
		// </param>
		/// <param name="tagKeys">The keys of the tags to be removed.
		/// Minimum items: 1
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CreateApplicationPostBody
	{
		
		/// <summary>
		/// The name of the application.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._/#-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._/#-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Amazon EMR release associated with the application.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._/-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._/-]+")]
		public string ReleaseLabel { get; set; }
		
		/// <summary>
		/// The type of application you want to start, such as Spark or Hive.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		public string Type { get; set; }
		
		/// <summary>
		/// The client idempotency token of the application to create. Its value must be unique for each request.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._-]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The capacity to initialize when the application is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialCapacity")]
		public System.Collections.Generic.Dictionary<string, InitialCapacityConfig> InitialCapacity { get; set; }
		
		/// <summary>
		/// The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumCapacity")]
		public CreateApplicationPostBodyMaximumCapacity MaximumCapacity { get; set; }
		
		/// <summary>
		/// The tags assigned to the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The configuration for an application to automatically start on job submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStartConfiguration")]
		public CreateApplicationPostBodyAutoStartConfiguration AutoStartConfiguration { get; set; }
		
		/// <summary>
		/// The configuration for an application to automatically stop after a certain amount of time being idle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStopConfiguration")]
		public CreateApplicationPostBodyAutoStopConfiguration AutoStopConfiguration { get; set; }
		
		/// <summary>
		/// The network configuration for customer VPC connectivity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public CreateApplicationPostBodyNetworkConfiguration NetworkConfiguration { get; set; }
		
		/// <summary>
		/// The CPU architecture of an application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public Architecture Architecture { get; set; }
		
		/// <summary>
		/// The image configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageConfiguration")]
		public CreateApplicationPostBodyImageConfiguration ImageConfiguration { get; set; }
		
		/// <summary>
		/// The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerTypeSpecifications")]
		public System.Collections.Generic.Dictionary<string, WorkerTypeSpecificationInput> WorkerTypeSpecifications { get; set; }
	}
	
	public class CreateApplicationPostBodyMaximumCapacity
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public string Cpu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public string Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public string Disk { get; set; }
	}
	
	public class CreateApplicationPostBodyAutoStartConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class CreateApplicationPostBodyAutoStopConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleTimeoutMinutes")]
		public System.Nullable<System.Int32> IdleTimeoutMinutes { get; set; }
	}
	
	public class CreateApplicationPostBodyNetworkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
	}
	
	public class CreateApplicationPostBodyImageConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
	}
	
	public class UpdateApplicationPatchBody
	{
		
		/// <summary>
		/// The client idempotency token of the application to update. Its value must be unique for each request.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._-]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The capacity to initialize when the application is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialCapacity")]
		public System.Collections.Generic.Dictionary<string, InitialCapacityConfig> InitialCapacity { get; set; }
		
		/// <summary>
		/// The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumCapacity")]
		public UpdateApplicationPatchBodyMaximumCapacity MaximumCapacity { get; set; }
		
		/// <summary>
		/// The configuration for an application to automatically start on job submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStartConfiguration")]
		public UpdateApplicationPatchBodyAutoStartConfiguration AutoStartConfiguration { get; set; }
		
		/// <summary>
		/// The configuration for an application to automatically stop after a certain amount of time being idle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStopConfiguration")]
		public UpdateApplicationPatchBodyAutoStopConfiguration AutoStopConfiguration { get; set; }
		
		/// <summary>
		/// The network configuration for customer VPC connectivity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfiguration")]
		public UpdateApplicationPatchBodyNetworkConfiguration NetworkConfiguration { get; set; }
		
		/// <summary>
		/// The CPU architecture of an application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public Architecture Architecture { get; set; }
		
		/// <summary>
		/// The image configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageConfiguration")]
		public UpdateApplicationPatchBodyImageConfiguration ImageConfiguration { get; set; }
		
		/// <summary>
		/// The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerTypeSpecifications")]
		public System.Collections.Generic.Dictionary<string, WorkerTypeSpecificationInput> WorkerTypeSpecifications { get; set; }
		
		/// <summary>
		/// The Amazon EMR release label for the application. You can change the release label to use a different release of Amazon EMR.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._/-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._/-]+")]
		public string ReleaseLabel { get; set; }
	}
	
	public class UpdateApplicationPatchBodyMaximumCapacity
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public string Cpu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public string Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public string Disk { get; set; }
	}
	
	public class UpdateApplicationPatchBodyAutoStartConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class UpdateApplicationPatchBodyAutoStopConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idleTimeoutMinutes")]
		public System.Nullable<System.Int32> IdleTimeoutMinutes { get; set; }
	}
	
	public class UpdateApplicationPatchBodyNetworkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
	}
	
	public class UpdateApplicationPatchBodyImageConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
	}
	
	public class StartJobRunPostBody
	{
		
		/// <summary>
		/// The client idempotency token of the job run to start. Its value must be unique for each request.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(1, 64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._-]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The execution role ARN for the job run.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionRoleArn")]
		[System.ComponentModel.DataAnnotations.Length(20, 2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)")]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// The driver that the job runs on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobDriver")]
		public StartJobRunPostBodyJobDriver JobDriver { get; set; }
		
		/// <summary>
		/// A configuration specification to be used to override existing configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationOverrides")]
		public StartJobRunPostBodyConfigurationOverrides ConfigurationOverrides { get; set; }
		
		/// <summary>
		/// The tags assigned to the job run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The maximum duration for the job run to run. If the job run runs beyond this duration, it will be automatically cancelled.
		/// Minimum: 0
		/// Maximum: 1000000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionTimeoutMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 1000000)]
		public System.Nullable<System.Int32> ExecutionTimeoutMinutes { get; set; }
		
		/// <summary>
		/// The optional job run name. This doesn't have to be unique.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string Name { get; set; }
	}
	
	public class StartJobRunPostBodyJobDriver
	{
		
		[System.Runtime.Serialization.DataMember(Name="sparkSubmit")]
		public SparkSubmit SparkSubmit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hive")]
		public Hive Hive { get; set; }
	}
	
	public class StartJobRunPostBodyConfigurationOverrides
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationConfiguration")]
		public Configuration[] ApplicationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitoringConfiguration")]
		public MonitoringConfiguration MonitoringConfiguration { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to add to the resource. A tag is an array of key-value pairs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
