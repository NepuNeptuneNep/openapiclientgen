//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Access token details that are currently associated with this user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokenDetails
	{
		
		/// <summary>
		/// Client ID that is associated with the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Contributor ID that is associated with the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_id")]
		public string Contributor_id { get; set; }
		
		/// <summary>
		/// Customer ID that is associated with the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// Number of seconds until the access token expires; no expiration if this value is null
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		/// <summary>
		/// Organization ID that is associated with the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		/// <summary>
		/// Type of access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realm")]
		public System.Nullable<AccessTokenDetailsRealm> Realm { get; set; }
		
		/// <summary>
		/// Scopes that this access token provides when used as authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// User ID that is associated with the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
		
		/// <summary>
		/// User name that is associated with the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccessTokenDetailsRealm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		customer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contributor = 1,
	}
	
	/// <summary>
	/// Album metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Album
	{
		
		/// <summary>
		/// The album ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The album title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// An allotment of credits as part of a subscription
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Allotment
	{
		
		/// <summary>
		/// Number of credits remaining in the subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloads_left")]
		public System.Nullable<System.Int32> Downloads_left { get; set; }
		
		/// <summary>
		/// Total number of credits available to this subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloads_limit")]
		public System.Nullable<System.Int32> Downloads_limit { get; set; }
		
		/// <summary>
		/// Date the subscription ends
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		/// <summary>
		/// Date the subscription started
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
	}
	
	/// <summary>
	/// Metadata about the artist that created the media
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Artist
	{
		
		/// <summary>
		/// The artist's name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Audio metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Audio
	{
		
		/// <summary>
		/// Date this track was added to the Shutterstock library
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_date")]
		public System.Nullable<System.DateOnly> Added_date { get; set; }
		
		/// <summary>
		/// Affiliate referral link; appears only for registered affiliate partners
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliate_url")]
		public string Affiliate_url { get; set; }
		
		/// <summary>
		/// Album metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="album")]
		public Album Album { get; set; }
		
		/// <summary>
		/// List of artists
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public Artist[] Artists { get; set; }
		
		/// <summary>
		/// Files that are available as part of an audio asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public AudioAssets Assets { get; set; }
		
		/// <summary>
		/// BPM (beats per minute) of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bpm")]
		public System.Nullable<System.Int32> Bpm { get; set; }
		
		/// <summary>
		/// Information about a contributor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contributor")]
		public Contributor Contributor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted_time")]
		public System.Nullable<System.DateTimeOffset> Deleted_time { get; set; }
		
		/// <summary>
		/// Description of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Duration of this track in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// List of all genres for this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public string[] Genres { get; set; }
		
		/// <summary>
		/// Shutterstock ID of this track
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List of all instruments that appear in this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instruments")]
		public string[] Instruments { get; set; }
		
		/// <summary>
		/// Whether or not this track contains adult content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_adult")]
		public System.Nullable<System.Boolean> Is_adult { get; set; }
		
		/// <summary>
		/// Whether or not this track is purely instrumental (lacking lyrics)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_instrumental")]
		public System.Nullable<System.Boolean> Is_instrumental { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isrc")]
		public string Isrc { get; set; }
		
		/// <summary>
		/// List of all keywords for this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// Language of this track's lyrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Lyrics of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lyrics")]
		public string Lyrics { get; set; }
		
		/// <summary>
		/// Media type of this track; should always be "audio"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public string Media_type { get; set; }
		
		/// <summary>
		/// List of all model releases for this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model_releases")]
		public ModelRelease[] Model_releases { get; set; }
		
		/// <summary>
		/// List of all moods of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moods")]
		public string[] Moods { get; set; }
		
		/// <summary>
		/// Time this track was published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published_time")]
		public System.Nullable<System.DateTimeOffset> Published_time { get; set; }
		
		/// <summary>
		/// Recording version of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recording_version")]
		public string Recording_version { get; set; }
		
		/// <summary>
		/// List of all releases of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releases")]
		public string[] Releases { get; set; }
		
		/// <summary>
		/// List of all similar artists of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="similar_artists")]
		public Artist[] Similar_artists { get; set; }
		
		/// <summary>
		/// Time this track was submitted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitted_time")]
		public System.Nullable<System.DateTimeOffset> Submitted_time { get; set; }
		
		/// <summary>
		/// Title of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Time this track was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_time")]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Vocal description of this track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vocal_description")]
		public string Vocal_description { get; set; }
	}
	
	/// <summary>
	/// Files that are available as part of an audio asset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioAssets
	{
		
		/// <summary>
		/// Information about a file that is part of an audio asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="album_art")]
		public AudioAssetDetails Album_art { get; set; }
		
		/// <summary>
		/// Information about a file that is part of an audio asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clean_audio")]
		public AudioAssetDetails Clean_audio { get; set; }
		
		/// <summary>
		/// Information about a file that is part of an audio asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_audio")]
		public AudioAssetDetails Original_audio { get; set; }
		
		/// <summary>
		/// Information about a file that is part of an audio asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_mp3")]
		public AudioAssetDetails Preview_mp3 { get; set; }
		
		/// <summary>
		/// Information about a file that is part of an audio asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_ogg")]
		public AudioAssetDetails Preview_ogg { get; set; }
		
		/// <summary>
		/// Links for Shorts, Loops and Stems previews
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shorts_loops_stems")]
		public ShortsLoopsStems Shorts_loops_stems { get; set; }
		
		/// <summary>
		/// Information about a file that is part of an audio asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waveform")]
		public AudioAssetDetails Waveform { get; set; }
	}
	
	/// <summary>
	/// Information about a file that is part of an audio asset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioAssetDetails
	{
		
		/// <summary>
		/// File size of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_size")]
		public System.Nullable<System.Int32> File_size { get; set; }
		
		/// <summary>
		/// URL the track is available at
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Links for Shorts, Loops and Stems previews
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShortsLoopsStems
	{
		
		[System.Runtime.Serialization.DataMember(Name="loops")]
		public object Loops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shorts")]
		public object Shorts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stems")]
		public object Stems { get; set; }
	}
	
	/// <summary>
	/// Information about a contributor
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Contributor
	{
		
		/// <summary>
		/// ID of the contributor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Model and property release metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModelRelease
	{
		
		/// <summary>
		/// ID of the model or property release
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// List of tracks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioDataList
	{
		
		/// <summary>
		/// Tracks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Audio[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Error object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The error code of this error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Debugging information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// A list of items that produced the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
		
		/// <summary>
		/// Specific details about this error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Internal code reference to the source of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// The output of an audio render in WAV or MP3 format
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRenderResult
	{
		
		/// <summary>
		/// The time the render was submitted to the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public System.Nullable<System.DateTimeOffset> Created_date { get; set; }
		
		/// <summary>
		/// The files associated with the render
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public AudioRendersFilesList[] Files { get; set; }
		
		/// <summary>
		/// The alphanumeric ID of the simple render
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The file format preset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preset")]
		public System.Nullable<AudioRenderResultPreset> Preset { get; set; }
		
		/// <summary>
		/// The current progress of the render as a percentage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress_percent")]
		public System.Nullable<System.Int32> Progress_percent { get; set; }
		
		/// <summary>
		/// A coarse progress indicator
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AudioRenderResultStatus Status { get; set; }
		
		/// <summary>
		/// A timeline object that represents either a request for music to be created or an entire music composition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public AudioRenderTimeline Timeline { get; set; }
		
		/// <summary>
		/// The time that the audio output was uploaded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_date")]
		public System.Nullable<System.DateTimeOffset> Updated_date { get; set; }
	}
	
	/// <summary>
	/// Files associated with the render
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRendersFilesList
	{
		
		/// <summary>
		/// The bit depth of the audio files in bits/sample
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bits_sample")]
		public double Bits_sample { get; set; }
		
		/// <summary>
		/// The content-type of the file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		public string Content_type { get; set; }
		
		/// <summary>
		/// The internet-accessible URL from which the file can be downloaded. Any redirects encountered when using this URL must be followed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		/// <summary>
		/// The user-specified file name suggestion from the render request; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// The Sample rate of the audio files in Hertz (Hz)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency_hz")]
		public double Frequency_hz { get; set; }
		
		/// <summary>
		/// The data rate of the audio files in kilobits/second
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kbits_second")]
		public double Kbits_second { get; set; }
		
		/// <summary>
		/// Size of the file in bytes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size_bytes")]
		public double Size_bytes { get; set; }
		
		/// <summary>
		/// An array of track names included in the file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public string[] Tracks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderResultPreset
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER_MP3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER_WAV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEMS_WAV = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING_COMPOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING_COMPOSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING_RENDER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING_RENDER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_CREATE = 5,
	}
	
	/// <summary>
	/// A timeline object that represents either a request for music to be created or an entire music composition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRenderTimeline
	{
		
		/// <summary>
		/// A span object that represents the beginning of a period of absolute time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spans")]
		public AudioRenderTimelineSpan[] Spans { get; set; }
	}
	
	/// <summary>
	/// The beginning of a non-overlapping period of absolute time
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRenderTimelineSpan
	{
		
		/// <summary>
		/// An identifier which must be unique within the parent span
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		/// <summary>
		/// An array of instrument_group objects that are used in this span
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instrument_groups")]
		public AudioRenderTimelineSpanInstrumentGroup[] Instrument_groups { get; set; }
		
		/// <summary>
		/// An array of region objects within the span
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public AudioRenderTimelineSpanRegion[] Regions { get; set; }
		
		/// <summary>
		/// Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="span_type")]
		public AudioRenderTimelineSpanSpan_type Span_type { get; set; }
		
		/// <summary>
		/// The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo")]
		public System.Nullable<System.Int32> Tempo { get; set; }
		
		/// <summary>
		/// Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo_changes")]
		public AudioRenderTimelineSpanTempoChanges[] Tempo_changes { get; set; }
		
		/// <summary>
		/// The absolute time, in seconds, at which the span starts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public int Time { get; set; }
	}
	
	/// <summary>
	/// An instrument and the status objects that specify when that instrument plays
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRenderTimelineSpanInstrumentGroup
	{
		
		/// <summary>
		/// The instrument ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instrument_group")]
		public string Instrument_group { get; set; }
		
		/// <summary>
		/// An array of status objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statuses")]
		public AudioRenderTimelineSpanInstrumentGroupStatus[] Statuses { get; set; }
	}
	
	/// <summary>
	/// The status of an instrument at a specific beat
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRenderTimelineSpanInstrumentGroupStatus
	{
		
		/// <summary>
		/// The beat, relative to the span, at which the status begins
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beat")]
		public double Beat { get; set; }
		
		/// <summary>
		/// Whether the instrument is playing or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AudioRenderTimelineSpanInstrumentGroupStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanInstrumentGroupStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 1,
	}
	
	/// <summary>
	/// A period of music or silence, measured in beats
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRenderTimelineSpanRegion
	{
		
		/// <summary>
		/// The beat, relative to the span, at which the region object's music begins
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beat")]
		public int Beat { get; set; }
		
		/// <summary>
		/// The descriptor ID needed to compose the music
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="descriptor")]
		public string Descriptor { get; set; }
		
		/// <summary>
		/// A high-level description of how a region ends
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_type")]
		public AudioRenderTimelineSpanRegionEnd_type End_type { get; set; }
		
		/// <summary>
		/// An identifier which must be unique within the parent span
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public double Id { get; set; }
		
		/// <summary>
		/// The key signature active at the beginning of the region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public AudioRenderTimelineSpanRegionKey Key { get; set; }
		
		/// <summary>
		/// The type of region
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public AudioRenderTimelineSpanRegionRegion Region { get; set; }
	}
	
	public class AudioRenderTimelineSpanRegionEnd_type
	{
		
		/// <summary>
		/// The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beat")]
		public double Beat { get; set; }
		
		/// <summary>
		/// The type of event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public AudioRenderTimelineSpanRegionEnd_typeEvent Event { get; set; }
		
		/// <summary>
		/// The specific action to perform; if the event type is "ending" then this must be "ringout" and if event type is "transition" this must be "cut"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AudioRenderTimelineSpanRegionEnd_typeType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanRegionEnd_typeEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transition = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanRegionEnd_typeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ringout = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cut = 1,
	}
	
	public class AudioRenderTimelineSpanRegionKey
	{
		
		/// <summary>
		/// A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tonic_accidental")]
		public System.Nullable<AudioRenderTimelineSpanRegionKeyTonic_accidental> Tonic_accidental { get; set; }
		
		/// <summary>
		/// A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tonic_note")]
		public System.Nullable<AudioRenderTimelineSpanRegionKeyTonic_note> Tonic_note { get; set; }
		
		/// <summary>
		/// The scale quality; if this field is not specified, the API selects the quality automatically
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tonic_quality")]
		public System.Nullable<AudioRenderTimelineSpanRegionKeyTonic_quality> Tonic_quality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanRegionKeyTonic_accidental
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double flat")]
		double_flat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flat = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		natural = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sharp = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double sharp")]
		double_sharp = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanRegionKeyTonic_note
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		d = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		e = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		f = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		b = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanRegionKeyTonic_quality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		major = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		natural_minor = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		harmonic_minor = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		melodic_minor = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ionian = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dorian = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phrygian = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lydian = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mixolydian = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aeolian = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		locrian = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanRegionRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		music = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		silence = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioRenderTimelineSpanSpan_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		metered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmetered = 1,
	}
	
	/// <summary>
	/// An inflection point in a tempo curve; the API creates the overall tempo by using a linear interpolation of the time between each tempo change
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRenderTimelineSpanTempoChanges
	{
		
		/// <summary>
		/// The tempo, in beats per minute, active at this time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tempo")]
		public double Tempo { get; set; }
		
		/// <summary>
		/// The time, in seconds, at which the tempo exists
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public double Time { get; set; }
	}
	
	/// <summary>
	/// Audio render data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioRendersListResults
	{
		
		/// <summary>
		/// Audio render results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_renders")]
		public AudioRenderResult[] Audio_renders { get; set; }
	}
	
	/// <summary>
	/// Audio search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioSearchResults
	{
		
		/// <summary>
		/// List of tracks
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Audio[] Data { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// ID of the search
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	/// <summary>
	/// Audio License URL object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioUrl
	{
		
		/// <summary>
		/// URL that can be used to download the .zip file containing shorts, loops, and stems
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shorts_loops_stems")]
		public string Shorts_loops_stems { get; set; }
		
		/// <summary>
		/// URL that can be used to download the unwatermarked, licensed asset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A band that can be used to generate music
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bands
	{
		
		/// <summary>
		/// The ID of the band
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the band
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Data required to search for an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchImage
	{
		
		/// <summary>
		/// Show images added on the specified date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_date")]
		public System.Nullable<System.DateOnly> Added_date { get; set; }
		
		/// <summary>
		/// Show images added before the specified date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_date_end")]
		public System.Nullable<System.DateOnly> Added_date_end { get; set; }
		
		/// <summary>
		/// Show images added on or after the specified date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_date_start")]
		public System.Nullable<System.DateOnly> Added_date_start { get; set; }
		
		/// <summary>
		/// Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspect_ratio")]
		public System.Nullable<System.Double> Aspect_ratio { get; set; }
		
		/// <summary>
		/// Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspect_ratio_max")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> Aspect_ratio_max { get; set; }
		
		/// <summary>
		/// Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspect_ratio_min")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> Aspect_ratio_min { get; set; }
		
		/// <summary>
		/// Show only authentic images
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authentic")]
		public System.Nullable<System.Boolean> Authentic { get; set; }
		
		/// <summary>
		/// Show images with the specified Shutterstock-defined category; specify a category name or ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Show images with the specified contributor names or IDs, allows multiple
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor")]
		public string[] Contributor { get; set; }
		
		/// <summary>
		/// Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_country")]
		public string[] Contributor_country { get; set; }
		
		/// <summary>
		/// Fields to display in the response; see the documentation for the fields parameter in the overview section
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// (Deprecated; use height_from and height_to instead) Show images with the specified height
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Show images with the specified height or larger, in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height_from")]
		public System.Nullable<System.Int32> Height_from { get; set; }
		
		/// <summary>
		/// Show images with the specified height or smaller, in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height_to")]
		public System.Nullable<System.Int32> Height_to { get; set; }
		
		/// <summary>
		/// Show images of the specified type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_type")]
		public string[] Image_type { get; set; }
		
		/// <summary>
		/// Hide results with potentially unsafe keywords
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword_safe_search")]
		public System.Nullable<System.Boolean> Keyword_safe_search { get; set; }
		
		/// <summary>
		/// Language code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public System.Nullable<SearchImageLanguage> Language { get; set; }
		
		/// <summary>
		/// Show only images with the specified license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string[] License { get; set; }
		
		/// <summary>
		/// Show image results with the specified model IDs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string[] Model { get; set; }
		
		/// <summary>
		/// Show image results with horizontal or vertical orientation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orientation")]
		public System.Nullable<SearchImageOrientation> Orientation { get; set; }
		
		/// <summary>
		/// Page number
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Show images that feature people of the specified age category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people_age")]
		public System.Nullable<SearchImagePeople_age> People_age { get; set; }
		
		/// <summary>
		/// Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people_ethnicity")]
		public string[] People_ethnicity { get; set; }
		
		/// <summary>
		/// Show images with people of the specified gender
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people_gender")]
		public System.Nullable<SearchImagePeople_gender> People_gender { get; set; }
		
		/// <summary>
		/// Show images of people with a signed model release
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people_model_released")]
		public System.Nullable<System.Boolean> People_model_released { get; set; }
		
		/// <summary>
		/// Show images with the specified number of people
		/// Minimum: 0
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people_number")]
		[System.ComponentModel.DataAnnotations.Range(0, 4)]
		public System.Nullable<System.Int32> People_number { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// Minimum: 0
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		[System.ComponentModel.DataAnnotations.Range(0, 20)]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// One or more search terms separated by spaces; you can use NOT to filter out images that match a term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Enable or disable safe search
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safe")]
		public System.Nullable<System.Boolean> Safe { get; set; }
		
		/// <summary>
		/// Sort by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public System.Nullable<SearchImageSort> Sort { get; set; }
		
		/// <summary>
		/// Spellcheck the search query and return results on suggested spellings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellcheck_query")]
		public System.Nullable<System.Boolean> Spellcheck_query { get; set; }
		
		/// <summary>
		/// Amount of detail to render in the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public System.Nullable<SearchImageView> View { get; set; }
		
		/// <summary>
		/// (Deprecated; use width_from and width_to instead) Show images with the specified width
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
		
		/// <summary>
		/// Show images with the specified width or larger, in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width_from")]
		public System.Nullable<System.Int32> Width_from { get; set; }
		
		/// <summary>
		/// Show images with the specified width or smaller, in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width_to")]
		public System.Nullable<System.Int32> Width_to { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchImageLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		da = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		el = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fi = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gu = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hr = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hu = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kn = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mr = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nb = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		or = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sk = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sl = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		th = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uk = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ur = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vi = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-Hant")]
		zhMinusHant = 41,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchImageOrientation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		horizontal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vertical = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchImagePeople_age
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		infants = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		children = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teenagers = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20s")]
		_20s = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30s")]
		_30s = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40s")]
		_40s = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50s")]
		_50s = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60s")]
		_60s = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		older = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchImagePeople_gender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		male = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		female = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		both = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchImageSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		popular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		random = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchImageView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 1,
	}
	
	/// <summary>
	/// List of search results for each given query
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkImageSearchResults
	{
		
		/// <summary>
		/// Unique identifier for the search request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulk_search_id")]
		public string Bulk_search_id { get; set; }
		
		/// <summary>
		/// List of image search results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ImageSearchResults[] Results { get; set; }
	}
	
	/// <summary>
	/// Image search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageSearchResults
	{
		
		/// <summary>
		/// List of images
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Image[] Data { get; set; }
		
		/// <summary>
		/// AI-powered insights about an asset, based on the specified audience and objective
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insights")]
		public Insights Insights { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Unique identifier for the search request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// Returns information if search phrase has potentially been mistyped or another query would lead to better search results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellcheck_info")]
		public string Spellcheck_info { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	/// <summary>
	/// Information about an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// Date that the image was added by the contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_date")]
		public System.Nullable<System.DateOnly> Added_date { get; set; }
		
		/// <summary>
		/// Affiliate referral link; appears only for registered affiliate partners
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliate_url")]
		public string Affiliate_url { get; set; }
		
		/// <summary>
		/// Aspect ratio of the image in decimal format, such as 0.6667
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public System.Nullable<System.Double> Aspect { get; set; }
		
		/// <summary>
		/// Information about the assets that are part of an image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public ImageAssets Assets { get; set; }
		
		/// <summary>
		/// Categories that this image is a part of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// Information about a contributor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contributor")]
		public Contributor Contributor { get; set; }
		
		/// <summary>
		/// Detailed description of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether there are model releases for the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_model_release")]
		public System.Nullable<System.Boolean> Has_model_release { get; set; }
		
		/// <summary>
		/// Indicates whether there are property releases for the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_property_release")]
		public System.Nullable<System.Boolean> Has_property_release { get; set; }
		
		/// <summary>
		/// Image ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_type")]
		public string Image_type { get; set; }
		
		/// <summary>
		/// AI-powered insights about how the asset will perform for the objective and audience
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insights")]
		public ImageInsights Insights { get; set; }
		
		/// <summary>
		/// Whether or not this image contains adult content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_adult")]
		public System.Nullable<System.Boolean> Is_adult { get; set; }
		
		/// <summary>
		/// Whether or not this image is editorial content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_editorial")]
		public System.Nullable<System.Boolean> Is_editorial { get; set; }
		
		/// <summary>
		/// Whether or not this image is an illustration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_illustration")]
		public System.Nullable<System.Boolean> Is_illustration { get; set; }
		
		/// <summary>
		/// Keywords associated with the content of this image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// Media type of this image, should always be "image"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public string Media_type { get; set; }
		
		/// <summary>
		/// List of model releases
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model_releases")]
		public ModelRelease[] Model_releases { get; set; }
		
		/// <summary>
		/// List of models
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public Model[] Models { get; set; }
		
		/// <summary>
		/// List of all releases of this image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releases")]
		public string[] Releases { get; set; }
		
		/// <summary>
		/// Link to image information page; included only for certain accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Information about the assets that are part of an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageAssets
	{
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="huge_jpg")]
		public ImageSizeDetails Huge_jpg { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="huge_thumb")]
		public Thumbnail Huge_thumb { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="large_thumb")]
		public Thumbnail Large_thumb { get; set; }
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium_jpg")]
		public ImageSizeDetails Medium_jpg { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview")]
		public Thumbnail Preview { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_1000")]
		public Thumbnail Preview_1000 { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_1500")]
		public Thumbnail Preview_1500 { get; set; }
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="small_jpg")]
		public ImageSizeDetails Small_jpg { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="small_thumb")]
		public Thumbnail Small_thumb { get; set; }
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supersize_jpg")]
		public ImageSizeDetails Supersize_jpg { get; set; }
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vector_eps")]
		public ImageSizeDetails Vector_eps { get; set; }
	}
	
	/// <summary>
	/// Image size information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageSizeDetails
	{
		
		/// <summary>
		/// Display name of this image size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dpi")]
		public System.Nullable<System.Int32> Dpi { get; set; }
		
		/// <summary>
		/// File size (in bytes) of this image size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_size")]
		public System.Nullable<System.Int32> File_size { get; set; }
		
		/// <summary>
		/// Format of this image size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Height of this image size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Whether or not this image can be licensed in this image size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_licensable")]
		public System.Nullable<System.Boolean> Is_licensable { get; set; }
		
		/// <summary>
		/// Width of this image size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Image thumbnail information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Thumbnail
	{
		
		/// <summary>
		/// Height in pixels of the image thumbnail
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public int Height { get; set; }
		
		/// <summary>
		/// Direct URL to the image
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Width in pixels of the image thumbnail
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public int Width { get; set; }
	}
	
	/// <summary>
	/// Category information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Category
	{
		
		/// <summary>
		/// Category ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Category name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ImageInsights
	{
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
	}
	
	/// <summary>
	/// Information about a human model or property that appears in media; used to search for assets that this model is in
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Model
	{
		
		/// <summary>
		/// ID of the model
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// AI-powered insights about an asset, based on the specified audience and objective
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Insights
	{
		
		/// <summary>
		/// How effective the AI thinks an asset in the category is for the specified audience and objective, expressed as a percentile compared to other images
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label_performance")]
		public InsightsLabel_performance[] InsightsLabel_performance { get; set; }
	}
	
	public class InsightsLabel_performance
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentile_performance")]
		public System.Nullable<System.Double> Percentile_performance { get; set; }
	}
	
	/// <summary>
	/// Catalog collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CatalogCollection
	{
		
		/// <summary>
		/// Metadata about an item that is part of a collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover_asset")]
		public CatalogCollectionItem Cover_asset { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.DateTimeOffset Created_time { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of role assignments for a catalog collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role_assignments")]
		public CatalogCollectionRoleAssignments Role_assignments { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_item_count")]
		public double Total_item_count { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updated_time")]
		public System.DateTimeOffset Updated_time { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public CatalogCollectionVisibility Visibility { get; set; }
	}
	
	/// <summary>
	/// Metadata about an item that is part of a collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CatalogCollectionItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public CatalogCollectionItemAsset Asset { get; set; }
		
		/// <summary>
		/// The collection IDs that this asset belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collection_ids")]
		public string[] Collection_ids { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.DateTimeOffset Created_time { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CatalogCollectionItemAsset
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CatalogCollectionItemAssetType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CatalogCollectionItemAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		video = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial-image")]
		editorialMinusimage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="editorial-video")]
		editorialMinusvideo = 4,
	}
	
	/// <summary>
	/// List of role assignments for a catalog collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CatalogCollectionRoleAssignments
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="collection_id")]
		public string Collection_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public CatalogCollectionRoleAssignmentsRoles Roles { get; set; }
	}
	
	public class CatalogCollectionRoleAssignmentsRoles
	{
		
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public CatalogCollectionRole[] Editors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public CatalogCollectionRole[] Owners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viewers")]
		public CatalogCollectionRole[] Viewers { get; set; }
	}
	
	/// <summary>
	/// A user that has access to a catalog collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CatalogCollectionRole
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CatalogCollectionRoleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CatalogCollectionRoleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CatalogCollectionVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
	}
	
	/// <summary>
	/// List of catalog collections
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CatalogCollectionDataList
	{
		
		/// <summary>
		/// List of catalog collections
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CatalogCollection[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public double Page { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public double Per_page { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public double Total_count { get; set; }
	}
	
	/// <summary>
	/// List of catalog collection items
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CatalogCollectionItemDataList
	{
		
		/// <summary>
		/// List of catalog collection items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CatalogCollectionItem[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public double Page { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public double Per_page { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public double Total_count { get; set; }
	}
	
	/// <summary>
	/// List of categories that images can belong to
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CategoryDataList
	{
		
		/// <summary>
		/// Categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Category[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The current page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// The total number of results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Metadata about a collection of assets
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Collection
	{
		
		/// <summary>
		/// Metadata about an item that is part of a collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover_item")]
		public CollectionItem Cover_item { get; set; }
		
		/// <summary>
		/// When the collection was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.Nullable<System.DateTimeOffset> Created_time { get; set; }
		
		/// <summary>
		/// The collection ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The last time this collection's items were updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items_updated_time")]
		public System.Nullable<System.DateTimeOffset> Items_updated_time { get; set; }
		
		/// <summary>
		/// The name of the collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A code that can be used to share the collection (optional)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="share_code")]
		public string Share_code { get; set; }
		
		/// <summary>
		/// The browser URL that can be used to share the collection (optional)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="share_url")]
		public string Share_url { get; set; }
		
		/// <summary>
		/// The number of items in the collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_item_count")]
		public int Total_item_count { get; set; }
		
		/// <summary>
		/// The last time the collection was update (other than changes to the items in it)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_time")]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	/// <summary>
	/// Metadata about an item that is part of a collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionItem
	{
		
		/// <summary>
		/// The date the item was added to the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_time")]
		public System.Nullable<System.DateTimeOffset> Added_time { get; set; }
		
		/// <summary>
		/// ID of the item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The media type of the item, such as image, video, or audio
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public string Media_type { get; set; }
	}
	
	/// <summary>
	/// Collection creation request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionCreateRequest
	{
		
		/// <summary>
		/// The name of the collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Collection creation response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionCreateResponse
	{
		
		/// <summary>
		/// ID of the new collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// List of collections
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionDataList
	{
		
		/// <summary>
		/// Collections
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Collection[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The current page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// The total number of results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// List of items in a collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionItemDataList
	{
		
		/// <summary>
		/// Assets in the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CollectionItem[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The current page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// The total number of results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Request to get a list of items in a collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionItemRequest
	{
		
		/// <summary>
		/// List of items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CollectionItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Collection update request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionUpdateRequest
	{
		
		/// <summary>
		/// The new name of the collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Asset upload information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputerVisionImageCreateResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_id")]
		public string Upload_id { get; set; }
	}
	
	/// <summary>
	/// Contributor profile data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContributorProfile
	{
		
		/// <summary>
		/// Short description of the contributors' library
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		/// <summary>
		/// Type of content that the contributor specializes in (photographer, illustrator, etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_type")]
		public string[] Contributor_type { get; set; }
		
		/// <summary>
		/// Preferred name to be displayed for the contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// List of equipment used by the contributor (Canon EOS 5D Mark II, etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipment")]
		public string[] Equipment { get; set; }
		
		/// <summary>
		/// Contributor ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Country code representing the contributor's locale
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Web URL for the contributors' profile
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portfolio_url")]
		public string Portfolio_url { get; set; }
		
		/// <summary>
		/// Contributor profile social media links
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="social_media")]
		public ContributorProfileSocialMedia Social_media { get; set; }
		
		/// <summary>
		/// List of styles that the contributor specializes in (lifestyle, mixed media, etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="styles")]
		public string[] Styles { get; set; }
		
		/// <summary>
		/// Generic list of subjects for contributors' work (food_and_drink, holiday, people, etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjects")]
		public string[] Subjects { get; set; }
		
		/// <summary>
		/// Personal website for the contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	/// <summary>
	/// Contributor profile social media links
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContributorProfileSocialMedia
	{
		
		/// <summary>
		/// Facebook link for contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="facebook")]
		public string Facebook { get; set; }
		
		/// <summary>
		/// Google+ link for contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="google_plus")]
		public string Google_plus { get; set; }
		
		/// <summary>
		/// LinkedIn link for contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedin")]
		public string Linkedin { get; set; }
		
		/// <summary>
		/// Pinterest page for contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pinterest")]
		public string Pinterest { get; set; }
		
		/// <summary>
		/// Tumblr link for contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tumblr")]
		public string Tumblr { get; set; }
		
		/// <summary>
		/// Twitter link for contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twitter")]
		public string Twitter { get; set; }
	}
	
	/// <summary>
	/// List of contributor profiles
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContributorProfileDataList
	{
		
		/// <summary>
		/// Conributor profiles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ContributorProfile[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Page of response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of contributors per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of contributors for this request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Cookie object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cookie
	{
		
		/// <summary>
		/// The name of the cookie
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the cookie
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Data required to create an audio render
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAudioRender
	{
		
		/// <summary>
		/// A user-specified file name suggestion; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// File format, such as MP3 file, combined WAV file, or individual track WAV files
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preset")]
		public AudioRenderResultPreset Preset { get; set; }
		
		/// <summary>
		/// A timeline object that represents either a request for music to be created or an entire music composition
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeline")]
		public AudioRenderTimeline Timeline { get; set; }
	}
	
	/// <summary>
	/// Render request data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAudioRendersRequest
	{
		
		/// <summary>
		/// Parameters to create computer audio renders
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_renders")]
		public CreateAudioRender[] Audio_renders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCatalogCollection
	{
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public CreateCatalogCollectionItem[] Items { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 100000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 100000)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<CreateCatalogCollectionVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCatalogCollectionItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public CreateCatalogCollectionItemAsset Asset { get; set; }
	}
	
	public class CreateCatalogCollectionItemAsset
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateCatalogCollectionVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCatalogCollectionItems
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public CreateCatalogCollectionItem[] Items { get; set; }
	}
	
	/// <summary>
	/// A custom height or a custom width to resize the image to, but not both (experimental)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomSizeDimensions
	{
		
		/// <summary>
		/// Custom height to resize the image to
		/// Minimum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		[System.ComponentModel.DataAnnotations.Range(100, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Custom width to resize the image to
		/// Minimum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		[System.ComponentModel.DataAnnotations.Range(100, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Information about a descriptor
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Descriptors
	{
		
		/// <summary>
		/// The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average_render_speed")]
		public System.Nullable<System.Double> Average_render_speed { get; set; }
		
		/// <summary>
		/// The bands that are available to use this descriptor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bands")]
		public Bands[] Bands { get; set; }
		
		/// <summary>
		/// The ID of the descriptor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The instruments that can play with this descriptor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instruments")]
		public Instruments[] Instruments { get; set; }
		
		/// <summary>
		/// The maximum beats per minute that the descriptor is intended to be used with
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_tempo")]
		public System.Nullable<System.Double> Max_tempo { get; set; }
		
		/// <summary>
		/// The minimum beats per minute that the descriptor is intended to be used with
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min_tempo")]
		public System.Nullable<System.Double> Min_tempo { get; set; }
		
		/// <summary>
		/// The name of the descriptor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Preview of the descriptor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previews")]
		public Preview[] Previews { get; set; }
		
		/// <summary>
		/// Tags that describe the descriptor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Instruments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instruments
	{
		
		/// <summary>
		/// The string id of the instrument
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The string name of the instrument
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Preview information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Preview
	{
		
		/// <summary>
		/// Content type of the preview, currently audio/mp3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		public System.Nullable<PreviewContent_type> Content_type { get; set; }
		
		/// <summary>
		/// Url of the instrument's preview file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PreviewContent_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="audio/mp3")]
		audio_mp3 = 0,
	}
	
	/// <summary>
	/// List Descriptors results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescriptorsListResult
	{
		
		/// <summary>
		/// List of descriptors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Descriptors[] Data { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
	}
	
	/// <summary>
	/// Information about a downloaded media item. Applicable for all media types, only one of 'audio', 'image' or 'video' will be in a single DownloadHistory object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadHistory
	{
		
		/// <summary>
		/// Information about the downloaded media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audio")]
		public DownloadHistoryMediaDetails Audio { get; set; }
		
		/// <summary>
		/// Date the media was downloaded the first time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download_time")]
		public System.DateTimeOffset Download_time { get; set; }
		
		/// <summary>
		/// ID of the download
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Information about the downloaded media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public DownloadHistoryMediaDetails Image { get; set; }
		
		/// <summary>
		/// Specifies if the media is downloadable via its respective downloads endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_downloadable")]
		public System.Nullable<System.Boolean> Is_downloadable { get; set; }
		
		/// <summary>
		/// The name of the license of this download
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; }
		
		/// <summary>
		/// The metadata that was passed in the original licensing request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Pricing information for revenue-sharing transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revshare")]
		public DownloadHistoryRevshareDetails Revshare { get; set; }
		
		/// <summary>
		/// ID of the subscription used to perform this download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// Information about a user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public DownloadHistoryUserDetails User { get; set; }
		
		/// <summary>
		/// Information about the downloaded media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public DownloadHistoryMediaDetails Video { get; set; }
	}
	
	/// <summary>
	/// Information about the downloaded media
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadHistoryMediaDetails
	{
		
		/// <summary>
		/// Information about the format of a download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public DownloadHistoryFormatDetails Format { get; set; }
		
		/// <summary>
		/// ID of the download history media details
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Information about the format of a download
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadHistoryFormatDetails
	{
		
		/// <summary>
		/// The format of the downloaded media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The size of the downloaded media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
	}
	
	/// <summary>
	/// Pricing information for revenue-sharing transactions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadHistoryRevshareDetails
	{
		
		/// <summary>
		/// The amount charged for the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_amount")]
		public string Purchase_amount { get; set; }
		
		/// <summary>
		/// The currency the amount was charged in
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_currency")]
		public string Purchase_currency { get; set; }
	}
	
	/// <summary>
	/// Information about a user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadHistoryUserDetails
	{
		
		/// <summary>
		/// The name of the user who downloaded the item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// List of download events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadHistoryDataList
	{
		
		/// <summary>
		/// Download events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DownloadHistory[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The current page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// The total number of results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Asset information, including size and thumbnail URLs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialAssets
	{
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium_jpg")]
		public ImageSizeDetails Medium_jpg { get; set; }
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original")]
		public ImageSizeDetails Original { get; set; }
		
		/// <summary>
		/// Image size information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="small_jpg")]
		public ImageSizeDetails Small_jpg { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_170")]
		public Thumbnail Thumb_170 { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_220")]
		public Thumbnail Thumb_220 { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watermark_1500")]
		public Thumbnail Watermark_1500 { get; set; }
		
		/// <summary>
		/// Image thumbnail information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watermark_450")]
		public Thumbnail Watermark_450 { get; set; }
	}
	
	/// <summary>
	/// Name of an editorial category
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of editorial categories
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialCategoryResults
	{
		
		/// <summary>
		/// List of editorial categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialCategory[] Data { get; set; }
	}
	
	/// <summary>
	/// Metadata about editorial content
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public System.Nullable<System.Double> Aspect { get; set; }
		
		/// <summary>
		/// Asset information, including size and thumbnail URLs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public EditorialAssets Assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public string Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// List of categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public EditorialCategory[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_taken")]
		public System.Nullable<System.DateOnly> Date_taken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="special_instructions")]
		public string Special_instructions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// List of editorial items
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialContentDataList
	{
		
		/// <summary>
		/// Editorial items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialContent[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Cover image for editorial livefeed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialCoverItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// List of editorial categories
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialImageCategoryResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialCategory[] Data { get; set; }
	}
	
	/// <summary>
	/// List of editorial items
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialImageContentDataList
	{
		
		/// <summary>
		/// Editorial items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialContent[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Metadata about editorial livefeed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialImageLivefeed
	{
		
		/// <summary>
		/// Cover image for editorial livefeed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover_item")]
		public EditorialCoverItem Cover_item { get; set; }
		
		/// <summary>
		/// When the livefeed was initially created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.Nullable<System.DateTimeOffset> Created_time { get; set; }
		
		/// <summary>
		/// Livefeed ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the livefeed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Total count of items in the livefeed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_item_count")]
		public int Total_item_count { get; set; }
	}
	
	/// <summary>
	/// List of editorial livefeeds
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialImageLivefeedList
	{
		
		/// <summary>
		/// Editorial livefeeds
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialLivefeed[] Data { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	/// <summary>
	/// Metadata about editorial livefeed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialLivefeed
	{
		
		/// <summary>
		/// Cover image for editorial livefeed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover_item")]
		public EditorialCoverItem Cover_item { get; set; }
		
		/// <summary>
		/// When the livefeed was initially created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.Nullable<System.DateTimeOffset> Created_time { get; set; }
		
		/// <summary>
		/// Livefeed ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the livefeed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Total count of items in the livefeed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_item_count")]
		public int Total_item_count { get; set; }
	}
	
	/// <summary>
	/// List of editorial livefeeds
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialLivefeedList
	{
		
		/// <summary>
		/// Editorial livefeeds
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialLivefeed[] Data { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	/// <summary>
	/// Editorial search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialSearchResults
	{
		
		/// <summary>
		/// Editorial items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialContent[] Data { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Cursor value that represents the next page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Current page of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Cursor value that represents the previous page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// Unique identifier for the search request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// Total count of all results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	/// <summary>
	/// Metadata about updated editorial content
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialUpdatedContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public System.Nullable<System.Double> Aspect { get; set; }
		
		/// <summary>
		/// Asset information, including size and thumbnail URLs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public EditorialAssets Assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public string Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// List of categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public EditorialCategory[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commercial_status")]
		public object Commercial_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.Nullable<System.DateTimeOffset> Created_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_taken")]
		public System.Nullable<System.DateOnly> Date_taken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rights")]
		public EditorialUpdatedContentRights Rights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="special_instructions")]
		public string Special_instructions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplier_code")]
		public string Supplier_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_time")]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updates")]
		public string[] Updates { get; set; }
	}
	
	public class EditorialUpdatedContentRights
	{
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string Countries { get; set; }
	}
	
	/// <summary>
	/// Editorial updated results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialUpdatedResults
	{
		
		/// <summary>
		/// Editorial updated items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialUpdatedContent[] Data { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Cursor value that represents the next page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Cursor value that represents the previous page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	/// <summary>
	/// Asset information, including size and thumbnail URLs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialVideoAssets
	{
		
		/// <summary>
		/// Video asset information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original")]
		public VideoSizeDetails Original { get; set; }
		
		/// <summary>
		/// Video preview information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_mp4")]
		public VideoPreviewUrl Preview_mp4 { get; set; }
		
		/// <summary>
		/// Video preview information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_webm")]
		public VideoPreviewUrl Preview_webm { get; set; }
		
		/// <summary>
		/// Video preview information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_jpg")]
		public VideoPreviewUrl Thumb_jpg { get; set; }
	}
	
	/// <summary>
	/// Video asset information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoSizeDetails
	{
		
		/// <summary>
		/// Display name of this video size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// File size (in bytes) of this video size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_size")]
		public System.Nullable<System.Int32> File_size { get; set; }
		
		/// <summary>
		/// Format of this video size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Frames per second of this video size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fps")]
		public System.Nullable<System.Double> Fps { get; set; }
		
		/// <summary>
		/// Height of this video size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Whether or not videos can be licensed in this video size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_licensable")]
		public System.Nullable<System.Boolean> Is_licensable { get; set; }
		
		/// <summary>
		/// Width of this video size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Video preview information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoPreviewUrl
	{
		
		/// <summary>
		/// Direct URL to the image
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// List of editorial video categories
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialVideoCategoryResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialCategory[] Data { get; set; }
	}
	
	/// <summary>
	/// Metadata about editorial content
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialVideoContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public System.Nullable<System.Double> Aspect { get; set; }
		
		/// <summary>
		/// Asset information, including size and thumbnail URLs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public EditorialVideoAssets Assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public string Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// List of categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public EditorialCategory[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_taken")]
		public System.Nullable<System.DateOnly> Date_taken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Editorial search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditorialVideoSearchResults
	{
		
		/// <summary>
		/// Editorial items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EditorialVideoContent[] Data { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Cursor value that represents the next page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Current page of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Cursor value that represents the previous page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// Unique identifier for the search request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// Total count of all results
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	/// <summary>
	/// Metadata about a featured collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeaturedCollection
	{
		
		/// <summary>
		/// Featured collection cover item metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cover_item")]
		public FeaturedCollectionCoverItem Cover_item { get; set; }
		
		/// <summary>
		/// Date that the collection was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_time")]
		public System.Nullable<System.DateTimeOffset> Created_time { get; set; }
		
		/// <summary>
		/// Featured collection cover item metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hero_item")]
		public FeaturedCollectionCoverItem Hero_item { get; set; }
		
		/// <summary>
		/// Collection ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Date that an item in the collection was last added or removed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items_updated_time")]
		public System.Nullable<System.DateTimeOffset> Items_updated_time { get; set; }
		
		/// <summary>
		/// Name of the collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique share url for the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="share_url")]
		public string Share_url { get; set; }
		
		/// <summary>
		/// Total number of items in the collection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_item_count")]
		public int Total_item_count { get; set; }
		
		/// <summary>
		/// Date that the collection was last modified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_time")]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	/// <summary>
	/// Featured collection cover item metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeaturedCollectionCoverItem
	{
		
		/// <summary>
		/// URL of the collection cover item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// List of featured collections
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeaturedCollectionDataList
	{
		
		/// <summary>
		/// Featured collections
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public FeaturedCollection[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// List of audio genres
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenreList
	{
		
		/// <summary>
		/// List of genres
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	/// <summary>
	/// A valid ISO 3166-1 Alpha-2 or ISO 3166-1 Alpha-3 code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ISOCountryCode
	{
	}
	
	/// <summary>
	/// Request to upload an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageCreateRequest
	{
		
		/// <summary>
		/// A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="base64_image")]
		public string Base64_image { get; set; }
	}
	
	/// <summary>
	/// Image upload information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageCreateResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// List of images
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageDataList
	{
		
		/// <summary>
		/// Images
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Image[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Information about an musical instrument
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instrument
	{
		
		/// <summary>
		/// The id of the instrument
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the instrument
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Preview of the instrument
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previews")]
		public Preview[] Previews { get; set; }
		
		/// <summary>
		/// List of tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// List of instruments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstrumentList
	{
		
		/// <summary>
		/// List of instruments
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	/// <summary>
	/// Image search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstrumentsListResult
	{
		
		/// <summary>
		/// List of instrumnets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Instrument[] Data { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
	}
	
	/// <summary>
	/// List of keywords
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeywordDataList
	{
		
		/// <summary>
		/// Keywords
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Language code
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Language
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		da = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		el = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fi = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gu = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hr = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hu = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kn = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ml = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mr = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nb = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		or = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pl = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sk = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sl = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		th = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uk = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ur = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vi = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-Hant")]
		zhMinusHant = 41,
	}
	
	/// <summary>
	/// An audio track in a licensing request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseAudio
	{
		
		/// <summary>
		/// ID of the track being licensed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_id")]
		public string Audio_id { get; set; }
		
		/// <summary>
		/// Type of license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<LicenseAudioLicense> License { get; set; }
		
		/// <summary>
		/// ID of the search that led to this licensing event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseAudioLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio_platform = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_music_basic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_music_extended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_music_pro = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_music_comp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asset_all_music = 5,
	}
	
	/// <summary>
	/// Audio license request data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseAudioRequest
	{
		
		/// <summary>
		/// List of audio tracks to license
		/// Required
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public LicenseAudio[] Audio { get; set; }
	}
	
	/// <summary>
	/// The response to a licensing request for an audio track
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseAudioResult
	{
		
		/// <summary>
		/// Number of credits that this licensing event used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allotment_charge")]
		public System.Nullable<System.Double> Allotment_charge { get; set; }
		
		/// <summary>
		/// ID of the track that was licensed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_id")]
		public string Audio_id { get; set; }
		
		/// <summary>
		/// Audio License URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public AudioUrl Download { get; set; }
		
		/// <summary>
		/// Error information if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// ID of the license event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_id")]
		public string License_id { get; set; }
	}
	
	/// <summary>
	/// List of audio license results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseAudioResultDataList
	{
		
		/// <summary>
		/// License results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LicenseAudioResult[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Individual editorial content to license
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseEditorialContent
	{
		
		/// <summary>
		/// Editorial ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="editorial_id")]
		public string Editorial_id { get; set; }
		
		/// <summary>
		/// License agreement to use for licensing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; }
		
		/// <summary>
		/// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LicenseRequestMetadata Metadata { get; set; }
		
		/// <summary>
		/// Asset size to download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<LicenseEditorialContentSize> Size { get; set; }
	}
	
	/// <summary>
	/// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseRequestMetadata
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseEditorialContentSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original = 2,
	}
	
	/// <summary>
	/// License editorial content request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseEditorialContentRequest
	{
		
		/// <summary>
		/// A valid ISO 3166-1 Alpha-2 or ISO 3166-1 Alpha-3 code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public ISOCountryCode Country { get; set; }
		
		/// <summary>
		/// Editorial content to license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="editorial")]
		public LicenseEditorialContent[] Editorial { get; set; }
	}
	
	/// <summary>
	/// The response to a licensing request for editorial content
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseEditorialContentResult
	{
		
		/// <summary>
		/// For pre-paid plans, how many credits were used for the item license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allotment_charge")]
		public System.Nullable<System.Int32> Allotment_charge { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public Url Download { get; set; }
		
		/// <summary>
		/// Editorial ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="editorial_id")]
		public string Editorial_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
	}
	
	/// <summary>
	/// URL object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Url
	{
		
		/// <summary>
		/// URL that can be used to download the unwatermarked, licensed asset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url1 { get; set; }
	}
	
	/// <summary>
	/// List of editorial license results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseEditorialContentResults
	{
		
		/// <summary>
		/// License results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LicenseEditorialContentResult[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page of the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Individual editorial video content to license
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseEditorialVideoContent
	{
		
		/// <summary>
		/// Editorial ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="editorial_id")]
		public string Editorial_id { get; set; }
		
		/// <summary>
		/// License agreement to use for licensing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public LicenseEditorialVideoContentLicense License { get; set; }
		
		/// <summary>
		/// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LicenseRequestMetadata Metadata { get; set; }
		
		/// <summary>
		/// Asset size to download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<LicenseEditorialVideoContentSize> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseEditorialVideoContentLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_editorial_video_digital_only = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_editorial_video_all_media = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_editorial_video_all_media_single_territory = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier_editorial_video_comp = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseEditorialVideoContentSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original = 0,
	}
	
	/// <summary>
	/// License editorial video content request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseEditorialVideoContentRequest
	{
		
		/// <summary>
		/// A valid ISO 3166-1 Alpha-2 or ISO 3166-1 Alpha-3 code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public ISOCountryCode Country { get; set; }
		
		/// <summary>
		/// Editorial content to license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="editorial")]
		public LicenseEditorialVideoContent[] Editorial { get; set; }
	}
	
	/// <summary>
	/// Description of a license
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseFormat
	{
		
		/// <summary>
		/// Description of the license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Format or extension of the media, such as mpeg for videos or jpeg for images
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Media type of the license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public System.Nullable<LicenseFormatMedia_type> Media_type { get; set; }
		
		/// <summary>
		/// Width of the media, in pixels, allowed by this license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min_resolution")]
		public System.Nullable<System.Int32> Min_resolution { get; set; }
		
		/// <summary>
		/// Keyword that details the size of the media, such as hd or sd for video, huge or vector for images
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseFormatMedia_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		video = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		editorial = 3,
	}
	
	/// <summary>
	/// Data required to license an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseImage
	{
		
		/// <summary>
		/// Cookie object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_cookie")]
		public Cookie Auth_cookie { get; set; }
		
		/// <summary>
		/// A custom height or a custom width to resize the image to, but not both (experimental)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_dimensions")]
		public CustomSizeDimensions Custom_dimensions { get; set; }
		
		/// <summary>
		/// Set to true to acknowledge the editorial agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorial_acknowledgement")]
		public System.Nullable<System.Boolean> Editorial_acknowledgement { get; set; }
		
		/// <summary>
		/// (Deprecated) Image format to download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<LicenseImageFormat> Format { get; set; }
		
		/// <summary>
		/// Image ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image_id")]
		public string Image_id { get; set; }
		
		/// <summary>
		/// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LicenseRequestMetadata Metadata { get; set; }
		
		/// <summary>
		/// For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// ID of the search that led to this licensing transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_modal")]
		public System.Nullable<System.Boolean> Show_modal { get; set; }
		
		/// <summary>
		/// Image size to download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<LicenseImageSize> Size { get; set; }
		
		/// <summary>
		/// ID of the subscription to use for the download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_code")]
		public string Verification_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseImageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jpg = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseImageSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		huge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 3,
	}
	
	/// <summary>
	/// Image license request data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseImageRequest
	{
		
		/// <summary>
		/// Images to create licenses for
		/// Required
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] Images { get; set; }
	}
	
	/// <summary>
	/// The response to a licensing request for an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseImageResult
	{
		
		/// <summary>
		/// Number of credits that this licensing event used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allotment_charge")]
		public System.Nullable<System.Int32> Allotment_charge { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public Url Download { get; set; }
		
		/// <summary>
		/// Error message, appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// Image ID that was licensed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image_id")]
		public string Image_id { get; set; }
		
		/// <summary>
		/// ID of the license event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_id")]
		public string License_id { get; set; }
		
		/// <summary>
		/// Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
	}
	
	/// <summary>
	/// Price
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Price
	{
		
		/// <summary>
		/// Floating-point amount of the calculated rev-share price in the currency local_currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="local_amount")]
		public System.Nullable<System.Double> Local_amount { get; set; }
		
		/// <summary>
		/// Currency of the rev-share price that was calculated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="local_currency")]
		public string Local_currency { get; set; }
	}
	
	/// <summary>
	/// List of information about licensed images
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseImageResultDataList
	{
		
		/// <summary>
		/// License results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LicenseImageResult[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Data required to license an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseImageVector
	{
		
		/// <summary>
		/// Cookie object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_cookie")]
		public Cookie Auth_cookie { get; set; }
		
		/// <summary>
		/// Set to true to acknowledge the editorial agreement
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorial_acknowledgement")]
		public System.Nullable<System.Boolean> Editorial_acknowledgement { get; set; }
		
		/// <summary>
		/// (Deprecated) Image format to download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<LicenseImageVectorFormat> Format { get; set; }
		
		/// <summary>
		/// Image ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image_id")]
		public string Image_id { get; set; }
		
		/// <summary>
		/// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LicenseRequestMetadata Metadata { get; set; }
		
		/// <summary>
		/// For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// ID of the search that led to this licensing transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_modal")]
		public System.Nullable<System.Boolean> Show_modal { get; set; }
		
		/// <summary>
		/// Image size to download
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<LicenseImageVectorSize> Size { get; set; }
		
		/// <summary>
		/// ID of the subscription to use for the download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_code")]
		public string Verification_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseImageVectorFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eps = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseImageVectorSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vector = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseSFX
	{
		
		[System.Runtime.Serialization.DataMember(Name="audio_layout")]
		public System.Nullable<LicenseSFXAudio_layout> Audio_layout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<LicenseSFXFormat> Format { get; set; }
		
		/// <summary>
		/// ID of the search that led to this licensing event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// ID of the sounds effect being licensed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sfx_id")]
		public string Sfx_id { get; set; }
		
		/// <summary>
		/// ID of the subscription to use for the download.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseSFXAudio_layout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ambisonic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5.1")]
		_5_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stereo = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseSFXFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wav = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 1,
	}
	
	/// <summary>
	/// License sounds effect asset request body
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseSFXRequest
	{
		
		/// <summary>
		/// Sound effects to license for
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sound_effects")]
		public LicenseSFX[] Sound_effects { get; set; }
	}
	
	/// <summary>
	/// The response to a licensing request for an sound effects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseSFXResult
	{
		
		/// <summary>
		/// Number of credits that this licensing event used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allotment_charge")]
		public System.Nullable<System.Int32> Allotment_charge { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public Url Download { get; set; }
		
		/// <summary>
		/// Error message, appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// ID of the license event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_id")]
		public string License_id { get; set; }
		
		/// <summary>
		/// Sound effects ID that was licensed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sfx_id")]
		public string Sfx_id { get; set; }
	}
	
	/// <summary>
	/// List of information about licensed sound effects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseSFXResultDataList
	{
		
		/// <summary>
		/// Sound effects license results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LicenseSFXResult[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Data required to license a video
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseVideo
	{
		
		/// <summary>
		/// Cookie object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_cookie")]
		public Cookie Auth_cookie { get; set; }
		
		/// <summary>
		/// Whether or not this item is editorial content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorial_acknowledgement")]
		public System.Nullable<System.Boolean> Editorial_acknowledgement { get; set; }
		
		/// <summary>
		/// Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LicenseRequestMetadata Metadata { get; set; }
		
		/// <summary>
		/// Retail price amount as a floating-point number in the transaction currency, such as 12.34; only for rev-share partners
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// ID of the search that led to this licensing event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_modal")]
		public System.Nullable<System.Boolean> Show_modal { get; set; }
		
		/// <summary>
		/// Size of the video being licensed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<LicenseVideoSize> Size { get; set; }
		
		/// <summary>
		/// ID of the subscription used for this license
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// ID of the video being licensed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="video_id")]
		public string Video_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseVideoSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hd = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4k")]
		_4k = 3,
	}
	
	/// <summary>
	/// List of videos to license
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseVideoRequest
	{
		
		/// <summary>
		/// Videos to license
		/// Required
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="videos")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public LicenseVideo[] Videos { get; set; }
	}
	
	/// <summary>
	/// The response to a licensing request for a video
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseVideoResult
	{
		
		/// <summary>
		/// Number of credits that this licensing event used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allotment_charge")]
		public System.Nullable<System.Int32> Allotment_charge { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="download")]
		public Url Download { get; set; }
		
		/// <summary>
		/// Potential error that occurred during licensing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// ID of the license event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_id")]
		public string License_id { get; set; }
		
		/// <summary>
		/// Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Price Price { get; set; }
		
		/// <summary>
		/// ID of the video that was licensed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="video_id")]
		public string Video_id { get; set; }
	}
	
	/// <summary>
	/// List of video license results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseVideoResultDataList
	{
		
		/// <summary>
		/// License results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LicenseVideoResult[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// List of audio moods
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MoodList
	{
		
		/// <summary>
		/// List of audio moods
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	/// <summary>
	/// Access token response to client apps
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OauthAccessTokenResponse
	{
		
		/// <summary>
		/// Access token that can be used for future requests
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// Number of seconds before token expires, only present for expiring tokens
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		/// <summary>
		/// A refresh token that can be used to renew the access_token when it expires, only present for expiring tokens
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// Type of token
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("Bearer")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; } = "Bearer";
		
		/// <summary>
		/// Metadata about the access_token, only present for expiring tokens
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_token")]
		public string User_token { get; set; }
	}
	
	/// <summary>
	/// Media Recommendation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Recommendation
	{
		
		/// <summary>
		/// Media ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// List of recommended images
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendationDataList
	{
		
		/// <summary>
		/// Recommended images
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Recommendation[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Data required to redownload an image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RedownloadImage
	{
		
		/// <summary>
		/// Cookie object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_cookie")]
		public Cookie Auth_cookie { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_modal")]
		public System.Nullable<System.Boolean> Show_modal { get; set; }
		
		/// <summary>
		/// Size of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<RedownloadImageSize> Size { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_code")]
		public string Verification_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RedownloadImageSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		huge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supersize = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vector = 4,
	}
	
	/// <summary>
	/// Data required to redownload a video
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RedownloadVideo
	{
		
		/// <summary>
		/// Cookie object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_cookie")]
		public Cookie Auth_cookie { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show_modal")]
		public System.Nullable<System.Boolean> Show_modal { get; set; }
		
		/// <summary>
		/// Size of the video
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<RedownloadVideoSize> Size { get; set; }
		
		/// <summary>
		/// (Deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification_code")]
		public string Verification_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RedownloadVideoSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hd = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4k")]
		_4k = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveCatalogCollectionItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveCatalogCollectionItems
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public RemoveCatalogCollectionItem[] Items { get; set; }
	}
	
	/// <summary>
	/// SFX metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SFX
	{
		
		/// <summary>
		/// Date this sound effect was added to the Shutterstock library
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_date")]
		public System.Nullable<System.DateOnly> Added_date { get; set; }
		
		/// <summary>
		/// Affiliate referral link; appears only for registered affiliate partners
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliate_url")]
		public string Affiliate_url { get; set; }
		
		/// <summary>
		/// Artist of the sound effect
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artist")]
		public string Artist { get; set; }
		
		/// <summary>
		/// Files that are available as part of an sound effect asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public SFXAssets Assets { get; set; }
		
		/// <summary>
		/// Information about a contributor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contributor")]
		public Contributor Contributor { get; set; }
		
		/// <summary>
		/// Description of this sound effect
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Duration of this sound effect in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// Shutterstock ID of this sound effect
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// List of all keywords for this sound effect
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// Media type of this track; should always be "sfx"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public string Media_type { get; set; }
		
		/// <summary>
		/// List of all releases of this sound effect
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releases")]
		public string[] Releases { get; set; }
		
		/// <summary>
		/// Title of this sound effect
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Time this sound effect was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_time")]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Files that are available as part of an sound effect asset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SFXAssets
	{
		
		/// <summary>
		/// Information about a file that is part of an sound effect asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_mp3")]
		public SFXAssetDetails Preview_mp3 { get; set; }
		
		/// <summary>
		/// Information about a file that is part of an sound effect asset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waveform")]
		public SFXAssetDetails Waveform { get; set; }
	}
	
	/// <summary>
	/// Information about a file that is part of an sound effect asset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SFXAssetDetails
	{
		
		/// <summary>
		/// File size of the sound effect
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_size")]
		public System.Nullable<System.Int32> File_size { get; set; }
		
		/// <summary>
		/// URL the sound effect is available at
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// List of sound effects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SFXDataList
	{
		
		/// <summary>
		/// Sound Effects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SFX[] Data { get; set; }
	}
	
	/// <summary>
	/// Sound effects search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SFXSearchResults
	{
		
		/// <summary>
		/// List of tracks
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SFX[] Data { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// ID of the search
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	/// <summary>
	/// Search entity request data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchEntitiesRequest
	{
		
		/// <summary>
		/// Plain text to extract keywords from
		/// Required
		/// Min length: 1
		/// Max length: 100000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.Length(1, 100000)]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// The response to a request for keyword analysis
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchEntitiesResponse
	{
		
		/// <summary>
		/// The top keywords from the submitted text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
	}
	
	/// <summary>
	/// Sound effect license URL object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SfxUrl
	{
		
		/// <summary>
		/// URL that can be used to download the unwatermarked, licensed asset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Subscription information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subscription
	{
		
		/// <summary>
		/// An allotment of credits as part of a subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allotment")]
		public Allotment Allotment { get; set; }
		
		/// <summary>
		/// Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset_type")]
		public string Asset_type { get; set; }
		
		/// <summary>
		/// Description of the subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Date the subscription ends
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_time")]
		public System.Nullable<System.DateTimeOffset> Expiration_time { get; set; }
		
		/// <summary>
		/// List of formats that are licensable for the subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formats")]
		public LicenseFormat[] Formats { get; set; }
		
		/// <summary>
		/// Unique internal identifier for the subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Internal identifier for the type of subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; }
		
		/// <summary>
		/// Subscription metadata; different for each customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public SubscriptionMetadata Metadata { get; set; }
		
		/// <summary>
		/// Price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_per_download")]
		public Price Price_per_download { get; set; }
	}
	
	/// <summary>
	/// Subscription metadata; different for each customer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionMetadata
	{
	}
	
	/// <summary>
	/// List of subscriptions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionDataList
	{
		
		/// <summary>
		/// Subscriptions retrieved from this user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Subscription[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Optional error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is being queried
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Amount of subscriptions to show per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total number of subscriptions for this user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// List of search suggestions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Suggestions
	{
		
		/// <summary>
		/// Search suggestions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	/// <summary>
	/// Text to echo in the response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestEcho
	{
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Validation results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestValidate
	{
		
		/// <summary>
		/// Validation results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public TestValidateHeader Header { get; set; }
		
		/// <summary>
		/// Validation results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public TestValidateQuery Query { get; set; }
	}
	
	/// <summary>
	/// Validation results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestValidateHeader
	{
		
		/// <summary>
		/// User agent to expect in the response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user-agent")]
		public string User_agent { get; set; }
	}
	
	/// <summary>
	/// Validation results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestValidateQuery
	{
		
		/// <summary>
		/// Integer ID that was passed in the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// List of tags that were passed in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string[] Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCatalogCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="cover_asset")]
		public UpdateCatalogCollectionCover_asset Cover_asset { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 100000)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<UpdateCatalogCollectionVisibility> Visibility { get; set; }
	}
	
	public class UpdateCatalogCollectionCover_asset
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateCatalogCollectionVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
	}
	
	/// <summary>
	/// Information about a piece of updated media
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatedMedia
	{
		
		/// <summary>
		/// ID of the media
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Date that the media was updated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updated_time")]
		public System.DateTimeOffset Updated_time { get; set; }
		
		/// <summary>
		/// Types of updates that were made to the piece of media
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updates")]
		public string[] Updates { get; set; }
	}
	
	/// <summary>
	/// List of updated media
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatedMediaDataList
	{
		
		/// <summary>
		/// Updated media items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UpdatedMedia[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// List of URLs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Urls
	{
		
		/// <summary>
		/// URLs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public string[] Urls1 { get; set; }
	}
	
	/// <summary>
	/// User details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserDetails
	{
		
		/// <summary>
		/// Unique internal identifier of the user, as a contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_id")]
		public string Contributor_id { get; set; }
		
		/// <summary>
		/// Unique internal identifier of the user, as a purchaser
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		/// <summary>
		/// Email address of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// First name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Full name including first, middle, and last name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="full_name")]
		public string Full_name { get; set; }
		
		/// <summary>
		/// Unique internal identifier for the user, not tied to contributor or purchasing customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// True if the user has access to the Premier collection, false otherwise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_premier")]
		public System.Nullable<System.Boolean> Is_premier { get; set; }
		
		/// <summary>
		/// True if the user has access to the Premier collection and also has child users
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_premier_parent")]
		public System.Nullable<System.Boolean> Is_premier_parent { get; set; }
		
		/// <summary>
		/// Main language of the user account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Last name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// True if the user has an enterprise license, false otherwise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="only_enhanced_license")]
		public System.Nullable<System.Boolean> Only_enhanced_license { get; set; }
		
		/// <summary>
		/// True if the user has access to sensitive use only, false otherwise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="only_sensitive_use")]
		public System.Nullable<System.Boolean> Only_sensitive_use { get; set; }
		
		/// <summary>
		/// Unique internal identifier for the user's organization, specific to Premier users
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		/// <summary>
		/// List of permissions allowed through the Premier client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premier_permissions")]
		public string[] Premier_permissions { get; set; }
		
		/// <summary>
		/// User name associated to the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Information about a video
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video
	{
		
		/// <summary>
		/// Date this video was added to the Shutterstock library
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_date")]
		public System.Nullable<System.DateOnly> Added_date { get; set; }
		
		/// <summary>
		/// Affiliate referral link; appears only for registered affiliate partners
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliate_url")]
		public string Affiliate_url { get; set; }
		
		/// <summary>
		/// Aspect ratio of this video in decimal format, such as 0.6667
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspect")]
		public System.Nullable<System.Double> Aspect { get; set; }
		
		/// <summary>
		/// Aspect ratio of the video as a ratio, such as 16:9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aspect_ratio")]
		public string Aspect_ratio { get; set; }
		
		/// <summary>
		/// Video asset information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public VideoAssets Assets { get; set; }
		
		/// <summary>
		/// List of categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// Information about a contributor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contributor")]
		public Contributor Contributor { get; set; }
		
		/// <summary>
		/// Description of this video
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Duration of this video, in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// Whether or not this video has been released for use by the model appearing in it
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_model_release")]
		public System.Nullable<System.Boolean> Has_model_release { get; set; }
		
		/// <summary>
		/// Whether or not this video has received a release to show the landmark or property appearing in it
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_property_release")]
		public System.Nullable<System.Boolean> Has_property_release { get; set; }
		
		/// <summary>
		/// ID of the video
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether or not this video contains adult content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_adult")]
		public System.Nullable<System.Boolean> Is_adult { get; set; }
		
		/// <summary>
		/// Whether or not this video is editorial content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_editorial")]
		public System.Nullable<System.Boolean> Is_editorial { get; set; }
		
		/// <summary>
		/// Keywords associated with the content of this video
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// Media type of this video, should always be "video"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public string Media_type { get; set; }
		
		/// <summary>
		/// List of models in this video
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public Model[] Models { get; set; }
		
		/// <summary>
		/// Link to video information page; included only for certain accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Video asset information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoAssets
	{
		
		/// <summary>
		/// Video asset information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="4k")]
		public VideoSizeDetails _4k { get; set; }
		
		/// <summary>
		/// Video asset information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hd")]
		public VideoSizeDetails Hd { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_jpg")]
		public Url Preview_jpg { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_mp4")]
		public Url Preview_mp4 { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_webm")]
		public Url Preview_webm { get; set; }
		
		/// <summary>
		/// Video asset information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sd")]
		public VideoSizeDetails Sd { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_jpg")]
		public Url Thumb_jpg { get; set; }
		
		/// <summary>
		/// List of URLs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_jpgs")]
		public Urls Thumb_jpgs { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_mp4")]
		public Url Thumb_mp4 { get; set; }
		
		/// <summary>
		/// URL object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_webm")]
		public Url Thumb_webm { get; set; }
		
		/// <summary>
		/// Video asset information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="web")]
		public VideoSizeDetails Web { get; set; }
	}
	
	/// <summary>
	/// List of items in a collection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoCollectionItemDataList
	{
		
		/// <summary>
		/// Assets in the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CollectionItem[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The current page of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// The total number of results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// List of videos
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoDataList
	{
		
		/// <summary>
		/// Videos
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Video[] Data { get; set; }
		
		/// <summary>
		/// Error list; appears only if there was an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	/// <summary>
	/// Video search results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoSearchResults
	{
		
		/// <summary>
		/// List of videos
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Video[] Data { get; set; }
		
		/// <summary>
		/// Server-generated message, if any
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Current page that is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// Number of results per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
		
		/// <summary>
		/// Unique identifier for the search request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="search_id")]
		public string Search_id { get; set; }
		
		/// <summary>
		/// Total count of all results across all pages
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public int Total_count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List computer audio descriptors
		/// This endpoint lists the descriptors that you can use in the audio regions in an audio render.
		/// ListCustomDescriptors v2/ai/audio/descriptors
		/// </summary>
		/// <param name="render_speed_over">Show descriptors with an average render speed that is greater than or equal to the specified value</param>
		/// <param name="band_id">Show descriptors that contain the specified band (case-sentsitive)</param>
		/// <param name="band_name">Show descriptors with the specified band name (case-sensitive)</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="id">Show descriptors with the specified IDs (case-sensitive)
		/// Maximum items: 20
		// </param>
		/// <param name="instrument_name">Show descriptors with the specified instrument name (case-sensitive)</param>
		/// <param name="instrument_id">Show descriptors with the specified instrument ID (case-sensitive)</param>
		/// <param name="tempo">Show descriptors whose tempo range includes the specified tempo in beats per minute</param>
		/// <param name="tempo_to">Show descriptors with a tempo that is less than or equal to the specified number</param>
		/// <param name="tempo_from">Show descriptors that have a tempo range that includes the specified tempo in beats per minute</param>
		/// <param name="name">Show descriptors with the specified name (case-sensitive)</param>
		/// <param name="tag">Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive)</param>
		/// <returns>OK</returns>
		public async Task<DescriptorsListResult> ListCustomDescriptorsAsync(double render_speed_over, string band_id, string band_name, int page, int per_page, string[] id, string instrument_name, string instrument_id, double tempo, double tempo_to, double tempo_from, string name, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/ai/audio/descriptors?render_speed_over="+render_speed_over+"&band_id=" + (band_id==null? "" : System.Uri.EscapeDataString(band_id))+"&band_name=" + (band_name==null? "" : System.Uri.EscapeDataString(band_name))+"&page="+page+"&per_page="+per_page+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&instrument_name=" + (instrument_name==null? "" : System.Uri.EscapeDataString(instrument_name))+"&instrument_id=" + (instrument_id==null? "" : System.Uri.EscapeDataString(instrument_id))+"&tempo="+tempo+"&tempo_to="+tempo_to+"&tempo_from="+tempo_from+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescriptorsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List computer audio instruments
		/// This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
		/// ListCustomInstruments v2/ai/audio/instruments
		/// </summary>
		/// <param name="id">Show instruments with the specified ID</param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="name">Show instruments with the specified name (case-sensitive)</param>
		/// <param name="tag">Show instruments with the specified tag, such as Percussion or Strings (case-sensitive)</param>
		/// <returns>OK</returns>
		public async Task<InstrumentsListResult> ListCustomInstrumentsAsync(string[] id, int per_page, int page, string name, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/ai/audio/instruments?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&page="+page+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InstrumentsListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about audio renders
		/// This endpoint shows the status of one or more audio renders, including download links for completed audio.
		/// FetchRenders v2/ai/audio/renders
		/// </summary>
		/// <param name="id">One or more render IDs</param>
		/// <returns>OK</returns>
		public async Task<AudioRendersListResults> FetchRendersAsync(string[] id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/ai/audio/renders?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AudioRendersListResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create rendered audio
		/// This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
		/// CreateAudioRenders v2/ai/audio/renders
		/// </summary>
		/// <param name="requestBody">Parameters for the audio, including the timeline and information about the output file</param>
		/// <returns>OK</returns>
		public async Task<AudioRendersListResults> CreateAudioRendersAsync(CreateAudioRendersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/ai/audio/renders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AudioRendersListResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List audio tracks
		/// This endpoint lists information about one or more audio tracks, including the description and publication date.
		/// GetTrackList v2/audio
		/// </summary>
		/// <param name="id">One or more audio IDs
		/// Minimum items: 1
		/// Maximum items: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<AudioDataList> GetTrackListAsync(string[] id, SearchImageView view, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&view=" + view+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AudioDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List audio collections
		/// This endpoint lists your collections of audio tracks and their basic attributes.
		/// GetTrackCollectionList v2/audio/collections
		/// </summary>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <returns>OK</returns>
		public async Task<CollectionDataList> GetTrackCollectionListAsync(int page, int per_page, string[] embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections?page="+page+"&per_page="+per_page+"&"+string.Join("&", embed.Select(z => $"embed={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create audio collections
		/// This endpoint creates one or more collections (soundboxes). To add tracks, use `POST /v2/audio/collections/{id}/items`.
		/// CreateTrackCollection v2/audio/collections
		/// </summary>
		/// <param name="requestBody">Collection metadata</param>
		public async Task CreateTrackCollectionAsync(CollectionCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete audio collections
		/// This endpoint deletes a collection.
		/// DeleteTrackCollection v2/audio/collections/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		public async Task DeleteTrackCollectionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the details of audio collections
		/// This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use `GET /v2/audio/collections/{id}/items`.
		/// GetTrackCollection v2/audio/collections/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <param name="share_code">Code to retrieve a shared collection</param>
		/// <returns>OK</returns>
		public async Task<Collection> GetTrackCollectionAsync(string id, string[] embed, string share_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", embed.Select(z => $"embed={System.Uri.EscapeDataString(z.ToString())}"))+"&share_code=" + (share_code==null? "" : System.Uri.EscapeDataString(share_code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Collection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rename audio collections
		/// This endpoint sets a new name for a collection.
		/// RenameTrackCollection v2/audio/collections/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="requestBody">Collection changes</param>
		public async Task RenameTrackCollectionAsync(string id, CollectionUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove audio tracks from collections
		/// This endpoint removes one or more tracks from a collection.
		/// DeleteTrackCollectionItems v2/audio/collections/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="item_id">One or more item IDs to remove from the collection</param>
		public async Task DeleteTrackCollectionItemsAsync(string id, string[] item_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&"+string.Join("&", item_id.Select(z => $"item_id={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the contents of audio collections
		/// This endpoint lists the IDs of tracks in a collection and the date that each was added.
		/// GetTrackCollectionItems v2/audio/collections/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <param name="share_code">Code to retrieve the contents of a shared collection</param>
		/// <param name="sort">Sort order</param>
		/// <returns>OK</returns>
		public async Task<CollectionItemDataList> GetTrackCollectionItemsAsync(string id, int page, int per_page, string share_code, GetTrackCollectionItemsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&page="+page+"&per_page="+per_page+"&share_code=" + (share_code==null? "" : System.Uri.EscapeDataString(share_code))+"&sort=" + sort;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionItemDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add audio tracks to collections
		/// This endpoint adds one or more tracks to a collection by track IDs.
		/// AddTrackCollectionItems v2/audio/collections/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="requestBody">List of items to add to collection</param>
		public async Task AddTrackCollectionItemsAsync(string id, CollectionItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List audio genres
		/// This endpoint returns a list of all audio genres.
		/// ListGenres v2/audio/genres
		/// </summary>
		/// <param name="language">Which language the genres will be returned</param>
		/// <returns>OK</returns>
		public async Task<GenreList> ListGenresAsync(string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/genres?language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GenreList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List audio instruments
		/// This endpoint returns a list of all audio instruments.
		/// ListInstruments v2/audio/instruments
		/// </summary>
		/// <param name="language">Which language the instruments will be returned in</param>
		/// <returns>OK</returns>
		public async Task<InstrumentList> ListInstrumentsAsync(string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/instruments?language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InstrumentList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List audio licenses
		/// This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
		/// GetTrackLicenseList v2/audio/licenses
		/// </summary>
		/// <param name="audio_id">Show licenses for the specified track ID</param>
		/// <param name="license">Restrict results by license. Prepending a `-` sign will exclude results by license</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 200
		// </param>
		/// <param name="sort">Sort order</param>
		/// <param name="username">Filter licenses by username of licensee</param>
		/// <param name="start_date">Show licenses created on or after the specified date</param>
		/// <param name="end_date">Show licenses created before the specified date</param>
		/// <param name="download_availability">Filter licenses by download availability</param>
		/// <param name="team_history">Set to true to see license history for all members of your team.</param>
		/// <returns>OK</returns>
		public async Task<DownloadHistoryDataList> GetTrackLicenseListAsync(string audio_id, string license, int page, int per_page, GetTrackCollectionItemsSort sort, string username, System.DateTimeOffset start_date, System.DateTimeOffset end_date, GetTrackLicenseListDownload_availability download_availability, bool team_history, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/licenses?audio_id=" + (audio_id==null? "" : System.Uri.EscapeDataString(audio_id))+"&license=" + (license==null? "" : System.Uri.EscapeDataString(license))+"&page="+page+"&per_page="+per_page+"&sort=" + sort+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&start_date=" + start_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_date=" + end_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&download_availability=" + download_availability+"&team_history="+team_history;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DownloadHistoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// License audio tracks
		/// This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours.
		/// LicenseTrack v2/audio/licenses
		/// </summary>
		/// <param name="license">License type</param>
		/// <param name="search_id">The ID of the search that led to licensing this track</param>
		/// <param name="requestBody">Tracks to license</param>
		/// <returns>OK</returns>
		public async Task<LicenseAudioResultDataList> LicenseTrackAsync(LicenseAudioLicense license, string search_id, LicenseAudioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/licenses?license=" + license+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LicenseAudioResultDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download audio tracks
		/// This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours.
		/// DownloadTracks v2/audio/licenses/{id}/downloads
		/// </summary>
		/// <param name="id">License ID</param>
		/// <returns>OK</returns>
		public async Task<AudioUrl> DownloadTracksAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/licenses/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/downloads";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AudioUrl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List audio moods
		/// This endpoint returns a list of all audio moods.
		/// ListMoods v2/audio/moods
		/// </summary>
		/// <param name="language">Which language the moods will be returned in</param>
		/// <returns>OK</returns>
		public async Task<MoodList> ListMoodsAsync(string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/moods?language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MoodList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search for tracks
		/// This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.
		/// SearchTracks v2/audio/search
		/// </summary>
		/// <param name="artists">Show tracks with one of the specified artist names or IDs</param>
		/// <param name="bpm">(Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute</param>
		/// <param name="bpm_from">Show tracks with the specified beats per minute or faster</param>
		/// <param name="bpm_to">Show tracks with the specified beats per minute or slower</param>
		/// <param name="duration">Show tracks with the specified duration in seconds</param>
		/// <param name="duration_from">Show tracks with the specified duration or longer in seconds</param>
		/// <param name="duration_to">Show tracks with the specified duration or shorter in seconds</param>
		/// <param name="genre">Show tracks with each of the specified genres; to get the list of genres, use `GET /v2/audio/genres`</param>
		/// <param name="is_instrumental">Show instrumental music only</param>
		/// <param name="instruments">Show tracks with each of the specified instruments; to get the list of instruments, use `GET /v2/audio/instruments`</param>
		/// <param name="moods">Show tracks with each of the specified moods; to get the list of moods, use `GET /v2/audio/moods`</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 500
		// </param>
		/// <param name="query">One or more search terms separated by spaces</param>
		/// <param name="sort">Sort by</param>
		/// <param name="sort_order">Sort order</param>
		/// <param name="vocal_description">Show tracks with the specified vocal description (male, female)</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="fields">Fields to display in the response; see the documentation for the fields parameter in the overview section</param>
		/// <param name="library">Which library to search</param>
		/// <param name="language">Which language to search in</param>
		/// <returns>OK</returns>
		public async Task<AudioSearchResults> SearchTracksAsync(
					string[] artists, 
					int bpm, 
					int bpm_from, 
					int bpm_to, 
					int duration, 
					int duration_from, 
					int duration_to, 
					string[] genre, 
					bool is_instrumental, 
					string[] instruments, 
					string[] moods, 
					int page, 
					int per_page, 
					string query, 
					SearchTracksSort sort, 
					SearchTracksSort_order sort_order, 
					string vocal_description, 
					SearchImageView view, 
					string fields, 
					SearchTracksLibrary library, 
					string language, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/search?"+string.Join("&", artists.Select(z => $"artists={System.Uri.EscapeDataString(z.ToString())}"))+"&bpm="+bpm+"&bpm_from="+bpm_from+"&bpm_to="+bpm_to+"&duration="+duration+"&duration_from="+duration_from+"&duration_to="+duration_to+"&"+string.Join("&", genre.Select(z => $"genre={System.Uri.EscapeDataString(z.ToString())}"))+"&is_instrumental="+is_instrumental+"&"+string.Join("&", instruments.Select(z => $"instruments={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", moods.Select(z => $"moods={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort+"&sort_order=" + sort_order+"&vocal_description=" + (vocal_description==null? "" : System.Uri.EscapeDataString(vocal_description))+"&view=" + view+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&library=" + library+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AudioSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about audio tracks
		/// This endpoint shows information about a track, including its genres, instruments, and other attributes.
		/// GetTrack v2/audio/{id}
		/// </summary>
		/// <param name="id">Audio track ID</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<Audio> GetTrackAsync(int id, SearchImageView view, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/audio/"+id+"?view=" + view+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Audio>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Run multiple image searches
		/// This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
		/// BulkSearchImages v2/bulk_search/images
		/// </summary>
		/// <param name="added_date">Show images added on the specified date</param>
		/// <param name="added_date_start">Show images added on or after the specified date</param>
		/// <param name="aspect_ratio_min">Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		// </param>
		/// <param name="aspect_ratio_max">Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		// </param>
		/// <param name="aspect_ratio">Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		// </param>
		/// <param name="added_date_end">Show images added before the specified date</param>
		/// <param name="category">Show images with the specified Shutterstock-defined category; specify a category name or ID</param>
		/// <param name="color">Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors</param>
		/// <param name="contributor">Show images with the specified contributor names or IDs, allows multiple</param>
		/// <param name="contributor_country">Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search</param>
		/// <param name="fields">Fields to display in the response; see the documentation for the fields parameter in the overview section</param>
		/// <param name="height">(Deprecated; use height_from and height_to instead) Show images with the specified height</param>
		/// <param name="height_from">Show images with the specified height or larger, in pixels</param>
		/// <param name="height_to">Show images with the specified height or smaller, in pixels</param>
		/// <param name="image_type">Show images of the specified type</param>
		/// <param name="keyword_safe_search">Hide results with potentially unsafe keywords</param>
		/// <param name="language">Set query and result language (uses Accept-Language header if not set)</param>
		/// <param name="license">Show only images with the specified license</param>
		/// <param name="model">Show image results with the specified model IDs</param>
		/// <param name="orientation">Show image results with horizontal or vertical orientation</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 20
		// </param>
		/// <param name="people_model_released">Show images of people with a signed model release</param>
		/// <param name="people_age">Show images that feature people of the specified age category</param>
		/// <param name="people_ethnicity">Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities</param>
		/// <param name="people_gender">Show images with people of the specified gender</param>
		/// <param name="people_number">Show images with the specified number of people
		/// Minimum: 0
		/// Maximum: 4
		// </param>
		/// <param name="region">Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country</param>
		/// <param name="safe">Enable or disable safe search</param>
		/// <param name="sort">Sort by</param>
		/// <param name="spellcheck_query">Spellcheck the search query and return results on suggested spellings</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="width">(Deprecated; use width_from and width_to instead) Show images with the specified width</param>
		/// <param name="width_from">Show images with the specified width or larger, in pixels</param>
		/// <param name="width_to">Show images with the specified width or smaller, in pixels</param>
		/// <param name="requestBody">List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters</param>
		/// <returns>OK</returns>
		public async Task<BulkImageSearchResults> BulkSearchImagesAsync(
					System.DateOnly added_date, 
					System.DateOnly added_date_start, 
					double aspect_ratio_min, 
					double aspect_ratio_max, 
					double aspect_ratio, 
					System.DateOnly added_date_end, 
					string category, 
					string color, 
					string[] contributor, 
					string[] contributor_country, 
					string fields, 
					int height, 
					int height_from, 
					int height_to, 
					string[] image_type, 
					bool keyword_safe_search, 
					Language language, 
					string[] license, 
					string[] model, 
					SearchImageOrientation orientation, 
					int page, 
					int per_page, 
					bool people_model_released, 
					BulkSearchImagesPeople_age people_age, 
					string[] people_ethnicity, 
					SearchImagePeople_gender people_gender, 
					int people_number, 
					string region, 
					bool safe, 
					SearchImageSort sort, 
					bool spellcheck_query, 
					SearchImageView view, 
					int width, 
					int width_from, 
					int width_to, 
					SearchImage[] requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/bulk_search/images?added_date="+added_date+"&added_date_start="+added_date_start+"&aspect_ratio_min="+aspect_ratio_min+"&aspect_ratio_max="+aspect_ratio_max+"&aspect_ratio="+aspect_ratio+"&added_date_end="+added_date_end+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&color=" + (color==null? "" : System.Uri.EscapeDataString(color))+"&"+string.Join("&", contributor.Select(z => $"contributor={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_country.Select(z => $"contributor_country={System.Uri.EscapeDataString(z.ToString())}"))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&height="+height+"&height_from="+height_from+"&height_to="+height_to+"&"+string.Join("&", image_type.Select(z => $"image_type={System.Uri.EscapeDataString(z.ToString())}"))+"&keyword_safe_search="+keyword_safe_search+"&language=" + language+"&"+string.Join("&", license.Select(z => $"license={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", model.Select(z => $"model={System.Uri.EscapeDataString(z.ToString())}"))+"&orientation=" + orientation+"&page="+page+"&per_page="+per_page+"&people_model_released="+people_model_released+"&people_age=" + people_age+"&"+string.Join("&", people_ethnicity.Select(z => $"people_ethnicity={System.Uri.EscapeDataString(z.ToString())}"))+"&people_gender=" + people_gender+"&people_number="+people_number+"&region=" + (region==null? "" : System.Uri.EscapeDataString(region))+"&safe="+safe+"&sort=" + sort+"&spellcheck_query="+spellcheck_query+"&view=" + view+"&width="+width+"&width_from="+width_from+"&width_to="+width_to;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BulkImageSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List catalog collections
		/// This endpoint returns a list of catalog collections.
		/// GetCollections v2/catalog/collections
		/// </summary>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 2
		/// Maximum: 50
		// </param>
		/// <param name="sort">Sort by</param>
		/// <param name="shared">Set to true to omit collections that you own and return only collections  that are shared with you</param>
		/// <returns>OK</returns>
		public async Task<CatalogCollectionDataList> GetCollectionsAsync(int page, int per_page, GetTrackCollectionItemsSort sort, bool shared, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/collections?page="+page+"&per_page="+per_page+"&sort=" + sort+"&shared="+shared;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CatalogCollectionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create catalog collections
		/// This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
		/// CreateCollection v2/catalog/collections
		/// </summary>
		/// <param name="requestBody">Create a catalog collection and, optionally, add items.</param>
		public async Task CreateCollectionAsync(CreateCatalogCollection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete catalog collections
		/// This endpoint deletes a catalog collection. It does not remove the assets from the user's account's catalog.
		/// DeleteCollection v2/catalog/collections/{collection_id}
		/// </summary>
		/// <param name="collection_id">The ID of the collection to delete</param>
		public async Task DeleteCollectionAsync(string collection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/collections/"+ (collection_id==null? "" : System.Uri.EscapeDataString(collection_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update collection metadata
		/// This endpoint updates the metadata of a catalog collection.
		/// UpdateCollection v2/catalog/collections/{collection_id}
		/// </summary>
		/// <param name="collection_id">ID of collection that needs to be modified</param>
		/// <param name="requestBody">Collections Metadata to update</param>
		/// <returns>OK</returns>
		public async Task<CatalogCollection> UpdateCollectionAsync(string collection_id, UpdateCatalogCollection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/collections/"+ (collection_id==null? "" : System.Uri.EscapeDataString(collection_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CatalogCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove items from catalog collection
		/// This endpoint removes assets from a catalog collection. It does not remove the assets from the user's account's catalog.
		/// DeleteFromCollection v2/catalog/collections/{collection_id}/items
		/// </summary>
		/// <param name="collection_id">The ID of the collection to remove assets from</param>
		/// <returns>OK</returns>
		public async Task<CatalogCollection> DeleteFromCollectionAsync(string collection_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/collections/"+ (collection_id==null? "" : System.Uri.EscapeDataString(collection_id))+"/items";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CatalogCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add items to catalog collections
		/// This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user's account's catalog.
		/// AddToCollection v2/catalog/collections/{collection_id}/items
		/// </summary>
		/// <param name="collection_id">The ID of the collection to add assets to</param>
		/// <param name="requestBody">Collection item attributes to add to collection</param>
		/// <returns>OK</returns>
		public async Task<CatalogCollection> AddToCollectionAsync(string collection_id, CreateCatalogCollectionItems requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/collections/"+ (collection_id==null? "" : System.Uri.EscapeDataString(collection_id))+"/items";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CatalogCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search catalogs for assets
		/// This endpoint searches for assets in the account's catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
		/// SearchCatalog v2/catalog/search
		/// </summary>
		/// <param name="sort">Sort by</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 500
		// </param>
		/// <param name="query">One or more search terms separated by spaces</param>
		/// <param name="collection_id">Filter by collection id
		/// Maximum items: 50
		// </param>
		/// <param name="asset_type">Filter by asset type</param>
		/// <returns>OK</returns>
		public async Task<CatalogCollectionItemDataList> SearchCatalogAsync(GetTrackCollectionItemsSort sort, int page, int per_page, string query, string[] collection_id, string[] asset_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/catalog/search?sort=" + sort+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&"+string.Join("&", collection_id.Select(z => $"collection_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", asset_type.Select(z => $"asset_type={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CatalogCollectionItemDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about multiple contributors
		/// This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.
		/// GetContributorList v2/contributors
		/// </summary>
		/// <param name="id">One or more contributor IDs</param>
		/// <returns>OK</returns>
		public async Task<ContributorProfileDataList> GetContributorListAsync(string[] id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/contributors?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContributorProfileDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about a single contributor
		/// This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.
		/// GetContributor v2/contributors/{contributor_id}
		/// </summary>
		/// <param name="contributor_id">Contributor ID</param>
		/// <returns>OK</returns>
		public async Task<ContributorProfile> GetContributorAsync(string contributor_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/contributors/"+ (contributor_id==null? "" : System.Uri.EscapeDataString(contributor_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ContributorProfile>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List contributors' collections
		/// This endpoint lists collections based on contributor ID.
		/// GetContributorCollectionsList v2/contributors/{contributor_id}/collections
		/// </summary>
		/// <param name="contributor_id">Contributor ID</param>
		/// <param name="sort">Sort order</param>
		/// <returns>OK</returns>
		public async Task<CollectionDataList> GetContributorCollectionsListAsync(string contributor_id, GetContributorCollectionsListSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/contributors/"+ (contributor_id==null? "" : System.Uri.EscapeDataString(contributor_id))+"/collections&sort=" + sort;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about contributors' collections
		/// This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items.
		/// GetContributorCollections v2/contributors/{contributor_id}/collections/{id}
		/// </summary>
		/// <param name="contributor_id">Contributor ID</param>
		/// <param name="id">Collection ID that belongs to the contributor</param>
		/// <returns>OK</returns>
		public async Task<Collection> GetContributorCollectionsAsync(string contributor_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/contributors/"+ (contributor_id==null? "" : System.Uri.EscapeDataString(contributor_id))+"/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Collection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the items in contributors' collections
		/// This endpoint lists the IDs of items in a contributor's collection and the date that each was added.
		/// GetContributorCollectionItems v2/contributors/{contributor_id}/collections/{id}/items
		/// </summary>
		/// <param name="contributor_id">Contributor ID</param>
		/// <param name="id">Collection ID that belongs to the contributor</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="sort">Sort order</param>
		/// <returns>OK</returns>
		public async Task<CollectionItemDataList> GetContributorCollectionItemsAsync(string contributor_id, string id, int page, int per_page, GetTrackCollectionItemsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/contributors/"+ (contributor_id==null? "" : System.Uri.EscapeDataString(contributor_id))+"/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionItemDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload images
		/// This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
		/// UploadImage v2/cv/images
		/// </summary>
		/// <param name="requestBody">A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height</param>
		public async Task UploadImageAsync(ImageCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cv/images";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List suggested keywords
		/// This endpoint returns a list of suggested keywords for a media item that you specify or upload.
		/// GetKeywords v2/cv/keywords
		/// </summary>
		/// <param name="asset_id">The asset ID or upload ID to suggest keywords for</param>
		/// <returns>OK</returns>
		public async Task<KeywordDataList> GetKeywordsAsync(string asset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cv/keywords?asset_id=" + (asset_id==null? "" : System.Uri.EscapeDataString(asset_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<KeywordDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List similar images
		/// This endpoint returns images that are visually similar to an image that you specify or upload.
		/// GetSimilarImages v2/cv/similar/images
		/// </summary>
		/// <param name="asset_id">The asset ID or upload ID to find similar images for</param>
		/// <param name="license">Show only images with the specified license</param>
		/// <param name="safe">Enable or disable safe search</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <returns>OK</returns>
		public async Task<ImageSearchResults> GetSimilarImagesAsync(string asset_id, string[] license, bool safe, Language language, int page, int per_page, SearchImageView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cv/similar/images?asset_id=" + (asset_id==null? "" : System.Uri.EscapeDataString(asset_id))+"&"+string.Join("&", license.Select(z => $"license={System.Uri.EscapeDataString(z.ToString())}"))+"&safe="+safe+"&language=" + language+"&page="+page+"&per_page="+per_page+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImageSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List similar videos
		/// This endpoint returns videos that are visually similar to an image that you specify or upload.
		/// GetSimilarVideos v2/cv/similar/videos
		/// </summary>
		/// <param name="asset_id">The asset ID or upload ID to find similar videos for</param>
		/// <param name="license">Show only videos with the specified license</param>
		/// <param name="safe">Enable or disable safe search</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <returns>OK</returns>
		public async Task<VideoSearchResults> GetSimilarVideosAsync(string asset_id, string[] license, bool safe, Language language, int page, int per_page, SearchImageView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cv/similar/videos?asset_id=" + (asset_id==null? "" : System.Uri.EscapeDataString(asset_id))+"&"+string.Join("&", license.Select(z => $"license={System.Uri.EscapeDataString(z.ToString())}"))+"&safe="+safe+"&language=" + language+"&page="+page+"&per_page="+per_page+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VideoSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) List editorial categories
		/// Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
		/// GetEditorialCategories v2/editorial/categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EditorialCategoryResults> GetEditorialCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/categories";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialCategoryResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List editorial categories
		/// This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
		/// ListEditorialImageCategories v2/editorial/images/categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EditorialImageCategoryResults> ListEditorialImageCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/categories";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialImageCategoryResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List editorial image licenses
		/// This endpoint lists existing editorial image licenses.
		/// GetEditorialImageLicenseList v2/editorial/images/licenses
		/// </summary>
		/// <param name="image_id">Show licenses for the specified editorial image ID</param>
		/// <param name="license">Show editorial images that are available with the specified license name</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 200
		// </param>
		/// <param name="sort">Sort order</param>
		/// <param name="username">Filter licenses by username of licensee</param>
		/// <param name="start_date">Show licenses created on or after the specified date</param>
		/// <param name="end_date">Show licenses created before the specified date</param>
		/// <param name="download_availability">Filter licenses by download availability</param>
		/// <param name="team_history">Set to true to see license history for all members of your team.</param>
		/// <returns>OK</returns>
		public async Task<DownloadHistoryDataList> GetEditorialImageLicenseListAsync(string image_id, string license, int page, int per_page, GetTrackCollectionItemsSort sort, string username, System.DateTimeOffset start_date, System.DateTimeOffset end_date, GetTrackLicenseListDownload_availability download_availability, bool team_history, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/licenses?image_id=" + (image_id==null? "" : System.Uri.EscapeDataString(image_id))+"&license=" + (license==null? "" : System.Uri.EscapeDataString(license))+"&page="+page+"&per_page="+per_page+"&sort=" + sort+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&start_date=" + start_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_date=" + end_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&download_availability=" + download_availability+"&team_history="+team_history;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DownloadHistoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// License editorial content
		/// This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
		/// LicenseEditorialImages v2/editorial/images/licenses
		/// </summary>
		/// <param name="requestBody">License editorial content</param>
		/// <returns>OK</returns>
		public async Task<LicenseEditorialContentResults> LicenseEditorialImagesAsync(LicenseEditorialContentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/licenses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LicenseEditorialContentResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get editorial livefeed list
		/// GetEditorialImageLivefeedList v2/editorial/images/livefeeds
		/// </summary>
		/// <param name="country">Returns only livefeeds that are available for distribution in a certain country</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>OK</returns>
		public async Task<EditorialImageLivefeedList> GetEditorialImageLivefeedListAsync(string country, int page, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/livefeeds?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&page="+page+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialImageLivefeedList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get editorial livefeed
		/// GetEditorialImageLivefeed v2/editorial/images/livefeeds/{id}
		/// </summary>
		/// <param name="id">Editorial livefeed ID; must be an URI encoded string</param>
		/// <param name="country">Returns only if the livefeed is available for distribution in a certain country</param>
		/// <returns>OK</returns>
		public async Task<EditorialImageLivefeed> GetEditorialImageLivefeedAsync(string id, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/livefeeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialImageLivefeed>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get editorial livefeed items
		/// GetEditorialImageLivefeedItems v2/editorial/images/livefeeds/{id}/items
		/// </summary>
		/// <param name="id">Editorial livefeed ID; must be an URI encoded string</param>
		/// <param name="country">Returns only if the livefeed items are available for distribution in a certain country</param>
		/// <returns>OK</returns>
		public async Task<EditorialImageContentDataList> GetEditorialImageLivefeedItemsAsync(string id, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/livefeeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialImageContentDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search editorial images
		/// This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to "Alone,Performing" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
		/// SearchEditorialImages v2/editorial/images/search
		/// </summary>
		/// <param name="query">One or more search terms separated by spaces</param>
		/// <param name="sort">Sort by</param>
		/// <param name="category">Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list</param>
		/// <param name="country">Show only editorial content that is available for distribution in a certain country</param>
		/// <param name="supplier_code">Show only editorial content from certain suppliers</param>
		/// <param name="date_start">Show only editorial content generated on or after a specific date</param>
		/// <param name="date_end">Show only editorial content generated on or before a specific date</param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="cursor">The cursor of the page with which to start fetching results; this cursor is returned from previous requests</param>
		/// <returns>OK</returns>
		public async Task<EditorialSearchResults> SearchEditorialImagesAsync(string query, SearchEditorialImagesSort sort, string category, string country, string[] supplier_code, System.DateOnly date_start, System.DateOnly date_end, int per_page, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&"+string.Join("&", supplier_code.Select(z => $"supplier_code={System.Uri.EscapeDataString(z.ToString())}"))+"&date_start="+date_start+"&date_end="+date_end+"&per_page="+per_page+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List updated content
		/// This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
		/// GetUpdatedEditorialImages v2/editorial/images/updated
		/// </summary>
		/// <param name="type">Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted</param>
		/// <param name="date_updated_start">Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.</param>
		/// <param name="date_updated_end">Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.</param>
		/// <param name="date_taken_start">Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets</param>
		/// <param name="date_taken_end">Show images that were taken before the specified date</param>
		/// <param name="cursor">The cursor of the page with which to start fetching results; this cursor is returned from previous requests</param>
		/// <param name="sort">Sort by</param>
		/// <param name="supplier_code">Show only editorial content from certain suppliers</param>
		/// <param name="country">Show only editorial content that is available for distribution in a certain country</param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 100
		/// Maximum: 500
		// </param>
		/// <returns>OK</returns>
		public async Task<EditorialUpdatedResults> GetUpdatedEditorialImagesAsync(GetUpdatedEditorialImagesType type, System.DateTimeOffset date_updated_start, System.DateTimeOffset date_updated_end, System.DateOnly date_taken_start, System.DateOnly date_taken_end, string cursor, GetTrackCollectionItemsSort sort, string[] supplier_code, string country, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/updated?type=" + type+"&date_updated_start=" + date_updated_start.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_updated_end=" + date_updated_end.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_taken_start="+date_taken_start+"&date_taken_end="+date_taken_end+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&sort=" + sort+"&"+string.Join("&", supplier_code.Select(z => $"supplier_code={System.Uri.EscapeDataString(z.ToString())}"))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialUpdatedResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get editorial content details
		/// This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
		/// GetEditorialImage v2/editorial/images/{id}
		/// </summary>
		/// <param name="id">Editorial ID</param>
		/// <param name="country">Returns only if the content is available for distribution in a certain country</param>
		/// <returns>OK</returns>
		public async Task<EditorialContent> GetEditorialImageAsync(string id, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialContent>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) License editorial content
		/// Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
		/// LicenseEditorialImage v2/editorial/licenses
		/// </summary>
		/// <param name="requestBody">License editorial content</param>
		/// <returns>OK</returns>
		public async Task<LicenseEditorialContentResults> LicenseEditorialImageAsync(LicenseEditorialContentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/licenses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LicenseEditorialContentResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) Get editorial livefeed list
		/// Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
		/// GetEditorialLivefeedList v2/editorial/livefeeds
		/// </summary>
		/// <param name="country">Returns only livefeeds that are available for distribution in a certain country</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>OK</returns>
		public async Task<EditorialLivefeedList> GetEditorialLivefeedListAsync(string country, int page, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/livefeeds?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&page="+page+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialLivefeedList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) Get editorial livefeed
		/// Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
		/// GetEditorialLivefeed v2/editorial/livefeeds/{id}
		/// </summary>
		/// <param name="id">Editorial livefeed ID; must be an URI encoded string</param>
		/// <param name="country">Returns only if the livefeed is available for distribution in a certain country</param>
		/// <returns>OK</returns>
		public async Task<EditorialLivefeed> GetEditorialLivefeedAsync(string id, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/livefeeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialLivefeed>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) Get editorial livefeed items
		/// Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
		/// GetEditorialLivefeedItems v2/editorial/livefeeds/{id}/items
		/// </summary>
		/// <param name="id">Editorial livefeed ID; must be an URI encoded string</param>
		/// <param name="country">Returns only if the livefeed items are available for distribution in a certain country</param>
		/// <returns>OK</returns>
		public async Task<EditorialContentDataList> GetEditorialLivefeedItemsAsync(string id, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/livefeeds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialContentDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) Search editorial content
		/// Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
		/// SearchEditorial v2/editorial/search
		/// </summary>
		/// <param name="query">One or more search terms separated by spaces</param>
		/// <param name="sort">Sort by</param>
		/// <param name="category">Show editorial content within a certain editorial category; specify by category name</param>
		/// <param name="country">Show only editorial content that is available for distribution in a certain country</param>
		/// <param name="supplier_code">Show only editorial content from certain suppliers</param>
		/// <param name="date_start">Show only editorial content generated on or after a specific date</param>
		/// <param name="date_end">Show only editorial content generated on or before a specific date</param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="cursor">The cursor of the page with which to start fetching results; this cursor is returned from previous requests</param>
		/// <returns>OK</returns>
		public async Task<EditorialSearchResults> SearchEditorialAsync(string query, SearchEditorialImagesSort sort, string category, string country, string[] supplier_code, System.DateOnly date_start, System.DateOnly date_end, int per_page, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&"+string.Join("&", supplier_code.Select(z => $"supplier_code={System.Uri.EscapeDataString(z.ToString())}"))+"&date_start="+date_start+"&date_end="+date_end+"&per_page="+per_page+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) List updated content
		/// Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
		/// GetUpdatedEditorialImage v2/editorial/updated
		/// </summary>
		/// <param name="type">Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted</param>
		/// <param name="date_updated_start">Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.</param>
		/// <param name="date_updated_end">Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.</param>
		/// <param name="date_taken_start">Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets</param>
		/// <param name="date_taken_end">Show images that were taken before the specified date</param>
		/// <param name="cursor">The cursor of the page with which to start fetching results; this cursor is returned from previous requests</param>
		/// <param name="sort">Sort by</param>
		/// <param name="supplier_code">Show only editorial content from certain suppliers</param>
		/// <param name="country">Show only editorial content that is available for distribution in a certain country</param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 100
		/// Maximum: 500
		// </param>
		/// <returns>OK</returns>
		public async Task<EditorialUpdatedResults> GetUpdatedEditorialImageAsync(GetUpdatedEditorialImagesType type, System.DateTimeOffset date_updated_start, System.DateTimeOffset date_updated_end, System.DateOnly date_taken_start, System.DateOnly date_taken_end, string cursor, GetTrackCollectionItemsSort sort, string[] supplier_code, string country, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/updated?type=" + type+"&date_updated_start=" + date_updated_start.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_updated_end=" + date_updated_end.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_taken_start="+date_taken_start+"&date_taken_end="+date_taken_end+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&sort=" + sort+"&"+string.Join("&", supplier_code.Select(z => $"supplier_code={System.Uri.EscapeDataString(z.ToString())}"))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialUpdatedResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List editorial video categories
		/// This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
		/// ListEditorialVideoCategories v2/editorial/videos/categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EditorialVideoCategoryResults> ListEditorialVideoCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/videos/categories";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialVideoCategoryResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List editorial video licenses
		/// This endpoint lists existing editorial video licenses.
		/// GetEditorialVideoLicenseList v2/editorial/videos/licenses
		/// </summary>
		/// <param name="video_id">Show licenses for the specified editorial video ID</param>
		/// <param name="license">Show editorial videos that are available with the specified license name</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 200
		// </param>
		/// <param name="sort">Sort order</param>
		/// <param name="username">Filter licenses by username of licensee</param>
		/// <param name="start_date">Show licenses created on or after the specified date</param>
		/// <param name="end_date">Show licenses created before the specified date</param>
		/// <param name="download_availability">Filter licenses by download availability</param>
		/// <param name="team_history">Set to true to see license history for all members of your team.</param>
		/// <returns>OK</returns>
		public async Task<DownloadHistoryDataList> GetEditorialVideoLicenseListAsync(string video_id, string license, int page, int per_page, GetTrackCollectionItemsSort sort, string username, System.DateTimeOffset start_date, System.DateTimeOffset end_date, GetTrackLicenseListDownload_availability download_availability, bool team_history, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/videos/licenses?video_id=" + (video_id==null? "" : System.Uri.EscapeDataString(video_id))+"&license=" + (license==null? "" : System.Uri.EscapeDataString(license))+"&page="+page+"&per_page="+per_page+"&sort=" + sort+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&start_date=" + start_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_date=" + end_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&download_availability=" + download_availability+"&team_history="+team_history;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DownloadHistoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// License editorial video content
		/// This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
		/// LicenseEditorialVideo v2/editorial/videos/licenses
		/// </summary>
		/// <param name="requestBody">License editorial video content</param>
		/// <returns>OK</returns>
		public async Task<LicenseEditorialContentResults> LicenseEditorialVideoAsync(LicenseEditorialVideoContentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/videos/licenses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LicenseEditorialContentResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search editorial video content
		/// This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to "Alone,Performing" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
		/// SearchEditorialVideos v2/editorial/videos/search
		/// </summary>
		/// <param name="query">One or more search terms separated by spaces</param>
		/// <param name="sort">Sort by</param>
		/// <param name="category">Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list</param>
		/// <param name="country">Show only editorial video content that is available for distribution in a certain country</param>
		/// <param name="supplier_code">Show only editorial video content from certain suppliers</param>
		/// <param name="date_start">Show only editorial video content generated on or after a specific date</param>
		/// <param name="date_end">Show only editorial video content generated on or before a specific date</param>
		/// <param name="resolution">Show only editorial video content with specific resolution</param>
		/// <param name="fps">Show only editorial video content generated with specific frames per second</param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="cursor">The cursor of the page with which to start fetching results; this cursor is returned from previous requests</param>
		/// <returns>OK</returns>
		public async Task<EditorialVideoSearchResults> SearchEditorialVideosAsync(string query, SearchEditorialImagesSort sort, string category, string country, string[] supplier_code, System.DateOnly date_start, System.DateOnly date_end, SearchEditorialVideosResolution resolution, double fps, int per_page, string cursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/videos/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&sort=" + sort+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&"+string.Join("&", supplier_code.Select(z => $"supplier_code={System.Uri.EscapeDataString(z.ToString())}"))+"&date_start="+date_start+"&date_end="+date_end+"&resolution=" + resolution+"&fps="+fps+"&per_page="+per_page+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialVideoSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get editorial video content details
		/// This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
		/// GetEditorialVideo v2/editorial/videos/{id}
		/// </summary>
		/// <param name="id">Editorial ID</param>
		/// <param name="country">Returns only if the content is available for distribution in a certain country</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<EditorialVideoContent> GetEditorialVideoAsync(string id, string country, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialVideoContent>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// (Deprecated) Get editorial content details
		/// Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
		/// Editorial_imagesGetByIdAndCountryAndSearch_id v2/editorial/{id}
		/// </summary>
		/// <param name="id">Editorial ID</param>
		/// <param name="country">Returns only if the content is available for distribution in a certain country</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<EditorialContent> Editorial_imagesGetByIdAndCountryAndSearch_idAsync(string id, string country, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/editorial/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditorialContent>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List images
		/// This endpoint lists information about one or more images, including the available sizes.
		/// GetImageList v2/images
		/// </summary>
		/// <param name="id">One or more image IDs
		/// Maximum items: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<ImageDataList> GetImageListAsync(string[] id, SearchImageView view, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&view=" + view+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImageDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload ephemeral images
		/// Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.
		/// UploadEphemeralImage v2/images
		/// </summary>
		/// <param name="requestBody">The image data in JPEG or PNG format</param>
		public async Task UploadEphemeralImageAsync(ImageCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List image categories
		/// This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
		/// ListImageCategories v2/images/categories
		/// </summary>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <returns>OK</returns>
		public async Task<CategoryDataList> ListImageCategoriesAsync(Language language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/categories?language=" + language;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CategoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List image collections
		/// This endpoint lists your collections of images and their basic attributes.
		/// GetImageCollectionList v2/images/collections
		/// </summary>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <returns>OK</returns>
		public async Task<CollectionDataList> GetImageCollectionListAsync(string[] embed, int page, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections?"+string.Join("&", embed.Select(z => $"embed={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create image collections
		/// This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
		/// CreateImageCollection v2/images/collections
		/// </summary>
		/// <param name="requestBody">The names of the new collections</param>
		public async Task CreateImageCollectionAsync(CollectionCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List featured image collections
		/// This endpoint lists featured collections of specific types and a name and cover image for each collection.
		/// GetFeaturedImageCollectionList v2/images/collections/featured
		/// </summary>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <param name="type">The types of collections to return</param>
		/// <param name="asset_hint">Cover image size</param>
		/// <returns>OK</returns>
		public async Task<FeaturedCollectionDataList> GetFeaturedImageCollectionListAsync(GetFeaturedImageCollectionListEmbed embed, string[] type, GetFeaturedImageCollectionListAsset_hint asset_hint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/featured?embed=" + embed+"&"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&asset_hint=" + asset_hint;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FeaturedCollectionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the details of featured image collections
		/// This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.
		/// GetFeaturedImageCollection v2/images/collections/featured/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <param name="asset_hint">Cover image size</param>
		/// <returns>OK</returns>
		public async Task<FeaturedCollection> GetFeaturedImageCollectionAsync(string id, GetFeaturedImageCollectionListEmbed embed, GetFeaturedImageCollectionAsset_hint asset_hint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/featured/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&embed=" + embed+"&asset_hint=" + asset_hint;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FeaturedCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the contents of featured image collections
		/// This endpoint lists the IDs of images in a featured collection and the date that each was added.
		/// GetFeaturedImageCollectionItems v2/images/collections/featured/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <returns>OK</returns>
		public async Task<CollectionItemDataList> GetFeaturedImageCollectionItemsAsync(string id, int page, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/featured/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&page="+page+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionItemDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete image collections
		/// This endpoint deletes an image collection.
		/// DeleteImageCollection v2/images/collections/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		public async Task DeleteImageCollectionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the details of image collections
		/// This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
		/// GetImageCollection v2/images/collections/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <param name="share_code">Code to retrieve a shared collection</param>
		/// <returns>OK</returns>
		public async Task<Collection> GetImageCollectionAsync(string id, string[] embed, string share_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", embed.Select(z => $"embed={System.Uri.EscapeDataString(z.ToString())}"))+"&share_code=" + (share_code==null? "" : System.Uri.EscapeDataString(share_code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Collection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rename image collections
		/// This endpoint sets a new name for an image collection.
		/// RenameImageCollection v2/images/collections/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="requestBody">The new name for the collection</param>
		public async Task RenameImageCollectionAsync(string id, CollectionUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove images from collections
		/// This endpoint removes one or more images from a collection.
		/// DeleteImageCollectionItems v2/images/collections/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="item_id">One or more image IDs to remove from the collection</param>
		public async Task DeleteImageCollectionItemsAsync(string id, string[] item_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&"+string.Join("&", item_id.Select(z => $"item_id={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the contents of image collections
		/// This endpoint lists the IDs of images in a collection and the date that each was added.
		/// GetImageCollectionItems v2/images/collections/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <param name="share_code">Code to retrieve the contents of a shared collection</param>
		/// <param name="sort">Sort order</param>
		/// <returns>OK</returns>
		public async Task<CollectionItemDataList> GetImageCollectionItemsAsync(string id, int page, int per_page, string share_code, GetTrackCollectionItemsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&page="+page+"&per_page="+per_page+"&share_code=" + (share_code==null? "" : System.Uri.EscapeDataString(share_code))+"&sort=" + sort;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionItemDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add images to collections
		/// This endpoint adds one or more images to a collection by image IDs.
		/// AddImageCollectionItems v2/images/collections/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="requestBody">Array of image IDs to add to the collection</param>
		public async Task AddImageCollectionItemsAsync(string id, CollectionItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List image licenses
		/// This endpoint lists existing licenses.
		/// GetImageLicenseList v2/images/licenses
		/// </summary>
		/// <param name="image_id">Show licenses for the specified image ID</param>
		/// <param name="license">Show images that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="sort">Sort order</param>
		/// <param name="username">Filter licenses by username of licensee</param>
		/// <param name="start_date">Show licenses created on or after the specified date</param>
		/// <param name="end_date">Show licenses created before the specified date</param>
		/// <param name="download_availability">Filter licenses by download availability</param>
		/// <param name="team_history">Set to true to see license history for all members of your team.</param>
		/// <returns>OK</returns>
		public async Task<DownloadHistoryDataList> GetImageLicenseListAsync(string image_id, string license, int page, int per_page, GetTrackCollectionItemsSort sort, string username, System.DateTimeOffset start_date, System.DateTimeOffset end_date, GetTrackLicenseListDownload_availability download_availability, bool team_history, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/licenses?image_id=" + (image_id==null? "" : System.Uri.EscapeDataString(image_id))+"&license=" + (license==null? "" : System.Uri.EscapeDataString(license))+"&page="+page+"&per_page="+per_page+"&sort=" + sort+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&start_date=" + start_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_date=" + end_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&download_availability=" + download_availability+"&team_history="+team_history;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DownloadHistoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// License images
		/// This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
		/// LicenseImages v2/images/licenses
		/// </summary>
		/// <param name="subscription_id">Subscription ID to use to license the image</param>
		/// <param name="format">(Deprecated) Image format</param>
		/// <param name="size">Image size</param>
		/// <param name="search_id">Search ID that was provided in the results of an image search</param>
		/// <param name="requestBody">List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters</param>
		/// <returns>OK</returns>
		public async Task<LicenseImageResultDataList> LicenseImagesAsync(string subscription_id, LicenseImagesFormat format, LicenseImagesSize size, string search_id, LicenseImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/licenses?subscription_id=" + (subscription_id==null? "" : System.Uri.EscapeDataString(subscription_id))+"&format=" + format+"&size=" + size+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LicenseImageResultDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download images
		/// This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
		/// DownloadImage v2/images/licenses/{id}/downloads
		/// </summary>
		/// <param name="id">License ID</param>
		/// <param name="requestBody">Information about the images to redownload</param>
		/// <returns>OK</returns>
		public async Task<Url> DownloadImageAsync(string id, RedownloadImage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/licenses/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/downloads";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Url>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List recommended images
		/// This endpoint returns images that customers put in the same collection as the specified image IDs.
		/// GetImageRecommendations v2/images/recommendations
		/// </summary>
		/// <param name="id">Image IDs</param>
		/// <param name="max_items">Maximum number of results returned in the response
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="safe">Restrict results to safe images</param>
		/// <returns>OK</returns>
		public async Task<RecommendationDataList> GetImageRecommendationsAsync(string[] id, int max_items, bool safe, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/recommendations?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&max_items="+max_items+"&safe="+safe;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RecommendationDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search for images
		/// This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
		/// SearchImages v2/images/search
		/// </summary>
		/// <param name="added_date">Show images added on the specified date</param>
		/// <param name="added_date_start">Show images added on or after the specified date</param>
		/// <param name="aspect_ratio_min">Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		// </param>
		/// <param name="aspect_ratio_max">Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		// </param>
		/// <param name="aspect_ratio">Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
		/// Minimum: 0
		// </param>
		/// <param name="ai_search">Set to true and specify the `ai_objective` and `ai_industry` parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry </param>
		/// <param name="ai_labels_limit">For AI-powered search, specify the maximum number of labels to return
		/// Minimum: 0
		/// Maximum: 500
		// </param>
		/// <param name="ai_industry">For AI-powered search, specify the industry to target; requires that the `ai_search` parameter is set to true</param>
		/// <param name="ai_objective">For AI-powered search, specify the goal of the media; requires that the `ai_search` parameter is set to true</param>
		/// <param name="added_date_end">Show images added before the specified date</param>
		/// <param name="category">Show images with the specified Shutterstock-defined category; specify a category name or ID</param>
		/// <param name="color">Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors</param>
		/// <param name="contributor">Show images with the specified contributor names or IDs, allows multiple</param>
		/// <param name="contributor_country">Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search</param>
		/// <param name="fields">Fields to display in the response; see the documentation for the fields parameter in the overview section</param>
		/// <param name="height">(Deprecated; use height_from and height_to instead) Show images with the specified height</param>
		/// <param name="height_from">Show images with the specified height or larger, in pixels</param>
		/// <param name="height_to">Show images with the specified height or smaller, in pixels</param>
		/// <param name="image_type">Show images of the specified type</param>
		/// <param name="keyword_safe_search">Hide results with potentially unsafe keywords</param>
		/// <param name="language">Set query and result language (uses Accept-Language header if not set)</param>
		/// <param name="license">Show only images with the specified license</param>
		/// <param name="model">Show image results with the specified model IDs</param>
		/// <param name="orientation">Show image results with horizontal or vertical orientation</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 500
		// </param>
		/// <param name="people_model_released">Show images of people with a signed model release</param>
		/// <param name="people_age">Show images that feature people of the specified age category</param>
		/// <param name="people_ethnicity">Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities</param>
		/// <param name="people_gender">Show images with people of the specified gender</param>
		/// <param name="people_number">Show images with the specified number of people
		/// Minimum: 0
		/// Maximum: 4
		// </param>
		/// <param name="query">One or more search terms separated by spaces; you can use NOT to filter out images that match a term</param>
		/// <param name="region">Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country</param>
		/// <param name="safe">Enable or disable safe search</param>
		/// <param name="sort">Sort by</param>
		/// <param name="spellcheck_query">Spellcheck the search query and return results on suggested spellings</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="width">(Deprecated; use width_from and width_to instead) Show images with the specified width</param>
		/// <param name="width_from">Show images with the specified width or larger, in pixels</param>
		/// <param name="width_to">Show images with the specified width or smaller, in pixels</param>
		/// <returns>OK</returns>
		public async Task<ImageSearchResults> SearchImagesAsync(
					System.DateOnly added_date, 
					System.DateOnly added_date_start, 
					double aspect_ratio_min, 
					double aspect_ratio_max, 
					double aspect_ratio, 
					bool ai_search, 
					int ai_labels_limit, 
					SearchImagesAi_industry ai_industry, 
					SearchImagesAi_objective ai_objective, 
					System.DateOnly added_date_end, 
					string category, 
					string color, 
					string[] contributor, 
					string[] contributor_country, 
					string fields, 
					int height, 
					int height_from, 
					int height_to, 
					string[] image_type, 
					bool keyword_safe_search, 
					Language language, 
					string[] license, 
					string[] model, 
					SearchImageOrientation orientation, 
					int page, 
					int per_page, 
					bool people_model_released, 
					SearchImagesPeople_age people_age, 
					string[] people_ethnicity, 
					SearchImagePeople_gender people_gender, 
					int people_number, 
					string query, 
					string region, 
					bool safe, 
					SearchImageSort sort, 
					bool spellcheck_query, 
					SearchImageView view, 
					int width, 
					int width_from, 
					int width_to, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/search?added_date="+added_date+"&added_date_start="+added_date_start+"&aspect_ratio_min="+aspect_ratio_min+"&aspect_ratio_max="+aspect_ratio_max+"&aspect_ratio="+aspect_ratio+"&ai_search="+ai_search+"&ai_labels_limit="+ai_labels_limit+"&ai_industry=" + ai_industry+"&ai_objective=" + ai_objective+"&added_date_end="+added_date_end+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&color=" + (color==null? "" : System.Uri.EscapeDataString(color))+"&"+string.Join("&", contributor.Select(z => $"contributor={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_country.Select(z => $"contributor_country={System.Uri.EscapeDataString(z.ToString())}"))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&height="+height+"&height_from="+height_from+"&height_to="+height_to+"&"+string.Join("&", image_type.Select(z => $"image_type={System.Uri.EscapeDataString(z.ToString())}"))+"&keyword_safe_search="+keyword_safe_search+"&language=" + language+"&"+string.Join("&", license.Select(z => $"license={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", model.Select(z => $"model={System.Uri.EscapeDataString(z.ToString())}"))+"&orientation=" + orientation+"&page="+page+"&per_page="+per_page+"&people_model_released="+people_model_released+"&people_age=" + people_age+"&"+string.Join("&", people_ethnicity.Select(z => $"people_ethnicity={System.Uri.EscapeDataString(z.ToString())}"))+"&people_gender=" + people_gender+"&people_number="+people_number+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&region=" + (region==null? "" : System.Uri.EscapeDataString(region))+"&safe="+safe+"&sort=" + sort+"&spellcheck_query="+spellcheck_query+"&view=" + view+"&width="+width+"&width_from="+width_from+"&width_to="+width_to;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImageSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get suggestions for a search term
		/// This endpoint provides autocomplete suggestions for partial search terms.
		/// GetImageSuggestions v2/images/search/suggestions
		/// </summary>
		/// <param name="query">Search term for which you want keyword suggestions</param>
		/// <param name="limit">Limit the number of suggestions
		/// Minimum: 1
		/// Maximum: 25
		// </param>
		/// <returns>OK</returns>
		public async Task<Suggestions> GetImageSuggestionsAsync(string query, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/search/suggestions?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Suggestions>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get keywords from text
		/// This endpoint returns up to 10 important keywords from a block of plain text.
		/// GetImageKeywordSuggestions v2/images/search/suggestions
		/// </summary>
		/// <param name="requestBody">Plain text to extract keywords from</param>
		/// <returns>OK</returns>
		public async Task<SearchEntitiesResponse> GetImageKeywordSuggestionsAsync(SearchEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/search/suggestions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchEntitiesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List updated images
		/// This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
		/// GetUpdatedImages v2/images/updated
		/// </summary>
		/// <param name="type">Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways</param>
		/// <param name="start_date">Show images updated on or after the specified date</param>
		/// <param name="end_date">Show images updated before the specified date</param>
		/// <param name="interval">Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="sort">Sort order</param>
		/// <returns>OK</returns>
		public async Task<UpdatedMediaDataList> GetUpdatedImagesAsync(string[] type, System.DateOnly start_date, System.DateOnly end_date, string interval, int page, int per_page, GetTrackCollectionItemsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/updated?"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&start_date="+start_date+"&end_date="+end_date+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdatedMediaDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about images
		/// This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
		/// GetImage v2/images/{id}
		/// </summary>
		/// <param name="id">Image ID</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<Image> GetImageAsync(string id, Language language, SearchImageView view, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&language=" + language+"&view=" + view+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Image>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List similar images
		/// This endpoint returns images that are visually similar to an image that you specify.
		/// ListSimilarImages v2/images/{id}/similar
		/// </summary>
		/// <param name="id">Image ID</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <returns>OK</returns>
		public async Task<ImageSearchResults> ListSimilarImagesAsync(string id, Language language, int page, int per_page, SearchImageView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/images/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/similar&language=" + language+"&page="+page+"&per_page="+per_page+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImageSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get access tokens
		/// This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
		/// CreateAccessToken v2/oauth/access_token
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OauthAccessTokenResponse> CreateAccessTokenAsync(CreateAccessTokenPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/oauth/access_token";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OauthAccessTokenResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Authorize applications
		/// This endpoint returns a redirect URI (in the 'Location' header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.
		/// Authorize v2/oauth/authorize
		/// </summary>
		/// <param name="client_id">Client ID (Consumer Key) of your application</param>
		/// <param name="realm">User type to be authorized (usually 'customer')</param>
		/// <param name="redirect_uri">The callback URI to send the request to after authorization; must use a host name that is registered with your application</param>
		/// <param name="response_type">Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'</param>
		/// <param name="scope">Space-separated list of scopes to be authorized</param>
		/// <param name="state">Unique value used by the calling app to verify the request</param>
		public async Task AuthorizeAsync(string client_id, AccessTokenDetailsRealm realm, string redirect_uri, AuthorizeResponse_type response_type, string scope, string state, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/oauth/authorize?client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&realm=" + realm+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri))+"&response_type=" + response_type+"&scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List details about sound effects
		/// This endpoint shows information about sound effects.
		/// GetSfxListDetails v2/sfx
		/// </summary>
		/// <param name="id">One or more sound effect IDs
		/// Maximum items: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="library">Which library to fetch from</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<SFXDataList> GetSfxListDetailsAsync(string[] id, SearchImageView view, Language language, GetSfxListDetailsLibrary library, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sfx?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&view=" + view+"&language=" + language+"&library=" + library+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SFXDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List sound effects licenses
		/// This endpoint lists existing licenses.
		/// GetSfxLicenseList v2/sfx/licenses
		/// </summary>
		/// <param name="sfx_id">Show licenses for the specified sound effects ID</param>
		/// <param name="license">Show sound effects that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="sort">Sort order</param>
		/// <param name="username">Filter licenses by username of licensee</param>
		/// <param name="start_date">Show licenses created on or after the specified date</param>
		/// <param name="end_date">Show licenses created before the specified date</param>
		/// <param name="license_id">Filter by the license ID</param>
		/// <param name="download_availability">Filter licenses by download availability</param>
		/// <param name="team_history">Set to true to see license history for all members of your team.</param>
		/// <returns>OK</returns>
		public async Task<DownloadHistoryDataList> GetSfxLicenseListAsync(string sfx_id, string license, int page, int per_page, GetTrackCollectionItemsSort sort, string username, System.DateTimeOffset start_date, System.DateTimeOffset end_date, string license_id, GetTrackLicenseListDownload_availability download_availability, bool team_history, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sfx/licenses?sfx_id=" + (sfx_id==null? "" : System.Uri.EscapeDataString(sfx_id))+"&license=" + (license==null? "" : System.Uri.EscapeDataString(license))+"&page="+page+"&per_page="+per_page+"&sort=" + sort+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&start_date=" + start_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_date=" + end_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&license_id=" + (license_id==null? "" : System.Uri.EscapeDataString(license_id))+"&download_availability=" + download_availability+"&team_history="+team_history;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DownloadHistoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// License sound effects
		/// This endpoint licenses sounds effect assets.
		/// LicensesSFX v2/sfx/licenses
		/// </summary>
		/// <returns>OK</returns>
		public async Task<LicenseSFXResultDataList> LicensesSFXAsync(LicenseSFXRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sfx/licenses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LicenseSFXResultDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download sound effects
		/// This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
		/// DownloadSfx v2/sfx/licenses/{id}/downloads
		/// </summary>
		/// <param name="id">License ID</param>
		/// <returns>OK</returns>
		public async Task<SfxUrl> DownloadSfxAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sfx/licenses/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/downloads";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SfxUrl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search for sound effects
		/// This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
		/// SearchSFX v2/sfx/search
		/// </summary>
		/// <param name="added_date">Show sound effects added on the specified date</param>
		/// <param name="added_date_start">Show sound effects added on or after the specified date</param>
		/// <param name="added_date_end">Show sound effects added before the specified date</param>
		/// <param name="duration">Show sound effects with the specified duration in seconds</param>
		/// <param name="duration_from">Show sound effects with the specified duration or longer in seconds</param>
		/// <param name="duration_to">Show sound effects with the specified duration or shorter in seconds</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="query">One or more search terms separated by spaces</param>
		/// <param name="safe">Enable or disable safe search</param>
		/// <param name="sort">Sort by</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="language">Set query and result language (uses Accept-Language header if not set)</param>
		/// <returns>OK</returns>
		public async Task<SFXSearchResults> SearchSFXAsync(System.DateOnly added_date, System.DateOnly added_date_start, System.DateOnly added_date_end, int duration, int duration_from, int duration_to, int page, int per_page, string query, bool safe, SearchSFXSort sort, SearchImageView view, Language language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sfx/search?added_date="+added_date+"&added_date_start="+added_date_start+"&added_date_end="+added_date_end+"&duration="+duration+"&duration_from="+duration_from+"&duration_to="+duration_to+"&page="+page+"&per_page="+per_page+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&safe="+safe+"&sort=" + sort+"&view=" + view+"&language=" + language;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SFXSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about sound effects
		/// This endpoint shows information about a sound effect.
		/// GetSfxDetails v2/sfx/{id}
		/// </summary>
		/// <param name="id">Audio track ID</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="library">Which library to fetch from</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<SFX> GetSfxDetailsAsync(int id, Language language, SearchImageView view, GetSfxListDetailsLibrary library, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sfx/"+id+"?language=" + language+"&view=" + view+"&library=" + library+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SFX>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Echo text
		/// Echo v2/test
		/// </summary>
		/// <param name="text">Text to echo</param>
		/// <returns>OK</returns>
		public async Task<TestEcho> EchoAsync(string text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/test?text=" + (text==null? "" : System.Uri.EscapeDataString(text));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestEcho>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Validate input
		/// Validate v2/test/validate
		/// </summary>
		/// <param name="id">Integer ID</param>
		/// <param name="tag">List of tags</param>
		/// <returns>OK</returns>
		public async Task<TestValidate> ValidateAsync(int id, string[] tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/test/validate?id="+id+"&"+string.Join("&", tag.Select(z => $"tag={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestValidate>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get user details
		/// GetUser v2/user
		/// </summary>
		/// <returns>OK</returns>
		public async Task<UserDetails> GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get access token details
		/// GetAccessToken v2/user/access_token
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AccessTokenDetails> GetAccessTokenAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/access_token";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccessTokenDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List user subscriptions
		/// GetUserSubscriptionList v2/user/subscriptions
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SubscriptionDataList> GetUserSubscriptionListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/user/subscriptions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubscriptionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List videos
		/// This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
		/// GetVideoList v2/videos
		/// </summary>
		/// <param name="id">One or more video IDs
		/// Minimum items: 1
		/// Maximum items: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<VideoDataList> GetVideoListAsync(string[] id, SearchImageView view, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos?"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&view=" + view+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VideoDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List video categories
		/// This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
		/// ListVideoCategories v2/videos/categories
		/// </summary>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <returns>OK</returns>
		public async Task<CategoryDataList> ListVideoCategoriesAsync(Language language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/categories?language=" + language;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CategoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List video collections
		/// This endpoint lists your collections of videos and their basic attributes.
		/// GetVideoCollectionList v2/videos/collections
		/// </summary>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <returns>OK</returns>
		public async Task<CollectionDataList> GetVideoCollectionListAsync(int page, int per_page, string[] embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections?page="+page+"&per_page="+per_page+"&"+string.Join("&", embed.Select(z => $"embed={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create video collections
		/// This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
		/// CreateVideoCollection v2/videos/collections
		/// </summary>
		/// <param name="requestBody">Collection metadata</param>
		public async Task CreateVideoCollectionAsync(CollectionCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List featured video collections
		/// This endpoint lists featured video collections and a name and cover video for each collection.
		/// GetFeaturedVideoCollectionList v2/videos/collections/featured
		/// </summary>
		/// <param name="embed">What information to include in the response, such as a URL to the collection</param>
		/// <returns>OK</returns>
		public async Task<FeaturedCollectionDataList> GetFeaturedVideoCollectionListAsync(GetFeaturedImageCollectionListEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/featured?embed=" + embed;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FeaturedCollectionDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the details of featured video collections
		/// This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`.
		/// GetFeaturedVideoCollection v2/videos/collections/featured/{id}
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="embed">What information to include in the response, such as a URL to the collection</param>
		/// <returns>OK</returns>
		public async Task<FeaturedCollection> GetFeaturedVideoCollectionAsync(string id, GetFeaturedImageCollectionListEmbed embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/featured/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&embed=" + embed;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FeaturedCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the contents of featured video collections
		/// This endpoint lists the IDs of videos in a featured collection and the date that each was added.
		/// GetFeaturedVideoCollectionItems v2/videos/collections/featured/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <returns>OK</returns>
		public async Task<VideoCollectionItemDataList> GetFeaturedVideoCollectionItemsAsync(string id, int page, int per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/featured/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&page="+page+"&per_page="+per_page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VideoCollectionItemDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete video collections
		/// This endpoint deletes a collection.
		/// DeleteVideoCollection v2/videos/collections/{id}
		/// </summary>
		/// <param name="id">The ID of the collection to delete</param>
		public async Task DeleteVideoCollectionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the details of video collections
		/// This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
		/// GetVideoCollection v2/videos/collections/{id}
		/// </summary>
		/// <param name="id">The ID of the collection to return</param>
		/// <param name="embed">Which sharing information to include in the response, such as a URL to the collection</param>
		/// <param name="share_code">Code to retrieve a shared collection</param>
		/// <returns>OK</returns>
		public async Task<Collection> GetVideoCollectionAsync(string id, string[] embed, string share_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", embed.Select(z => $"embed={System.Uri.EscapeDataString(z.ToString())}"))+"&share_code=" + (share_code==null? "" : System.Uri.EscapeDataString(share_code));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Collection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rename video collections
		/// This endpoint sets a new name for a collection.
		/// RenameVideoCollection v2/videos/collections/{id}
		/// </summary>
		/// <param name="id">The ID of the collection to rename</param>
		/// <param name="requestBody">The new name for the collection</param>
		public async Task RenameVideoCollectionAsync(string id, CollectionUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove videos from collections
		/// This endpoint removes one or more videos from a collection.
		/// DeleteVideoCollectionItems v2/videos/collections/{id}/items
		/// </summary>
		/// <param name="id">The ID of the Collection from which items will be deleted</param>
		/// <param name="item_id">One or more video IDs to remove from the collection</param>
		public async Task DeleteVideoCollectionItemsAsync(string id, string[] item_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&"+string.Join("&", item_id.Select(z => $"item_id={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the contents of video collections
		/// This endpoint lists the IDs of videos in a collection and the date that each was added.
		/// GetVideoCollectionItems v2/videos/collections/{id}/items
		/// </summary>
		/// <param name="id">Collection ID</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 150
		// </param>
		/// <param name="share_code">Code to retrieve the contents of a shared collection</param>
		/// <param name="sort">Sort order</param>
		/// <returns>OK</returns>
		public async Task<CollectionItemDataList> GetVideoCollectionItemsAsync(string id, int page, int per_page, string share_code, GetTrackCollectionItemsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items&page="+page+"&per_page="+per_page+"&share_code=" + (share_code==null? "" : System.Uri.EscapeDataString(share_code))+"&sort=" + sort;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CollectionItemDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add videos to collections
		/// This endpoint adds one or more videos to a collection by video IDs.
		/// AddVideoCollectionItems v2/videos/collections/{id}/items
		/// </summary>
		/// <param name="id">The ID of the collection to which items should be added</param>
		/// <param name="requestBody">Array of video IDs to add to the collection</param>
		public async Task AddVideoCollectionItemsAsync(string id, CollectionItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/collections/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/items";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List video licenses
		/// This endpoint lists existing licenses.
		/// GetVideoLicenseList v2/videos/licenses
		/// </summary>
		/// <param name="video_id">Show licenses for the specified video ID</param>
		/// <param name="license">Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 200
		// </param>
		/// <param name="sort">Sort by oldest or newest videos first</param>
		/// <param name="username">Filter licenses by username of licensee</param>
		/// <param name="start_date">Show licenses created on or after the specified date</param>
		/// <param name="end_date">Show licenses created before the specified date</param>
		/// <param name="download_availability">Filter licenses by download availability</param>
		/// <param name="team_history">Set to true to see license history for all members of your team.</param>
		/// <returns>OK</returns>
		public async Task<DownloadHistoryDataList> GetVideoLicenseListAsync(string video_id, string license, int page, int per_page, GetTrackCollectionItemsSort sort, string username, System.DateTimeOffset start_date, System.DateTimeOffset end_date, GetTrackLicenseListDownload_availability download_availability, bool team_history, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/licenses?video_id=" + (video_id==null? "" : System.Uri.EscapeDataString(video_id))+"&license=" + (license==null? "" : System.Uri.EscapeDataString(license))+"&page="+page+"&per_page="+per_page+"&sort=" + sort+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&start_date=" + start_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_date=" + end_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&download_availability=" + download_availability+"&team_history="+team_history;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DownloadHistoryDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// License videos
		/// This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
		/// LicenseVideos v2/videos/licenses
		/// </summary>
		/// <param name="subscription_id">The subscription ID to use for licensing</param>
		/// <param name="size">The size of the video to license</param>
		/// <param name="search_id">The Search ID that led to this licensing event</param>
		/// <param name="requestBody">List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters</param>
		/// <returns>OK</returns>
		public async Task<LicenseVideoResultDataList> LicenseVideosAsync(string subscription_id, LicenseVideosSize size, string search_id, LicenseVideoRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/licenses?subscription_id=" + (subscription_id==null? "" : System.Uri.EscapeDataString(subscription_id))+"&size=" + size+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LicenseVideoResultDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download videos
		/// This endpoint redownloads videos that you have already received a license for.
		/// DownloadVideos v2/videos/licenses/{id}/downloads
		/// </summary>
		/// <param name="id">The license ID of the item to (re)download. The download links in the response are valid for 8 hours.</param>
		/// <param name="requestBody">Information about the videos to redownload</param>
		/// <returns>OK</returns>
		public async Task<Url> DownloadVideosAsync(string id, RedownloadVideo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/licenses/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/downloads";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Url>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search for videos
		/// This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
		/// SearchVideos v2/videos/search
		/// </summary>
		/// <param name="added_date">Show videos added on the specified date</param>
		/// <param name="added_date_start">Show videos added on or after the specified date</param>
		/// <param name="added_date_end">Show videos added before the specified date</param>
		/// <param name="aspect_ratio">Show videos with the specified aspect ratio</param>
		/// <param name="category">Show videos with the specified Shutterstock-defined category; specify a category name or ID</param>
		/// <param name="contributor">Show videos with the specified artist names or IDs</param>
		/// <param name="contributor_country">Show videos from contributors in one or more specified countries</param>
		/// <param name="duration">(Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds</param>
		/// <param name="duration_from">Show videos with the specified duration or longer in seconds</param>
		/// <param name="duration_to">Show videos with the specified duration or shorter in seconds</param>
		/// <param name="fps">(Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second</param>
		/// <param name="fps_from">Show videos with the specified frames per second or more</param>
		/// <param name="fps_to">Show videos with the specified frames per second or fewer</param>
		/// <param name="keyword_safe_search">Hide results with potentially unsafe keywords</param>
		/// <param name="language">Set query and result language (uses Accept-Language header if not set)</param>
		/// <param name="license">Show only videos with the specified license or licenses</param>
		/// <param name="model">Show videos with each of the specified models</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 0
		/// Maximum: 500
		// </param>
		/// <param name="people_age">Show videos that feature people of the specified age range</param>
		/// <param name="people_ethnicity">Show videos with people of the specified ethnicities</param>
		/// <param name="people_gender">Show videos with people with the specified gender</param>
		/// <param name="people_number">Show videos with the specified number of people
		/// Minimum: 0
		/// Maximum: 4
		// </param>
		/// <param name="people_model_released">Show only videos of people with a signed model release</param>
		/// <param name="query">One or more search terms separated by spaces; you can use NOT to filter out videos that match a term</param>
		/// <param name="resolution">Show videos with the specified resolution</param>
		/// <param name="safe">Enable or disable safe search</param>
		/// <param name="sort">Sort by one of these categories</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <returns>OK</returns>
		public async Task<VideoSearchResults> SearchVideosAsync(
					System.DateOnly added_date, 
					System.DateOnly added_date_start, 
					System.DateOnly added_date_end, 
					SearchVideosAspect_ratio aspect_ratio, 
					string category, 
					string[] contributor, 
					string[] contributor_country, 
					int duration, 
					int duration_from, 
					int duration_to, 
					double fps, 
					double fps_from, 
					double fps_to, 
					bool keyword_safe_search, 
					Language language, 
					string[] license, 
					string[] model, 
					int page, 
					int per_page, 
					SearchVideosPeople_age people_age, 
					string[] people_ethnicity, 
					SearchImagePeople_gender people_gender, 
					int people_number, 
					bool people_model_released, 
					string query, 
					SearchVideosResolution resolution, 
					bool safe, 
					SearchImageSort sort, 
					SearchImageView view, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/search?added_date="+added_date+"&added_date_start="+added_date_start+"&added_date_end="+added_date_end+"&aspect_ratio=" + aspect_ratio+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&"+string.Join("&", contributor.Select(z => $"contributor={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_country.Select(z => $"contributor_country={System.Uri.EscapeDataString(z.ToString())}"))+"&duration="+duration+"&duration_from="+duration_from+"&duration_to="+duration_to+"&fps="+fps+"&fps_from="+fps_from+"&fps_to="+fps_to+"&keyword_safe_search="+keyword_safe_search+"&language=" + language+"&"+string.Join("&", license.Select(z => $"license={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", model.Select(z => $"model={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&per_page="+per_page+"&people_age=" + people_age+"&"+string.Join("&", people_ethnicity.Select(z => $"people_ethnicity={System.Uri.EscapeDataString(z.ToString())}"))+"&people_gender=" + people_gender+"&people_number="+people_number+"&people_model_released="+people_model_released+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&resolution=" + resolution+"&safe="+safe+"&sort=" + sort+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VideoSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get suggestions for a search term
		/// This endpoint provides autocomplete suggestions for partial search terms.
		/// GetVideoSuggestions v2/videos/search/suggestions
		/// </summary>
		/// <param name="query">Search term for which you want keyword suggestions</param>
		/// <param name="limit">Limit the number of the suggestions
		/// Minimum: 1
		/// Maximum: 25
		// </param>
		/// <returns>OK</returns>
		public async Task<Suggestions> GetVideoSuggestionsAsync(string query, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/search/suggestions?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Suggestions>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List updated videos
		/// This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
		/// GetUpdatedVideos v2/videos/updated
		/// </summary>
		/// <param name="start_date">Show videos updated on or after the specified date</param>
		/// <param name="end_date">Show videos updated before the specified date</param>
		/// <param name="interval">Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="sort">Sort by oldest or newest videos first</param>
		/// <returns>OK</returns>
		public async Task<UpdatedMediaDataList> GetUpdatedVideosAsync(System.DateOnly start_date, System.DateOnly end_date, string interval, int page, int per_page, GetTrackCollectionItemsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/updated?start_date="+start_date+"&end_date="+end_date+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&page="+page+"&per_page="+per_page+"&sort=" + sort;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdatedMediaDataList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about videos
		/// This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
		/// GetVideo v2/videos/{id}
		/// </summary>
		/// <param name="id">Video ID</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <param name="search_id">The ID of the search that is related to this request</param>
		/// <returns>OK</returns>
		public async Task<Video> GetVideoAsync(string id, Language language, SearchImageView view, string search_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&language=" + language+"&view=" + view+"&search_id=" + (search_id==null? "" : System.Uri.EscapeDataString(search_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Video>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List similar videos
		/// This endpoint searches for videos that are similar to a video that you specify.
		/// FindSimilarVideos v2/videos/{id}/similar
		/// </summary>
		/// <param name="id">The ID of a video for which similar videos should be returned</param>
		/// <param name="language">Language for the keywords and categories in the response</param>
		/// <param name="page">Page number
		/// Minimum: 1
		// </param>
		/// <param name="per_page">Number of results per page
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="view">Amount of detail to render in the response</param>
		/// <returns>OK</returns>
		public async Task<VideoSearchResults> FindSimilarVideosAsync(string id, Language language, int page, int per_page, SearchImageView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/videos/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/similar&language=" + language+"&page="+page+"&per_page="+per_page+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VideoSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum GetTrackCollectionItemsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oldest = 1,
	}
	
	public enum GetTrackLicenseListDownload_availability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		downloadable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		non_downloadable = 2,
	}
	
	public enum SearchTracksSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		score = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ranking_all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		artist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		title = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bpm = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		freshness = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duration = 6,
	}
	
	public enum SearchTracksSort_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum SearchTracksLibrary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shutterstock = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier = 1,
	}
	
	public enum BulkSearchImagesPeople_age
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		infants = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		children = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teenagers = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20s")]
		_20s = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30s")]
		_30s = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40s")]
		_40s = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50s")]
		_50s = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60s")]
		_60s = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		older = 8,
	}
	
	public enum GetContributorCollectionsListSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last_updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		item_count = 2,
	}
	
	public enum SearchEditorialImagesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oldest = 2,
	}
	
	public enum GetUpdatedEditorialImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		edit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		addition = 1,
	}
	
	public enum SearchEditorialVideosResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4k")]
		_4k = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high_definition = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard_definition = 2,
	}
	
	public enum GetFeaturedImageCollectionListEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		share_url = 0,
	}
	
	public enum GetFeaturedImageCollectionListAsset_hint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1x")]
		_1x = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2x")]
		_2x = 1,
	}
	
	public enum GetFeaturedImageCollectionAsset_hint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1x")]
		_1x = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2x")]
		_2x = 1,
	}
	
	public enum LicenseImagesFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eps = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jpg = 1,
	}
	
	public enum LicenseImagesSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		huge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vector = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 4,
	}
	
	public enum SearchImagesAi_industry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		automotive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cpg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthcare = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		retail = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		technology = 5,
	}
	
	public enum SearchImagesAi_objective
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		awareness = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		traffic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		conversions = 2,
	}
	
	public enum SearchImagesPeople_age
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		infants = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		children = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teenagers = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20s")]
		_20s = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30s")]
		_30s = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40s")]
		_40s = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50s")]
		_50s = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60s")]
		_60s = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		older = 8,
	}
	
	public class CreateAccessTokenPostBody
	{
		
		/// <summary>
		/// Client ID (Consumer Key) of your application
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Client Secret (Consumer Secret) of your application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		/// <summary>
		/// Response code from the /oauth/authorize flow; required if grant_type=authorization_code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.Boolean> Expires { get; set; }
		
		/// <summary>
		/// Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grant_type")]
		public CreateAccessTokenPostBodyGrant_type Grant_type { get; set; }
		
		/// <summary>
		/// User type to be authorized (usually 'customer')
		/// </summary>
		[System.ComponentModel.DefaultValue(AccessTokenDetailsRealm.customer)]
		[System.Runtime.Serialization.DataMember(Name="realm")]
		public AccessTokenDetailsRealm Realm { get; set; } = AccessTokenDetailsRealm.customer;
		
		/// <summary>
		/// Pass this along with grant_type=refresh_token to get a fresh access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateAccessTokenPostBodyGrant_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authorization_code = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		client_credentials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		refresh_token = 2,
	}
	
	public enum AuthorizeResponse_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		code = 0,
	}
	
	public enum GetSfxListDetailsLibrary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shutterstock = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premier = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		premiumbeat = 2,
	}
	
	public enum SearchSFXSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		popular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		random = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oldest = 4,
	}
	
	public enum LicenseVideosSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sd = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hd = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4k")]
		_4k = 3,
	}
	
	public enum SearchVideosAspect_ratio
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4_3")]
		_4_3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16_9")]
		_16_9 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nonstandard = 2,
	}
	
	public enum SearchVideosPeople_age
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		infants = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		children = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teenagers = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20s")]
		_20s = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30s")]
		_30s = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40s")]
		_40s = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50s")]
		_50s = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60s")]
		_60s = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		older = 8,
	}
	
	public enum SearchVideosResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4k")]
		_4k = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard_definition = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high_definition = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
