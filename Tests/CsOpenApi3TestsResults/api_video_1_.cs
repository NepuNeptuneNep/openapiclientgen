//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Access_token
	{
		
		/// <summary>
		/// The access token containing security credentials allowing you to acccess the API. The token lasts for one hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token1 { get; set; }
		
		/// <summary>
		/// Lists the time in seconds when your access token expires. It lasts for one hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		/// <summary>
		/// A token you can use to get the next access token when your current access token expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// The type of token you have.
		/// </summary>
		[System.ComponentModel.DefaultValue("bearer")]
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; } = "bearer";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Deprecated. Whether you are using your production or sandbox API key will impact what environment is displayed here, as well as stats and features information. If you use your sandbox key, the environment is "sandbox." If you use your production key, the environment is "production."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		/// <summary>
		/// Deprecated. What features are enabled for your account. Choices include: app.dynamic_metadata - the ability to dynamically tag videos to better segment and understand your audiences, app.event_log - the ability to create and retrieve a log detailing how your videos were interacted with, player.white_label - the ability to customise your player, stats.player_events - the ability to see statistics about how your player is being used, transcode.mp4_support - the ability to reformat content into mp4 using the H264 codec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public string[] Features { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public AccountQuota Quota { get; set; }
	}
	
	public class AccountQuota
	{
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaRemaining")]
		public System.Nullable<System.Double> QuotaRemaining { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaTotal")]
		public System.Nullable<System.Double> QuotaTotal { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaUsed")]
		public System.Nullable<System.Double> QuotaUsed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Authenticate_payload
	{
		
		/// <summary>
		/// Your account API key. You can use your sandbox API key, or you can use your production API key.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bad_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="problems")]
		public Bad_request[] Problems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bytes_range
	{
		
		/// <summary>
		/// The starting point for the range of bytes for a chunk of a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.Int32> From { get; set; }
		
		/// <summary>
		/// The ending point for the range of bytes for a chunk of a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.Int32> To { get; set; }
		
		/// <summary>
		/// The total number of bytes in the provided range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Captions_list_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Subtitle[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subtitle
	{
		
		/// <summary>
		/// Whether you will have subtitles or not. True for yes you will have subtitles, false for no you will not have subtitles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="srclang")]
		public string Srclang { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pagination
	{
		
		/// <summary>
		/// The current page index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPage")]
		public System.Nullable<System.Int32> CurrentPage { get; set; }
		
		/// <summary>
		/// The number of items on the current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPageItems")]
		public System.Nullable<System.Int32> CurrentPageItems { get; set; }
		
		/// <summary>
		/// Total number of items that exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsTotal")]
		public System.Nullable<System.Int32> ItemsTotal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Pagination_link[] Links { get; set; }
		
		/// <summary>
		/// Maximum number of item per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Number of items listed in the current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagesTotal")]
		public System.Nullable<System.Int32> PagesTotal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pagination_link
	{
		
		/// <summary>
		/// Pattern: ^self$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rel")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^self$")]
		public string Rel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Captions_update_payload
	{
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Captions_upload_payload
	{
		
		/// <summary>
		/// The video text track (VTT) you want to upload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Chapter
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The link to your VTT file, which contains your chapters information for the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="src")]
		public string Src { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Chapters_list_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Chapter[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Chapters_update_payload
	{
		
		/// <summary>
		/// The VTT file describing the chapters you want to upload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream
	{
		
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public Live_stream_assets Assets { get; set; }
		
		/// <summary>
		/// Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="broadcasting")]
		public System.Nullable<System.Boolean> Broadcasting { get; set; }
		
		/// <summary>
		/// The unique identifier for the live stream. Live stream IDs begin with "li."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveStreamId")]
		public string LiveStreamId { get; set; }
		
		/// <summary>
		/// The name of your live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier for the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// BETA FEATURE Please limit all public = false ("private") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// Whether you are recording or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public System.Nullable<System.Boolean> Record { get; set; }
		
		/// <summary>
		/// The unique, private stream key that you use to begin streaming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamKey")]
		public string StreamKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_assets
	{
		
		/// <summary>
		/// The http live streaming (HLS) link for your live video stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hls")]
		public string Hls { get; set; }
		
		/// <summary>
		/// The embed code for the iframe containing your live video stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iframe")]
		public string Iframe { get; set; }
		
		/// <summary>
		/// A link to the video player that is playing your live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="player")]
		public string Player { get; set; }
		
		/// <summary>
		/// A link to the thumbnail for your video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_create_payload
	{
		
		/// <summary>
		/// Add a name for your live stream here.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier for the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// BETA FEATURE Please limit all public = false ("private") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// Whether you are recording or not. True for record, false for not record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public System.Nullable<System.Boolean> Record { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_list_response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Live_stream[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_session
	{
		
		/// <summary>
		/// What kind of browser the viewer is using for the live stream session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client")]
		public Live_stream_session_client Client { get; set; }
		
		/// <summary>
		/// What type of device the user is on when in the live stream session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Live_stream_session_device Device { get; set; }
		
		/// <summary>
		/// The location of the viewer of the live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Live_stream_session_location Location { get; set; }
		
		/// <summary>
		/// The operating system the viewer is on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="os")]
		public Video_session_os Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referrer")]
		public Live_stream_session_referrer Referrer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public Live_stream_session_session Session { get; set; }
	}
	
	/// <summary>
	/// What kind of browser the viewer is using for the live stream session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_session_client
	{
		
		/// <summary>
		/// The name of the browser used to view the live stream session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of client used to view the live stream session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The version of the browser used to view the live stream session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// What type of device the user is on when in the live stream session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_session_device
	{
		
		/// <summary>
		/// The specific model of the device, if known.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// What the type is like desktop, laptop, mobile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// If known, what the brand of the device is, like Apple, Dell, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	/// <summary>
	/// The location of the viewer of the live stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_session_location
	{
		
		/// <summary>
		/// The city of the viewer of the live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country of the viewer of the live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
	}
	
	/// <summary>
	/// The operating system the viewer is on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_session_os
	{
		
		/// <summary>
		/// The name of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The nickname for the operating system, often representing the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortname")]
		public string Shortname { get; set; }
		
		/// <summary>
		/// The version of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_session_referrer
	{
		
		/// <summary>
		/// The type of search that brought the viewer to the live stream. Organic would be they found it on their own, paid would be they found it via an advertisement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		/// <summary>
		/// What term they searched for that led them to the live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchTerm")]
		public string SearchTerm { get; set; }
		
		/// <summary>
		/// Where the viewer came from to see the live stream (usually where they searched from).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The website the viewer of the live stream was referred to in order to view the live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_session_session
	{
		
		/// <summary>
		/// When the session ended, with the date and time presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endedAt")]
		public System.Nullable<System.DateTimeOffset> EndedAt { get; set; }
		
		/// <summary>
		/// When the session started, with the date and time presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadedAt")]
		public System.Nullable<System.DateTimeOffset> LoadedAt { get; set; }
		
		/// <summary>
		/// A unique identifier for your session. You can use this to track what happens during a specific session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_thumbnail_upload_payload
	{
		
		/// <summary>
		/// The image to be added as a thumbnail.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Live_stream_update_payload
	{
		
		/// <summary>
		/// The name you want to use for your live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique ID for the player associated with a live stream that you want to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// BETA FEATURE Please limit all public = false ("private") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// Use this to indicate whether you want the recording on or off. On is true, off is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public System.Nullable<System.Boolean> Record { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		/// <summary>
		/// The constant that defines the data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// A variable which belongs to the data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Not_found
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Player : Playerinput
	{
		
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public PlayerAssets Assets { get; set; }
		
		/// <summary>
		/// When the player was created, presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkActive")]
		public string LinkActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeAspect")]
		public string ShapeAspect { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeBackgroundBottom")]
		public string ShapeBackgroundBottom { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeBackgroundTop")]
		public string ShapeBackgroundTop { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeMargin")]
		public System.Nullable<System.Int32> ShapeMargin { get; set; }
		
		/// <summary>
		/// Deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeRadius")]
		public System.Nullable<System.Int32> ShapeRadius { get; set; }
		
		/// <summary>
		/// When the player was last updated, presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	public class PlayerAssets
	{
		
		/// <summary>
		/// The path to the file containing your logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// The name of the file containing the logo you want to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Player_session_event
	{
		
		[System.Runtime.Serialization.DataMember(Name="at")]
		public System.Nullable<System.Int32> At { get; set; }
		
		/// <summary>
		/// When an event occurred, presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emittedAt")]
		public System.Nullable<System.DateTimeOffset> EmittedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.Int32> From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.Int32> To { get; set; }
		
		/// <summary>
		/// Possible values are: ready, play, pause, resume, seek.backward, seek.forward, end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayerCreationPayload
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayerUpdatePayload
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Playerinput
	{
		
		/// <summary>
		/// RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundBottom")]
		public string BackgroundBottom { get; set; }
		
		/// <summary>
		/// RGBA color for title text. Default: rgba(255, 255, 255, 1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundText")]
		public string BackgroundText { get; set; }
		
		/// <summary>
		/// RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundTop")]
		public string BackgroundTop { get; set; }
		
		/// <summary>
		/// enable/disable player SDK access. Default: true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableApi")]
		public System.Nullable<System.Boolean> EnableApi { get; set; }
		
		/// <summary>
		/// enable/disable player controls. Default: true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableControls")]
		public System.Nullable<System.Boolean> EnableControls { get; set; }
		
		/// <summary>
		/// enable/disable player autoplay. Default: false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceAutoplay")]
		public System.Nullable<System.Boolean> ForceAutoplay { get; set; }
		
		/// <summary>
		/// enable/disable looping. Default: false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceLoop")]
		public System.Nullable<System.Boolean> ForceLoop { get; set; }
		
		/// <summary>
		/// enable/disable title. Default: false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideTitle")]
		public System.Nullable<System.Boolean> HideTitle { get; set; }
		
		/// <summary>
		/// RGBA color for all controls. Default: rgba(255, 255, 255, 1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkHover")]
		public string LinkHover { get; set; }
		
		/// <summary>
		/// RGBA color for timer text. Default: rgba(255, 255, 255, 1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackBackground")]
		public string TrackBackground { get; set; }
		
		/// <summary>
		/// RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackPlayed")]
		public string TrackPlayed { get; set; }
		
		/// <summary>
		/// RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackUnplayed")]
		public string TrackUnplayed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Players_list_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Player[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Players_upload_logo_payload
	{
		
		/// <summary>
		/// The name of the file you want to use for your logo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// The path to the file you want to upload and use as a logo.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Quality
	{
		
		/// <summary>
		/// The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quality")]
		public System.Nullable<QualityQuality1> Quality1 { get; set; }
		
		/// <summary>
		/// The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<QualityStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QualityQuality1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="240p")]
		_240p = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="360p")]
		_360p = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="480p")]
		_480p = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="720p")]
		_720p = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1080p")]
		_1080p = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2160p")]
		_2160p = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QualityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waiting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		encoding = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		encoded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Raw_statistics_list_live_stream_analytics_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Live_stream_session[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Raw_statistics_list_player_session_events_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Player_session_event[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Raw_statistics_list_sessions_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Video_session[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_session
	{
		
		/// <summary>
		/// What kind of browser the viewer is using for the video session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client")]
		public Video_session_client Client { get; set; }
		
		/// <summary>
		/// What type of device the user is on when in the video session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Video_session_device Device { get; set; }
		
		/// <summary>
		/// The location of the viewer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Video_session_location Location { get; set; }
		
		/// <summary>
		/// The operating system the viewer is on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="os")]
		public Video_session_os Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referrer")]
		public Video_session_referrer Referrer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public Video_session_session Session { get; set; }
	}
	
	/// <summary>
	/// What kind of browser the viewer is using for the video session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_session_client
	{
		
		/// <summary>
		/// The name of the browser used to view the video session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of client used to view the video session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The version of the browser used to view the video session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// What type of device the user is on when in the video session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_session_device
	{
		
		/// <summary>
		/// The specific model of the device, if known.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// What the type is like desktop, laptop, mobile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// If known, what the brand of the device is, like Apple, Dell, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	/// <summary>
	/// The location of the viewer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_session_location
	{
		
		/// <summary>
		/// The city of the viewer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country of the viewer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_session_referrer
	{
		
		/// <summary>
		/// How they arrived at the site, for example organic or paid. Organic meaning they found it themselves and paid meaning they followed a link from an advertisement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		/// <summary>
		/// The search term they typed to arrive at the video session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchTerm")]
		public string SearchTerm { get; set; }
		
		/// <summary>
		/// The source the referrer came from to the video session. For example if they searched through google to find the stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The link the viewer used to reach the video session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_session_session
	{
		
		/// <summary>
		/// When the video session ended, presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endedAt")]
		public System.Nullable<System.DateTimeOffset> EndedAt { get; set; }
		
		/// <summary>
		/// When the video session started, presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadedAt")]
		public System.Nullable<System.DateTimeOffset> LoadedAt { get; set; }
		
		/// <summary>
		/// The unique identifier for the session that you can use to track what happens during it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Refresh_token_payload
	{
		
		/// <summary>
		/// The refresh token is either the first refresh token you received when you authenticated with the auth/api-key endpoint, or it's the refresh token from the last time you used the auth/refresh endpoint. Place this in the body of your request to obtain a new access token (which is valid for an hour) and a new refresh token.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Token_create_payload
	{
		
		/// <summary>
		/// Time in seconds that the token will be active. A value of 0 means that the token has no exipration date. The default is to have no expiration.
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Token_list_response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Upload_token[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Upload_token
	{
		
		/// <summary>
		/// When the token was created, displayed in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// When the token expires, displayed in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.Nullable<System.DateTimeOffset> ExpiresAt { get; set; }
		
		/// <summary>
		/// The unique identifier for the token you will use to authenticate an upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Time-to-live - how long the upload token is valid for.
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Token_upload_payload
	{
		
		/// <summary>
		/// The path to the video you want to upload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// The video id returned by the first call to this endpoint in a large video upload scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video
	{
		
		/// <summary>
		/// Collection of details about the video object that you can use to work with the video object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public VideoAssets Assets { get; set; }
		
		/// <summary>
		/// A description for the video content.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata[] Metadata { get; set; }
		
		/// <summary>
		/// This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mp4Support")]
		public System.Nullable<System.Boolean> Mp4Support { get; set; }
		
		/// <summary>
		/// Defines if video is panoramic.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="panoramic")]
		public System.Nullable<System.Boolean> Panoramic { get; set; }
		
		/// <summary>
		/// The id of the player that will be applied on the video.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public string PublishedAt { get; set; }
		
		/// <summary>
		/// Source information about the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public VideoSource Source { get; set; }
		
		/// <summary>
		/// One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces. 
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The title of the video content.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The unique identifier of the video object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoId")]
		public string VideoId { get; set; }
	}
	
	/// <summary>
	/// Collection of details about the video object that you can use to work with the video object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoAssets
	{
		
		/// <summary>
		/// This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hls")]
		public string Hls { get; set; }
		
		/// <summary>
		/// Code to use video from a third party website
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iframe")]
		public string Iframe { get; set; }
		
		/// <summary>
		/// Available only if mp4Support is enabled. Raw mp4 url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mp4")]
		public string Mp4 { get; set; }
		
		/// <summary>
		/// Raw url of the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="player")]
		public string Player { get; set; }
		
		/// <summary>
		/// Poster of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
	}
	
	/// <summary>
	/// Source information about the video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoSource
	{
		
		/// <summary>
		/// This appears if the video is from a Live Record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveStream")]
		public Video_source_live_stream LiveStream { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The URL where the video is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// This appears if the video is from a Live Record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_source_live_stream
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Video_source_live_stream_link[] Links { get; set; }
		
		/// <summary>
		/// The unique identifier for the live stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveStreamId")]
		public string LiveStreamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_source_live_stream_link
	{
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_create_payload
	{
		
		/// <summary>
		/// A brief description of your video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata[] Metadata { get; set; }
		
		/// <summary>
		/// Enables mp4 version in addition to streamed version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mp4Support")]
		public System.Nullable<System.Boolean> Mp4Support { get; set; }
		
		/// <summary>
		/// Indicates if your video is a 360/immersive video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="panoramic")]
		public System.Nullable<System.Boolean> Panoramic { get; set; }
		
		/// <summary>
		/// The unique identification number for your video player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The API uses ISO-8601 format for time, and includes 3 places for milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedAt")]
		public System.Nullable<System.DateTimeOffset> PublishedAt { get; set; }
		
		/// <summary>
		/// If you add a video already on the web, this is where you enter the url for the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// A list of tags you want to use to describe your video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The title of your new video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_thumbnail_pick_payload
	{
		
		/// <summary>
		/// Frame in video to be used as a placeholder before the video plays. 
		///Example: '"00:01:00.000" for 1 minute into the video.'
		///Valid Patterns: 
		///"hh:mm:ss.ms"
		///"hh:mm:ss:frameNumber"
		///"124" (integer value is reported as seconds) 
		///If selection is out of range, "00:00:00.00" will be chosen.
		/// Required
		/// Pattern: 00:00:00.00
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timecode")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"00:00:00.00")]
		public string Timecode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_thumbnail_upload_payload
	{
		
		/// <summary>
		/// The image to be added as a thumbnail.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_update_payload
	{
		
		/// <summary>
		/// A brief description of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata[] Metadata { get; set; }
		
		/// <summary>
		/// Whether the player supports the mp4 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mp4Support")]
		public System.Nullable<System.Boolean> Mp4Support { get; set; }
		
		/// <summary>
		/// Whether the video is a 360 degree or immersive video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="panoramic")]
		public System.Nullable<System.Boolean> Panoramic { get; set; }
		
		/// <summary>
		/// The unique ID for the player you want to associate with your video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// The title you want to use for your video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Video_upload_payload
	{
		
		/// <summary>
		/// The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the "/videos" endpoint and add the "source" parameter when you create a new video.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Videos_list_response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Video[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Videostatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Videostatus_encoding Encoding { get; set; }
		
		/// <summary>
		/// Details about the capturing, transferring, and storing of your video for use immediately or in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingest")]
		public Videostatus_ingest Ingest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Videostatus_encoding
	{
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Videostatus_encoding_metadata Metadata { get; set; }
		
		/// <summary>
		/// Whether the video is playable or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playable")]
		public System.Nullable<System.Boolean> Playable { get; set; }
		
		/// <summary>
		/// Available qualities the video can be viewed in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qualities")]
		public Quality[] Qualities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Videostatus_encoding_metadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="aspectRatio")]
		public string AspectRatio { get; set; }
		
		/// <summary>
		/// The method used to compress and decompress digital audio for your video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioCodec")]
		public string AudioCodec { get; set; }
		
		/// <summary>
		/// The number of bits processed per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitrate")]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		/// <summary>
		/// The length of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="framerate")]
		public System.Nullable<System.Int32> Framerate { get; set; }
		
		/// <summary>
		/// The height of the video in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplerate")]
		public System.Nullable<System.Int32> Samplerate { get; set; }
		
		/// <summary>
		/// The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoCodec")]
		public string VideoCodec { get; set; }
		
		/// <summary>
		/// The width of the video in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Details about the capturing, transferring, and storing of your video for use immediately or in the future.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Videostatus_ingest
	{
		
		/// <summary>
		/// The size of your file in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesize")]
		public System.Nullable<System.Int32> Filesize { get; set; }
		
		/// <summary>
		/// The total number of bytes received, listed for each chunk of the upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivedBytes")]
		public Bytes_range[] ReceivedBytes { get; set; }
		
		/// <summary>
		/// There are three possible ingest statuses. missing - you are missing information required to ingest the video. uploading - the video is in the process of being uploaded. uploaded - the video is ready for use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Videostatus_ingestStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Videostatus_ingestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		missing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploading = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uploaded = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook
	{
		
		/// <summary>
		/// When an webhook was created, presented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A list of events that will trigger the webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public string[] Events { get; set; }
		
		/// <summary>
		/// URL of the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Unique identifier of the webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public string WebhookId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhooks_create_payload
	{
		
		/// <summary>
		/// A list of the webhooks that you are subscribing to. There are Currently four webhook options:
		///* ```video.encoding.quality.completed```  When a new video is uploaded into your account, it will be encoded into several different HLS sizes/bitrates.  When each version is encoded, your webhook will get a notification.  It will look like ```{ \"type\": \"video.encoding.quality.completed\", \"emittedAt\": \"2021-01-29T16:46:25.217+01:00\", \"videoId\": \"viXXXXXXXX\", \"encoding\": \"hls\", \"quality\": \"720p\"} ```. This request says that the 720p HLS encoding was completed.
		///* ```live-stream.broadcast.started```  When a livestream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.
		///* ```live-stream.broadcast.ended```  This event fores when the livestream has finished broadcasting, and the broadcasting parameter flips from false to true.
		///* ```video.source.recorded```  This event is similar to ```video.encoding.quality.completed```, but tells you if a livestream has been recorded as a VOD.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public string[] Events { get; set; }
		
		/// <summary>
		/// The the url to which HTTP notifications are sent. It could be any http or https URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhooks_list_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Webhook[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Show account
		/// Deprecated. Authenticate and get a token, then you can use the bearer token here to retrieve details about your account.
		/// GET_account account
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Account> GET_accountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List live stream player sessions
		/// GET_analytics_live_streams_liveStreamId analytics/live-streams/{liveStreamId}
		/// </summary>
		/// <param name="liveStreamId">The unique identifier for the live stream you want to retrieve analytics for.</param>
		/// <param name="period">Period must have one of the following formats: 
		///- For a day : "2018-01-01",
		///- For a week: "2018-W01", 
		///- For a month: "2018-01"
		///- For a year: "2018"
		///For a range period: 
		///-  Date range: "2018-01-01/2018-01-15"
		///</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Raw_statistics_list_live_stream_analytics_response> GET_analytics_live_streams_liveStreamIdAsync(string liveStreamId, string period, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "analytics/live-streams/"+ (liveStreamId==null? "" : System.Uri.EscapeDataString(liveStreamId))+"&period=" + (period==null? "" : System.Uri.EscapeDataString(period))+"&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Raw_statistics_list_live_stream_analytics_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List player session events
		/// Useful to track and measure video's engagement.
		/// GET_analytics_sessions_sessionId_events analytics/sessions/{sessionId}/events
		/// </summary>
		/// <param name="sessionId">A unique identifier you can use to reference and track a session with.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Raw_statistics_list_player_session_events_response> GET_analytics_sessions_sessionId_eventsAsync(string sessionId, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "analytics/sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/events&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Raw_statistics_list_player_session_events_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List video player sessions
		/// Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
		/// GET_analytics_videos_videoId analytics/videos/{videoId}
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want to retrieve session information for.</param>
		/// <param name="period">Period must have one of the following formats: 
		///- For a day : 2018-01-01,
		///- For a week: 2018-W01, 
		///- For a month: 2018-01
		///- For a year: 2018
		///For a range period: 
		///-  Date range: 2018-01-01/2018-01-15
		///</param>
		/// <param name="metadata">Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Raw_statistics_list_sessions_response> GET_analytics_videos_videoIdAsync(string videoId, string period, string[] metadata, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "analytics/videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"&period=" + (period==null? "" : System.Uri.EscapeDataString(period))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Raw_statistics_list_sessions_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Authenticate
		/// To get started, submit your API key in the body of your request. api.video returns an access token that is valid for one hour (3600 seconds). A refresh token is also returned. View a [tutorial](https://api.video/blog/tutorials/authentication-tutorial) on authentication.
		/// All tutorials using the [authentication endpoint](https://api.video/blog/endpoints/authenticate)
		/// POST_auth_api_key auth/api-key
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Access_token> POST_auth_api_keyAsync(Authenticate_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/api-key";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Access_token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Refresh token
		/// Use the refresh endpoint with the refresh token you received when you first authenticated using the api-key endpoint. Send the refresh token in the body of your request. The api.video API returns a new access token that is valid for one hour (3600 seconds) and a new refresh token.
		/// 
		/// POST_auth_refresh auth/refresh
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Access_token> POST_auth_refreshAsync(Refresh_token_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/refresh";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Access_token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all live streams
		/// With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.
		/// GET_live_streams live-streams
		/// </summary>
		/// <param name="streamKey">The unique stream key that allows you to stream videos.</param>
		/// <param name="name">You can filter live streams by their name or a part of their name.</param>
		/// <param name="sortBy">Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format.</param>
		/// <param name="sortOrder">Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Live_stream_list_response> GET_live_streamsAsync(string streamKey, string name, string sortBy, GET_live_streamsSortOrder sortOrder, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "live-streams?streamKey=" + (streamKey==null? "" : System.Uri.EscapeDataString(streamKey))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortOrder=" + sortOrder+"&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Live_stream_list_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create live stream
		/// A live stream will give you the 'connection point' to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey}
		/// Tutorials that [create live streams](https://api.video/blog/endpoints/live-create).
		/// POST_live_streams live-streams
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Live_stream> POST_live_streamsAsync(Live_stream_create_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "live-streams";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Live_stream>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a live stream
		/// DELETE_live_streams_liveStreamId live-streams/{liveStreamId}
		/// </summary>
		/// <param name="liveStreamId">The unique ID for the live stream that you want to remove.</param>
		public async Task DELETE_live_streams_liveStreamIdAsync(string liveStreamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "live-streams/"+ (liveStreamId==null? "" : System.Uri.EscapeDataString(liveStreamId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show live stream
		/// Supply a LivestreamId, and you'll get all the details for streaming into, and watching the livestream. Tutorials that use the [show livestream endpoint](https://api.video/blog/endpoints/live-stream-status).
		/// GET_live_streams_liveStreamId live-streams/{liveStreamId}
		/// </summary>
		/// <param name="liveStreamId">The unique ID for the live stream you want to watch.</param>
		/// <returns>Success</returns>
		public async Task<Live_stream> GET_live_streams_liveStreamIdAsync(string liveStreamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "live-streams/"+ (liveStreamId==null? "" : System.Uri.EscapeDataString(liveStreamId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Live_stream>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a live stream
		/// Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.
		/// PATCH_live_streams_liveStreamId live-streams/{liveStreamId}
		/// </summary>
		/// <param name="liveStreamId">The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.</param>
		/// <returns>Success</returns>
		public async Task<Live_stream> PATCH_live_streams_liveStreamIdAsync(string liveStreamId, Live_stream_update_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "live-streams/"+ (liveStreamId==null? "" : System.Uri.EscapeDataString(liveStreamId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Live_stream>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a thumbnail
		/// Send the unique identifier for a live stream to delete it from the system.
		/// DELETE_live_streams_liveStreamId_thumbnail live-streams/{liveStreamId}/thumbnail
		/// </summary>
		/// <param name="liveStreamId">The unique identifier for the live stream you want to delete. </param>
		/// <returns>Success</returns>
		public async Task<Live_stream> DELETE_live_streams_liveStreamId_thumbnailAsync(string liveStreamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "live-streams/"+ (liveStreamId==null? "" : System.Uri.EscapeDataString(liveStreamId))+"/thumbnail";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Live_stream>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all players
		/// Retrieve a list of all the players you created, as well as details about each one.
		/// Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).
		/// GET_players players
		/// </summary>
		/// <param name="sortBy">createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.</param>
		/// <param name="sortOrder">Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Players_list_response> GET_playersAsync(GET_playersSortBy sortBy, GET_live_streamsSortOrder sortOrder, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "players?sortBy=" + sortBy+"&sortOrder=" + sortOrder+"&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Players_list_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a player
		/// Create a player for your video, and customise it.
		/// POST_players players
		/// </summary>
		public async Task POST_playersAsync(PlayerCreationPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "players";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a player
		/// Delete a player if you no longer need it. You can delete any player that you have the player ID for.
		/// DELETE_players_playerId players/{playerId}
		/// </summary>
		/// <param name="playerId">The unique identifier for the player you want to delete.</param>
		public async Task DELETE_players_playerIdAsync(string playerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "players/"+ (playerId==null? "" : System.Uri.EscapeDataString(playerId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show a player
		/// Use a player ID to retrieve details about the player and display it for viewers.
		/// GET_players_playerId players/{playerId}
		/// </summary>
		/// <param name="playerId">The unique identifier for the player you want to retrieve. </param>
		/// <returns>Success</returns>
		public async Task<Player> GET_players_playerIdAsync(string playerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "players/"+ (playerId==null? "" : System.Uri.EscapeDataString(playerId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Player>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a player
		/// Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
		/// PATCH_players_playerId players/{playerId}
		/// </summary>
		/// <param name="playerId">The unique identifier for the player.</param>
		/// <returns>Success</returns>
		public async Task<Player> PATCH_players_playerIdAsync(string playerId, PlayerUpdatePayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "players/"+ (playerId==null? "" : System.Uri.EscapeDataString(playerId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Player>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete logo
		/// DELETE_players_playerId_logo players/{playerId}/logo
		/// </summary>
		/// <param name="playerId">The unique identifier for the player.</param>
		public async Task DELETE_players_playerId_logoAsync(string playerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "players/"+ (playerId==null? "" : System.Uri.EscapeDataString(playerId))+"/logo";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all active upload tokens.
		/// A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens.
		/// Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).
		/// GET_upload_tokens upload-tokens
		/// </summary>
		/// <param name="sortBy">Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format.</param>
		/// <param name="sortOrder">Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Token_list_response> GET_upload_tokensAsync(GET_upload_tokensSortBy sortBy, GET_live_streamsSortOrder sortOrder, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "upload-tokens?sortBy=" + sortBy+"&sortOrder=" + sortOrder+"&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Token_list_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generate an upload token
		/// Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe. Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).
		/// POST_upload_tokens upload-tokens
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Upload_token> POST_upload_tokensAsync(Token_create_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "upload-tokens";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Upload_token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an upload token
		/// Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
		/// DELETE_upload_tokens_uploadToken upload-tokens/{uploadToken}
		/// </summary>
		/// <param name="uploadToken">The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.</param>
		public async Task DELETE_upload_tokens_uploadTokenAsync(string uploadToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "upload-tokens/"+ (uploadToken==null? "" : System.Uri.EscapeDataString(uploadToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show upload token
		/// You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.
		/// GET_upload_tokens_uploadToken upload-tokens/{uploadToken}
		/// </summary>
		/// <param name="uploadToken">The unique identifier for the token you want information about.</param>
		/// <returns>Success</returns>
		public async Task<Upload_token> GET_upload_tokens_uploadTokenAsync(string uploadToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "upload-tokens/"+ (uploadToken==null? "" : System.Uri.EscapeDataString(uploadToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Upload_token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all videos
		/// Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.  We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.
		/// LIST_videos videos
		/// </summary>
		/// <param name="title">The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.</param>
		/// <param name="tags">A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.</param>
		/// <param name="metadata">Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.</param>
		/// <param name="description">If you described a video with a term or sentence, you can add it here to return videos containing this string.</param>
		/// <param name="liveStreamId">If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here.</param>
		/// <param name="sortBy">Allowed: publishedAt, title. You can search by the time videos were published at, or by title.</param>
		/// <param name="sortOrder">Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Videos_list_response> LIST_videosAsync(string title, string[] tags, string[] metadata, string description, string liveStreamId, string sortBy, string sortOrder, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos?title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&liveStreamId=" + (liveStreamId==null? "" : System.Uri.EscapeDataString(liveStreamId))+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder))+"&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Videos_list_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a video
		/// To create a video, you create its container&parameters first, before adding the video file (exception - when using an existing HTTP source).
		/// * Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos)
		/// * Up to 6 responsive video streams will be created (from 240p to 4k)
		/// * Mp4 encoded versions are created at the highest quality (max 1080p) by default.
		/// * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload.
		/// * Searchable parameters: title, description, tags and metadata
		/// 
		/// ```shell
		/// $ curl https://ws.api.video/videos \ -H 'Authorization: Bearer {access_token} \ -d '{"title":"My video",
		/// "description":"so many details",
		/// "mp4Support":true
		/// }'
		/// ```
		/// 
		/// ## add an URL to upload on creation
		/// You can also create a video directly from a video hosted on a third-party server by giving its URI in `source` parameter:
		/// ```shell
		/// $ curl https://ws.api.video/videos \
		/// -H 'Authorization: Bearer {access_token} \
		/// -d '{"source":"http://uri/to/video.mp4", "title":"My video"}'
		/// ```
		/// 
		/// In this case, the service will respond `202 Accepted` and ingest the video asynchronously.
		/// ## Track users with Dynamic Metadata
		/// Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use:
		/// ``` "metadata":[{"dynamicKey": "__dynamicKey__"}] ```
		/// 
		/// The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have:
		/// ``` <iframe type="text/html" src="https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]=Doug" width="960" height="320" frameborder="0" scrollling="no"></iframe> ```
		/// 
		/// 
		/// This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos.
		/// ### We have tutorials on:
		/// * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial)
		/// * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)
		/// 
		/// 
		/// * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices)
		/// * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos)
		/// * [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)
		/// 
		/// * Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint.
		/// 
		/// POST_video videos
		/// </summary>
		/// <param name="requestBody">video to create</param>
		public async Task POST_videoAsync(Video_create_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a video
		/// If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).
		/// DELETE_video videos/{videoId}
		/// </summary>
		/// <param name="videoId">The video ID for the video you want to delete.</param>
		public async Task DELETE_videoAsync(string videoId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show a video
		/// This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).
		/// GET_video videos/{videoId}
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want details about.</param>
		/// <returns>Success</returns>
		public async Task<Video> GET_videoAsync(string videoId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Video>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a video
		/// Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).
		/// PATCH_video videos/{videoId}
		/// </summary>
		/// <param name="videoId">The video ID for the video you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<Video> PATCH_videoAsync(string videoId, Video_update_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Video>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List video captions
		/// Retrieve a list of available captions for the videoId you provide.
		/// GET_videos_videoId_captions videos/{videoId}/captions
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want to retrieve a list of captions for.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Captions_list_response> GET_videos_videoId_captionsAsync(string videoId, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/captions&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Captions_list_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a caption
		/// Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.
		/// DELETE_videos_videoId_captions_language videos/{videoId}/captions/{language}
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want to delete a caption from.</param>
		/// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
		public async Task DELETE_videos_videoId_captions_languageAsync(string videoId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/captions/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show a caption
		/// Display a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a response indicating the caption was not found.
		/// Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).
		/// GET_videos_videoId_captions_language videos/{videoId}/captions/{language}
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want captions for.</param>
		/// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation</param>
		/// <returns>Success</returns>
		public async Task<Subtitle> GET_videos_videoId_captions_languageAsync(string videoId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/captions/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Subtitle>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update caption
		/// To have the captions on automatically, use this PATCH to set default: true.
		/// PATCH_videos_videoId_captions_language videos/{videoId}/captions/{language}
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want to have automatic captions for. </param>
		/// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
		/// <returns>Success</returns>
		public async Task<Subtitle> PATCH_videos_videoId_captions_languageAsync(string videoId, string language, Captions_update_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/captions/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Subtitle>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List video chapters
		/// Retrieve a list of all chapters for a specified video.
		/// GET_videos_videoId_chapters videos/{videoId}/chapters
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want to retrieve a list of chapters for.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Chapters_list_response> GET_videos_videoId_chaptersAsync(string videoId, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/chapters&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Chapters_list_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a chapter
		/// DELETE_videos_videoId_chapters_language videos/{videoId}/chapters/{language}
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want to delete a chapter from. </param>
		/// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
		public async Task DELETE_videos_videoId_chapters_languageAsync(string videoId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/chapters/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show a chapter
		/// Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).
		/// GET_videos_videoId_chapters_language videos/{videoId}/chapters/{language}
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want to show a chapter for.</param>
		/// <param name="language">A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.</param>
		/// <returns>Success</returns>
		public async Task<Chapter> GET_videos_videoId_chapters_languageAsync(string videoId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/chapters/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Chapter>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show video status
		/// This API provides upload status & encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).
		/// GET_video_status videos/{videoId}/status
		/// </summary>
		/// <param name="videoId">The unique identifier for the video you want the status for.</param>
		/// <returns>Success</returns>
		public async Task<Videostatus> GET_video_statusAsync(string videoId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/status";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Videostatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Pick a thumbnail
		/// Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update.
		/// Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).
		/// PATCH_videos_videoId_thumbnail videos/{videoId}/thumbnail
		/// </summary>
		/// <param name="videoId">Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.</param>
		/// <returns>Success</returns>
		public async Task<Video> PATCH_videos_videoId_thumbnailAsync(string videoId, Video_thumbnail_pick_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "videos/"+ (videoId==null? "" : System.Uri.EscapeDataString(videoId))+"/thumbnail";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Video>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all webhooks
		/// Requests to this endpoint return a list of your webhooks (with all their details). You can filter what the webhook list that the API returns using the parameters described below.
		/// LIST_webhooks webhooks
		/// </summary>
		/// <param name="events">The webhook event that you wish to filter on.</param>
		/// <param name="currentPage">Choose the number of search results to return per page. Minimum value: 1</param>
		/// <param name="pageSize">Results per page. Allowed values 1-100, default is 25.</param>
		/// <returns>Success</returns>
		public async Task<Webhooks_list_response> LIST_webhooksAsync(string events, int currentPage, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks?events=" + (events==null? "" : System.Uri.EscapeDataString(events))+"&currentPage="+currentPage+"&pageSize="+pageSize;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Webhooks_list_response>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Webhook
		/// Webhooks can push notifications to your server, rather than polling api.video for changes. We currently offer four events:
		/// * ```video.encoding.quality.completed```  When a new video is uploaded into your account, it will be encoded into several different HLS sizes/bitrates.  When each version is encoded, your webhook will get a notification.  It will look like ```{ \"type\": \"video.encoding.quality.completed\", \"emittedAt\": \"2021-01-29T16:46:25.217+01:00\", \"videoId\": \"viXXXXXXXX\", \"encoding\": \"hls\", \"quality\": \"720p\"} ```. This request says that the 720p HLS encoding was completed.
		/// * ```live-stream.broadcast.started```  When a livestream begins broadcasting, the broadcasting parameter changes from false to true, and this webhook fires.
		/// * ```live-stream.broadcast.ended```  This event fores when the livestream has finished broadcasting, and the broadcasting parameter flips from false to true.
		/// * ```video.source.recorded```  This event is similar to ```video.encoding.quality.completed```, but tells you if a livestream has been recorded as a VOD.
		/// POST_webhooks webhooks
		/// </summary>
		public async Task POST_webhooksAsync(Webhooks_create_payload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Webhook
		/// This endpoint will delete the indicated webhook.
		/// DELETE_webhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId">The webhook you wish to delete.</param>
		public async Task DELETE_webhookAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show Webhook details
		/// This call provides the same JSON information provided on Webjhook creation.
		/// GET_Webhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId">The unique webhook you wish to retreive details on.</param>
		/// <returns>Success</returns>
		public async Task<Webhook> GET_WebhookAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Webhook>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum GET_live_streamsSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum GET_playersSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		createdAt = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updatedAt = 1,
	}
	
	public enum GET_upload_tokensSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		createdAt = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ttl = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
