//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// The id of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Identifier for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// The servicepack id that defines the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicepack_id")]
		public System.Nullable<System.Int32> Servicepack_id { get; set; }
	}
	
	/// <summary>
	/// A detailed representation of an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountDetail
	{
		
		/// <summary>
		/// A list of addons applied to the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addons")]
		public Addon[] Addons { get; set; }
		
		/// <summary>
		/// The id of the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Identifier for the account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Servicepack information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicepack")]
		public Servicepack Servicepack { get; set; }
	}
	
	/// <summary>
	/// Addon information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Addon
	{
		
		/// <summary>
		/// The id of the addon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The name of the addon
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Servicepack information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Servicepack
	{
		
		/// <summary>
		/// The id of the service pack
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The name of the service pack
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddHostHeaderRequest
	{
		
		/// <summary>
		/// Host header domain name (e.g. alias.be or alias.site.be).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddSshKeyRequest
	{
		
		/// <summary>
		/// Public key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_key")]
		public string Public_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddSubsiteRequest
	{
		
		/// <summary>
		/// Subsite domain name (e.g. alias.be or subsite.site.be).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// Folder location for the subsite (when empty we use /subsites/site (e.g. /subsites/subsite.site.be)<br />
		///The path MUST pre-exist on the server. It WILL NOT be created automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdditionalValidationAttribute
	{
		
		/// <summary>
		/// Additional validation attribute field name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional validation attribute field value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Alias
	{
		
		/// <summary>
		/// The alias destination e-mail addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// The alias e-mail address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AntiSpam
	{
		
		/// <summary>
		/// Allowed types of anti-spam scanning for this mail zone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowed_types")]
		public AntiSpamTypes[] Allowed_types { get; set; }
		
		/// <summary>
		/// Types of anti-spam scanning
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AntiSpamTypes Type { get; set; }
	}
	
	/// <summary>
	/// Types of anti-spam scanning
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AntiSpamTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		advanced = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		basic = 2,
	}
	
	/// <summary>
	/// The application pool for the hosting account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationPool
	{
		
		/// <summary>
		/// The installed .NET Core runtimes for the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installed_net_core_runtimes")]
		public string[] Installed_net_core_runtimes { get; set; }
		
		/// <summary>
		/// The active pipeline mode for the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipeline_mode")]
		public string Pipeline_mode { get; set; }
		
		/// <summary>
		/// The active runtime for the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtime")]
		public string Runtime { get; set; }
	}
	
	/// <summary>
	/// Asset types
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		domain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		linux_hosting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mysql = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dns = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mailbox = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		windows_hosting = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoForward
	{
		
		/// <summary>
		/// Copy to myself
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copy_to_myself")]
		public System.Nullable<System.Boolean> Copy_to_myself { get; set; }
		
		/// <summary>
		/// E-mail addresses to which e-mails are forwarded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_addresses")]
		public string[] Email_addresses { get; set; }
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoRedirectConfig
	{
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoReply
	{
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Subject
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestResponse
	{
		
		/// <summary>
		/// A list of validation errors that occurred when processing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation_errors")]
		public ValidationErrorMessage[] Validation_errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationErrorMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="error_code")]
		public string Error_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error_text")]
		public string Error_text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CatchAll
	{
		
		/// <summary>
		/// E-mail addresses to which all e-mails are sent to inexistent mailboxes or aliases
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_addresses")]
		public string[] Email_addresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompletionEstimation
	{
		
		/// <summary>
		/// The estimated time when the job should be finished.<br />
		///Unexpected delays can always occur.<br />
		///The value is subject to change during the provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimate")]
		public System.Nullable<System.DateTimeOffset> Estimate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAccount
	{
		
		/// <summary>
		/// Ftp password for the account.<br />
		///Applies only if the servicepack contains hosting.<br />
		///Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' " \ </li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ftp_password")]
		public string Ftp_password { get; set; }
		
		/// <summary>
		/// An identifier for the account.<br />
		///Should be a domain name for hosting accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// The servicepack id that defines the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicepack_id")]
		public System.Nullable<System.Int32> Servicepack_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAliasRequest
	{
		
		/// <summary>
		/// The alias destination e-mail addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// The alias e-mail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCatchAllRequest
	{
		
		/// <summary>
		/// E-mail address to which all e-mails are sent to inexistent mailboxes or aliases
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMailboxRequest
	{
		
		/// <summary>
		/// Mail zone account id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public System.Nullable<System.Int32> Account_id { get; set; }
		
		/// <summary>
		/// E-mail address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The password for the mailbox.<br />
		///Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' " \ </li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMySqlDatabase
	{
		
		/// <summary>
		/// The id of the account on which to create the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public System.Nullable<System.Int32> Account_id { get; set; }
		
		/// <summary>
		/// The name for the database. This will be prefixed during provisioning.
		///The provided name during creation will be different from the provisioned database name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database_name")]
		public string Database_name { get; set; }
		
		/// <summary>
		/// The password for the database user.<br />
		///Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' " \ </li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMySqlUser
	{
		
		/// <summary>
		/// User name<br />
		///User names have to adhere to following rules:<br /><ul><li>Between 2-14 characters.</li><li>Must be a mix of letters and/or digits.</li><li>Must be lower cased.</li><li>Cannot contain spaces.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The password for the database user.<br />
		///Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' " \ </li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSmtpDomainRequest
	{
		
		/// <summary>
		/// The smtp domain name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSslCertificateRequest
	{
		
		/// <summary>
		/// List of additional validation attributes for the certificate when choosing organization or extended validation.
		///<table><tr><th>Name</th><th>Info</th><th>Required</th></tr><tr><td>Firstname</td><td>Firstname of the technical contact</td><td>Yes</td></tr><tr><td>Lastname</td><td>Lastname of the technical contact</td><td>Yes</td></tr><tr><td>Phone</td><td>Phone of the technical contact</td><td>Yes</td></tr><tr><td>EmailAddress</td><td>Email address of the technical contact</td><td>Yes</td></tr><tr><td>Street</td><td>Address street of the organization</td><td>Yes</td></tr><tr><td>Number</td><td>Address house number of the organization</td><td>Yes</td></tr><tr><td>PostalCode</td><td>Address postal code of the organization</td><td>Yes</td></tr><tr><td>VatCountryCode</td><td>VAT country code of the organization, ISO 3166-1 alpha-2 country code</td><td>Yes</td></tr><tr><td>OrganizationNumber</td><td>Business number of the organization</td><td>No</td></tr></table>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_validation_attributes")]
		public AdditionalValidationAttribute[] Additional_validation_attributes { get; set; }
		
		/// <summary>
		/// The type of the certificate:
		///<ul><li>Standard: Certificate for a single domain.</li><li>Multi domain: Certificate for multiple (sub)domains belonging to the same owner.</li><li>Wildcard: Certificate for all the subdomains.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate_type")]
		public System.Nullable<CreateSslCertificateRequestCertificate_type> Certificate_type { get; set; }
		
		/// <summary>
		/// The certificate signing request data.<br />
		///The certificate signing request subject should contain following attributes:<br /><table><tr><th>Name</th><th>Code</th><th>Format</th></tr><tr><td>CommonName</td><td>CN</td><td>Valid domain name, for example site.be, alias.site.be or *.site.be</td></tr><tr><td>Country</td><td>C</td><td>ISO 3166-1 alpha-2 country code</td></tr><tr><td>State</td><td>ST</td><td></td></tr><tr><td>Locality</td><td>L</td><td></td></tr><tr><td>Organization</td><td>O</td><td></td></tr><tr><td>EmailAddress</td><td>E</td><td>Valid email address</td></tr></table>
		///The certificate signing request should also contain all the additional aliases and domains (SAN's) for the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csr")]
		public string Csr { get; set; }
		
		/// <summary>
		/// The validation level of the certificate:
		///<ul><li>Domain validated: Basic check of the identity of the owner of the domain name.</li><li>Organization validated: Company details are verified and integrated in the certificate.</li><li>Extended validated: A thorough verification of your domain name and company details.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation_level")]
		public System.Nullable<CreateSslCertificateRequestValidation_level> Validation_level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateSslCertificateRequestCertificate_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multi_domain = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wildcard = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateSslCertificateRequestValidation_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		domain_validated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organization_validated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		extended_validated = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRecord
	{
		
		/// <summary>
		/// Variable data depending on the record type.
		///<ul><li>A: the IPv4 address.</li><li>CNAME: canonical name of an alias.</li><li>MX: fully qualified domain name of a mail host.</li><li>SRV: does not apply. Data for the SRV records can be found in specific properties.</li><li>TXT: free form text data.</li><li>CAA: format should match specific values for flag, tag and ca: "{flag} {tag} {ca}".
		///        <ul><li>The flag. The values 128 (critical) or 0 (non-critical) are expected, with 0 as the default.</li><li>The tag. A tag specifies which actions an authorized CA can take in terms of issuing SSL/TLS certificates.<br /><ul><li>The value "issue": explicitly authorizes a single certificate authority to issue a certificate (any type) for the hostname.</li><li>The value "issuewild": explicitly authorizes a single certificate authority to issue a wildcard certificate (and only wildcard) for the hostname.</li><li>The value "iodef": specifies a URL to which a certificate authority may report policy violations.</li></ul></li><li>The ca. This is the domain of the CA (Certification Authority) that has the authority to issue certificates for the domain in question. If the value is a semicolon (;), it means that no CA has the authority to issue a certificate for that domain.</li></ul></li><li>ALIAS: canonical name of an alias.</li><li>TLSA: format should match specific values for usage, selector, matching type and data: "{usage} {selector} {matching_type} {data}"
		///        <ul><li>The usage. The first field after the TLSA text in the DNS RR, specifies how to verify the certificate.<br /><ul><li>A value of 0 is for what is commonly called CA constraint (and PKIX-TA). The certificate provided when establishing TLS must be issued by the listed root-CA or one of its intermediate CAs, with a valid certification path to a root-CA already trusted by the application doing the verification.</li><li>A value of 1 is for what is commonly called Service certificate constraint (and PKIX-EE). The certificate used must match the TLSA record exactly, and it must also pass PKIX certification path validation to a trusted root-CA.</li><li>A value of 2 is for what is commonly called Trust Anchor Assertion (and DANE-TA). The certificate used has a valid certification path pointing back to the certificate mention in this record, but there is no need for it to pass the PKIX certification path validation to a trusted root-CA.</li><li>A value of 3 is for what is commonly called Domain issued certificate (and DANE-EE). The services uses a self-signed certificate. It is not signed by anyone else, and is exactly this record.</li></ul></li><li>The selector. When connecting to the service and a certificate is received, the selector field specifies which parts of it should be checked.<br /><ul><li>A value of 0 means to select the entire certificate for matching.</li><li>A value of 1 means to select just the public key for certificate matching. Matching the public key is often sufficient, as this is likely to be unique.</li></ul></li><li>The matching type.<br /><ul><li>A type of 0 means the entire information selected is present in the certificate association data.</li><li>A type of 1 means to do a SHA-256 hash of the selected data.</li><li>A type of 2 means to do a SHA-512 hash of the selected data.</li></ul></li><li>The actual data to be matched given the settings of the other fields. This is a long text string of hexadecimal data.</li></ul></li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The id of the record
		///This value is ignored for creation of new records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The port for SRV records.<br />
		///The value MUST be a positive integer.<br />
		///Editing the value is not possible. You should add a new SRV record and delete the existing record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The priority for MX or SRV records.<br />
		///A lower value means more preferred.<br />
		///The value MUST be a positive integer less or equal to 9999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Used for the creation of SRV records. Possible options: TCP, UDP, ...<br />
		///Editing the value is not possible. You should add a new SRV record and delete the existing record.
		/// </summary>
		[System.ComponentModel.DefaultValue("TCP")]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; } = "TCP";
		
		/// <summary>
		/// The name of the record.<br />
		///This is the host name, alias defined by the record.<br />
		///An empty record or '@' is equal to the domain name.<br />
		///Applies to A, MX, CNAME, TXT, CAA, ALIAS and TLSA records.<br />
		///When type is TLSA the recommended value format is port number, protocol and host: _25._tcp.<br />
		///Does not apply for SRV records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record_name")]
		public string Record_name { get; set; }
		
		/// <summary>
		/// The symbolic name of the desired service for SRV records.<br />
		///Editing the value is not possible. You should add a new SRV record and can delete the existing record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// The canonical hostname of the machine providing the service for SRV records.<br />
		///Editing the value is not possible. You should add a new SRV record and delete the existing record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Time to live of the record in seconds.<br />
		///It defines the time frame that clients can cache the information.<br />
		///The value MUST be between 60 and 86400. The default value is 3600 (= 1 hour).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
		
		/// <summary>
		/// The type of the record (A, MX, CNAME, SRV, TXT, CAA, ALIAS and TLSA).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The weight for SRV records with the same priority.<br />
		///A higher value means more preferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Domain
	{
		
		/// <summary>
		/// The domain name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// Expiration date of the domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateTimeOffset> Expiration_date { get; set; }
		
		/// <summary>
		/// Indication of renewal.<br />
		///No value indicates that the renewal state could not be determined at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="will_renew")]
		public System.Nullable<System.Boolean> Will_renew { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainDetail
	{
		
		/// <summary>
		/// Indication if the domain renew state can be changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="can_toggle_renew")]
		public System.Nullable<System.Boolean> Can_toggle_renew { get; set; }
		
		/// <summary>
		/// The domain name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// Expiration date of the domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_date")]
		public System.Nullable<System.DateTimeOffset> Expiration_date { get; set; }
		
		/// <summary>
		/// Nameservers of the domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name_servers")]
		public NameServer[] Name_servers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrant")]
		public Registrant Registrant { get; set; }
		
		/// <summary>
		/// Indication of renewal.<br />
		///No value indicates that the renewal state could not be determined at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="will_renew")]
		public System.Nullable<System.Boolean> Will_renew { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NameServer
	{
		
		/// <summary>
		/// Nameserver ip
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// Nameserver name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Registrant
	{
		
		/// <summary>
		/// Address of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Company name of the registrant.<br />
		///The registrant is a company if not empty, otherwise the registrant is an individual when validating extra fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// Country code of the registrant.
		///Syntax: 'BE', 'NL, 'FR', ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Email of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Enterprise number of the registrant.<br />
		///Syntax: 'BE0123456789'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterprise_number")]
		public string Enterprise_number { get; set; }
		
		/// <summary>
		/// Fax of the registrant.
		///Syntax: '+32.123456789'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		/// <summary>
		/// First name of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Language code of the registrant.
		///Syntax: 'nl', 'fr', 'en', 'de', ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// Last name of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Phone of the registrant.<br />
		///Syntax: '+32.123456789'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Postal code of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditDomainWillRenewRequest
	{
		
		/// <summary>
		/// Indication of renewal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="will_renew")]
		public System.Nullable<System.Boolean> Will_renew { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditNameServers
	{
		
		/// <summary>
		/// The domain name to register.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// List of name servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name_servers")]
		public string[] Name_servers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtraField
	{
		
		/// <summary>
		/// Registrant extra field name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Registrant extra field value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FtpConfiguration
	{
		
		/// <summary>
		/// Enable or disable FTP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GzipConfig
	{
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// A host header identifies a web domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HostHeader
	{
		
		/// <summary>
		/// Indicates if the host header is applied on the web server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The name of the host header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Http2Configuration
	{
		
		/// <summary>
		/// Enable or disable HTTP/2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LetsEncryptConfig
	{
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinuxHosting
	{
		
		/// <summary>
		/// Domain name for the Linux hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// Id of Linux hosting service package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicepack_id")]
		public System.Nullable<System.Int32> Servicepack_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinuxHostingDetail
	{
		
		/// <summary>
		/// Used webspace size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_size")]
		public System.Nullable<System.Int32> Actual_size { get; set; }
		
		/// <summary>
		/// Domain name for the Linux hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// Indicates whether ftp is enabled for the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ftp_enabled")]
		public System.Nullable<System.Boolean> Ftp_enabled { get; set; }
		
		/// <summary>
		/// Ftp username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ftp_username")]
		public string Ftp_username { get; set; }
		
		/// <summary>
		/// Linux hosting IP address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// Type of the hosting IP address (dedicated or shared)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip_type")]
		public System.Nullable<LinuxHostingDetailIp_type> Ip_type { get; set; }
		
		/// <summary>
		/// Maximum webspace size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_size")]
		public System.Nullable<System.Int32> Max_size { get; set; }
		
		/// <summary>
		/// Maximum webspace size in MB<br />
		///Use max_size instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_webspace_size")]
		public System.Nullable<System.Int32> Max_webspace_size { get; set; }
		
		/// <summary>
		/// A list of mysql databases linked to the hosting account.<br />
		///Details of the database can be read using the mysql database detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mysql_database_names")]
		public string[] Mysql_database_names { get; set; }
		
		/// <summary>
		/// The active php version for the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="php_version")]
		public string Php_version { get; set; }
		
		/// <summary>
		/// Id of Linux hosting service package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicepack_id")]
		public System.Nullable<System.Int32> Servicepack_id { get; set; }
		
		/// <summary>
		/// A list of websites on the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public LinuxSite[] Sites { get; set; }
		
		/// <summary>
		/// Ssh host of the linux hosting account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssh_host")]
		public string Ssh_host { get; set; }
		
		/// <summary>
		/// Ssh username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssh_username")]
		public string Ssh_username { get; set; }
		
		/// <summary>
		/// Used webspace size in MB<br />
		///Use actual_size instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webspace_usage")]
		public System.Nullable<System.Int32> Webspace_usage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LinuxHostingDetailIp_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shared = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinuxSite
	{
		
		/// <summary>
		/// Host headers for the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host_headers")]
		public HostHeader[] Host_headers { get; set; }
		
		/// <summary>
		/// Indicates whether http/2 protocol is enabled for the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http2_enabled")]
		public System.Nullable<System.Boolean> Http2_enabled { get; set; }
		
		/// <summary>
		/// Indicates whether automatic https redirection is enabled for the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="https_redirect_enabled")]
		public System.Nullable<System.Boolean> Https_redirect_enabled { get; set; }
		
		/// <summary>
		/// The name of the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The path of the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Indicates whether ssl is enabled for the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssl_enabled")]
		public System.Nullable<System.Boolean> Ssl_enabled { get; set; }
	}
	
	/// <summary>
	/// Type of the hosting IP address (dedicated or shared)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LinuxIpType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shared = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MailZone
	{
		
		/// <summary>
		/// List of aliases on the mail zone<br />
		///An alias is an e-mail address (alias) that automatically forwards received e-mails to another e-mail address (destination).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public Alias[] Aliases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="anti_spam")]
		public AntiSpam Anti_spam { get; set; }
		
		/// <summary>
		/// List of mail zone accounts with their mailbox size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_accounts")]
		public MailZoneAccount[] Available_accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="catch_all")]
		public CatchAll Catch_all { get; set; }
		
		/// <summary>
		/// Indicates whether the mail zone is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of extra smtp domains on the mail zone<br />
		///SMTP domain names allow you to link multiple domain names to a single e-mail address.<br />
		///E-mails sent to an SMTP domain will be caught by the respective e-mail address on the main domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smtp_domains")]
		public SmtpDomain[] Smtp_domains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MailZoneAccount
	{
		
		/// <summary>
		/// Mail zone account id, use this value to create a mailbox
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public System.Nullable<System.Int32> Account_id { get; set; }
		
		/// <summary>
		/// Size of mailbox(es) in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SmtpDomain
	{
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The smtp domain name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mailbox
	{
		
		/// <summary>
		/// Used size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_size")]
		public System.Nullable<System.Int32> Actual_size { get; set; }
		
		/// <summary>
		/// Maximum size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_size")]
		public System.Nullable<System.Int32> Max_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MailboxDetail
	{
		
		/// <summary>
		/// Used size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_size")]
		public System.Nullable<System.Int32> Actual_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auto_forward")]
		public AutoForward Auto_forward { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auto_reply")]
		public AutoReply Auto_reply { get; set; }
		
		/// <summary>
		/// Login to connect with the mailbox
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Maximum size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_size")]
		public System.Nullable<System.Int32> Max_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MySqlDatabase
	{
		
		/// <summary>
		/// The account id for the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public System.Nullable<System.Int32> Account_id { get; set; }
		
		/// <summary>
		/// The actual size in MB for the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_size")]
		public System.Nullable<System.Int32> Actual_size { get; set; }
		
		/// <summary>
		/// Hostname
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// The maximim size in MB for the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_size")]
		public System.Nullable<System.Int32> Max_size { get; set; }
		
		/// <summary>
		/// Database name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_count")]
		public System.Nullable<System.Int32> User_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MySqlUser
	{
		
		/// <summary>
		/// User status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// User name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User rights
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rights")]
		public System.Nullable<MySqlUserRights> Rights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MySqlUserRights
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read_and_write = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read_only = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhpVersion
	{
		
		/// <summary>
		/// Php version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisioningJobCompletion
	{
		
		/// <summary>
		/// The id of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Links to the created resource(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource_links")]
		public string[] Resource_links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisioningJobInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="completion")]
		public CompletionEstimation Completion { get; set; }
		
		/// <summary>
		/// The id of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Current job status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ProvisioningJobInfoStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProvisioningJobInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ongoing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 3,
	}
	
	/// <summary>
	/// Current job status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProvisioningJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ongoing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finished = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterDomain
	{
		
		/// <summary>
		/// The domain name to register.<br />
		///Only pass the domain part and the tld.<br /><i>For abc.com, abc is the domain part, com is the tld.</i>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// List of name servers. When empty, the registation will be done on default name servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name_servers")]
		public string[] Name_servers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrant")]
		public RegistrantInput Registrant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegistrantInput
	{
		
		/// <summary>
		/// Address of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Company name of the registrant.<br />
		///The registrant is a company if not empty, otherwise the registrant is an individual when validating extra fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// Country code of the registrant.
		///Syntax: 'BE', 'NL, 'FR', ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Email of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Enterprise number of the registrant.<br />
		///Syntax: 'BE0123456789'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterprise_number")]
		public string Enterprise_number { get; set; }
		
		/// <summary>
		/// List of registrant extra fields for the domain name.
		///<table><tr><th>Extension</th><th>Registrant specifics</th><th>Required extra field(s)</th></tr><tr><td>.dk</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.es</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.es</td><td>is an individual</td><td>PassportNumber</td></tr><tr><td>.fr</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.it</td><td>is an individual and has country code 'IT'</td><td>CodiceFiscal</td></tr><tr><td>.it</td><td>is an individual and has not country code 'IT'</td><td>PassportNumber</td></tr><tr><td>.nu</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.nu</td><td>is an individual</td><td>PassportNumber</td></tr><tr><td>.se</td><td>is a company</td><td>CompanyNumber</td></tr><tr><td>.se</td><td>is an individual</td><td>PassportNumber</td></tr></table>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra_fields")]
		public ExtraField[] Extra_fields { get; set; }
		
		/// <summary>
		/// Fax of the registrant.
		///Syntax: '+32.123456789'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		/// <summary>
		/// First name of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Language code of the registrant.
		///Syntax: 'nl', 'fr', 'en', 'de', ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// Last name of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Phone of the registrant.<br />
		///Syntax: '+32.123456789'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Postal code of the registrant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduledTask
	{
		
		/// <summary>
		/// Cron expression of scheduled task.<br />
		///5-digit expressions (*/5 * * * *) are required in the following sequence:<br /><ul><li>Minute (0 - 59, also */5, */10, */15 and */30 as every 5 minutes, every 10 minutes, every quarter or every half-hour are allowed)</li><li>Hour (0 - 23, also * as every hour is allowed)</li><li>Day of the month (1 - 31, also * as every day is allowed)</li><li>Month (1 - 12 as January to December, also * as every month is allowed)</li><li>Day of the week (1 - 7 as Monday to Sunday, also * as every day is allowed)</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cron_expression")]
		public string Cron_expression { get; set; }
		
		/// <summary>
		/// Enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The id of the scheduled task.<br />
		///This value is ignored for creation of new scheduled tasks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Absolute path from this linux hosting to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script_location")]
		public string Script_location { get; set; }
	}
	
	/// <summary>
	/// A site binding identifies a web domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SiteBinding
	{
		
		/// <summary>
		/// The certificate thumbprint of the site binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cert_thumbprint")]
		public string Cert_thumbprint { get; set; }
		
		/// <summary>
		/// The host name of the site binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host_name")]
		public string Host_name { get; set; }
		
		/// <summary>
		/// The IP address of the site binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		public string Ip_address { get; set; }
		
		/// <summary>
		/// The port of the site binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The protocol of the site binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// Indicates whether ssl is enabled for the binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssl_enabled")]
		public System.Nullable<System.Boolean> Ssl_enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SshConfiguration
	{
		
		/// <summary>
		/// Enable or disable SSH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SshKey
	{
		
		/// <summary>
		/// The fingerprint of the public key.<br />
		///This value is ignored for creation of new SSH keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Public key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_key")]
		public string Public_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SshKeyDetail
	{
		
		/// <summary>
		/// The fingerprint of the public key.<br />
		///This value is ignored for creation of new SSH keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// List of Linux hostings where SSH key is attached
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linux_hostings")]
		public string[] Linux_hostings { get; set; }
		
		/// <summary>
		/// Public key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_key")]
		public string Public_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertificate
	{
		
		/// <summary>
		/// The common name (e.g. domain.com) of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common_name")]
		public string Common_name { get; set; }
		
		/// <summary>
		/// The exact time the certificate will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_after")]
		public System.Nullable<System.DateTimeOffset> Expires_after { get; set; }
		
		/// <summary>
		/// The SHA-1 fingerprint of the certificate.<br />
		///The fingerprint is a cryptographic hash which is a short unique identification of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1_fingerprint")]
		public string Sha1_fingerprint { get; set; }
		
		/// <summary>
		/// The type of the certificate:
		///<ul><li>Standard: Certificate for a single domain.</li><li>Multi domain: Certificate for multiple (sub)domains belonging to the same owner.</li><li>Wildcard: Certificate for all the subdomains.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateSslCertificateRequestCertificate_type Type { get; set; }
		
		/// <summary>
		/// The validation level of the certificate:
		///<ul><li>Domain validated: Basic check of the identity of the owner of the domain name.</li><li>Organization validated: Company details are verified and integrated in the certificate.</li><li>Extended validated: A thorough verification of your domain name and company details.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation_level")]
		public CreateSslCertificateRequestValidation_level Validation_level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertificateDetail
	{
		
		/// <summary>
		/// The common name (e.g. domain.com) of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common_name")]
		public string Common_name { get; set; }
		
		/// <summary>
		/// The exact time the certificate will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_after")]
		public System.Nullable<System.DateTimeOffset> Expires_after { get; set; }
		
		/// <summary>
		/// The SHA-1 fingerprint of the certificate.<br />
		///The fingerprint is a cryptographic hash which is a short unique identification of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1_fingerprint")]
		public string Sha1_fingerprint { get; set; }
		
		/// <summary>
		/// The list of all supported dns names in the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject_alt_names")]
		public SslSubjectAltName[] Subject_alt_names { get; set; }
		
		/// <summary>
		/// The type of the certificate:
		///<ul><li>Standard: Certificate for a single domain.</li><li>Multi domain: Certificate for multiple (sub)domains belonging to the same owner.</li><li>Wildcard: Certificate for all the subdomains.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateSslCertificateRequestCertificate_type Type { get; set; }
		
		/// <summary>
		/// The validation level of the certificate:
		///<ul><li>Domain validated: Basic check of the identity of the owner of the domain name.</li><li>Organization validated: Company details are verified and integrated in the certificate.</li><li>Extended validated: A thorough verification of your domain name and company details.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation_level")]
		public CreateSslCertificateRequestValidation_level Validation_level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslSubjectAltName
	{
		
		/// <summary>
		/// The type of the alt name:
		///<ul><li>Dns</li><li>Ip</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SslSubjectAltNameType> Type { get; set; }
		
		/// <summary>
		/// The value of the alt name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslSubjectAltNameType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dns = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ip = 1,
	}
	
	/// <summary>
	/// The file format of the returned file stream:
	///<ul><li>PFX: Also known as PKCS #12, is a single, password protected certificate archive that contains the entire certificate chain plus the matching private key.</li></ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslCertificateFileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pfx = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertificateRequest
	{
		
		/// <summary>
		/// The type of the certificate:
		///<ul><li>Standard: Certificate for a single domain.</li><li>Multi domain: Certificate for multiple (sub)domains belonging to the same owner.</li><li>Wildcard: Certificate for all the subdomains.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate_type")]
		public CreateSslCertificateRequestCertificate_type Certificate_type { get; set; }
		
		/// <summary>
		/// The common name of the certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common_name")]
		public string Common_name { get; set; }
		
		/// <summary>
		/// The id of the certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The order code of the certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_code")]
		public string Order_code { get; set; }
		
		/// <summary>
		/// The validation level of the certificate:
		///<ul><li>Domain validated: Basic check of the identity of the owner of the domain name.</li><li>Organization validated: Company details are verified and integrated in the certificate.</li><li>Extended validated: A thorough verification of your domain name and company details.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation_level")]
		public CreateSslCertificateRequestValidation_level Validation_level { get; set; }
		
		/// <summary>
		/// The vendor of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public System.Nullable<SslCertificateRequestVendor> Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslCertificateRequestVendor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sectigo = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertificateRequestDetail
	{
		
		/// <summary>
		/// The type of the certificate:
		///<ul><li>Standard: Certificate for a single domain.</li><li>Multi domain: Certificate for multiple (sub)domains belonging to the same owner.</li><li>Wildcard: Certificate for all the subdomains.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate_type")]
		public CreateSslCertificateRequestCertificate_type Certificate_type { get; set; }
		
		/// <summary>
		/// The common name of the certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common_name")]
		public string Common_name { get; set; }
		
		/// <summary>
		/// The id of the certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The order code of the certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_code")]
		public string Order_code { get; set; }
		
		/// <summary>
		/// The list of all supported domains in the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject_alt_names")]
		public SslSubjectAltName[] Subject_alt_names { get; set; }
		
		/// <summary>
		/// The validation level of the certificate:
		///<ul><li>Domain validated: Basic check of the identity of the owner of the domain name.</li><li>Organization validated: Company details are verified and integrated in the certificate.</li><li>Extended validated: A thorough verification of your domain name and company details.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation_level")]
		public CreateSslCertificateRequestValidation_level Validation_level { get; set; }
		
		/// <summary>
		/// The list of dns names to be validated with the information related to domain verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validations")]
		public SslCertificateRequestValidation[] Validations { get; set; }
		
		/// <summary>
		/// The vendor of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public SslCertificateRequestVendor Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertificateRequestValidation
	{
		
		/// <summary>
		/// Returns true if no user interaction is required and the domain validation will be verified automatic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_validated")]
		public System.Nullable<System.Boolean> Auto_validated { get; set; }
		
		/// <summary>
		/// The value-part (Point To) of the CNAME-record that must be created as part of domain verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cname_validation_content")]
		public string Cname_validation_content { get; set; }
		
		/// <summary>
		/// The host-part (Name) of the CNAME-record that must be created as part of domain verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cname_validation_name")]
		public string Cname_validation_name { get; set; }
		
		/// <summary>
		/// A domain name of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dns_name")]
		public string Dns_name { get; set; }
		
		/// <summary>
		/// An array of eligible domain verification email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_addresses")]
		public string[] Email_addresses { get; set; }
		
		/// <summary>
		/// The content your verification file must contain, consisting of three lines of plain-text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_validation_content")]
		public string[] File_validation_content { get; set; }
		
		/// <summary>
		/// The URL (http format) your verification file must be uploaded to as part of domain verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_validation_url_http")]
		public string File_validation_url_http { get; set; }
		
		/// <summary>
		/// The URL (https format) your verification file must be uploaded to as part of domain verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_validation_url_https")]
		public string File_validation_url_https { get; set; }
		
		/// <summary>
		/// The domain validation verification type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SslCertificateRequestValidationType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslCertificateRequestValidationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dns = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 2,
	}
	
	/// <summary>
	/// The type of the certificate:
	///<ul><li>Standard: Certificate for a single domain.</li><li>Multi domain: Certificate for multiple (sub)domains belonging to the same owner.</li><li>Wildcard: Certificate for all the subdomains.</li></ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslCertificateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multi_domain = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wildcard = 2,
	}
	
	/// <summary>
	/// The validation level of the certificate:
	///<ul><li>Domain validated: Basic check of the identity of the owner of the domain name.</li><li>Organization validated: Company details are verified and integrated in the certificate.</li><li>Extended validated: A thorough verification of your domain name and company details.</li></ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslCertificateValidationLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		domain_validated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organization_validated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		extended_validated = 2,
	}
	
	/// <summary>
	/// The vendor of the certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslCertificateVendor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sectigo = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferDomain
	{
		
		/// <summary>
		/// Authorization code which allows the transfer to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth_code")]
		public string Auth_code { get; set; }
		
		/// <summary>
		/// The domain name to transfer.<br />
		///Only pass the domain part and the tld.<br /><i>For abc.com, abc is the domain part, com is the tld.</i>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// List of name servers. When empty, the transfer will be done on default name servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name_servers")]
		public string[] Name_servers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrant")]
		public RegistrantInput Registrant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAliasRequest
	{
		
		/// <summary>
		/// The alias destination e-mail addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAntiSpamRequest
	{
		
		/// <summary>
		/// Types of anti-spam scanning
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AntiSpamTypes Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMailboxPasswordRequest
	{
		
		/// <summary>
		/// The password for the database user.<br />
		///Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' " \ </li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePhpAPcuRequest
	{
		
		/// <summary>
		/// The APcu size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apcu_size")]
		public System.Nullable<System.Int32> Apcu_size { get; set; }
		
		/// <summary>
		/// Enables or disables APC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePhpMemoryLimitRequest
	{
		
		/// <summary>
		/// The php memory limit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memory_limit")]
		public System.Nullable<System.Int32> Memory_limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSmtpDomainRequest
	{
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserPasswordRequest
	{
		
		/// <summary>
		/// The password for the database user.<br />
		///Passwords have to adhere to following rules:<br /><ul><li>Between 8-20 characters.</li><li>Must be a mix of letters and digits.</li><li>Must contain at least one digit (0-9).</li><li>Must contain at least one letter (a-z).</li><li>Cannot contain spaces.</li><li>Cannot contain characters: * € $ & + } { ' " \ </li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserStatusRequest
	{
		
		/// <summary>
		/// Enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// User rights
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserRights
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read_and_write = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read_only = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WindowsHosting
	{
		
		/// <summary>
		/// Domain name for the Windows hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// Id of Windows hosting service package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicepack_id")]
		public System.Nullable<System.Int32> Servicepack_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WindowsHostingDetail
	{
		
		/// <summary>
		/// Used webspace size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_size")]
		public System.Nullable<System.Int32> Actual_size { get; set; }
		
		/// <summary>
		/// The application pool for the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="application_pool")]
		public ApplicationPool Application_pool { get; set; }
		
		/// <summary>
		/// Domain name for the Windows hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain_name")]
		public string Domain_name { get; set; }
		
		/// <summary>
		/// Ftp username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ftp_username")]
		public string Ftp_username { get; set; }
		
		/// <summary>
		/// Windows hosting IP address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// Type of the hosting IP address (dedicated or shared)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip_type")]
		public LinuxHostingDetailIp_type Ip_type { get; set; }
		
		/// <summary>
		/// Maximum webspace size in MB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_size")]
		public System.Nullable<System.Int32> Max_size { get; set; }
		
		/// <summary>
		/// A list of mssql databases linked to the hosting account.<br />
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mssql_database_names")]
		public string[] Mssql_database_names { get; set; }
		
		/// <summary>
		/// Id of Windows hosting service package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicepack_id")]
		public System.Nullable<System.Int32> Servicepack_id { get; set; }
		
		/// <summary>
		/// A list of websites on the hosting account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public WindowsSite[] Sites { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WindowsSite
	{
		
		/// <summary>
		/// The bindings for the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public SiteBinding[] Bindings { get; set; }
		
		/// <summary>
		/// The name of the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The path of the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Type of the hosting IP address (dedicated or shared)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WindowsIpType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shared = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Overview of accounts
		/// GetAccounts accounts
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <param name="asset_type">Filters the list, returning only accounts containing the specified asset type.</param>
		/// <param name="identifier">Return only accounts, matching the specified identifier.</param>
		/// <returns>Success</returns>
		public async Task<Account[]> GetAccountsAsync(int skip, int take, AssetType asset_type, string identifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts?skip="+skip+"&take="+take+"&asset_type=" + asset_type+"&identifier=" + (identifier==null? "" : System.Uri.EscapeDataString(identifier));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new account
		/// The creation of an account requires some background processing. There is no instant feedback of the creation status.
		/// CreateAccount accounts
		/// </summary>
		public async Task CreateAccountAsync(CreateAccount requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific account
		/// GetAccount accounts/{accountId}
		/// </summary>
		/// <param name="account_id">The id of the account.</param>
		/// <param name="accountId">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<AccountDetail> GetAccountAsync(int account_id, string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"?account_id="+account_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get records
		/// DNS_recordsGetByDomain_nameAndSkipAndTakeAndTypeAndRecord_nameAndServiceAndDomainName dns/{domainName}/records
		/// </summary>
		/// <param name="domain_name">The domain name.</param>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <param name="type">Filters records matching the type. Most other filters only apply when this filter is specified.</param>
		/// <param name="record_name">Filters records matching the record name. This filter only applies to lookups of A, CNAME, TXT, CAA, ALIAS and TLSA records.</param>
		/// <param name="service">Filters records for the service. This filter only applies to lookups of SRV records.</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<DnsRecord[]> DNS_recordsGetByDomain_nameAndSkipAndTakeAndTypeAndRecord_nameAndServiceAndDomainNameAsync(string domain_name, int skip, int take, string type, string record_name, string service, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/records?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&skip="+skip+"&take="+take+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&record_name=" + (record_name==null? "" : System.Uri.EscapeDataString(record_name))+"&service=" + (service==null? "" : System.Uri.EscapeDataString(service));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DnsRecord[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a record
		/// DNS_recordsPostByDomain_nameAndDomainName dns/{domainName}/records
		/// </summary>
		/// <param name="domain_name">The domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">The record to create</param>
		public async Task DNS_recordsPostByDomain_nameAndDomainNameAsync(string domain_name, string domainName, DnsRecord requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/records?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a record
		/// DNS_recordsDeleteByDomain_nameAndRecord_idAndDomainNameAndRecordId dns/{domainName}/records/{recordId}
		/// </summary>
		/// <param name="domain_name">The domain name.</param>
		/// <param name="record_id">The id of the record.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="recordId">Automatically added</param>
		public async Task DNS_recordsDeleteByDomain_nameAndRecord_idAndDomainNameAndRecordIdAsync(string domain_name, string record_id, string domainName, string recordId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/records/"+ (recordId==null? "" : System.Uri.EscapeDataString(recordId))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&record_id=" + (record_id==null? "" : System.Uri.EscapeDataString(record_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get specific record
		/// DNS_recordsGetByDomain_nameAndRecord_idAndDomainNameAndRecordId dns/{domainName}/records/{recordId}
		/// </summary>
		/// <param name="domain_name">The domain name.</param>
		/// <param name="record_id">The id of the record.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="recordId">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<DnsRecord> DNS_recordsGetByDomain_nameAndRecord_idAndDomainNameAndRecordIdAsync(string domain_name, string record_id, string domainName, string recordId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/records/"+ (recordId==null? "" : System.Uri.EscapeDataString(recordId))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&record_id=" + (record_id==null? "" : System.Uri.EscapeDataString(record_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DnsRecord>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit a record
		/// DNS_recordsPutByDomain_nameAndRecord_idAndDomainNameAndRecordId dns/{domainName}/records/{recordId}
		/// </summary>
		/// <param name="domain_name">The domain name.</param>
		/// <param name="record_id">The id of the record.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="recordId">Automatically added</param>
		/// <param name="requestBody">The record with updated values.</param>
		/// <returns>Success</returns>
		public async Task DNS_recordsPutByDomain_nameAndRecord_idAndDomainNameAndRecordIdAsync(string domain_name, string record_id, string domainName, string recordId, DnsRecord requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/records/"+ (recordId==null? "" : System.Uri.EscapeDataString(recordId))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&record_id=" + (record_id==null? "" : System.Uri.EscapeDataString(record_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overviews of domains
		/// GetDomains domains
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <returns>Success</returns>
		public async Task<Domain[]> GetDomainsAsync(int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains?skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Domain[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Register a domain
		/// Registers an available domain.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'.
		/// Register domains/registrations
		/// </summary>
		public async Task RegisterAsync(RegisterDomain requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/registrations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Transfer a domain
		/// Transfers a domain with a transfer authorization code.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'.
		/// Transfer domains/transfers
		/// </summary>
		public async Task TransferAsync(TransferDomain requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/transfers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Details of a domain
		/// GetDomain domains/{domainName}
		/// </summary>
		/// <param name="domain_name">The domain name</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<DomainDetail> GetDomainAsync(string domain_name, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DomainDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit domain name servers
		/// EditNameServers domains/{domainName}/nameservers
		/// </summary>
		/// <param name="domain_name">The domain name</param>
		/// <param name="domainName">Automatically added</param>
		public async Task EditNameServersAsync(string domain_name, string domainName, EditNameServers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/nameservers?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit domain name renew state
		/// Allowed if can_toggle_renew is true on the domain detail:<br /><ul><li>If there are no unpaid invoices for the domain name anymore.</li><li>If the renewal won't start within 1 month.</li></ul>
		/// Allowed if the requesting user has the finance role.
		/// ConfigureDomain domains/{domainName}/renew
		/// </summary>
		/// <param name="domain_name">The domain name</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Contains the domain renew information</param>
		public async Task ConfigureDomainAsync(string domain_name, string domainName, EditDomainWillRenewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/renew?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of linux hostings
		/// GetLinuxHostings linuxhostings
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <returns>Success</returns>
		public async Task<LinuxHosting[]> GetLinuxHostingsAsync(int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings?skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinuxHosting[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Linux hosting detail
		/// GetLinuxHosting linuxhostings/{domainName}
		/// </summary>
		/// <param name="domain_name">The Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<LinuxHostingDetail> GetLinuxHostingAsync(string domain_name, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinuxHostingDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure FTP
		/// ConfigureFtp linuxhostings/{domainName}/ftp/configuration
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		public async Task ConfigureFtpAsync(string domain_name, string domainName, FtpConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/ftp/configuration?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure PHP APCu setting
		/// ChangeApcu linuxhostings/{domainName}/phpsettings/apcu
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Php APcu config</param>
		public async Task ChangeApcuAsync(string domain_name, string domainName, UpdatePhpAPcuRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/phpsettings/apcu?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the available PHP versions.
		/// GetAvailablePhpVersions linuxhostings/{domainName}/phpsettings/availableversions
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<PhpVersion[]> GetAvailablePhpVersionsAsync(string domain_name, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/phpsettings/availableversions?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PhpVersion[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure PHP memory limit
		/// ChangePhpMemoryLimit linuxhostings/{domainName}/phpsettings/memorylimit
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Memory limit config</param>
		public async Task ChangePhpMemoryLimitAsync(string domain_name, string domainName, UpdatePhpMemoryLimitRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/phpsettings/memorylimit?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Change the Linux hosting PHP version.
		/// ChangePhpVersion linuxhostings/{domainName}/phpsettings/version
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">The new PHP version.</param>
		public async Task ChangePhpVersionAsync(string domain_name, string domainName, PhpVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/phpsettings/version?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of scheduled tasks
		/// Manage scheduled tasks which are also manageable via the control panel.
		/// GetScheduledTasks linuxhostings/{domainName}/scheduledtasks
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<ScheduledTask[]> GetScheduledTasksAsync(string domain_name, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/scheduledtasks?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScheduledTask[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a scheduled task
		/// AddScheduledTasks linuxhostings/{domainName}/scheduledtasks
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		public async Task AddScheduledTasksAsync(string domain_name, string domainName, ScheduledTask requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/scheduledtasks?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a scheduled task
		/// DeleteScheduledTask linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="scheduled_task_id">Id of the scheduled task.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="scheduledTaskId">Automatically added</param>
		public async Task DeleteScheduledTaskAsync(string domain_name, string scheduled_task_id, string domainName, string scheduledTaskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/scheduledtasks/"+ (scheduledTaskId==null? "" : System.Uri.EscapeDataString(scheduledTaskId))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&scheduled_task_id=" + (scheduled_task_id==null? "" : System.Uri.EscapeDataString(scheduled_task_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get scheduled task detail
		/// GetScheduledTask linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="scheduled_task_id">Id of the scheduled task.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="scheduledTaskId">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<ScheduledTask> GetScheduledTaskAsync(string domain_name, string scheduled_task_id, string domainName, string scheduledTaskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/scheduledtasks/"+ (scheduledTaskId==null? "" : System.Uri.EscapeDataString(scheduledTaskId))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&scheduled_task_id=" + (scheduled_task_id==null? "" : System.Uri.EscapeDataString(scheduled_task_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ScheduledTask>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure a scheduled task
		/// ConfigureScheduledTask linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="scheduled_task_id">Id of the scheduled task.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="scheduledTaskId">Automatically added</param>
		public async Task ConfigureScheduledTaskAsync(string domain_name, string scheduled_task_id, string domainName, string scheduledTaskId, ScheduledTask requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/scheduledtasks/"+ (scheduledTaskId==null? "" : System.Uri.EscapeDataString(scheduledTaskId))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&scheduled_task_id=" + (scheduled_task_id==null? "" : System.Uri.EscapeDataString(scheduled_task_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Enable/disable GZIP compression
		/// ChangeGzipCompression linuxhostings/{domainName}/settings/gzipcompression
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Whether GZIP compression is enabled or not.</param>
		public async Task ChangeGzipCompressionAsync(string domain_name, string domainName, GzipConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/settings/gzipcompression?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a host header
		/// CreateHostHeader linuxhostings/{domainName}/sites/{siteName}/hostheaders
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="site_name">Name of the site on the linux hosting.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="siteName">Automatically added</param>
		/// <param name="requestBody">Add host header request</param>
		public async Task CreateHostHeaderAsync(string domain_name, string site_name, string domainName, string siteName, AddHostHeaderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/hostheaders?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&site_name=" + (site_name==null? "" : System.Uri.EscapeDataString(site_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure HTTP/2
		/// ConfigureHttp2 linuxhostings/{domainName}/sites/{siteName}/http2/configuration
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="site_name">Site name where HTTP/2 should be configured.<br />
		///For HTTP/2 to work correctly, the site must have ssl enabled.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="siteName">Automatically added</param>
		public async Task ConfigureHttp2Async(string domain_name, string site_name, string domainName, string siteName, Http2Configuration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/sites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"/http2/configuration?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&site_name=" + (site_name==null? "" : System.Uri.EscapeDataString(site_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure SSH
		/// ConfigureSsh linuxhostings/{domainName}/ssh/configuration
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		public async Task ConfigureSshAsync(string domain_name, string domainName, SshConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/ssh/configuration?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of SSH keys
		/// GetSshKeys linuxhostings/{domainName}/ssh/keys
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<SshKey[]> GetSshKeysAsync(string domain_name, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/ssh/keys?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SshKey[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a SSH key
		/// AddSshKey linuxhostings/{domainName}/ssh/keys
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">SSH key public key.</param>
		public async Task AddSshKeyAsync(string domain_name, string domainName, AddSshKeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/ssh/keys?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a SSH key
		/// DeleteSshKey linuxhostings/{domainName}/ssh/keys/{fingerprint}
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="fingerprint">Fingerprint of public key.</param>
		/// <param name="domainName">Automatically added</param>
		public async Task DeleteSshKeyAsync(string domain_name, string fingerprint, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/ssh/keys/"+ (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure auto redirect
		/// ChangeAutoRedirect linuxhostings/{domainName}/sslsettings/{hostname}/autoredirect
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="hostname">Specific hostname.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Auto redirect config.</param>
		public async Task ChangeAutoRedirectAsync(string domain_name, string hostname, string domainName, AutoRedirectConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/sslsettings/"+ (hostname==null? "" : System.Uri.EscapeDataString(hostname))+"/autoredirect?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure let's encrypt
		/// ChangeLetsEncrypt linuxhostings/{domainName}/sslsettings/{hostname}/letsencrypt
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="hostname">Specific hostname.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Let's encrypt config.</param>
		public async Task ChangeLetsEncryptAsync(string domain_name, string hostname, string domainName, LetsEncryptConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/sslsettings/"+ (hostname==null? "" : System.Uri.EscapeDataString(hostname))+"/letsencrypt?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a subsite
		/// CreateSubsite linuxhostings/{domainName}/subsites
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Add subsite request</param>
		public async Task CreateSubsiteAsync(string domain_name, string domainName, AddSubsiteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/subsites?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a subsite
		/// DeleteSubsite linuxhostings/{domainName}/subsites/{siteName}
		/// </summary>
		/// <param name="domain_name">Linux hosting domain name.</param>
		/// <param name="site_name">Name of the site on the linux hosting.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="siteName">Automatically added</param>
		public async Task DeleteSubsiteAsync(string domain_name, string site_name, string domainName, string siteName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "linuxhostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/subsites/"+ (siteName==null? "" : System.Uri.EscapeDataString(siteName))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&site_name=" + (site_name==null? "" : System.Uri.EscapeDataString(site_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets your mailboxes.
		/// Currently only supports getting the mailboxes filtered by domain name.
		/// GetMailboxes mailboxes
		/// </summary>
		/// <param name="domain_name">Obligated domain name for getting mailboxes.</param>
		/// <returns>Success</returns>
		public async Task<Mailbox[]> GetMailboxesAsync(string domain_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailboxes?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Mailbox[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new mailbox.
		/// CreateMailbox mailboxes
		/// </summary>
		/// <param name="requestBody">The add mailbox request.</param>
		public async Task CreateMailboxAsync(CreateMailboxRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailboxes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a mailbox
		/// DeleteMailbox mailboxes/{mailboxName}
		/// </summary>
		/// <param name="mailbox_name">Mailbox name.</param>
		/// <param name="mailboxName">Automatically added</param>
		public async Task DeleteMailboxAsync(string mailbox_name, string mailboxName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailboxes/"+ (mailboxName==null? "" : System.Uri.EscapeDataString(mailboxName))+"?mailbox_name=" + (mailbox_name==null? "" : System.Uri.EscapeDataString(mailbox_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific mailbox
		/// GetMailbox mailboxes/{mailboxName}
		/// </summary>
		/// <param name="mailbox_name">Mailbox name.</param>
		/// <param name="mailboxName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<MailboxDetail> GetMailboxAsync(string mailbox_name, string mailboxName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailboxes/"+ (mailboxName==null? "" : System.Uri.EscapeDataString(mailboxName))+"?mailbox_name=" + (mailbox_name==null? "" : System.Uri.EscapeDataString(mailbox_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MailboxDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure auto-forward for mailbox
		/// ConfigureMailboxAutoForward mailboxes/{mailboxName}/autoforward
		/// </summary>
		/// <param name="mailbox_name">Mailbox name.</param>
		/// <param name="mailboxName">Automatically added</param>
		/// <param name="requestBody">Contains the auto-forward information.</param>
		public async Task ConfigureMailboxAutoForwardAsync(string mailbox_name, string mailboxName, AutoForward requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailboxes/"+ (mailboxName==null? "" : System.Uri.EscapeDataString(mailboxName))+"/autoforward?mailbox_name=" + (mailbox_name==null? "" : System.Uri.EscapeDataString(mailbox_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure auto-reply for mailbox
		/// ConfigureMailboxAutoReply mailboxes/{mailboxName}/autoreply
		/// </summary>
		/// <param name="mailbox_name">Mailbox name.</param>
		/// <param name="mailboxName">Automatically added</param>
		/// <param name="requestBody">Contains the auto-reply information.</param>
		public async Task ConfigureMailboxAutoReplyAsync(string mailbox_name, string mailboxName, AutoReply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailboxes/"+ (mailboxName==null? "" : System.Uri.EscapeDataString(mailboxName))+"/autoreply?mailbox_name=" + (mailbox_name==null? "" : System.Uri.EscapeDataString(mailbox_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Change password for mailbox
		/// ChangeMailboxPassword mailboxes/{mailboxName}/password
		/// </summary>
		/// <param name="mailbox_name">Mailbox name.</param>
		/// <param name="mailboxName">Automatically added</param>
		/// <param name="requestBody">Contains the new password.</param>
		public async Task ChangeMailboxPasswordAsync(string mailbox_name, string mailboxName, UpdateMailboxPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailboxes/"+ (mailboxName==null? "" : System.Uri.EscapeDataString(mailboxName))+"/password?mailbox_name=" + (mailbox_name==null? "" : System.Uri.EscapeDataString(mailbox_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the mail zone.
		/// GetMailZone mailzones/{domainName}
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<MailZone> GetMailZoneAsync(string domain_name, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MailZone>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new alias
		/// CreateAlias mailzones/{domainName}/aliases
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Contains the alias information.</param>
		public async Task CreateAliasAsync(string domain_name, string domainName, CreateAliasRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/aliases?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a alias
		/// DeleteAlias mailzones/{domainName}/aliases/{emailAddress}
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="email_address">Alias e-mail address.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="emailAddress">Automatically added</param>
		public async Task DeleteAliasAsync(string domain_name, string email_address, string domainName, string emailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/aliases/"+ (emailAddress==null? "" : System.Uri.EscapeDataString(emailAddress))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure a alias
		/// ConfigureAlias mailzones/{domainName}/aliases/{emailAddress}
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="email_address">Alias e-mail address.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="emailAddress">Automatically added</param>
		/// <param name="requestBody">Contains the alias information.</param>
		public async Task ConfigureAliasAsync(string domain_name, string email_address, string domainName, string emailAddress, UpdateAliasRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/aliases/"+ (emailAddress==null? "" : System.Uri.EscapeDataString(emailAddress))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure anti-spam for mail zone
		/// ConfigureAntiSpam mailzones/{domainName}/antispam
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Contains the anti-spam information.</param>
		public async Task ConfigureAntiSpamAsync(string domain_name, string domainName, UpdateAntiSpamRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/antispam?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a catch-all on the mail zone
		/// CreateCatchAll mailzones/{domainName}/catchall
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Contains the catch-all information.</param>
		public async Task CreateCatchAllAsync(string domain_name, string domainName, CreateCatchAllRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/catchall?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a catch-all on the mail zone
		/// DeleteCatchAll mailzones/{domainName}/catchall/{emailAddress}
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="email_address">E-mail address to which all e-mails are sent to inexistent mailboxes or aliases.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="emailAddress">Automatically added</param>
		public async Task DeleteCatchAllAsync(string domain_name, string email_address, string domainName, string emailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/catchall/"+ (emailAddress==null? "" : System.Uri.EscapeDataString(emailAddress))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an extra smtp domain
		/// CreateSmtpDomain mailzones/{domainName}/smtpdomains
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Contains the smtp domain information.</param>
		public async Task CreateSmtpDomainAsync(string domain_name, string domainName, CreateSmtpDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/smtpdomains?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an extra smtp domain
		/// DeleteSmtpDomain mailzones/{domainName}/smtpdomains/{hostname}
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="hostname">Smtp domain name.</param>
		/// <param name="domainName">Automatically added</param>
		public async Task DeleteSmtpDomainAsync(string domain_name, string hostname, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/smtpdomains/"+ (hostname==null? "" : System.Uri.EscapeDataString(hostname))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure an extra smtp domain
		/// ConfigureSmtpDomain mailzones/{domainName}/smtpdomains/{hostname}
		/// </summary>
		/// <param name="domain_name">Mail zone domain name.</param>
		/// <param name="hostname">Smtp domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <param name="requestBody">Contains the smtp domain information.</param>
		public async Task ConfigureSmtpDomainAsync(string domain_name, string hostname, string domainName, UpdateSmtpDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mailzones/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/smtpdomains/"+ (hostname==null? "" : System.Uri.EscapeDataString(hostname))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of mysql databases
		/// GetMySqlDatabases mysqldatabases
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <returns>Success</returns>
		public async Task<MySqlDatabase[]> GetMySqlDatabasesAsync(int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases?skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MySqlDatabase[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new mysql database
		/// CreateMySqlDatabase mysqldatabases
		/// </summary>
		public async Task CreateMySqlDatabaseAsync(CreateMySqlDatabase requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a mysql database
		/// DeleteDatabase mysqldatabases/{databaseName}
		/// </summary>
		/// <param name="database_name">Name of the database.</param>
		/// <param name="databaseName">Automatically added</param>
		public async Task DeleteDatabaseAsync(string database_name, string databaseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"?database_name=" + (database_name==null? "" : System.Uri.EscapeDataString(database_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific database
		/// GetMySqlDatabase mysqldatabases/{databaseName}
		/// </summary>
		/// <param name="databaseName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<MySqlDatabase> GetMySqlDatabaseAsync(string database_name, string databaseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"?database_name=" + (database_name==null? "" : System.Uri.EscapeDataString(database_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MySqlDatabase>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of mysql users
		/// GetDatabaseUsers mysqldatabases/{databaseName}/users
		/// </summary>
		/// <param name="database_name">Name of the database.</param>
		/// <param name="databaseName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<MySqlUser[]> GetDatabaseUsersAsync(string database_name, string databaseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/users?database_name=" + (database_name==null? "" : System.Uri.EscapeDataString(database_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MySqlUser[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new mysql user
		/// The creation of a new mysql user will result in a user with read_only rights.
		/// CreateMySqlUser mysqldatabases/{databaseName}/users
		/// </summary>
		/// <param name="database_name">Name of the database.</param>
		/// <param name="databaseName">Automatically added</param>
		public async Task CreateMySqlUserAsync(string database_name, string databaseName, CreateMySqlUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/users?database_name=" + (database_name==null? "" : System.Uri.EscapeDataString(database_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a mysql user
		/// The deletion of a mysql user is allowed for users with read_only rights.
		/// DeleteDatabaseUser mysqldatabases/{databaseName}/users/{userName}
		/// </summary>
		/// <param name="database_name">Name of the database.</param>
		/// <param name="user_name">Name of the user.</param>
		/// <param name="databaseName">Automatically added</param>
		/// <param name="userName">Automatically added</param>
		public async Task DeleteDatabaseUserAsync(string database_name, string user_name, string databaseName, string userName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"?database_name=" + (database_name==null? "" : System.Uri.EscapeDataString(database_name))+"&user_name=" + (user_name==null? "" : System.Uri.EscapeDataString(user_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Change password for mysql user
		/// ChangeDatabaseUserPassword mysqldatabases/{databaseName}/users/{userName}/password
		/// </summary>
		/// <param name="database_name">Name of the database.</param>
		/// <param name="user_name">Name of the user.</param>
		/// <param name="databaseName">Automatically added</param>
		/// <param name="userName">Automatically added</param>
		/// <param name="requestBody">Contains the new password.</param>
		public async Task ChangeDatabaseUserPasswordAsync(string database_name, string user_name, string databaseName, string userName, UpdateUserPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/password?database_name=" + (database_name==null? "" : System.Uri.EscapeDataString(database_name))+"&user_name=" + (user_name==null? "" : System.Uri.EscapeDataString(user_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Enable/disable mysql user
		/// ChangeDatabaseUserStatus mysqldatabases/{databaseName}/users/{userName}/status
		/// </summary>
		/// <param name="database_name">Name of the database.</param>
		/// <param name="user_name">Name of the user.</param>
		/// <param name="databaseName">Automatically added</param>
		/// <param name="userName">Automatically added</param>
		/// <param name="requestBody">Whether the user is enabled or not.</param>
		public async Task ChangeDatabaseUserStatusAsync(string database_name, string user_name, string databaseName, string userName, UpdateUserStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mysqldatabases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/status?database_name=" + (database_name==null? "" : System.Uri.EscapeDataString(database_name))+"&user_name=" + (user_name==null? "" : System.Uri.EscapeDataString(user_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detail of a provisioning job
		/// Provisioning failures may occur. Contact support in the event of a failure or wait for error resolution.<br />
		/// Do NOT retry provisioning until the job reports finished or cancelled.
		/// Provisioning_jobsGetByJob_idAndJobId provisioningjobs/{jobId}
		/// </summary>
		/// <param name="jobId">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<ProvisioningJobInfo> Provisioning_jobsGetByJob_idAndJobIdAsync(string job_id, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "provisioningjobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"?job_id=" + (job_id==null? "" : System.Uri.EscapeDataString(job_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProvisioningJobInfo>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of service packs
		/// Servicepacks servicepacks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Servicepack[]> ServicepacksAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicepacks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Servicepack[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of SSH keys
		/// GetAllSshKeys ssh
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <returns>Success</returns>
		public async Task<SshKeyDetail[]> GetAllSshKeysAsync(int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ssh?skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SshKeyDetail[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of SSL certificate requests
		/// GetSslCertificateRequests sslcertificaterequests
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <returns>Success</returns>
		public async Task<SslCertificateRequest[]> GetSslCertificateRequestsAsync(int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslcertificaterequests?skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCertificateRequest[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a SSL certificate request
		/// Executing this method causes the purchase of a paying product.<br />
		/// Log on to our website to see your current (renewal) prices or contact our Sales department.<br />
		/// Please note that promotional pricing does not apply for purchases made through our API.
		/// AddSslCertificateRequest sslcertificaterequests
		/// </summary>
		public async Task AddSslCertificateRequestAsync(CreateSslCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslcertificaterequests";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detail of a SSL certificate request
		/// GetSslCertificateRequest sslcertificaterequests/{id}
		/// </summary>
		/// <param name="id">The id of the certificate request.</param>
		/// <returns>Success</returns>
		public async Task<SslCertificateRequestDetail> GetSslCertificateRequestAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslcertificaterequests/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCertificateRequestDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verify the SSL certificate request domain validations
		/// VerifySslCertificateRequestDomainValidations sslcertificaterequests/{id}
		/// </summary>
		/// <param name="id">The id of the certificate request.</param>
		public async Task VerifySslCertificateRequestDomainValidationsAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslcertificaterequests/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of SSL certificates
		/// GetSslCertificates sslcertificates
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <returns>Success</returns>
		public async Task<SslCertificate[]> GetSslCertificatesAsync(int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslcertificates?skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCertificate[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detail of a SSL certificate
		/// GetSslCertificate sslcertificates/{sha1Fingerprint}
		/// </summary>
		/// <param name="sha1_fingerprint">The SHA-1 fingerprint of the certificate.</param>
		/// <param name="sha1Fingerprint">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<SslCertificateDetail> GetSslCertificateAsync(string sha1_fingerprint, string sha1Fingerprint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslcertificates/"+ (sha1Fingerprint==null? "" : System.Uri.EscapeDataString(sha1Fingerprint))+"?sha1_fingerprint=" + (sha1_fingerprint==null? "" : System.Uri.EscapeDataString(sha1_fingerprint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCertificateDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download a SSL certificate
		/// Returns the certifcate as binary data with the content-type and the filename information in the response headers.
		/// DownloadCertificate sslcertificates/{sha1Fingerprint}/download
		/// </summary>
		/// <param name="sha1_fingerprint">The SHA-1 fingerprint of the certificate.</param>
		/// <param name="file_format">The file format of the returned file stream:
		///<ul><li>PFX: Also known as PKCS #12, is a single, password protected certificate archive that contains the entire certificate chain plus the matching private key.</li></ul></param>
		/// <param name="password">The password used to protect the certificate file.<br /></param>
		/// <param name="sha1Fingerprint">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<string> DownloadCertificateAsync(string sha1_fingerprint, SslCertificateFileFormat file_format, string password, string sha1Fingerprint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sslcertificates/"+ (sha1Fingerprint==null? "" : System.Uri.EscapeDataString(sha1Fingerprint))+"/download?sha1_fingerprint=" + (sha1_fingerprint==null? "" : System.Uri.EscapeDataString(sha1_fingerprint))+"&file_format=" + file_format+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Overview of windows hostings
		/// GetWindowsHostings windowshostings
		/// </summary>
		/// <param name="skip">The number of items to skip in the resultset.</param>
		/// <param name="take">The number of items to return in the resultset. The returned count can be equal or less than this number.</param>
		/// <returns>Success</returns>
		public async Task<WindowsHosting[]> GetWindowsHostingsAsync(int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "windowshostings?skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WindowsHosting[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Windows hosting detail
		/// GetWindowsHosting windowshostings/{domainName}
		/// </summary>
		/// <param name="domain_name">The Windows hosting domain name.</param>
		/// <param name="domainName">Automatically added</param>
		/// <returns>Success</returns>
		public async Task<WindowsHostingDetail> GetWindowsHostingAsync(string domain_name, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "windowshostings/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"?domain_name=" + (domain_name==null? "" : System.Uri.EscapeDataString(domain_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WindowsHostingDetail>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
