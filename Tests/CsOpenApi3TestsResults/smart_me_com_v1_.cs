//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Container Class for the Put action of an Access Token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokenToPut
	{
		
		/// <summary>
		/// The ID of the Card
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> CardId { get; set; }
		
		/// <summary>
		/// The ID of the User. The credentials provided must have permission to edit the user.
		///            If no ID is provided, the user in the credentials is taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	/// <summary>
	/// The Information about an Action of a device
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionInformation
	{
		
		/// <summary>
		/// The Type of this action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ActionInformationActionType> ActionType { get; set; }
		
		/// <summary>
		/// The maximum value of this action (e.g. for an AnalogAction)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// The minimum value of this action (e.g. for an AnalogAction)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinValue { get; set; }
		
		/// <summary>
		/// The Name of this action
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Obis Code of this action. This is used as ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ObisCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActionInformationActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnOffAction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnalogAction = 1,
	}
	
	/// <summary>
	/// Container Class for an action to post
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionToPost
	{
		
		/// <summary>
		/// List with all Actions for this device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActionToPostItem[] Actions { get; set; }
		
		/// <summary>
		/// The ID of the Device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceID { get; set; }
	}
	
	/// <summary>
	/// Container class for an action item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionToPostItem
	{
		
		/// <summary>
		/// The ObisCode (ID) of the Action
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ObisCode { get; set; }
		
		/// <summary>
		/// The Value to Post
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Additional Information For a device
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdditionalDeviceInformation
	{
		
		/// <summary>
		/// An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalMeterSerialNumber { get; set; }
		
		/// <summary>
		/// The Firmware Version of a Meter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FirmwareVersion { get; set; }
		
		/// <summary>
		/// The Hardware Version of a Meter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HardwareVersion { get; set; }
		
		/// <summary>
		/// The ID of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// The mode how the device is connected to the network. Valid values are:
		///            wifi, gprs, ltecatm1, ltenbiot, meshmobile, meshwifi
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NetworkConnection { get; set; }
		
		/// <summary>
		/// The connection RSSI value (0 is bad, 100 is best)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NetworkConnectionRSSI { get; set; }
	}
	
	/// <summary>
	/// Settings for the auto export functionality of a meter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoExportSettings
	{
		
		/// <summary>
		/// The export format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExportFormat { get; set; }
		
		/// <summary>
		/// The export interval of the auto export
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AutoExportSettingsExportInterval> ExportInterval { get; set; }
		
		/// <summary>
		/// The meter point id set by the user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterPointId { get; set; }
		
		/// <summary>
		/// The upload type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UploadType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoExportSettingsExportInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoExport = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hourly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuaterYearly = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HalfYearly = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yearly = 7,
	}
	
	/// <summary>
	/// Container Class for the Web API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomDeviceToPost
	{
		
		/// <summary>
		/// The ID of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The Name of the Device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Serial number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Serial { get; set; }
		
		/// <summary>
		/// The Date of the Value (in UTC). If this is null the Server Time is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDate { get; set; }
		
		/// <summary>
		/// The Values of the custom Device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomDeviceValues[] Values { get; set; }
	}
	
	/// <summary>
	/// Container Class for the Custom Device Values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomDeviceValues
	{
		
		/// <summary>
		/// The Name of the Value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Container Class for the Web API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Device
	{
		
		/// <summary>
		/// The Actvie Power or current flow rate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActivePower { get; set; }
		
		/// <summary>
		/// The Actvie Power Phase L1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActivePowerL1 { get; set; }
		
		/// <summary>
		/// The Actvie Power Phase L2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActivePowerL2 { get; set; }
		
		/// <summary>
		/// The Actvie Power Phase L3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActivePowerL3 { get; set; }
		
		/// <summary>
		/// The Unit of the Active Power Value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActivePowerUnit { get; set; }
		
		/// <summary>
		/// The Number of the Active Tariff
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveTariff { get; set; }
		
		/// <summary>
		/// An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalMeterSerialNumber { get; set; }
		
		/// <summary>
		/// The analog output number 1 (PWM signal) (0 - 32183)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AnalogOutput1 { get; set; }
		
		/// <summary>
		/// The analog output number 2 (PWM signal) (0 - 32183)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AnalogOutput2 { get; set; }
		
		/// <summary>
		/// The state of a pico charging station. (Only available for pico charging stations)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DeviceChargingStationState> ChargingStationState { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading (Total Energy used)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReading { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading only export
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExport { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading only import
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingImport { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT1 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT2 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT3 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT4 { get; set; }
		
		/// <summary>
		/// The Unit of the Counter Reading
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CounterReadingUnit { get; set; }
		
		/// <summary>
		/// The Current (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Current { get; set; }
		
		/// <summary>
		/// The Current Phase L1 (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentL1 { get; set; }
		
		/// <summary>
		/// The Current Phase L2 (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentL2 { get; set; }
		
		/// <summary>
		/// The Current Phase L3 (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentL3 { get; set; }
		
		/// <summary>
		/// The Energy Type of this device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DeviceDeviceEnergyType> DeviceEnergyType { get; set; }
		
		/// <summary>
		/// The digital input number 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DigitalInput1 { get; set; }
		
		/// <summary>
		/// The digital input number 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DigitalInput2 { get; set; }
		
		/// <summary>
		/// The digital output number 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DigitalOutput1 { get; set; }
		
		/// <summary>
		/// The digital output number 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DigitalOutput2 { get; set; }
		
		/// <summary>
		/// The Family Type of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DeviceFamilyType> FamilyType { get; set; }
		
		/// <summary>
		/// The current flow rate (e.g. m3/h)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FlowRate { get; set; }
		
		/// <summary>
		/// The ID of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The sub meter type (e.g. warmwater or coldwater)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DeviceMeterSubType> MeterSubType { get; set; }
		
		/// <summary>
		/// The Name of the Device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi). Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactor { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi) Phase L1. Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactorL1 { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi) Phase L2. Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactorL2 { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi) Phase L3. Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactorL3 { get; set; }
		
		/// <summary>
		/// The Serial number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Serial { get; set; }
		
		/// <summary>
		/// Flag if the Switch is on on this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SwitchOn { get; set; }
		
		/// <summary>
		/// Flag if the Phase L1 is on on this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SwitchPhaseL1On { get; set; }
		
		/// <summary>
		/// Flag if the Phase L2 is on on this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SwitchPhaseL2On { get; set; }
		
		/// <summary>
		/// Flag if the Phase L3 is on on this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SwitchPhaseL3On { get; set; }
		
		/// <summary>
		/// The Temperature (in degree celsius)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// Time of last successful connection the the smart-me Cloud.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDate { get; set; }
		
		/// <summary>
		/// The Voltage (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Voltage { get; set; }
		
		/// <summary>
		/// The Voltage Phase L1 (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VoltageL1 { get; set; }
		
		/// <summary>
		/// The Voltage Phase L2 (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VoltageL2 { get; set; }
		
		/// <summary>
		/// The Voltage Phase L3 (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VoltageL3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceChargingStationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Booting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyNoCarConnected = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyCarConnected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartedWaitForCar = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Charging = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Installation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Authorize = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Offline = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceDeviceEnergyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeUnknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeElectricity = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeWater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeGas = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeHeat = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeHCA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeAllMeters = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeTemperature = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeMBusGateway = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeRS485Gateway = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeCustomDevice = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeCompressedAir = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeSolarLog = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeVirtualMeter = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterTypeWMBusGateway = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceFamilyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeUnknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMeConnectV1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamiliyTypeSmartMeMeter = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamiliyTypeSmartMeMeterWithSwitch = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeMBusGatewayV1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeRS485GatewayV1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeKamstrupModule = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe3PhaseMeter80A = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe3PhaseMeter32A = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe3PhaseTelstarTransformer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeLandisGyrModule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeFnnOpticalModule = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe3PhaseTelstar80AMobile = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe1PhaseMeter80AGprs = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe1PhaseMeter32AGprs = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeWMBusGatewayV1 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeMithralHallV1 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeRestApiMeter = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterFamilyTypeVirtualBillingMeter = 22,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceMeterSubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeUnknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeCold = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeHeat = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeChargingStation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeElectricity = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeWater = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeGas = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeElectricityHeat = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeTemperature = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterSubTypeVirtualBattery = 9,
	}
	
	/// <summary>
	/// Container Class for the Web API. Conatinas the MeterValues in the Past
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceInPast
	{
		
		/// <summary>
		/// The Meter Counter Reading (Total Energy used)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReading { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Export
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExport { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Export Tariff 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExportT1 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Export Tariff 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExportT2 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Export Tariff 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExportT3 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Export Tariff 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExportT4 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Import
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingImport { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Import Tariff 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingImportT1 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Import Tariff 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingImportT2 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Import Tariff 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingImportT3 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Import Tariff 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingImportT4 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT1 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT2 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT3 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT4 { get; set; }
		
		/// <summary>
		/// The Unit of the Counter Reading
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CounterReadingUnit { get; set; }
		
		/// <summary>
		/// The Date of the Values
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The ID of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The Serial number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Serial { get; set; }
	}
	
	/// <summary>
	/// Container Class for the Web API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceToPost
	{
		
		/// <summary>
		/// The Active Power or current flow rate. In kW or m3/h
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActivePower { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading (Total Energy used) in kWh or m3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReading { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading only export
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExport { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading only export (Tariff 1)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExportT1 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading only export (Tariff 2)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingExportT2 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 1 in kWh or m3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT1 { get; set; }
		
		/// <summary>
		/// The Meter Counter Reading Tariff 2 in kWh or m3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CounterReadingT2 { get; set; }
		
		/// <summary>
		/// The Current (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Current { get; set; }
		
		/// <summary>
		/// The Current Phase L1 (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentL1 { get; set; }
		
		/// <summary>
		/// The Current Phase L2 (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentL2 { get; set; }
		
		/// <summary>
		/// The Current Phase L3 (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentL3 { get; set; }
		
		/// <summary>
		/// The Energy Type of this device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceDeviceEnergyType DeviceEnergyType { get; set; }
		
		/// <summary>
		/// The digital input number 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DigitalInput1 { get; set; }
		
		/// <summary>
		/// The ID of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The Sub Type of this Meter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceMeterSubType MeterSubType { get; set; }
		
		/// <summary>
		/// The Name of the Device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi). Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactor { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi) Phase L1. Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactorL1 { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi) Phase L2. Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactorL2 { get; set; }
		
		/// <summary>
		/// The Power Factor (cos phi) Phase L3. Range: 0 - 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PowerFactorL3 { get; set; }
		
		/// <summary>
		/// The Serial number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Serial { get; set; }
		
		/// <summary>
		/// The Temperature (in degree celsius)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Temperature { get; set; }
		
		/// <summary>
		/// The Date of the Value (in UTC). If this is null the Server Time is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDate { get; set; }
		
		/// <summary>
		/// The Voltage (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Voltage { get; set; }
		
		/// <summary>
		/// The Voltage Phase L1 (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VoltageL1 { get; set; }
		
		/// <summary>
		/// The Voltage Phase L2 (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VoltageL2 { get; set; }
		
		/// <summary>
		/// The Voltage Phase L3 (in V)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VoltageL3 { get; set; }
	}
	
	/// <summary>
	/// Container class for the folder API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FolderData
	{
		
		/// <summary>
		/// The Counter values for electricity (kWh)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ElectricityCounterValue { get; set; }
		
		/// <summary>
		/// The Power for electricity (kW)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ElectricityPower { get; set; }
		
		/// <summary>
		/// The Counter values for Gas (m3)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GasCounterValue { get; set; }
		
		/// <summary>
		/// The Flow Rate for Gas (m3/h)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GasFlowRate { get; set; }
		
		/// <summary>
		/// The Counter values for Heat (kWh)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HeatCounterValue { get; set; }
		
		/// <summary>
		/// The Power for Heat (kW)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HeatPower { get; set; }
		
		/// <summary>
		/// The Counter values for Water (m3)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WaterCounterValue { get; set; }
		
		/// <summary>
		/// The Flow Rate for Water (m3/h)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WaterFlowRate { get; set; }
	}
	
	/// <summary>
	/// Container Class for the Web API representing a folder menu and it's items
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FolderMenuConfiguration
	{
		
		/// <summary>
		/// The time zone name taken from the browser
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrowserTimeZoneName { get; set; }
		
		/// <summary>
		/// The UTC time taken from the browser
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrowserUtcTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FolderMenuItem[] Items { get; set; }
	}
	
	/// <summary>
	/// A folder menu item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FolderMenuItem
	{
		
		/// <summary>
		/// Settings for the auto export functionality of a meter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoExportSettings AutoExportSettings { get; set; }
		
		/// <summary>
		/// Children folder menu items (sub folder menu items)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FolderMenuItem[] Children { get; set; }
		
		/// <summary>
		/// The Description of the folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The folder type of the item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<FolderMenuItemFolderType> FolderType { get; set; }
		
		/// <summary>
		/// The path to the Icon of this folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Icon { get; set; }
		
		/// <summary>
		/// The id of the folder menu item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The serial number if the folder menu item is a meter. 
		///            Serial number is handled as a string, as javascript on client side cannot handle long integers properly.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterSerialNumber { get; set; }
		
		/// <summary>
		/// The Name of the item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the user of this folder (only for foldertype user)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FolderMenuItemFolderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Folder = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Location = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Factory = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		House = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Office = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Machine = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VirtualMeter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElecticityFolder = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WaterFolder = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HeatFolder = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GasFolder = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TemperatureFolder = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sun = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Light = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ice = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sofa = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Food = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Coffee = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Car = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargingStation = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Meter = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trash = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GridPhotovoltaicPowerSystem = 23,
	}
	
	/// <summary>
	/// Container for the folder settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FolderSettings
	{
		
		/// <summary>
		/// The Description of the folder or meter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Flag if the meter is enabled (folder not supported yet)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		/// <summary>
		/// The Type of the folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FolderMenuItemFolderType FolderType { get; set; }
		
		/// <summary>
		/// The Name of the folder or meter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parent folder ID of this item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ParentFolderId { get; set; }
		
		/// <summary>
		/// The serial number (meter only)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> SerialNumber { get; set; }
		
		/// <summary>
		/// Flag if the meter is usable for virtual billing meters (e.g. washroom)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseableForVirtualBillingMeters { get; set; }
		
		/// <summary>
		/// The value correction on this meter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ValueCorrection { get; set; }
		
		/// <summary>
		/// The value correction on all parent folders. but not on the meter itself
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ValueCorrectionParentFolder { get; set; }
		
		/// <summary>
		/// The name of the visualization of the folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VisualizationName { get; set; }
	}
	
	/// <summary>
	/// Configuration for the input of a meter (digital inputs)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConfigurationContainer
	{
		
		/// <summary>
		/// The Name of the Input
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of the Input. (1 for Input 1)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// The visualization text for an OFF action
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OffText { get; set; }
		
		/// <summary>
		/// The visualization text for an ON action
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OnText { get; set; }
		
		/// <summary>
		/// The Type of the output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<InputConfigurationContainerType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputConfigurationContainerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TariffInput = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DigitalInput = 1,
	}
	
	/// <summary>
	/// Informations about the Inputs of a Meter or Folder
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputInformation
	{
		
		/// <summary>
		/// The Name of the Input
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Number of this Input. Use this as ID to switch it on or off.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MBusData
	{
		
		/// <summary>
		/// The Date of the M-BUS Telegram Readout (in UTC). If this is null the Server Time is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The M-BUS Telegram as Hex string. 
		///            Example: 68 1F 1F 68 08 02 72 78 56 34 12 24 40 01 07 55 00 00 00 03 13 15 31 00 DA 02 3B 13 01 8B 60 04 37 18 02 18 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Telegram { get; set; }
	}
	
	/// <summary>
	/// Container Class for the Web API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeterFolderInformation
	{
		
		/// <summary>
		/// The Version of the Communication Module (if exists)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CommunicationModuleFirmwareVersion { get; set; }
		
		/// <summary>
		/// The Version of the Communication Module (if exists)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CommunicationModuleHardwareVersion { get; set; }
		
		/// <summary>
		/// The Firmware Version of a Meter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FirmwareVersion { get; set; }
		
		/// <summary>
		/// The Hardware Version of a Meter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HardwareVersion { get; set; }
		
		/// <summary>
		/// Informations about the available Inputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputInformation[] InputInformations { get; set; }
		
		/// <summary>
		/// Flag if it's a Folder or a Meter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsFolder { get; set; }
		
		/// <summary>
		/// Name of the Meter or Folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Informations about the available Outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputInformation[] OutputInformations { get; set; }
	}
	
	/// <summary>
	/// Informations about the Outputs of a Meter or Folder
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputInformation
	{
		
		/// <summary>
		/// The type of the Output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActionInformationActionType ActionType { get; set; }
		
		/// <summary>
		/// The Name of the Output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Number of this Output. Use this as ID to switch it on or off.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// The Obis Code for this Output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ObisCode { get; set; }
	}
	
	/// <summary>
	/// Container for a Meter or Folder Information to Post
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeterFolderInformationToPost
	{
		
		/// <summary>
		/// The ID of the device or folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the Meter or Folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Object
	{
	}
	
	/// <summary>
	/// Configuration for the outputs of a meter (analog/digital outputs)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputConfigurationContainer
	{
		
		/// <summary>
		/// The Action when the device has lost the connection
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OutputConfigurationContainerDigitalOutputNoConnectionAction> DigitalOutputNoConnectionAction { get; set; }
		
		/// <summary>
		/// The Name of the Output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of the Output. (1 for Output 1, 2 for Output 2)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// The S0 Pulse Value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OutputConfigurationContainerS0PulseValue> S0PulseValue { get; set; }
		
		/// <summary>
		/// The Type of the output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OutputConfigurationContainerType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutputConfigurationContainerDigitalOutputNoConnectionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nothing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TurnOff = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TurnOn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetPwmValue = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutputConfigurationContainerS0PulseValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PulseValue1000Kwh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PulseValue10000Kwh = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutputConfigurationContainerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImpulseOutputActiveEnergy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImpulseOutputActiveEnergyImport = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImpulseOutputActiveEnergyExport = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImpulseOutputReactiveEnergy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DigitalOutput = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnalogPwmSignalOutput = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 6,
	}
	
	/// <summary>
	/// Container class for the pico charging station API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PicoChargingData
	{
		
		/// <summary>
		/// The energy used by this active charging (in kWh)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActiveChargingEnergy { get; set; }
		
		/// <summary>
		/// The power of the active charging (in kW)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActiveChargingPower { get; set; }
		
		/// <summary>
		/// The mode how this station is connected to the cloud
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PicoChargingDataConnectionMode> ConnectionMode { get; set; }
		
		/// <summary>
		/// The duration of this charging in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PicoChargingDataLastWarningOrError> LastWarningOrError { get; set; }
		
		/// <summary>
		/// The message of the last warning or error of the station.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastWarningOrErrorMessage { get; set; }
		
		/// <summary>
		/// The time when the LastWarningOrError happend
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastWarningOrErrorTime { get; set; }
		
		/// <summary>
		/// Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PicoChargingDataLoadSheddingState> LoadSheddingState { get; set; }
		
		/// <summary>
		/// The name of the loadmanagement group. Or string.empty if the station is not in a group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LoadmanagementGroupName { get; set; }
		
		/// <summary>
		/// Max allowed charging current in A
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedChargingCurrent { get; set; }
		
		/// <summary>
		/// Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDynamicCurrent { get; set; }
		
		/// <summary>
		/// Max. current of the loadmanagement group of this station (if there is any) in A
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLoadmanagementGroupCurrent { get; set; }
		
		/// <summary>
		/// Max. current of the station in A
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxStationCurrent { get; set; }
		
		/// <summary>
		/// Min. current of the station in A
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinStationCurrent { get; set; }
		
		/// <summary>
		/// Received Signal Strength Indicator for the connection mode (wifi or mobile). 
		///            -127 (min) to 0 (Max)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RSSI { get; set; }
		
		/// <summary>
		/// The state of the charging station
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceChargingStationState State { get; set; }
		
		/// <summary>
		/// The date of this values
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PicoChargingDataConnectionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkToCloudConnectionMode_NoConnection = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkToCloudConnectionMode_DirectWiFiConnection = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkToCloudConnectionMode_GPRSConnection = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkToCloudConnectionMode_NBIotConnection = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkToCloudConnectionMode_LteCatM1Connection = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkToCloudConnectionMode_MeshWiFiConnection = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkToCloudConnectionMode_MeshMobileConnection = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PicoChargingDataLastWarningOrError
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterDataloggerEvent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterRestart = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PowerDown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissingPhaseL1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissingPhaseL2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissingPhaseL3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TamperDetectionCover = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MagneticFieldDetection = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClockAdjusted = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Overvoltage = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Undervoltage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OvervoltageL1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OvervoltageL2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OvervoltageL3 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargingTransaction = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PicoErrorControllerPanic = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PicoErrorMidServicePanic = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PicoWarningRcdTriggered = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PicoWarningCableLockError = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PicoWarningDiodeFailure = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PicoWarningOverload = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PicoWarningHighTemperature = 21,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PicoChargingDataLoadSheddingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaxCurrent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HalfCurrent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MinCurrent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoCurrent = 3,
	}
	
	/// <summary>
	/// Api container for the charging station history
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PicoChargingHistoryData
	{
		
		/// <summary>
		/// The duration in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// The energy used (in kWh)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EnergyUsed { get; set; }
		
		/// <summary>
		/// The starttime of the charging (in UTC)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PicoChargingHistoryDataTransactionStopReason> TransactionStopReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PicoChargingHistoryDataTransactionStopReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CarDisconnected = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoteStop = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ErrorStop = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstallationMode = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CableError = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiodeError = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RcdError = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OverloadError = 8,
	}
	
	/// <summary>
	/// DTO for the pico loadmanagement group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PicoLoadmanagementGroupDto
	{
		
		/// <summary>
		/// The ID of the loadmanagement group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The max current of this loadmanagement group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxCurrent { get; set; }
		
		/// <summary>
		/// The name of the station
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of assigned stations
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfStations { get; set; }
	}
	
	/// <summary>
	/// DTO for the pico charging station settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PicoSettingsDto
	{
		
		/// <summary>
		/// The authentication type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PicoSettingsDtoAuthenticationType> AuthenticationType { get; set; }
		
		/// <summary>
		/// Flag if the car id detection is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CarIdDetection { get; set; }
		
		/// <summary>
		/// The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayBrightness { get; set; }
		
		/// <summary>
		/// The DNS name of the pico's internal ip
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DnsName { get; set; }
		
		/// <summary>
		/// Enable the fix lock of the charging cable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FixCableLockEnable { get; set; }
		
		/// <summary>
		/// The url of the idle image
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdleImageUrl { get; set; }
		
		/// <summary>
		/// The internal IP address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InternalIp { get; set; }
		
		/// <summary>
		/// The ID of the loadmanagement group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LoadmanagementGroupId { get; set; }
		
		/// <summary>
		/// The max current of this station (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCurrent { get; set; }
		
		/// <summary>
		/// The max current of this station (in A)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinCurrent { get; set; }
		
		/// <summary>
		/// Flag if ModbusTcp is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ModbusTcp { get; set; }
		
		/// <summary>
		/// The name of the station
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Serial number of the station
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PicoSettingsDtoAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Backend = 1,
	}
	
	/// <summary>
	/// Container class for the register realtime API API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterRealtimeApiData
	{
		
		/// <summary>
		/// The URL of your endpoint. To this endpoint all the values are send to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiUrl { get; set; }
		
		/// <summary>
		/// The Password (basic auth) of your endpoint. Leave empty of none.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BasicAuthPassword { get; set; }
		
		/// <summary>
		/// The Username (basic auth) of your endpoint. Leave empty of none.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BasicAuthUsername { get; set; }
		
		/// <summary>
		/// The ID of the registration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the Meter. Just used if the RegistrationType is "SingleMeterRegistration".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeterId { get; set; }
		
		/// <summary>
		/// The Type of this registration (per meter, per user, ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<RegisterRealtimeApiDataRegistrationType> RegistrationType { get; set; }
		
		/// <summary>
		/// The serial number of the Meter. Just used if the RegistrationType is "SingleMeterRegistration" and the MeterId is null. 
		///            Example: 1 SME 01 63000000 or 6300000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegisterRealtimeApiDataRegistrationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SingleMeterRegistration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserRegistration = 2,
	}
	
	/// <summary>
	/// API Container class for the meter configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SmartMeDeviceConfigurationContainer
	{
		
		/// <summary>
		/// The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceEncryptionKey { get; set; }
		
		/// <summary>
		/// PIN code to enter on a external meter (e.g. for the FNN meters)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DevicePinCode { get; set; }
		
		/// <summary>
		/// Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SmartMeDeviceConfigurationContainerDnsUpdateState> DnsUpdateState { get; set; }
		
		/// <summary>
		/// Enables or disables Modbus TCP (if the meter supports it).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableModbusTcp { get; set; }
		
		/// <summary>
		/// The ID of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The configuration for the intput outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputConfigurationContainer[] InputConfiguration { get; set; }
		
		/// <summary>
		/// The configuration for the external outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputConfigurationContainer[] OutputConfiguration { get; set; }
		
		/// <summary>
		/// Shows the reactive energy values (if the meter supports it).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowReactiveEnergy { get; set; }
		
		/// <summary>
		/// The configuration for the phase switches
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SwitchConfigurationContainer[] SwitchConfiguration { get; set; }
		
		/// <summary>
		/// Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SmartMeDeviceConfigurationContainerUploadInterval> UploadInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SmartMeDeviceConfigurationContainerDnsUpdateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoUpdate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DnsUpdatePublicIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DnsUpdateInternalIp = 2,
	}
	
	/// <summary>
	/// The configuration for a phase switch
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SwitchConfigurationContainer
	{
		
		/// <summary>
		/// Flag if the switch can be turned off or is always on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanSwitchOff { get; set; }
		
		/// <summary>
		/// The number of the phase. (e.g. 1 for Phase L1)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SmartMeDeviceConfigurationContainerUploadInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_1s = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_5s = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_10s = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_30s = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_60s = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_5min = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_15min = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_30min = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_60min = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_6h = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_12h = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadInterval_24h = 11,
	}
	
	/// <summary>
	/// Container data for the sub user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubUserData
	{
		
		/// <summary>
		/// The end date. until this date the user has access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AccessEndDate { get; set; }
		
		/// <summary>
		/// The start date. From this date the user has access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AccessTimeStartDate { get; set; }
		
		/// <summary>
		/// The Email adress
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The ID of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// If set this is used a new password
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// The permission level of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SubUserDataPermissionLevel> PermissionLevel { get; set; }
		
		/// <summary>
		/// The username
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubUserDataPermissionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SelectedFolderAndSubfoldersMeters = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SelectedFolderOnly = 1,
	}
	
	/// <summary>
	/// Container Class for the Web API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// The Users created by this users.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User[] ChildUsers { get; set; }
		
		/// <summary>
		/// The EMail Address of the User
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The ID of the User
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The ID of the user as string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdAsString { get; set; }
		
		/// <summary>
		/// Flag if this User is an Admin User
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
		
		/// <summary>
		/// Additional Permissions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// The Username of the User
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Actives a virtual Meter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VMeterToActivate
	{
		
		/// <summary>
		/// The Serialnumber of the Meter to activate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
	}
	
	/// <summary>
	/// Deactivates a virtual Meter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VMeterToDeactivate
	{
		
		/// <summary>
		/// The ID of the Virtual meter to deactivate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
	}
	
	/// <summary>
	/// API Container for a (Device) Value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValueData
	{
		
		/// <summary>
		/// The Obis code of this value. 
		///            A description you can find here:
		///            http://wiki.smart-me.com/index.php/Obis_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Obis { get; set; }
		
		/// <summary>
		/// The Value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// API Container for a Meter Value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValuesData
	{
		
		/// <summary>
		/// The Date of the Value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The ID of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// All values
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValueData[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VirtualTariff
	{
		
		/// <summary>
		/// Says how many of the active power is used in this tariff. This is calculated from the last meter values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Factor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<VirtualTariffType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
		
		/// <summary>
		/// The Counter Value of this tariff
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VirtualTariffType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Battery = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Solar = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Normal = 2,
	}
	
	/// <summary>
	/// Container class for the virtual tariff consumption
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VirtualTariffConsumptionData
	{
		
		/// <summary>
		/// The consumption (e.g. kWh) of this tariff
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Consumption { get; set; }
		
		/// <summary>
		/// The currency of the price
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// The Name of this virtual tariff
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The price of the energy in this timerange
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// The type of the virtual tariff (e.g. solar)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualTariffType TariffType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VirtualTariffsOfFolder
	{
		
		/// <summary>
		/// The DateTime (UTC) of this virtual tarfifs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FolderId { get; set; }
		
		/// <summary>
		/// The name of this folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VirtualTariff[] VirtualTariffs { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a Access Token to write on a Card (e.g. NFC)
		/// Creates a Access Token to write on a Card (e.g. NFC)
		/// AccessToken_Put api/AccessToken
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> AccessToken_PutAsync(AccessTokenToPut requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/AccessToken";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Account_Login api/Account/login
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Object> Account_LoginAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Account/login";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// AccountPost api/Account/login
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Object> AccountPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Account/login";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Set an action for the specified device.
		/// Set an action for the specified device.
		/// Actions_Post api/Actions
		/// </summary>
		/// <param name="requestBody">The Action Data</param>
		public async Task Actions_PostAsync(ActionToPost requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Actions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all available Actions of a Device
		/// Gets all available Actions of a Device
		/// Actions_Get api/Actions/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <returns>OK</returns>
		public async Task<ActionInformation[]> Actions_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Actions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ActionInformation[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the additional information (e.g. Firmware Version) about a device.
		/// Gets the additional information (e.g. Firmware Version) about a device.
		/// AdditionalDeviceInformation_Get api/AdditionalDeviceInformation/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <returns>OK</returns>
		public async Task<AdditionalDeviceInformation> AdditionalDeviceInformation_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/AdditionalDeviceInformation/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AdditionalDeviceInformation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all Custom Devices
		/// Gets all Devices
		/// CustomDevice_Get api/CustomDevice
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CustomDeviceToPost[]> CustomDevice_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/CustomDevice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomDeviceToPost[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a Custom Device or updates it's values.
		/// Creates or updates a Custom Device or updates it's values.
		/// A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.
		/// Only use a custom device for all non meters.
		/// For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
		/// To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
		/// CustomDevice_Post api/CustomDevice
		/// </summary>
		/// <param name="requestBody">Device object with all the data</param>
		/// <returns>OK</returns>
		public async Task<CustomDeviceToPost> CustomDevice_PostAsync(CustomDeviceToPost requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/CustomDevice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomDeviceToPost>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a Custom Device by it's ID
		/// Gets a Device by it's ID
		/// CustomDeviceGetById api/CustomDevice/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <returns>OK</returns>
		public async Task<CustomDeviceToPost> CustomDeviceGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/CustomDevice/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomDeviceToPost>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a Device by it's Serial Number. The Serial is the part before the "-".
		/// Gets a Device by it's Serial Number. The Serial is the part before the "-".
		/// DeviceBySerial_Get api/DeviceBySerial
		/// </summary>
		/// <param name="serial">The Serial Number of the device</param>
		/// <returns>OK</returns>
		public async Task<Device> DeviceBySerial_GetAsync(long serial, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/DeviceBySerial?serial="+serial;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all Devices
		/// Gets all Devices
		/// Devices_Get api/Devices
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device[]> Devices_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Devices";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a Device or updates it's values.
		/// Creates or updates a Device or updates it's values.
		/// For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.
		/// To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
		/// Devices_Post api/Devices
		/// </summary>
		/// <param name="requestBody">Device object with all the data</param>
		/// <returns>OK</returns>
		public async Task<DeviceToPost> Devices_PostAsync(DeviceToPost requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Devices";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeviceToPost>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a Device by it's ID
		/// Gets a Device by it's ID
		/// DevicesGetById api/Devices/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <returns>OK</returns>
		public async Task<Device> DevicesGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Devices/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the On/Off Switch on a device.
		/// For new implementations please use the "actions" command
		/// Updates the On/Off Switch on a device
		/// For new implementations please use the "actions" command
		/// Devices_Put api/Devices/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <param name="switchState">The new state of the switch</param>
		/// <param name="switchNumber">The number of the switch if there are multiple (1 for L1, 3 for L3)</param>
		/// <returns>OK</returns>
		public async Task<Object> Devices_PutAsync(string id, bool switchState, int switchNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Devices/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&switchState="+switchState+"&switchNumber="+switchNumber;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all Devices for an Energy Type
		/// Gets all Devices for an Energy Type
		/// DevicesByEnergy_Get api/DevicesByEnergy
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device[]> DevicesByEnergy_GetAsync(DeviceDeviceEnergyType meterEnergyType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/DevicesByEnergy?meterEnergyType=" + meterEnergyType;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all Devices by it's Sub Type (e.g. E-Charging Station)
		/// Gets all Devices by it's Sub Type (e.g. E-Charging Station)
		/// DevicesBySubType_Get api/DevicesBySubType
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device[]> DevicesBySubType_GetAsync(DeviceMeterSubType meterSubType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/DevicesBySubType?meterSubType=" + meterSubType;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Force a device to send the data every second (if supported). This for about 30s.
		/// Don't use this call to force a device to send the data every second for a longer time.
		/// FastSendDeviceValues_Get api/FastSendDeviceValues/{id}
		/// </summary>
		public async Task FastSendDeviceValues_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/FastSendDeviceValues/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Values for a folder or a meter
		/// Gets the Values for a folder or a meter
		/// Folder_Get api/Folder/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<FolderData> Folder_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Folder/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FolderData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the folder menu items (each item might contain child items)
		/// FolderMenu_Get api/FolderMenu
		/// </summary>
		/// <param name="filter">(optional) Filter for the folders and meters: 
		///            all: load everything
		///            assigned: load only folders and meters that are assigend to a folder
		///            unassigend: load only meters that are not assigend to a folder
		///            user: load only folder and all users assigned to this folders
		///            subuserlist: load all subusers as a list</param>
		/// <returns>OK</returns>
		public async Task<FolderMenuConfiguration> FolderMenu_GetAsync(string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/FolderMenu?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FolderMenuConfiguration>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates and updates the folder menu items
		/// FolderMenu_Post api/FolderMenu
		/// </summary>
		public async Task FolderMenu_PostAsync(FolderMenuConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/FolderMenu";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// A method returning HTTP 200 OK when queried.
		/// It is used by Kubernetes probes to determine whether the app is healthy.
		/// Health_Get api/Health
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Object> Health_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Health";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// M-BUS API: Adds data of a M-BUS Meter to the smart-me Cloud.
		/// Just send us the M-BUS Telegram (RSP_UD) and we will do the Rest.
		/// M-BUS API: Adds data of a M-BUS Meter to the smart-me Cloud.
		/// Just send us the M-BUS Telegram (RSP_UD) and we will do the Rest.
		/// MBus_Post api/MBus
		/// </summary>
		/// <param name="requestBody">The M-BUS Telegram</param>
		/// <returns>OK</returns>
		public async Task<Object> MBus_PostAsync(MBusData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/MBus";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the Name of a Meter or a Folder
		/// Sets the Name of a Meter or a Folder
		/// MeterFolderInformation_Post api/MeterFolderInformation
		/// </summary>
		public async Task MeterFolderInformation_PostAsync(MeterFolderInformationToPost requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/MeterFolderInformation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Beta: Gets the General Information for a Meter or a Folder
		/// Beta: Gets the General Information for a Meter or a Folder
		/// MeterFolderInformation_Get api/MeterFolderInformation/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<MeterFolderInformation> MeterFolderInformation_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/MeterFolderInformation/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MeterFolderInformation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the Values for a Meter at a given Date.
		/// The first Value found before the given Date is returned.
		/// Gets the Values for a Meter at a given Date. The first Value found before the given Date is returned.
		/// MeterValues_Get api/MeterValues/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DeviceInPast> MeterValues_GetAsync(string id, System.DateTimeOffset date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/MeterValues/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&date=" + date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeviceInPast>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all registrations for the Realtime API.
		/// Gets all registrations for the Realtime API.
		/// RegisterForRealtimeApi_Get api/RegisterForRealtimeApi
		/// </summary>
		/// <returns>OK</returns>
		public async Task<RegisterRealtimeApiData[]> RegisterForRealtimeApi_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/RegisterForRealtimeApi";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegisterRealtimeApiData[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud.
		/// More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
		/// Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud. More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
		/// RegisterForRealtimeApi_Post api/RegisterForRealtimeApi
		/// </summary>
		public async Task RegisterForRealtimeApi_PostAsync(RegisterRealtimeApiData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/RegisterForRealtimeApi";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a realtime API registration.
		/// Deletes a realtime API registration.
		/// RegisterForRealtimeApi_Delete api/RegisterForRealtimeApi/{id}
		/// </summary>
		/// <param name="id">The ID of the realtime API registration</param>
		public async Task RegisterForRealtimeApi_DeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/RegisterForRealtimeApi/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the configuration of a smart-me device. The device needs to be online.
		/// SmartMeDeviceConfiguration_Post api/SmartMeDeviceConfiguration
		/// </summary>
		public async Task SmartMeDeviceConfiguration_PostAsync(SmartMeDeviceConfigurationContainer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/SmartMeDeviceConfiguration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the configuration of a smart-me device.
		/// SmartMeDeviceConfiguration_Get api/SmartMeDeviceConfiguration/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SmartMeDeviceConfigurationContainer> SmartMeDeviceConfiguration_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/SmartMeDeviceConfiguration/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SmartMeDeviceConfigurationContainer>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a subuser.
		/// To create a new user set no ID (empty)
		/// SubUser_Post api/SubUser
		/// </summary>
		public async Task SubUser_PostAsync(SubUserData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/SubUser";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a subuser
		/// SubUser_Delete api/SubUser/{id}
		/// </summary>
		public async Task SubUser_DeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/SubUser/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a sub user. The user must be assigend to the user that makes this call.
		/// SubUser_Get api/SubUser/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SubUserData> SubUser_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/SubUser/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubUserData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Triggers user account deletion.
		/// User_Delete api/User
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Object> User_DeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/User";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the informations for the user.
		/// Gets the informations for the user.
		/// User_Get api/User
		/// </summary>
		/// <returns>OK</returns>
		public async Task<User> User_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/User";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all (last) values of a device
		/// Values_Get api/Values/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <returns>OK</returns>
		public async Task<ValuesData> Values_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Values/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ValuesData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all (last) values of a device
		/// The first Value found before the given Date is returned.
		/// Gets the Values for a device at a given Date. The first Value found before the given Date is returned.
		/// ValuesInPast_Get api/ValuesInPast/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <param name="date">the date of the value</param>
		/// <returns>OK</returns>
		public async Task<ValuesData> ValuesInPast_GetAsync(string id, System.DateTimeOffset date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ValuesInPast/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&date=" + date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ValuesData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets multiple values of a device. This call needs a smart-me professional licence.
		/// ValuesInPastMultiple_Get api/ValuesInPastMultiple/{id}
		/// </summary>
		/// <param name="id">The ID of the device</param>
		/// <param name="startDate">The date when the first value should start</param>
		/// <param name="endDate">The date when the last value should start</param>
		/// <param name="interval">The interval in minutes betwenn the values. 0 means as fast as possible. Only 1000 values can be get in one call.</param>
		/// <returns>OK</returns>
		public async Task<ValuesData[]> ValuesInPastMultiple_GetAsync(string id, System.DateTimeOffset startDate, System.DateTimeOffset endDate, int interval, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ValuesInPastMultiple/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&interval="+interval;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ValuesData[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Beta: Gets all active virtual meters
		/// Beta: Gets all active virtual meters.
		/// VirtualBillingMeterActive_Get api/VirtualBillingMeterActive
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device[]> VirtualBillingMeterActive_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualBillingMeterActive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Beta: Virtual Meter API: Activates a Meter and add the Consumption to a Virtual Meter assosiated with the User.
		/// Beta: Virtual Meter API: Activates a Meter and add the Consumption to a Virtual Meter assosiated with the User.
		/// VirtualBillingMeterActive_Post api/VirtualBillingMeterActive
		/// </summary>
		/// <param name="requestBody">The Meter to activate</param>
		/// <returns>OK</returns>
		public async Task<Device> VirtualBillingMeterActive_PostAsync(VMeterToActivate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualBillingMeterActive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Beta: Virtual Meter API: Deactivates a Virtual Meter.
		/// Beta: Virtual Meter API: Deactivates a Virtual Meter.
		/// VirtualBillingMeterDeactivate_Post api/VirtualBillingMeterDeactivate
		/// </summary>
		/// <param name="requestBody">The Meter to activate</param>
		/// <returns>OK</returns>
		public async Task<Object> VirtualBillingMeterDeactivate_PostAsync(VMeterToDeactivate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualBillingMeterDeactivate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Beta: Gets all Meters available to activate as a Virtual Meter.
		/// Beta: Gets all Meters available to activate as a Virtual Meter.
		/// VirtualBillingMeters_Get api/VirtualBillingMeters
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device[]> VirtualBillingMeters_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualBillingMeters";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculates a virtual meter from a formula.
		/// A meter is coded as ID("METERID")
		/// Calculates a virtual meter from a formula.
		/// 
		/// A meter is coded as ID("METERID")
		/// Ariphmetical operators:
		/// ()  parentheses;
		/// +   plus (a + b);
		/// -  minus (a - b);
		/// *  multiplycation symbol (a * b);
		/// /  divide symbol (a / b);
		/// Example: (ID("63ac09cb-4e5f-4f3e-bd27-ad8c30bdfc0c") + ID("0209555e-9dc4-4e84-a166-a864488b4b12")) * 2
		/// VirtualMeterCalculateFormula_Get api/VirtualMeterCalculateFormula
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device> VirtualMeterCalculateFormula_GetAsync(string formula, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualMeterCalculateFormula?formula=" + (formula==null? "" : System.Uri.EscapeDataString(formula));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all Virtual Tariffs of a user
		/// Gets all Virtual Tariffs of a user
		/// VirtualTariff_Get api/VirtualTariff
		/// </summary>
		/// <returns>OK</returns>
		public async Task<VirtualTariffsOfFolder[]> VirtualTariff_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualTariff";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VirtualTariffsOfFolder[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all virtual tariffs of a folder
		/// Gets all virtual tariffs of a folder
		/// VirtualTariffGetById api/VirtualTariff/{id}
		/// </summary>
		/// <param name="id">The ID of the Folder</param>
		/// <returns>OK</returns>
		public async Task<VirtualTariffsOfFolder> VirtualTariffGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualTariff/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VirtualTariffsOfFolder>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the consumption of a folder with a virtuall tariffs.
		/// Gets the consumption of a folder with a virtuall tariffs.
		/// VirtualTariffConsumption_Get api/VirtualTariffConsumption
		/// </summary>
		/// <param name="folderId">The ID of the Folder</param>
		/// <param name="startDate">The start date (UTC)</param>
		/// <param name="endDate">The end date (UTC)</param>
		/// <returns>OK</returns>
		public async Task<VirtualTariffConsumptionData[]> VirtualTariffConsumption_GetAsync(string folderId, System.DateTimeOffset startDate, System.DateTimeOffset endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualTariffConsumption?folderId=" + (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VirtualTariffConsumptionData[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all Virtual Tariffs for a property (folder)
		/// Gets all Virtual Tariffs for a property (folder)
		/// VirtualTariffsForProperty_Get api/VirtualTariffsForProperty/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<VirtualTariffsOfFolder[]> VirtualTariffsForProperty_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualTariffsForProperty/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VirtualTariffsOfFolder[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the calculation status for a virtual tariff property
		/// VirtualTariffsStatusForProperty_Get api/VirtualTariffsStatusForProperty/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> VirtualTariffsStatusForProperty_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/VirtualTariffsStatusForProperty/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Assign a folder (source) or meter to another folder (target). Can be used to create a folder structure.
		/// FolderAssign_Post api/folder/assign
		/// </summary>
		/// <param name="source">The ID of the meter or folder that should be assign</param>
		/// <param name="target">The ID of the meter or folder that should be the parent</param>
		public async Task FolderAssign_PostAsync(string source, string target, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/folder/assign?source=" + (source==null? "" : System.Uri.EscapeDataString(source))+"&target=" + (target==null? "" : System.Uri.EscapeDataString(target));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a folder
		/// FolderSettings_Delete api/folder/settings/{id}
		/// </summary>
		/// <param name="id">The ID of the folder</param>
		public async Task FolderSettings_DeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/folder/settings/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the settings of a folder or meter
		/// FolderSettings_Get api/folder/settings/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<FolderSettings> FolderSettings_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/folder/settings/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FolderSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add or edit a folder or a meter. To add a new folder use and empty ID
		/// FolderSettings_Post api/folder/settings/{id}
		/// </summary>
		/// <param name="id">The ID of the folder or meter to edit. Use and empty ID to add a new folder</param>
		/// <param name="requestBody">The folder or meter data</param>
		/// <returns>OK</returns>
		public async Task<FolderMenuItem> FolderSettings_PostAsync(string id, FolderSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/folder/settings/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FolderMenuItem>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a user to folder assignement
		/// UserToFolderAssign_Delete api/folder/user/assign
		/// </summary>
		/// <param name="source">The ID of the user that should be de-assign</param>
		/// <param name="target">The ID of the folder</param>
		public async Task UserToFolderAssign_DeleteAsync(string source, string target, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/folder/user/assign?source=" + (source==null? "" : System.Uri.EscapeDataString(source))+"&target=" + (target==null? "" : System.Uri.EscapeDataString(target));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Assign a user to a folder
		/// UserToFolderAssign_Post api/folder/user/assign
		/// </summary>
		/// <param name="source">The ID of the user that should be assign</param>
		/// <param name="target">The ID of the folder that should be the parent</param>
		/// <param name="oldFolder">The ID of the old folder (in case of a drag and drop to a new folder)</param>
		public async Task UserToFolderAssign_PostAsync(string source, string target, string oldFolder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/folder/user/assign?source=" + (source==null? "" : System.Uri.EscapeDataString(source))+"&target=" + (target==null? "" : System.Uri.EscapeDataString(target))+"&oldFolder=" + (oldFolder==null? "" : System.Uri.EscapeDataString(oldFolder));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// OAuth_Authorize api/oauth/authorize
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Object> OAuth_AuthorizeAsync(string client_id, string redirect_uri, string state, string scope, string client_secret, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/oauth/authorize?client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope))+"&client_secret=" + (client_secret==null? "" : System.Uri.EscapeDataString(client_secret));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// OAuthPostByClient_idAndRedirect_uriAndStateAndScopeAndClient_secret api/oauth/authorize
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Object> OAuthPostByClient_idAndRedirect_uriAndStateAndScopeAndClient_secretAsync(string client_id, string redirect_uri, string state, string scope, string client_secret, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/oauth/authorize?client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope))+"&client_secret=" + (client_secret==null? "" : System.Uri.EscapeDataString(client_secret));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all pico charging stations for this user
		/// Pico_Get api/pico
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Device[]> Pico_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the active charging data of a pico station
		/// PicoCharging_Get api/pico/charging/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PicoChargingData> PicoCharging_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico/charging/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PicoChargingData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the last charging history for a pico station
		/// PicoChargingHistory_Get api/pico/history/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PicoChargingHistoryData[]> PicoChargingHistory_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico/history/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PicoChargingHistoryData[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET: api/pico/loadmanagementgroup
		/// 
		/// Returns all available load management groups
		/// PicoLoadmanagementGroupGet api/pico/loadmanagementgroup
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PicoLoadmanagementGroupDto[]> PicoLoadmanagementGroupGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico/loadmanagementgroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PicoLoadmanagementGroupDto[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the dynamic current of a load management group or a single station.
		/// PicoLoadmanagementSetDynamicCurrent_Post api/pico/loadmanagementgroup/current/{serial}
		/// </summary>
		/// <param name="serial">The serial number can be any pico serial in the group (e.g. 700001)</param>
		/// <param name="current">The dynamic current of the group (in mA)</param>
		/// <returns>OK</returns>
		public async Task<Object> PicoLoadmanagementSetDynamicCurrent_PostAsync(long serial, int current, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico/loadmanagementgroup/current/"+serial+"?current="+current;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET: api/pico/loadmanagementgroup
		/// 
		/// Returns a pico load management group by it's id
		/// PicoLoadmanagementGroup_Get api/pico/loadmanagementgroup/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PicoLoadmanagementGroupDto> PicoLoadmanagementGroup_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico/loadmanagementgroup/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PicoLoadmanagementGroupDto>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GET: api/pico/settings
		/// 
		/// Returns the settings of a pico charging station.
		/// PicoSettings_Get api/pico/settings/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PicoSettingsDto> PicoSettings_GetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico/settings/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PicoSettingsDto>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Try to fix lock the cable of a pico. The pico must be online and a cable (without car) needs to be connected. Otherwise this will fail.
		/// PicoEnableFixCableLock_Post api/pico/tryenablecablelock/{id}
		/// </summary>
		/// <param name="id">The ID of the pico</param>
		/// <returns>OK</returns>
		public async Task<Object> PicoEnableFixCableLock_PostAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pico/tryenablecablelock/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
