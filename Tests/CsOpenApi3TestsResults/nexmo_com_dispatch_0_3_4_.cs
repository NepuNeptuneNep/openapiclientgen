//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioProperty
	{
		
		/// <summary>
		/// The URL of the audio attachment. `messenger` supports .mp3. `whatsapp` supports .aac, .m4a, .amr, .mp3 and .opus.
		/// Min length: 1
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.Length(1, 2000)]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The error format is standardized to the 4xx/5xx range with a code and a human readable explanation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invalid_parameters")]
		public ErrorInvalid_parameters Invalid_parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ErrorInvalid_parameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Please note that last message does not have failover attribute inside it. All other messages must contain a failover attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailoverProperty
	{
		
		/// <summary>
		/// Set the status the message must reach in the expiry_time before failing over. Options are delivered or read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition_status")]
		public System.Nullable<FailoverPropertyCondition_status> Condition_status { get; set; }
		
		/// <summary>
		/// In seconds. Minimum value is 15 and maximum value is 86,400 seconds (1 day).
		/// Minimum: 15
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry_time")]
		[System.ComponentModel.DataAnnotations.Range(15, 86400)]
		public System.Nullable<System.Int32> Expiry_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailoverPropertyCondition_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileProperty
	{
		
		/// <summary>
		/// Additional text to accompany the image. Supported by WhatsApp and MMS.
		/// Min length: 1
		/// Max length: 3000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		[System.ComponentModel.DataAnnotations.Length(1, 3000)]
		public string Caption { get; set; }
		
		/// <summary>
		/// The URL of the file attachment. `messenger` supports a wide range of attachments including .zip, .csv and .pdf. `whatsapp` supports .pdf, .doc(x), .ppt(x) and .xls(x).
		/// Min length: 1
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.Length(1, 2000)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FromProperty
	{
		
		/// <summary>
		/// Your ID for the platform that you are sending from.
		///
		///**Messenger**: This value should be the `to.id` value you received in the inbound messenger event.
		///
		///**Viber**: This is your Service Message ID given to you by your Vonage Account Manager. To find out more please visit [vonage.com](https://www.vonage.com/communications-apis/messages/).
		///
		///**SMS**: **MMS**: or **WhatsApp** This value is not required.
		///
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string Id { get; set; }
		
		/// <summary>
		/// **SMS**: or **MMS**: The phone number of the message sender in the [E.164](https://en.wikipedia.org/wiki/E.164) format.
		///
		///**WhatsApp**: This is your WhatsApp Business Number given to you by your Vonage Account Manager. To find out more please visit [vonage.com](https://www.vonage.com/communications-apis/messages/).
		///
		///**Messenger**: or **Viber**: This value is not required.
		///
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string Number { get; set; }
		
		/// <summary>
		/// The type of message that you want to send.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FromPropertyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FromPropertyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		viber_service_msg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messenger = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whatsapp = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageProperty
	{
		
		/// <summary>
		/// Additional text to accompany the image. Supported by WhatsApp and MMS.
		/// Min length: 1
		/// Max length: 3000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		[System.ComponentModel.DataAnnotations.Length(1, 3000)]
		public string Caption { get; set; }
		
		/// <summary>
		/// The URL of the image attachment. `messenger` and `mms` supports .jpg, .jpeg, .png and .gif. `viber_service_msg` supports .jpg .jpeg, and .png. `whatsapp` supports .jpg .jpeg, and .png.
		/// Min length: 1
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.Length(1, 2000)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageProperty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public MessagePropertyContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messenger")]
		public MessagePropertyMessenger Messenger { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viber_service_msg")]
		public MessagePropertyViber_service_msg Viber_service_msg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="whatsapp")]
		public MessagePropertyWhatsapp Whatsapp { get; set; }
	}
	
	public class MessagePropertyContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="audio")]
		public AudioProperty Audio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file")]
		public FileProperty File { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageProperty Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public TemplateProperty Template { get; set; }
		
		/// <summary>
		/// The text of the message.
		///
		///**Messenger**: Is limited to 640 characters
		///
		///**SMS** or **Viber**: Is 1000 characters
		///
		///**WhatsApp**: is 4096 characters
		///
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.Length(1, 4096)]
		public string Text { get; set; }
		
		/// <summary>
		/// The type of message that you are sending.
		///
		///**Messenger**: supports `text`, `image`, `audio`, `video` and `file`.
		///
		///**Viber Business Messages**: supports `image` and `text`.
		///
		///**WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.
		///
		///**SMS**: supports `text`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MessagePropertyContentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="video")]
		public VideoProperty Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TemplateProperty
	{
		
		/// <summary>
		/// The name of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public TemplatePropertyParameters[] TemplatePropertyParameters { get; set; }
	}
	
	public class TemplatePropertyParameters
	{
		
		/// <summary>
		/// The parameters are an array. The first value being {{1}} in the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public string Default { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessagePropertyContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		video = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		template = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoProperty
	{
		
		/// <summary>
		/// The URL of the video attachment.
		///
		///**messenger** supports .mp4
		///
		///**whatsapp** supports .mp4 and .3gpp. Note, only H.264 video codec and AAC audio codec is supported.
		///
		/// Min length: 1
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.Length(1, 2000)]
		public string Url { get; set; }
	}
	
	public class MessagePropertyMessenger
	{
		
		/// <summary>
		/// The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<MessagePropertyMessengerCategory> Category { get; set; }
		
		/// <summary>
		/// ‘A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessagePropertyMessengerCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		response = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		update = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		message_tag = 2,
	}
	
	public class MessagePropertyViber_service_msg
	{
		
		/// <summary>
		/// The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative and a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<MessagePropertyViber_service_msgCategory> Category { get; set; }
		
		/// <summary>
		/// Only valid for Viber Business Messages. Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
		/// Minimum: 30
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.Range(30, 86400)]
		public System.Nullable<System.Int32> Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessagePropertyViber_service_msgCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transaction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		promotion = 1,
	}
	
	public class MessagePropertyWhatsapp
	{
		
		/// <summary>
		/// We are using the industry standard, BCP 47, for locales. So in your API call to the /messages API you will need to put “en-GB” and this will refer to the “en_GB” template for WhatsApp. A full list of the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public System.Nullable<MessagePropertyWhatsappPolicy> Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessagePropertyWhatsappPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fallback = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deterministic = 1,
	}
	
	/// <summary>
	/// The callbacks for the message status are the same as defined in the Messaging API. The only difference will be that dispatch_uuid and link will be appended.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MessageStatus_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public MessageStatusError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public FromProperty From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		/// <summary>
		/// The status of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<MessageStatusStatus> Status { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public ToProperty To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public MessageStatusUsage Usage { get; set; }
	}
	
	public class MessageStatus_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="workflow")]
		public MessageStatus_linksWorkflow Workflow { get; set; }
	}
	
	public class MessageStatus_linksWorkflow
	{
		
		[System.Runtime.Serialization.DataMember(Name="dispatch_uuid")]
		public string Dispatch_uuid { get; set; }
		
		/// <summary>
		/// Please note GET is not currently supported
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class MessageStatusError
	{
		
		/// <summary>
		/// The error code. See [our errors list](/api-errors/messages-olympus) for a list of possible errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Text describing the error. See [our errors list](/api-errors/messages-olympus) for a list of possible errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undeliverable = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ToProperty
	{
		
		/// <summary>
		/// The ID of the message recipient.
		///
		///**Messenger**: This value should be the `from.id` value you received in the inbound messenger event.
		///
		///**SMS**: or **Viber**: or **WhatsApp** This value is not required.
		///
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string Id { get; set; }
		
		/// <summary>
		/// **SMS**: or **MMS**: or **Viber**: or **WhatsApp** The phone number of the message recipient in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		///**Messenger**: This value is not required.
		///
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string Number { get; set; }
		
		/// <summary>
		/// The type of message that you want to send.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FromPropertyType Type { get; set; }
	}
	
	public class MessageStatusUsage
	{
		
		/// <summary>
		/// The charge currency in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public System.Nullable<MessageStatusUsageCurrency> Currency { get; set; }
		
		/// <summary>
		/// The charge amount as a stringified number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageStatusUsageCurrency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Response
	{
		
		/// <summary>
		/// The parent ID for workflow request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dispatch_uuid")]
		public string Dispatch_uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWorkflow
	{
		
		/// <summary>
		/// The template that the Dispatch API will execute. For the initial version of the API the only available value will be failover
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public System.Nullable<CreateWorkflowTemplate> Template { get; set; }
		
		/// <summary>
		/// Contains a message object that must reflect the current /messages resource. All parameters within the content object reflect the /messages docs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflow")]
		public string[] Workflow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateWorkflowTemplate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failover = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FinalReport
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FinalReport_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dispatch_uuid")]
		public string Dispatch_uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<FinalReportStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public CreateWorkflowTemplate Template { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// This is the total cost of your Workflow request. Please note if a preceding message in the workflow request is delivered after the final message in the workflow is delivered it may not reflect the true total cost of the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public FinalReportUsage Usage { get; set; }
	}
	
	public class FinalReport_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public FinalReport_linksMessages[] FinalReport_linksMessages { get; set; }
	}
	
	public class FinalReport_linksMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<FinalReport_linksMessagesChannel> Channel { get; set; }
		
		/// <summary>
		/// Please note GET is not currently supported
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MessageStatusStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public FinalReport_linksMessagesUsage Usage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FinalReport_linksMessagesChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messenger = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		viber_sevice_msg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sms = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whatsapp = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mms = 4,
	}
	
	public class FinalReport_linksMessagesUsage
	{
		
		/// <summary>
		/// The charge currency in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public MessageStatusUsageCurrency Currency { get; set; }
		
		/// <summary>
		/// The charge amount as a stringified number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FinalReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 1,
	}
	
	public class FinalReportUsage
	{
		
		/// <summary>
		/// The charge currency in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public MessageStatusUsageCurrency Currency { get; set; }
		
		/// <summary>
		/// The charge amount as a stringified number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
	}
	
	/// <summary>
	/// Send Message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendMessage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public FromProperty From { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public MessageProperty Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public ToProperty To { get; set; }
	}
	
	/// <summary>
	/// Send With Failover Message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendWithFailoverMessage
	{
		
		/// <summary>
		/// Please note that last message does not have failover attribute inside it. All other messages must contain a failover attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failover")]
		public FailoverProperty Failover { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public FromProperty From { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public MessageProperty Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public ToProperty To { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a workflow
		/// CreateWorkflow 
		/// </summary>
		/// <param name="requestBody">Please note that last message does not have failover attribute inside it. All other messages must contain a failover attribute.</param>
		public async Task CreateWorkflowAsync(CreateWorkflow requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
