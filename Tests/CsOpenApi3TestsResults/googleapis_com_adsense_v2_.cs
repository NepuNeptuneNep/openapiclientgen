//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Representation of an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// Output only. Creation time of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Display name of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the account. Format: accounts/pub-[0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Outstanding tasks that need to be completed as part of the sign-up process for a new account. e.g. "billing-profile-creation", "phone-pin-verification".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingTasks")]
		public string[] PendingTasks { get; set; }
		
		/// <summary>
		/// Output only. Whether this account is premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premium")]
		public System.Nullable<System.Boolean> Premium { get; set; }
		
		/// <summary>
		/// Output only. State of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AccountState> State { get; set; }
		
		/// <summary>
		/// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public TimeZone TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEEDS_ATTENTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 3,
	}
	
	/// <summary>
	/// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeZone
	{
		
		/// <summary>
		/// IANA Time Zone Database time zone, e.g. "America/New_York".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. IANA Time Zone Database version number, e.g. "2019a".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Representation of an ad blocking recovery tag. See https://support.google.com/adsense/answer/11575177.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdBlockingRecoveryTag
	{
		
		/// <summary>
		/// Error protection code that can be used in conjunction with the tag. It'll display a message to users if an [ad blocking extension blocks their access to your site](https://support.google.com/adsense/answer/11575480).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorProtectionCode")]
		public string ErrorProtectionCode { get; set; }
		
		/// <summary>
		/// The ad blocking recovery tag. Note that the message generated by the tag can be blocked by an ad blocking extension. If this is not your desired outcome, then you'll need to use it in conjunction with the error protection code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Representation of an ad client. An ad client represents a user's subscription with a specific AdSense product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdClient
	{
		
		/// <summary>
		/// Output only. Resource name of the ad client. Format: accounts/{account}/adclients/{adclient}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Reporting product code of the ad client. For example, "AFC" for AdSense for Content. Corresponds to the `PRODUCT_CODE` dimension, and present only if the ad client supports reporting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// Output only. Unique ID of the ad client as used in the `AD_CLIENT_ID` reporting dimension. Present only if the ad client supports reporting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingDimensionId")]
		public string ReportingDimensionId { get; set; }
		
		/// <summary>
		/// Output only. State of the ad client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AdClientState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdClientState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GETTING_READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRES_REVIEW = 3,
	}
	
	/// <summary>
	/// Representation of the AdSense code for a given ad client. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdClientAdCode
	{
		
		/// <summary>
		/// Output only. The AdSense code snippet to add to the head of an HTML page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adCode")]
		public string AdCode { get; set; }
		
		/// <summary>
		/// Output only. The AdSense code snippet to add to the body of an AMP page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ampBody")]
		public string AmpBody { get; set; }
		
		/// <summary>
		/// Output only. The AdSense code snippet to add to the head of an AMP page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ampHead")]
		public string AmpHead { get; set; }
	}
	
	/// <summary>
	/// Representation of an ad unit. An ad unit represents a saved ad unit with a specific set of ad settings that have been customized within an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnit
	{
		
		/// <summary>
		/// Settings specific to content ads (AFC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAdsSettings")]
		public ContentAdsSettings ContentAdsSettings { get; set; }
		
		/// <summary>
		/// Required. Display name of the ad unit, as provided when the ad unit was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the ad unit. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Unique ID of the ad unit as used in the `AD_UNIT_ID` reporting dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingDimensionId")]
		public string ReportingDimensionId { get; set; }
		
		/// <summary>
		/// Required. State of the ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AdUnitState> State { get; set; }
	}
	
	/// <summary>
	/// Settings specific to content ads (AFC).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentAdsSettings
	{
		
		/// <summary>
		/// Required. Size of the ad unit. e.g. "728x90", "1x3" (for responsive ad units).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Required. Type of the ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ContentAdsSettingsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentAdsSettingsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARTICLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCHED_CONTENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdUnitState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
	}
	
	/// <summary>
	/// Representation of the ad unit code for a given ad unit. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634) and [Where to place the ad code in your HTML](https://support.google.com/adsense/answer/9190028).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnitAdCode
	{
		
		/// <summary>
		/// Output only. The code snippet to add to the body of an HTML page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adCode")]
		public string AdCode { get; set; }
	}
	
	/// <summary>
	/// Representation of an alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Alert
	{
		
		/// <summary>
		/// Output only. The localized alert message. This may contain HTML markup, such as phrase elements or links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the alert. Format: accounts/{account}/alerts/{alert}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Severity of this alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<AlertSeverity> Severity { get; set; }
		
		/// <summary>
		/// Output only. Type of alert. This identifies the broad type of this alert, and provides a stable machine-readable identifier that will not be translated. For example, "payment-hold".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AlertSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERE = 3,
	}
	
	/// <summary>
	/// Cell representation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cell
	{
		
		/// <summary>
		/// Value in the cell. The dimension cells contain strings, and the metric cells contain numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Representation of a custom channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomChannel
	{
		
		/// <summary>
		/// Whether the custom channel is active and collecting data. See https://support.google.com/adsense/answer/10077192.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Required. Display name of the custom channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the custom channel. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Unique ID of the custom channel as used in the `CUSTOM_CHANNEL_ID` reporting dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingDimensionId")]
		public string ReportingDimensionId { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// The header information of the columns requested in the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Header
	{
		
		/// <summary>
		/// The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) of this column. Only present if the header type is METRIC_CURRENCY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required. Name of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Type of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<HeaderType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HeaderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIMENSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_TALLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_RATIO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_CURRENCY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_MILLISECONDS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_DECIMAL = 6,
	}
	
	/// <summary>
	/// Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpBody
	{
		
		/// <summary>
		/// The HTTP Content-Type header value specifying the content type of the body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The HTTP request/response body as raw binary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Application specific response metadata. Must be set in the first response for streaming APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
	}
	
	/// <summary>
	/// Response definition for the account list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountsResponse
	{
		
		/// <summary>
		/// The accounts returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response definition for the ad client list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdClientsResponse
	{
		
		/// <summary>
		/// The ad clients returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adClients")]
		public AdClient[] AdClients { get; set; }
		
		/// <summary>
		/// Continuation token used to page through ad clients. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response definition for the adunit list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdUnitsResponse
	{
		
		/// <summary>
		/// The ad units returned in the list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnits")]
		public AdUnit[] AdUnits { get; set; }
		
		/// <summary>
		/// Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response definition for the alerts list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAlertsResponse
	{
		
		/// <summary>
		/// The alerts returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alerts")]
		public Alert[] Alerts { get; set; }
	}
	
	/// <summary>
	/// Response definition for the child account list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListChildAccountsResponse
	{
		
		/// <summary>
		/// The accounts returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response definition for the custom channel list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomChannelsResponse
	{
		
		/// <summary>
		/// The custom channels returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customChannels")]
		public CustomChannel[] CustomChannels { get; set; }
		
		/// <summary>
		/// Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response definition for the ad units linked to a custom channel list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLinkedAdUnitsResponse
	{
		
		/// <summary>
		/// The ad units returned in the list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnits")]
		public AdUnit[] AdUnits { get; set; }
		
		/// <summary>
		/// Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response definition for the custom channels linked to an adunit list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLinkedCustomChannelsResponse
	{
		
		/// <summary>
		/// The custom channels returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customChannels")]
		public CustomChannel[] CustomChannels { get; set; }
		
		/// <summary>
		/// Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response definition for the payments list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPaymentsResponse
	{
		
		/// <summary>
		/// The payments returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public Payment[] Payments { get; set; }
	}
	
	/// <summary>
	/// Representation of an unpaid or paid payment. See [Payment timelines for AdSense](https://support.google.com/adsense/answer/7164703) for more information about payments and the [YouTube homepage and payments account](https://support.google.com/adsense/answer/11622510) article for information about dedicated payments accounts for YouTube.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Payment
	{
		
		/// <summary>
		/// Output only. The amount of unpaid or paid earnings, as a formatted string, including the currency. E.g. "¥1,235 JPY", "$1,234.57", "£87.65".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the payment. Format: - accounts/{account}/payments/unpaid for unpaid (current) AdSense earnings. - accounts/{account}/payments/youtube-unpaid for unpaid (current) YouTube earnings. - accounts/{account}/payments/yyyy-MM-dd for paid AdSense earnings. - accounts/{account}/payments/youtube-yyyy-MM-dd for paid YouTube earnings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response definition for the saved reports list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSavedReportsResponse
	{
		
		/// <summary>
		/// Continuation token used to page through reports. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The reports returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savedReports")]
		public SavedReport[] SavedReports { get; set; }
	}
	
	/// <summary>
	/// Representation of a saved report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedReport
	{
		
		/// <summary>
		/// Output only. Resource name of the report. Format: accounts/{account}/reports/{report}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Report title as specified by publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Response definition for the sites list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSitesResponse
	{
		
		/// <summary>
		/// Continuation token used to page through sites. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The sites returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public Site[] Sites { get; set; }
	}
	
	/// <summary>
	/// Representation of a Site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Site
	{
		
		/// <summary>
		/// Whether auto ads is turned on for the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoAdsEnabled")]
		public System.Nullable<System.Boolean> AutoAdsEnabled { get; set; }
		
		/// <summary>
		/// Domain (or subdomain) of the site, e.g. "example.com" or "www.example.com". This is used in the `OWNED_SITE_DOMAIN_NAME` reporting dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Output only. Resource name of a site. Format: accounts/{account}/sites/{site}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Unique ID of the site as used in the `OWNED_SITE_ID` reporting dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingDimensionId")]
		public string ReportingDimensionId { get; set; }
		
		/// <summary>
		/// Output only. State of a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SiteState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SiteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRES_REVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GETTING_READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEEDS_ATTENTION = 4,
	}
	
	/// <summary>
	/// Response definition for the url channels list rpc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUrlChannelsResponse
	{
		
		/// <summary>
		/// Continuation token used to page through url channels. To retrieve the next page of the results, set the next request's "page_token" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The url channels returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlChannels")]
		public UrlChannel[] UrlChannels { get; set; }
	}
	
	/// <summary>
	/// Representation of a URL channel. URL channels allow you to track the performance of particular pages in your site; see [URL channels](https://support.google.com/adsense/answer/2923836) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlChannel
	{
		
		/// <summary>
		/// Output only. Resource name of the URL channel. Format: accounts/{account}/adclients/{adclient}/urlchannels/{urlchannel}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Unique ID of the custom channel as used in the `URL_CHANNEL_ID` reporting dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingDimensionId")]
		public string ReportingDimensionId { get; set; }
		
		/// <summary>
		/// URI pattern of the channel. Does not include "http://" or "https://". Example: www.example.com/home
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriPattern")]
		public string UriPattern { get; set; }
	}
	
	/// <summary>
	/// Result of a generated report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportResult
	{
		
		/// <summary>
		/// Row representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averages")]
		public Row Averages { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// The header information; one for each dimension in the request, followed by one for each metric in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public Header[] Headers { get; set; }
		
		/// <summary>
		/// The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public Row[] Rows { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
		
		/// <summary>
		/// The total number of rows matched by the report request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMatchedRows")]
		public string TotalMatchedRows { get; set; }
		
		/// <summary>
		/// Row representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public Row Totals { get; set; }
		
		/// <summary>
		/// Any warnings associated with generation of the report. These warnings are always returned in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Row representation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Row
	{
		
		/// <summary>
		/// Cells in the row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public Cell[] Cells { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all accounts available to this user.
		/// Adsense_accounts_list v2/accounts
		/// </summary>
		/// <param name="pageSize">The maximum number of accounts to include in the response, used for paging. If unspecified, at most 10000 accounts will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAccounts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAccounts` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccountsResponse> Adsense_accounts_listAsync(int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/accounts?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAccountsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates an ad hoc report.
		/// Adsense_accounts_reports_generate v2/{account}/reports:generate
		/// </summary>
		/// <param name="account">Required. The account which owns the collection of reports. Format: accounts/{account}</param>
		/// <param name="currencyCode">The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.</param>
		/// <param name="dateRange">Date range of the report, if unset the range will be considered CUSTOM.</param>
		/// <param name="dimensions">Dimensions to base the report on.</param>
		/// <param name="endDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="endDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="endDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="filters">A list of [filters](/adsense/management/reporting/filtering) to apply to the report. All provided filters must match in order for the data to be included in the report.</param>
		/// <param name="languageCode">The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).</param>
		/// <param name="limit">The maximum number of rows of report data to return. Reports producing more rows than the requested limit will be truncated. If unset, this defaults to 100,000 rows for `Reports.GenerateReport` and 1,000,000 rows for `Reports.GenerateCsvReport`, which are also the maximum values permitted here. Report truncation can be identified (for `Reports.GenerateReport` only) by comparing the number of rows returned to the value returned in `total_matched_rows`.</param>
		/// <param name="metrics">Required. Reporting metrics.</param>
		/// <param name="orderBy">The name of a dimension or metric to sort the resulting report on, can be prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.</param>
		/// <param name="reportingTimeZone">Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).</param>
		/// <param name="startDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="startDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="startDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportResult> Adsense_accounts_reports_generateAsync(
					string account, 
					string currencyCode, 
					Adsense_accounts_reports_generateDateRange dateRange, 
					string[] dimensions, 
					int endDate_day, 
					int endDate_month, 
					int endDate_year, 
					string[] filters, 
					string languageCode, 
					int limit, 
					string[] metrics, 
					string[] orderBy, 
					Adsense_accounts_reports_generateReportingTimeZone reportingTimeZone, 
					int startDate_day, 
					int startDate_month, 
					int startDate_year, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (account==null? "" : System.Uri.EscapeDataString(account))+"/reports:generate&currencyCode=" + (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode))+"&dateRange=" + dateRange+"&"+string.Join("&", dimensions.Select(z => $"dimensions={System.Uri.EscapeDataString(z.ToString())}"))+"&endDate.day="+endDate_day+"&endDate.month="+endDate_month+"&endDate.year="+endDate_year+"&"+string.Join("&", filters.Select(z => $"filters={System.Uri.EscapeDataString(z.ToString())}"))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&limit="+limit+"&"+string.Join("&", metrics.Select(z => $"metrics={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", orderBy.Select(z => $"orderBy={System.Uri.EscapeDataString(z.ToString())}"))+"&reportingTimeZone=" + reportingTimeZone+"&startDate.day="+startDate_day+"&startDate.month="+startDate_month+"&startDate.year="+startDate_year;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates a csv formatted ad hoc report.
		/// Adsense_accounts_reports_generateCsv v2/{account}/reports:generateCsv
		/// </summary>
		/// <param name="account">Required. The account which owns the collection of reports. Format: accounts/{account}</param>
		/// <param name="currencyCode">The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.</param>
		/// <param name="dateRange">Date range of the report, if unset the range will be considered CUSTOM.</param>
		/// <param name="dimensions">Dimensions to base the report on.</param>
		/// <param name="endDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="endDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="endDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="filters">A list of [filters](/adsense/management/reporting/filtering) to apply to the report. All provided filters must match in order for the data to be included in the report.</param>
		/// <param name="languageCode">The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).</param>
		/// <param name="limit">The maximum number of rows of report data to return. Reports producing more rows than the requested limit will be truncated. If unset, this defaults to 100,000 rows for `Reports.GenerateReport` and 1,000,000 rows for `Reports.GenerateCsvReport`, which are also the maximum values permitted here. Report truncation can be identified (for `Reports.GenerateReport` only) by comparing the number of rows returned to the value returned in `total_matched_rows`.</param>
		/// <param name="metrics">Required. Reporting metrics.</param>
		/// <param name="orderBy">The name of a dimension or metric to sort the resulting report on, can be prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.</param>
		/// <param name="reportingTimeZone">Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).</param>
		/// <param name="startDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="startDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="startDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Adsense_accounts_reports_generateCsvAsync(
					string account, 
					string currencyCode, 
					Adsense_accounts_reports_generateDateRange dateRange, 
					string[] dimensions, 
					int endDate_day, 
					int endDate_month, 
					int endDate_year, 
					string[] filters, 
					string languageCode, 
					int limit, 
					string[] metrics, 
					string[] orderBy, 
					Adsense_accounts_reports_generateReportingTimeZone reportingTimeZone, 
					int startDate_day, 
					int startDate_month, 
					int startDate_year, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (account==null? "" : System.Uri.EscapeDataString(account))+"/reports:generateCsv&currencyCode=" + (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode))+"&dateRange=" + dateRange+"&"+string.Join("&", dimensions.Select(z => $"dimensions={System.Uri.EscapeDataString(z.ToString())}"))+"&endDate.day="+endDate_day+"&endDate.month="+endDate_month+"&endDate.year="+endDate_year+"&"+string.Join("&", filters.Select(z => $"filters={System.Uri.EscapeDataString(z.ToString())}"))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&limit="+limit+"&"+string.Join("&", metrics.Select(z => $"metrics={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", orderBy.Select(z => $"orderBy={System.Uri.EscapeDataString(z.ToString())}"))+"&reportingTimeZone=" + reportingTimeZone+"&startDate.day="+startDate_day+"&startDate.month="+startDate_month+"&startDate.year="+startDate_year;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
		/// Adsense_accounts_adclients_customchannels_delete v2/{name}
		/// </summary>
		/// <param name="name">Required. Name of the custom channel to delete. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel}</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Adsense_accounts_adclients_customchannels_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about the selected site.
		/// Adsense_accounts_sites_get v2/{name}
		/// </summary>
		/// <param name="name">Required. Name of the site. Format: accounts/{account}/sites/{site}</param>
		/// <returns>Successful response</returns>
		public async Task<Site> Adsense_accounts_sites_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Site>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
		/// Adsense_accounts_adclients_customchannels_patch v2/{name}
		/// </summary>
		/// <param name="name">Output only. Resource name of the custom channel. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel}</param>
		/// <param name="updateMask">The list of fields to update. If empty, a full update is performed.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsense_accounts_adclients_customchannels_patchAsync(string name, string updateMask, CustomChannel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomChannel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the ad blocking recovery tag of an account.
		/// Adsense_accounts_getAdBlockingRecoveryTag v2/{name}/adBlockingRecoveryTag
		/// </summary>
		/// <param name="name">Required. The name of the account to get the tag for. Format: accounts/{account}</param>
		/// <returns>Successful response</returns>
		public async Task<AdBlockingRecoveryTag> Adsense_accounts_getAdBlockingRecoveryTagAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/adBlockingRecoveryTag";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AdBlockingRecoveryTag>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the ad unit code for a given ad unit. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634) and [Where to place the ad code in your HTML](https://support.google.com/adsense/answer/9190028).
		/// Adsense_accounts_adclients_adunits_getAdcode v2/{name}/adcode
		/// </summary>
		/// <param name="name">Required. Name of the adunit for which to get the adcode. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit}</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnitAdCode> Adsense_accounts_adclients_adunits_getAdcodeAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/adcode";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AdUnitAdCode>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the saved report from the given resource name.
		/// Adsense_accounts_reports_getSaved v2/{name}/saved
		/// </summary>
		/// <param name="name">Required. The name of the saved report to retrieve. Format: accounts/{account}/reports/{report}</param>
		/// <returns>Successful response</returns>
		public async Task<SavedReport> Adsense_accounts_reports_getSavedAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/saved";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SavedReport>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates a saved report.
		/// Adsense_accounts_reports_saved_generate v2/{name}/saved:generate
		/// </summary>
		/// <param name="name">Required. Name of the saved report. Format: accounts/{account}/reports/{report}</param>
		/// <param name="currencyCode">The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.</param>
		/// <param name="dateRange">Date range of the report, if unset the range will be considered CUSTOM.</param>
		/// <param name="endDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="endDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="endDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="languageCode">The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).</param>
		/// <param name="reportingTimeZone">Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).</param>
		/// <param name="startDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="startDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="startDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportResult> Adsense_accounts_reports_saved_generateAsync(string name, string currencyCode, Adsense_accounts_reports_generateDateRange dateRange, int endDate_day, int endDate_month, int endDate_year, string languageCode, Adsense_accounts_reports_generateReportingTimeZone reportingTimeZone, int startDate_day, int startDate_month, int startDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/saved:generate&currencyCode=" + (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode))+"&dateRange=" + dateRange+"&endDate.day="+endDate_day+"&endDate.month="+endDate_month+"&endDate.year="+endDate_year+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&reportingTimeZone=" + reportingTimeZone+"&startDate.day="+startDate_day+"&startDate.month="+startDate_month+"&startDate.year="+startDate_year;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates a csv formatted saved report.
		/// Adsense_accounts_reports_saved_generateCsv v2/{name}/saved:generateCsv
		/// </summary>
		/// <param name="name">Required. Name of the saved report. Format: accounts/{account}/reports/{report}</param>
		/// <param name="currencyCode">The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.</param>
		/// <param name="dateRange">Date range of the report, if unset the range will be considered CUSTOM.</param>
		/// <param name="endDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="endDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="endDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <param name="languageCode">The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).</param>
		/// <param name="reportingTimeZone">Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).</param>
		/// <param name="startDate_day">Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.</param>
		/// <param name="startDate_month">Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.</param>
		/// <param name="startDate_year">Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Adsense_accounts_reports_saved_generateCsvAsync(string name, string currencyCode, Adsense_accounts_reports_generateDateRange dateRange, int endDate_day, int endDate_month, int endDate_year, string languageCode, Adsense_accounts_reports_generateReportingTimeZone reportingTimeZone, int startDate_day, int startDate_month, int startDate_year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/saved:generateCsv&currencyCode=" + (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode))+"&dateRange=" + dateRange+"&endDate.day="+endDate_day+"&endDate.month="+endDate_month+"&endDate.year="+endDate_year+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&reportingTimeZone=" + reportingTimeZone+"&startDate.day="+startDate_day+"&startDate.month="+startDate_month+"&startDate.year="+startDate_year;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the ad clients available in an account.
		/// Adsense_accounts_adclients_list v2/{parent}/adclients
		/// </summary>
		/// <param name="parent">Required. The account which owns the collection of ad clients. Format: accounts/{account}</param>
		/// <param name="pageSize">The maximum number of ad clients to include in the response, used for paging. If unspecified, at most 10000 ad clients will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAdClients` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAdClients` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdClientsResponse> Adsense_accounts_adclients_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adclients&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdClientsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all ad units under a specified account and ad client.
		/// Adsense_accounts_adclients_adunits_list v2/{parent}/adunits
		/// </summary>
		/// <param name="parent">Required. The ad client which owns the collection of ad units. Format: accounts/{account}/adclients/{adclient}</param>
		/// <param name="pageSize">The maximum number of ad units to include in the response, used for paging. If unspecified, at most 10000 ad units will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAdUnits` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAdUnits` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdUnitsResponse> Adsense_accounts_adclients_adunits_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adunits&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdUnitsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an ad unit. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product. Note that ad units can only be created for ad clients with an "AFC" product code. For more info see the [AdClient resource](/adsense/management/reference/rest/v2/accounts.adclients). For now, this method can only be used to create `DISPLAY` ad units. See: https://support.google.com/adsense/answer/9183566
		/// Adsense_accounts_adclients_adunits_create v2/{parent}/adunits
		/// </summary>
		/// <param name="parent">Required. Ad client to create an ad unit under. Format: accounts/{account}/adclients/{adclient}</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsense_accounts_adclients_adunits_createAsync(string parent, AdUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adunits";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AdUnit>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the alerts available in an account.
		/// Adsense_accounts_alerts_list v2/{parent}/alerts
		/// </summary>
		/// <param name="parent">Required. The account which owns the collection of alerts. Format: accounts/{account}</param>
		/// <param name="languageCode">The language to use for translating alert messages. If unspecified, this defaults to the user's display language. If the given language is not supported, alerts will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).</param>
		/// <returns>Successful response</returns>
		public async Task<ListAlertsResponse> Adsense_accounts_alerts_listAsync(string parent, string languageCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/alerts&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAlertsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the custom channels available in an ad client.
		/// Adsense_accounts_adclients_customchannels_list v2/{parent}/customchannels
		/// </summary>
		/// <param name="parent">Required. The ad client which owns the collection of custom channels. Format: accounts/{account}/adclients/{adclient}</param>
		/// <param name="pageSize">The maximum number of custom channels to include in the response, used for paging. If unspecified, at most 10000 custom channels will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListCustomChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCustomChannels` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomChannelsResponse> Adsense_accounts_adclients_customchannels_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customchannels&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCustomChannelsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
		/// Adsense_accounts_adclients_customchannels_create v2/{parent}/customchannels
		/// </summary>
		/// <param name="parent">Required. The ad client to create a custom channel under. Format: accounts/{account}/adclients/{adclient}</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsense_accounts_adclients_customchannels_createAsync(string parent, CustomChannel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customchannels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomChannel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the payments available for an account.
		/// Adsense_accounts_payments_list v2/{parent}/payments
		/// </summary>
		/// <param name="parent">Required. The account which owns the collection of payments. Format: accounts/{account}</param>
		/// <returns>Successful response</returns>
		public async Task<ListPaymentsResponse> Adsense_accounts_payments_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/payments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPaymentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists saved reports.
		/// Adsense_accounts_reports_saved_list v2/{parent}/reports/saved
		/// </summary>
		/// <param name="parent">Required. The account which owns the collection of reports. Format: accounts/{account}</param>
		/// <param name="pageSize">The maximum number of reports to include in the response, used for paging. If unspecified, at most 10000 reports will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListSavedReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSavedReports` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSavedReportsResponse> Adsense_accounts_reports_saved_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reports/saved&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSavedReportsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the sites available in an account.
		/// Adsense_accounts_sites_list v2/{parent}/sites
		/// </summary>
		/// <param name="parent">Required. The account which owns the collection of sites. Format: accounts/{account}</param>
		/// <param name="pageSize">The maximum number of sites to include in the response, used for paging. If unspecified, at most 10000 sites will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListSites` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSites` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSitesResponse> Adsense_accounts_sites_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/sites&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSitesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists active url channels.
		/// Adsense_accounts_adclients_urlchannels_list v2/{parent}/urlchannels
		/// </summary>
		/// <param name="parent">Required. The ad client which owns the collection of url channels. Format: accounts/{account}/adclients/{adclient}</param>
		/// <param name="pageSize">The maximum number of url channels to include in the response, used for paging. If unspecified, at most 10000 url channels will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListUrlChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListUrlChannels` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUrlChannelsResponse> Adsense_accounts_adclients_urlchannels_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/urlchannels&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListUrlChannelsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all accounts directly managed by the given AdSense account.
		/// Adsense_accounts_listChildAccounts v2/{parent}:listChildAccounts
		/// </summary>
		/// <param name="parent">Required. The parent account, which owns the child accounts. Format: accounts/{account}</param>
		/// <param name="pageSize">The maximum number of accounts to include in the response, used for paging. If unspecified, at most 10000 accounts will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListChildAccounts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListChildAccounts` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListChildAccountsResponse> Adsense_accounts_listChildAccountsAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":listChildAccounts&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListChildAccountsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the ad units available for a custom channel.
		/// Adsense_accounts_adclients_customchannels_listLinkedAdUnits v2/{parent}:listLinkedAdUnits
		/// </summary>
		/// <param name="parent">Required. The custom channel which owns the collection of ad units. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel}</param>
		/// <param name="pageSize">The maximum number of ad units to include in the response, used for paging. If unspecified, at most 10000 ad units will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListLinkedAdUnits` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListLinkedAdUnits` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLinkedAdUnitsResponse> Adsense_accounts_adclients_customchannels_listLinkedAdUnitsAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":listLinkedAdUnits&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLinkedAdUnitsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the custom channels available for an ad unit.
		/// Adsense_accounts_adclients_adunits_listLinkedCustomChannels v2/{parent}:listLinkedCustomChannels
		/// </summary>
		/// <param name="parent">Required. The ad unit which owns the collection of custom channels. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit}</param>
		/// <param name="pageSize">The maximum number of custom channels to include in the response, used for paging. If unspecified, at most 10000 custom channels will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListLinkedCustomChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListLinkedCustomChannels` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLinkedCustomChannelsResponse> Adsense_accounts_adclients_adunits_listLinkedCustomChannelsAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":listLinkedCustomChannels&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLinkedCustomChannelsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Adsense_accounts_reports_generateDateRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORTING_DATE_RANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TODAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YESTERDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH_TO_DATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_TO_DATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_7_DAYS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_30_DAYS = 7,
	}
	
	public enum Adsense_accounts_reports_generateReportingTimeZone
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORTING_TIME_ZONE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_TIME_ZONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_TIME_ZONE = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
