//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// `APIReference`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIReference
	{
		
		/// <summary>
		/// Resource index for shorthand searching.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Name of the referenced resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// URL of the referenced resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// `APIReferenceList`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIReferenceList
	{
		
		/// <summary>
		/// Total number of resources available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public APIReference[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbilityBonus
	{
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ability_score")]
		public APIReference Ability_score { get; set; }
		
		/// <summary>
		/// Bonus amount for this ability score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bonus")]
		public System.Nullable<System.Double> Bonus { get; set; }
	}
	
	/// <summary>
	/// `AbilityScore`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbilityScore : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Alignment`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Alignment : APIReference
	{
		
		/// <summary>
		/// Abbreviation/initials/acronym for the alignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// Brief description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AreaOfEffect
	{
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AreaOfEffectType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AreaOfEffectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sphere")]
		sphere = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cone")]
		cone = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cylinder")]
		cylinder = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line")]
		line = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cube")]
		cube = 4,
	}
	
	/// <summary>
	/// `Armor`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Armor : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Background`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Background : APIReference
	{
		
		/// <summary>
		/// `Choice`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bonds")]
		public Choice Bonds { get; set; }
		
		/// <summary>
		/// Special feature granted to new characters of this background.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public BackgroundFeature Feature { get; set; }
		
		/// <summary>
		/// `Choice`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flaws")]
		public Choice Flaws { get; set; }
		
		/// <summary>
		/// `Choice`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ideals")]
		public Choice Ideals { get; set; }
		
		/// <summary>
		/// `Choice`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_options")]
		public Choice Language_options { get; set; }
		
		/// <summary>
		/// Choice of personality traits for this background.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personality_traits")]
		public string Personality_traits { get; set; }
		
		/// <summary>
		/// Starting equipment for all new characters of this background.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_equipment")]
		public APIReference[] Starting_equipment { get; set; }
		
		/// <summary>
		/// `Choice`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_equipment_options")]
		public Choice Starting_equipment_options { get; set; }
		
		/// <summary>
		/// Starting proficiencies for all new characters of this background.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_proficiencies")]
		public APIReference[] Starting_proficiencies { get; set; }
	}
	
	/// <summary>
	/// `Choice`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Choice
	{
		
		/// <summary>
		/// Number of items to pick from the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="choose")]
		public System.Nullable<System.Double> Choose { get; set; }
		
		/// <summary>
		/// Description of the choice to be made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
		
		/// <summary>
		/// `Option Set`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public OptionSet From { get; set; }
		
		/// <summary>
		/// Type of the resources to choose from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class BackgroundFeature
	{
		
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// `Class`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Class : APIReference
	{
		
		/// <summary>
		/// URL of the level resource for the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class_levels")]
		public string Class_levels { get; set; }
		
		/// <summary>
		/// Hit die of the class. (ex: 12 == 1d12).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hit_die")]
		public System.Nullable<System.Double> Hit_die { get; set; }
		
		/// <summary>
		/// `Multiclassing`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multi_classing")]
		public Multiclassing Multi_classing { get; set; }
		
		/// <summary>
		/// List of starting proficiencies for all new characters of this class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proficiencies")]
		public APIReference[] Proficiencies { get; set; }
		
		/// <summary>
		/// List of choices of starting proficiencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proficiency_choices")]
		public Choice[] Proficiency_choices { get; set; }
		
		/// <summary>
		/// Saving throws the class is proficient in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saving_throws")]
		public APIReference[] Saving_throws { get; set; }
		
		/// <summary>
		/// `Spellcasting`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellcasting")]
		public Spellcasting Spellcasting { get; set; }
		
		/// <summary>
		/// URL of the spell resource list for the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spells")]
		public string Spells { get; set; }
		
		/// <summary>
		/// List of equipment and their quantities all players of the class start with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_equipment")]
		public ClassStarting_equipment[] ClassStarting_equipment { get; set; }
		
		/// <summary>
		/// List of choices of starting equipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_equipment_options")]
		public Choice[] Starting_equipment_options { get; set; }
		
		/// <summary>
		/// List of all possible subclasses this class can specialize in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subclasses")]
		public APIReference[] Subclasses { get; set; }
	}
	
	/// <summary>
	/// `Multiclassing`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Multiclassing
	{
		
		/// <summary>
		/// List of choices of prerequisites to meet for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerequisite_options")]
		public Choice[] Prerequisite_options { get; set; }
		
		/// <summary>
		/// List of prerequisites that must be met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerequisites")]
		public Prerequisite[] Prerequisites { get; set; }
		
		/// <summary>
		/// List of proficiencies available when multiclassing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proficiencies")]
		public APIReference[] Proficiencies { get; set; }
		
		/// <summary>
		/// List of choices of proficiencies that are given when multiclassing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proficiency_choices")]
		public Choice[] Proficiency_choices { get; set; }
	}
	
	/// <summary>
	/// `Prerequisite`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Prerequisite
	{
		
		[System.Runtime.Serialization.DataMember(Name="ability_score")]
		public APIReference Ability_score { get; set; }
		
		/// <summary>
		/// Minimum score to meet the prerequisite.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum_score")]
		public System.Nullable<System.Double> Minimum_score { get; set; }
	}
	
	/// <summary>
	/// `Spellcasting`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Spellcasting
	{
		
		/// <summary>
		/// Descriptions of the class' ability to cast spells.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public SpellcastingInfo[] SpellcastingInfo { get; set; }
		
		/// <summary>
		/// Level at which the class can start using its spellcasting abilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Double> Level { get; set; }
		
		/// <summary>
		/// Reference to the `AbilityScore` used for spellcasting by the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellcasting_ability")]
		public APIReference Spellcasting_ability { get; set; }
	}
	
	public class SpellcastingInfo
	{
		
		/// <summary>
		/// Feature description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
		
		/// <summary>
		/// Feature name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ClassStarting_equipment
	{
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipment")]
		public APIReference Equipment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
	}
	
	/// <summary>
	/// `ClassLevel`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClassLevel
	{
		
		/// <summary>
		/// Total number of ability score bonuses gained, added from previous levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ability_score_bonuses")]
		public System.Nullable<System.Double> Ability_score_bonuses { get; set; }
		
		/// <summary>
		/// Class specific information such as dice values for bard songs and number of warlock invocations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class_specific")]
		public ClassLevelClass_specific Class_specific { get; set; }
		
		/// <summary>
		/// Features automatically gained at this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public APIReference[] Features { get; set; }
		
		/// <summary>
		/// Resource index for shorthand searching.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// The number value for the current level object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Double> Level { get; set; }
		
		/// <summary>
		/// Proficiency bonus for this class at the specified level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prof_bonus")]
		public System.Nullable<System.Double> Prof_bonus { get; set; }
		
		/// <summary>
		/// Summary of spells known at this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellcasting")]
		public ClassLevelSpellcasting Spellcasting { get; set; }
		
		/// <summary>
		/// URL of the referenced resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ClassLevelClass_specific
	{
		
		[System.Runtime.Serialization.DataMember(Name="brutal_critical_dice")]
		public System.Nullable<System.Double> Brutal_critical_dice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rage_count")]
		public System.Nullable<System.Double> Rage_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rage_damage_bonus")]
		public System.Nullable<System.Double> Rage_damage_bonus { get; set; }
	}
	
	public class ClassLevelSpellcasting
	{
		
		[System.Runtime.Serialization.DataMember(Name="cantrips_known")]
		public System.Nullable<System.Double> Cantrips_known { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_1")]
		public System.Nullable<System.Double> Spell_slots_level_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_2")]
		public System.Nullable<System.Double> Spell_slots_level_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_3")]
		public System.Nullable<System.Double> Spell_slots_level_3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_4")]
		public System.Nullable<System.Double> Spell_slots_level_4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_5")]
		public System.Nullable<System.Double> Spell_slots_level_5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_6")]
		public System.Nullable<System.Double> Spell_slots_level_6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_7")]
		public System.Nullable<System.Double> Spell_slots_level_7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_8")]
		public System.Nullable<System.Double> Spell_slots_level_8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_9")]
		public System.Nullable<System.Double> Spell_slots_level_9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spells_known")]
		public System.Nullable<System.Double> Spells_known { get; set; }
	}
	
	/// <summary>
	/// `Condition`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Condition : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Cost`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cost
	{
		
		/// <summary>
		/// Numerical amount of coins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Unit of coinage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// `DC`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DC
	{
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dc_type")]
		public APIReference Dc_type { get; set; }
		
		/// <summary>
		/// Value to beat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dc_value")]
		public System.Nullable<System.Double> Dc_value { get; set; }
		
		/// <summary>
		/// Result of a successful save. Can be \"none\", \"half\", or \"other\"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success_type")]
		public string Success_type { get; set; }
	}
	
	/// <summary>
	/// `Damage`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Damage
	{
		
		[System.Runtime.Serialization.DataMember(Name="damage_dice")]
		public string Damage_dice { get; set; }
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damage_type")]
		public APIReference Damage_type { get; set; }
	}
	
	/// <summary>
	/// 'Spell Damage'
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DamageAtCharacterLevel
	{
		
		[System.Runtime.Serialization.DataMember(Name="damage_at_character_level")]
		public string Damage_at_character_level { get; set; }
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damage_type")]
		public APIReference Damage_type { get; set; }
	}
	
	/// <summary>
	/// 'Spell Damage'
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DamageAtSlotLevel
	{
		
		[System.Runtime.Serialization.DataMember(Name="damage_at_slot_level")]
		public string Damage_at_slot_level { get; set; }
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damage_type")]
		public APIReference Damage_type { get; set; }
	}
	
	/// <summary>
	/// `DamageType`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DamageType : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Equipment`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Equipment
	{
	}
	
	/// <summary>
	/// `EquipmentCategory`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EquipmentCategory : APIReference
	{
		
		/// <summary>
		/// A list of the equipment that falls into this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipment")]
		public APIReference[] Equipment { get; set; }
	}
	
	/// <summary>
	/// `EquipmentPack`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EquipmentPack : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Feat`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Feat : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Feature`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Feature : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Gear`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Gear : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Language`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Language : APIReference
	{
		
		/// <summary>
		/// Brief description of the language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
		
		/// <summary>
		/// Script used for writing in the language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LanguageType> Type { get; set; }
		
		/// <summary>
		/// List of races that tend to speak the language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typical_speakers")]
		public string[] Typical_speakers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LanguageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Standard")]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Exotic")]
		Exotic = 1,
	}
	
	/// <summary>
	/// `MagicItem`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MagicItem : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `MagicSchool`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MagicSchool : APIReference
	{
		
		/// <summary>
		/// Brief description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
	}
	
	/// <summary>
	/// `Monster`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Monster : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Option`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Option
	{
	}
	
	/// <summary>
	/// `Option Set`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionSet
	{
	}
	
	/// <summary>
	/// `Proficiency`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Proficiency : APIReference
	{
		
		/// <summary>
		/// Classes that start with this proficiency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classes")]
		public APIReference[] Classes { get; set; }
		
		/// <summary>
		/// Races that start with this proficiency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="races")]
		public APIReference[] Races { get; set; }
		
		/// <summary>
		/// `APIReference` to the full description of the related resource.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public APIReference Reference { get; set; }
		
		/// <summary>
		/// The general category of the proficiency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// `Race`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Race : APIReference
	{
		
		/// <summary>
		/// Racial bonuses to ability scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ability_bonuses")]
		public AbilityBonus[] Ability_bonuses { get; set; }
		
		/// <summary>
		/// Flavor description of possible ages for this race.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public string Age { get; set; }
		
		/// <summary>
		/// Flavor description of likely alignments this race takes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public string Alignment { get; set; }
		
		/// <summary>
		/// Flavor description of the languages this race knows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_desc")]
		public string Language_desc { get; set; }
		
		/// <summary>
		/// Starting languages for all new characters of this race.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public APIReference[] Languages { get; set; }
		
		/// <summary>
		/// Size class of this race.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Flavor description of height and weight for this race.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size_description")]
		public string Size_description { get; set; }
		
		/// <summary>
		/// Base move speed for this race (in feet per round).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
		
		/// <summary>
		/// Starting proficiencies for all new characters of this race.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_proficiencies")]
		public APIReference[] Starting_proficiencies { get; set; }
		
		/// <summary>
		/// `Choice`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_proficiency_options")]
		public Choice Starting_proficiency_options { get; set; }
		
		/// <summary>
		/// All possible subraces that this race includes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subraces")]
		public APIReference[] Subraces { get; set; }
		
		/// <summary>
		/// Racial traits that provide benefits to its members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traits")]
		public APIReference[] Traits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceDescription
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Rule`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rule : APIReference
	{
		
		/// <summary>
		/// Description of the rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
		
		/// <summary>
		/// List of sections for each subheading underneath the rule in the SRD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subsections")]
		public APIReference[] Subsections { get; set; }
	}
	
	/// <summary>
	/// `RuleSection`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleSection : APIReference
	{
		
		/// <summary>
		/// Description of the rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
	}
	
	/// <summary>
	/// `Skill`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Skill : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Spell`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Spell : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `SpellPrerequisite`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpellPrerequisite : APIReference
	{
		
		/// <summary>
		/// The type of prerequisite.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// `Subclass`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subclass : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `SubclassLevel`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubclassLevel
	{
		
		/// <summary>
		/// Total number of ability score bonuses gained, added from previous levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ability_score_bonuses")]
		public System.Nullable<System.Double> Ability_score_bonuses { get; set; }
		
		/// <summary>
		/// Class specific information such as dice values for bard songs and number of warlock invocations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classspecific")]
		public object Classspecific { get; set; }
		
		/// <summary>
		/// List of features gained at this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public APIReference[] Features { get; set; }
		
		/// <summary>
		/// Resource index for shorthand searching.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Number value for the current level object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Double> Level { get; set; }
		
		/// <summary>
		/// Proficiency bonus for this class at the specified level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prof_bonus")]
		public System.Nullable<System.Double> Prof_bonus { get; set; }
		
		/// <summary>
		/// Summary of spells known at this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellcasting")]
		public SubclassLevelSpellcasting Spellcasting { get; set; }
		
		/// <summary>
		/// URL of the referenced resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class SubclassLevelSpellcasting
	{
		
		[System.Runtime.Serialization.DataMember(Name="cantrips_known")]
		public System.Nullable<System.Double> Cantrips_known { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_1")]
		public System.Nullable<System.Double> Spell_slots_level_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_2")]
		public System.Nullable<System.Double> Spell_slots_level_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_3")]
		public System.Nullable<System.Double> Spell_slots_level_3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_4")]
		public System.Nullable<System.Double> Spell_slots_level_4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_5")]
		public System.Nullable<System.Double> Spell_slots_level_5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_6")]
		public System.Nullable<System.Double> Spell_slots_level_6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_7")]
		public System.Nullable<System.Double> Spell_slots_level_7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_8")]
		public System.Nullable<System.Double> Spell_slots_level_8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spell_slots_level_9")]
		public System.Nullable<System.Double> Spell_slots_level_9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spells_known")]
		public System.Nullable<System.Double> Spells_known { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubclassLevelResource
	{
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public APIReference Class { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public APIReference[] Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Double> Level { get; set; }
		
		/// <summary>
		/// `APIReference`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subclass")]
		public APIReference Subclass { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// `Subrace`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subrace : APIReference
	{
		
		/// <summary>
		/// Additional ability bonuses for the subrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ability_bonuses")]
		public AbilityBonus[] Ability_bonuses { get; set; }
		
		/// <summary>
		/// Description of the subrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string Desc { get; set; }
		
		/// <summary>
		/// `Choice`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_options")]
		public Choice Language_options { get; set; }
		
		/// <summary>
		/// Starting languages for all new characters of the subrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public APIReference[] Languages { get; set; }
		
		/// <summary>
		/// Parent race for the subrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="race")]
		public APIReference Race { get; set; }
		
		/// <summary>
		/// List of traits that for the subrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="racial_traits")]
		public APIReference[] Racial_traits { get; set; }
		
		/// <summary>
		/// Starting proficiencies for all new characters of the subrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_proficiencies")]
		public APIReference[] Starting_proficiencies { get; set; }
	}
	
	/// <summary>
	/// `Trait`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Trait : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// `Weapon`
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Weapon : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	/// <summary>
	/// WeaponProperty
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WeaponProperty : APIReference
	{
		
		/// <summary>
		/// Description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desc")]
		public string[] Desc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error_response
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all resource URLs.
		/// Making a request to the API's base URL returns an object containing available endpoints.
		/// ApiGet api
		/// </summary>
		/// <returns>OK</returns>
		public async Task<System.Collections.Generic.Dictionary<string, string>> ApiGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, string>>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an ability score by index.
		/// # Ability Score
		/// 
		/// Represents one of the six abilities that describes a creature's physical and mental characteristics. The three main rolls of the game - the ability check, the saving throw, and the attack roll - rely on the ability scores. [[SRD p76](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=76)]
		/// 
		/// ApiAbility_scores_indexGet api/ability-scores/{index}
		/// </summary>
		/// <param name="index">The `index` of the ability score to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<AbilityScore> ApiAbility_scores_indexGetAsync(ApiAbility_scores_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ability-scores/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AbilityScore>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an alignment by index.
		/// # Alignment
		/// 
		/// A typical creature in the game world has an alignment, which broadly describes its moral and personal attitudes. Alignment is a combination of two factors: one identifies morality (good, evil, or neutral), and the other describes attitudes toward society and order (lawful, chaotic, or neutral). Thus, nine distinct alignments define the possible combinations.[[SRD p58](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=58)]
		/// 
		/// ApiAlignments_indexGet api/alignments/{index}
		/// </summary>
		/// <param name="index">The `index` of the alignment to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Alignment> ApiAlignments_indexGetAsync(ApiAlignments_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/alignments/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Alignment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a background by index.
		/// # Background
		/// 
		/// Every story has a beginning. Your character's background reveals where you came from, how you became an adventurer, and your place in the world. Choosing a background provides you with important story cues about your character's identity. [[SRD p60](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=60)]
		/// 
		/// _Note:_ acolyte is the only background included in the SRD.
		/// 
		/// ApiBackgrounds_indexGet api/backgrounds/{index}
		/// </summary>
		/// <param name="index">The `index` of the background to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Background> ApiBackgrounds_indexGetAsync(ApiBackgrounds_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/backgrounds/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Background>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a class by index.
		/// # Class
		/// 
		/// A character class is a fundamental part of the identity and nature of
		/// characters in the Dungeons & Dragons role-playing game. A character's
		/// capabilities, strengths, and weaknesses are largely defined by its class.
		/// A character's class affects a character's available skills and abilities. [[SRD p8-55](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=8)]
		/// 
		/// ApiClasses_indexGet api/classes/{index}
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Class> ApiClasses_indexGetAsync(ApiClasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Class>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get features available for a class.
		/// ApiClasses_indexFeaturesGet api/classes/{index}/features
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <returns>List of features for the class.</returns>
		public async Task<APIReferenceList> ApiClasses_indexFeaturesGetAsync(ApiClasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/features";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all level resources for a class.
		/// ApiClasses_indexLevelsGetBySubclass api/classes/{index}/levels
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <param name="subclass">Adds subclasses for class to the response</param>
		/// <returns>OK</returns>
		public async Task<ClassLevel[]> ApiClasses_indexLevelsGetBySubclassAsync(ApiClasses_indexGetIndex index, string subclass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/levels?subclass=" + (subclass==null? "" : System.Uri.EscapeDataString(subclass));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassLevel[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get level resource for a class and level.
		/// ApiClasses_indexLevels_class_levelGet api/classes/{index}/levels/{class_level}
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <param name="class_level">Minimum: 0
		/// Maximum: 20
		// </param>
		/// <returns>OK</returns>
		public async Task<ClassLevel> ApiClasses_indexLevels_class_levelGetAsync(ApiClasses_indexGetIndex index, double class_level, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/levels/"+class_level;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassLevel>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get features available to a class at the requested level.
		/// ApiClasses_indexLevels_class_levelFeaturesGet api/classes/{index}/levels/{class_level}/features
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <param name="class_level">Minimum: 0
		/// Maximum: 20
		// </param>
		/// <returns>OK</returns>
		public async Task<APIReferenceList> ApiClasses_indexLevels_class_levelFeaturesGetAsync(ApiClasses_indexGetIndex index, double class_level, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/levels/"+class_level+"/features";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get spells of the requested level available to the class.
		/// ApiClasses_indexLevels_spell_levelSpellsGet api/classes/{index}/levels/{spell_level}/spells
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <param name="spell_level">Minimum: 1
		/// Maximum: 9
		// </param>
		/// <returns>OK</returns>
		public async Task<APIReferenceList> ApiClasses_indexLevels_spell_levelSpellsGetAsync(ApiClasses_indexGetIndex index, double spell_level, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/levels/"+spell_level+"/spells";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get multiclassing resource for a class.
		/// ApiClasses_indexMulti_classingGet api/classes/{index}/multi-classing
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Multiclassing> ApiClasses_indexMulti_classingGetAsync(ApiClasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/multi-classing";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Multiclassing>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get proficiencies available for a class.
		/// ApiClasses_indexProficienciesGet api/classes/{index}/proficiencies
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <returns>List of proficiencies for the class.</returns>
		public async Task<APIReferenceList> ApiClasses_indexProficienciesGetAsync(ApiClasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/proficiencies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get spellcasting info for a class.
		/// ApiClasses_indexSpellcastingGet api/classes/{index}/spellcasting
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Spellcasting> ApiClasses_indexSpellcastingGetAsync(ApiClasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/spellcasting";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spellcasting>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get spells available for a class.
		/// ApiClasses_indexSpellsGet api/classes/{index}/spells
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<APIReferenceList> ApiClasses_indexSpellsGetAsync(ApiClasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/spells";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get subclasses available for a class.
		/// ApiClasses_indexSubclassesGet api/classes/{index}/subclasses
		/// </summary>
		/// <param name="index">The `index` of the class to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<APIReferenceList> ApiClasses_indexSubclassesGetAsync(ApiClasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/classes/"+index+"/subclasses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a condition by index.
		/// # Condition
		/// 
		/// A condition alters a creature’s capabilities in a variety of ways and can
		/// arise as a result of a spell, a class feature, a monster’s attack, or other
		/// effect. Most conditions, such as blinded, are impairments, but a few, such
		/// as invisible, can be advantageous.
		/// 
		/// ApiConditions_indexGet api/conditions/{index}
		/// </summary>
		/// <param name="index">The `index` of the condition to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Condition> ApiConditions_indexGetAsync(ApiConditions_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/conditions/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Condition>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a damage type by index.
		/// # Damage type
		/// 
		/// Different attacks, damaging spells, and other harmful effects deal different
		/// types of damage. Damage types have no rules of their own, but other rules,
		/// such as damage resistance, rely on the types.
		/// 
		/// ApiDamage_types_indexGet api/damage-types/{index}
		/// </summary>
		/// <param name="index">The `index` of the damage type to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<DamageType> ApiDamage_types_indexGetAsync(ApiDamage_types_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/damage-types/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DamageType>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an equipment category by index.
		/// These are the categories that various equipment fall under.
		/// ApiEquipment_categories_indexGet api/equipment-categories/{index}
		/// </summary>
		/// <param name="index">The `index` of the equipment category score to get.
		///
		///Available values can be found in the resource list for this endpoint.
		///</param>
		/// <returns>OK</returns>
		public async Task<EquipmentCategory> ApiEquipment_categories_indexGetAsync(string index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/equipment-categories/"+ (index==null? "" : System.Uri.EscapeDataString(index));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EquipmentCategory>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an equipment item by index.
		/// # Equipment
		/// 
		/// Opportunities abound to find treasure, equipment, weapons, armor, and more
		/// in the dungeons you explore. Normally, you can sell your treasures and
		/// trinkets when you return to a town or other settlement, provided that you
		/// can find buyers and merchants interested in your loot.
		/// 
		/// ApiEquipment_indexGet api/equipment/{index}
		/// </summary>
		/// <param name="index">The `index` of the equipment to get.
		///
		///Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `equipment`.
		///</param>
		/// <returns>OK</returns>
		public async Task<Equipment> ApiEquipment_indexGetAsync(string index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/equipment/"+ (index==null? "" : System.Uri.EscapeDataString(index));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Equipment>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a feat by index.
		/// # Feat
		/// 
		/// A feat is a boon a character can receive at level up instead of an ability score increase.
		/// 
		/// ApiFeats_indexGet api/feats/{index}
		/// </summary>
		/// <param name="index">The `index` of the feat to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Feat> ApiFeats_indexGetAsync(ApiFeats_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/feats/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feat>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a feature by index.
		/// # Feature
		/// 
		/// When you gain a new level in a class, you get its features for that level.
		/// You don’t, however, receive the class’s starting Equipment, and a few
		/// features have additional rules when you’re multiclassing: Channel Divinity,
		/// Extra Attack, Unarmored Defense, and Spellcasting.
		/// 
		/// ApiFeatures_indexGet api/features/{index}
		/// </summary>
		/// <param name="index">The `index` of the feature to get.
		///
		///Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `features`.
		///</param>
		/// <returns>OK</returns>
		public async Task<Feature> ApiFeatures_indexGetAsync(string index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/features/"+ (index==null? "" : System.Uri.EscapeDataString(index));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Feature>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a language by index.
		/// # Language
		/// 
		/// Your race indicates the languages your character can speak by default, and your background might give you access to one or more additional languages of your choice. [[SRD p59](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=59)]
		/// 
		/// ApiLanguages_indexGet api/languages/{index}
		/// </summary>
		/// <param name="index">The `index` of the language to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Language> ApiLanguages_indexGetAsync(ApiLanguages_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/languages/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Language>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a magic item by index.
		/// These are the various magic items you can find in the game.
		/// ApiMagic_items_indexGet api/magic-items/{index}
		/// </summary>
		/// <param name="index">The `index` of the magic item to get.
		///
		///Available values can be found in the resource list for this endpoint.
		///</param>
		/// <returns>OK</returns>
		public async Task<MagicItem> ApiMagic_items_indexGetAsync(string index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/magic-items/"+ (index==null? "" : System.Uri.EscapeDataString(index));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MagicItem>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a magic school by index.
		/// # Magic School
		/// 
		/// Academies of magic group spells into eight categories called schools of
		/// magic. Scholars, particularly wizards, apply these categories to all spells,
		/// believing that all magic functions in essentially the same way, whether it
		/// derives from rigorous study or is bestowed by a deity.
		/// 
		/// ApiMagic_schools_indexGet api/magic-schools/{index}
		/// </summary>
		/// <param name="index">The `index` of the magic school to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<MagicSchool> ApiMagic_schools_indexGetAsync(ApiMagic_schools_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/magic-schools/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MagicSchool>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of monsters with optional filtering
		/// ApiMonstersGetByChallenge_rating api/monsters
		/// </summary>
		/// <param name="challenge_rating">The challenge rating or ratings to filter on.</param>
		/// <returns>OK</returns>
		public async Task<APIReferenceList> ApiMonstersGetByChallenge_ratingAsync(double[] challenge_rating, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monsters?"+string.Join("&", challenge_rating.Select(z => $"challenge_rating={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get monster by index.
		/// ApiMonsters_indexGet api/monsters/{index}
		/// </summary>
		/// <param name="index">The `index` of the `Monster` to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Monster> ApiMonsters_indexGetAsync(string index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/monsters/"+ (index==null? "" : System.Uri.EscapeDataString(index));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Monster>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a proficiency by index.
		/// # Proficiency
		/// 
		/// By virtue of race, class, and background a character is proficient at using certain skills, weapons, and equipment. Characters can also gain additional proficiencies at higher levels or by multiclassing. A characters starting proficiencies are determined during character creation.
		/// 
		/// ApiProficiencies_indexGet api/proficiencies/{index}
		/// </summary>
		/// <param name="index">The `index` of the proficiency to get.
		///
		///Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `proficiencies`.
		///</param>
		/// <returns>OK</returns>
		public async Task<Proficiency> ApiProficiencies_indexGetAsync(string index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/proficiencies/"+ (index==null? "" : System.Uri.EscapeDataString(index));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Proficiency>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a race by index.
		/// Each race grants your character ability and skill bonuses as well as racial traits.
		/// ApiRaces_indexGet api/races/{index}
		/// </summary>
		/// <param name="index">The `index` of the race to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Race> ApiRaces_indexGetAsync(ApiRaces_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/races/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Race>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get proficiencies available for a race.
		/// ApiRaces_indexProficienciesGet api/races/{index}/proficiencies
		/// </summary>
		/// <param name="index">The `index` of the race to get.
		///</param>
		/// <returns>List of proficiencies for the race.</returns>
		public async Task<APIReferenceList> ApiRaces_indexProficienciesGetAsync(ApiRaces_indexProficienciesGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/races/"+index+"/proficiencies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get subraces available for a race.
		/// ApiRaces_indexSubracesGet api/races/{index}/subraces
		/// </summary>
		/// <param name="index">The `index` of the race to get.
		///</param>
		/// <returns>List of subraces for the race.</returns>
		public async Task<APIReferenceList> ApiRaces_indexSubracesGetAsync(ApiRaces_indexSubracesGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/races/"+index+"/subraces";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get traits available for a race.
		/// ApiRaces_indexTraitsGet api/races/{index}/traits
		/// </summary>
		/// <param name="index">The `index` of the race to get.
		///</param>
		/// <returns>List of traits for the race.</returns>
		public async Task<APIReferenceList> ApiRaces_indexTraitsGetAsync(ApiRaces_indexTraitsGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/races/"+index+"/traits";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a rule section by index.
		/// Rule sections represent a sub-heading and text that can be found underneath a rule heading in the SRD.
		/// ApiRule_sections_indexGet api/rule-sections/{index}
		/// </summary>
		/// <param name="index">The `index` of the rule section to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<RuleSection> ApiRule_sections_indexGetAsync(ApiRule_sections_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rule-sections/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RuleSection>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a rule by index.
		/// # Rule
		/// 
		/// Rules are pages in the SRD that document the mechanics of Dungeons and Dragons.
		/// Rules have descriptions which is the text directly underneath the rule heading
		/// in the SRD. Rules also have subsections for each heading underneath the rule in the SRD.
		/// 
		/// ApiRules_indexGet api/rules/{index}
		/// </summary>
		/// <param name="index">The `index` of the rule to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Rule> ApiRules_indexGetAsync(ApiRules_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rules/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Rule>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a skill by index.
		/// # Skill
		/// 
		/// Each ability covers a broad range of capabilities, including skills that a character or a monster can be proficient in. A skill represents a specific aspect of an ability score, and an individual's proficiency in a skill demonstrates a focus on that aspect. [[SRD p77](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=77)]
		/// 
		/// ApiSkills_indexGet api/skills/{index}
		/// </summary>
		/// <param name="index">The `index` of the skill to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Skill> ApiSkills_indexGetAsync(ApiSkills_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/skills/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Skill>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of spells with optional filtering.
		/// ApiSpellsGetByLevelAndSchool api/spells
		/// </summary>
		/// <param name="level">The level or levels to filter on.</param>
		/// <param name="school">The magic school or schools to filter on.</param>
		/// <returns>OK</returns>
		public async Task<APIReferenceList> ApiSpellsGetByLevelAndSchoolAsync(int[] level, string[] school, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/spells?"+string.Join("&", level.Select(z => $"level={z}"))+"&"+string.Join("&", school.Select(z => $"school={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a spell by index.
		/// ApiSpells_indexGet api/spells/{index}
		/// </summary>
		/// <param name="index">The `index` of the `Spell` to get.
		///
		///Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `spells`.
		///</param>
		/// <returns>OK</returns>
		public async Task<Spell> ApiSpells_indexGetAsync(string index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/spells/"+ (index==null? "" : System.Uri.EscapeDataString(index));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spell>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a subclass by index.
		/// Subclasses reflect the different paths a class may take as levels are gained.
		/// ApiSubclasses_indexGet api/subclasses/{index}
		/// </summary>
		/// <param name="index">The `index` of the subclass to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Subclass> ApiSubclasses_indexGetAsync(ApiSubclasses_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subclasses/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subclass>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get features available for a subclass.
		/// ApiSubclasses_indexFeaturesGet api/subclasses/{index}/features
		/// </summary>
		/// <param name="index">The `index` of the subclass to get.
		///</param>
		/// <returns>List of features for the subclass.</returns>
		public async Task<APIReferenceList> ApiSubclasses_indexFeaturesGetAsync(ApiSubclasses_indexFeaturesGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subclasses/"+index+"/features";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all level resources for a subclass.
		/// ApiSubclasses_indexLevelsGet api/subclasses/{index}/levels
		/// </summary>
		/// <param name="index">The `index` of the subclass to get.
		///</param>
		/// <returns>List of level resource for the subclass.</returns>
		public async Task<SubclassLevelResource[]> ApiSubclasses_indexLevelsGetAsync(ApiSubclasses_indexLevelsGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subclasses/"+index+"/levels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubclassLevelResource[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get level resources for a subclass and level.
		/// ApiSubclasses_indexLevels_subclass_levelGet api/subclasses/{index}/levels/{subclass_level}
		/// </summary>
		/// <param name="index">The `index` of the subclass to get.
		///</param>
		/// <param name="subclass_level">Minimum: 1
		/// Maximum: 20
		// </param>
		/// <returns>Level resource for the subclass and level.</returns>
		public async Task<SubclassLevel> ApiSubclasses_indexLevels_subclass_levelGetAsync(ApiSubclasses_indexLevels_subclass_levelGetIndex index, int subclass_level, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subclasses/"+index+"/levels/"+subclass_level;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubclassLevel>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get features of the requested spell level available to the class.
		/// ApiSubclasses_indexLevels_subclass_levelFeaturesGet api/subclasses/{index}/levels/{subclass_level}/features
		/// </summary>
		/// <param name="index">The `index` of the subclass to get.
		///</param>
		/// <param name="subclass_level">Minimum: 0
		/// Maximum: 20
		// </param>
		/// <returns>List of features for the subclass and level.</returns>
		public async Task<APIReferenceList> ApiSubclasses_indexLevels_subclass_levelFeaturesGetAsync(ApiSubclasses_indexLevels_subclass_levelFeaturesGetIndex index, int subclass_level, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subclasses/"+index+"/levels/"+subclass_level+"/features";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a subrace by index.
		/// Subraces reflect the different varieties of a certain parent race.
		/// ApiSubraces_indexGet api/subraces/{index}
		/// </summary>
		/// <param name="index">The `index` of the subrace to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<Subrace> ApiSubraces_indexGetAsync(ApiSubraces_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subraces/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subrace>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get proficiences available for a subrace.
		/// ApiSubraces_indexProficienciesGet api/subraces/{index}/proficiencies
		/// </summary>
		/// <param name="index">The `index` of the subrace to get.
		///</param>
		/// <returns>List of proficiences for the subrace.</returns>
		public async Task<APIReferenceList> ApiSubraces_indexProficienciesGetAsync(ApiSubraces_indexProficienciesGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subraces/"+index+"/proficiencies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get traits available for a subrace.
		/// ApiSubraces_indexTraitsGet api/subraces/{index}/traits
		/// </summary>
		/// <param name="index">The `index` of the subrace to get.
		///</param>
		/// <returns>List of traits for the subrace.</returns>
		public async Task<APIReferenceList> ApiSubraces_indexTraitsGetAsync(ApiSubraces_indexTraitsGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/subraces/"+index+"/traits";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a trait by index.
		/// ApiTraits_indexGet api/traits/{index}
		/// </summary>
		/// <param name="index">The `index` of the `Trait` to get.</param>
		/// <returns>OK</returns>
		public async Task<Trait> ApiTraits_indexGetAsync(ApiTraits_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/traits/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Trait>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a weapon property by index.
		/// ApiWeapon_properties_indexGet api/weapon-properties/{index}
		/// </summary>
		/// <param name="index">The `index` of the weapon property to get.
		///</param>
		/// <returns>OK</returns>
		public async Task<WeaponProperty> ApiWeapon_properties_indexGetAsync(ApiWeapon_properties_indexGetIndex index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/weapon-properties/"+index;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WeaponProperty>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of all available resources for an endpoint.
		/// Currently only the [`/spells`](#get-/api/spells) and [`/monsters`](#get-/api/monsters) endpoints support filtering with query parameters. Use of these query parameters is documented under the respective [Spells](#tag--Spells) and [Monsters](#tag--Monsters) sections.
		/// 
		/// Api_endpointGet api/{endpoint}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<APIReferenceList> Api_endpointGetAsync(Api_endpointGetEndpoint endpoint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/"+endpoint;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIReferenceList>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum ApiAbility_scores_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cha")]
		cha = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="con")]
		con = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dex")]
		dex = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="str")]
		str = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wis")]
		wis = 5,
	}
	
	public enum ApiAlignments_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chaotic-neutral")]
		chaoticMinusneutral = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chaotic-evil")]
		chaoticMinusevil = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chaotic-good")]
		chaoticMinusgood = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lawful-neutral")]
		lawfulMinusneutral = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lawful-evil")]
		lawfulMinusevil = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lawful-good")]
		lawfulMinusgood = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="neutral")]
		neutral = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="neutral-evil")]
		neutralMinusevil = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="neutral-good")]
		neutralMinusgood = 8,
	}
	
	public enum ApiBackgrounds_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acolyte")]
		acolyte = 0,
	}
	
	public enum ApiClasses_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="barbarian")]
		barbarian = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bard")]
		bard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cleric")]
		cleric = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="druid")]
		druid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fighter")]
		fighter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monk")]
		monk = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paladin")]
		paladin = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ranger")]
		ranger = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rogue")]
		rogue = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sorcerer")]
		sorcerer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="warlock")]
		warlock = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wizard")]
		wizard = 11,
	}
	
	public enum ApiConditions_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="blinded")]
		blinded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="charmed")]
		charmed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deafened")]
		deafened = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="exhaustion")]
		exhaustion = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="frightened")]
		frightened = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grappled")]
		grappled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incapacitated")]
		incapacitated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invisible")]
		invisible = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paralyzed")]
		paralyzed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="petrified")]
		petrified = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="poisoned")]
		poisoned = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="prone")]
		prone = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="restrained")]
		restrained = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stunned")]
		stunned = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unconscious")]
		unconscious = 14,
	}
	
	public enum ApiDamage_types_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acid")]
		acid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bludgeoning")]
		bludgeoning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cold")]
		cold = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fire")]
		fire = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="force")]
		force = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lightning")]
		lightning = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="necrotic")]
		necrotic = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="piercing")]
		piercing = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="poison")]
		poison = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="psychic")]
		psychic = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="radiant")]
		radiant = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="slashing")]
		slashing = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thunder")]
		thunder = 12,
	}
	
	public enum ApiFeats_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="grappler")]
		grappler = 0,
	}
	
	public enum ApiLanguages_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="abyssal")]
		abyssal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="celestial")]
		celestial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="common")]
		common = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deep-speech")]
		deepMinusspeech = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic")]
		draconic = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarvish")]
		dwarvish = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="elvish")]
		elvish = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="giant")]
		giant = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gnomish")]
		gnomish = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="goblin")]
		goblin = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="halfling")]
		halfling = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infernal")]
		infernal = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="orc")]
		orc = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="primordial")]
		primordial = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sylvan")]
		sylvan = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="undercommon")]
		undercommon = 15,
	}
	
	public enum ApiMagic_schools_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="abjuration")]
		abjuration = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conjuration")]
		conjuration = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="divination")]
		divination = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enchantment")]
		enchantment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="evocation")]
		evocation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="illusion")]
		illusion = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="necromancy")]
		necromancy = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="transmutation")]
		transmutation = 7,
	}
	
	public enum ApiRaces_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dragonborn")]
		dragonborn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarf")]
		dwarf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="elf")]
		elf = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gnome")]
		gnome = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-elf")]
		halfMinuself = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-orc")]
		halfMinusorc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="halfling")]
		halfling = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="human")]
		human = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tiefling")]
		tiefling = 8,
	}
	
	public enum ApiRaces_indexProficienciesGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dragonborn")]
		dragonborn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarf")]
		dwarf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="elf")]
		elf = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gnome")]
		gnome = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-elf")]
		halfMinuself = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-orc")]
		halfMinusorc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="halfling")]
		halfling = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="human")]
		human = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tiefling")]
		tiefling = 8,
	}
	
	public enum ApiRaces_indexSubracesGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dragonborn")]
		dragonborn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarf")]
		dwarf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="elf")]
		elf = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gnome")]
		gnome = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-elf")]
		halfMinuself = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-orc")]
		halfMinusorc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="halfling")]
		halfling = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="human")]
		human = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tiefling")]
		tiefling = 8,
	}
	
	public enum ApiRaces_indexTraitsGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dragonborn")]
		dragonborn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarf")]
		dwarf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="elf")]
		elf = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gnome")]
		gnome = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-elf")]
		halfMinuself = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-orc")]
		halfMinusorc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="halfling")]
		halfling = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="human")]
		human = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tiefling")]
		tiefling = 8,
	}
	
	public enum ApiRule_sections_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ability-checks")]
		abilityMinuschecks = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ability-scores-and-modifiers")]
		abilityMinusscoresMinusandMinusmodifiers = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="actions-in-combat")]
		actionsMinusinMinuscombat = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="advantage-and-disadvantage")]
		advantageMinusandMinusdisadvantage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="between-adventures")]
		betweenMinusadventures = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="casting-a-spell")]
		castingMinusaMinusspell = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cover")]
		cover = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="damage-and-healing")]
		damageMinusandMinushealing = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="diseases")]
		diseases = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fantasy-historical-pantheons")]
		fantasyMinushistoricalMinuspantheons = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="madness")]
		madness = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="making-an-attack")]
		makingMinusanMinusattack = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mounted-combat")]
		mountedMinuscombat = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="movement")]
		movement = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="movement-and-position")]
		movementMinusandMinusposition = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="objects")]
		objects = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="poisons")]
		poisons = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proficiency-bonus")]
		proficiencyMinusbonus = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="resting")]
		resting = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="saving-throws")]
		savingMinusthrows = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sentient-magic-items")]
		sentientMinusmagicMinusitems = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard-exchange-rates")]
		standardMinusexchangeMinusrates = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="the-environment")]
		theMinusenvironment = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="the-order-of-combat")]
		theMinusorderMinusofMinuscombat = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="the-planes-of-existence")]
		theMinusplanesMinusofMinusexistence = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="time")]
		time = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="traps")]
		traps = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="underwater-combat")]
		underwaterMinuscombat = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="using-each-ability")]
		usingMinuseachMinusability = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="what-is-a-spell")]
		whatMinusisMinusaMinusspell = 29,
	}
	
	public enum ApiRules_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="adventuring")]
		adventuring = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="appendix")]
		appendix = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="combat")]
		combat = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="equipment")]
		equipment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spellcasting")]
		spellcasting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="using-ability-scores")]
		usingMinusabilityMinusscores = 5,
	}
	
	public enum ApiSkills_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="acrobatics")]
		acrobatics = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="animal-handling")]
		animalMinushandling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arcana")]
		arcana = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="athletics")]
		athletics = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deception")]
		deception = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="history")]
		history = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insight")]
		insight = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="intimidation")]
		intimidation = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="investigation")]
		investigation = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medicine")]
		medicine = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nature")]
		nature = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="perception")]
		perception = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="performance")]
		performance = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="persuasion")]
		persuasion = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="religion")]
		religion = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sleight-of-hand")]
		sleightMinusofMinushand = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stealth")]
		stealth = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="survival")]
		survival = 17,
	}
	
	public enum ApiSubclasses_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="berserker")]
		berserker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="champion")]
		champion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="devotion")]
		devotion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic")]
		draconic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="evocation")]
		evocation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fiend")]
		fiend = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hunter")]
		hunter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="land")]
		land = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="life")]
		life = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lore")]
		lore = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open-hand")]
		openMinushand = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thief")]
		thief = 11,
	}
	
	public enum ApiSubclasses_indexFeaturesGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="berserker")]
		berserker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="champion")]
		champion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="devotion")]
		devotion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic")]
		draconic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="evocation")]
		evocation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fiend")]
		fiend = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hunter")]
		hunter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="land")]
		land = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="life")]
		life = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lore")]
		lore = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open-hand")]
		openMinushand = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thief")]
		thief = 11,
	}
	
	public enum ApiSubclasses_indexLevelsGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="berserker")]
		berserker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="champion")]
		champion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="devotion")]
		devotion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic")]
		draconic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="evocation")]
		evocation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fiend")]
		fiend = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hunter")]
		hunter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="land")]
		land = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="life")]
		life = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lore")]
		lore = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open-hand")]
		openMinushand = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thief")]
		thief = 11,
	}
	
	public enum ApiSubclasses_indexLevels_subclass_levelGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="berserker")]
		berserker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="champion")]
		champion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="devotion")]
		devotion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic")]
		draconic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="evocation")]
		evocation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fiend")]
		fiend = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hunter")]
		hunter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="land")]
		land = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="life")]
		life = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lore")]
		lore = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open-hand")]
		openMinushand = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thief")]
		thief = 11,
	}
	
	public enum ApiSubclasses_indexLevels_subclass_levelFeaturesGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="berserker")]
		berserker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="champion")]
		champion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="devotion")]
		devotion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic")]
		draconic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="evocation")]
		evocation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fiend")]
		fiend = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hunter")]
		hunter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="land")]
		land = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="life")]
		life = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lore")]
		lore = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open-hand")]
		openMinushand = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thief")]
		thief = 11,
	}
	
	public enum ApiSubraces_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high-elf")]
		highMinuself = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hill-dwarf")]
		hillMinusdwarf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lightfoot-halfling")]
		lightfootMinushalfling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rock-gnome")]
		rockMinusgnome = 3,
	}
	
	public enum ApiSubraces_indexProficienciesGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high-elf")]
		highMinuself = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hill-dwarf")]
		hillMinusdwarf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lightfoot-halfling")]
		lightfootMinushalfling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rock-gnome")]
		rockMinusgnome = 3,
	}
	
	public enum ApiSubraces_indexTraitsGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high-elf")]
		highMinuself = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hill-dwarf")]
		hillMinusdwarf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lightfoot-halfling")]
		lightfootMinushalfling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rock-gnome")]
		rockMinusgnome = 3,
	}
	
	public enum ApiTraits_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="artificers-lore")]
		artificersMinuslore = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="brave")]
		brave = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="breath-weapon")]
		breathMinusweapon = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="damage-resistance")]
		damageMinusresistance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="darkvision")]
		darkvision = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry")]
		draconicMinusancestry = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-black")]
		draconicMinusancestryMinusblack = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-blue")]
		draconicMinusancestryMinusblue = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-brass")]
		draconicMinusancestryMinusbrass = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-bronze")]
		draconicMinusancestryMinusbronze = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-copper")]
		draconicMinusancestryMinuscopper = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-gold")]
		draconicMinusancestryMinusgold = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-green")]
		draconicMinusancestryMinusgreen = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-red")]
		draconicMinusancestryMinusred = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-silver")]
		draconicMinusancestryMinussilver = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draconic-ancestry-white")]
		draconicMinusancestryMinuswhite = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarven-combat-training")]
		dwarvenMinuscombatMinustraining = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarven-resilience")]
		dwarvenMinusresilience = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dwarven-toughness")]
		dwarvenMinustoughness = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="elf-weapon-training")]
		elfMinusweaponMinustraining = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="extra-language")]
		extraMinuslanguage = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fey-ancestry")]
		feyMinusancestry = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gnome-cunning")]
		gnomeMinuscunning = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="halfling-nimbleness")]
		halflingMinusnimbleness = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hellish-resistance")]
		hellishMinusresistance = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="high-elf-cantrip")]
		highMinuselfMinuscantrip = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="infernal-legacy")]
		infernalMinuslegacy = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="keen-senses")]
		keenMinussenses = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lucky")]
		lucky = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="menacing")]
		menacing = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="naturally-stealthy")]
		naturallyMinusstealthy = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="relentless-endurance")]
		relentlessMinusendurance = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="savage-attacks")]
		savageMinusattacks = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skill-versatility")]
		skillMinusversatility = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stonecunning")]
		stonecunning = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tinker")]
		tinker = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tool-proficiency")]
		toolMinusproficiency = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trance")]
		trance = 37,
	}
	
	public enum ApiWeapon_properties_indexGetIndex
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ammunition")]
		ammunition = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="finesse")]
		finesse = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="heavy")]
		heavy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="light")]
		light = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="loading")]
		loading = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monk")]
		monk = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="reach")]
		reach = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="special")]
		special = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thrown")]
		thrown = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="two-handed")]
		twoMinushanded = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="versatile")]
		versatile = 10,
	}
	
	public enum Api_endpointGetEndpoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ability-scores")]
		abilityMinusscores = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alignments")]
		alignments = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="backgrounds")]
		backgrounds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="classes")]
		classes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conditions")]
		conditions = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="damage-types")]
		damageMinustypes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="equipment")]
		equipment = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="equipment-categories")]
		equipmentMinuscategories = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="feats")]
		feats = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="features")]
		features = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="languages")]
		languages = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="magic-items")]
		magicMinusitems = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="magic-schools")]
		magicMinusschools = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monsters")]
		monsters = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="proficiencies")]
		proficiencies = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="races")]
		races = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rule-sections")]
		ruleMinussections = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rules")]
		rules = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="skills")]
		skills = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spells")]
		spells = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subclasses")]
		subclasses = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subraces")]
		subraces = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="traits")]
		traits = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weapon-properties")]
		weaponMinusproperties = 23,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
