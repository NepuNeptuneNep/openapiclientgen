//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// This is Data Type gives a low level textual error code to help categorise an error response. The applicable HTTP response code is also given.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Expected")]
		UK_OBIE_Field_Expected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Invalid")]
		UK_OBIE_Field_Invalid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.InvalidDate")]
		UK_OBIE_Field_InvalidDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Missing")]
		UK_OBIE_Field_Missing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Unexpected")]
		UK_OBIE_Field_Unexpected = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Header.Invalid")]
		UK_OBIE_Header_Invalid = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Header.Missing")]
		UK_OBIE_Header_Missing = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.ConsentMismatch")]
		UK_OBIE_Resource_ConsentMismatch = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.InvalidConsentStatus")]
		UK_OBIE_Resource_InvalidConsentStatus = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.InvalidFormat")]
		UK_OBIE_Resource_InvalidFormat = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.NotFound")]
		UK_OBIE_Resource_NotFound = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Rules.AfterCutOffDateTime")]
		UK_OBIE_Rules_AfterCutOffDateTime = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Rules.DuplicateReference")]
		UK_OBIE_Rules_DuplicateReference = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Invalid")]
		UK_OBIE_Signature_Invalid = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.InvalidClaim")]
		UK_OBIE_Signature_InvalidClaim = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.MissingClaim")]
		UK_OBIE_Signature_MissingClaim = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Malformed")]
		UK_OBIE_Signature_Malformed = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Missing")]
		UK_OBIE_Signature_Missing = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Unexpected")]
		UK_OBIE_Signature_Unexpected = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.AccountIdentifier")]
		UK_OBIE_Unsupported_AccountIdentifier = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.AccountSecondaryIdentifier")]
		UK_OBIE_Unsupported_AccountSecondaryIdentifier = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.Currency")]
		UK_OBIE_Unsupported_Currency = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.EventType")]
		UK_OBIE_Unsupported_EventType = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.Frequency")]
		UK_OBIE_Unsupported_Frequency = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.LocalInstrument")]
		UK_OBIE_Unsupported_LocalInstrument = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.Scheme")]
		UK_OBIE_Unsupported_Scheme = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Reauthenticate")]
		UK_OBIE_Reauthenticate = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Rules.ResourceAlreadyExists")]
		UK_OBIE_Rules_ResourceAlreadyExists = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.UnexpectedError")]
		UK_OBIE_UnexpectedError = 28,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Links relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prev { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Meta Data relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meta
	{
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstAvailableDateTime { get; set; }
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastAvailableDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	/// <summary>
	/// Unambiguous identification of the account to which credit and debit entries are made.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBAccount6
	{
		
		/// <summary>
		/// Provides the details to identify an account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5[] Account { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount6AccountSubType AccountSubType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBAccount6AccountType AccountType { get; set; }
		
		/// <summary>
		/// Identification of the currency in which the account is held.  Usage: Currency should only be used in case one and the same account number covers several currencies and the initiating party needs to identify which currency needs to be used for settlement on the account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies the description of the account type.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Description { get; set; }
		
		/// <summary>
		/// The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 70)]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Date on which the account and related basic services are effectively operational for the account owner.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OpeningDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBBranchAndFinancialInstitutionIdentification5 Servicer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBCashAccount5
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 70)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution.
		///This can be used by building societies to additionally identify accounts with a roll number(in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 34)]
		public string SecondaryIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBAccount6AccountSubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ChargeCard")]
		ChargeCard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreditCard")]
		CreditCard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CurrentAccount")]
		CurrentAccount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMoney")]
		EMoney = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Loan")]
		Loan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mortgage")]
		Mortgage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PrePaidCard")]
		PrePaidCard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Savings")]
		Savings = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBAccount6AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Business")]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Personal")]
		Personal = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBBranchAndFinancialInstitutionIdentification5
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBActiveOrHistoricCurrencyAndAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}[\.,]\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}[\.,]\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBBalanceType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ClosingAvailable")]
		ClosingAvailable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ClosingBooked")]
		ClosingBooked = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ClosingCleared")]
		ClosingCleared = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Expected")]
		Expected = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ForwardAvailable")]
		ForwardAvailable = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Information")]
		Information = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InterimAvailable")]
		InterimAvailable = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InterimBooked")]
		InterimBooked = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InterimCleared")]
		InterimCleared = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OpeningAvailable")]
		OpeningAvailable = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OpeningBooked")]
		OpeningBooked = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OpeningCleared")]
		OpeningCleared = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PreviouslyClosedBooked")]
		PreviouslyClosedBooked = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBBeneficiary5
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Specifies the Beneficiary Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBBeneficiary5BeneficiaryType> BeneficiaryType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5 CreditorAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBBeneficiary5BeneficiaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Trusted")]
		Trusted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ordinary")]
		Ordinary = 1,
	}
	
	/// <summary>
	/// Specifies the Beneficiary Type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBBeneficiaryType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Trusted")]
		Trusted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ordinary")]
		Ordinary = 1,
	}
	
	/// <summary>
	/// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBCashAccount6
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 70)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	/// <summary>
	/// Set of elements used to define the balance details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBCashBalance1
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCashBalance1CreditDebitIndicator CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Set of elements used to provide details on the credit line.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCreditLine1[] CreditLine { get; set; }
		
		/// <summary>
		/// Indicates the date (and time) of the balance.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBalanceType1Code Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBCashBalance1CreditDebitIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Credit")]
		Credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Debit")]
		Debit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBCreditLine1
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Indicates whether or not the credit line is included in the balance of the account.
		///Usage: If not present, credit line is not included in the balance amount of the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Included { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBCreditLine1Type> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBCreditLine1Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Available")]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Credit")]
		Credit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Emergency")]
		Emergency = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pre-Agreed")]
		PreMinusAgreed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Temporary")]
		Temporary = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBCreditDebitCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Credit")]
		Credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Debit")]
		Debit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBEntryStatus1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Booked")]
		Booked = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBError1
	{
		
		/// <summary>
		/// This is Data Type gives a low level textual error code to help categorise an error response. The applicable HTTP response code is also given.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBError1ErrorCode ErrorCode { get; set; }
		
		/// <summary>
		/// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'OBIE doesn't standardise this field
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 500)]
		public string Message { get; set; }
		
		/// <summary>
		/// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 500)]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBError1ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Expected")]
		UK_OBIE_Field_Expected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Invalid")]
		UK_OBIE_Field_Invalid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.InvalidDate")]
		UK_OBIE_Field_InvalidDate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Missing")]
		UK_OBIE_Field_Missing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Field.Unexpected")]
		UK_OBIE_Field_Unexpected = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Header.Invalid")]
		UK_OBIE_Header_Invalid = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Header.Missing")]
		UK_OBIE_Header_Missing = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.ConsentMismatch")]
		UK_OBIE_Resource_ConsentMismatch = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.InvalidConsentStatus")]
		UK_OBIE_Resource_InvalidConsentStatus = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.InvalidFormat")]
		UK_OBIE_Resource_InvalidFormat = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Resource.NotFound")]
		UK_OBIE_Resource_NotFound = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Rules.AfterCutOffDateTime")]
		UK_OBIE_Rules_AfterCutOffDateTime = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Rules.DuplicateReference")]
		UK_OBIE_Rules_DuplicateReference = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Invalid")]
		UK_OBIE_Signature_Invalid = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.InvalidClaim")]
		UK_OBIE_Signature_InvalidClaim = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.MissingClaim")]
		UK_OBIE_Signature_MissingClaim = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Malformed")]
		UK_OBIE_Signature_Malformed = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Missing")]
		UK_OBIE_Signature_Missing = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Signature.Unexpected")]
		UK_OBIE_Signature_Unexpected = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.AccountIdentifier")]
		UK_OBIE_Unsupported_AccountIdentifier = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.AccountSecondaryIdentifier")]
		UK_OBIE_Unsupported_AccountSecondaryIdentifier = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.Currency")]
		UK_OBIE_Unsupported_Currency = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.EventType")]
		UK_OBIE_Unsupported_EventType = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.Frequency")]
		UK_OBIE_Unsupported_Frequency = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.LocalInstrument")]
		UK_OBIE_Unsupported_LocalInstrument = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Unsupported.Scheme")]
		UK_OBIE_Unsupported_Scheme = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Reauthenticate")]
		UK_OBIE_Reauthenticate = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.Rules.ResourceAlreadyExists")]
		UK_OBIE_Rules_ResourceAlreadyExists = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UK.OBIE.UnexpectedError")]
		UK_OBIE_UnexpectedError = 28,
	}
	
	/// <summary>
	/// An array of detail error codes, and messages, and URLs to documentation to help remediation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBErrorResponse1
	{
		
		/// <summary>
		/// High level textual error code, to help categorize the errors.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string Code { get; set; }
		
		/// <summary>
		/// Gets or Sets Errors
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBError1[] Errors { get; set; }
		
		/// <summary>
		/// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string Id { get; set; }
		
		/// <summary>
		/// Brief Error message, e.g., 'There is something wrong with the request parameters provided'
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 500)]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalAccountSubType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ChargeCard")]
		ChargeCard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreditCard")]
		CreditCard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CurrentAccount")]
		CurrentAccount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMoney")]
		EMoney = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Loan")]
		Loan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mortgage")]
		Mortgage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PrePaidCard")]
		PrePaidCard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Savings")]
		Savings = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalAccountType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Business")]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Personal")]
		Personal = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalLimitType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Available")]
		Available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Credit")]
		Credit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Emergency")]
		Emergency = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pre-Agreed")]
		PreMinusAgreed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Temporary")]
		Temporary = 4,
	}
	
	/// <summary>
	/// Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalPermissions1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadAccountsBasic")]
		ReadAccountsBasic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadAccountsDetail")]
		ReadAccountsDetail = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadBalances")]
		ReadBalances = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadBeneficiariesBasic")]
		ReadBeneficiariesBasic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadBeneficiariesDetail")]
		ReadBeneficiariesDetail = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadDirectDebits")]
		ReadDirectDebits = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadOffers")]
		ReadOffers = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadPAN")]
		ReadPAN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadParty")]
		ReadParty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadPartyPSU")]
		ReadPartyPSU = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadProducts")]
		ReadProducts = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadScheduledPaymentsBasic")]
		ReadScheduledPaymentsBasic = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadScheduledPaymentsDetail")]
		ReadScheduledPaymentsDetail = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadStandingOrdersBasic")]
		ReadStandingOrdersBasic = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadStandingOrdersDetail")]
		ReadStandingOrdersDetail = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadStatementsBasic")]
		ReadStatementsBasic = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadStatementsDetail")]
		ReadStatementsDetail = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadTransactionsBasic")]
		ReadTransactionsBasic = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadTransactionsCredits")]
		ReadTransactionsCredits = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadTransactionsDebits")]
		ReadTransactionsDebits = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReadTransactionsDetail")]
		ReadTransactionsDetail = 20,
	}
	
	/// <summary>
	/// Specifies the status of consent resource in code form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalRequestStatus1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Authorised")]
		Authorised = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwaitingAuthorisation")]
		AwaitingAuthorisation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rejected")]
		Rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Revoked")]
		Revoked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalScheduleType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arrival")]
		Arrival = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Execution")]
		Execution = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalStandingOrderStatus1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Active")]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inactive")]
		Inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBExternalStatementType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccountClosure")]
		AccountClosure = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccountOpening")]
		AccountOpening = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Annual")]
		Annual = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Interim")]
		Interim = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegularPeriodic")]
		RegularPeriodic = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBParty2
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 70)]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string PartyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadAccount5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataAccount5 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataAccount5
	{
		
		/// <summary>
		/// Unambiguous identification of the account to which credit and debit entries are made.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAccount6[] Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadBalance1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataBalance1 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataBalance1
	{
		
		/// <summary>
		/// Set of elements used to define the balance details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCashBalance1[] Balance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadBeneficiary5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataBeneficiary5 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataBeneficiary5
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBBeneficiary5[] Beneficiary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadConsent1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadData1 Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk2 Risk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadData1
	{
		
		/// <summary>
		/// Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalPermissions1Code[] Permissions { get; set; }
		
		/// <summary>
		/// Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionFromDateTime { get; set; }
		
		/// <summary>
		/// Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionToDateTime { get; set; }
	}
	
	/// <summary>
	/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBRisk2
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadConsentResponse1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataConsentResponse1 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk2 Risk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataConsentResponse1
	{
		
		/// <summary>
		/// Unique identification as assigned to identify the account access consent resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalPermissions1Code[] Permissions { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalRequestStatus1Code Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
		
		/// <summary>
		/// Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionFromDateTime { get; set; }
		
		/// <summary>
		/// Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionToDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataParty2
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBParty2 Party { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataParty3
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBParty2[] Party { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataScheduledPayment3
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBScheduledPayment3[] ScheduledPayment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBScheduledPayment3
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5 CreditorAccount { get; set; }
		
		/// <summary>
		/// A reference value provided by the PSU to the PISP while setting up the scheduled payment.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string DebtorReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// The date on which the scheduled payment will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduledPaymentDateTime { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string ScheduledPaymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalScheduleType1Code ScheduledType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataStandingOrder5
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBStandingOrder5[] StandingOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBStandingOrder5
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount5 CreditorAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///IntrvlMnthDay - An interval specified in months(between 01, 02, 03, 04, 06, 12, 24), specifying the day within the month(01 to 31)
		///Full Regular Expression:
		///^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$
		/// Required
		/// Pattern: ^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(IntrvlMnthDay:(0[1,2,3,4,6]|12|24):(0[1-9]|[12] [0-9]|3[01]))$")]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount LastPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the last (most recent) payment for a Standing Order schedule was made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPaymentDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount NextPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the next payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextPaymentDateTime { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string StandingOrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBExternalStandingOrderStatus1Code StandingOrderStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataStatement2
	{
		
		/// <summary>
		/// Provides further details on a statement resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBStatement2[] Statement { get; set; }
	}
	
	/// <summary>
	/// Provides further details on a statement resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBStatement2
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Date and time at which the statement period starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartDateTime { get; set; }
		
		/// <summary>
		/// Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string StatementId { get; set; }
		
		/// <summary>
		/// Unique reference for the statement. This reference may be optionally populated if available.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string StatementReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBExternalStatementType1Code Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadDataTransaction6
	{
		
		/// <summary>
		/// Provides further details on an entry in the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransaction6[] Transaction { get; set; }
	}
	
	/// <summary>
	/// Provides further details on an entry in the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBTransaction6
	{
		
		/// <summary>
		/// A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 40)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBTransactionCashBalance Balance { get; set; }
		
		/// <summary>
		/// Date and time when a transaction entry is posted to an account on the account servicer's books.
		///Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset BookingDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCashBalance1CreditDebitIndicator CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount6 CreditorAccount { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccount6 DebtorAccount { get; set; }
		
		/// <summary>
		/// Set of elements to fully identify a proprietary bank transaction code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProprietaryBankTransactionCodeStructure1 ProprietaryBankTransactionCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBEntryStatus1Code Status { get; set; }
		
		/// <summary>
		/// Further details of the transaction.
		///This is the transaction narrative, which is unstructured text.
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 500)]
		public string TransactionInformation { get; set; }
		
		/// <summary>
		/// Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 210)]
		public string TransactionReference { get; set; }
		
		/// <summary>
		/// Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry.
		///Usage: If transaction entry status is pending and value date is present, then the value date refers to an expected/requested value date.
		///For transaction entries subject to availability/float and for which availability information is provided, the value date must not be used.In this case the availability component identifies the number of availability days.All dates in the JSON payloads are represented in ISO 8601 date-time format.
		///All date-time fields in responses must include the timezone.An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValueDateTime { get; set; }
	}
	
	/// <summary>
	/// Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBTransactionCashBalance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBCashBalance1CreditDebitIndicator CreditDebitIndicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBBalanceType1Code Type { get; set; }
	}
	
	/// <summary>
	/// Set of elements to fully identify a proprietary bank transaction code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProprietaryBankTransactionCodeStructure1
	{
		
		/// <summary>
		/// Proprietary bank transaction code to identify the underlying transaction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Code { get; set; }
		
		/// <summary>
		/// Identification of the issuer of the proprietary bank transaction code.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Issuer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadParty2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataParty2 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadParty3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataParty3 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadScheduledPayment3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataScheduledPayment3 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadStandingOrder6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataStandingOrder5 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadStatement2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataStatement2 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBReadTransaction6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBReadDataTransaction6 Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	/// <summary>
	/// Sandbox model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sandbox
	{
		
		/// <summary>
		/// Sandbox id
		/// Required
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sandboxId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string SandboxId { get; set; }
		
		/// <summary>
		/// List of users
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public SandboxUser[] Users { get; set; }
	}
	
	/// <summary>
	/// User data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxUser
	{
		
		/// <summary>
		/// List of accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public SandboxBankAccount[] Accounts { get; set; }
		
		/// <summary>
		/// List of cards
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cards")]
		public SandboxCard[] Cards { get; set; }
		
		/// <summary>
		/// Retry cache entries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryCacheEntries")]
		public SandboxRetryCacheEntry[] RetryCacheEntries { get; set; }
		
		/// <summary>
		/// Connected user id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Sandbox bank account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxBankAccount
	{
		
		/// <summary>
		/// List of account's beneficiaries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beneficiaries")]
		public SandboxBeneficiary[] Beneficiaries { get; set; }
		
		/// <summary>
		/// General account information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public SandboxBankAccountInfo Info { get; set; }
		
		/// <summary>
		/// Connected party information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		public SandboxParty Party { get; set; }
		
		/// <summary>
		/// List of account's scheduled payments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledPayments")]
		public SandboxScheduledPayment[] ScheduledPayments { get; set; }
		
		/// <summary>
		/// List of account's standing orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standingOrders")]
		public SandboxStandingOrder[] StandingOrders { get; set; }
		
		/// <summary>
		/// List of account's statements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statements")]
		public SandboxStatement[] Statements { get; set; }
		
		/// <summary>
		/// List of account's transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public SandboxTransaction[] Transactions { get; set; }
	}
	
	/// <summary>
	/// Beneficiary information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxBeneficiary
	{
		
		/// <summary>
		/// Beneficiary name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// General account information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxBankAccountInfo
	{
		
		/// <summary>
		/// Account's sub-type (ChargeCard, CreditCard, CurrentAccount ...)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountSubType")]
		public string AccountSubType { get; set; }
		
		/// <summary>
		/// Account's type (Business, Personal)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Account's alias
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		[System.ComponentModel.DataAnnotations.Length(1, 70)]
		public string Alias { get; set; }
		
		/// <summary>
		/// Account's available balance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableBalance")]
		public System.Nullable<System.Double> AvailableBalance { get; set; }
		
		/// <summary>
		/// Currency (EUR, USD ...)
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Account's description
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Description { get; set; }
		
		/// <summary>
		/// Account's IBAN
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// Account's ledger balance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ledgerBalance")]
		public System.Nullable<System.Double> LedgerBalance { get; set; }
		
		/// <summary>
		/// Account's opening date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openingDate")]
		public System.Nullable<System.DateTimeOffset> OpeningDate { get; set; }
		
		/// <summary>
		/// Account's overdraft limit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overdraftLimit")]
		public System.Nullable<System.Double> OverdraftLimit { get; set; }
	}
	
	/// <summary>
	/// Connected party information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxParty
	{
		
		/// <summary>
		/// Party id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Scheduled payment information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxScheduledPayment
	{
		
		/// <summary>
		/// Amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Scheduled payment's short description
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Description { get; set; }
		
		/// <summary>
		/// Scheduled payment's execution date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionDate")]
		public System.Nullable<System.DateTimeOffset> ExecutionDate { get; set; }
		
		/// <summary>
		/// Debtor / Sender reference
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderReference")]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string SenderReference { get; set; }
	}
	
	/// <summary>
	/// Standing order information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxStandingOrder
	{
		
		/// <summary>
		/// Standing order amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Standing order short description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Standing order final collection date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalPaymentDate")]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDate { get; set; }
		
		/// <summary>
		/// Standing order first collection date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPaymentDate")]
		public System.Nullable<System.DateTimeOffset> FirstPaymentDate { get; set; }
		
		/// <summary>
		/// Standing order frequency
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		[System.ComponentModel.DataAnnotations.Length(1, 35)]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Standing order last executed payment date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPaymentDate")]
		public System.Nullable<System.DateTimeOffset> LastPaymentDate { get; set; }
		
		/// <summary>
		/// Standing order next collection date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPaymentDate")]
		public System.Nullable<System.DateTimeOffset> NextPaymentDate { get; set; }
		
		/// <summary>
		/// Standing order status (Active, Inactive)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Statement information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxStatement
	{
		
		/// <summary>
		/// Statement month
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Statement number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Statement year
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Transaction information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxTransaction
	{
		
		/// <summary>
		/// Balance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountingBalance")]
		public System.Nullable<System.Double> AccountingBalance { get; set; }
		
		/// <summary>
		/// Amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Booking date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingDateTime")]
		public System.Nullable<System.DateTimeOffset> BookingDateTime { get; set; }
		
		/// <summary>
		/// Credit / Debit indicator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditDebit")]
		public string CreditDebit { get; set; }
		
		/// <summary>
		/// Currency (EUR, USD ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Transaction reference
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// Related account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedAccount")]
		public string RelatedAccount { get; set; }
		
		/// <summary>
		/// Related account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedName")]
		public string RelatedName { get; set; }
		
		/// <summary>
		/// Transaction code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionCode")]
		public string TransactionCode { get; set; }
		
		/// <summary>
		/// Valeur
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueDateTime")]
		public System.Nullable<System.DateTimeOffset> ValueDateTime { get; set; }
	}
	
	/// <summary>
	/// Sandbox card
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxCard
	{
		
		/// <summary>
		/// Sandbox card information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public SandboxCardInfo Info { get; set; }
		
		/// <summary>
		/// Connected party information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		public SandboxParty Party { get; set; }
		
		/// <summary>
		/// Card statements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statements")]
		public SandboxStatement[] Statements { get; set; }
		
		/// <summary>
		/// Card transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public SandboxTransaction[] Transactions { get; set; }
	}
	
	/// <summary>
	/// Sandbox card information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxCardInfo
	{
		
		/// <summary>
		/// Available balance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableBalance")]
		public System.Nullable<System.Double> AvailableBalance { get; set; }
		
		/// <summary>
		/// Credit limit ( applicable to credit cards )
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditLimit")]
		public System.Nullable<System.Double> CreditLimit { get; set; }
		
		/// <summary>
		/// Description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Expiration date (05/2022)
		/// Required
		/// Min length: 1
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		[System.ComponentModel.DataAnnotations.Length(1, 7)]
		public string Expiration { get; set; }
		
		/// <summary>
		/// Holder name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="holderName")]
		public string HolderName { get; set; }
		
		/// <summary>
		/// Ledger balance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ledgerBalance")]
		public System.Nullable<System.Double> LedgerBalance { get; set; }
		
		/// <summary>
		/// Card number
		/// Required
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.Length(1, 16)]
		public string Number { get; set; }
		
		/// <summary>
		/// Sub type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public string SubType { get; set; }
		
		/// <summary>
		/// Type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Keeps the number of calls without x-fapi-customer-ip-address header present
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxRetryCacheEntry
	{
		
		/// <summary>
		/// Cache key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheKey")]
		public string CacheKey { get; set; }
		
		/// <summary>
		/// Number of retries ( up to 4 )
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Expiration timestamp of the entry
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTimestamp")]
		public System.Nullable<System.DateTimeOffset> ExpirationTimestamp { get; set; }
	}
	
	/// <summary>
	/// Request to create a new sandbox
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SandboxRequest
	{
		
		/// <summary>
		/// Sandbox Id
		/// Required
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sandboxId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string SandboxId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create Account Access Consents
		/// Create Account Access Consents
		/// Account_access_consentsPost account-access-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task Account_access_consentsPostAsync(OBReadConsent1 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-access-consents";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Account Access Consents
		/// Delete Account Access Consents by Consent ID
		/// Account_access_consents_consentIdDelete account-access-consents/{consentId}
		/// </summary>
		/// <param name="consentId">ConsentId</param>
		public async Task Account_access_consents_consentIdDeleteAsync(string consentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-access-consents/"+ (consentId==null? "" : System.Uri.EscapeDataString(consentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Account Access Consents
		/// Get Account Access Consents by Consent ID
		/// Account_access_consents_consentIdGet account-access-consents/{consentId}
		/// </summary>
		/// <param name="consentId">ConsentId</param>
		/// <returns>Account Access Consents Read</returns>
		public async Task<OBReadConsentResponse1> Account_access_consents_consentIdGetAsync(string consentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-access-consents/"+ (consentId==null? "" : System.Uri.EscapeDataString(consentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadConsentResponse1>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Accounts
		/// Get Accounts
		/// AccountsGet accounts
		/// </summary>
		/// <returns>Accounts Read</returns>
		public async Task<OBReadAccount5> AccountsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadAccount5>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Accounts
		/// Get Accounts by Account ID
		/// Accounts_accountIdGet accounts/{accountId}
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <returns>Accounts Read</returns>
		public async Task<OBReadAccount5> Accounts_accountIdGetAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadAccount5>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Balances
		/// Get Balances by Account ID
		/// Accounts_accountIdBalancesGet accounts/{accountId}/balances
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <returns>Balances Read</returns>
		public async Task<OBReadBalance1> Accounts_accountIdBalancesGetAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/balances";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadBalance1>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Beneficiaries
		/// Get Beneficiaries by Account ID
		/// Accounts_accountIdBeneficiariesGet accounts/{accountId}/beneficiaries
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <returns>Beneficiaries Read</returns>
		public async Task<OBReadBeneficiary5> Accounts_accountIdBeneficiariesGetAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/beneficiaries";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadBeneficiary5>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Parties
		/// Get Parties by Account ID
		/// Accounts_accountIdPartiesGet accounts/{accountId}/parties
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <returns>Party Read</returns>
		public async Task<OBReadParty3> Accounts_accountIdPartiesGetAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/parties";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadParty3>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Party
		/// Get Party by Account ID
		/// Accounts_accountIdPartyGet accounts/{accountId}/party
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <returns>Party Read</returns>
		public async Task<OBReadParty2> Accounts_accountIdPartyGetAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/party";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadParty2>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Scheduled Payments
		/// Get Scheduled Payments by Account ID
		/// Accounts_accountIdScheduled_paymentsGet accounts/{accountId}/scheduled-payments
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <returns>Scheduled Payments Read</returns>
		public async Task<OBReadScheduledPayment3> Accounts_accountIdScheduled_paymentsGetAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/scheduled-payments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadScheduledPayment3>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Standing Orders
		/// Get Standing Orders by Account ID
		/// Accounts_accountIdStanding_ordersGet accounts/{accountId}/standing-orders
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <returns>Standing Orders Read</returns>
		public async Task<OBReadStandingOrder6> Accounts_accountIdStanding_ordersGetAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/standing-orders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadStandingOrder6>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Statements
		/// Get Statements by Account ID
		/// Accounts_accountIdStatementsGetByFromStatementDateTimeAndToStatementDateTime accounts/{accountId}/statements
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <param name="fromStatementDateTime">The UTC ISO 8601 Date Time to filter statements FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <param name="toStatementDateTime">The UTC ISO 8601 Date Time to filter statements TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <returns>Statements Read</returns>
		public async Task<OBReadStatement2> Accounts_accountIdStatementsGetByFromStatementDateTimeAndToStatementDateTimeAsync(string accountId, System.DateTimeOffset fromStatementDateTime, System.DateTimeOffset toStatementDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/statements&fromStatementDateTime=" + fromStatementDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toStatementDateTime=" + toStatementDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadStatement2>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Statements
		/// Get Statements by Account ID and Statement ID
		/// Accounts_accountIdStatements_statementIdGet accounts/{accountId}/statements/{statementId}
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <param name="statementId">StatementId</param>
		/// <returns>Statements Read</returns>
		public async Task<OBReadStatement2> Accounts_accountIdStatements_statementIdGetAsync(string accountId, string statementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/statements/"+ (statementId==null? "" : System.Uri.EscapeDataString(statementId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadStatement2>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Statements
		/// Get Statement PDF File by Account ID and Statement ID
		/// Accounts_accountIdStatements_statementIdFileGet accounts/{accountId}/statements/{statementId}/file
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <param name="statementId">StatementId</param>
		/// <returns>Statements Read</returns>
		public async Task Accounts_accountIdStatements_statementIdFileGetAsync(string accountId, string statementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/statements/"+ (statementId==null? "" : System.Uri.EscapeDataString(statementId))+"/file";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Transactions
		/// Get Transactions by Account ID and Statement ID
		/// Accounts_accountIdStatements_statementIdTransactionsGet accounts/{accountId}/statements/{statementId}/transactions
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <param name="statementId">StatementId</param>
		/// <returns>Transactions Read</returns>
		public async Task<OBReadTransaction6> Accounts_accountIdStatements_statementIdTransactionsGetAsync(string accountId, string statementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/statements/"+ (statementId==null? "" : System.Uri.EscapeDataString(statementId))+"/transactions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadTransaction6>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Transactions
		/// Get Transactions by Account ID
		/// Accounts_accountIdTransactionsGetByFromBookingDateTimeAndToBookingDateTime accounts/{accountId}/transactions
		/// </summary>
		/// <param name="accountId">AccountId</param>
		/// <param name="fromBookingDateTime">The UTC ISO 8601 Date Time to filter transactions FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <param name="toBookingDateTime">The UTC ISO 8601 Date Time to filter transactions TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component.</param>
		/// <returns>Transactions Read</returns>
		public async Task<OBReadTransaction6> Accounts_accountIdTransactionsGetByFromBookingDateTimeAndToBookingDateTimeAsync(string accountId, System.DateTimeOffset fromBookingDateTime, System.DateTimeOffset toBookingDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/transactions&fromBookingDateTime=" + fromBookingDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toBookingDateTime=" + toBookingDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadTransaction6>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Party
		/// Get Party
		/// PartyGet party
		/// </summary>
		/// <returns>Party Read</returns>
		public async Task<OBReadParty2> PartyGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "party";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBReadParty2>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Sandbox
		/// Create Sandbox
		/// SandboxPost sandbox
		/// </summary>
		/// <param name="requestBody">SandboxRequest</param>
		public async Task SandboxPostAsync(SandboxRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sandbox";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Import Sandbox
		/// Import Sandbox
		/// SandboxPut sandbox
		/// </summary>
		/// <param name="requestBody">Sandbox</param>
		public async Task SandboxPutAsync(Sandbox requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sandbox";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Sandbox
		/// Delete Sandbox
		/// Sandbox_sandboxIdDelete sandbox/{sandboxId}
		/// </summary>
		/// <param name="sandboxId">Sandbox Id</param>
		public async Task Sandbox_sandboxIdDeleteAsync(string sandboxId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sandbox/"+ (sandboxId==null? "" : System.Uri.EscapeDataString(sandboxId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export Sandbox
		/// Export Sandbox
		/// Sandbox_sandboxIdGet sandbox/{sandboxId}
		/// </summary>
		/// <param name="sandboxId">Sandbox Id</param>
		/// <returns>OK</returns>
		public async Task<Sandbox> Sandbox_sandboxIdGetAsync(string sandboxId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sandbox/"+ (sandboxId==null? "" : System.Uri.EscapeDataString(sandboxId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sandbox>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
