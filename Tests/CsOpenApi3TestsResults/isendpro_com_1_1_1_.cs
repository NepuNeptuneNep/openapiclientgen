//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComptageReponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public ComptageReponse_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComptageReponse_etat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public ComptageReponse_etat_etat[] Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComptageReponse_etat_etat
	{
		
		/// <summary>
		/// nombre de caractères
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nb_caractere")]
		public string Nb_caractere { get; set; }
		
		/// <summary>
		/// nombre de sms nécessaires
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nb_sms")]
		public string Nb_sms { get; set; }
		
		/// <summary>
		/// numéro de téléphone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tel")]
		public string Tel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComptageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(ComptageRequestComptage._1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comptage")]
		public ComptageRequestComptage Comptage { get; set; } = ComptageRequestComptage._1;
		
		/// <summary>
		/// Date d'envoi au format YYYY-MM-DD hh:mm . Ce paramètre est optionnel, si il est omis l'envoi est réalisé immédiatement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_envoi")]
		public string Date_envoi { get; set; }
		
		/// <summary>
		/// - L'emetteur doit être une chaîne alphanumérique comprise entre 4 et 11 caractères.
		///
		///- Les caractères acceptés sont les chiffres entre 0 et 9, les lettres entre A et Z et l’espace.
		///
		///- Il ne peut pas comporter uniquement des chiffres. 
		///
		///- Pour la modification de l'émetteur et dans le cadre de campagnes commerciales, les opérateurs imposent contractuellement d'ajouter en fin de message le texte "STOP XXXXX". De ce fait, le message envoyé ne pourra excéder une longueur de 148 caractères au lieu des 160 caractères, le « STOP » étant rajouté automatiquement.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emetteur")]
		public string Emetteur { get; set; }
		
		/// <summary>
		/// Fuseau horaire de la date d'envoi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmt_zone")]
		public System.Nullable<ComptageRequestGmt_zone> Gmt_zone { get; set; }
		
		/// <summary>
		/// Clé API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// Si le message n’est pas à but commercial, vous pouvez faire une demande pour retirer l’obligation du STOP. Une fois votre demande validée par nos services, vous pourrez supprimer la mention STOP SMS en ajoutant nostop = "1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nostop")]
		public string Nostop { get; set; }
		
		/// <summary>
		/// Numero de téléphone au format national (exemple 0680010203) ou international (example 33680010203)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="num")]
		public string Num { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numAzur")]
		public System.Nullable<ComptageRequestNumAzur> NumAzur { get; set; }
		
		/// <summary>
		/// Message à envoyer aux destinataires. Le message doit être encodé au format utf-8 et ne contenir que des caractères existant dans l'alphabet GSM. Il est également possible d'envoyer (à l'étranger uniquement) des SMS en UCS-2, cf paramètre ucs2 pour plus de détails.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms")]
		public string Sms { get; set; }
		
		/// <summary>
		/// Le SMS long permet de dépasser la limite de 160 caractères en envoyant un message constitué
		///de plusieurs SMS.
		///Il est possible d’envoyer jusqu’à 6 SMS concaténés pour une longueur totale maximale de 918
		///caractères par message.
		///Pour des raisons technique, la limite par SMS concaténé étant de 153 caractères.
		///En cas de modification de l’émetteur, il faut considérer l’ajout automatique de 12 caractères
		///du « STOP SMS ».
		///Pour envoyer un smslong, il faut ajouter le paramètre smslong aux appels. La valeur de SMS doit être le nombre maximum de sms concaténé autorisé.   Pour ne pas avoir ce message d’erreur et obtenir un calcul dynamique du nombre de SMS alors il faut renseigner smslong = "999"
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smslong")]
		public System.Nullable<ComptageRequestSmslong> Smslong { get; set; }
		
		/// <summary>
		/// Le tracker doit être une chaine alphanumérique de moins de 50 caractères. Ce tracker sera ensuite renvoyé en paramètre des urls pour les retours des accusés de réception. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracker")]
		public string Tracker { get; set; }
		
		/// <summary>
		/// Il est également possible d’envoyer des SMS en alphabet non latin (russe, chinois, arabe, etc) sur
		///les numéros hors France métropolitaine.
		///Pour ce faire, la requête devrait être encodée au format UTF-8 et contenir l’argument ucs2 = "1"
		///Du fait de contraintes techniques, 1 SMS unique ne pourra pas dépasser 70 caractères (au lieu
		///des 160 usuels) et dans le cas de SMS long, chaque sms ne pourra dépasser 67 caractères.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ucs2")]
		public string Ucs2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComptageRequestComptage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComptageRequestGmt_zone
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Midway")]
		Pacific_Midway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Adak")]
		America_Adak = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT+10")]
		Etc_GMTPlus10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Marquesas")]
		Pacific_Marquesas = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Gambier")]
		Pacific_Gambier = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Anchorage")]
		America_Anchorage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Ensenada")]
		America_Ensenada = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT+8")]
		Etc_GMTPlus8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Los_Angeles")]
		America_Los_Angeles = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Denver")]
		America_Denver = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Chihuahua")]
		America_Chihuahua = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Dawson_Creek")]
		America_Dawson_Creek = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Belize")]
		America_Belize = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Cancun")]
		America_Cancun = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Chile/EasterIsland")]
		Chile_EasterIsland = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Chicago")]
		America_Chicago = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/New_York")]
		America_New_York = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Havana")]
		America_Havana = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Bogota")]
		America_Bogota = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Caracas")]
		America_Caracas = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Santiago")]
		America_Santiago = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/La_Paz")]
		America_La_Paz = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Stanley")]
		Atlantic_Stanley = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Campo_Grande")]
		America_Campo_Grande = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Goose_Bay")]
		America_Goose_Bay = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Glace_Bay")]
		America_Glace_Bay = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/St_Johns")]
		America_St_Johns = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Araguaina")]
		America_Araguaina = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Montevideo")]
		America_Montevideo = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Miquelon")]
		America_Miquelon = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Godthab")]
		America_Godthab = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Argentina/Buenos_Aires")]
		America_Argentina_Buenos_Aires = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Sao_Paulo")]
		America_Sao_Paulo = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Noronha")]
		America_Noronha = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Cape_Verde")]
		Atlantic_Cape_Verde = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Azores")]
		Atlantic_Azores = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Belfast")]
		Europe_Belfast = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Dublin")]
		Europe_Dublin = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Lisbon")]
		Europe_Lisbon = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/London")]
		Europe_London = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Abidjan")]
		Africa_Abidjan = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Amsterdam")]
		Europe_Amsterdam = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Belgrade")]
		Europe_Belgrade = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Brussels")]
		Europe_Brussels = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Algiers")]
		Africa_Algiers = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Windhoek")]
		Africa_Windhoek = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Beirut")]
		Asia_Beirut = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Cairo")]
		Africa_Cairo = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Gaza")]
		Asia_Gaza = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Blantyre")]
		Africa_Blantyre = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Jerusalem")]
		Asia_Jerusalem = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Minsk")]
		Europe_Minsk = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Damascus")]
		Asia_Damascus = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Moscow")]
		Europe_Moscow = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Addis_Ababa")]
		Africa_Addis_Ababa = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tehran")]
		Asia_Tehran = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Dubai")]
		Asia_Dubai = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yerevan")]
		Asia_Yerevan = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Kabul")]
		Asia_Kabul = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yekaterinburg")]
		Asia_Yekaterinburg = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tashkent")]
		Asia_Tashkent = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Kolkata")]
		Asia_Kolkata = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Katmandu")]
		Asia_Katmandu = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Dhaka")]
		Asia_Dhaka = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Novosibirsk")]
		Asia_Novosibirsk = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Rangoon")]
		Asia_Rangoon = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Bangkok")]
		Asia_Bangkok = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Krasnoyarsk")]
		Asia_Krasnoyarsk = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Hong_Kong")]
		Asia_Hong_Kong = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Irkutsk")]
		Asia_Irkutsk = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Perth")]
		Australia_Perth = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Eucla")]
		Australia_Eucla = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tokyo")]
		Asia_Tokyo = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Seoul")]
		Asia_Seoul = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yakutsk")]
		Asia_Yakutsk = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Adelaide")]
		Australia_Adelaide = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Darwin")]
		Australia_Darwin = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Brisbane")]
		Australia_Brisbane = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Hobart")]
		Australia_Hobart = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Vladivostok")]
		Asia_Vladivostok = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Lord_Howe")]
		Australia_Lord_Howe = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT-11")]
		Etc_GMTMinus11 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Magadan")]
		Asia_Magadan = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Norfolk")]
		Pacific_Norfolk = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Anadyr")]
		Asia_Anadyr = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Auckland")]
		Pacific_Auckland = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT-12")]
		Etc_GMTMinus12 = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Chatham")]
		Pacific_Chatham = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Tongatapu")]
		Pacific_Tongatapu = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Kiritimati")]
		Pacific_Kiritimati = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComptageRequestNumAzur
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComptageRequestSmslong
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="999")]
		_999 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreditResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public CreditResponse_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreditResponse_etat
	{
		
		/// <summary>
		/// Montant du crédit restant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public System.Nullable<System.Double> Credit { get; set; }
		
		/// <summary>
		/// Equivalence du crédit en nombre de SMS vers la France Métropolitaine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantite")]
		public string Quantite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Erreur
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public Erreur_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Erreur_etat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public Erreur_etat_etat[] Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Erreur_etat_etat
	{
		
		/// <summary>
		/// Code retour. Voir "tableau des code retour" dans l'annexe de la documentation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Libellé associé au code de retour
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HLRReponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public HLRReponse_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HLRReponse_etat
	{
		
		/// <summary>
		/// liste des retours
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public HLRReponse_etat_etat[] Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HLRReponse_etat_etat
	{
		
		/// <summary>
		/// Opérateur associé (si numéro valide)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operateur")]
		public string Operateur { get; set; }
		
		/// <summary>
		/// Numero de téléphone concerné
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tel")]
		public string Tel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HLRrequest
	{
		
		/// <summary>
		/// Doit valoir "1"
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(HLRrequestGetHLR._1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="getHLR")]
		public HLRrequestGetHLR GetHLR { get; set; } = HLRrequestGetHLR._1;
		
		/// <summary>
		/// Clé API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// liste de numéros de téléphone
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="num")]
		public string[] Num { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HLRrequestGetHLR
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LISTENOIREReponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public LISTENOIREReponse_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LISTENOIREReponse_etat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public LISTENOIREReponse_etat_etat[] Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LISTENOIREReponse_etat_etat
	{
		
		/// <summary>
		/// Doit valoir "OK"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="listeNoire")]
		public string ListeNoire { get; set; }
		
		/// <summary>
		/// Numéro de téléphone à placer en liste noire. Format national Français ou international.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tel")]
		public string Tel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREcreatereponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public REPERTOIREcreatereponse_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREcreatereponse_etat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public REPERTOIREcreatereponse_etat_etat[] Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREcreatereponse_etat_etat
	{
		
		/// <summary>
		/// Code retour. Voir "tableau des code retour" dans l'annexe de la documentation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Libellé associé au code retour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// repertoireId du repertoire crée.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repertoireId")]
		public string RepertoireId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREcreaterequest
	{
		
		/// <summary>
		/// Clé API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// Action à réaliser doit valoir "create" ici.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(REPERTOIREcreaterequestRepertoireEdit.create)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repertoireEdit")]
		public REPERTOIREcreaterequestRepertoireEdit RepertoireEdit { get; set; } = REPERTOIREcreaterequestRepertoireEdit.create;
		
		/// <summary>
		/// Nom du répertoire (libellé) à créer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repertoireNom")]
		public string RepertoireNom { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum REPERTOIREcreaterequestRepertoireEdit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		create = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREmodifreponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public REPERTOIREmodifreponse_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREmodifreponse_etat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public REPERTOIREmodifreponse_etat_etat[] Etat { get; set; }
	}
	
	/// <summary>
	/// Tableau de code retour. Si succès, un code retour distinct par numéro soumis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREmodifreponse_etat_etat
	{
		
		/// <summary>
		/// Code retour. Voir "tableau des code retour" dans l'annexe de la documentation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Libellé associé au code retour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// repertoireId passé en argument lors de l'appel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repertoireId")]
		public string RepertoireId { get; set; }
		
		/// <summary>
		/// Numéro de téléphone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tel")]
		public string Tel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class REPERTOIREmodifrequest
	{
		
		/// <summary>
		/// Noms des contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ1")]
		public string[] Champ1 { get; set; }
		
		/// <summary>
		/// Champs I des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ10")]
		public string[] Champ10 { get; set; }
		
		/// <summary>
		/// Champs J des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ11")]
		public string[] Champ11 { get; set; }
		
		/// <summary>
		/// Champs K des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ12")]
		public string[] Champ12 { get; set; }
		
		/// <summary>
		/// Champs L des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ13")]
		public string[] Champ13 { get; set; }
		
		/// <summary>
		/// Champs M des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ14")]
		public string[] Champ14 { get; set; }
		
		/// <summary>
		/// Champs N des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ15")]
		public string[] Champ15 { get; set; }
		
		/// <summary>
		/// Champs O des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ16")]
		public string[] Champ16 { get; set; }
		
		/// <summary>
		/// Champs P des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ17")]
		public string[] Champ17 { get; set; }
		
		/// <summary>
		/// Champs Q des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ18")]
		public string[] Champ18 { get; set; }
		
		/// <summary>
		/// Champs R des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ19")]
		public string[] Champ19 { get; set; }
		
		/// <summary>
		/// Champs A des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ2")]
		public string[] Champ2 { get; set; }
		
		/// <summary>
		/// Champs S des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ20")]
		public string[] Champ20 { get; set; }
		
		/// <summary>
		/// Champs T des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ21")]
		public string[] Champ21 { get; set; }
		
		/// <summary>
		/// Champs U des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ22")]
		public string[] Champ22 { get; set; }
		
		/// <summary>
		/// Champs V des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ23")]
		public string[] Champ23 { get; set; }
		
		/// <summary>
		/// Champs W des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ24")]
		public string[] Champ24 { get; set; }
		
		/// <summary>
		/// Champs X des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ25")]
		public string[] Champ25 { get; set; }
		
		/// <summary>
		/// Champs Y des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ26")]
		public string[] Champ26 { get; set; }
		
		/// <summary>
		/// Champs Z des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ27")]
		public string[] Champ27 { get; set; }
		
		/// <summary>
		/// Champs B des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ3")]
		public string[] Champ3 { get; set; }
		
		/// <summary>
		/// Champs C des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ4")]
		public string[] Champ4 { get; set; }
		
		/// <summary>
		/// Champs D des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ5")]
		public string[] Champ5 { get; set; }
		
		/// <summary>
		/// Champs E des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ6")]
		public string[] Champ6 { get; set; }
		
		/// <summary>
		/// Champs F des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ7")]
		public string[] Champ7 { get; set; }
		
		/// <summary>
		/// Champs G des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ8")]
		public string[] Champ8 { get; set; }
		
		/// <summary>
		/// Champs H des contacts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="champ9")]
		public string[] Champ9 { get; set; }
		
		/// <summary>
		/// Clé API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// liste des numéros des téléphone à ajouter ou supprimer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="num")]
		public string[] Num { get; set; }
		
		/// <summary>
		/// action à réaliser, "add" pour l'ajout de numéros, "del" pour la suppression de numéros
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repertoireEdit")]
		public REPERTOIREmodifrequestRepertoireEdit RepertoireEdit { get; set; }
		
		/// <summary>
		/// repertoireId du répertoire cible
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repertoireId")]
		public string RepertoireId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum REPERTOIREmodifrequestRepertoireEdit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		del = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMSReponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public SMSReponse_etat Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMSReponse_etat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public SMSReponse_etat_etat[] Etat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMSReponse_etat_etat
	{
		
		/// <summary>
		/// Code retour. Voir "tableau des code retour" dans l'annexe de la documentation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Libellé associé au code de retour
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Nombre de SMS longs facturés
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smslong")]
		public string Smslong { get; set; }
		
		/// <summary>
		/// Numero de téléphone concerné
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tel")]
		public string Tel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMSRequest
	{
		
		/// <summary>
		/// Paramètre optionnel, date d'envoi au format YYYY-MM-DD hh:mm
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_envoi")]
		public string Date_envoi { get; set; }
		
		/// <summary>
		/// L'emetteur doit être une chaîne alphanumérique comprise entre 4 et 11 caractères. Les caractères acceptés sont les chiffres entre 0 et 9, les lettres entre A et Z et l’espace. Il ne peut pas comporter uniquement des chiffres. Pour la modification de l’émetteur et dans le cadre de campagnes commerciales, les opérateurs imposent contractuellement d’ajouter en fin de message le texte suivant : STOP XXXXX De ce fait, le message envoyé ne pourra excéder une longueur de 148 caractères au lieu des 160 caractères, le « STOP » étant rajouté automatiquement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emetteur")]
		public string Emetteur { get; set; }
		
		/// <summary>
		/// Fuseau horaire de la date d'envoi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmt_zone")]
		public System.Nullable<SMSRequestGmt_zone> Gmt_zone { get; set; }
		
		/// <summary>
		/// Clé API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// Si le message n’est pas à but commercial, vous pouvez faire une demande pour retirer l’obligation du STOP. Une fois votre demande validée par nos services, vous pourrez supprimer la mention STOP SMS en ajoutant nostop = "1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nostop")]
		public string Nostop { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="num")]
		public string[] Num { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numAzur")]
		public System.Nullable<SMSRequestNumAzur> NumAzur { get; set; }
		
		/// <summary>
		/// Id du repertoire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repertoireId")]
		public string RepertoireId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms")]
		public string[] Sms { get; set; }
		
		/// <summary>
		/// Le SMS long permet de dépasser la limite de 160 caractères en envoyant un message constitué de plusieurs SMS. Il est possible d’envoyer jusqu’à 6 SMS concaténés pour une longueur totale maximale de 918 caractères par message. Pour des raisons technique, la limite par SMS concaténé étant de 153 caractères. En cas de modification de l’émetteur, il faut considérer l’ajout automatique de 12 caractères du « STOP SMS ». Pour envoyer un smslong, il faut ajouter le paramètre smslong aux appels. La valeur de SMS doit être le nombre maximum de sms concaténé autorisé.   Pour ne pas avoir ce message d’erreur et obtenir un calcul dynamique du nombre de SMS alors il faut renseigner smslong = "999" 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smslong")]
		public string Smslong { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracker")]
		public string[] Tracker { get; set; }
		
		/// <summary>
		/// Il est également possible d’envoyer des SMS en alphabet non latin (russe, chinois, arabe, etc) sur les numéros hors France métropolitaine. Pour ce faire, la requête devrait être encodée au format UTF-8 et contenir l’argument ucs2 = "1" Du fait de contraintes techniques, 1 SMS unique ne pourra pas dépasser 70 caractères (au lieu des 160 usuels) et dans le cas de SMS long, chaque sms ne pourra dépasser 67 caractères.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ucs2")]
		public string Ucs2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SMSRequestGmt_zone
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Midway")]
		Pacific_Midway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Adak")]
		America_Adak = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT+10")]
		Etc_GMTPlus10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Marquesas")]
		Pacific_Marquesas = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Gambier")]
		Pacific_Gambier = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Anchorage")]
		America_Anchorage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Ensenada")]
		America_Ensenada = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT+8")]
		Etc_GMTPlus8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Los_Angeles")]
		America_Los_Angeles = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Denver")]
		America_Denver = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Chihuahua")]
		America_Chihuahua = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Dawson_Creek")]
		America_Dawson_Creek = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Belize")]
		America_Belize = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Cancun")]
		America_Cancun = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Chile/EasterIsland")]
		Chile_EasterIsland = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Chicago")]
		America_Chicago = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/New_York")]
		America_New_York = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Havana")]
		America_Havana = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Bogota")]
		America_Bogota = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Caracas")]
		America_Caracas = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Santiago")]
		America_Santiago = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/La_Paz")]
		America_La_Paz = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Stanley")]
		Atlantic_Stanley = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Campo_Grande")]
		America_Campo_Grande = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Goose_Bay")]
		America_Goose_Bay = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Glace_Bay")]
		America_Glace_Bay = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/St_Johns")]
		America_St_Johns = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Araguaina")]
		America_Araguaina = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Montevideo")]
		America_Montevideo = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Miquelon")]
		America_Miquelon = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Godthab")]
		America_Godthab = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Argentina/Buenos_Aires")]
		America_Argentina_Buenos_Aires = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Sao_Paulo")]
		America_Sao_Paulo = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Noronha")]
		America_Noronha = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Cape_Verde")]
		Atlantic_Cape_Verde = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Azores")]
		Atlantic_Azores = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Belfast")]
		Europe_Belfast = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Dublin")]
		Europe_Dublin = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Lisbon")]
		Europe_Lisbon = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/London")]
		Europe_London = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Abidjan")]
		Africa_Abidjan = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Amsterdam")]
		Europe_Amsterdam = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Belgrade")]
		Europe_Belgrade = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Brussels")]
		Europe_Brussels = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Algiers")]
		Africa_Algiers = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Windhoek")]
		Africa_Windhoek = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Beirut")]
		Asia_Beirut = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Cairo")]
		Africa_Cairo = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Gaza")]
		Asia_Gaza = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Blantyre")]
		Africa_Blantyre = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Jerusalem")]
		Asia_Jerusalem = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Minsk")]
		Europe_Minsk = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Damascus")]
		Asia_Damascus = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Moscow")]
		Europe_Moscow = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Addis_Ababa")]
		Africa_Addis_Ababa = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tehran")]
		Asia_Tehran = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Dubai")]
		Asia_Dubai = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yerevan")]
		Asia_Yerevan = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Kabul")]
		Asia_Kabul = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yekaterinburg")]
		Asia_Yekaterinburg = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tashkent")]
		Asia_Tashkent = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Kolkata")]
		Asia_Kolkata = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Katmandu")]
		Asia_Katmandu = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Dhaka")]
		Asia_Dhaka = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Novosibirsk")]
		Asia_Novosibirsk = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Rangoon")]
		Asia_Rangoon = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Bangkok")]
		Asia_Bangkok = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Krasnoyarsk")]
		Asia_Krasnoyarsk = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Hong_Kong")]
		Asia_Hong_Kong = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Irkutsk")]
		Asia_Irkutsk = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Perth")]
		Australia_Perth = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Eucla")]
		Australia_Eucla = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tokyo")]
		Asia_Tokyo = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Seoul")]
		Asia_Seoul = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yakutsk")]
		Asia_Yakutsk = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Adelaide")]
		Australia_Adelaide = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Darwin")]
		Australia_Darwin = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Brisbane")]
		Australia_Brisbane = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Hobart")]
		Australia_Hobart = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Vladivostok")]
		Asia_Vladivostok = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Lord_Howe")]
		Australia_Lord_Howe = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT-11")]
		Etc_GMTMinus11 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Magadan")]
		Asia_Magadan = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Norfolk")]
		Pacific_Norfolk = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Anadyr")]
		Asia_Anadyr = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Auckland")]
		Pacific_Auckland = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT-12")]
		Etc_GMTMinus12 = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Chatham")]
		Pacific_Chatham = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Tongatapu")]
		Pacific_Tongatapu = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Kiritimati")]
		Pacific_Kiritimati = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SMSRequestNumAzur
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShortlinkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shortlink")]
		public string Shortlink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShortlinkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public ShortlinkResponseEtat Etat { get; set; }
	}
	
	public class ShortlinkResponseEtat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public ShortlinkResponseEtatEtat[] ShortlinkResponseEtatEtat { get; set; }
	}
	
	public class ShortlinkResponseEtatEtat
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Double> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortlink")]
		public string Shortlink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SmsUniqueRequest
	{
		
		/// <summary>
		/// Date d'envoi au format YYYY-MM-DD hh:mm . Ce paramètre est optionnel, si il est omis l'envoi est réalisé immédiatement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_envoi")]
		public string Date_envoi { get; set; }
		
		/// <summary>
		/// - L'emetteur doit être une chaîne alphanumérique comprise entre 4 et 11 caractères.
		///
		///- Les caractères acceptés sont les chiffres entre 0 et 9, les lettres entre A et Z et l’espace.
		///
		///- Il ne peut pas comporter uniquement des chiffres. 
		///
		///- Pour la modification de l'émetteur et dans le cadre de campagnes commerciales, les opérateurs imposent contractuellement d'ajouter en fin de message le texte "STOP XXXXX". De ce fait, le message envoyé ne pourra excéder une longueur de 148 caractères au lieu des 160 caractères, le « STOP » étant rajouté automatiquement.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emetteur")]
		public string Emetteur { get; set; }
		
		/// <summary>
		/// Fuseau horaire de la date d'envoi
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmt_zone")]
		public System.Nullable<SmsUniqueRequestGmt_zone> Gmt_zone { get; set; }
		
		/// <summary>
		/// Clé API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// Si le message n’est pas à but commercial, vous pouvez faire une demande pour retirer l’obligation du STOP. Une fois votre demande validée par nos services, vous pourrez supprimer la mention STOP SMS en ajoutant nostop = "1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nostop")]
		public string Nostop { get; set; }
		
		/// <summary>
		/// Numero de téléphone au format national (exemple 0680010203) ou international (example 33680010203)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="num")]
		public string Num { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numAzur")]
		public System.Nullable<SmsUniqueRequestNumAzur> NumAzur { get; set; }
		
		/// <summary>
		/// Message à envoyer aux destinataires. Le message doit être encodé au format utf-8 et ne contenir que des caractères existant dans l'alphabet GSM. Il est également possible d'envoyer (à l'étranger uniquement) des SMS en UCS-2, cf paramètre ucs2 pour plus de détails.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sms")]
		public string Sms { get; set; }
		
		/// <summary>
		/// Le SMS long permet de dépasser la limite de 160 caractères en envoyant un message constitué
		///de plusieurs SMS.
		///Il est possible d’envoyer jusqu’à 6 SMS concaténés pour une longueur totale maximale de 918
		///caractères par message.
		///Pour des raisons technique, la limite par SMS concaténé étant de 153 caractères.
		///En cas de modification de l’émetteur, il faut considérer l’ajout automatique de 12 caractères
		///du « STOP SMS ».
		///Pour envoyer un smslong, il faut ajouter le paramètre smslong aux appels. La valeur de SMS doit être le nombre maximum de sms concaténé autorisé.   Pour ne pas avoir ce message d’erreur et obtenir un calcul dynamique du nombre de SMS alors il faut renseigner smslong = "999"
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smslong")]
		public string Smslong { get; set; }
		
		/// <summary>
		/// Le tracker doit être une chaine alphanumérique de moins de 50 caractères. Ce tracker sera ensuite renvoyé en paramètre des urls pour les retours des accusés de réception. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracker")]
		public string Tracker { get; set; }
		
		/// <summary>
		/// Il est également possible d’envoyer des SMS en alphabet non latin (russe, chinois, arabe, etc) sur
		///les numéros hors France métropolitaine.
		///Pour ce faire, la requête devrait être encodée au format UTF-8 et contenir l’argument ucs2 = "1"
		///Du fait de contraintes techniques, 1 SMS unique ne pourra pas dépasser 70 caractères (au lieu
		///des 160 usuels) et dans le cas de SMS long, chaque sms ne pourra dépasser 67 caractères.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ucs2")]
		public string Ucs2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SmsUniqueRequestGmt_zone
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Midway")]
		Pacific_Midway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Adak")]
		America_Adak = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT+10")]
		Etc_GMTPlus10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Marquesas")]
		Pacific_Marquesas = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Gambier")]
		Pacific_Gambier = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Anchorage")]
		America_Anchorage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Ensenada")]
		America_Ensenada = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT+8")]
		Etc_GMTPlus8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Los_Angeles")]
		America_Los_Angeles = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Denver")]
		America_Denver = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Chihuahua")]
		America_Chihuahua = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Dawson_Creek")]
		America_Dawson_Creek = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Belize")]
		America_Belize = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Cancun")]
		America_Cancun = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Chile/EasterIsland")]
		Chile_EasterIsland = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Chicago")]
		America_Chicago = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/New_York")]
		America_New_York = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Havana")]
		America_Havana = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Bogota")]
		America_Bogota = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Caracas")]
		America_Caracas = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Santiago")]
		America_Santiago = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/La_Paz")]
		America_La_Paz = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Stanley")]
		Atlantic_Stanley = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Campo_Grande")]
		America_Campo_Grande = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Goose_Bay")]
		America_Goose_Bay = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Glace_Bay")]
		America_Glace_Bay = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/St_Johns")]
		America_St_Johns = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Araguaina")]
		America_Araguaina = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Montevideo")]
		America_Montevideo = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Miquelon")]
		America_Miquelon = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Godthab")]
		America_Godthab = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Argentina/Buenos_Aires")]
		America_Argentina_Buenos_Aires = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Sao_Paulo")]
		America_Sao_Paulo = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="America/Noronha")]
		America_Noronha = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Cape_Verde")]
		Atlantic_Cape_Verde = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Atlantic/Azores")]
		Atlantic_Azores = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Belfast")]
		Europe_Belfast = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Dublin")]
		Europe_Dublin = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Lisbon")]
		Europe_Lisbon = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/London")]
		Europe_London = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Abidjan")]
		Africa_Abidjan = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Amsterdam")]
		Europe_Amsterdam = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Belgrade")]
		Europe_Belgrade = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Brussels")]
		Europe_Brussels = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Algiers")]
		Africa_Algiers = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Windhoek")]
		Africa_Windhoek = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Beirut")]
		Asia_Beirut = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Cairo")]
		Africa_Cairo = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Gaza")]
		Asia_Gaza = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Blantyre")]
		Africa_Blantyre = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Jerusalem")]
		Asia_Jerusalem = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Minsk")]
		Europe_Minsk = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Damascus")]
		Asia_Damascus = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Europe/Moscow")]
		Europe_Moscow = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Africa/Addis_Ababa")]
		Africa_Addis_Ababa = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tehran")]
		Asia_Tehran = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Dubai")]
		Asia_Dubai = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yerevan")]
		Asia_Yerevan = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Kabul")]
		Asia_Kabul = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yekaterinburg")]
		Asia_Yekaterinburg = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tashkent")]
		Asia_Tashkent = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Kolkata")]
		Asia_Kolkata = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Katmandu")]
		Asia_Katmandu = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Dhaka")]
		Asia_Dhaka = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Novosibirsk")]
		Asia_Novosibirsk = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Rangoon")]
		Asia_Rangoon = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Bangkok")]
		Asia_Bangkok = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Krasnoyarsk")]
		Asia_Krasnoyarsk = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Hong_Kong")]
		Asia_Hong_Kong = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Irkutsk")]
		Asia_Irkutsk = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Perth")]
		Australia_Perth = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Eucla")]
		Australia_Eucla = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Tokyo")]
		Asia_Tokyo = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Seoul")]
		Asia_Seoul = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Yakutsk")]
		Asia_Yakutsk = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Adelaide")]
		Australia_Adelaide = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Darwin")]
		Australia_Darwin = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Brisbane")]
		Australia_Brisbane = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Hobart")]
		Australia_Hobart = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Vladivostok")]
		Asia_Vladivostok = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australia/Lord_Howe")]
		Australia_Lord_Howe = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT-11")]
		Etc_GMTMinus11 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Magadan")]
		Asia_Magadan = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Norfolk")]
		Pacific_Norfolk = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asia/Anadyr")]
		Asia_Anadyr = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Auckland")]
		Pacific_Auckland = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etc/GMT-12")]
		Etc_GMTMinus12 = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Chatham")]
		Pacific_Chatham = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Tongatapu")]
		Pacific_Tongatapu = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pacific/Kiritimati")]
		Pacific_Kiritimati = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SmsUniqueRequestNumAzur
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubaccountAddRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subAccountEdit")]
		public SubaccountAddRequestSubAccountEdit SubAccountEdit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subAccountLogin")]
		public string SubAccountLogin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subAccountPassword")]
		public string SubAccountPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubaccountAddRequestSubAccountEdit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		addAccount = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubaccountAddResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public SubaccountAddResponseEtat Etat { get; set; }
	}
	
	public class SubaccountAddResponseEtat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public SubaccountAddResponseEtatEtat[] SubaccountAddResponseEtatEtat { get; set; }
	}
	
	public class SubaccountAddResponseEtatEtat
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Double> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountId")]
		public string SubAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountKeyId")]
		public string SubAccountKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountLogin")]
		public string SubAccountLogin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubaccountRequest
	{
		
		/// <summary>
		/// Clé API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		/// <summary>
		/// montant du crédit à ajouter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccountAddCredit")]
		public string SubAccountAddCredit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountCountryCode")]
		public string SubAccountCountryCode { get; set; }
		
		/// <summary>
		/// action à réaliser soit setPrice pour définir un prix ou addCredit pour ajouter du credit ou setRestriction modifier la restriction stop /
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subAccountEdit")]
		public SubaccountRequestSubAccountEdit SubAccountEdit { get; set; }
		
		/// <summary>
		/// keyid du sous-compte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccountKeyId")]
		public string SubAccountKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountPrice")]
		public string SubAccountPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountRestrictionStop")]
		public System.Nullable<SubaccountRequestSubAccountRestrictionStop> SubAccountRestrictionStop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountRestrictionTime")]
		public System.Nullable<SubaccountRequestSubAccountRestrictionTime> SubAccountRestrictionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubaccountRequestSubAccountEdit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		setPrice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		addCredit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		setRestriction = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubaccountRequestSubAccountRestrictionStop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubaccountRequestSubAccountRestrictionTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubaccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public SubaccountResponseEtat Etat { get; set; }
	}
	
	public class SubaccountResponseEtat
	{
		
		[System.Runtime.Serialization.DataMember(Name="etat")]
		public SubaccountResponseEtatEtat[] SubaccountResponseEtatEtat { get; set; }
	}
	
	public class SubaccountResponseEtatEtat
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountId")]
		public string SubAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subAccountKeyid")]
		public string SubAccountKeyid { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retourne les SMS envoyés sur une période donnée
		/// Retourne les SMS envoyés sur une période donnée en fonction d'une date de début et d'une date de fin.
		/// 
		/// Les dates sont au format YYYY-MM-DD hh:mm.
		/// 
		/// Le fichier rapport de campagne est sous la forme d'un fichier zip + contenant un fichier csv contenant le détail des envois.
		/// 
		/// GetCampagne campagne
		/// </summary>
		/// <param name="keyid">Clé API</param>
		/// <param name="rapportCampagne">Doit valoir "1"</param>
		/// <param name="date_deb">date de debut au format YYYY-MM-DD hh:mm</param>
		/// <param name="date_fin">date de fin au format YYYY-MM-DD hh:mm</param>
		/// <returns>Successful response</returns>
		public async Task<string> GetCampagneAsync(string keyid, GetCampagneRapportCampagne rapportCampagne, string date_deb, string date_fin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campagne?keyid=" + (keyid==null? "" : System.Uri.EscapeDataString(keyid))+"&rapportCampagne=" + rapportCampagne+"&date_deb=" + (date_deb==null? "" : System.Uri.EscapeDataString(date_deb))+"&date_fin=" + (date_fin==null? "" : System.Uri.EscapeDataString(date_fin));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Compter le nombre de caractère
		/// Compte le nombre de SMS necessaire à un envoi
		/// Comptage comptage
		/// </summary>
		/// <param name="requestBody">sms request</param>
		/// <returns>Reponse OK</returns>
		public async Task<ComptageReponse> ComptageAsync(ComptageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "comptage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ComptageReponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Interrogation credit
		/// Retourne le credit existant associe au compte.
		/// 
		/// GetCredit credit
		/// </summary>
		/// <param name="keyid">Clé API</param>
		/// <param name="credit">Type de reponse demandée, 1 pour euro, 2 pour euro + estimation quantité</param>
		/// <returns>Successful response</returns>
		public async Task<CreditResponse> GetCreditAsync(string keyid, GetCreditCredit credit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "credit?keyid=" + (keyid==null? "" : System.Uri.EscapeDataString(keyid))+"&credit=" + credit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreditResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Ajoute un numero en liste noire
		/// Supprime un numero en liste noire
		/// DelListeNoire dellistenoire
		/// </summary>
		/// <param name="keyid">Clé API</param>
		/// <param name="delListeNoire">Doit valoir "1"</param>
		/// <param name="num">numéro de mobile à supprimer</param>
		/// <returns>Successful response</returns>
		public async Task<LISTENOIREReponse> DelListeNoireAsync(string keyid, DelListeNoireDelListeNoire delListeNoire, string num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dellistenoire?keyid=" + (keyid==null? "" : System.Uri.EscapeDataString(keyid))+"&delListeNoire=" + delListeNoire+"&num=" + (num==null? "" : System.Uri.EscapeDataString(num));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LISTENOIREReponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retourne le liste noire
		/// Retourne un fichier csv zippé contenant la liste noire
		/// GetListeNoire getlistenoire
		/// </summary>
		/// <param name="keyid">Clé API</param>
		/// <param name="getListeNoire">Doit valoir "1"</param>
		/// <returns>Successful response</returns>
		public async Task<string> GetListeNoireAsync(string keyid, GetListeNoireGetListeNoire getListeNoire, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getlistenoire?keyid=" + (keyid==null? "" : System.Uri.EscapeDataString(keyid))+"&getListeNoire=" + getListeNoire;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Vérifier la validité d'un numéro
		/// Réalise un lookup HLR sur les numéros
		/// 
		/// GetHlr hlr
		/// </summary>
		/// <returns>Reponse OK</returns>
		public async Task<HLRReponse> GetHlrAsync(HLRrequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hlr";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HLRReponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gestion repertoire (creation)
		/// Cree un nouveau répertoire et retourne son identifiant. Cet identifiant pourra être utilisé pour ajouter ou supprimer des numéros via l'API.
		/// RepertoireCrea repertoire
		/// </summary>
		/// <param name="requestBody">Creation repertoire</param>
		/// <returns>Successful response</returns>
		public async Task<REPERTOIREcreatereponse> RepertoireCreaAsync(REPERTOIREcreaterequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repertoire";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<REPERTOIREcreatereponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gestion repertoire (modification)
		/// Ajoute ou supprime une liste de numéros à un répertoire existant.
		/// Repertoire repertoire
		/// </summary>
		/// <param name="requestBody">Requête de creation repertoire</param>
		/// <returns>Successful response</returns>
		public async Task<REPERTOIREmodifreponse> RepertoireAsync(REPERTOIREmodifrequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repertoire";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<REPERTOIREmodifreponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Ajoute un numero en liste noire
		/// Ajoute un numero en liste noire. Une fois ajouté, les requêtes d'envoi de SMS marketing vers ce numéro seront refusées.
		/// SetListeNoire setlistenoire
		/// </summary>
		/// <param name="keyid">Clé API</param>
		/// <param name="setlisteNoire">Doit valoir "1"</param>
		/// <param name="num">numéro de mobile à insérer en liste noire</param>
		/// <returns>Successful response</returns>
		public async Task<LISTENOIREReponse> SetListeNoireAsync(string keyid, SetListeNoireSetlisteNoire setlisteNoire, string num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setlistenoire?keyid=" + (keyid==null? "" : System.Uri.EscapeDataString(keyid))+"&setlisteNoire=" + setlisteNoire+"&num=" + (num==null? "" : System.Uri.EscapeDataString(num));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LISTENOIREReponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// add a shortlink
		/// add a shortlink
		/// AddShortlink shortlink
		/// </summary>
		/// <param name="requestBody">add sub account request</param>
		/// <returns>Reponse OK</returns>
		public async Task<ShortlinkResponse> AddShortlinkAsync(ShortlinkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shortlink";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShortlinkResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Envoyer un sms
		/// Envoi un sms vers un unique destinataire
		/// SendSms sms
		/// </summary>
		/// <param name="requestBody">sms request</param>
		/// <returns>Reponse OK</returns>
		public async Task<SMSReponse> SendSmsAsync(SmsUniqueRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SMSReponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Envoyer des SMS
		/// Envoi de SMS vers 1 ou plusieurs destinataires
		/// 
		/// SendSmsMulti smsmulti
		/// </summary>
		/// <param name="requestBody">sms request</param>
		/// <returns>Reponse OK</returns>
		public async Task<SMSReponse> SendSmsMultiAsync(SMSRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "smsmulti";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SMSReponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Ajoute un sous compte
		/// Ajoute un sous compte
		/// SubaccountAdd subaccount
		/// </summary>
		/// <param name="requestBody">add sub account request</param>
		/// <returns>Reponse OK</returns>
		public async Task<SubaccountAddResponse> SubaccountAddAsync(SubaccountAddRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccount";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubaccountAddResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Edit a subaccount
		/// Edit a subaccount
		/// SubaccountEdit subaccount
		/// </summary>
		/// <param name="requestBody">edit sub account request</param>
		/// <returns>Reponse OK</returns>
		public async Task<SubaccountResponse> SubaccountEditAsync(SubaccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccount";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubaccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum GetCampagneRapportCampagne
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	public enum GetCreditCredit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
	}
	
	public enum DelListeNoireDelListeNoire
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	public enum GetListeNoireGetListeNoire
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
	
	public enum SetListeNoireSetlisteNoire
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
