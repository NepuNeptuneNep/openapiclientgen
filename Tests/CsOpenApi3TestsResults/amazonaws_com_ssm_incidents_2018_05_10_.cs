//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReplicationSetOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// The mapping between a Amazon Web Services Region and the key that's used to encrypt the data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionMapInputValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="sseKmsKeyId")]
		public string SseKmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResponsePlanOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// The action that starts at the beginning of an incident. The response plan defines the action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Action
	{
		
		[System.Runtime.Serialization.DataMember(Name="ssmAutomation")]
		public SsmAutomation SsmAutomation { get; set; }
	}
	
	/// <summary>
	/// Details about the Systems Manager automation document that will be used as a runbook during an incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SsmAutomation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentName")]
		public string DocumentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentVersion")]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dynamicParameters")]
		public DynamicSsmParameters DynamicParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SsmParameters Parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetAccount")]
		public SsmTargetAccount TargetAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicSsmParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SsmParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SsmTargetAccount
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_PLAN_OWNER_ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACTED_ACCOUNT = 1,
	}
	
	/// <summary>
	/// Used to remove the chat channel from an incident record or response plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmptyChatChannel
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	/// <summary>
	/// The SNS targets that are notified when updates are made to an incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationTargetItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="snsTopicArn")]
		public string SnsTopicArn { get; set; }
	}
	
	/// <summary>
	/// Information about third-party services integrated into a response plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Integration
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagerDutyConfiguration")]
		public PagerDutyConfiguration PagerDutyConfiguration { get; set; }
	}
	
	/// <summary>
	/// Details about the PagerDuty configuration for a response plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagerDutyConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagerDutyIncidentConfiguration")]
		public PagerDutyIncidentConfiguration PagerDutyIncidentConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretId")]
		public string SecretId { get; set; }
	}
	
	/// <summary>
	/// Details about the PagerDuty service where the response plan creates an incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagerDutyIncidentConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTimelineEventOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
	}
	
	/// <summary>
	/// An item referenced in a <code>TimelineEvent</code> that is involved in or somehow associated with an incident. You can specify an Amazon Resource Name (ARN) for an Amazon Web Services resource or a <code>RelatedItem</code> ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="relatedItemId")]
		public string RelatedItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIncidentRecordOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReplicationSetOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResponsePlanOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTimelineEventOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIncidentRecordOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecord")]
		public IncidentRecord IncidentRecord { get; set; }
	}
	
	/// <summary>
	/// The record of the incident that's created when an incident occurs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IncidentRecord
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="automationExecutions")]
		public AutomationExecution[] AutomationExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public ChatChannel ChatChannel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dedupeString")]
		public string DedupeString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public int Impact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordSource")]
		public IncidentRecordSource IncidentRecordSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationTargets")]
		public NotificationTargetItem[] NotificationTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedTime")]
		public System.DateTimeOffset ResolvedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IncidentRecordStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The Systems Manager automation document process to start as the runbook at the beginning of the incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutomationExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="ssmExecutionArn")]
		public string SsmExecutionArn { get; set; }
	}
	
	/// <summary>
	/// The Chatbot chat channel used for collaboration during an incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChatChannel
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatbotSns")]
		public string[] ChatbotSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="empty")]
		public EmptyChatChannel Empty { get; set; }
	}
	
	/// <summary>
	/// Details about what created the incident record and when it was created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IncidentRecordSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invokedBy")]
		public string InvokedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IncidentRecordStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOLVED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReplicationSetOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationSet")]
		public ReplicationSet ReplicationSet { get; set; }
	}
	
	/// <summary>
	/// The set of Amazon Web Services Region that your Incident Manager data will be replicated to and the KMS key used to encrypt the data. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicationSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deletionProtected")]
		public bool DeletionProtected { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regionMap")]
		public RegionInfoMap RegionMap { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReplicationSetStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionInfoMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplicationSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourcePoliciesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourcePolicies")]
		public ResourcePolicy[] ResourcePolicies { get; set; }
	}
	
	/// <summary>
	/// The resource policy that allows Incident Manager to perform actions on resources on your behalf.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourcePolicy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyDocument")]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyId")]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ramResourceShareRegion")]
		public string RamResourceShareRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResponsePlanOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public ChatChannel ChatChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engagements")]
		public string[] Engagements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentTemplate")]
		public IncidentTemplate IncidentTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrations")]
		public Integration[] Integrations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Basic details used in creating a response plan. The response plan is then used to create an incident record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IncidentTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="dedupeString")]
		public string DedupeString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public int Impact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTags")]
		public TagMap IncidentTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationTargets")]
		public NotificationTargetItem[] NotificationTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTimelineEventOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public TimelineEvent Event { get; set; }
	}
	
	/// <summary>
	/// A significant event that happened during the incident. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimelineEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventData")]
		public string EventData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventReferences")]
		public EventReference[] EventReferences { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventUpdatedTime")]
		public System.DateTimeOffset EventUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIncidentRecordsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordSummaries")]
		public IncidentRecordSummary[] IncidentRecordSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details describing an incident record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IncidentRecordSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public int Impact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordSource")]
		public IncidentRecordSource IncidentRecordSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedTime")]
		public System.DateTimeOffset ResolvedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IncidentRecordStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Filter the selection by using a condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Condition Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// A conditional statement with which to compare a value, after a timestamp, before a timestamp, or equal to a string or integer. If multiple conditions are specified, the conditionals become an <code>AND</code>ed statement. If multiple values are specified for a conditional, the values are <code>OR</code>d.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Condition
	{
		
		[System.Runtime.Serialization.DataMember(Name="after")]
		public System.DateTimeOffset After { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="before")]
		public System.DateTimeOffset Before { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equals")]
		public AttributeValueList Equals { get; set; }
	}
	
	/// <summary>
	/// Use the AttributeValueList to filter by string or integer values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeValueList
	{
		
		[System.Runtime.Serialization.DataMember(Name="integerValues")]
		public System.Nullable<System.Int32> IntegerValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		public string[] StringValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRelatedItemsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedItems")]
		public RelatedItem[] RelatedItems { get; set; }
	}
	
	/// <summary>
	/// Resources that responders use to triage and mitigate the incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelatedItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="generatedId")]
		public string GeneratedId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public ItemIdentifier Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Details and type of a related item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ItemType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ItemValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANALYSIS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCIDENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOLVED_RESOURCE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 8,
	}
	
	/// <summary>
	/// Describes a related item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricDefinition")]
		public string MetricDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagerDutyIncidentDetail")]
		public PagerDutyIncidentDetail PagerDutyIncidentDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Details about the PagerDuty incident associated with an incident created by an Incident Manager response plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagerDutyIncidentDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoResolve")]
		public System.Nullable<System.Boolean> AutoResolve { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretId")]
		public string SecretId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReplicationSetsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationSetArns")]
		public string[] ReplicationSetArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponsePlansOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responsePlanSummaries")]
		public ResponsePlanSummary[] ResponsePlanSummaries { get; set; }
	}
	
	/// <summary>
	/// Details of the response plan that are used when creating an incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePlanSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTimelineEventsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventSummaries")]
		public EventSummary[] EventSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details about a timeline event during an incident.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventReferences")]
		public EventReference[] EventReferences { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventUpdatedTime")]
		public System.DateTimeOffset EventUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourcePolicyOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyId")]
		public string PolicyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartIncidentOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeletionProtectionOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIncidentRecordOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRelatedItemsOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateReplicationSetOutput
	{
	}
	
	/// <summary>
	/// Details used when updating the replication set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateReplicationSetAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="addRegionAction")]
		public AddRegionAction AddRegionAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteRegionAction")]
		public DeleteRegionAction DeleteRegionAction { get; set; }
	}
	
	/// <summary>
	/// Defines the Amazon Web Services Region and KMS key to add to the replication set. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddRegionAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseKmsKeyId")]
		public string SseKmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Defines the information about the Amazon Web Services Region you're deleting from your replication set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRegionAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResponsePlanOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTimelineEventOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionMapInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReplicationSetInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public RegionMapInput Regions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResponsePlanInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public ChatChannel ChatChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engagements")]
		public string[] Engagements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentTemplate")]
		public IncidentTemplate IncidentTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrations")]
		public Integration[] Integrations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTimelineEventInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventData")]
		public string EventData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventReferences")]
		public EventReference[] EventReferences { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIncidentRecordInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReplicationSetInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyId")]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResponsePlanInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTimelineEventInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VariableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCIDENT_RECORD_ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOLVED_RESOURCES = 1,
	}
	
	/// <summary>
	/// The dynamic SSM parameter value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicSsmParameterValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="variable")]
		public VariableType Variable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIncidentRecordInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReplicationSetInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourcePoliciesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResponsePlanInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTimelineEventInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIncidentRecordsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRelatedItemsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReplicationSetsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResponsePlansInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TimelineEventSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_TIME = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTimelineEventsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public TimelineEventSort SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourcePolicyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Information about a Amazon Web Services Region in your replication set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="sseKmsKeyId")]
		public string SseKmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RegionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusUpdateDateTime")]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	/// <summary>
	/// Details about the related item you're adding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelatedItemsUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemToAdd")]
		public RelatedItem ItemToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemToRemove")]
		public ItemIdentifier ItemToRemove { get; set; }
	}
	
	/// <summary>
	/// Details about what caused the incident to be created in Incident Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="rawData")]
		public string RawData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerArn")]
		public string TriggerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartIncidentInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public System.Nullable<System.Int32> Impact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedItems")]
		public RelatedItem[] RelatedItems { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responsePlanArn")]
		public string ResponsePlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerDetails")]
		public TriggerDetails TriggerDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMapUpdate
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeletionProtectionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deletionProtected")]
		public bool DeletionProtected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIncidentRecordInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public ChatChannel ChatChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public System.Nullable<System.Int32> Impact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationTargets")]
		public NotificationTargetItem[] NotificationTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IncidentRecordStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRelatedItemsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedItemsUpdate")]
		public RelatedItemsUpdate RelatedItemsUpdate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateReplicationSetInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public UpdateReplicationSetAction[] Actions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResponsePlanInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public ChatChannel ChatChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engagements")]
		public string[] Engagements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateDedupeString")]
		public string IncidentTemplateDedupeString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateImpact")]
		public System.Nullable<System.Int32> IncidentTemplateImpact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateNotificationTargets")]
		public NotificationTargetItem[] IncidentTemplateNotificationTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateSummary")]
		public string IncidentTemplateSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateTags")]
		public TagMapUpdate IncidentTemplateTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateTitle")]
		public string IncidentTemplateTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrations")]
		public Integration[] Integrations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTimelineEventInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventData")]
		public string EventData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventReferences")]
		public EventReference[] EventReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		public string IncidentRecordArn { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// A replication set replicates and encrypts your data to the provided Regions with the provided KMS key.
		/// CreateReplicationSet createReplicationSet
		/// </summary>
		public async Task CreateReplicationSetAsync(CreateReplicationSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createReplicationSet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a response plan that automates the initial response to incidents. A response plan engages contacts, starts chat channel collaboration, and initiates runbooks at the beginning of an incident.
		/// CreateResponsePlan createResponsePlan
		/// </summary>
		public async Task CreateResponsePlanAsync(CreateResponsePlanPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createResponsePlan";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a custom timeline event on the incident details page of an incident record. Incident Manager automatically creates timeline events that mark key moments during an incident. You can create custom timeline events to mark important events that Incident Manager can detect automatically.
		/// CreateTimelineEvent createTimelineEvent
		/// </summary>
		public async Task CreateTimelineEventAsync(CreateTimelineEventPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createTimelineEvent";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an incident record from Incident Manager.
		/// DeleteIncidentRecord deleteIncidentRecord
		/// </summary>
		public async Task DeleteIncidentRecordAsync(DeleteIncidentRecordPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteIncidentRecord";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes all Regions in your replication set. Deleting the replication set deletes all Incident Manager data.
		/// DeleteReplicationSet deleteReplicationSet#arn
		/// </summary>
		/// <param name="arn">The Amazon Resource Name (ARN) of the replication set you're deleting.
		/// Min length: 0
		/// Max length: 1000
		// </param>
		public async Task DeleteReplicationSetAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteReplicationSet#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the resource policy that Resource Access Manager uses to share your Incident Manager resource.
		/// DeleteResourcePolicy deleteResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteResourcePolicyOutput> DeleteResourcePolicyAsync(DeleteResourcePolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteResourcePolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteResourcePolicyOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified response plan. Deleting a response plan stops all linked CloudWatch alarms and EventBridge events from creating an incident with this response plan.
		/// DeleteResponsePlan deleteResponsePlan
		/// </summary>
		public async Task DeleteResponsePlanAsync(DeleteResponsePlanPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteResponsePlan";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a timeline event from an incident.
		/// DeleteTimelineEvent deleteTimelineEvent
		/// </summary>
		public async Task DeleteTimelineEventAsync(DeleteTimelineEventPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteTimelineEvent";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the details for the specified incident record.
		/// GetIncidentRecord getIncidentRecord#arn
		/// </summary>
		/// <param name="arn">The Amazon Resource Name (ARN) of the incident record.
		/// Min length: 0
		/// Max length: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIncidentRecordOutput> GetIncidentRecordAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getIncidentRecord#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetIncidentRecordOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve your Incident Manager replication set.
		/// GetReplicationSet getReplicationSet#arn
		/// </summary>
		/// <param name="arn">The Amazon Resource Name (ARN) of the replication set you want to retrieve.
		/// Min length: 0
		/// Max length: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReplicationSetOutput> GetReplicationSetAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getReplicationSet#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetReplicationSetOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the resource policies attached to the specified response plan.
		/// GetResourcePolicies getResourcePolicies#resourceArn
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the response plan with the attached resource policy. 
		/// Min length: 0
		/// Max length: 1000
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetResourcePoliciesOutput> GetResourcePoliciesAsync(string resourceArn, string maxResults, string nextToken, GetResourcePoliciesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getResourcePolicies#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetResourcePoliciesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the details of the specified response plan.
		/// GetResponsePlan getResponsePlan#arn
		/// </summary>
		/// <param name="arn">The Amazon Resource Name (ARN) of the response plan.
		/// Min length: 0
		/// Max length: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetResponsePlanOutput> GetResponsePlanAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getResponsePlan#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetResponsePlanOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a timeline event based on its ID and incident record.
		/// GetTimelineEvent getTimelineEvent#eventId&incidentRecordArn
		/// </summary>
		/// <param name="eventId">The ID of the event. You can get an event's ID when you create it, or by using <code>ListTimelineEvents</code>.
		/// Min length: 0
		/// Max length: 50
		// </param>
		/// <param name="incidentRecordArn">The Amazon Resource Name (ARN) of the incident that includes the timeline event.
		/// Min length: 0
		/// Max length: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTimelineEventOutput> GetTimelineEventAsync(string eventId, string incidentRecordArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getTimelineEvent#eventId&incidentRecordArn?eventId=" + (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"&incidentRecordArn=" + (incidentRecordArn==null? "" : System.Uri.EscapeDataString(incidentRecordArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTimelineEventOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all incident records in your account. Use this command to retrieve the Amazon Resource Name (ARN) of the incident record you want to update.
		/// ListIncidentRecords listIncidentRecords
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIncidentRecordsOutput> ListIncidentRecordsAsync(string maxResults, string nextToken, ListIncidentRecordsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listIncidentRecords?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListIncidentRecordsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all related items for an incident record.
		/// ListRelatedItems listRelatedItems
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRelatedItemsOutput> ListRelatedItemsAsync(string maxResults, string nextToken, ListRelatedItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listRelatedItems?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListRelatedItemsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists details about the replication set configured in your account.
		/// ListReplicationSets listReplicationSets
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReplicationSetsOutput> ListReplicationSetsAsync(string maxResults, string nextToken, ListReplicationSetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listReplicationSets?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListReplicationSetsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all response plans in your account.
		/// ListResponsePlans listResponsePlans
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListResponsePlansOutput> ListResponsePlansAsync(string maxResults, string nextToken, ListResponsePlansPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listResponsePlans?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListResponsePlansOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the tags that are attached to the specified response plan.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the response plan.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a tag to a response plan.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the response plan you're adding the tags to.</param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists timeline events for the specified incident record.
		/// ListTimelineEvents listTimelineEvents
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTimelineEventsOutput> ListTimelineEventsAsync(string maxResults, string nextToken, ListTimelineEventsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listTimelineEvents?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTimelineEventsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a resource policy to the specified response plan. The resource policy is used to share the response plan using Resource Access Manager (RAM). For more information about cross-account sharing, see <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/incident-manager-cross-account-cross-region.html">Cross-Region and cross-account incident management</a>.
		/// PutResourcePolicy putResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutResourcePolicyOutput> PutResourcePolicyAsync(PutResourcePolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "putResourcePolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutResourcePolicyOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Used to start an incident from CloudWatch alarms, EventBridge events, or manually.
		/// StartIncident startIncident
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartIncidentOutput> StartIncidentAsync(StartIncidentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "startIncident";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartIncidentOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes a tag from a resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the response plan you're removing a tag from.</param>
		/// <param name="tagKeys">The name of the tag to remove from the response plan.
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update deletion protection to either allow or deny deletion of the final Region in a replication set.
		/// UpdateDeletionProtection updateDeletionProtection
		/// </summary>
		public async Task UpdateDeletionProtectionAsync(UpdateDeletionProtectionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateDeletionProtection";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the details of an incident record. You can use this operation to update an incident record from the defined chat channel. For more information about using actions in chat channels, see <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/chat.html#chat-interact">Interacting through chat</a>.
		/// UpdateIncidentRecord updateIncidentRecord
		/// </summary>
		public async Task UpdateIncidentRecordAsync(UpdateIncidentRecordPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateIncidentRecord";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add or remove related items from the related items tab of an incident record.
		/// UpdateRelatedItems updateRelatedItems
		/// </summary>
		public async Task UpdateRelatedItemsAsync(UpdateRelatedItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateRelatedItems";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add or delete Regions from your replication set.
		/// UpdateReplicationSet updateReplicationSet
		/// </summary>
		public async Task UpdateReplicationSetAsync(UpdateReplicationSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateReplicationSet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the specified response plan.
		/// UpdateResponsePlan updateResponsePlan
		/// </summary>
		public async Task UpdateResponsePlanAsync(UpdateResponsePlanPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateResponsePlan";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a timeline event. You can update events of type <code>Custom Event</code>.
		/// UpdateTimelineEvent updateTimelineEvent
		/// </summary>
		public async Task UpdateTimelineEventAsync(UpdateTimelineEventPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateTimelineEvent";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CreateReplicationSetPostBody
	{
		
		/// <summary>
		/// A token that ensures that the operation is called only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The Regions that Incident Manager replicates your data to. You can have up to three Regions in your replication set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public System.Collections.Generic.Dictionary<string, RegionMapInputValue> Regions { get; set; }
		
		/// <summary>
		/// A list of tags to add to the replication set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateResponsePlanPostBody
	{
		
		/// <summary>
		/// The actions that the response plan starts at the beginning of an incident.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		[System.ComponentModel.DataAnnotations.Length(0, 1)]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// The Chatbot chat channel used for collaboration during an incident.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public CreateResponsePlanPostBodyChatChannel ChatChannel { get; set; }
		
		/// <summary>
		/// A token ensuring that the operation is called only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The long format of the response plan name. This field can contain spaces.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.Length(0, 200)]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engagements")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public string[] Engagements { get; set; }
		
		/// <summary>
		/// Basic details used in creating a response plan. The response plan is then used to create an incident record.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentTemplate")]
		public CreateResponsePlanPostBodyIncidentTemplate IncidentTemplate { get; set; }
		
		/// <summary>
		/// Information about third-party services integrated into the response plan.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrations")]
		[System.ComponentModel.DataAnnotations.Length(0, 1)]
		public Integration[] Integrations { get; set; }
		
		/// <summary>
		/// The short format name of the response plan. Can't include spaces.
		/// Required
		/// Min length: 1
		/// Max length: 200
		/// Pattern: ^[a-zA-Z0-9-_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 200)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of tags that you are adding to the response plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateResponsePlanPostBodyChatChannel
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatbotSns")]
		public string[] ChatbotSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="empty")]
		public EmptyChatChannel Empty { get; set; }
	}
	
	public class CreateResponsePlanPostBodyIncidentTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="dedupeString")]
		public string DedupeString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impact")]
		public System.Nullable<System.Int32> Impact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incidentTags")]
		public TagMap IncidentTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationTargets")]
		public NotificationTargetItem[] NotificationTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class CreateTimelineEventPostBody
	{
		
		/// <summary>
		/// A token that ensures that a client calls the action only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// A short description of the event.
		/// Required
		/// Min length: 0
		/// Max length: 12000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventData")]
		[System.ComponentModel.DataAnnotations.Length(0, 12000)]
		public string EventData { get; set; }
		
		/// <summary>
		/// Adds one or more references to the <code>TimelineEvent</code>. A reference is an Amazon Web Services resource involved or associated with the incident. To specify a reference, enter its Amazon Resource Name (ARN). You can also specify a related item associated with a resource. For example, to specify an Amazon DynamoDB (DynamoDB) table as a resource, use the table's ARN. You can also specify an Amazon CloudWatch metric associated with the DynamoDB table as a related item.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventReferences")]
		[System.ComponentModel.DataAnnotations.Length(0, 10)]
		public EventReference[] EventReferences { get; set; }
		
		/// <summary>
		/// The time that the event occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		/// <summary>
		/// The type of event. You can create timeline events of type <code>Custom Event</code>.
		/// Required
		/// Min length: 0
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		[System.ComponentModel.DataAnnotations.Length(0, 100)]
		public string EventType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident record that the action adds the incident to.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string IncidentRecordArn { get; set; }
	}
	
	public class DeleteIncidentRecordPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident record you are deleting.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string Arn { get; set; }
	}
	
	public class DeleteResourcePolicyPostBody
	{
		
		/// <summary>
		/// The ID of the resource policy you're deleting.
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policyId")]
		[System.ComponentModel.DataAnnotations.Length(0, 256)]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource you're deleting the policy from.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string ResourceArn { get; set; }
	}
	
	public class DeleteResponsePlanPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the response plan.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string Arn { get; set; }
	}
	
	public class DeleteTimelineEventPostBody
	{
		
		/// <summary>
		/// The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.
		/// Required
		/// Min length: 0
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public string EventId { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident that includes the timeline event.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string IncidentRecordArn { get; set; }
	}
	
	public class GetResourcePoliciesPostBody
	{
		
		/// <summary>
		/// The maximum number of resource policies to display for each page of results.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token to continue to the next page of results.
		/// Min length: 0
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 2000)]
		public string NextToken { get; set; }
	}
	
	public class ListIncidentRecordsPostBody
	{
		
		/// <summary>
		/// <p>Filters the list of incident records you want to search through. You can filter on the following keys:</p> <ul> <li> <p> <code>creationTime</code> </p> </li> <li> <p> <code>impact</code> </p> </li> <li> <p> <code>status</code> </p> </li> <li> <p> <code>createdBy</code> </p> </li> </ul> <p>Note the following when when you use Filters:</p> <ul> <li> <p>If you don't specify a Filter, the response includes all incident records.</p> </li> <li> <p>If you specify more than one filter in a single request, the response returns incident records that match all filters.</p> </li> <li> <p>If you specify a filter with more than one value, the response returns incident records that match any of the values provided.</p> </li> </ul>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token to continue to the next page of results.
		/// Min length: 0
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 2000)]
		public string NextToken { get; set; }
	}
	
	public class ListRelatedItemsPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident record containing the listed related items.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string IncidentRecordArn { get; set; }
		
		/// <summary>
		/// The maximum number of related items per page.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token to continue to the next page of results.
		/// Min length: 0
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 2000)]
		public string NextToken { get; set; }
	}
	
	public class ListReplicationSetsPostBody
	{
		
		/// <summary>
		/// The maximum number of results per page. 
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token to continue to the next page of results.
		/// Min length: 0
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 2000)]
		public string NextToken { get; set; }
	}
	
	public class ListResponsePlansPostBody
	{
		
		/// <summary>
		/// The maximum number of response plans per page.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token to continue to the next page of results.
		/// Min length: 0
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 2000)]
		public string NextToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A list of tags to add to the response plan.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListTimelineEventsPostBody
	{
		
		/// <summary>
		/// <p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p> <ul> <li> <p> <code>eventTime</code> </p> </li> <li> <p> <code>eventType</code> </p> </li> </ul> <p>Note the following when deciding how to use Filters:</p> <ul> <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li> <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li> <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li> </ul>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident that includes the timeline event.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string IncidentRecordArn { get; set; }
		
		/// <summary>
		/// The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token to continue to the next page of results.
		/// Min length: 0
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 2000)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Sort timeline events by the specified key value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public TimelineEventSort SortBy { get; set; }
		
		/// <summary>
		/// Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrder SortOrder { get; set; }
	}
	
	public class PutResourcePolicyPostBody
	{
		
		/// <summary>
		/// Details of the resource policy.
		/// Required
		/// Min length: 0
		/// Max length: 4000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.Length(0, 4000)]
		public string Policy { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the response plan to add the resource policy to.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string ResourceArn { get; set; }
	}
	
	public class StartIncidentPostBody
	{
		
		/// <summary>
		/// A token ensuring that the operation is called only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>1</code> - Critical impact, this typically relates to full application failure that impacts many to all customers. </p> </li> <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li> <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li> <li> <p> <code>4</code> - Low impact, customer might aren't impacted by the problem yet.</p> </li> <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li> </ul>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impact")]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> Impact { get; set; }
		
		/// <summary>
		/// Add related items to the incident for other responders to use. Related items are Amazon Web Services resources, external links, or files uploaded to an Amazon S3 bucket. 
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedItems")]
		[System.ComponentModel.DataAnnotations.Length(0, 100)]
		public RelatedItem[] RelatedItems { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident. 
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="responsePlanArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string ResponsePlanArn { get; set; }
		
		/// <summary>
		/// Provide a title for the incident. Providing a title overwrites the title provided by the response plan. 
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.Length(0, 200)]
		public string Title { get; set; }
		
		/// <summary>
		/// Details about what caused the incident to be created in Incident Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerDetails")]
		public StartIncidentPostBodyTriggerDetails TriggerDetails { get; set; }
	}
	
	public class StartIncidentPostBodyTriggerDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="rawData")]
		public string RawData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerArn")]
		public string TriggerArn { get; set; }
	}
	
	public class UpdateDeletionProtectionPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the replication set to update.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string Arn { get; set; }
		
		/// <summary>
		/// A token that ensures that the operation is called only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Specifies if deletion protection is turned on or off in your account. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deletionProtected")]
		public bool DeletionProtected { get; set; }
	}
	
	public class UpdateIncidentRecordPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident record you are updating.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string Arn { get; set; }
		
		/// <summary>
		/// The Chatbot chat channel used for collaboration during an incident.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public UpdateIncidentRecordPostBodyChatChannel ChatChannel { get; set; }
		
		/// <summary>
		/// A token that ensures that a client calls the operation only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li> <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li> <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li> <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li> <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li> </ul>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impact")]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> Impact { get; set; }
		
		/// <summary>
		/// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p> <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationTargets")]
		[System.ComponentModel.DataAnnotations.Length(0, 10)]
		public NotificationTargetItem[] NotificationTargets { get; set; }
		
		/// <summary>
		/// The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IncidentRecordStatus Status { get; set; }
		
		/// <summary>
		/// A longer description of what occurred during the incident.
		/// Min length: 0
		/// Max length: 8000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		[System.ComponentModel.DataAnnotations.Length(0, 8000)]
		public string Summary { get; set; }
		
		/// <summary>
		/// A brief description of the incident.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.Length(0, 200)]
		public string Title { get; set; }
	}
	
	public class UpdateIncidentRecordPostBodyChatChannel
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatbotSns")]
		public string[] ChatbotSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="empty")]
		public EmptyChatChannel Empty { get; set; }
	}
	
	public class UpdateRelatedItemsPostBody
	{
		
		/// <summary>
		/// A token that ensures that a client calls the operation only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident record that contains the related items that you update.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string IncidentRecordArn { get; set; }
		
		/// <summary>
		/// Details about the related item you're adding.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedItemsUpdate")]
		public UpdateRelatedItemsPostBodyRelatedItemsUpdate RelatedItemsUpdate { get; set; }
	}
	
	public class UpdateRelatedItemsPostBodyRelatedItemsUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemToAdd")]
		public RelatedItem ItemToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemToRemove")]
		public ItemIdentifier ItemToRemove { get; set; }
	}
	
	public class UpdateReplicationSetPostBody
	{
		
		/// <summary>
		/// An action to add or delete a Region.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		[System.ComponentModel.DataAnnotations.Length(1, 1)]
		public UpdateReplicationSetAction[] Actions { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the replication set you're updating.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string Arn { get; set; }
		
		/// <summary>
		/// A token that ensures that the operation is called only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
	}
	
	public class UpdateResponsePlanPostBody
	{
		
		/// <summary>
		/// The actions that this response plan takes at the beginning of an incident.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		[System.ComponentModel.DataAnnotations.Length(0, 1)]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the response plan.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string Arn { get; set; }
		
		/// <summary>
		/// The Chatbot chat channel used for collaboration during an incident.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chatChannel")]
		public UpdateResponsePlanPostBodyChatChannel ChatChannel { get; set; }
		
		/// <summary>
		/// A token ensuring that the operation is called only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The long format name of the response plan. The display name can't contain spaces.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.Length(0, 200)]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engagements")]
		[System.ComponentModel.DataAnnotations.Length(0, 5)]
		public string[] Engagements { get; set; }
		
		/// <summary>
		/// The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateDedupeString")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		public string IncidentTemplateDedupeString { get; set; }
		
		/// <summary>
		/// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>5</code> - Severe impact</p> </li> <li> <p> <code>4</code> - High impact</p> </li> <li> <p> <code>3</code> - Medium impact</p> </li> <li> <p> <code>2</code> - Low impact</p> </li> <li> <p> <code>1</code> - No impact</p> </li> </ul>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateImpact")]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> IncidentTemplateImpact { get; set; }
		
		/// <summary>
		/// The Amazon SNS targets that are notified when updates are made to an incident.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateNotificationTargets")]
		[System.ComponentModel.DataAnnotations.Length(0, 10)]
		public NotificationTargetItem[] IncidentTemplateNotificationTargets { get; set; }
		
		/// <summary>
		/// A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.
		/// Min length: 0
		/// Max length: 8000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateSummary")]
		[System.ComponentModel.DataAnnotations.Length(0, 8000)]
		public string IncidentTemplateSummary { get; set; }
		
		/// <summary>
		/// Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateTags")]
		public System.Collections.Generic.Dictionary<string, string> IncidentTemplateTags { get; set; }
		
		/// <summary>
		/// The short format name of the incident. The title can't contain spaces.
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incidentTemplateTitle")]
		[System.ComponentModel.DataAnnotations.Length(0, 200)]
		public string IncidentTemplateTitle { get; set; }
		
		/// <summary>
		/// Information about third-party services integrated into the response plan.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrations")]
		[System.ComponentModel.DataAnnotations.Length(0, 1)]
		public Integration[] Integrations { get; set; }
	}
	
	public class UpdateResponsePlanPostBodyChatChannel
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatbotSns")]
		public string[] ChatbotSns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="empty")]
		public EmptyChatChannel Empty { get; set; }
	}
	
	public class UpdateTimelineEventPostBody
	{
		
		/// <summary>
		/// A token that ensures that a client calls the operation only once with the specified details.
		/// Min length: 0
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 128)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// A short description of the event.
		/// Min length: 0
		/// Max length: 12000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventData")]
		[System.ComponentModel.DataAnnotations.Length(0, 12000)]
		public string EventData { get; set; }
		
		/// <summary>
		/// The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.
		/// Required
		/// Min length: 0
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public string EventId { get; set; }
		
		/// <summary>
		/// <p>Updates all existing references in a <code>TimelineEvent</code>. A reference is an Amazon Web Services resource involved or associated with the incident. To specify a reference, enter its Amazon Resource Name (ARN). You can also specify a related item associated with that resource. For example, to specify an Amazon DynamoDB (DynamoDB) table as a resource, use its ARN. You can also specify an Amazon CloudWatch metric associated with the DynamoDB table as a related item.</p> <important> <p>This update action overrides all existing references. If you want to keep existing references, you must specify them in the call. If you don't, this action removes any existing references and enters only new references.</p> </important>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventReferences")]
		[System.ComponentModel.DataAnnotations.Length(0, 10)]
		public EventReference[] EventReferences { get; set; }
		
		/// <summary>
		/// The time that the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.Nullable<System.DateTimeOffset> EventTime { get; set; }
		
		/// <summary>
		/// The type of event. You can update events of type <code>Custom Event</code>.
		/// Min length: 0
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		[System.ComponentModel.DataAnnotations.Length(0, 100)]
		public string EventType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the incident that includes the timeline event.
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// Pattern: ^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="incidentRecordArn")]
		[System.ComponentModel.DataAnnotations.Length(0, 1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$")]
		public string IncidentRecordArn { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
