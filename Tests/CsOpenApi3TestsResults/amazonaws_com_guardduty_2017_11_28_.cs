//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptAdministratorInvitationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerErrorException
	{
	}
	
	/// <summary>
	/// This output is deprecated, use AcceptAdministratorInvitationResponse instead
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptInvitationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArchiveFindingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDetectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedDataSourcesResult UnprocessedDataSources { get; set; }
	}
	
	/// <summary>
	/// Specifies the names of the data sources that couldn't be enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnprocessedDataSourcesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MalwareProtectionConfigurationResult MalwareProtection { get; set; }
	}
	
	/// <summary>
	/// An object that contains information on the status of all Malware Protection data sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MalwareProtectionConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScanEc2InstanceWithFindingsResult ScanEc2InstanceWithFindings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
	}
	
	/// <summary>
	/// An object that contains information on the status of whether Malware Protection for EC2 instances with findings will be enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanEc2InstanceWithFindingsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EbsVolumesResult EbsVolumes { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration of scanning EBS volumes as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EbsVolumesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataSourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Describes whether S3 data event logs will be enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3LogsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enable { get; set; }
	}
	
	/// <summary>
	/// Describes whether any Kubernetes data sources are enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KubernetesAuditLogsConfiguration AuditLogs { get; set; }
	}
	
	/// <summary>
	/// Describes whether Kubernetes audit logs are enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesAuditLogsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enable { get; set; }
	}
	
	/// <summary>
	/// Describes whether Malware Protection will be enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MalwareProtectionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScanEc2InstanceWithFindings ScanEc2InstanceWithFindings { get; set; }
	}
	
	/// <summary>
	/// Describes whether Malware Protection for EC2 instances with findings will be enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanEc2InstanceWithFindings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsVolumes { get; set; }
	}
	
	/// <summary>
	/// Contains information about a GuardDuty feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectorFeatureConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeature Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorAdditionalConfiguration[] AdditionalConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DetectorFeature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_DATA_EVENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_AUDIT_LOGS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS_MALWARE_PROTECTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_LOGIN_EVENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_RUNTIME_MONITORING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_NETWORK_LOGS = 5,
	}
	
	/// <summary>
	/// Information about the additional configuration for a feature in your GuardDuty account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectorAdditionalConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureAdditionalConfiguration Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FeatureAdditionalConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_ADDON_MANAGEMENT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFilterResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Criterion
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIPSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IpSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMembersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	/// <summary>
	/// Contains information about the accounts that weren't processed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnprocessedAccount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result { get; set; }
	}
	
	/// <summary>
	/// Contains information about the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePublishingDestinationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSampleFindingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateThreatIntelSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThreatIntelSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeclineInvitationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDetectorResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFilterResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIPSetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteInvitationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteMembersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePublishingDestinationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteThreatIntelSetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeMalwareScansResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scan[] Scans { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a malware scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Scan
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdminDetectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanStatus ScanStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScanStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScanEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TriggerDetails TriggerDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDetails ResourceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanResultDetails ScanResultDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FileCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeDetail[] AttachedVolumes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanType ScanType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 3,
	}
	
	/// <summary>
	/// Represents the reason the scan was triggered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GuardDutyFindingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Represents the resources that were scanned in the scan entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceArn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of the scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanResultDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScanResult ScanResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFECTED = 1,
	}
	
	/// <summary>
	/// Contains EBS volume details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUARDDUTY_INITIATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 1,
	}
	
	/// <summary>
	/// Represents a condition that when matched will be added to the response of the operation. Irrespective of using any filter criteria, an administrator account can view the scan entries for all of its member accounts. However, each member account can view the scan entries only for their own account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterCriterion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CriterionKey CriterionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCondition FilterCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CriterionKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_INSTANCE_ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCAN_ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUARDDUTY_FINDING_ID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCAN_START_TIME = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCAN_STATUS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCAN_TYPE = 6,
	}
	
	/// <summary>
	/// Contains information about the condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterCondition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EqualsValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GreaterThan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LessThan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeOrganizationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoEnable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool MemberAccountLimitReached { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationDataSourceConfigurationsResult DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationFeatureConfigurationResult[] Features { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoEnableMembers AutoEnableOrganizationMembers { get; set; }
	}
	
	/// <summary>
	/// An object that contains information on which data sources are automatically enabled for new members within the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationDataSourceConfigurationsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationS3LogsConfigurationResult S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationKubernetesConfigurationResult Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationMalwareProtectionConfigurationResult MalwareProtection { get; set; }
	}
	
	/// <summary>
	/// The current configuration of S3 data event logs as a data source for the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationS3LogsConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoEnable { get; set; }
	}
	
	/// <summary>
	/// The current configuration of all Kubernetes data sources for the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationKubernetesConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationKubernetesAuditLogsConfigurationResult AuditLogs { get; set; }
	}
	
	/// <summary>
	/// The current configuration of Kubernetes audit logs as a data source for the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationKubernetesAuditLogsConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoEnable { get; set; }
	}
	
	/// <summary>
	/// An object that contains information on the status of all Malware Protection data source for an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationMalwareProtectionConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationScanEc2InstanceWithFindingsResult ScanEc2InstanceWithFindings { get; set; }
	}
	
	/// <summary>
	/// An object that contains information on the status of scanning EC2 instances with findings for an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationScanEc2InstanceWithFindingsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationEbsVolumesResult EbsVolumes { get; set; }
	}
	
	/// <summary>
	/// An object that contains information on the status of whether EBS volumes scanning will be enabled as a data source for an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationEbsVolumesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoEnable { get; set; }
	}
	
	/// <summary>
	/// A list of features which will be configured for the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationFeatureConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeature Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrgFeatureStatus AutoEnable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationAdditionalConfigurationResult[] AdditionalConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrgFeatureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// A list of additional configuration which will be configured for the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationAdditionalConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureAdditionalConfiguration Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrgFeatureStatus AutoEnable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoEnableMembers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePublishingDestinationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PublishingStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int PublishingFailureStartTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationProperties DestinationProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PublishingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 3,
	}
	
	/// <summary>
	/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DestinationProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableOrganizationAdminAccountResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateFromAdministratorAccountResponse
	{
	}
	
	/// <summary>
	/// This output is deprecated, use DisassociateFromAdministratorAccountResponse instead
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateFromMasterAccountResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateMembersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnableOrganizationAdminAccountResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAdministratorAccountResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Administrator Administrator { get; set; }
	}
	
	/// <summary>
	/// Contains information about the administrator account and invitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Administrator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoverageStatisticsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageStatistics CoverageStatistics { get; set; }
	}
	
	/// <summary>
	/// Information about the coverage statistics for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageStatistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CountByResourceType CountByResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CountByCoverageStatus CountByCoverageStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountByResourceType
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountByCoverageStatus
	{
	}
	
	/// <summary>
	/// Represents a condition that when matched will be added to the response of the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageFilterCriterion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageFilterCriterionKey CriterionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageFilterCondition FilterCondition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageFilterCriterionKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COVERAGE_STATUS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDON_VERSION = 4,
	}
	
	/// <summary>
	/// Represents a condition that when matched will be added to the response of the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageFilterCondition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Equals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NotEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageStatisticsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT_BY_RESOURCE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT_BY_COVERAGE_STATUS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDetectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfigurationsResult DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeatureConfigurationResult[] Features { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FindingPublishingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFTEEN_MINUTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_HOURS = 2,
	}
	
	/// <summary>
	/// Contains information on the status of data sources for the detector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceConfigurationsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloudTrailConfigurationResult CloudTrail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DNSLogsConfigurationResult DNSLogs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FlowLogsConfigurationResult FlowLogs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfigurationResult S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesConfigurationResult Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MalwareProtectionConfigurationResult MalwareProtection { get; set; }
	}
	
	/// <summary>
	/// Contains information on the status of CloudTrail as a data source for the detector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudTrailConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
	}
	
	/// <summary>
	/// Contains information on the status of DNS logs as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DNSLogsConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
	}
	
	/// <summary>
	/// Contains information on the status of VPC flow logs as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlowLogsConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes whether S3 data event logs will be enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3LogsConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes whether any Kubernetes logs will be enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KubernetesAuditLogsConfigurationResult AuditLogs { get; set; }
	}
	
	/// <summary>
	/// Describes whether Kubernetes audit logs are enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesAuditLogsConfigurationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	/// <summary>
	/// Contains information about a GuardDuty feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectorFeatureConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeatureResult Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorAdditionalConfigurationResult[] AdditionalConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DetectorFeatureResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_LOGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_TRAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_LOGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_DATA_EVENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_AUDIT_LOGS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS_MALWARE_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_LOGIN_EVENTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_RUNTIME_MONITORING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_NETWORK_LOGS = 8,
	}
	
	/// <summary>
	/// Information about the additional configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectorAdditionalConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureAdditionalConfiguration Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFilterResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FilterAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FilterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 1,
	}
	
	/// <summary>
	/// Contains information about the criteria used for querying findings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindingCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Criterion Criterion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFindingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Finding[] Findings { get; set; }
	}
	
	/// <summary>
	/// Contains information about the finding, which is generated when abnormal or suspicious activity is detected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Finding
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Partition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Resource Resource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Service Service { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessKeyDetails AccessKeyDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3BucketDetail[] S3BucketDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceDetails InstanceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EksClusterDetails EksClusterDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesDetails KubernetesDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbsVolumeDetails EbsVolumeDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsClusterDetails EcsClusterDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Container ContainerDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RdsDbInstanceDetails RdsDbInstanceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RdsDbUserDetails RdsDbUserDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaDetails LambdaDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about the access keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessKeyDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserType { get; set; }
	}
	
	/// <summary>
	/// Contains information on the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3BucketDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DefaultServerSideEncryption DefaultServerSideEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublicAccess PublicAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information on the owner of the bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Owner
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Contains information about a tag associated with the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Contains information on the server side encryption method used in the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">S3 Server-Side Encryption</a> for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefaultServerSideEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsMasterKeyArn { get; set; }
	}
	
	/// <summary>
	/// Describes the public access policies that apply to the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicAccess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionConfiguration PermissionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EffectivePermission { get; set; }
	}
	
	/// <summary>
	/// Contains information about how permissions are configured for the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PermissionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BucketLevelPermissions BucketLevelPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountLevelPermissions AccountLevelPermissions { get; set; }
	}
	
	/// <summary>
	/// Contains information about the bucket level permissions for the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketLevelPermissions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessControlList AccessControlList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BucketPolicy BucketPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockPublicAccess BlockPublicAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information on the current access control policies for the bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessControlList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicReadAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicWriteAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information on the current bucket policies for the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicReadAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicWriteAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information on how the bucker owner's S3 Block Public Access settings are being applied to the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">S3 Block Public Access</a> for more information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlockPublicAccess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnorePublicAcls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RestrictPublicBuckets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BlockPublicAcls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BlockPublicPolicy { get; set; }
	}
	
	/// <summary>
	/// Contains information about the account level permissions on the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountLevelPermissions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlockPublicAccess BlockPublicAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information about the details of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfile IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterface[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about the EC2 instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IamInstanceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Contains information about the elastic network interface of the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrivateIpAddressDetails[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroup[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Contains other private IP address information of the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateIpAddressDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	/// <summary>
	/// Contains information about the security groups associated with the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the product code for the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductCode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductType { get; set; }
	}
	
	/// <summary>
	/// Details about the EKS cluster involved in a Kubernetes finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EksClusterDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	/// <summary>
	/// Details about Kubernetes resources such as a Kubernetes user or workload resource involved in a Kubernetes finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesUserDetails KubernetesUserDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesWorkloadDetails KubernetesWorkloadDetails { get; set; }
	}
	
	/// <summary>
	/// Details about the Kubernetes user involved in a Kubernetes finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesUserDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SessionName { get; set; }
	}
	
	/// <summary>
	/// Details about the Kubernetes workload involved in a Kubernetes finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesWorkloadDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HostNetwork { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Container[] Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Details of a container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Container
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContainerRuntime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImagePrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeMount[] VolumeMounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityContext SecurityContext { get; set; }
	}
	
	/// <summary>
	/// Container volume mount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeMount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MountPath { get; set; }
	}
	
	/// <summary>
	/// Container security context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityContext
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Privileged { get; set; }
	}
	
	/// <summary>
	/// Volume used by the Kubernetes workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostPath HostPath { get; set; }
	}
	
	/// <summary>
	/// Represents a pre-existing file or directory on the host machine that the volume maps to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HostPath
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Contains list of scanned and skipped EBS volumes with details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EbsVolumeDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeDetail[] ScannedVolumeDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeDetail[] SkippedVolumeDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about the details of the ECS Cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsClusterDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveServicesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RegisteredContainerInstancesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunningTasksCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EcsTaskDetails TaskDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about the task in an ECS cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcsTaskDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefinitionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TaskCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Volume[] Volumes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Container[] Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
	}
	
	/// <summary>
	/// Contains information about the resource type <code>RDSDBInstance</code> involved in a GuardDuty finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RdsDbInstanceDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DbInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about the user and authentication details for a database instance involved in the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RdsDbUserDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Application { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Database { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ssl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthMethod { get; set; }
	}
	
	/// <summary>
	/// Information about the Lambda function involved in the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Amazon Virtual Private Cloud configuration details associated with your Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VpcConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroup[] SecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Contains additional information about the generated finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Service
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Action Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Evidence Evidence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventFirstSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventLastSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserFeedback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceAdditionalInfo AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeatureName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbsVolumeScanDetails EbsVolumeScanDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuntimeDetails RuntimeDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Action
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AwsApiCallAction AwsApiCallAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsRequestAction DnsRequestAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkConnectionAction NetworkConnectionAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortProbeAction PortProbeAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesApiCallAction KubernetesApiCallAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RdsLoginAttemptAction RdsLoginAttemptAction { get; set; }
	}
	
	/// <summary>
	/// Contains information about the API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsApiCallAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Api { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CallerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainDetails DomainDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserAgent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccountDetails RemoteAccountDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AffectedResources AffectedResources { get; set; }
	}
	
	/// <summary>
	/// Contains information about the domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
	}
	
	/// <summary>
	/// Contains information about the remote IP address of the connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoteIpDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public City City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Country Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GeoLocation GeoLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddressV4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Organization Organization { get; set; }
	}
	
	/// <summary>
	/// Contains information about the city associated with the IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class City
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CityName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the country where the remote IP address is located.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the location of the remote IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Lon { get; set; }
	}
	
	/// <summary>
	/// Contains information about the ISP organization of the remote IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Organization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AsnOrg { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Isp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Org { get; set; }
	}
	
	/// <summary>
	/// Contains details about the remote Amazon Web Services account that made the API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoteAccountDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Affiliated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AffectedResources
	{
	}
	
	/// <summary>
	/// Contains information about the DNS_REQUEST action described in this finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRequestAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Blocked { get; set; }
	}
	
	/// <summary>
	/// Contains information about the NETWORK_CONNECTION action described in the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConnectionAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LocalPortDetails LocalPortDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LocalIpDetails LocalIpDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemotePortDetails RemotePortDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about the port for the local connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalPortDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PortName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the local IP address of the connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalIpDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddressV4 { get; set; }
	}
	
	/// <summary>
	/// Contains information about the remote port.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemotePortDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PortName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the PORT_PROBE action described in the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PortProbeAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortProbeDetail[] PortProbeDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about the port probe details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PortProbeDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalPortDetails LocalPortDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LocalIpDetails LocalIpDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
	}
	
	/// <summary>
	/// Information about the Kubernetes API call action described in this finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesApiCallAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Verb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceIps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserAgent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
	}
	
	/// <summary>
	/// Indicates that a login attempt was made to the potentially compromised database from a remote IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RdsLoginAttemptAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoginAttribute[] LoginAttributes { get; set; }
	}
	
	/// <summary>
	/// Information about the login attempts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoginAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Application { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedLoginAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SuccessfulLoginAttempts { get; set; }
	}
	
	/// <summary>
	/// Contains information about the reason that the finding was generated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Evidence
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThreatIntelligenceDetail[] ThreatIntelligenceDetails { get; set; }
	}
	
	/// <summary>
	/// An instance of a threat intelligence detail that constitutes evidence for the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThreatIntelligenceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ThreatListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ThreatNames { get; set; }
	}
	
	/// <summary>
	/// Additional information about the generated finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAdditionalInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Contains details from the malware scan that created a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EbsVolumeScanDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScanStartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScanCompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TriggerFindingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanDetections ScanDetections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanType ScanType { get; set; }
	}
	
	/// <summary>
	/// Contains a complete view providing malware scan result details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanDetections
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScannedItemCount ScannedItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreatsDetectedItemCount ThreatsDetectedItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HighestSeverityThreatDetails HighestSeverityThreatDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreatDetectedByName ThreatDetectedByName { get; set; }
	}
	
	/// <summary>
	/// Total number of scanned files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScannedItemCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Files { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Volumes { get; set; }
	}
	
	/// <summary>
	/// Contains total number of infected files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThreatsDetectedItemCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Files { get; set; }
	}
	
	/// <summary>
	/// Contains details of the highest severity threat detected during scan and number of infected files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HighestSeverityThreatDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThreatName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// Contains details about identified threats organized by threat name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThreatDetectedByName
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UniqueThreatNameCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Shortened { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanThreatName[] ThreatNames { get; set; }
	}
	
	/// <summary>
	/// Contains files infected with the given threat providing details of malware name and severity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanThreatName
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanFilePath[] FilePaths { get; set; }
	}
	
	/// <summary>
	/// Contains details of infected file including name, file path and hash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanFilePath
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; }
	}
	
	/// <summary>
	/// Information about the process and any required context values for a specific finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessDetails Process { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuntimeContext Context { get; set; }
	}
	
	/// <summary>
	/// Information about the observed process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcessDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutablePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutableSha256 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NamespacePid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Pwd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentUuid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Euid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineageObject[] Lineage { get; set; }
	}
	
	/// <summary>
	/// Information about the runtime process details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineageObject
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NamespacePid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutablePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Euid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentUuid { get; set; }
	}
	
	/// <summary>
	/// Additional information about the suspicious activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeContext
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessDetails ModifyingProcess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ModifiedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScriptPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LibraryPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LdPreloadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SocketPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RuncBinaryPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseAgentPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MountSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MountTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileSystemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModuleFilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModuleSha256 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShellHistoryFilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessDetails TargetProcess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IanaProtocolNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MemoryRegions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFindingsStatisticsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FindingStatistics FindingStatistics { get; set; }
	}
	
	/// <summary>
	/// Contains information about finding statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindingStatistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CountBySeverity CountBySeverity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountBySeverity
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FindingStatisticType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT_BY_SEVERITY = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIPSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpSetFormat Format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IpSetFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IpSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetInvitationsCountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvitationsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMalwareScanSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScanResourceCriteria ScanResourceCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbsSnapshotPreservation EbsSnapshotPreservation { get; set; }
	}
	
	/// <summary>
	/// Contains information about criteria used to filter resources before triggering malware scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanResourceCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScanCriterion Include { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanCriterion Exclude { get; set; }
	}
	
	/// <summary>
	/// Represents a map of resource properties that match specified conditions and values when triggering malware scans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanCriterion
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EbsSnapshotPreservation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_RETENTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETENTION_WITH_FINDING = 1,
	}
	
	/// <summary>
	/// This output is deprecated, use GetAdministratorAccountResponse instead
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMasterAccountResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Master Master { get; set; }
	}
	
	/// <summary>
	/// Contains information about the administrator account and invitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Master
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMemberDetectorsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemberDataSourceConfiguration[] MemberDataSourceConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	/// <summary>
	/// Contains information on which data sources are enabled for a member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MemberDataSourceConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfigurationsResult DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberFeaturesConfigurationResult[] Features { get; set; }
	}
	
	/// <summary>
	/// Contains information about the features for the member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MemberFeaturesConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeature Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberAdditionalConfigurationResult[] AdditionalConfiguration { get; set; }
	}
	
	/// <summary>
	/// Information about the additional configuration for the member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MemberAdditionalConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureAdditionalConfiguration Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMembersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Member[] Members { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	/// <summary>
	/// Contains information about the member account. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Member
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdministratorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRemainingFreeTrialDaysResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountFreeTrialInfo[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	/// <summary>
	/// Provides details of the GuardDuty member account that uses a free trial service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountFreeTrialInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourcesFreeTrial DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FreeTrialFeatureConfigurationResult[] Features { get; set; }
	}
	
	/// <summary>
	/// Contains information about which data sources are enabled for the GuardDuty member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourcesFreeTrial
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceFreeTrial CloudTrail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceFreeTrial DnsLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceFreeTrial FlowLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceFreeTrial S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesDataSourceFreeTrial Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MalwareProtectionDataSourceFreeTrial MalwareProtection { get; set; }
	}
	
	/// <summary>
	/// Contains information about which data sources are enabled for the GuardDuty member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceFreeTrial
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FreeTrialDaysRemaining { get; set; }
	}
	
	/// <summary>
	/// Provides details about the Kubernetes resources when it is enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KubernetesDataSourceFreeTrial
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceFreeTrial AuditLogs { get; set; }
	}
	
	/// <summary>
	/// Provides details about Malware Protection when it is enabled as a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MalwareProtectionDataSourceFreeTrial
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceFreeTrial ScanEc2InstanceWithFindings { get; set; }
	}
	
	/// <summary>
	/// Contains information about the free trial period for a feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FreeTrialFeatureConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeatureResult Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FreeTrialDaysRemaining { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetThreatIntelSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpSetFormat Format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUsageStatisticsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UsageStatistics UsageStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the result of GuardDuty usage. If a UsageStatisticType is provided the result for other types will be null. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageStatistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UsageAccountResult[] SumByAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageDataSourceResult[] SumByDataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageResourceResult[] SumByResource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageResourceResult[] TopResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageFeatureResult[] SumByFeature { get; set; }
	}
	
	/// <summary>
	/// Contains information on the total of usage based on account IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageAccountResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Total Total { get; set; }
	}
	
	/// <summary>
	/// Contains the total usage with the corresponding currency unit for that value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Total
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Contains information on the result of usage based on data source type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageDataSourceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSource DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Total Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_LOGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_TRAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_LOGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_LOGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUBERNETES_AUDIT_LOGS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_MALWARE_SCAN = 5,
	}
	
	/// <summary>
	/// Contains information on the sum of usage based on an Amazon Web Services resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageResourceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Total Total { get; set; }
	}
	
	/// <summary>
	/// Contains information about the result of the total usage based on the feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageFeatureResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UsageFeature Feature { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Total Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UsageFeature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_LOGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_TRAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_LOGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_DATA_EVENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_AUDIT_LOGS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS_MALWARE_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_LOGIN_EVENTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_NETWORK_LOGS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_RUNTIME_MONITORING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InviteMembersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoverageResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CoverageResource[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the resource of the GuardDuty account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageResourceDetails ResourceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageStatus CoverageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Issue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Information about the resource for each individual EKS cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageResourceDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageEksClusterDetails EksClusterDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceType ResourceType { get; set; }
	}
	
	/// <summary>
	/// Information about the EKS cluster that has a coverage status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageEksClusterDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CoveredNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompatibleNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddonDetails AddonDetails { get; set; }
	}
	
	/// <summary>
	/// Information about the installed EKS add-on (GuardDuty security agent).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddonDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AddonVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddonStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageSortKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COVERAGE_STATUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDON_VERSION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATED_AT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDetectorsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] DetectorIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFiltersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FilterNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFindingsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FindingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIPSetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] IpSetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInvitationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Invitation[] Invitations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about the invitation to become a member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Invitation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMembersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Member[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOrganizationAdminAccountsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdminAccount[] AdminAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The account within the organization specified as the GuardDuty delegated administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdminAccount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdminStatus AdminStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdminStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE_IN_PROGRESS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPublishingDestinationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Destination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about the publishing destination, including the ID, type, and status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Destination
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PublishingStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListThreatIntelSetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ThreatIntelSetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMalwareScanResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScanId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMonitoringMembersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopMonitoringMembersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnarchiveFindingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDetectorResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFilterResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFindingsFeedbackResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIPSetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMalwareScanSettingsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMemberDetectorsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	/// <summary>
	/// Contains information about the features for the member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MemberFeaturesConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeature Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberAdditionalConfiguration[] AdditionalConfiguration { get; set; }
	}
	
	/// <summary>
	/// Information about the additional configuration for the member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MemberAdditionalConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureAdditionalConfiguration Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateOrganizationConfigurationResponse
	{
	}
	
	/// <summary>
	/// Describes whether S3 data event logs will be automatically enabled for new members of the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationS3LogsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoEnable { get; set; }
	}
	
	/// <summary>
	/// Organization-wide Kubernetes data sources configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationKubernetesConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationKubernetesAuditLogsConfiguration AuditLogs { get; set; }
	}
	
	/// <summary>
	/// Organization-wide Kubernetes audit logs configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationKubernetesAuditLogsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoEnable { get; set; }
	}
	
	/// <summary>
	/// Organization-wide Malware Protection configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationMalwareProtectionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationScanEc2InstanceWithFindings ScanEc2InstanceWithFindings { get; set; }
	}
	
	/// <summary>
	/// Organization-wide EC2 instances with findings scan configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationScanEc2InstanceWithFindings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationEbsVolumes EbsVolumes { get; set; }
	}
	
	/// <summary>
	/// Organization-wide EBS volumes scan configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationEbsVolumes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoEnable { get; set; }
	}
	
	/// <summary>
	/// A list of features which will be configured for the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationFeatureConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeature Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrgFeatureStatus AutoEnable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationAdditionalConfiguration[] AdditionalConfiguration { get; set; }
	}
	
	/// <summary>
	/// A list of additional configurations which will be configured for the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationAdditionalConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FeatureAdditionalConfiguration Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrgFeatureStatus AutoEnable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePublishingDestinationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateThreatIntelSetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptAdministratorInvitationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdministratorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
	}
	
	/// <summary>
	/// This input is deprecated, use AcceptAdministratorInvitationRequest instead
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptInvitationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArchiveFindingsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FindingIds { get; set; }
	}
	
	/// <summary>
	/// Contains information about the condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Condition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Eq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Neq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Gt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Gte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Lt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Lte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Equals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NotEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GreaterThan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GreaterThanOrEqual { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LessThan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LessThanOrEqual { get; set; }
	}
	
	/// <summary>
	/// Represents the criteria used in the filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageFilterCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageFilterCriterion[] FilterCriterion { get; set; }
	}
	
	/// <summary>
	/// Information about the sorting criteria used in the coverage statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageSortCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageSortKey AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderBy OrderBy { get; set; }
	}
	
	/// <summary>
	/// Contains information about which data sources are enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfiguration S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesConfiguration Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MalwareProtectionConfiguration MalwareProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDetectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfigurations DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeatureConfiguration[] Features { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFilterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIPSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpSetFormat Format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Activate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountDetail[] AccountDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePublishingDestinationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationProperties DestinationProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSampleFindingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FindingTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThreatIntelSetFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateThreatIntelSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpSetFormat Format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Activate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeclineInvitationsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDetectorRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFilterRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIPSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteInvitationsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePublishingDestinationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteThreatIntelSetRequest
	{
	}
	
	/// <summary>
	/// Represents the criteria to be used in the filter for describing scan entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCriterion[] FilterCriterion { get; set; }
	}
	
	/// <summary>
	/// Contains information about the criteria used for sorting findings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SortCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderBy OrderBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeMalwareScansRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCriteria FilterCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortCriteria SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeOrganizationConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePublishingDestinationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FeatureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DetectorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisableOrganizationAdminAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateFromAdministratorAccountRequest
	{
	}
	
	/// <summary>
	/// This input is deprecated, use DisassociateFromAdministratorAccountRequest instead
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateFromMasterAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnableOrganizationAdminAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Feedback
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USEFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_USEFUL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FreeTrialFeatureResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOW_LOGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_TRAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_LOGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_DATA_EVENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_AUDIT_LOGS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS_MALWARE_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_LOGIN_EVENTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_RUNTIME_MONITORING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_NETWORK_LOGS = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAdministratorAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoverageStatisticsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageFilterCriteria FilterCriteria { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CoverageStatisticsType[] StatisticsType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDetectorRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFilterRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFindingsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FindingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortCriteria SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFindingsStatisticsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FindingStatisticType[] FindingStatisticTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIPSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetInvitationsCountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMalwareScanSettingsRequest
	{
	}
	
	/// <summary>
	/// This input is deprecated, use GetAdministratorAccountRequest instead
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMasterAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMemberDetectorsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRemainingFreeTrialDaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetThreatIntelSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThreatIntelSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UsageStatisticType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM_BY_ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM_BY_DATA_SOURCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM_BY_RESOURCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_RESOURCES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM_BY_FEATURES = 4,
	}
	
	/// <summary>
	/// Contains information about the criteria used to query usage statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsageCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSource[] DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageFeature[] Features { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUsageStatisticsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UsageStatisticType UsageStatisticType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UsageCriteria UsageCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InviteMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableEmailNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoverageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageFilterCriteria FilterCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageSortCriteria SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDetectorsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFiltersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFindingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortCriteria SortCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIPSetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInvitationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMembersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOrganizationAdminAccountsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPublishingDestinationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListThreatIntelSetsRequest
	{
	}
	
	/// <summary>
	/// Represents key, value pair to be matched against given resource property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanConditionPair
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrgFeatureAdditionalConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_ADDON_MANAGEMENT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrgFeature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_DATA_EVENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_AUDIT_LOGS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS_MALWARE_PROTECTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_LOGIN_EVENTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EKS_RUNTIME_MONITORING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_NETWORK_LOGS = 5,
	}
	
	/// <summary>
	/// An object that contains information on which data sources will be configured to be automatically enabled for new members within the organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationDataSourceConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationS3LogsConfiguration S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationKubernetesConfiguration Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationMalwareProtectionConfiguration MalwareProtection { get; set; }
	}
	
	/// <summary>
	/// Contains information about the condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScanCondition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScanConditionPair[] MapEquals { get; set; }
	}
	
	/// <summary>
	/// An enum value representing possible resource properties to match with given scan condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScanCriterionKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_INSTANCE_TAG = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMalwareScanRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMonitoringMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopMonitoringMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnarchiveFindingsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FindingIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDetectorRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfigurations DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetectorFeatureConfiguration[] Features { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFilterRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFindingsFeedbackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FindingIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Feedback Feedback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateIPSetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMalwareScanSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScanResourceCriteria ScanResourceCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbsSnapshotPreservation EbsSnapshotPreservation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMemberDetectorsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfigurations DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberFeaturesConfiguration[] Features { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateOrganizationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoEnable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationDataSourceConfigurations DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationFeatureConfiguration[] Features { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoEnableMembers AutoEnableOrganizationMembers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePublishingDestinationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationProperties DestinationProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateThreatIntelSetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts the invitation to be a member account and get monitored by a GuardDuty administrator account that sent the invitation.
		/// AcceptAdministratorInvitation detector/{detectorId}/administrator
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<AcceptAdministratorInvitationResponse> AcceptAdministratorInvitationAsync(string detectorId, AcceptAdministratorInvitationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/administrator";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AcceptAdministratorInvitationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.
		/// GetAdministratorAccount detector/{detectorId}/administrator
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAdministratorAccountResponse> GetAdministratorAccountAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/administrator";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAdministratorAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Accepts the invitation to be monitored by a GuardDuty administrator account.
		/// AcceptInvitation detector/{detectorId}/master
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<AcceptInvitationResponse> AcceptInvitationAsync(string detectorId, AcceptInvitationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/master";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AcceptInvitationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.
		/// GetMasterAccount detector/{detectorId}/master
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMasterAccountResponse> GetMasterAccountAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/master";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMasterAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Archives GuardDuty findings that are specified by the list of finding IDs.</p> <note> <p>Only the administrator account can archive findings. Member accounts don't have permission to archive findings from their accounts.</p> </note>
		/// ArchiveFindings detector/{detectorId}/findings/archive
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings you want to archive.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<ArchiveFindingsResponse> ArchiveFindingsAsync(string detectorId, ArchiveFindingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/findings/archive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ArchiveFindingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region. All data sources are enabled in a new detector by default.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// CreateDetector detector
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDetectorResponse> CreateDetectorAsync(CreateDetectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateDetectorResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists detectorIds of all the existing Amazon GuardDuty detector resources.
		/// ListDetectors detector
		/// </summary>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDetectorsResponse> ListDetectorsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDetectorsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a filter using the specified finding criteria. The maximum number of saved filters per Amazon Web Services account per Region is 100. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_limits.html">Quotas for GuardDuty</a>.
		/// CreateFilter detector/{detectorId}/filter
		/// </summary>
		/// <param name="detectorId">The ID of the detector belonging to the GuardDuty account that you want to create a filter for.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateFilterResponse> CreateFilterAsync(string detectorId, CreateFilterPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/filter";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateFilterResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a paginated list of the current filters.
		/// ListFilters detector/{detectorId}/filter
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the filter is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFiltersResponse> ListFiltersAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/filter&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFiltersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with Amazon Web Services infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are included in IPSets. Only users from the administrator account can use this operation.
		/// CreateIPSet detector/{detectorId}/ipset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateIPSetResponse> CreateIPSetAsync(string detectorId, CreateIPSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/ipset";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateIPSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated administrator account.
		/// ListIPSets detector/{detectorId}/ipset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the IPSet is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIPSetsResponse> ListIPSetsAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/ipset&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListIPSetsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates member accounts of the current Amazon Web Services account by specifying a list of Amazon Web Services account IDs. This step is a prerequisite for managing the associated member accounts either by invitation or through an organization.</p> <p>As a delegated administrator, using <code>CreateMembers</code> will enable GuardDuty in the added member accounts, with the exception of the organization delegated administrator account. A delegated administrator must enable GuardDuty prior to being added as a member.</p> <p>If you are adding accounts by invitation, before using <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html">InviteMembers</a>, use <code>CreateMembers</code> after GuardDuty has been enabled in potential member accounts.</p> <p>If you disassociate a member from a GuardDuty delegated administrator, the member account details obtained from this API, including the associated email addresses, will be retained. This is done so that the delegated administrator can invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html">InviteMembers</a> API without the need to invoke the CreateMembers API again. To remove the details associated with a member account, the delegated administrator must invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_DeleteMembers.html">DeleteMembers</a> API. </p>
		/// CreateMembers detector/{detectorId}/member
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to associate member accounts with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateMembersResponse> CreateMembersAsync(string detectorId, CreateMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists details about all member accounts for the current GuardDuty administrator account.
		/// ListMembers detector/{detectorId}/member
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector the member is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="onlyAssociated">Specifies whether to only return associated members or to return all members (including members who haven't been invited yet or have been disassociated). Member accounts must have been previously associated with the GuardDuty administrator account using <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html"> <code>Create Members</code> </a>. </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMembersResponse> ListMembersAsync(string detectorId, int maxResults, string nextToken, string onlyAssociated, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&onlyAssociated=" + (onlyAssociated==null? "" : System.Uri.EscapeDataString(onlyAssociated))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.
		/// CreatePublishingDestination detector/{detectorId}/publishingDestination
		/// </summary>
		/// <param name="detectorId">The ID of the GuardDuty detector associated with the publishing destination.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<CreatePublishingDestinationResponse> CreatePublishingDestinationAsync(string detectorId, CreatePublishingDestinationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/publishingDestination";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreatePublishingDestinationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of publishing destinations associated with the specified <code>detectorId</code>.
		/// ListPublishingDestinations detector/{detectorId}/publishingDestination
		/// </summary>
		/// <param name="detectorId">The ID of the detector to retrieve publishing destinations for.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="maxResults">The maximum number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPublishingDestinationsResponse> ListPublishingDestinationsAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/publishingDestination&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPublishingDestinationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates sample findings of types specified by the list of finding types. If 'NULL' is specified for <code>findingTypes</code>, the API generates sample findings of all supported finding types.
		/// CreateSampleFindings detector/{detectorId}/findings/create
		/// </summary>
		/// <param name="detectorId">The ID of the detector to create sample findings for.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateSampleFindingsResponse> CreateSampleFindingsAsync(string detectorId, CreateSampleFindingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/findings/create";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSampleFindingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can use this operation.
		/// CreateThreatIntelSet detector/{detectorId}/threatintelset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateThreatIntelSetResponse> CreateThreatIntelSetAsync(string detectorId, CreateThreatIntelSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/threatintelset";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateThreatIntelSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the administrator account are returned.
		/// ListThreatIntelSets detector/{detectorId}/threatintelset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the threatIntelSet is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListThreatIntelSetsResponse> ListThreatIntelSetsAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/threatintelset&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListThreatIntelSetsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Declines invitations sent to the current member account by Amazon Web Services accounts specified by their account IDs.
		/// DeclineInvitations invitation/decline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeclineInvitationsResponse> DeclineInvitationsAsync(DeclineInvitationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invitation/decline";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeclineInvitationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an Amazon GuardDuty detector that is specified by the detector ID.
		/// DeleteDetector detector/{detectorId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that you want to delete.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDetectorResponse> DeleteDetectorAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteDetectorResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Retrieves an Amazon GuardDuty detector specified by the detectorId.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// GetDetector detector/{detectorId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that you want to get.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDetectorResponse> GetDetectorAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDetectorResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the Amazon GuardDuty detector specified by the detectorId.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// UpdateDetector detector/{detectorId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector to update.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDetectorResponse> UpdateDetectorAsync(string detectorId, UpdateDetectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateDetectorResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the filter specified by the filter name.
		/// DeleteFilter detector/{detectorId}/filter/{filterName}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the filter is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="filterName">The name of the filter that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteFilterResponse> DeleteFilterAsync(string detectorId, string filterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/filter/"+ (filterName==null? "" : System.Uri.EscapeDataString(filterName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteFilterResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the details of the filter specified by the filter name.
		/// GetFilter detector/{detectorId}/filter/{filterName}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the filter is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="filterName">The name of the filter you want to get.</param>
		/// <returns>Success</returns>
		public async Task<GetFilterResponse> GetFilterAsync(string detectorId, string filterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/filter/"+ (filterName==null? "" : System.Uri.EscapeDataString(filterName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetFilterResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the filter specified by the filter name.
		/// UpdateFilter detector/{detectorId}/filter/{filterName}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="filterName">The name of the filter.</param>
		/// <returns>Success</returns>
		public async Task<UpdateFilterResponse> UpdateFilterAsync(string detectorId, string filterName, UpdateFilterPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/filter/"+ (filterName==null? "" : System.Uri.EscapeDataString(filterName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateFilterResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the IPSet specified by the <code>ipSetId</code>. IPSets are called trusted IP lists in the console user interface.
		/// DeleteIPSet detector/{detectorId}/ipset/{ipSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the IPSet.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="ipSetId">The unique ID of the IPSet to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteIPSetResponse> DeleteIPSetAsync(string detectorId, string ipSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/ipset/"+ (ipSetId==null? "" : System.Uri.EscapeDataString(ipSetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteIPSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the IPSet specified by the <code>ipSetId</code>.
		/// GetIPSet detector/{detectorId}/ipset/{ipSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the IPSet is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="ipSetId">The unique ID of the IPSet to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetIPSetResponse> GetIPSetAsync(string detectorId, string ipSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/ipset/"+ (ipSetId==null? "" : System.Uri.EscapeDataString(ipSetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetIPSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the IPSet specified by the IPSet ID.
		/// UpdateIPSet detector/{detectorId}/ipset/{ipSetId}
		/// </summary>
		/// <param name="detectorId">The detectorID that specifies the GuardDuty service whose IPSet you want to update.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="ipSetId">The unique ID that specifies the IPSet that you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateIPSetResponse> UpdateIPSetAsync(string detectorId, string ipSetId, UpdateIPSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/ipset/"+ (ipSetId==null? "" : System.Uri.EscapeDataString(ipSetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateIPSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes invitations sent to the current member account by Amazon Web Services accounts specified by their account IDs.
		/// DeleteInvitations invitation/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInvitationsResponse> DeleteInvitationsAsync(DeleteInvitationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invitation/delete";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteInvitationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs.</p> <p>With <code>autoEnableOrganizationMembers</code> configuration for your organization set to <code>ALL</code>, you'll receive an error if you attempt to disable GuardDuty for a member account in your organization.</p>
		/// DeleteMembers detector/{detectorId}/member/delete
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account whose members you want to delete.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteMembersResponse> DeleteMembersAsync(string detectorId, DeleteMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/delete";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the publishing definition with the specified <code>destinationId</code>.
		/// DeletePublishingDestination detector/{detectorId}/publishingDestination/{destinationId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the publishing destination to delete.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="destinationId">The ID of the publishing destination to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeletePublishingDestinationResponse> DeletePublishingDestinationAsync(string detectorId, string destinationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/publishingDestination/"+ (destinationId==null? "" : System.Uri.EscapeDataString(destinationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeletePublishingDestinationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the publishing destination specified by the provided <code>destinationId</code>.
		/// DescribePublishingDestination detector/{detectorId}/publishingDestination/{destinationId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the publishing destination to retrieve.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="destinationId">The ID of the publishing destination to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<DescribePublishingDestinationResponse> DescribePublishingDestinationAsync(string detectorId, string destinationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/publishingDestination/"+ (destinationId==null? "" : System.Uri.EscapeDataString(destinationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribePublishingDestinationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates information about the publishing destination specified by the <code>destinationId</code>.
		/// UpdatePublishingDestination detector/{detectorId}/publishingDestination/{destinationId}
		/// </summary>
		/// <param name="detectorId">The ID of the detector associated with the publishing destinations to update.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="destinationId">The ID of the publishing destination to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePublishingDestinationResponse> UpdatePublishingDestinationAsync(string detectorId, string destinationId, UpdatePublishingDestinationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/publishingDestination/"+ (destinationId==null? "" : System.Uri.EscapeDataString(destinationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdatePublishingDestinationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.
		/// DeleteThreatIntelSet detector/{detectorId}/threatintelset/{threatIntelSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the threatIntelSet is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="threatIntelSetId">The unique ID of the threatIntelSet that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteThreatIntelSetResponse> DeleteThreatIntelSetAsync(string detectorId, string threatIntelSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/threatintelset/"+ (threatIntelSetId==null? "" : System.Uri.EscapeDataString(threatIntelSetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteThreatIntelSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
		/// GetThreatIntelSet detector/{detectorId}/threatintelset/{threatIntelSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the threatIntelSet is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="threatIntelSetId">The unique ID of the threatIntelSet that you want to get.</param>
		/// <returns>Success</returns>
		public async Task<GetThreatIntelSetResponse> GetThreatIntelSetAsync(string detectorId, string threatIntelSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/threatintelset/"+ (threatIntelSetId==null? "" : System.Uri.EscapeDataString(threatIntelSetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetThreatIntelSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the ThreatIntelSet specified by the ThreatIntelSet ID.
		/// UpdateThreatIntelSet detector/{detectorId}/threatintelset/{threatIntelSetId}
		/// </summary>
		/// <param name="detectorId">The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="threatIntelSetId">The unique ID that specifies the ThreatIntelSet that you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateThreatIntelSetResponse> UpdateThreatIntelSetAsync(string detectorId, string threatIntelSetId, UpdateThreatIntelSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/threatintelset/"+ (threatIntelSetId==null? "" : System.Uri.EscapeDataString(threatIntelSetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateThreatIntelSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a list of malware scans. Each member account can view the malware scans for their own accounts. An administrator can view the malware scans for all the member accounts.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// DescribeMalwareScans detector/{detectorId}/malware-scans
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the request is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeMalwareScansResponse> DescribeMalwareScansAsync(string detectorId, string MaxResults, string NextToken, DescribeMalwareScansPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/malware-scans&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeMalwareScansResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns information about the account selected as the delegated administrator for GuardDuty.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// DescribeOrganizationConfiguration detector/{detectorId}/admin
		/// </summary>
		/// <param name="detectorId">The ID of the detector to retrieve information about the delegated administrator from.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill <code>nextToken</code> in the request with the value of <code>NextToken</code> from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConfigurationResponse> DescribeOrganizationConfigurationAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/admin&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeOrganizationConfigurationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Configures the delegated administrator account with the provided values. You must provide the value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>. </p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// UpdateOrganizationConfiguration detector/{detectorId}/admin
		/// </summary>
		/// <param name="detectorId">The ID of the detector that configures the delegated administrator.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateOrganizationConfigurationResponse> UpdateOrganizationConfigurationAsync(string detectorId, UpdateOrganizationConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/admin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateOrganizationConfigurationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disables an Amazon Web Services account within the Organization as the GuardDuty delegated administrator.
		/// DisableOrganizationAdminAccount admin/disable
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableOrganizationAdminAccountResponse> DisableOrganizationAdminAccountAsync(DisableOrganizationAdminAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/disable";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisableOrganizationAdminAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Disassociates the current GuardDuty member account from its administrator account.</p> <p>When you disassociate an invited member from a GuardDuty delegated administrator, the member account details obtained from the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html">CreateMembers</a> API, including the associated email addresses, are retained. This is done so that the delegated administrator can invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html">InviteMembers</a> API without the need to invoke the CreateMembers API again. To remove the details associated with a member account, the delegated administrator must invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_DeleteMembers.html">DeleteMembers</a> API. </p> <p>With <code>autoEnableOrganizationMembers</code> configuration for your organization set to <code>ALL</code>, you'll receive an error if you attempt to disable GuardDuty in a member account.</p>
		/// DisassociateFromAdministratorAccount detector/{detectorId}/administrator/disassociate
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateFromAdministratorAccountResponse> DisassociateFromAdministratorAccountAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/administrator/disassociate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateFromAdministratorAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Disassociates the current GuardDuty member account from its administrator account.</p> <p>When you disassociate an invited member from a GuardDuty delegated administrator, the member account details obtained from the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html">CreateMembers</a> API, including the associated email addresses, are retained. This is done so that the delegated administrator can invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html">InviteMembers</a> API without the need to invoke the CreateMembers API again. To remove the details associated with a member account, the delegated administrator must invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_DeleteMembers.html">DeleteMembers</a> API.</p>
		/// DisassociateFromMasterAccount detector/{detectorId}/master/disassociate
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateFromMasterAccountResponse> DisassociateFromMasterAccountAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/master/disassociate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateFromMasterAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Disassociates GuardDuty member accounts (from the current administrator account) specified by the account IDs.</p> <p>When you disassociate an invited member from a GuardDuty delegated administrator, the member account details obtained from the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html">CreateMembers</a> API, including the associated email addresses, are retained. This is done so that the delegated administrator can invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_InviteMembers.html">InviteMembers</a> API without the need to invoke the CreateMembers API again. To remove the details associated with a member account, the delegated administrator must invoke the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_DeleteMembers.html">DeleteMembers</a> API. </p> <p>With <code>autoEnableOrganizationMembers</code> configuration for your organization set to <code>ALL</code>, you'll receive an error if you attempt to disassociate a member account before removing them from your Amazon Web Services organization.</p>
		/// DisassociateMembers detector/{detectorId}/member/disassociate
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account whose members you want to disassociate from the administrator account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateMembersResponse> DisassociateMembersAsync(string detectorId, DisassociateMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/disassociate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Enables an Amazon Web Services account within the organization as the GuardDuty delegated administrator.
		/// EnableOrganizationAdminAccount admin/enable
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableOrganizationAdminAccountResponse> EnableOrganizationAdminAccountAsync(EnableOrganizationAdminAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin/enable";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EnableOrganizationAdminAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves aggregated statistics for your account. If you are a GuardDuty administrator, you can retrieve the statistics for all the resources associated with the active member accounts in your organization who have enabled EKS Runtime Monitoring and have the GuardDuty agent running on their EKS nodes.
		/// GetCoverageStatistics detector/{detectorId}/coverage/statistics
		/// </summary>
		/// <param name="detectorId">The unique ID of the GuardDuty detector associated to the coverage statistics.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCoverageStatisticsResponse> GetCoverageStatisticsAsync(string detectorId, GetCoverageStatisticsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/coverage/statistics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetCoverageStatisticsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describes Amazon GuardDuty findings specified by finding IDs.
		/// GetFindings detector/{detectorId}/findings/get
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetFindingsResponse> GetFindingsAsync(string detectorId, GetFindingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/findings/get";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetFindingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists Amazon GuardDuty findings statistics for the specified detector ID.
		/// GetFindingsStatistics detector/{detectorId}/findings/statistics
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetFindingsStatisticsResponse> GetFindingsStatisticsAsync(string detectorId, GetFindingsStatisticsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/findings/statistics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetFindingsStatisticsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
		/// GetInvitationsCount invitation/count
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInvitationsCountResponse> GetInvitationsCountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invitation/count";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetInvitationsCountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns the details of the malware scan settings.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// GetMalwareScanSettings detector/{detectorId}/malware-scan-settings
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the scan setting is associated with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMalwareScanSettingsResponse> GetMalwareScanSettingsAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/malware-scan-settings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMalwareScanSettingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Updates the malware scan settings.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// UpdateMalwareScanSettings detector/{detectorId}/malware-scan-settings
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateMalwareScanSettingsResponse> UpdateMalwareScanSettingsAsync(string detectorId, UpdateMalwareScanSettingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/malware-scan-settings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateMalwareScanSettingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Describes which data sources are enabled for the member account's detector.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// GetMemberDetectors detector/{detectorId}/member/detector/get
		/// </summary>
		/// <param name="detectorId">The detector ID for the administrator account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMemberDetectorsResponse> GetMemberDetectorsAsync(string detectorId, GetMemberDetectorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/detector/get";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMemberDetectorsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves GuardDuty member accounts (of the current GuardDuty administrator account) specified by the account IDs.
		/// GetMembers detector/{detectorId}/member/get
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account whose members you want to retrieve.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMembersResponse> GetMembersAsync(string detectorId, GetMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/get";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Provides the number of days left for each data source used in the free trial period.
		/// GetRemainingFreeTrialDays detector/{detectorId}/freeTrial/daysRemaining
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<GetRemainingFreeTrialDaysResponse> GetRemainingFreeTrialDaysAsync(string detectorId, GetRemainingFreeTrialDaysPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/freeTrial/daysRemaining";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetRemainingFreeTrialDaysResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources, the cost returned will include only the usage so far under 30 days. This may differ from the cost metrics in the console, which project usage over 30 days to provide a monthly cost estimate. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html#usage-calculations">Understanding How Usage Costs are Calculated</a>.
		/// GetUsageStatistics detector/{detectorId}/usage/statistics
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetUsageStatisticsResponse> GetUsageStatisticsAsync(string detectorId, string MaxResults, string NextToken, GetUsageStatisticsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/usage/statistics&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetUsageStatisticsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Invites Amazon Web Services accounts to become members of an organization administered by the Amazon Web Services account that invokes this API. If you are using Amazon Web Services Organizations to manager your GuardDuty environment, this step is not needed. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_organizations.html">Managing accounts with Amazon Web Services Organizations</a>.</p> <p>To invite Amazon Web Services accounts, the first step is to ensure that GuardDuty has been enabled in the potential member accounts. You can now invoke this API to add accounts by invitation. The invited accounts can either accept or decline the invitation from their GuardDuty accounts. Each invited Amazon Web Services account can choose to accept the invitation from only one Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_invitations.html">Managing GuardDuty accounts by invitation</a>.</p> <p>After the invite has been accepted and you choose to disassociate a member account (by using <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_DisassociateMembers.html">DisassociateMembers</a>) from your account, the details of the member account obtained by invoking <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html">CreateMembers</a>, including the associated email addresses, will be retained. This is done so that you can invoke InviteMembers without the need to invoke <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_CreateMembers.html">CreateMembers</a> again. To remove the details associated with a member account, you must also invoke <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_DeleteMembers.html">DeleteMembers</a>. </p>
		/// InviteMembers detector/{detectorId}/member/invite
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to invite members with.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<InviteMembersResponse> InviteMembersAsync(string detectorId, InviteMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/invite";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InviteMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Lists coverage details for your GuardDuty account. If you're a GuardDuty administrator, you can retrieve all resources associated with the active member accounts in your organization.</p> <p>Make sure the accounts have EKS Runtime Monitoring enabled and GuardDuty agent running on their EKS nodes.</p>
		/// ListCoverage detector/{detectorId}/coverage
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector whose coverage details you want to retrieve.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCoverageResponse> ListCoverageAsync(string detectorId, string MaxResults, string NextToken, ListCoveragePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/coverage&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCoverageResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists Amazon GuardDuty findings for the specified detector ID.
		/// ListFindings detector/{detectorId}/findings
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings you want to list.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFindingsResponse> ListFindingsAsync(string detectorId, string MaxResults, string NextToken, ListFindingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/findings&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFindingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all GuardDuty membership invitations that were sent to the current Amazon Web Services account.
		/// ListInvitations invitation
		/// </summary>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInvitationsResponse> ListInvitationsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invitation?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListInvitationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the accounts configured as GuardDuty delegated administrators.
		/// ListOrganizationAdminAccounts admin
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="nextToken">A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOrganizationAdminAccountsResponse> ListOrganizationAdminAccountsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "admin?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOrganizationAdminAccountsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, threat intel sets, publishing destination, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the given GuardDuty resource. </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds tags to a resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.</param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Initiates the malware scan. Invoking this API will automatically create the <a href="https://docs.aws.amazon.com/guardduty/latest/ug/slr-permissions-malware-protection.html">Service-linked role </a> in the corresponding account.
		/// StartMalwareScan malware-scan/start
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartMalwareScanResponse> StartMalwareScanAsync(StartMalwareScanPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "malware-scan/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartMalwareScanResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_StopMonitoringMembers.html">StopMonitoringMembers</a> operation.
		/// StartMonitoringMembers detector/{detectorId}/member/start
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty administrator account associated with the member accounts to monitor.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<StartMonitoringMembersResponse> StartMonitoringMembersAsync(string detectorId, StartMonitoringMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartMonitoringMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Stops GuardDuty monitoring for the specified member accounts. Use the <code>StartMonitoringMembers</code> operation to restart monitoring for those accounts.</p> <p>With <code>autoEnableOrganizationMembers</code> configuration for your organization set to <code>ALL</code>, you'll receive an error if you attempt to stop monitoring the member accounts in your organization.</p>
		/// StopMonitoringMembers detector/{detectorId}/member/stop
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the GuardDuty administrator account that is monitoring member accounts.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<StopMonitoringMembersResponse> StopMonitoringMembersAsync(string detectorId, StopMonitoringMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopMonitoringMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unarchives GuardDuty findings specified by the <code>findingIds</code>.
		/// UnarchiveFindings detector/{detectorId}/findings/unarchive
		/// </summary>
		/// <param name="detectorId">The ID of the detector associated with the findings to unarchive.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<UnarchiveFindingsResponse> UnarchiveFindingsAsync(string detectorId, UnarchiveFindingsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/findings/unarchive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UnarchiveFindingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes tags from a resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the resource to remove tags from.</param>
		/// <param name="tagKeys">The tag keys to remove from the resource.
		/// Minimum items: 1
		/// Maximum items: 200
		// </param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Marks the specified GuardDuty findings as useful or not useful.
		/// UpdateFindingsFeedback detector/{detectorId}/findings/feedback
		/// </summary>
		/// <param name="detectorId">The ID of the detector associated with the findings to update feedback for.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateFindingsFeedbackResponse> UpdateFindingsFeedbackAsync(string detectorId, UpdateFindingsFeedbackPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/findings/feedback";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateFindingsFeedbackResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Contains information on member accounts to be updated.</p> <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
		/// UpdateMemberDetectors detector/{detectorId}/member/detector/update
		/// </summary>
		/// <param name="detectorId">The detector ID of the administrator account.
		/// Min length: 1
		/// Max length: 300
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateMemberDetectorsResponse> UpdateMemberDetectorsAsync(string detectorId, UpdateMemberDetectorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "detector/"+ (detectorId==null? "" : System.Uri.EscapeDataString(detectorId))+"/member/detector/update";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateMemberDetectorsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class AcceptAdministratorInvitationPostBody
	{
		
		/// <summary>
		/// The account ID of the GuardDuty administrator account whose invitation you're accepting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="administratorId")]
		public string AdministratorId { get; set; }
		
		/// <summary>
		/// The value that is used to validate the administrator account to the member account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
	}
	
	public class AcceptInvitationPostBody
	{
		
		/// <summary>
		/// The account ID of the GuardDuty administrator account whose invitation you're accepting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="masterId")]
		public string MasterId { get; set; }
		
		/// <summary>
		/// The value that is used to validate the administrator account to the member account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invitationId")]
		public string InvitationId { get; set; }
	}
	
	public class ArchiveFindingsPostBody
	{
		
		/// <summary>
		/// The IDs of the findings that you want to archive.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="findingIds")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public string[] FindingIds { get; set; }
	}
	
	public class CreateDetectorPostBody
	{
		
		/// <summary>
		/// A Boolean value that specifies whether the detector is to be enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public bool Enable { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// A value that specifies how frequently updated findings are exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findingPublishingFrequency")]
		public FindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		/// <summary>
		/// Contains information about which data sources are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSources")]
		public CreateDetectorPostBodyDataSources DataSources { get; set; }
		
		/// <summary>
		/// The tags to be added to a new detector resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A list of features that will be configured for the detector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public DetectorFeatureConfiguration[] Features { get; set; }
	}
	
	public class CreateDetectorPostBodyDataSources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfiguration S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesConfiguration Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MalwareProtectionConfiguration MalwareProtection { get; set; }
	}
	
	public class CreateFilterPostBody
	{
		
		/// <summary>
		/// The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.
		/// Required
		/// Min length: 3
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(3, 64)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.
		/// Min length: 0
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 512)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the action that is to be applied to the findings that match the filter.
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public FilterAction Action { get; set; }
		
		/// <summary>
		/// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="findingCriteria")]
		public CreateFilterPostBodyFindingCriteria FindingCriteria { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags to be added to a new filter resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateFilterPostBodyFindingCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Criterion Criterion { get; set; }
	}
	
	public class CreateIPSetPostBody
	{
		
		/// <summary>
		/// <p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumeric, whitespace, dash (-), and underscores (_).</p>
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Name { get; set; }
		
		/// <summary>
		/// The format of the file that contains the IPSet.
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public IpSetFormat Format { get; set; }
		
		/// <summary>
		/// The URI of the file that contains the IPSet. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Location { get; set; }
		
		/// <summary>
		/// A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activate")]
		public bool Activate { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags to be added to a new IP set resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateMembersPostBody
	{
		
		/// <summary>
		/// A list of account ID and email address pairs of the accounts that you want to associate with the GuardDuty administrator account.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountDetails")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public AccountDetail[] AccountDetails { get; set; }
	}
	
	public class CreatePublishingDestinationPostBody
	{
		
		/// <summary>
		/// The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public DestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationProperties")]
		public CreatePublishingDestinationPostBodyDestinationProperties DestinationProperties { get; set; }
		
		/// <summary>
		/// The idempotency token for the request.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 64)]
		public string ClientToken { get; set; }
	}
	
	public class CreatePublishingDestinationPostBodyDestinationProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	public class CreateSampleFindingsPostBody
	{
		
		/// <summary>
		/// The types of sample findings to generate.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findingTypes")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public string[] FindingTypes { get; set; }
	}
	
	public class CreateThreatIntelSetPostBody
	{
		
		/// <summary>
		/// A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Name { get; set; }
		
		/// <summary>
		/// The format of the file that contains the ThreatIntelSet.
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public IpSetFormat Format { get; set; }
		
		/// <summary>
		/// The URI of the file that contains the ThreatIntelSet. 
		/// Required
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Location { get; set; }
		
		/// <summary>
		/// A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activate")]
		public bool Activate { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.Length(0, 64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags to be added to a new threat list resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class DeclineInvitationsPostBody
	{
		
		/// <summary>
		/// A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to decline invitations from.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class UpdateDetectorPostBody
	{
		
		/// <summary>
		/// Specifies whether the detector is enabled or not enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		/// <summary>
		/// An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findingPublishingFrequency")]
		public FindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		/// <summary>
		/// Contains information about which data sources are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSources")]
		public UpdateDetectorPostBodyDataSources DataSources { get; set; }
		
		/// <summary>
		/// Provides the features that will be updated for the detector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public DetectorFeatureConfiguration[] Features { get; set; }
	}
	
	public class UpdateDetectorPostBodyDataSources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfiguration S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesConfiguration Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MalwareProtectionConfiguration MalwareProtection { get; set; }
	}
	
	public class UpdateFilterPostBody
	{
		
		/// <summary>
		/// The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.
		/// Min length: 0
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.Length(0, 512)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the action that is to be applied to the findings that match the filter.
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public FilterAction Action { get; set; }
		
		/// <summary>
		/// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findingCriteria")]
		public UpdateFilterPostBodyFindingCriteria FindingCriteria { get; set; }
	}
	
	public class UpdateFilterPostBodyFindingCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Criterion Criterion { get; set; }
	}
	
	public class UpdateIPSetPostBody
	{
		
		/// <summary>
		/// The unique ID that specifies the IPSet that you want to update.
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Name { get; set; }
		
		/// <summary>
		/// The updated URI of the file that contains the IPSet. 
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Location { get; set; }
		
		/// <summary>
		/// The updated Boolean value that specifies whether the IPSet is active or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activate")]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	public class DeleteInvitationsPostBody
	{
		
		/// <summary>
		/// A list of account IDs of the Amazon Web Services accounts that sent invitations to the current member account that you want to delete invitations from.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class DeleteMembersPostBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts that you want to delete.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class UpdatePublishingDestinationPostBody
	{
		
		/// <summary>
		/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationProperties")]
		public UpdatePublishingDestinationPostBodyDestinationProperties DestinationProperties { get; set; }
	}
	
	public class UpdatePublishingDestinationPostBodyDestinationProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	public class UpdateThreatIntelSetPostBody
	{
		
		/// <summary>
		/// The unique ID that specifies the ThreatIntelSet that you want to update.
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Name { get; set; }
		
		/// <summary>
		/// The updated URI of the file that contains the ThreateIntelSet.
		/// Min length: 1
		/// Max length: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		[System.ComponentModel.DataAnnotations.Length(1, 300)]
		public string Location { get; set; }
		
		/// <summary>
		/// The updated Boolean value that specifies whether the ThreateIntelSet is active or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activate")]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	public class DescribeMalwareScansPostBody
	{
		
		/// <summary>
		/// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Represents the criteria to be used in the filter for describing scan entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterCriteria")]
		public DescribeMalwareScansPostBodyFilterCriteria FilterCriteria { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for sorting findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortCriteria")]
		public DescribeMalwareScansPostBodySortCriteria SortCriteria { get; set; }
	}
	
	public class DescribeMalwareScansPostBodyFilterCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FilterCriterion[] FilterCriterion { get; set; }
	}
	
	public class DescribeMalwareScansPostBodySortCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderBy OrderBy { get; set; }
	}
	
	public class UpdateOrganizationConfigurationPostBody
	{
		
		/// <summary>
		/// <p>Indicates whether to automatically enable member accounts in the organization.</p> <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoEnable")]
		public System.Nullable<System.Boolean> AutoEnable { get; set; }
		
		/// <summary>
		/// An object that contains information on which data sources will be configured to be automatically enabled for new members within the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSources")]
		public UpdateOrganizationConfigurationPostBodyDataSources DataSources { get; set; }
		
		/// <summary>
		/// A list of features that will be configured for the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public OrganizationFeatureConfiguration[] Features { get; set; }
		
		/// <summary>
		/// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. </p> <ul> <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li> <li> <p> <code>ALL</code>: Indicates that all accounts in the Amazon Web Services Organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> </li> <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any accounts in the organization. GuardDuty must be managed for each account individually by the administrator.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoEnableOrganizationMembers")]
		public AutoEnableMembers AutoEnableOrganizationMembers { get; set; }
	}
	
	public class UpdateOrganizationConfigurationPostBodyDataSources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationS3LogsConfiguration S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationKubernetesConfiguration Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationMalwareProtectionConfiguration MalwareProtection { get; set; }
	}
	
	public class DisableOrganizationAdminAccountPostBody
	{
		
		/// <summary>
		/// The Amazon Web Services Account ID for the organizations account to be disabled as a GuardDuty delegated administrator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		public string AdminAccountId { get; set; }
	}
	
	public class DisassociateMembersPostBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts that you want to disassociate from the administrator account.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class EnableOrganizationAdminAccountPostBody
	{
		
		/// <summary>
		/// The Amazon Web Services Account ID for the organization account to be enabled as a GuardDuty delegated administrator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminAccountId")]
		public string AdminAccountId { get; set; }
	}
	
	public class GetCoverageStatisticsPostBody
	{
		
		/// <summary>
		/// Represents the criteria used in the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterCriteria")]
		public GetCoverageStatisticsPostBodyFilterCriteria FilterCriteria { get; set; }
		
		/// <summary>
		/// Represents the statistics type used to aggregate the coverage details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statisticsType")]
		public CoverageStatisticsType[] StatisticsType { get; set; }
	}
	
	public class GetCoverageStatisticsPostBodyFilterCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageFilterCriterion[] FilterCriterion { get; set; }
	}
	
	public class GetFindingsPostBody
	{
		
		/// <summary>
		/// The IDs of the findings that you want to retrieve.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="findingIds")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public string[] FindingIds { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for sorting findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortCriteria")]
		public GetFindingsPostBodySortCriteria SortCriteria { get; set; }
	}
	
	public class GetFindingsPostBodySortCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderBy OrderBy { get; set; }
	}
	
	public class GetFindingsStatisticsPostBody
	{
		
		/// <summary>
		/// The types of finding statistics to retrieve.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="findingStatisticTypes")]
		[System.ComponentModel.DataAnnotations.Length(0, 10)]
		public FindingStatisticType[] FindingStatisticTypes { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findingCriteria")]
		public GetFindingsStatisticsPostBodyFindingCriteria FindingCriteria { get; set; }
	}
	
	public class GetFindingsStatisticsPostBodyFindingCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Criterion Criterion { get; set; }
	}
	
	public class UpdateMalwareScanSettingsPostBody
	{
		
		/// <summary>
		/// Contains information about criteria used to filter resources before triggering malware scan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scanResourceCriteria")]
		public UpdateMalwareScanSettingsPostBodyScanResourceCriteria ScanResourceCriteria { get; set; }
		
		/// <summary>
		/// An enum value representing possible snapshot preservation settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ebsSnapshotPreservation")]
		public EbsSnapshotPreservation EbsSnapshotPreservation { get; set; }
	}
	
	public class UpdateMalwareScanSettingsPostBodyScanResourceCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScanCriterion Include { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanCriterion Exclude { get; set; }
	}
	
	public class GetMemberDetectorsPostBody
	{
		
		/// <summary>
		/// The account ID of the member account.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class GetMembersPostBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts that you want to describe.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class GetRemainingFreeTrialDaysPostBody
	{
		
		/// <summary>
		/// A list of account identifiers of the GuardDuty member account.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class GetUsageStatisticsPostBody
	{
		
		/// <summary>
		/// The type of usage statistics to retrieve.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usageStatisticsType")]
		public UsageStatisticType UsageStatisticsType { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used to query usage statistics.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usageCriteria")]
		public GetUsageStatisticsPostBodyUsageCriteria UsageCriteria { get; set; }
		
		/// <summary>
		/// The currency unit you would like to view your usage statistics in. Current valid values are USD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class GetUsageStatisticsPostBodyUsageCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSource[] DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageFeature[] Features { get; set; }
	}
	
	public class InviteMembersPostBody
	{
		
		/// <summary>
		/// A list of account IDs of the accounts that you want to invite to GuardDuty as members.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
		
		/// <summary>
		/// A Boolean value that specifies whether you want to disable email notification to the accounts that you are inviting to GuardDuty as members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableEmailNotification")]
		public System.Nullable<System.Boolean> DisableEmailNotification { get; set; }
		
		/// <summary>
		/// The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class ListCoveragePostBody
	{
		
		/// <summary>
		/// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Represents the criteria used in the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterCriteria")]
		public ListCoveragePostBodyFilterCriteria FilterCriteria { get; set; }
		
		/// <summary>
		/// Information about the sorting criteria used in the coverage statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortCriteria")]
		public ListCoveragePostBodySortCriteria SortCriteria { get; set; }
	}
	
	public class ListCoveragePostBodyFilterCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageFilterCriterion[] FilterCriterion { get; set; }
	}
	
	public class ListCoveragePostBodySortCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoverageSortKey AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderBy OrderBy { get; set; }
	}
	
	public class ListFindingsPostBody
	{
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findingCriteria")]
		public ListFindingsPostBodyFindingCriteria FindingCriteria { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for sorting findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortCriteria")]
		public ListFindingsPostBodySortCriteria SortCriteria { get; set; }
		
		/// <summary>
		/// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class ListFindingsPostBodyFindingCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Criterion Criterion { get; set; }
	}
	
	public class ListFindingsPostBodySortCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderBy OrderBy { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to be added to a resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartMalwareScanPostBody
	{
		
		/// <summary>
		/// Amazon Resource Name (ARN) of the resource for which you invoked the API.
		/// Required
		/// Pattern: ^arn:[A-Za-z-]+:[A-Za-z0-9]+:[A-Za-z0-9-]+:\d+:(([A-Za-z0-9-]+)[:\/])?[A-Za-z0-9-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[A-Za-z-]+:[A-Za-z0-9]+:[A-Za-z0-9-]+:\d+:(([A-Za-z0-9-]+)[:\/])?[A-Za-z0-9-]*$")]
		public string ResourceArn { get; set; }
	}
	
	public class StartMonitoringMembersPostBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts to start monitoring.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class StopMonitoringMembersPostBody
	{
		
		/// <summary>
		/// A list of account IDs for the member accounts to stop monitoring.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
	}
	
	public class UnarchiveFindingsPostBody
	{
		
		/// <summary>
		/// The IDs of the findings to unarchive.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="findingIds")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public string[] FindingIds { get; set; }
	}
	
	public class UpdateFindingsFeedbackPostBody
	{
		
		/// <summary>
		/// The IDs of the findings that you want to mark as useful or not useful.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="findingIds")]
		[System.ComponentModel.DataAnnotations.Length(0, 50)]
		public string[] FindingIds { get; set; }
		
		/// <summary>
		/// The feedback for the finding.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public Feedback Feedback { get; set; }
		
		/// <summary>
		/// Additional feedback about the GuardDuty findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
	}
	
	public class UpdateMemberDetectorsPostBody
	{
		
		/// <summary>
		/// A list of member account IDs to be updated.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountIds")]
		[System.ComponentModel.DataAnnotations.Length(1, 50)]
		public string[] AccountIds { get; set; }
		
		/// <summary>
		/// Contains information about which data sources are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSources")]
		public UpdateMemberDetectorsPostBodyDataSources DataSources { get; set; }
		
		/// <summary>
		/// A list of features that will be updated for the specified member accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public MemberFeaturesConfiguration[] Features { get; set; }
	}
	
	public class UpdateMemberDetectorsPostBodyDataSources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfiguration S3Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KubernetesConfiguration Kubernetes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MalwareProtectionConfiguration MalwareProtection { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
