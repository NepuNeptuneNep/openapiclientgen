//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Enumeration of aggregate values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Aggregate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		test = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		staging = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 3,
	}
	
	/// <summary>
	/// A description of groups of sites that are statistically correlated.
	///
	///- **Examples** (for each entry of the assemblies list):
	///    - `{"sites_in_groups": [[0], [1]], "group_probabilities: [0.3, 0.7]}`: the first site and the second site never occur at the same time in the unit cell.
	///      Statistically, 30 % of the times the first site is present, while 70 % of the times the second site is present.
	///    - `{"sites_in_groups": [[1,2], [3]], "group_probabilities: [0.3, 0.7]}`: the second and third site are either present together or not present; they form the first group of atoms for this assembly.
	///      The second group is formed by the fourth site. Sites of the first group (the second and the third) are never present at the same time as the fourth site.
	///      30 % of times sites 1 and 2 are present (and site 3 is absent); 70 % of times site 3 is present (and sites 1 and 2 are absent).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Assembly
	{
		
		/// <summary>
		/// Statistical probability of each group. It MUST have the same length as `sites_in_groups`.
		///It SHOULD sum to one.
		///See below for examples of how to specify the probability of the occurrence of a vacancy.
		///The possible reasons for the values not to sum to one are the same as already specified above for the `concentration` of each `species`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_probabilities")]
		public double[] Group_probabilities { get; set; }
		
		/// <summary>
		/// Index of the sites (0-based) that belong to each group for each assembly.
		///
		///- **Examples**:
		///    - `[[1], [2]]`: two groups, one with the second site, one with the third.
		///    - `[[1,2], [3]]`: one group with the second and third site, one with the fourth.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sites_in_groups")]
		public string[] Sites_in_groups { get; set; }
	}
	
	/// <summary>
	/// Members of the attributes object ("attributes") represent information about the resource object in which it's defined.
	///The keys for Attributes MUST NOT be:
	///    relationships
	///    links
	///    id
	///    type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attributes
	{
	}
	
	/// <summary>
	/// A JSON object containing information about an available API version
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AvailableApiVersion
	{
		
		/// <summary>
		/// A string specifying a versioned base URL that MUST adhere to the rules in section Base URL
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// Pattern: .+/v[0-1](\.[0-9]+)*/?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.Length(1, 65536)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".+/v[0-1](\.[0-9]+)*/?$")]
		public string Url { get; set; }
		
		/// <summary>
		/// A string containing the full version number of the API served at that versioned base URL.
		///The version number string MUST NOT be prefixed by, e.g., 'v'.
		///Examples: `1.0.0`, `1.0.0-rc.2`.
		/// Required
		/// Pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Attributes for Base URL Info endpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseInfoAttributes
	{
		
		/// <summary>
		/// Presently used full version of the OPTIMADE API.
		///The version number string MUST NOT be prefixed by, e.g., "v".
		///Examples: `1.0.0`, `1.0.0-rc.2`.
		/// Required
		/// Pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_version")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$")]
		public string Api_version { get; set; }
		
		/// <summary>
		/// A list of dictionaries of available API versions at other base URLs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="available_api_versions")]
		public AvailableApiVersion[] Available_api_versions { get; set; }
		
		/// <summary>
		/// List of available endpoints (i.e., the string to be appended to the versioned base URL).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="available_endpoints")]
		public string[] Available_endpoints { get; set; }
		
		/// <summary>
		/// Available entry endpoints as a function of output formats.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entry_types_by_format")]
		public System.Collections.Generic.Dictionary<string, string[]> Entry_types_by_format { get; set; }
		
		/// <summary>
		/// List of available output formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formats")]
		public string[] Formats { get; set; }
		
		/// <summary>
		/// If true, this is an index meta-database base URL (see section Index Meta-Database). If this member is not provided, the client MUST assume this is not an index meta-database base URL (i.e., the default is for `is_index` to be `false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_index")]
		public System.Nullable<System.Boolean> Is_index { get; set; }
	}
	
	/// <summary>
	/// Resource objects appear in a JSON API document to represent resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseInfoResource
	{
		
		/// <summary>
		/// Attributes for Base URL Info endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public BaseInfoAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// Pattern: ^/$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^/$")]
		public string Id { get; set; }
		
		/// <summary>
		/// a links object containing links related to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// [Relationships object](https://jsonapi.org/format/1.0/#document-resource-object-relationships)
		///describing relationships between the resource and other JSON API resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public Relationships Relationships { get; set; }
		
		/// <summary>
		/// Required
		/// Pattern: ^info$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^info$")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A Resource Links object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceLinks
	{
		
		/// <summary>
		/// A link that identifies the resource represented by the resource object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Non-standard meta-information that can not be represented as an attribute or relationship.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Meta
	{
	}
	
	/// <summary>
	/// Members of the relationships object ("relationships") represent references from the resource object in which it's defined to other resource objects.
	///Keys MUST NOT be:
	///    type
	///    id
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Relationships
	{
	}
	
	/// <summary>
	/// Specific meta field for base relationship resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseRelationshipMeta
	{
		
		/// <summary>
		/// OPTIONAL human-readable description of the relationship
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Minimum requirements to represent a relationship resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseRelationshipResource
	{
		
		/// <summary>
		/// Resource ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Relationship meta field. MUST contain 'description' if supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public BaseRelationshipMeta Meta { get; set; }
		
		/// <summary>
		/// Resource type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Optimade Data Types
	///
	///See the section "Data types" in the OPTIMADE API specification for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="float")]
		_float = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timestamp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		list = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dictionary = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryInfoProperty
	{
		
		/// <summary>
		/// A human-readable description of the entry property
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Defines whether the entry property can be used for sorting with the "sort" parameter.
		///If the entry listing endpoint supports sorting, this key MUST be present for sortable properties with value `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortable")]
		public System.Nullable<System.Boolean> Sortable { get; set; }
		
		/// <summary>
		/// The type of the property's value.
		///This MUST be any of the types defined in the Data types section.
		///For the purpose of compatibility with future versions of this specification, a client MUST accept values that are not `string` values specifying any of the OPTIMADE Data types, but MUST then also disregard the `type` field.
		///Note, if the value is a nested type, only the outermost type should be reported.
		///E.g., for the entry resource `structures`, the `species` property is defined as a list of dictionaries, hence its `type` value would be `list`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DataType Type { get; set; }
		
		/// <summary>
		/// The physical unit of the entry property.
		///This MUST be a valid representation of units according to version 2.1 of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html).
		///It is RECOMMENDED that non-standard (non-SI) units are described in the description for the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryInfoResource
	{
		
		/// <summary>
		/// Description of the entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// List of output formats available for this type of entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formats")]
		public string[] Formats { get; set; }
		
		/// <summary>
		/// Dictionary of available output fields for this entry type, where the keys are the values of the `formats` list and the values are the keys of the `properties` dictionary.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="output_fields_by_format")]
		public System.Collections.Generic.Dictionary<string, string[]> Output_fields_by_format { get; set; }
		
		/// <summary>
		/// A dictionary describing queryable properties for this entry type, where each key is a property name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, EntryInfoProperty> Properties { get; set; }
	}
	
	/// <summary>
	/// errors are not allowed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryInfoResponse
	{
		
		/// <summary>
		/// OPTIMADE information for an entry endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public EntryInfoResource Data { get; set; }
		
		/// <summary>
		/// A list of unique errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A list of unique included resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// An error response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// an application-specific error code, expressed as a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A human-readable explanation specific to this occurrence of the problem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// A unique identifier for this particular occurrence of the problem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A links object storing about
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ErrorLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// An object containing references to the source of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ErrorSource Source { get; set; }
		
		/// <summary>
		/// the HTTP status code applicable to this problem, expressed as a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A Links object specific to Error objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorLinks
	{
		
		/// <summary>
		/// A link that leads to further details about this particular occurrence of the problem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
	}
	
	/// <summary>
	/// an object containing references to the source of the error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorSource
	{
		
		/// <summary>
		/// a string indicating which URI query parameter caused the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	/// <summary>
	/// Resource objects appear in a JSON API document to represent resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		/// <summary>
		/// an attributes object representing some of the resource’s data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// Resource ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// a links object containing links related to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// [Relationships object](https://jsonapi.org/format/1.0/#document-resource-object-relationships)
		///describing relationships between the resource and other JSON API resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public Relationships Relationships { get; set; }
		
		/// <summary>
		/// Resource type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An object describing the server's implementation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonApi
	{
		
		/// <summary>
		/// Non-standard meta information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Version of the json API used
		/// </summary>
		[System.ComponentModel.DefaultValue("1.0")]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; } = "1.0";
	}
	
	/// <summary>
	/// A set of Links objects, possibly including pagination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ToplevelLinks
	{
		
		/// <summary>
		/// The first page of data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		/// <summary>
		/// The last page of data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		/// <summary>
		/// The next page of data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The previous page of data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// A related resource link
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
		
		/// <summary>
		/// A link to itself
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)
	///that contains JSON API meta objects of non-standard
	///meta-information.
	///
	///OPTIONAL additional information global to the query that is not
	///specified in this document, MUST start with a
	///database-provider-specific prefix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseMeta
	{
		
		/// <summary>
		/// Presently used full version of the OPTIMADE API.
		///The version number string MUST NOT be prefixed by, e.g., "v".
		///Examples: `1.0.0`, `1.0.0-rc.2`.
		/// Required
		/// Pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_version")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$")]
		public string Api_version { get; set; }
		
		/// <summary>
		/// An integer containing the total number of data resource objects available in the database for the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_available")]
		public System.Nullable<System.Int32> Data_available { get; set; }
		
		/// <summary>
		/// An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_returned")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Data_returned { get; set; }
		
		/// <summary>
		/// a dictionary describing the server implementation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="implementation")]
		public Implementation Implementation { get; set; }
		
		/// <summary>
		/// a string containing the last ID returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_id")]
		public string Last_id { get; set; }
		
		/// <summary>
		/// `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="more_data_available")]
		public bool More_data_available { get; set; }
		
		/// <summary>
		/// information on the database provider of the implementation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Provider Provider { get; set; }
		
		/// <summary>
		/// Information on the Query that was requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public ResponseMetaQuery Query { get; set; }
		
		/// <summary>
		/// response string from the server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_message")]
		public string Response_message { get; set; }
		
		/// <summary>
		/// A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.
		///If it is a string, or a dictionary containing no `meta` field, the provided URL MUST point at an [OpenAPI](https://swagger.io/specification/) schema.
		///It is possible that future versions of this specification allows for alternative schema types.
		///Hence, if the `meta` field of the JSON API links object is provided and contains a field `schema_type` that is not equal to the string `OpenAPI` the client MUST not handle failures to parse the schema or to validate the response against the schema as errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		/// <summary>
		/// A timestamp containing the date and time at which the query was executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_stamp")]
		public System.Nullable<System.DateTimeOffset> Time_stamp { get; set; }
		
		/// <summary>
		/// A list of warning resource objects representing non-critical errors or warnings.
		///A warning resource object is defined similarly to a [JSON API error object](http://jsonapi.org/format/1.0/#error-objects), but MUST also include the field `type`, which MUST have the value `"warning"`.
		///The field `detail` MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features.
		///The field `status`, representing a HTTP response status code, MUST NOT be present for a warning resource object.
		///This is an exclusive field for error resource objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public Warnings[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Information on the server implementation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Implementation
	{
		
		/// <summary>
		/// A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public string Homepage { get; set; }
		
		/// <summary>
		/// A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issue_tracker")]
		public string Issue_tracker { get; set; }
		
		/// <summary>
		/// A dictionary providing details about the maintainer of the implementation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintainer")]
		public ImplementationMaintainer Maintainer { get; set; }
		
		/// <summary>
		/// name of the implementation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_url")]
		public string Source_url { get; set; }
		
		/// <summary>
		/// version string of the current implementation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Details about the maintainer of the implementation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImplementationMaintainer
	{
		
		/// <summary>
		/// the maintainer's email address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// Information on the database provider of the implementation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Provider
	{
		
		/// <summary>
		/// a longer description of the database provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public string Homepage { get; set; }
		
		/// <summary>
		/// a short name for the database provider
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes.
		/// Required
		/// Pattern: ^[a-z]([a-z]|[0-9]|_)*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z]([a-z]|[0-9]|_)*$")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Information on the query that was requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseMetaQuery
	{
		
		/// <summary>
		/// A string with the part of the URL following the versioned or unversioned base URL that serves the API.
		///Query parameters that have not been used in processing the request MAY be omitted.
		///In particular, if no query parameters have been involved in processing the request, the query part of the URL MAY be excluded.
		///Example: `/structures?filter=nelements=2`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="representation")]
		public string Representation { get; set; }
	}
	
	/// <summary>
	/// OPTIMADE-specific warning class based on OPTIMADE-specific JSON API Error.
	///
	///From the specification:
	///
	///A warning resource object is defined similarly to a JSON API error object, but MUST also include the field type, which MUST have the value "warning".
	///The field detail MUST be present and SHOULD contain a non-critical message, e.g., reporting unrecognized search attributes or deprecated features.
	///
	///Note: Must be named "Warnings", since "Warning" is a built-in Python class.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Warnings
	{
		
		/// <summary>
		/// an application-specific error code, expressed as a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A human-readable explanation specific to this occurrence of the problem.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// A unique identifier for this particular occurrence of the problem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A links object storing about
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ErrorLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// An object containing references to the source of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ErrorSource Source { get; set; }
		
		/// <summary>
		/// A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Warnings must be of type "warning"
		/// Required
		/// Pattern: ^warning$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^warning$")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// This model wraps the JSON API Relationships to include type-specific top level keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryRelationships
	{
		
		/// <summary>
		/// Object containing links to relationships with entries of the `references` type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public ReferenceRelationship References { get; set; }
		
		/// <summary>
		/// Object containing links to relationships with entries of the `structures` type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structures")]
		public StructureRelationship Structures { get; set; }
	}
	
	/// <summary>
	/// Similar to normal JSON API relationship, but with addition of OPTIONAL meta field for a resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceRelationship
	{
		
		/// <summary>
		/// Resource linkage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BaseRelationshipResource Data { get; set; }
		
		/// <summary>
		/// a links object containing at least one of the following: self, related
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public RelationshipLinks Links { get; set; }
		
		/// <summary>
		/// a meta object that contains non-standard meta-information about the relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
	}
	
	/// <summary>
	/// A resource object **MAY** contain references to other resource objects ("relationships").
	///Relationships may be to-one or to-many.
	///Relationships can be specified by including a member in a resource's links object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelationshipLinks
	{
		
		/// <summary>
		/// A [related resource link](https://jsonapi.org/format/1.0/#document-resource-object-related-resource-links).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
		
		/// <summary>
		/// A link for the relationship itself (a 'relationship link').
		///This link allows the client to directly manipulate the relationship.
		///When fetched successfully, this link returns the [linkage](https://jsonapi.org/format/1.0/#document-resource-object-linkage) for the related resources as its primary data.
		///(See [Fetching Relationships](https://jsonapi.org/format/1.0/#fetching-relationships).)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Similar to normal JSON API relationship, but with addition of OPTIONAL meta field for a resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructureRelationship
	{
		
		/// <summary>
		/// Resource linkage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BaseRelationshipResource Data { get; set; }
		
		/// <summary>
		/// a links object containing at least one of the following: self, related
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public RelationshipLinks Links { get; set; }
		
		/// <summary>
		/// a meta object that contains non-standard meta-information about the relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
	}
	
	/// <summary>
	/// The base model for an entry resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryResource
	{
		
		/// <summary>
		/// A dictionary, containing key-value pairs representing the entry's properties, except for `type` and `id`.
		///Database-provider-specific properties need to include the database-provider-specific prefix (see section on Database-Provider-Specific Namespace Prefixes).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public EntryResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// An entry's ID as defined in section Definition of Terms.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response.
		///
		///- **Examples**:
		///    - `"db/1234567"`
		///    - `"cod/2000000"`
		///    - `"cod/2000000@1234567"`
		///    - `"nomad/L1234567890"`
		///    - `"42"`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// a links object containing links related to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// A dictionary containing references to other entries according to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).
		///The OPTIONAL human-readable description of the relationship MAY be provided in the `description` field inside the `meta` dictionary of the JSON API resource identifier object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public EntryRelationships Relationships { get; set; }
		
		/// <summary>
		/// The name of the type of an entry.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response.
		///    - MUST be an existing entry type.
		///    - The entry of type `<type>` and ID `<id>` MUST be returned in response to a request for `/<type>/<id>` under the versioned base URL.
		///
		///- **Example**: `"structures"`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Contains key-value pairs representing the entry's properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryResourceAttributes
	{
		
		/// <summary>
		/// The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to "the latest version" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///
		///- **Examples**:
		///    - `"8bd3e750-b477-41a0-9b11-3a799f21b44f"`
		///    - `"fjeiwoj,54;@=%<>#32"` (Strings that are not URL-safe are allowed.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="immutable_id")]
		public string Immutable_id { get; set; }
		
		/// <summary>
		/// Date and time representing when the entry was last modified.
		///
		///- **Type**: timestamp.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response unless the query parameter `response_fields` is present and does not include this property.
		///
		///- **Example**:
		///    - As part of JSON response format: `"2007-04-05T14:30:20Z"` (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public System.DateTimeOffset Last_modified { get; set; }
	}
	
	/// <summary>
	/// errors MUST be present and data MUST be skipped
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Outputted Data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Resource Data { get; set; }
		
		/// <summary>
		/// A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public OptimadeError[] Errors { get; set; }
		
		/// <summary>
		/// A list of unique included resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// detail MUST be present
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OptimadeError
	{
		
		/// <summary>
		/// an application-specific error code, expressed as a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A human-readable explanation specific to this occurrence of the problem.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// A unique identifier for this particular occurrence of the problem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A links object storing about
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ErrorLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// An object containing references to the source of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ErrorSource Source { get; set; }
		
		/// <summary>
		/// the HTTP status code applicable to this problem, expressed as a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// errors are not allowed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InfoResponse
	{
		
		/// <summary>
		/// The implementations /info data
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BaseInfoResource Data { get; set; }
		
		/// <summary>
		/// A list of unique errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// A list of unique included resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="included")]
		public Resource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// A link **MUST** be represented as either: a string containing the link's URL or a link object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		/// <summary>
		/// a string containing the link’s URL.
		/// Required
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		[System.ComponentModel.DataAnnotations.Length(1, 65536)]
		public string Href { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
	}
	
	/// <summary>
	/// Enumeration of link_type values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		child = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		root = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		providers = 3,
	}
	
	/// <summary>
	/// A Links endpoint resource object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinksResource
	{
		
		/// <summary>
		/// A dictionary containing key-value pairs representing the Links resource's properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public LinksResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// An entry's ID as defined in section Definition of Terms.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response.
		///
		///- **Examples**:
		///    - `"db/1234567"`
		///    - `"cod/2000000"`
		///    - `"cod/2000000@1234567"`
		///    - `"nomad/L1234567890"`
		///    - `"42"`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// a links object containing links related to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// A dictionary containing references to other entries according to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).
		///The OPTIONAL human-readable description of the relationship MAY be provided in the `description` field inside the `meta` dictionary of the JSON API resource identifier object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public EntryRelationships Relationships { get; set; }
		
		/// <summary>
		/// These objects are described in detail in the section Links Endpoint
		/// Required
		/// Pattern: ^links$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^links$")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Links endpoint resource object attributes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinksResourceAttributes
	{
		
		/// <summary>
		/// A string indicating whether a client that is following links to aggregate results from different OPTIMADE implementations should follow this link or not.
		///This flag SHOULD NOT be indicated for links where `link_type` is not `child`.
		///
		///If not specified, clients MAY assume that the value is `ok`.
		///If specified, and the value is anything different than `ok`, the client MUST assume that the server is suggesting not to follow the link during aggregation by default (also if the value is not among the known ones, in case a future specification adds new accepted values).
		///
		///Specific values indicate the reason why the server is providing the suggestion.
		///A client MAY follow the link anyway if it has reason to do so (e.g., if the client is looking for all test databases, it MAY follow the links marked with `aggregate`=`test`).
		///
		///If specified, it MUST be one of the values listed in section Link Aggregate Options.
		/// </summary>
		[System.ComponentModel.DefaultValue(Aggregate.ok)]
		[System.Runtime.Serialization.DataMember(Name="aggregate")]
		public Aggregate Aggregate { get; set; } = Aggregate.ok;
		
		/// <summary>
		/// JSON API links object, pointing to the base URL for this implementation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="base_url")]
		public string Base_url { get; set; }
		
		/// <summary>
		/// Human-readable description for the OPTIMADE API implementation, e.g., for use in clients to show a description to the end-user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// JSON API links object, pointing to a homepage URL for this implementation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public string Homepage { get; set; }
		
		/// <summary>
		/// The type of the linked relation.
		///MUST be one of these values: 'child', 'root', 'external', 'providers'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link_type")]
		public LinkType Link_type { get; set; }
		
		/// <summary>
		/// Human-readable name for the OPTIMADE API implementation, e.g., for use in clients to show the name to the end-user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An OPTIONAL human-readable string indicating the reason for suggesting not to aggregate results following the link.
		///It SHOULD NOT be present if `aggregate`=`ok`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="no_aggregate_reason")]
		public string No_aggregate_reason { get; set; }
	}
	
	/// <summary>
	/// errors are not allowed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinksResponse
	{
		
		/// <summary>
		/// List of unique OPTIMADE links resource objects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LinksResource[] Data { get; set; }
		
		/// <summary>
		/// A list of unique errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="included")]
		public EntryResource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// Integer enumeration of dimension_types values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Periodicity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	/// <summary>
	/// A person, i.e., an author, editor or other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Person
	{
		
		/// <summary>
		/// First name of the person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		/// <summary>
		/// Last name of the person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		/// <summary>
		/// Full name of the person, REQUIRED.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The `references` entries describe bibliographic references.
	///
	///The following properties are used to provide the bibliographic details:
	///
	///- **address**, **annote**, **booktitle**, **chapter**, **crossref**, **edition**, **howpublished**, **institution**, **journal**, **key**, **month**, **note**, **number**, **organization**, **pages**, **publisher**, **school**, **series**, **title**, **volume**, **year**: meanings of these properties match the [BibTeX specification](http://bibtexml.sourceforge.net/btxdoc.pdf), values are strings;
	///- **bib_type**: type of the reference, corresponding to **type** property in the BibTeX specification, value is string;
	///- **authors** and **editors**: lists of *person objects* which are dictionaries with the following keys:
	///    - **name**: Full name of the person, REQUIRED.
	///    - **firstname**, **lastname**: Parts of the person's name, OPTIONAL.
	///- **doi** and **url**: values are strings.
	///- **Requirements/Conventions**:
	///    - **Support**: OPTIONAL support in implementations, i.e., any of the properties MAY be `null`.
	///    - **Query**: Support for queries on any of these properties is OPTIONAL.
	///        If supported, filters MAY support only a subset of comparison operators.
	///    - Every references entry MUST contain at least one of the properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceResource
	{
		
		/// <summary>
		/// Model that stores the attributes of a reference.
		///
		///Many properties match the meaning described in the
		///[BibTeX specification](http://bibtexml.sourceforge.net/btxdoc.pdf).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ReferenceResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// An entry's ID as defined in section Definition of Terms.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response.
		///
		///- **Examples**:
		///    - `"db/1234567"`
		///    - `"cod/2000000"`
		///    - `"cod/2000000@1234567"`
		///    - `"nomad/L1234567890"`
		///    - `"42"`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// a links object containing links related to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// A dictionary containing references to other entries according to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).
		///The OPTIONAL human-readable description of the relationship MAY be provided in the `description` field inside the `meta` dictionary of the JSON API resource identifier object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public EntryRelationships Relationships { get; set; }
		
		/// <summary>
		/// The name of the type of an entry.
		///- **Type**: string.
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response.
		///    - MUST be an existing entry type.
		///    - The entry of type <type> and ID <id> MUST be returned in response to a request for `/<type>/<id>` under the versioned base URL.
		///- **Example**: `"structures"`
		/// Required
		/// Pattern: ^references$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^references$")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Model that stores the attributes of a reference.
	///
	///Many properties match the meaning described in the
	///[BibTeX specification](http://bibtexml.sourceforge.net/btxdoc.pdf).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceResourceAttributes
	{
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annote")]
		public string Annote { get; set; }
		
		/// <summary>
		/// List of person objects containing the authors of the reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public Person[] Authors { get; set; }
		
		/// <summary>
		/// Type of the reference, corresponding to the **type** property in the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bib_type")]
		public string Bib_type { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booktitle")]
		public string Booktitle { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chapter")]
		public string Chapter { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossref")]
		public string Crossref { get; set; }
		
		/// <summary>
		/// The digital object identifier of the reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doi")]
		public string Doi { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// List of person objects containing the editors of the reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public Person[] Editors { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="howpublished")]
		public string Howpublished { get; set; }
		
		/// <summary>
		/// The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to "the latest version" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///
		///- **Examples**:
		///    - `"8bd3e750-b477-41a0-9b11-3a799f21b44f"`
		///    - `"fjeiwoj,54;@=%<>#32"` (Strings that are not URL-safe are allowed.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="immutable_id")]
		public string Immutable_id { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution")]
		public string Institution { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="journal")]
		public string Journal { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Date and time representing when the entry was last modified.
		///
		///- **Type**: timestamp.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response unless the query parameter `response_fields` is present and does not include this property.
		///
		///- **Example**:
		///    - As part of JSON response format: `"2007-04-05T14:30:20Z"` (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public System.DateTimeOffset Last_modified { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public string Month { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public string Pages { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="school")]
		public string School { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public string Series { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The URL of the reference.
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.Length(1, 65536)]
		public string Url { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public string Volume { get; set; }
		
		/// <summary>
		/// Meaning of property matches the BiBTeX specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public string Year { get; set; }
	}
	
	/// <summary>
	/// errors are not allowed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceResponseMany
	{
		
		/// <summary>
		/// List of unique OPTIMADE references entry resource objects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ReferenceResource[] Data { get; set; }
		
		/// <summary>
		/// A list of unique errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="included")]
		public EntryResource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// errors are not allowed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceResponseOne
	{
		
		/// <summary>
		/// A single references entry resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ReferenceResource Data { get; set; }
		
		/// <summary>
		/// A list of unique errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="included")]
		public EntryResource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// A list describing the species of the sites of this structure.
	///
	///Species can represent pure chemical elements, virtual-crystal atoms representing a
	///statistical occupation of a given site by multiple chemical elements, and/or a
	///location to which there are attached atoms, i.e., atoms whose precise location are
	///unknown beyond that they are attached to that position (frequently used to indicate
	///hydrogen atoms attached to another element, e.g., a carbon with three attached
	///hydrogens might represent a methyl group, -CH3).
	///
	///- **Examples**:
	///    - `[ {"name": "Ti", "chemical_symbols": ["Ti"], "concentration": [1.0]} ]`: any site with this species is occupied by a Ti atom.
	///    - `[ {"name": "Ti", "chemical_symbols": ["Ti", "vacancy"], "concentration": [0.9, 0.1]} ]`: any site with this species is occupied by a Ti atom with 90 % probability, and has a vacancy with 10 % probability.
	///    - `[ {"name": "BaCa", "chemical_symbols": ["vacancy", "Ba", "Ca"], "concentration": [0.05, 0.45, 0.5], "mass": [0.0, 137.327, 40.078]} ]`: any site with this species is occupied by a Ba atom with 45 % probability, a Ca atom with 50 % probability, and by a vacancy with 5 % probability. The mass of this site is (on average) 88.5 a.m.u.
	///    - `[ {"name": "C12", "chemical_symbols": ["C"], "concentration": [1.0], "mass": [12.0]} ]`: any site with this species is occupied by a carbon isotope with mass 12.
	///    - `[ {"name": "C13", "chemical_symbols": ["C"], "concentration": [1.0], "mass": [13.0]} ]`: any site with this species is occupied by a carbon isotope with mass 13.
	///    - `[ {"name": "CH3", "chemical_symbols": ["C"], "concentration": [1.0], "attached": ["H"], "nattached": [3]} ]`: any site with this species is occupied by a methyl group, -CH3, which is represented without specifying precise positions of the hydrogen atoms.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Species
	{
		
		/// <summary>
		/// If provided MUST be a list of length 1 or more of strings of chemical symbols for the elements attached to this site, or "X" for a non-chemical element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attached")]
		public string[] Attached { get; set; }
		
		/// <summary>
		/// MUST be a list of strings of all chemical elements composing this species. Each item of the list MUST be one of the following:
		///
		///- a valid chemical-element name, or
		///- the special value `"X"` to represent a non-chemical element, or
		///- the special value `"vacancy"` to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the `concentration` list, see below).
		///
		///If any one entry in the `species` list has a `chemical_symbols` list that is longer than 1 element, the correct flag MUST be set in the list `structure_features`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chemical_symbols")]
		public string[] Chemical_symbols { get; set; }
		
		/// <summary>
		/// MUST be a list of floats, with same length as `chemical_symbols`. The numbers represent the relative concentration of the corresponding chemical symbol in this species. The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories:
		///
		///- Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations `1/3` and `2/3`, the concentration might look something like `[0.33333333333, 0.66666666666]`. If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one.
		///- Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data.
		///
		///Note that concentrations are uncorrelated between different site (even of the same species).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="concentration")]
		public double[] Concentration { get; set; }
		
		/// <summary>
		/// If present MUST be a list of floats expressed in a.m.u.
		///Elements denoting vacancies MUST have masses equal to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mass")]
		public double[] Mass { get; set; }
		
		/// <summary>
		/// Gives the name of the species; the **name** value MUST be unique in the `species` list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If provided MUST be a list of length 1 or more of integers indicating the number of attached atoms of the kind specified in the value of the :field:`attached` key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nattached")]
		public int[] Nattached { get; set; }
		
		/// <summary>
		/// Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database.
		///
		///Note: With regards to "source database", we refer to the immediate source being queried via the OPTIMADE API implementation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_name")]
		public string Original_name { get; set; }
	}
	
	/// <summary>
	/// Enumeration of structure_features values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StructureFeatures
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disorder = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		implicit_atoms = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		site_attachments = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		assemblies = 3,
	}
	
	/// <summary>
	/// Representing a structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructureResource
	{
		
		/// <summary>
		/// This class contains the Field for the attributes used to represent a structure, e.g. unit cell, atoms, positions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public StructureResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// An entry's ID as defined in section Definition of Terms.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response.
		///
		///- **Examples**:
		///    - `"db/1234567"`
		///    - `"cod/2000000"`
		///    - `"cod/2000000@1234567"`
		///    - `"nomad/L1234567890"`
		///    - `"42"`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// a links object containing links related to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceLinks Links { get; set; }
		
		/// <summary>
		/// a meta object containing non-standard meta-information about a resource that can not be represented as an attribute or relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// A dictionary containing references to other entries according to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).
		///The OPTIONAL human-readable description of the relationship MAY be provided in the `description` field inside the `meta` dictionary of the JSON API resource identifier object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public EntryRelationships Relationships { get; set; }
		
		/// <summary>
		/// The name of the type of an entry.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response.
		///    - MUST be an existing entry type.
		///    - The entry of type `<type>` and ID `<id>` MUST be returned in response to a request for `/<type>/<id>` under the versioned base URL.
		///
		///- **Examples**:
		///    - `"structures"`
		/// Required
		/// Pattern: ^structures$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^structures$")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// This class contains the Field for the attributes used to represent a structure, e.g. unit cell, atoms, positions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructureResourceAttributes
	{
		
		/// <summary>
		/// A description of groups of sites that are statistically correlated.
		///
		///- **Type**: list of dictionary with keys:
		///    - `sites_in_groups`: list of list of integers (REQUIRED)
		///    - `group_probabilities`: list of floats (REQUIRED)
		///
		///- **Requirements/Conventions**:
		///    - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.
		///    - **Query**: Support for queries on this property is OPTIONAL.
		///        If supported, filters MAY support only a subset of comparison operators.
		///    - The property SHOULD be `null` for entries that have no partial occupancies.
		///    - If present, the correct flag MUST be set in the list `structure_features`.
		///    - Client implementations MUST check its presence (as its presence changes the interpretation of the structure).
		///    - If present, it MUST be a list of dictionaries, each of which represents an assembly and MUST have the following two keys:
		///        - **sites_in_groups**: Index of the sites (0-based) that belong to each group for each assembly.
		///
		///            Example: `[[1], [2]]`: two groups, one with the second site, one with the third.
		///            Example: `[[1,2], [3]]`: one group with the second and third site, one with the fourth.
		///
		///        - **group_probabilities**: Statistical probability of each group. It MUST have the same length as `sites_in_groups`.
		///            It SHOULD sum to one.
		///            See below for examples of how to specify the probability of the occurrence of a vacancy.
		///            The possible reasons for the values not to sum to one are the same as already specified above for the `concentration` of each `species`.
		///
		///    - If a site is not present in any group, it means that it is present with 100 % probability (as if no assembly was specified).
		///    - A site MUST NOT appear in more than one group.
		///
		///- **Examples** (for each entry of the assemblies list):
		///    - `{"sites_in_groups": [[0], [1]], "group_probabilities: [0.3, 0.7]}`: the first site and the second site never occur at the same time in the unit cell.
		///        Statistically, 30 % of the times the first site is present, while 70 % of the times the second site is present.
		///    - `{"sites_in_groups": [[1,2], [3]], "group_probabilities: [0.3, 0.7]}`: the second and third site are either present together or not present; they form the first group of atoms for this assembly.
		///        The second group is formed by the fourth site.
		///        Sites of the first group (the second and the third) are never present at the same time as the fourth site.
		///        30 % of times sites 1 and 2 are present (and site 3 is absent); 70 % of times site 3 is present (and sites 1 and 2 are absent).
		///
		///- **Notes**:
		///    - Assemblies are essential to represent, for instance, the situation where an atom can statistically occupy two different positions (sites).
		///
		///    - By defining groups, it is possible to represent, e.g., the case where a functional molecule (and not just one atom) is either present or absent (or the case where it it is present in two conformations)
		///
		///    - Considerations on virtual alloys and on vacancies: In the special case of a virtual alloy, these specifications allow two different, equivalent ways of specifying them.
		///        For instance, for a site at the origin with 30 % probability of being occupied by Si, 50 % probability of being occupied by Ge, and 20 % of being a vacancy, the following two representations are possible:
		///
		///        - Using a single species:
		///            ```json
		///            {
		///              "cartesian_site_positions": [[0,0,0]],
		///              "species_at_sites": ["SiGe-vac"],
		///              "species": [
		///              {
		///                "name": "SiGe-vac",
		///                "chemical_symbols": ["Si", "Ge", "vacancy"],
		///                "concentration": [0.3, 0.5, 0.2]
		///              }
		///              ]
		///              // ...
		///            }
		///            ```
		///
		///        - Using multiple species and the assemblies:
		///            ```json
		///            {
		///              "cartesian_site_positions": [ [0,0,0], [0,0,0], [0,0,0] ],
		///              "species_at_sites": ["Si", "Ge", "vac"],
		///              "species": [
		///                { "name": "Si", "chemical_symbols": ["Si"], "concentration": [1.0] },
		///                { "name": "Ge", "chemical_symbols": ["Ge"], "concentration": [1.0] },
		///                { "name": "vac", "chemical_symbols": ["vacancy"], "concentration": [1.0] }
		///              ],
		///              "assemblies": [
		///                {
		///              "sites_in_groups": [ [0], [1], [2] ],
		///              "group_probabilities": [0.3, 0.5, 0.2]
		///                }
		///              ]
		///              // ...
		///            }
		///            ```
		///
		///    - It is up to the database provider to decide which representation to use, typically depending on the internal format in which the structure is stored.
		///        However, given a structure identified by a unique ID, the API implementation MUST always provide the same representation for it.
		///
		///    - The probabilities of occurrence of different assemblies are uncorrelated.
		///        So, for instance in the following case with two assemblies:
		///        ```json
		///        {
		///          "assemblies": [
		///            {
		///              "sites_in_groups": [ [0], [1] ],
		///              "group_probabilities": [0.2, 0.8],
		///            },
		///            {
		///              "sites_in_groups": [ [2], [3] ],
		///              "group_probabilities": [0.3, 0.7]
		///            }
		///          ]
		///        }
		///        ```
		///
		///        Site 0 is present with a probability of 20 % and site 1 with a probability of 80 %. These two sites are correlated (either site 0 or 1 is present). Similarly, site 2 is present with a probability of 30 % and site 3 with a probability of 70 %.
		///        These two sites are correlated (either site 2 or 3 is present).
		///        However, the presence or absence of sites 0 and 1 is not correlated with the presence or absence of sites 2 and 3 (in the specific example, the pair of sites (0, 2) can occur with 0.2*0.3 = 6 % probability; the pair (0, 3) with 0.2*0.7 = 14 % probability; the pair (1, 2) with 0.8*0.3 = 24 % probability; and the pair (1, 3) with 0.8*0.7 = 56 % probability).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assemblies")]
		public Assembly[] Assemblies { get; set; }
		
		/// <summary>
		/// Cartesian positions of each site in the structure.
		///A site is usually used to describe positions of atoms; what atoms can be encountered at a given site is conveyed by the `species_at_sites` property, and the species themselves are described in the `species` property.
		///
		///- **Type**: list of list of floats
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: Support for queries on this property is OPTIONAL.
		///      If supported, filters MAY support only a subset of comparison operators.
		///    - It MUST be a list of length equal to the number of sites in the structure, where every element is a list of the three Cartesian coordinates of a site expressed as float values in the unit angstrom (Å).
		///    - An entry MAY have multiple sites at the same Cartesian position (for a relevant use of this, see e.g., the property `assemblies`).
		///
		///- **Examples**:
		///    - `[[0,0,0],[0,0,2]]` indicates a structure with two sites, one sitting at the origin and one along the (positive) *z*-axis, 2 Å away from the origin.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cartesian_site_positions")]
		public string[] Cartesian_site_positions { get; set; }
		
		/// <summary>
		/// The anonymous formula is the `chemical_formula_reduced`, but where the elements are instead first ordered by their chemical proportion number, and then, in order left to right, replaced by anonymous symbols A, B, C, ..., Z, Aa, Ba, ..., Za, Ab, Bb, ... and so on.
		///
		///- **Type**: string
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property.
		///      However, support for filters using partial string matching with this property is OPTIONAL (i.e., BEGINS WITH, ENDS WITH, and CONTAINS).
		///
		///- **Examples**:
		///    - `"A2B"`
		///    - `"A42B42C16D12E10F9G5"`
		///
		///- **Querying**:
		///    - A filter that matches an exactly given formula is `chemical_formula_anonymous="A2B"`.
		/// Required
		/// Pattern: ^([A-Z][a-z]?\d*)*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chemical_formula_anonymous")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([A-Z][a-z]?\d*)*$")]
		public string Chemical_formula_anonymous { get; set; }
		
		/// <summary>
		/// The chemical formula for a structure as a string in a form chosen by the API implementation.
		///
		///- **Type**: string
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - The chemical formula is given as a string consisting of properly capitalized element symbols followed by integers or decimal numbers, balanced parentheses, square, and curly brackets `(`,`)`, `[`,`]`, `{`, `}`, commas, the `+`, `-`, `:` and `=` symbols. The parentheses are allowed to be followed by a number. Spaces are allowed anywhere except within chemical symbols. The order of elements and any groupings indicated by parentheses or brackets are chosen freely by the API implementation.
		///    - The string SHOULD be arithmetically consistent with the element ratios in the `chemical_formula_reduced` property.
		///    - It is RECOMMENDED, but not mandatory, that symbols, parentheses and brackets, if used, are used with the meanings prescribed by [IUPAC's Nomenclature of Organic Chemistry](https://www.qmul.ac.uk/sbcs/iupac/bibliog/blue.html).
		///
		///- **Examples**:
		///    - `"(H2O)2 Na"`
		///    - `"NaCl"`
		///    - `"CaCO3"`
		///    - `"CCaO3"`
		///    - `"(CH3)3N+ - [CH2]2-OH = Me3N+ - CH2 - CH2OH"`
		///
		///- **Query examples**:
		///    - Note: the free-form nature of this property is likely to make queries on it across different databases inconsistent.
		///    - A filter that matches an exactly given formula: `chemical_formula_descriptive="(H2O)2 Na"`.
		///    - A filter that does a partial match: `chemical_formula_descriptive CONTAINS "H2O"`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chemical_formula_descriptive")]
		public string Chemical_formula_descriptive { get; set; }
		
		/// <summary>
		/// The chemical formula for a structure in [Hill form](https://dx.doi.org/10.1021/ja02046a005) with element symbols followed by integer chemical proportion numbers. The proportion number MUST be omitted if it is 1.
		///
		///- **Type**: string
		///
		///- **Requirements/Conventions**:
		///    - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.
		///    - **Query**: Support for queries on this property is OPTIONAL.
		///      If supported, only a subset of the filter features MAY be supported.
		///    - The overall scale factor of the chemical proportions is chosen such that the resulting values are integers that indicate the most chemically relevant unit of which the system is composed.
		///      For example, if the structure is a repeating unit cell with four hydrogens and four oxygens that represents two hydroperoxide molecules, `chemical_formula_hill` is `"H2O2"` (i.e., not `"HO"`, nor `"H4O4"`).
		///    - If the chemical insight needed to ascribe a Hill formula to the system is not present, the property MUST be handled as unset.
		///    - Element symbols MUST have proper capitalization (e.g., `"Si"`, not `"SI"` for "silicon").
		///    - Elements MUST be placed in [Hill order](https://dx.doi.org/10.1021/ja02046a005), followed by their integer chemical proportion number.
		///      Hill order means: if carbon is present, it is placed first, and if also present, hydrogen is placed second.
		///      After that, all other elements are ordered alphabetically.
		///      If carbon is not present, all elements are ordered alphabetically.
		///    - If the system has sites with partial occupation and the total occupations of each element do not all sum up to integers, then the Hill formula SHOULD be handled as unset.
		///    - No spaces or separators are allowed.
		///
		///- **Examples**:
		///    - `"H2O2"`
		///
		///- **Query examples**:
		///    - A filter that matches an exactly given formula is `chemical_formula_hill="H2O2"`.
		/// Pattern: ^([A-Z][a-z]?\d*)*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chemical_formula_hill")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([A-Z][a-z]?\d*)*$")]
		public string Chemical_formula_hill { get; set; }
		
		/// <summary>
		/// The reduced chemical formula for a structure as a string with element symbols and integer chemical proportion numbers.
		///The proportion number MUST be omitted if it is 1.
		///
		///- **Type**: string
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property.
		///      However, support for filters using partial string matching with this property is OPTIONAL (i.e., BEGINS WITH, ENDS WITH, and CONTAINS).
		///      Intricate queries on formula components are instead suggested to be formulated using set-type filter operators on the multi valued `elements` and `elements_ratios` properties.
		///    - Element symbols MUST have proper capitalization (e.g., `"Si"`, not `"SI"` for "silicon").
		///    - Elements MUST be placed in alphabetical order, followed by their integer chemical proportion number.
		///    - For structures with no partial occupation, the chemical proportion numbers are the smallest integers for which the chemical proportion is exactly correct.
		///    - For structures with partial occupation, the chemical proportion numbers are integers that within reasonable approximation indicate the correct chemical proportions. The precise details of how to perform the rounding is chosen by the API implementation.
		///    - No spaces or separators are allowed.
		///
		///- **Examples**:
		///    - `"H2NaO"`
		///    - `"ClNa"`
		///    - `"CCaO3"`
		///
		///- **Query examples**:
		///    - A filter that matches an exactly given formula is `chemical_formula_reduced="H2NaO"`.
		/// Required
		/// Pattern: ^([A-Z][a-z]?\d*)*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chemical_formula_reduced")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([A-Z][a-z]?\d*)*$")]
		public string Chemical_formula_reduced { get; set; }
		
		/// <summary>
		/// List of three integers.
		///For each of the three directions indicated by the three lattice vectors (see property `lattice_vectors`), this list indicates if the direction is periodic (value `1`) or non-periodic (value `0`).
		///Note: the elements in this list each refer to the direction of the corresponding entry in `lattice_vectors` and *not* the Cartesian x, y, z directions.
		///
		///- **Type**: list of integers.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: Support for queries on this property is OPTIONAL.
		///    - MUST be a list of length 3.
		///    - Each integer element MUST assume only the value 0 or 1.
		///
		///- **Examples**:
		///    - For a molecule: `[0, 0, 0]`
		///    - For a wire along the direction specified by the third lattice vector: `[0, 0, 1]`
		///    - For a 2D surface/slab, periodic on the plane defined by the first and third lattice vectors: `[1, 0, 1]`
		///    - For a bulk 3D system: `[1, 1, 1]`
		/// Required
		/// Minimum items: 3
		/// Maximum items: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimension_types")]
		[System.ComponentModel.DataAnnotations.Length(3, 3)]
		public Periodicity[] Dimension_types { get; set; }
		
		/// <summary>
		/// Symbols of the different elements present in the structure.
		///
		///- **Type**: list of strings.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - The strings are the chemical symbols, i.e., either a single uppercase letter or an uppercase letter followed by a number of lowercase letters.
		///    - The order MUST be alphabetical.
		///    - MUST refer to the same elements in the same order, and therefore be of the same length, as `elements_ratios`, if the latter is provided.
		///    - Note: This property SHOULD NOT contain the string "X" to indicate non-chemical elements or "vacancy" to indicate vacancies (in contrast to the field `chemical_symbols` for the `species` property).
		///
		///- **Examples**:
		///    - `["Si"]`
		///    - `["Al","O","Si"]`
		///
		///- **Query examples**:
		///    - A filter that matches all records of structures that contain Si, Al **and** O, and possibly other elements: `elements HAS ALL "Si", "Al", "O"`.
		///    - To match structures with exactly these three elements, use `elements HAS ALL "Si", "Al", "O" AND elements LENGTH 3`.
		///    - Note: length queries on this property can be equivalently formulated by filtering on the `nelements`_ property directly.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public string[] Elements { get; set; }
		
		/// <summary>
		/// Relative proportions of different elements in the structure.
		///
		///- **Type**: list of floats
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - Composed by the proportions of elements in the structure as a list of floating point numbers.
		///    - The sum of the numbers MUST be 1.0 (within floating point accuracy)
		///    - MUST refer to the same elements in the same order, and therefore be of the same length, as `elements`, if the latter is provided.
		///
		///- **Examples**:
		///    - `[1.0]`
		///    - `[0.3333333333333333, 0.2222222222222222, 0.4444444444444444]`
		///
		///- **Query examples**:
		///    - Note: Useful filters can be formulated using the set operator syntax for correlated values.
		///      However, since the values are floating point values, the use of equality comparisons is generally inadvisable.
		///    - OPTIONAL: a filter that matches structures where approximately 1/3 of the atoms in the structure are the element Al is: `elements:elements_ratios HAS ALL "Al":>0.3333, "Al":<0.3334`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elements_ratios")]
		public double[] Elements_ratios { get; set; }
		
		/// <summary>
		/// The entry's immutable ID (e.g., an UUID). This is important for databases having preferred IDs that point to "the latest version" of a record, but still offer access to older variants. This ID maps to the version-specific record, in case it changes in the future.
		///
		///- **Type**: string.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: OPTIONAL support in implementations, i.e., MAY be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///
		///- **Examples**:
		///    - `"8bd3e750-b477-41a0-9b11-3a799f21b44f"`
		///    - `"fjeiwoj,54;@=%<>#32"` (Strings that are not URL-safe are allowed.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="immutable_id")]
		public string Immutable_id { get; set; }
		
		/// <summary>
		/// Date and time representing when the entry was last modified.
		///
		///- **Type**: timestamp.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - **Response**: REQUIRED in the response unless the query parameter `response_fields` is present and does not include this property.
		///
		///- **Example**:
		///    - As part of JSON response format: `"2007-04-05T14:30:20Z"` (i.e., encoded as an [RFC 3339 Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public System.Nullable<System.DateTimeOffset> Last_modified { get; set; }
		
		/// <summary>
		/// The three lattice vectors in Cartesian coordinates, in ångström (Å).
		///
		///- **Type**: list of list of floats or unknown values.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: Support for queries on this property is OPTIONAL.
		///      If supported, filters MAY support only a subset of comparison operators.
		///    - MUST be a list of three vectors *a*, *b*, and *c*, where each of the vectors MUST BE a list of the vector's coordinates along the x, y, and z Cartesian coordinates.
		///      (Therefore, the first index runs over the three lattice vectors and the second index runs over the x, y, z Cartesian coordinates).
		///    - For databases that do not define an absolute Cartesian system (e.g., only defining the length and angles between vectors), the first lattice vector SHOULD be set along *x* and the second on the *xy*-plane.
		///    - MUST always contain three vectors of three coordinates each, independently of the elements of property `dimension_types`.
		///      The vectors SHOULD by convention be chosen so the determinant of the `lattice_vectors` matrix is different from zero.
		///      The vectors in the non-periodic directions have no significance beyond fulfilling these requirements.
		///    - The coordinates of the lattice vectors of non-periodic dimensions (i.e., those dimensions for which `dimension_types` is `0`) MAY be given as a list of all `null` values.
		///        If a lattice vector contains the value `null`, all coordinates of that lattice vector MUST be `null`.
		///
		///- **Examples**:
		///    - `[[4.0,0.0,0.0],[0.0,4.0,0.0],[0.0,1.0,4.0]]` represents a cell, where the first vector is `(4, 0, 0)`, i.e., a vector aligned along the `x` axis of length 4 Å; the second vector is `(0, 4, 0)`; and the third vector is `(0, 1, 4)`.
		/// Required
		/// Minimum items: 3
		/// Maximum items: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lattice_vectors")]
		[System.ComponentModel.DataAnnotations.Length(3, 3)]
		public string[] Lattice_vectors { get; set; }
		
		/// <summary>
		/// Number of different elements in the structure as an integer.
		///
		///- **Type**: integer
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - MUST be equal to the lengths of the list properties `elements` and `elements_ratios`, if they are provided.
		///
		///- **Examples**:
		///    - `3`
		///
		///- **Querying**:
		///    - Note: queries on this property can equivalently be formulated using `elements LENGTH`.
		///    - A filter that matches structures that have exactly 4 elements: `nelements=4`.
		///    - A filter that matches structures that have between 2 and 7 elements: `nelements>=2 AND nelements<=7`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nelements")]
		public System.Nullable<System.Int32> Nelements { get; set; }
		
		/// <summary>
		/// An integer specifying the number of periodic dimensions in the structure, equivalent to the number of non-zero entries in `dimension_types`.
		///
		///- **Type**: integer
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///    - The integer value MUST be between 0 and 3 inclusive and MUST be equal to the sum of the items in the `dimension_types` property.
		///    - This property only reflects the treatment of the lattice vectors provided for the structure, and not any physical interpretation of the dimensionality of its contents.
		///
		///- **Examples**:
		///    - `2` should be indicated in cases where `dimension_types` is any of `[1, 1, 0]`, `[1, 0, 1]`, `[0, 1, 1]`.
		///
		///- **Query examples**:
		///    - Match only structures with exactly 3 periodic dimensions: `nperiodic_dimensions=3`
		///    - Match all structures with 2 or fewer periodic dimensions: `nperiodic_dimensions<=2`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nperiodic_dimensions")]
		public System.Nullable<System.Int32> Nperiodic_dimensions { get; set; }
		
		/// <summary>
		/// An integer specifying the length of the `cartesian_site_positions` property.
		///
		///- **Type**: integer
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: MUST be a queryable property with support for all mandatory filter features.
		///
		///- **Examples**:
		///    - `42`
		///
		///- **Query examples**:
		///    - Match only structures with exactly 4 sites: `nsites=4`
		///    - Match structures that have between 2 and 7 sites: `nsites>=2 AND nsites<=7`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nsites")]
		public System.Nullable<System.Int32> Nsites { get; set; }
		
		/// <summary>
		/// A list describing the species of the sites of this structure.
		///Species can represent pure chemical elements, virtual-crystal atoms representing a statistical occupation of a given site by multiple chemical elements, and/or a location to which there are attached atoms, i.e., atoms whose precise location are unknown beyond that they are attached to that position (frequently used to indicate hydrogen atoms attached to another element, e.g., a carbon with three attached hydrogens might represent a methyl group, -CH3).
		///
		///- **Type**: list of dictionary with keys:
		///    - `name`: string (REQUIRED)
		///    - `chemical_symbols`: list of strings (REQUIRED)
		///    - `concentration`: list of float (REQUIRED)
		///    - `attached`: list of strings (REQUIRED)
		///    - `nattached`: list of integers (OPTIONAL)
		///    - `mass`: list of floats (OPTIONAL)
		///    - `original_name`: string (OPTIONAL).
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: Support for queries on this property is OPTIONAL.
		///        If supported, filters MAY support only a subset of comparison operators.
		///    - Each list member MUST be a dictionary with the following keys:
		///        - **name**: REQUIRED; gives the name of the species; the **name** value MUST be unique in the `species` list;
		///        - **chemical_symbols**: REQUIRED; MUST be a list of strings of all chemical elements composing this species.
		///          Each item of the list MUST be one of the following:
		///            - a valid chemical-element symbol, or
		///            - the special value `"X"` to represent a non-chemical element, or
		///            - the special value `"vacancy"` to represent that this site has a non-zero probability of having a vacancy (the respective probability is indicated in the `concentration` list, see below).
		///
		///          If any one entry in the `species` list has a `chemical_symbols` list that is longer than 1 element, the correct flag MUST be set in the list `structure_features`.
		///
		///        - **concentration**: REQUIRED; MUST be a list of floats, with same length as `chemical_symbols`.
		///          The numbers represent the relative concentration of the corresponding chemical symbol in this species.
		///          The numbers SHOULD sum to one. Cases in which the numbers do not sum to one typically fall only in the following two categories:
		///
		///            - Numerical errors when representing float numbers in fixed precision, e.g. for two chemical symbols with concentrations `1/3` and `2/3`, the concentration might look something like `[0.33333333333, 0.66666666666]`. If the client is aware that the sum is not one because of numerical precision, it can renormalize the values so that the sum is exactly one.
		///            - Experimental errors in the data present in the database. In this case, it is the responsibility of the client to decide how to process the data.
		///
		///            Note that concentrations are uncorrelated between different sites (even of the same species).
		///
		///        - **attached**: OPTIONAL; if provided MUST be a list of length 1 or more of strings of chemical symbols for the elements attached to this site, or "X" for a non-chemical element.
		///
		///        - **nattached**: OPTIONAL; if provided MUST be a list of length 1 or more of integers indicating the number of attached atoms of the kind specified in the value of the `attached` key.
		///
		///          The implementation MUST include either both or none of the `attached` and `nattached` keys, and if they are provided, they MUST be of the same length.
		///          Furthermore, if they are provided, the `structure_features` property MUST include the string `site_attachments`.
		///
		///        - **mass**: OPTIONAL. If present MUST be a list of floats, with the same length as `chemical_symbols`, providing element masses expressed in a.m.u.
		///          Elements denoting vacancies MUST have masses equal to 0.
		///
		///        - **original_name**: OPTIONAL. Can be any valid Unicode string, and SHOULD contain (if specified) the name of the species that is used internally in the source database.
		///
		///          Note: With regards to "source database", we refer to the immediate source being queried via the OPTIMADE API implementation.
		///
		///          The main use of this field is for source databases that use species names, containing characters that are not allowed (see description of the list property `species_at_sites`).
		///
		///    - For systems that have only species formed by a single chemical symbol, and that have at most one species per chemical symbol, SHOULD use the chemical symbol as species name (e.g., `"Ti"` for titanium, `"O"` for oxygen, etc.)
		///      However, note that this is OPTIONAL, and client implementations MUST NOT assume that the key corresponds to a chemical symbol, nor assume that if the species name is a valid chemical symbol, that it represents a species with that chemical symbol.
		///      This means that a species `{"name": "C", "chemical_symbols": ["Ti"], "concentration": [1.0]}` is valid and represents a titanium species (and *not* a carbon species).
		///    - It is NOT RECOMMENDED that a structure includes species that do not have at least one corresponding site.
		///
		///- **Examples**:
		///    - `[ {"name": "Ti", "chemical_symbols": ["Ti"], "concentration": [1.0]} ]`: any site with this species is occupied by a Ti atom.
		///    - `[ {"name": "Ti", "chemical_symbols": ["Ti", "vacancy"], "concentration": [0.9, 0.1]} ]`: any site with this species is occupied by a Ti atom with 90 % probability, and has a vacancy with 10 % probability.
		///    - `[ {"name": "BaCa", "chemical_symbols": ["vacancy", "Ba", "Ca"], "concentration": [0.05, 0.45, 0.5], "mass": [0.0, 137.327, 40.078]} ]`: any site with this species is occupied by a Ba atom with 45 % probability, a Ca atom with 50 % probability, and by a vacancy with 5 % probability. The mass of this site is (on average) 88.5 a.m.u.
		///    - `[ {"name": "C12", "chemical_symbols": ["C"], "concentration": [1.0], "mass": [12.0]} ]`: any site with this species is occupied by a carbon isotope with mass 12.
		///    - `[ {"name": "C13", "chemical_symbols": ["C"], "concentration": [1.0], "mass": [13.0]} ]`: any site with this species is occupied by a carbon isotope with mass 13.
		///    - `[ {"name": "CH3", "chemical_symbols": ["C"], "concentration": [1.0], "attached": ["H"], "nattached": [3]} ]`: any site with this species is occupied by a methyl group, -CH3, which is represented without specifying precise positions of the hydrogen atoms.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="species")]
		public Species[] Species { get; set; }
		
		/// <summary>
		/// Name of the species at each site (where values for sites are specified with the same order of the property `cartesian_site_positions`).
		///The properties of the species are found in the property `species`.
		///
		///- **Type**: list of strings.
		///
		///- **Requirements/Conventions**:
		///    - **Support**: SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.
		///    - **Query**: Support for queries on this property is OPTIONAL.
		///      If supported, filters MAY support only a subset of comparison operators.
		///    - MUST have length equal to the number of sites in the structure (first dimension of the list property `cartesian_site_positions`).
		///    - Each species name mentioned in the `species_at_sites` list MUST be described in the list property `species` (i.e. for each value in the `species_at_sites` list there MUST exist exactly one dictionary in the `species` list with the `name` attribute equal to the corresponding `species_at_sites` value).
		///    - Each site MUST be associated only to a single species.
		///      **Note**: However, species can represent mixtures of atoms, and multiple species MAY be defined for the same chemical element.
		///      This latter case is useful when different atoms of the same type need to be grouped or distinguished, for instance in simulation codes to assign different initial spin states.
		///
		///- **Examples**:
		///    - `["Ti","O2"]` indicates that the first site is hosting a species labeled `"Ti"` and the second a species labeled `"O2"`.
		///    - `["Ac", "Ac", "Ag", "Ir"]` indicating the first two sites contains the `"Ac"` species, while the third and fourth sites contain the `"Ag"` and `"Ir"` species, respectively.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="species_at_sites")]
		public string[] Species_at_sites { get; set; }
		
		/// <summary>
		/// A list of strings that flag which special features are used by the structure.
		///
		///- **Type**: list of strings
		///
		///- **Requirements/Conventions**:
		///    - **Support**: MUST be supported by all implementations, MUST NOT be `null`.
		///    - **Query**: MUST be a queryable property.
		///    Filters on the list MUST support all mandatory HAS-type queries.
		///    Filter operators for comparisons on the string components MUST support equality, support for other comparison operators are OPTIONAL.
		///    - MUST be an empty list if no special features are used.
		///    - MUST be sorted alphabetically.
		///    - If a special feature listed below is used, the list MUST contain the corresponding string.
		///    - If a special feature listed below is not used, the list MUST NOT contain the corresponding string.
		///    - **List of strings used to indicate special structure features**:
		///        - `disorder`: this flag MUST be present if any one entry in the `species` list has a `chemical_symbols` list that is longer than 1 element.
		///        - `implicit_atoms`: this flag MUST be present if the structure contains atoms that are not assigned to sites via the property `species_at_sites` (e.g., because their positions are unknown).
		///           When this flag is present, the properties related to the chemical formula will likely not match the type and count of atoms represented by the `species_at_sites`, `species` and `assemblies` properties.
		///        - `site_attachments`: this flag MUST be present if any one entry in the `species` list includes `attached` and `nattached`.
		///        - `assemblies`: this flag MUST be present if the property `assemblies` is present.
		///
		///- **Examples**: A structure having implicit atoms and using assemblies: `["assemblies", "implicit_atoms"]`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="structure_features")]
		public StructureFeatures[] Structure_features { get; set; }
	}
	
	/// <summary>
	/// errors are not allowed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructureResponseMany
	{
		
		/// <summary>
		/// List of unique OPTIMADE structures entry resource objects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StructureResource[] Data { get; set; }
		
		/// <summary>
		/// A list of unique errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="included")]
		public EntryResource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// errors are not allowed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructureResponseOne
	{
		
		/// <summary>
		/// A single structures entry resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StructureResource Data { get; set; }
		
		/// <summary>
		/// A list of unique errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="included")]
		public EntryResource[] Included { get; set; }
		
		/// <summary>
		/// Information about the JSON API used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonapi")]
		public JsonApi Jsonapi { get; set; }
		
		/// <summary>
		/// Links associated with the primary data or errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ToplevelLinks Links { get; set; }
		
		/// <summary>
		/// A meta object containing non-standard information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ResponseMeta Meta { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Info
		/// Get_info_info_get info
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<InfoResponse> Get_info_info_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InfoResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Entry Info
		/// Get_entry_info_info__entry__get info/{entry}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<EntryInfoResponse> Get_entry_info_info__entry__getAsync(string entry, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info/"+ (entry==null? "" : System.Uri.EscapeDataString(entry));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EntryInfoResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Links
		/// Get_links_links_get links
		/// </summary>
		/// <param name="filter">A filter string, in the format described in section API Filtering Format Specification of the specification.</param>
		/// <param name="response_format">The output format requested (see section Response Format).
		///Defaults to the format string 'json', which specifies the standard output format described in this specification.
		///Example: `http://example.com/v1/structures?response_format=xml`</param>
		/// <param name="email_address">An email address of the user making the request.
		///The email SHOULD be that of a person and not an automatic system.
		///Example: `http://example.com/v1/structures?email_address=user@example.com`</param>
		/// <param name="response_fields">A comma-delimited set of fields to be provided in the output.
		///If provided, these fields MUST be returned along with the REQUIRED fields.
		///Other OPTIONAL fields MUST NOT be returned when this parameter is present.
		///Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`</param>
		/// <param name="sort">If supporting sortable queries, an implementation MUST use the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).
		///
		///An implementation MAY support multiple sort fields for a single query.
		///If it does, it again MUST conform to the JSON API 1.0 specification.
		///
		///If an implementation supports sorting for an entry listing endpoint, then the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>` in its `data.properties.<fieldname>` response value that can be used for sorting, the key `sortable` with value `true`.
		///If a field name under an entry listing endpoint supporting sorting cannot be used for sorting, the server MUST either leave out the `sortable` key or set it equal to `false` for the specific field name.
		///The set of field names, with `sortable` equal to `true` are allowed to be used in the "sort fields" list according to its definition in the JSON API 1.0 specification.
		///The field `sortable` is in addition to each property description and other OPTIONAL fields.
		///An example is shown in the section Entry Listing Info Endpoints.</param>
		/// <param name="page_limit">Sets a numerical limit on the number of entries returned.
		///See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).
		///The API implementation MUST return no more than the number specified.
		///It MAY return fewer.
		///The database MAY have a maximum limit and not accept larger numbers (in which case an error code -- 403 Forbidden -- MUST be returned).
		///The default limit value is up to the API implementation to decide.
		///Example: `http://example.com/optimade/v1/structures?page_limit=100`
		/// Minimum: 0
		// </param>
		/// <param name="page_offset">RECOMMENDED for use with _offset-based_ pagination: using `page_offset` and `page_limit` is RECOMMENDED.
		///Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.
		/// Minimum: 0
		// </param>
		/// <param name="page_number">RECOMMENDED for use with _page-based_ pagination: using `page_number` and `page_limit` is RECOMMENDED.
		///It is RECOMMENDED that the first page has number 1, i.e., that `page_number` is 1-based.
		///Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor` and `page_limit` is RECOMMENDED.
		/// Minimum: 0
		// </param>
		/// <param name="page_above">RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.
		///Example: Fetch up to 100 structures above sort-field value 4000 (in this example, server chooses to fetch results sorted by increasing `id`, so `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.
		/// Minimum: 0
		// </param>
		/// <param name="page_below">RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.
		/// Minimum: 0
		// </param>
		/// <param name="include">A server MAY implement the JSON API concept of returning [compound documents](https://jsonapi.org/format/1.0/#document-compound-documents) by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).
		///
		///All related resource objects MUST be returned as part of an array value for the top-level `included` field, see the section JSON Response Schema: Common Fields.
		///
		///The value of `include` MUST be a comma-separated list of "relationship paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).
		///If relationship paths are not supported, or a server is unable to identify a relationship path a `400 Bad Request` response MUST be made.
		///
		///The **default value** for `include` is `references`.
		///This means `references` entries MUST always be included under the top-level field `included` as default, since a server assumes if `include` is not specified by a client in the request, it is still specified as `include=references`.
		///Note, if a client explicitly specifies `include` and leaves out `references`, `references` resource objects MUST NOT be included under the top-level field `included`, as per the definition of `included`, see section JSON Response Schema: Common Fields.
		///
		///> **Note**: A query with the parameter `include` set to the empty string means no related resource objects are to be returned under the top-level field `included`.</param>
		/// <param name="api_hint">If the client provides the parameter, the value SHOULD have the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR is a minor version of the API. For example, if a client appends `api_hint=v1.0` to the query string, the hint provided is for major version 1 and minor version 0.</param>
		/// <returns>Successful Response</returns>
		public async Task<LinksResponse> Get_links_links_getAsync(string filter, string response_format, string email_address, string response_fields, string sort, int page_limit, int page_offset, int page_number, int page_cursor, int page_above, int page_below, string include, string api_hint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "links?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&response_format=" + (response_format==null? "" : System.Uri.EscapeDataString(response_format))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address))+"&response_fields=" + (response_fields==null? "" : System.Uri.EscapeDataString(response_fields))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&page_limit="+page_limit+"&page_offset="+page_offset+"&page_number="+page_number+"&page_cursor="+page_cursor+"&page_above="+page_above+"&page_below="+page_below+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&api_hint=" + (api_hint==null? "" : System.Uri.EscapeDataString(api_hint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LinksResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get References
		/// Get_references_references_get references
		/// </summary>
		/// <param name="filter">A filter string, in the format described in section API Filtering Format Specification of the specification.</param>
		/// <param name="response_format">The output format requested (see section Response Format).
		///Defaults to the format string 'json', which specifies the standard output format described in this specification.
		///Example: `http://example.com/v1/structures?response_format=xml`</param>
		/// <param name="email_address">An email address of the user making the request.
		///The email SHOULD be that of a person and not an automatic system.
		///Example: `http://example.com/v1/structures?email_address=user@example.com`</param>
		/// <param name="response_fields">A comma-delimited set of fields to be provided in the output.
		///If provided, these fields MUST be returned along with the REQUIRED fields.
		///Other OPTIONAL fields MUST NOT be returned when this parameter is present.
		///Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`</param>
		/// <param name="sort">If supporting sortable queries, an implementation MUST use the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).
		///
		///An implementation MAY support multiple sort fields for a single query.
		///If it does, it again MUST conform to the JSON API 1.0 specification.
		///
		///If an implementation supports sorting for an entry listing endpoint, then the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>` in its `data.properties.<fieldname>` response value that can be used for sorting, the key `sortable` with value `true`.
		///If a field name under an entry listing endpoint supporting sorting cannot be used for sorting, the server MUST either leave out the `sortable` key or set it equal to `false` for the specific field name.
		///The set of field names, with `sortable` equal to `true` are allowed to be used in the "sort fields" list according to its definition in the JSON API 1.0 specification.
		///The field `sortable` is in addition to each property description and other OPTIONAL fields.
		///An example is shown in the section Entry Listing Info Endpoints.</param>
		/// <param name="page_limit">Sets a numerical limit on the number of entries returned.
		///See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).
		///The API implementation MUST return no more than the number specified.
		///It MAY return fewer.
		///The database MAY have a maximum limit and not accept larger numbers (in which case an error code -- 403 Forbidden -- MUST be returned).
		///The default limit value is up to the API implementation to decide.
		///Example: `http://example.com/optimade/v1/structures?page_limit=100`
		/// Minimum: 0
		// </param>
		/// <param name="page_offset">RECOMMENDED for use with _offset-based_ pagination: using `page_offset` and `page_limit` is RECOMMENDED.
		///Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.
		/// Minimum: 0
		// </param>
		/// <param name="page_number">RECOMMENDED for use with _page-based_ pagination: using `page_number` and `page_limit` is RECOMMENDED.
		///It is RECOMMENDED that the first page has number 1, i.e., that `page_number` is 1-based.
		///Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor` and `page_limit` is RECOMMENDED.
		/// Minimum: 0
		// </param>
		/// <param name="page_above">RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.
		///Example: Fetch up to 100 structures above sort-field value 4000 (in this example, server chooses to fetch results sorted by increasing `id`, so `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.
		/// Minimum: 0
		// </param>
		/// <param name="page_below">RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.
		/// Minimum: 0
		// </param>
		/// <param name="include">A server MAY implement the JSON API concept of returning [compound documents](https://jsonapi.org/format/1.0/#document-compound-documents) by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).
		///
		///All related resource objects MUST be returned as part of an array value for the top-level `included` field, see the section JSON Response Schema: Common Fields.
		///
		///The value of `include` MUST be a comma-separated list of "relationship paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).
		///If relationship paths are not supported, or a server is unable to identify a relationship path a `400 Bad Request` response MUST be made.
		///
		///The **default value** for `include` is `references`.
		///This means `references` entries MUST always be included under the top-level field `included` as default, since a server assumes if `include` is not specified by a client in the request, it is still specified as `include=references`.
		///Note, if a client explicitly specifies `include` and leaves out `references`, `references` resource objects MUST NOT be included under the top-level field `included`, as per the definition of `included`, see section JSON Response Schema: Common Fields.
		///
		///> **Note**: A query with the parameter `include` set to the empty string means no related resource objects are to be returned under the top-level field `included`.</param>
		/// <param name="api_hint">If the client provides the parameter, the value SHOULD have the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR is a minor version of the API. For example, if a client appends `api_hint=v1.0` to the query string, the hint provided is for major version 1 and minor version 0.</param>
		/// <returns>Successful Response</returns>
		public async Task<ReferenceResponseMany> Get_references_references_getAsync(string filter, string response_format, string email_address, string response_fields, string sort, int page_limit, int page_offset, int page_number, int page_cursor, int page_above, int page_below, string include, string api_hint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "references?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&response_format=" + (response_format==null? "" : System.Uri.EscapeDataString(response_format))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address))+"&response_fields=" + (response_fields==null? "" : System.Uri.EscapeDataString(response_fields))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&page_limit="+page_limit+"&page_offset="+page_offset+"&page_number="+page_number+"&page_cursor="+page_cursor+"&page_above="+page_above+"&page_below="+page_below+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&api_hint=" + (api_hint==null? "" : System.Uri.EscapeDataString(api_hint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReferenceResponseMany>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Single Reference
		/// Get_single_reference_references__entry_id__get references/{entry_id}
		/// </summary>
		/// <param name="response_format">The output format requested (see section Response Format).
		///Defaults to the format string 'json', which specifies the standard output format described in this specification.
		///Example: `http://example.com/v1/structures?response_format=xml`</param>
		/// <param name="email_address">An email address of the user making the request.
		///The email SHOULD be that of a person and not an automatic system.
		///Example: `http://example.com/v1/structures?email_address=user@example.com`</param>
		/// <param name="response_fields">A comma-delimited set of fields to be provided in the output.
		///If provided, these fields MUST be returned along with the REQUIRED fields.
		///Other OPTIONAL fields MUST NOT be returned when this parameter is present.
		///Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`</param>
		/// <param name="include">A server MAY implement the JSON API concept of returning [compound documents](https://jsonapi.org/format/1.0/#document-compound-documents) by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).
		///
		///All related resource objects MUST be returned as part of an array value for the top-level `included` field, see the section JSON Response Schema: Common Fields.
		///
		///The value of `include` MUST be a comma-separated list of "relationship paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).
		///If relationship paths are not supported, or a server is unable to identify a relationship path a `400 Bad Request` response MUST be made.
		///
		///The **default value** for `include` is `references`.
		///This means `references` entries MUST always be included under the top-level field `included` as default, since a server assumes if `include` is not specified by a client in the request, it is still specified as `include=references`.
		///Note, if a client explicitly specifies `include` and leaves out `references`, `references` resource objects MUST NOT be included under the top-level field `included`, as per the definition of `included`, see section JSON Response Schema: Common Fields.
		///
		///> **Note**: A query with the parameter `include` set to the empty string means no related resource objects are to be returned under the top-level field `included`.</param>
		/// <param name="api_hint">If the client provides the parameter, the value SHOULD have the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR is a minor version of the API. For example, if a client appends `api_hint=v1.0` to the query string, the hint provided is for major version 1 and minor version 0.</param>
		/// <returns>Successful Response</returns>
		public async Task<ReferenceResponseOne> Get_single_reference_references__entry_id__getAsync(string entry_id, string response_format, string email_address, string response_fields, string include, string api_hint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "references/"+ (entry_id==null? "" : System.Uri.EscapeDataString(entry_id))+"&response_format=" + (response_format==null? "" : System.Uri.EscapeDataString(response_format))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address))+"&response_fields=" + (response_fields==null? "" : System.Uri.EscapeDataString(response_fields))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&api_hint=" + (api_hint==null? "" : System.Uri.EscapeDataString(api_hint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReferenceResponseOne>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Structures
		/// Get_structures_structures_get structures
		/// </summary>
		/// <param name="filter">A filter string, in the format described in section API Filtering Format Specification of the specification.</param>
		/// <param name="response_format">The output format requested (see section Response Format).
		///Defaults to the format string 'json', which specifies the standard output format described in this specification.
		///Example: `http://example.com/v1/structures?response_format=xml`</param>
		/// <param name="email_address">An email address of the user making the request.
		///The email SHOULD be that of a person and not an automatic system.
		///Example: `http://example.com/v1/structures?email_address=user@example.com`</param>
		/// <param name="response_fields">A comma-delimited set of fields to be provided in the output.
		///If provided, these fields MUST be returned along with the REQUIRED fields.
		///Other OPTIONAL fields MUST NOT be returned when this parameter is present.
		///Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`</param>
		/// <param name="sort">If supporting sortable queries, an implementation MUST use the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).
		///
		///An implementation MAY support multiple sort fields for a single query.
		///If it does, it again MUST conform to the JSON API 1.0 specification.
		///
		///If an implementation supports sorting for an entry listing endpoint, then the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>` in its `data.properties.<fieldname>` response value that can be used for sorting, the key `sortable` with value `true`.
		///If a field name under an entry listing endpoint supporting sorting cannot be used for sorting, the server MUST either leave out the `sortable` key or set it equal to `false` for the specific field name.
		///The set of field names, with `sortable` equal to `true` are allowed to be used in the "sort fields" list according to its definition in the JSON API 1.0 specification.
		///The field `sortable` is in addition to each property description and other OPTIONAL fields.
		///An example is shown in the section Entry Listing Info Endpoints.</param>
		/// <param name="page_limit">Sets a numerical limit on the number of entries returned.
		///See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).
		///The API implementation MUST return no more than the number specified.
		///It MAY return fewer.
		///The database MAY have a maximum limit and not accept larger numbers (in which case an error code -- 403 Forbidden -- MUST be returned).
		///The default limit value is up to the API implementation to decide.
		///Example: `http://example.com/optimade/v1/structures?page_limit=100`
		/// Minimum: 0
		// </param>
		/// <param name="page_offset">RECOMMENDED for use with _offset-based_ pagination: using `page_offset` and `page_limit` is RECOMMENDED.
		///Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.
		/// Minimum: 0
		// </param>
		/// <param name="page_number">RECOMMENDED for use with _page-based_ pagination: using `page_number` and `page_limit` is RECOMMENDED.
		///It is RECOMMENDED that the first page has number 1, i.e., that `page_number` is 1-based.
		///Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.
		/// Minimum: 0
		// </param>
		/// <param name="page_cursor">RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor` and `page_limit` is RECOMMENDED.
		/// Minimum: 0
		// </param>
		/// <param name="page_above">RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.
		///Example: Fetch up to 100 structures above sort-field value 4000 (in this example, server chooses to fetch results sorted by increasing `id`, so `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.
		/// Minimum: 0
		// </param>
		/// <param name="page_below">RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.
		/// Minimum: 0
		// </param>
		/// <param name="include">A server MAY implement the JSON API concept of returning [compound documents](https://jsonapi.org/format/1.0/#document-compound-documents) by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).
		///
		///All related resource objects MUST be returned as part of an array value for the top-level `included` field, see the section JSON Response Schema: Common Fields.
		///
		///The value of `include` MUST be a comma-separated list of "relationship paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).
		///If relationship paths are not supported, or a server is unable to identify a relationship path a `400 Bad Request` response MUST be made.
		///
		///The **default value** for `include` is `references`.
		///This means `references` entries MUST always be included under the top-level field `included` as default, since a server assumes if `include` is not specified by a client in the request, it is still specified as `include=references`.
		///Note, if a client explicitly specifies `include` and leaves out `references`, `references` resource objects MUST NOT be included under the top-level field `included`, as per the definition of `included`, see section JSON Response Schema: Common Fields.
		///
		///> **Note**: A query with the parameter `include` set to the empty string means no related resource objects are to be returned under the top-level field `included`.</param>
		/// <param name="api_hint">If the client provides the parameter, the value SHOULD have the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR is a minor version of the API. For example, if a client appends `api_hint=v1.0` to the query string, the hint provided is for major version 1 and minor version 0.</param>
		/// <returns>Successful Response</returns>
		public async Task<StructureResponseMany> Get_structures_structures_getAsync(string filter, string response_format, string email_address, string response_fields, string sort, int page_limit, int page_offset, int page_number, int page_cursor, int page_above, int page_below, string include, string api_hint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "structures?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&response_format=" + (response_format==null? "" : System.Uri.EscapeDataString(response_format))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address))+"&response_fields=" + (response_fields==null? "" : System.Uri.EscapeDataString(response_fields))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&page_limit="+page_limit+"&page_offset="+page_offset+"&page_number="+page_number+"&page_cursor="+page_cursor+"&page_above="+page_above+"&page_below="+page_below+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&api_hint=" + (api_hint==null? "" : System.Uri.EscapeDataString(api_hint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StructureResponseMany>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Single Structure
		/// Get_single_structure_structures__entry_id__get structures/{entry_id}
		/// </summary>
		/// <param name="response_format">The output format requested (see section Response Format).
		///Defaults to the format string 'json', which specifies the standard output format described in this specification.
		///Example: `http://example.com/v1/structures?response_format=xml`</param>
		/// <param name="email_address">An email address of the user making the request.
		///The email SHOULD be that of a person and not an automatic system.
		///Example: `http://example.com/v1/structures?email_address=user@example.com`</param>
		/// <param name="response_fields">A comma-delimited set of fields to be provided in the output.
		///If provided, these fields MUST be returned along with the REQUIRED fields.
		///Other OPTIONAL fields MUST NOT be returned when this parameter is present.
		///Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`</param>
		/// <param name="include">A server MAY implement the JSON API concept of returning [compound documents](https://jsonapi.org/format/1.0/#document-compound-documents) by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).
		///
		///All related resource objects MUST be returned as part of an array value for the top-level `included` field, see the section JSON Response Schema: Common Fields.
		///
		///The value of `include` MUST be a comma-separated list of "relationship paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).
		///If relationship paths are not supported, or a server is unable to identify a relationship path a `400 Bad Request` response MUST be made.
		///
		///The **default value** for `include` is `references`.
		///This means `references` entries MUST always be included under the top-level field `included` as default, since a server assumes if `include` is not specified by a client in the request, it is still specified as `include=references`.
		///Note, if a client explicitly specifies `include` and leaves out `references`, `references` resource objects MUST NOT be included under the top-level field `included`, as per the definition of `included`, see section JSON Response Schema: Common Fields.
		///
		///> **Note**: A query with the parameter `include` set to the empty string means no related resource objects are to be returned under the top-level field `included`.</param>
		/// <param name="api_hint">If the client provides the parameter, the value SHOULD have the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR is a minor version of the API. For example, if a client appends `api_hint=v1.0` to the query string, the hint provided is for major version 1 and minor version 0.</param>
		/// <returns>Successful Response</returns>
		public async Task<StructureResponseOne> Get_single_structure_structures__entry_id__getAsync(string entry_id, string response_format, string email_address, string response_fields, string include, string api_hint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "structures/"+ (entry_id==null? "" : System.Uri.EscapeDataString(entry_id))+"&response_format=" + (response_format==null? "" : System.Uri.EscapeDataString(response_format))+"&email_address=" + (email_address==null? "" : System.Uri.EscapeDataString(email_address))+"&response_fields=" + (response_fields==null? "" : System.Uri.EscapeDataString(response_fields))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&api_hint=" + (api_hint==null? "" : System.Uri.EscapeDataString(api_hint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StructureResponseOne>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Versions
		/// Respond with the text/csv representation for the served versions.
		/// Get_versions_versions_get versions
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task Get_versions_versions_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "versions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
