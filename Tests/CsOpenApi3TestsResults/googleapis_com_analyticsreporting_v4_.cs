//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An Activity represents data for an activity of a user. Note that an Activity is different from a hit. A hit might result in multiple Activity's. For example, if a hit includes a transaction and a goal completion, there will be two Activity protos for this hit, one for ECOMMERCE and one for GOAL. Conversely, multiple hits can also construct one Activity. In classic e-commerce, data for one transaction might be sent through multiple hits. These hits will be merged into one ECOMMERCE Activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Activity
	{
		
		/// <summary>
		/// Timestamp of the activity. If activities for a visit cross midnight and occur in two separate dates, then two sessions (one per date) share the session identifier. For example, say session ID 113472 has activity within 2019-08-20, and session ID 243742 has activity within 2019-08-25 and 2019-08-26. Session ID 113472 is one session, and session ID 243742 is two sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityTime")]
		public string ActivityTime { get; set; }
		
		/// <summary>
		/// Type of this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public System.Nullable<ActivityActivityType> ActivityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appview")]
		public ScreenviewData Appview { get; set; }
		
		/// <summary>
		/// For manual campaign tracking, it is the value of the utm_campaign campaign tracking parameter. For AdWords autotagging, it is the name(s) of the online ad campaign(s) you use for the property. If you use neither, its value is (not set).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public string Campaign { get; set; }
		
		/// <summary>
		/// The Channel Group associated with an end user's session for this View (defined by the View's Channel Groupings).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelGrouping")]
		public string ChannelGrouping { get; set; }
		
		/// <summary>
		/// A list of all custom dimensions associated with this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDimension")]
		public CustomDimension[] CustomDimension { get; set; }
		
		/// <summary>
		/// E-commerce details associated with the user activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ecommerce")]
		public EcommerceData Ecommerce { get; set; }
		
		/// <summary>
		/// Represents all the details pertaining to an event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public EventData Event { get; set; }
		
		/// <summary>
		/// Represents a set of goals that were reached in an activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goals")]
		public GoalSetData Goals { get; set; }
		
		/// <summary>
		/// The hostname from which the tracking request was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// For manual campaign tracking, it is the value of the utm_term campaign tracking parameter. For AdWords traffic, it contains the best matching targeting criteria. For the display network, where multiple targeting criteria could have caused the ad to show up, it returns the best matching targeting criteria as selected by Ads. This could be display_keyword, site placement, boomuserlist, user_interest, age, or gender. Otherwise its value is (not set).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// The first page in users' sessions, or the landing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landingPagePath")]
		public string LandingPagePath { get; set; }
		
		/// <summary>
		/// The type of referrals. For manual campaign tracking, it is the value of the utm_medium campaign tracking parameter. For AdWords autotagging, it is cpc. If users came from a search engine detected by Google Analytics, it is organic. If the referrer is not a search engine, it is referral. If users came directly to the property and document.referrer is empty, its value is (none).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		/// <summary>
		/// Represents details collected when the visitor views a page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageview")]
		public PageviewData Pageview { get; set; }
		
		/// <summary>
		/// The source of referrals. For manual campaign tracking, it is the value of the utm_source campaign tracking parameter. For AdWords autotagging, it is google. If you use neither, it is the domain of the source (e.g., document.referrer) referring the users. It may also contain a port address. If users arrived without a referrer, its value is (direct).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActivityActivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGEVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENVIEW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECOMMERCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScreenviewData
	{
		
		/// <summary>
		/// The application name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appName")]
		public string AppName { get; set; }
		
		/// <summary>
		/// Mobile manufacturer or branded name. Eg: "Google", "Apple" etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileDeviceBranding")]
		public string MobileDeviceBranding { get; set; }
		
		/// <summary>
		/// Mobile device model. Eg: "Pixel", "iPhone" etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileDeviceModel")]
		public string MobileDeviceModel { get; set; }
		
		/// <summary>
		/// The name of the screen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenName")]
		public string ScreenName { get; set; }
	}
	
	/// <summary>
	/// Custom dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomDimension
	{
		
		/// <summary>
		/// Slot number of custom dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Value of the custom dimension. Default value (i.e. empty string) indicates clearing sesion/visitor scope custom dimension value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// E-commerce details associated with the user activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EcommerceData
	{
		
		/// <summary>
		/// Action associated with this e-commerce action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public System.Nullable<EcommerceDataActionType> ActionType { get; set; }
		
		/// <summary>
		/// The type of this e-commerce activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ecommerceType")]
		public System.Nullable<EcommerceDataEcommerceType> EcommerceType { get; set; }
		
		/// <summary>
		/// Details of the products in this transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public ProductData[] Products { get; set; }
		
		/// <summary>
		/// Represents details collected when the visitor performs a transaction on the page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public TransactionData Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EcommerceDataActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETAILS_VIEW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_TO_CART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_FROM_CART = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKOUT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKOUT_OPTION = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EcommerceDataEcommerceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECOMMERCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASSIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENHANCED = 2,
	}
	
	/// <summary>
	/// Details of the products in an e-commerce transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductData
	{
		
		/// <summary>
		/// The total revenue from purchased product items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemRevenue")]
		public System.Nullable<System.Double> ItemRevenue { get; set; }
		
		/// <summary>
		/// The product name, supplied by the e-commerce tracking application, for the purchased items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
		
		/// <summary>
		/// Total number of this product units in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productQuantity")]
		public string ProductQuantity { get; set; }
		
		/// <summary>
		/// Unique code that represents the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productSku")]
		public string ProductSku { get; set; }
	}
	
	/// <summary>
	/// Represents details collected when the visitor performs a transaction on the page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionData
	{
		
		/// <summary>
		/// The transaction ID, supplied by the e-commerce tracking method, for the purchase in the shopping cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// The total sale revenue (excluding shipping and tax) of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionRevenue")]
		public System.Nullable<System.Double> TransactionRevenue { get; set; }
		
		/// <summary>
		/// Total cost of shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionShipping")]
		public System.Nullable<System.Double> TransactionShipping { get; set; }
		
		/// <summary>
		/// Total tax for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionTax")]
		public System.Nullable<System.Double> TransactionTax { get; set; }
	}
	
	/// <summary>
	/// Represents all the details pertaining to an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventData
	{
		
		/// <summary>
		/// Type of interaction with the object. Eg: 'play'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventAction")]
		public string EventAction { get; set; }
		
		/// <summary>
		/// The object on the page that was interacted with. Eg: 'Video'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCategory")]
		public string EventCategory { get; set; }
		
		/// <summary>
		/// Number of such events in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCount")]
		public string EventCount { get; set; }
		
		/// <summary>
		/// Label attached with the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventLabel")]
		public string EventLabel { get; set; }
		
		/// <summary>
		/// Numeric value associated with the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventValue")]
		public string EventValue { get; set; }
	}
	
	/// <summary>
	/// Represents a set of goals that were reached in an activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoalSetData
	{
		
		/// <summary>
		/// All the goals that were reached in the current activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goals")]
		public GoalData[] Goals { get; set; }
	}
	
	/// <summary>
	/// Represents all the details pertaining to a goal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoalData
	{
		
		/// <summary>
		/// URL of the page where this goal was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalCompletionLocation")]
		public string GoalCompletionLocation { get; set; }
		
		/// <summary>
		/// Total number of goal completions in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalCompletions")]
		public string GoalCompletions { get; set; }
		
		/// <summary>
		/// This identifies the goal as configured for the profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalIndex")]
		public System.Nullable<System.Int32> GoalIndex { get; set; }
		
		/// <summary>
		/// Name of the goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalName")]
		public string GoalName { get; set; }
		
		/// <summary>
		/// URL of the page one step prior to the goal completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalPreviousStep1")]
		public string GoalPreviousStep1 { get; set; }
		
		/// <summary>
		/// URL of the page two steps prior to the goal completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalPreviousStep2")]
		public string GoalPreviousStep2 { get; set; }
		
		/// <summary>
		/// URL of the page three steps prior to the goal completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalPreviousStep3")]
		public string GoalPreviousStep3 { get; set; }
		
		/// <summary>
		/// Value in this goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goalValue")]
		public System.Nullable<System.Double> GoalValue { get; set; }
	}
	
	/// <summary>
	/// Represents details collected when the visitor views a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageviewData
	{
		
		/// <summary>
		/// The URL of the page that the visitor viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagePath")]
		public string PagePath { get; set; }
		
		/// <summary>
		/// The title of the page that the visitor viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageTitle")]
		public string PageTitle { get; set; }
	}
	
	/// <summary>
	/// Defines a cohort. A cohort is a group of users who share a common characteristic. For example, all users with the same acquisition date belong to the same cohort.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cohort
	{
		
		/// <summary>
		/// A contiguous set of days: startDate, startDate + 1 day, ..., endDate. The start and end dates are specified in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date format `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// A unique name for the cohort. If not defined name will be auto-generated with values cohort_[1234...].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the cohort. The only supported type as of now is `FIRST_VISIT_DATE`. If this field is unspecified the cohort is treated as `FIRST_VISIT_DATE` type cohort.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CohortType> Type { get; set; }
	}
	
	/// <summary>
	/// A contiguous set of days: startDate, startDate + 1 day, ..., endDate. The start and end dates are specified in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date format `YYYY-MM-DD`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRange
	{
		
		/// <summary>
		/// The end date for the query in the format `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// The start date for the query in the format `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CohortType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_COHORT_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_VISIT_DATE = 1,
	}
	
	/// <summary>
	/// Defines a cohort group. For example: "cohortGroup": { "cohorts": [{ "name": "cohort 1", "type": "FIRST_VISIT_DATE", "dateRange": { "startDate": "2015-08-01", "endDate": "2015-08-01" } },{ "name": "cohort 2" "type": "FIRST_VISIT_DATE" "dateRange": { "startDate": "2015-07-01", "endDate": "2015-07-01" } }] }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CohortGroup
	{
		
		/// <summary>
		/// The definition for the cohort.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cohorts")]
		public Cohort[] Cohorts { get; set; }
		
		/// <summary>
		/// Enable Life Time Value (LTV). LTV measures lifetime value for users acquired through different channels. Please see: [Cohort Analysis](https://support.google.com/analytics/answer/6074676) and [Lifetime Value](https://support.google.com/analytics/answer/6182550) If the value of lifetimeValue is false: - The metric values are similar to the values in the web interface cohort report. - The cohort definition date ranges must be aligned to the calendar week and month. i.e. while requesting `ga:cohortNthWeek` the `startDate` in the cohort definition should be a Sunday and the `endDate` should be the following Saturday, and for `ga:cohortNthMonth`, the `startDate` should be the 1st of the month and `endDate` should be the last day of the month. When the lifetimeValue is true: - The metric values will correspond to the values in the web interface LifeTime value report. - The Lifetime Value report shows you how user value (Revenue) and engagement (Appviews, Goal Completions, Sessions, and Session Duration) grow during the 90 days after a user is acquired. - The metrics are calculated as a cumulative average per user per the time increment. - The cohort definition date ranges need not be aligned to the calendar week and month boundaries. - The `viewId` must be an [app view ID](https://support.google.com/analytics/answer/2649553#WebVersusAppViews)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetimeValue")]
		public System.Nullable<System.Boolean> LifetimeValue { get; set; }
	}
	
	/// <summary>
	/// Column headers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColumnHeader
	{
		
		/// <summary>
		/// The dimension names in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string[] Dimensions { get; set; }
		
		/// <summary>
		/// The headers for the metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricHeader")]
		public MetricHeader MetricHeader { get; set; }
	}
	
	/// <summary>
	/// The headers for the metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricHeader
	{
		
		/// <summary>
		/// Headers for the metrics in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricHeaderEntries")]
		public MetricHeaderEntry[] MetricHeaderEntries { get; set; }
		
		/// <summary>
		/// Headers for the pivots in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotHeaders")]
		public PivotHeader[] PivotHeaders { get; set; }
	}
	
	/// <summary>
	/// Header for the metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricHeaderEntry
	{
		
		/// <summary>
		/// The name of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the metric, for example `INTEGER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MetricHeaderEntryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetricHeaderEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME = 5,
	}
	
	/// <summary>
	/// The headers for each of the pivot sections defined in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotHeader
	{
		
		/// <summary>
		/// A single pivot section header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotHeaderEntries")]
		public PivotHeaderEntry[] PivotHeaderEntries { get; set; }
		
		/// <summary>
		/// The total number of groups for this pivot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPivotGroupsCount")]
		public System.Nullable<System.Int32> TotalPivotGroupsCount { get; set; }
	}
	
	/// <summary>
	/// The headers for the each of the metric column corresponding to the metrics requested in the pivots section of the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotHeaderEntry
	{
		
		/// <summary>
		/// The name of the dimensions in the pivot response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionNames")]
		public string[] DimensionNames { get; set; }
		
		/// <summary>
		/// The values for the dimensions in the pivot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValues")]
		public string[] DimensionValues { get; set; }
		
		/// <summary>
		/// Header for the metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public MetricHeaderEntry Metric { get; set; }
	}
	
	/// <summary>
	/// Used to return a list of metrics for a single DateRange / dimension combination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRangeValues
	{
		
		/// <summary>
		/// The values of each pivot region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotValueRegions")]
		public PivotValueRegion[] PivotValueRegions { get; set; }
		
		/// <summary>
		/// Each value corresponds to each Metric in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// The metric values in the pivot region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotValueRegion
	{
		
		/// <summary>
		/// The values of the metrics in each of the pivot regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// [Dimensions](https://support.google.com/analytics/answer/1033861) are attributes of your data. For example, the dimension `ga:city` indicates the city, for example, "Paris" or "New York", from which a session originates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dimension
	{
		
		/// <summary>
		/// If non-empty, we place dimension values into buckets after string to int64. Dimension values that are not the string representation of an integral value will be converted to zero. The bucket values have to be in increasing order. Each bucket is closed on the lower end, and open on the upper end. The "first" bucket includes all values less than the first boundary, the "last" bucket includes all values up to infinity. Dimension values that fall in a bucket get transformed to a new dimension value. For example, if one gives a list of "0, 1, 3, 4, 7", then we return the following buckets: - bucket #1: values < 0, dimension value "<0" - bucket #2: values in [0,1), dimension value "0" - bucket #3: values in [1,3), dimension value "1-2" - bucket #4: values in [3,4), dimension value "3" - bucket #5: values in [4,7), dimension value "4-6" - bucket #6: values >= 7, dimension value "7+" NOTE: If you are applying histogram mutation on any dimension, and using that dimension in sort, you will want to use the sort type `HISTOGRAM_BUCKET` for that purpose. Without that the dimension values will be sorted according to dictionary (lexicographic) order. For example the ascending dictionary order is: "<50", "1001+", "121-1000", "50-120" And the ascending `HISTOGRAM_BUCKET` order is: "<50", "50-120", "121-1000", "1001+" The client has to explicitly request `"orderType": "HISTOGRAM_BUCKET"` for a histogram-mutated dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramBuckets")]
		public string[] HistogramBuckets { get; set; }
		
		/// <summary>
		/// Name of the dimension to fetch, for example `ga:browser`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Dimension filter specifies the filtering options on a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionFilter
	{
		
		/// <summary>
		/// Should the match be case sensitive? Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// The dimension to filter on. A DimensionFilter must contain a dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// Strings or regular expression to match against. Only the first value of the list is used for comparison unless the operator is `IN_LIST`. If `IN_LIST` operator, then the entire list is used to filter the dimensions as explained in the description of the `IN_LIST` operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressions")]
		public string[] Expressions { get; set; }
		
		/// <summary>
		/// Logical `NOT` operator. If this boolean is set to true, then the matching dimension values will be excluded in the report. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not")]
		public System.Nullable<System.Boolean> Not { get; set; }
		
		/// <summary>
		/// How to match the dimension to the expression. The default is REGEXP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<DimensionFilterOperator> Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DimensionFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEXP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGINS_WITH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDS_WITH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_EQUAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_GREATER_THAN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_LESS_THAN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_LIST = 9,
	}
	
	/// <summary>
	/// A group of dimension filters. Set the operator value to specify how the filters are logically combined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionFilterClause
	{
		
		/// <summary>
		/// The repeated set of filters. They are logically combined based on the operator specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DimensionFilter[] Filters { get; set; }
		
		/// <summary>
		/// The operator for combining multiple dimension filters. If unspecified, it is treated as an `OR`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<DimensionFilterClauseOperator> Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DimensionFilterClauseOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AND = 2,
	}
	
	/// <summary>
	/// Dynamic segment definition for defining the segment within the request. A segment can select users, sessions or both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicSegment
	{
		
		/// <summary>
		/// The name of the dynamic segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SegmentDefinition defines the segment to be a set of SegmentFilters which are combined together with a logical `AND` operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionSegment")]
		public SegmentDefinition SessionSegment { get; set; }
		
		/// <summary>
		/// SegmentDefinition defines the segment to be a set of SegmentFilters which are combined together with a logical `AND` operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userSegment")]
		public SegmentDefinition UserSegment { get; set; }
	}
	
	/// <summary>
	/// SegmentDefinition defines the segment to be a set of SegmentFilters which are combined together with a logical `AND` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentDefinition
	{
		
		/// <summary>
		/// A segment is defined by a set of segment filters which are combined together with a logical `AND` operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentFilters")]
		public SegmentFilter[] SegmentFilters { get; set; }
	}
	
	/// <summary>
	/// SegmentFilter defines the segment to be either a simple or a sequence segment. A simple segment condition contains dimension and metric conditions to select the sessions or users. A sequence segment condition can be used to select users or sessions based on sequential conditions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentFilter
	{
		
		/// <summary>
		/// If true, match the complement of simple or sequence segment. For example, to match all visits not from "New York", we can define the segment as follows: "sessionSegment": { "segmentFilters": [{ "simpleSegment" :{ "orFiltersForSegment": [{ "segmentFilterClauses":[{ "dimensionFilter": { "dimensionName": "ga:city", "expressions": ["New York"] } }] }] }, "not": "True" }] },
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not")]
		public System.Nullable<System.Boolean> Not { get; set; }
		
		/// <summary>
		/// Sequence conditions consist of one or more steps, where each step is defined by one or more dimension/metric conditions. Multiple steps can be combined with special sequence operators.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequenceSegment")]
		public SequenceSegment SequenceSegment { get; set; }
		
		/// <summary>
		/// A Simple segment conditions consist of one or more dimension/metric conditions that can be combined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleSegment")]
		public SimpleSegment SimpleSegment { get; set; }
	}
	
	/// <summary>
	/// Sequence conditions consist of one or more steps, where each step is defined by one or more dimension/metric conditions. Multiple steps can be combined with special sequence operators.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SequenceSegment
	{
		
		/// <summary>
		/// If set, first step condition must match the first hit of the visitor (in the date range).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstStepShouldMatchFirstHit")]
		public System.Nullable<System.Boolean> FirstStepShouldMatchFirstHit { get; set; }
		
		/// <summary>
		/// The list of steps in the sequence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentSequenceSteps")]
		public SegmentSequenceStep[] SegmentSequenceSteps { get; set; }
	}
	
	/// <summary>
	/// A segment sequence definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentSequenceStep
	{
		
		/// <summary>
		/// Specifies if the step immediately precedes or can be any time before the next step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchType")]
		public System.Nullable<SegmentSequenceStepMatchType> MatchType { get; set; }
		
		/// <summary>
		/// A sequence is specified with a list of Or grouped filters which are combined with `AND` operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orFiltersForSegment")]
		public OrFiltersForSegment[] OrFiltersForSegment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SegmentSequenceStepMatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_MATCH_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRECEDES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMMEDIATELY_PRECEDES = 2,
	}
	
	/// <summary>
	/// A list of segment filters in the `OR` group are combined with the logical OR operator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrFiltersForSegment
	{
		
		/// <summary>
		/// List of segment filters to be combined with a `OR` operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentFilterClauses")]
		public SegmentFilterClause[] SegmentFilterClauses { get; set; }
	}
	
	/// <summary>
	/// Filter Clause to be used in a segment definition, can be wither a metric or a dimension filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentFilterClause
	{
		
		/// <summary>
		/// Dimension filter specifies the filtering options on a dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilter")]
		public SegmentDimensionFilter DimensionFilter { get; set; }
		
		/// <summary>
		/// Metric filter to be used in a segment filter clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricFilter")]
		public SegmentMetricFilter MetricFilter { get; set; }
		
		/// <summary>
		/// Matches the complement (`!`) of the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not")]
		public System.Nullable<System.Boolean> Not { get; set; }
	}
	
	/// <summary>
	/// Dimension filter specifies the filtering options on a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentDimensionFilter
	{
		
		/// <summary>
		/// Should the match be case sensitive, ignored for `IN_LIST` operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Name of the dimension for which the filter is being applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionName")]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// The list of expressions, only the first element is used for all operators
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressions")]
		public string[] Expressions { get; set; }
		
		/// <summary>
		/// Maximum comparison values for `BETWEEN` match type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxComparisonValue")]
		public string MaxComparisonValue { get; set; }
		
		/// <summary>
		/// Minimum comparison values for `BETWEEN` match type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minComparisonValue")]
		public string MinComparisonValue { get; set; }
		
		/// <summary>
		/// The operator to use to match the dimension with the expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<SegmentDimensionFilterOperator> Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SegmentDimensionFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEXP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGINS_WITH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDS_WITH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_LIST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_LESS_THAN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_GREATER_THAN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_BETWEEN = 9,
	}
	
	/// <summary>
	/// Metric filter to be used in a segment filter clause.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentMetricFilter
	{
		
		/// <summary>
		/// The value to compare against. If the operator is `BETWEEN`, this value is treated as minimum comparison value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		public string ComparisonValue { get; set; }
		
		/// <summary>
		/// Max comparison value is only used for `BETWEEN` operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxComparisonValue")]
		public string MaxComparisonValue { get; set; }
		
		/// <summary>
		/// The metric that will be filtered on. A `metricFilter` must contain a metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Specifies is the operation to perform to compare the metric. The default is `EQUAL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<SegmentMetricFilterOperator> Operator { get; set; }
		
		/// <summary>
		/// Scope for a metric defines the level at which that metric is defined. The specified metric scope must be equal to or greater than its primary scope as defined in the data model. The primary scope is defined by if the segment is selecting users or sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<SegmentMetricFilterScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SegmentMetricFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_OPERATOR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SegmentMetricFilterScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_SCOPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SESSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 4,
	}
	
	/// <summary>
	/// A Simple segment conditions consist of one or more dimension/metric conditions that can be combined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimpleSegment
	{
		
		/// <summary>
		/// A list of segment filters groups which are combined with logical `AND` operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orFiltersForSegment")]
		public OrFiltersForSegment[] OrFiltersForSegment { get; set; }
	}
	
	/// <summary>
	/// The batch request containing multiple report request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReportsRequest
	{
		
		/// <summary>
		/// Requests, each request will have a separate response. There can be a maximum of 5 requests. All requests should have the same `dateRanges`, `viewId`, `segments`, `samplingLevel`, and `cohortGroup`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportRequests")]
		public ReportRequest[] ReportRequests { get; set; }
		
		/// <summary>
		/// Enables [resource based quotas](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4), (defaults to `False`). If this field is set to `True` the per view (profile) quotas are governed by the computational cost of the request. Note that using cost based quotas will higher enable sampling rates. (10 Million for `SMALL`, 100M for `LARGE`. See the [limits and quotas documentation](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useResourceQuotas")]
		public System.Nullable<System.Boolean> UseResourceQuotas { get; set; }
	}
	
	/// <summary>
	/// The main request class which specifies the Reporting API request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRequest
	{
		
		/// <summary>
		/// Defines a cohort group. For example: "cohortGroup": { "cohorts": [{ "name": "cohort 1", "type": "FIRST_VISIT_DATE", "dateRange": { "startDate": "2015-08-01", "endDate": "2015-08-01" } },{ "name": "cohort 2" "type": "FIRST_VISIT_DATE" "dateRange": { "startDate": "2015-07-01", "endDate": "2015-07-01" } }] }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cohortGroup")]
		public CohortGroup CohortGroup { get; set; }
		
		/// <summary>
		/// Date ranges in the request. The request can have a maximum of 2 date ranges. The response will contain a set of metric values for each combination of the dimensions for each date range in the request. So, if there are two date ranges, there will be two set of metric values, one for the original date range and one for the second date range. The `reportRequest.dateRanges` field should not be specified for cohorts or Lifetime value requests. If a date range is not provided, the default date range is (startDate: current date - 7 days, endDate: current date - 1 day). Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `dateRanges` definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRanges")]
		public DateRange[] DateRanges { get; set; }
		
		/// <summary>
		/// The dimension filter clauses for filtering Dimension Values. They are logically combined with the `AND` operator. Note that filtering occurs before any dimensions are aggregated, so that the returned metrics represent the total for only the relevant dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilterClauses")]
		public DimensionFilterClause[] DimensionFilterClauses { get; set; }
		
		/// <summary>
		/// The dimensions requested. Requests can have a total of 9 dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Dimension or metric filters that restrict the data returned for your request. To use the `filtersExpression`, supply a dimension or metric on which to filter, followed by the filter expression. For example, the following expression selects `ga:browser` dimension which starts with Firefox; `ga:browser=~^Firefox`. For more information on dimensions and metric filters, see [Filters reference](https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filtersExpression")]
		public string FiltersExpression { get; set; }
		
		/// <summary>
		/// If set to true, hides the total of all metrics for all the matching rows, for every date range. The default false and will return the totals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideTotals")]
		public System.Nullable<System.Boolean> HideTotals { get; set; }
		
		/// <summary>
		/// If set to true, hides the minimum and maximum across all matching rows. The default is false and the value ranges are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideValueRanges")]
		public System.Nullable<System.Boolean> HideValueRanges { get; set; }
		
		/// <summary>
		/// If set to false, the response does not include rows if all the retrieved metrics are equal to zero. The default is false which will exclude these rows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeEmptyRows")]
		public System.Nullable<System.Boolean> IncludeEmptyRows { get; set; }
		
		/// <summary>
		/// The metric filter clauses. They are logically combined with the `AND` operator. Metric filters look at only the first date range and not the comparing date range. Note that filtering on metrics occurs after the metrics are aggregated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricFilterClauses")]
		public MetricFilterClause[] MetricFilterClauses { get; set; }
		
		/// <summary>
		/// The metrics requested. Requests must specify at least one metric. Requests can have a total of 10 metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// Sort order on output rows. To compare two rows, the elements of the following are applied in order until a difference is found. All date ranges in the output get the same row order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBys")]
		public OrderBy[] OrderBys { get; set; }
		
		/// <summary>
		/// Page size is for paging and specifies the maximum number of returned rows. Page size should be >= 0. A query returns the default of 1,000 rows. The Analytics Core Reporting API returns a maximum of 100,000 rows per request, no matter how many you ask for. It can also return fewer rows than requested, if there aren't as many dimension segments as you expect. For instance, there are fewer than 300 possible values for `ga:country`, so when segmenting only by country, you can't get more than 300 rows, even if you set `pageSize` to a higher value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the GetReports request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// The pivot definitions. Requests can have a maximum of 2 pivots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivots")]
		public Pivot[] Pivots { get; set; }
		
		/// <summary>
		/// The desired report [sample](https://support.google.com/analytics/answer/2637192) size. If the the `samplingLevel` field is unspecified the `DEFAULT` sampling level is used. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `samplingLevel` definition. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingLevel")]
		public System.Nullable<ReportRequestSamplingLevel> SamplingLevel { get; set; }
		
		/// <summary>
		/// Segment the data returned for the request. A segment definition helps look at a subset of the segment request. A request can contain up to four segments. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `segments` definition. Requests with segments must have the `ga:segment` dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public Segment[] Segments { get; set; }
		
		/// <summary>
		/// The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `viewId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewId")]
		public string ViewId { get; set; }
	}
	
	/// <summary>
	/// Represents a group of metric filters. Set the operator value to specify how the filters are logically combined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricFilterClause
	{
		
		/// <summary>
		/// The repeated set of filters. They are logically combined based on the operator specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public MetricFilter[] Filters { get; set; }
		
		/// <summary>
		/// The operator for combining multiple metric filters. If unspecified, it is treated as an `OR`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public DimensionFilterClauseOperator Operator { get; set; }
	}
	
	/// <summary>
	/// MetricFilter specifies the filter on a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricFilter
	{
		
		/// <summary>
		/// The value to compare against.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		public string ComparisonValue { get; set; }
		
		/// <summary>
		/// The metric that will be filtered on. A metricFilter must contain a metric name. A metric name can be an alias earlier defined as a metric or it can also be a metric expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Logical `NOT` operator. If this boolean is set to true, then the matching metric values will be excluded in the report. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not")]
		public System.Nullable<System.Boolean> Not { get; set; }
		
		/// <summary>
		/// Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the comparisonValue, the default is `EQUAL`. If the operator is `IS_MISSING`, checks if the metric is missing and would ignore the comparisonValue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<MetricFilterOperator> Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetricFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_MISSING = 4,
	}
	
	/// <summary>
	/// [Metrics](https://support.google.com/analytics/answer/1033861) are the quantitative measurements. For example, the metric `ga:users` indicates the total number of users for the requested time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metric
	{
		
		/// <summary>
		/// An alias for the metric expression is an alternate name for the expression. The alias can be used for filtering and sorting. This field is optional and is useful if the expression is not a single metric but a complex expression which cannot be used in filtering and sorting. The alias is also used in the response column header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// A metric expression in the request. An expression is constructed from one or more metrics and numbers. Accepted operators include: Plus (+), Minus (-), Negation (Unary -), Divided by (/), Multiplied by (*), Parenthesis, Positive cardinal numbers (0-9), can include decimals and is limited to 1024 characters. Example `ga:totalRefunds/ga:users`, in most cases the metric expression is just a single metric name like `ga:users`. Adding mixed `MetricType` (E.g., `CURRENCY` + `PERCENTAGE`) metrics will result in unexpected results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Specifies how the metric expression should be formatted, for example `INTEGER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattingType")]
		public MetricHeaderEntryType FormattingType { get; set; }
	}
	
	/// <summary>
	/// Specifies the sorting options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrderBy
	{
		
		/// <summary>
		/// The field which to sort by. The default sort order is ascending. Example: `ga:browser`. Note, that you can only specify one field for sort here. For example, `ga:browser, ga:city` is not valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// The order type. The default orderType is `VALUE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderType")]
		public System.Nullable<OrderByOrderType> OrderType { get; set; }
		
		/// <summary>
		/// The sorting order for the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<OrderBySortOrder> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderByOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HISTOGRAM_BUCKET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIMENSION_AS_INTEGER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderBySortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SORT_ORDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 2,
	}
	
	/// <summary>
	/// The Pivot describes the pivot section in the request. The Pivot helps rearrange the information in the table for certain reports by pivoting your data on a second dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pivot
	{
		
		/// <summary>
		/// DimensionFilterClauses are logically combined with an `AND` operator: only data that is included by all these DimensionFilterClauses contributes to the values in this pivot region. Dimension filters can be used to restrict the columns shown in the pivot region. For example if you have `ga:browser` as the requested dimension in the pivot region, and you specify key filters to restrict `ga:browser` to only "IE" or "Firefox", then only those two browsers would show up as columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilterClauses")]
		public DimensionFilterClause[] DimensionFilterClauses { get; set; }
		
		/// <summary>
		/// A list of dimensions to show as pivot columns. A Pivot can have a maximum of 4 dimensions. Pivot dimensions are part of the restriction on the total number of dimensions allowed in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Specifies the maximum number of groups to return. The default value is 10, also the maximum value is 1,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxGroupCount")]
		public System.Nullable<System.Int32> MaxGroupCount { get; set; }
		
		/// <summary>
		/// The pivot metrics. Pivot metrics are part of the restriction on total number of metrics allowed in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Metric[] Metrics { get; set; }
		
		/// <summary>
		/// If k metrics were requested, then the response will contain some data-dependent multiple of k columns in the report. E.g., if you pivoted on the dimension `ga:browser` then you'd get k columns for "Firefox", k columns for "IE", k columns for "Chrome", etc. The ordering of the groups of columns is determined by descending order of "total" for the first of the k values. Ties are broken by lexicographic ordering of the first pivot dimension, then lexicographic ordering of the second pivot dimension, and so on. E.g., if the totals for the first value for Firefox, IE, and Chrome were 8, 2, 8, respectively, the order of columns would be Chrome, Firefox, IE. The following let you choose which of the groups of k columns are included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startGroup")]
		public System.Nullable<System.Int32> StartGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReportRequestSamplingLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LARGE = 3,
	}
	
	/// <summary>
	/// The segment definition, if the report needs to be segmented. A Segment is a subset of the Analytics data. For example, of the entire set of users, one Segment might be users from a particular country or city.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Segment
	{
		
		/// <summary>
		/// Dynamic segment definition for defining the segment within the request. A segment can select users, sessions or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicSegment")]
		public DynamicSegment DynamicSegment { get; set; }
		
		/// <summary>
		/// The segment ID of a built-in or custom segment, for example `gaid::-3`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
	}
	
	/// <summary>
	/// The main response class which holds the reports from the Reporting API `batchGet` call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReportsResponse
	{
		
		/// <summary>
		/// The amount of resource quota tokens deducted to execute the query. Includes all responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryCost")]
		public System.Nullable<System.Int32> QueryCost { get; set; }
		
		/// <summary>
		/// Responses corresponding to each of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// The resource quota tokens remaining for the property after the request is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceQuotasRemaining")]
		public ResourceQuotasRemaining ResourceQuotasRemaining { get; set; }
	}
	
	/// <summary>
	/// The data response corresponding to the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Report
	{
		
		/// <summary>
		/// Column headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnHeader")]
		public ColumnHeader ColumnHeader { get; set; }
		
		/// <summary>
		/// The data part of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ReportData Data { get; set; }
		
		/// <summary>
		/// Page token to retrieve the next page of results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The data part of the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportData
	{
		
		/// <summary>
		/// The last time the data in the report was refreshed. All the hits received before this timestamp are included in the calculation of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLastRefreshed")]
		public string DataLastRefreshed { get; set; }
		
		/// <summary>
		/// If empty reason is specified, the report is empty for this reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emptyReason")]
		public string EmptyReason { get; set; }
		
		/// <summary>
		/// Indicates if response to this request is golden or not. Data is golden when the exact same request will not produce any new results if asked at a later point in time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDataGolden")]
		public System.Nullable<System.Boolean> IsDataGolden { get; set; }
		
		/// <summary>
		/// Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximums")]
		public DateRangeValues[] Maximums { get; set; }
		
		/// <summary>
		/// Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimums")]
		public DateRangeValues[] Minimums { get; set; }
		
		/// <summary>
		/// Total number of matching rows for this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
		
		/// <summary>
		/// There's one ReportRow for every unique combination of dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public ReportRow[] Rows { get; set; }
		
		/// <summary>
		/// If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples read, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplesReadCounts")]
		public string[] SamplesReadCounts { get; set; }
		
		/// <summary>
		/// If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples present, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplingSpaceSizes")]
		public string[] SamplingSpaceSizes { get; set; }
		
		/// <summary>
		/// For each requested date range, for the set of all rows that match the query, every requested value format gets a total. The total for a value format is computed by first totaling the metrics mentioned in the value format and then evaluating the value format as a scalar expression. E.g., The "totals" for `3 / (ga:sessions + 2)` we compute `3 / ((sum of all relevant ga:sessions) + 2)`. Totals are computed before pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public DateRangeValues[] Totals { get; set; }
	}
	
	/// <summary>
	/// A row in the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRow
	{
		
		/// <summary>
		/// List of requested dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string[] Dimensions { get; set; }
		
		/// <summary>
		/// List of metrics for each requested DateRange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public DateRangeValues[] Metrics { get; set; }
	}
	
	/// <summary>
	/// The resource quota tokens remaining for the property after the request is completed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceQuotasRemaining
	{
		
		/// <summary>
		/// Daily resource quota remaining remaining.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyQuotaTokensRemaining")]
		public System.Nullable<System.Int32> DailyQuotaTokensRemaining { get; set; }
		
		/// <summary>
		/// Hourly resource quota tokens remaining.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hourlyQuotaTokensRemaining")]
		public System.Nullable<System.Int32> HourlyQuotaTokensRemaining { get; set; }
	}
	
	/// <summary>
	/// The request to fetch User Report from Reporting API `userActivity:get` call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchUserActivityRequest
	{
		
		/// <summary>
		/// Set of all activity types being requested. Only acvities matching these types will be returned in the response. If empty, all activies will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityTypes")]
		public ActivityActivityType[] ActivityTypes { get; set; }
		
		/// <summary>
		/// A contiguous set of days: startDate, startDate + 1 day, ..., endDate. The start and end dates are specified in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date format `YYYY-MM-DD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Page size is for paging and specifies the maximum number of returned rows. Page size should be > 0. If the value is 0 or if the field isn't specified, the request returns the default of 1000 rows per page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the [SearchUserActivityRequest](#SearchUserActivityRequest) request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Contains information to identify a particular user uniquely.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// Required. The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [SearchUserActivityRequest](#SearchUserActivityRequest) must contain the `viewId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewId")]
		public string ViewId { get; set; }
	}
	
	/// <summary>
	/// Contains information to identify a particular user uniquely.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Type of the user in the request. The field `userId` is associated with this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UserType> Type { get; set; }
		
		/// <summary>
		/// Unique Id of the user for which the data is being requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ID_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ID = 2,
	}
	
	/// <summary>
	/// The response from `userActivity:get` call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchUserActivityResponse
	{
		
		/// <summary>
		/// This token should be passed to [SearchUserActivityRequest](#SearchUserActivityRequest) to retrieve the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// This field represents the [sampling rate](https://support.google.com/analytics/answer/2637192) for the given request and is a number between 0.0 to 1.0. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleRate")]
		public System.Nullable<System.Double> SampleRate { get; set; }
		
		/// <summary>
		/// Each record represents a session (device details, duration, etc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public UserActivitySession[] Sessions { get; set; }
		
		/// <summary>
		/// Total rows returned by this query (across different pages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRows")]
		public System.Nullable<System.Int32> TotalRows { get; set; }
	}
	
	/// <summary>
	/// This represents a user session performed on a specific device at a certain time over a period of time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserActivitySession
	{
		
		/// <summary>
		/// Represents a detailed view into each of the activity in this session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Activity[] Activities { get; set; }
		
		/// <summary>
		/// The data source of a hit. By default, hits sent from analytics.js are reported as "web" and hits sent from the mobile SDKs are reported as "app". These values can be overridden in the Measurement Protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public string DataSource { get; set; }
		
		/// <summary>
		/// The type of device used: "mobile", "tablet" etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCategory")]
		public string DeviceCategory { get; set; }
		
		/// <summary>
		/// Platform on which the activity happened: "android", "ios" etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		/// <summary>
		/// Date of this session in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionDate")]
		public string SessionDate { get; set; }
		
		/// <summary>
		/// Unique ID of the session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the Analytics data.
		/// Analyticsreporting_reports_batchGet v4/reports:batchGet
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetReportsResponse> Analyticsreporting_reports_batchGetAsync(GetReportsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/reports:batchGet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetReportsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns User Activity data.
		/// Analyticsreporting_userActivity_search v4/userActivity:search
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SearchUserActivityResponse> Analyticsreporting_userActivity_searchAsync(SearchUserActivityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/userActivity:search";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchUserActivityResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
