//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Baggage Trip and Contact
		/// Retrieve passenger trip, contact and baggage details. This service is only accessible for LH privileged partners
		/// Baggage_Trip_and_Contact baggage/baggagetripandcontact/{searchID}
		/// </summary>
		/// <param name="searchID">Bag tag number, PNR, boarding card or FQTV ID</param>
		public async Task<string> Baggage_Trip_and_ContactAsync(string searchID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "baggage/baggagetripandcontact/"+ (searchID==null? "" : System.Uri.EscapeDataString(searchID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All Fares
		/// Retrieves all available fares for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS
		/// All_Fares offers/fares/allfares
		/// </summary>
		/// <param name="catalogues">Specifies in which catalogue the fares need to be searched (e.g.'4U;OS').</param>
		/// <param name="origin">Enter journey origin (e.g 'FRA').</param>
		/// <param name="destination">Enter journey destination (e.g 'MAD').</param>
		/// <param name="travel_date">Enter journey travel-date (e.g 2016-10-20)</param>
		/// <param name="return_date">Enter journey return-date (e.g 2016-10-31)'.</param>
		/// <param name="cabin_class">Enter the required cabin class (e.g econonmy, business etc.). (Acceptable values are: "", "economy", "premium economy", "business", "first")</param>
		/// <param name="travelers">Specifies the type and number of travelers (e.g. '(adult=2;child=2;infant=1)') For LH only (adult=1) possible.</param>
		/// <param name="fare_family">Mandatory for 4U. Specifies, which fares to be returned, such as basic, smart, best, smartflex, bestflex . (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")</param>
		/// <param name="trackingid">Austrian Airlines only - specify the web tracking id to be used in OS Deep link.</param>
		public async Task<string> All_FaresAsync(string catalogues, string origin, string destination, string travel_date, string return_date, string cabin_class, string travelers, string fare_family, string trackingid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/allfares?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin))+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&travel-date=" + (travel_date==null? "" : System.Uri.EscapeDataString(travel_date))+"&return-date=" + (return_date==null? "" : System.Uri.EscapeDataString(return_date))+"&cabin-class=" + (cabin_class==null? "" : System.Uri.EscapeDataString(cabin_class))+"&travelers=" + (travelers==null? "" : System.Uri.EscapeDataString(travelers))+"&fare-family=" + (fare_family==null? "" : System.Uri.EscapeDataString(fare_family))+"&trackingid=" + (trackingid==null? "" : System.Uri.EscapeDataString(trackingid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Best Fares
		/// Retrieve best fares for the requested journey across multiple days or multiple months.
		/// Best_Fares offers/fares/bestfares
		/// </summary>
		/// <param name="catalogues">Search fares from these carriers' catalogues (e.g. '4U;OS;LH')</param>
		/// <param name="origin">Journey origin. 3-letter IATA airport code (e.g. 'FRA')</param>
		/// <param name="destination">Journey destination. 3-letter IATA airport code (e.g. 'MAD')</param>
		/// <param name="travel_date">Journey travel-date (YYYY-MM-DD)</param>
		/// <param name="trip_duration">Trip duration in days (e.g. '7')</param>
		/// <param name="range">Fare range: 'byday' or 'bymonth' (Acceptable values are: "byday", "bymonth")</param>
		/// <param name="cabin_class">Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")</param>
		/// <param name="country">Country code of requestor. 2-letter ISO 3166-1 country code (e.g. 'de')</param>
		/// <param name="trackingid">Austrian Airlines only - specify the web tracking id to be used in OS Deep link.</param>
		/// <param name="fare_family">Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")</param>
		public async Task<string> Best_FaresAsync(string catalogues, string origin, string destination, string travel_date, string trip_duration, string range, string cabin_class, string country, string trackingid, string fare_family, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/bestfares?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin))+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&travel-date=" + (travel_date==null? "" : System.Uri.EscapeDataString(travel_date))+"&trip-duration=" + (trip_duration==null? "" : System.Uri.EscapeDataString(trip_duration))+"&range=" + (range==null? "" : System.Uri.EscapeDataString(range))+"&cabin-class=" + (cabin_class==null? "" : System.Uri.EscapeDataString(cabin_class))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&trackingid=" + (trackingid==null? "" : System.Uri.EscapeDataString(trackingid))+"&fare-family=" + (fare_family==null? "" : System.Uri.EscapeDataString(fare_family));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deep Links
		/// Returns valid deep links for the provided input parameters
		/// Deep_Links offers/fares/deeplink
		/// </summary>
		/// <param name="catalogues">Carrier for which the deep link will be created (e.g. 'LH')</param>
		/// <param name="trackingid">Deep link tracking ID</param>
		/// <param name="country">2-letter ISO 3166-1 country code</param>
		/// <param name="lang">2-letter ISO 3166-1 language code</param>
		/// <param name="origin">Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')</param>
		/// <param name="origin_name">Journey origin airport or city name (e.g. 'frankfurt')</param>
		/// <param name="destination">Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')</param>
		/// <param name="destination_name">Journey destination airport or city name (e.g. 'madrid')</param>
		/// <param name="travel_date">Journey travel-date (YYYY-MM-DD)</param>
		/// <param name="return_date">Journey return-date (YYYY-MM-DD)</param>
		/// <param name="cabin_class">Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")</param>
		/// <param name="outbound_segments">Outbound flight segments in the sequence of travel (e.g. 'LH096;LH480')</param>
		/// <param name="return_segments">Flight segments in the sequence of travel (e.g. 'LH7465;LH431')</param>
		/// <param name="travelers">Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')</param>
		/// <param name="fare">Travel fare (e.g. '1341.45')</param>
		/// <param name="net_fare">Travel net fare. Total fare less taxes and charges (e.g. '1140')</param>
		/// <param name="fare_currency">Fare currency (e.g. 'EUR')</param>
		/// <param name="partnerid">Deep link partner id (e.g. '1247')</param>
		/// <param name="encryption_key">Deep link encryption-key</param>
		public async Task<string> Deep_LinksAsync(
					string catalogues, 
					string trackingid, 
					string country, 
					string lang, 
					string origin, 
					string origin_name, 
					string destination, 
					string destination_name, 
					string travel_date, 
					string return_date, 
					string cabin_class, 
					string outbound_segments, 
					string return_segments, 
					string travelers, 
					string fare, 
					string net_fare, 
					string fare_currency, 
					string partnerid, 
					string encryption_key, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/deeplink?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&trackingid=" + (trackingid==null? "" : System.Uri.EscapeDataString(trackingid))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin))+"&origin-name=" + (origin_name==null? "" : System.Uri.EscapeDataString(origin_name))+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&destination-name=" + (destination_name==null? "" : System.Uri.EscapeDataString(destination_name))+"&travel-date=" + (travel_date==null? "" : System.Uri.EscapeDataString(travel_date))+"&return-date=" + (return_date==null? "" : System.Uri.EscapeDataString(return_date))+"&cabin-class=" + (cabin_class==null? "" : System.Uri.EscapeDataString(cabin_class))+"&outbound-segments=" + (outbound_segments==null? "" : System.Uri.EscapeDataString(outbound_segments))+"&return-segments=" + (return_segments==null? "" : System.Uri.EscapeDataString(return_segments))+"&travelers=" + (travelers==null? "" : System.Uri.EscapeDataString(travelers))+"&fare=" + (fare==null? "" : System.Uri.EscapeDataString(fare))+"&net-fare=" + (net_fare==null? "" : System.Uri.EscapeDataString(net_fare))+"&fare-currency=" + (fare_currency==null? "" : System.Uri.EscapeDataString(fare_currency))+"&partnerid=" + (partnerid==null? "" : System.Uri.EscapeDataString(partnerid))+"&encryption-key=" + (encryption_key==null? "" : System.Uri.EscapeDataString(encryption_key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// LH Deep Links - FFP
		/// Returns valid LH deep links (FFP - links to flight selection screen on LH.COM)
		/// LH_Deep_Links___FFP offers/fares/deeplink/ffp
		/// </summary>
		/// <param name="catalogues">Carrier for which the deep link will be created (e.g. 'LH')</param>
		/// <param name="origin">Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')</param>
		/// <param name="destination">Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')</param>
		/// <param name="travel_date">Journey travel-date (YYYY-MM-DD)</param>
		/// <param name="trackingid">Deep link tracking ID</param>
		/// <param name="country">2-letter ISO 3166-1 country code</param>
		/// <param name="lang">2-letter ISO 3166-1 language code</param>
		/// <param name="return_date">Journey return-date (YYYY-MM-DD)</param>
		/// <param name="cabin_class">Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")</param>
		/// <param name="travelers">Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')</param>
		/// <param name="partnerid">Deep link partner id (e.g. '1247')</param>
		/// <param name="encryption_key">Deep link encryption-key</param>
		public async Task<string> LH_Deep_Links___FFPAsync(string catalogues, string origin, string destination, string travel_date, string trackingid, string country, string lang, string return_date, string cabin_class, string travelers, string partnerid, string encryption_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/deeplink/ffp?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin))+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&travel-date=" + (travel_date==null? "" : System.Uri.EscapeDataString(travel_date))+"&trackingid=" + (trackingid==null? "" : System.Uri.EscapeDataString(trackingid))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&return-date=" + (return_date==null? "" : System.Uri.EscapeDataString(return_date))+"&cabin-class=" + (cabin_class==null? "" : System.Uri.EscapeDataString(cabin_class))+"&travelers=" + (travelers==null? "" : System.Uri.EscapeDataString(travelers))+"&partnerid=" + (partnerid==null? "" : System.Uri.EscapeDataString(partnerid))+"&encryption-key=" + (encryption_key==null? "" : System.Uri.EscapeDataString(encryption_key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// LH Deep Links - ITCO
		/// Returns valid LH deep links (ITCO - links to shopping cart on LH.COM)
		/// LH_Deep_Links___ITCO offers/fares/deeplink/itco
		/// </summary>
		/// <param name="catalogues">Carrier for which the deep link will be created (e.g. 'LH')</param>
		/// <param name="origin">Journey origin. 3-letter IATA airport or city code (e.g. 'FRA')</param>
		/// <param name="destination">Journey destination. 3-letter IATA airport or city code (e.g. 'MAD')</param>
		/// <param name="travel_date">Journey travel-date (YYYY-MM-DD)</param>
		/// <param name="outbound_segments">Outbound flight segments in the sequence of travel (e.g. 'LH096;LH480')</param>
		/// <param name="fare">Travel fare (e.g. '1341.45')</param>
		/// <param name="fare_currency">Fare currency (e.g. 'EUR')</param>
		/// <param name="trackingid">Deep link tracking ID</param>
		/// <param name="country">2-letter ISO 3166-1 country code</param>
		/// <param name="lang">2-letter ISO 3166-1 language code</param>
		/// <param name="return_date">Journey return-date (YYYY-MM-DD)</param>
		/// <param name="cabin_class">Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")</param>
		/// <param name="return_segments">Flight segments in the sequence of travel (e.g. 'LH7465;LH431')</param>
		/// <param name="travelers">Type and number of travelers (e.g. '(adult=2;child=2;infant=1)')</param>
		/// <param name="net_fare">Travel net fare. Total fare less taxes and charges (e.g. '1140')</param>
		/// <param name="partnerid">Deep link partner id (e.g. '1247')</param>
		/// <param name="encryption_key">Deep link encryption-key</param>
		public async Task<string> LH_Deep_Links___ITCOAsync(
					string catalogues, 
					string origin, 
					string destination, 
					string travel_date, 
					string outbound_segments, 
					string fare, 
					string fare_currency, 
					string trackingid, 
					string country, 
					string lang, 
					string return_date, 
					string cabin_class, 
					string return_segments, 
					string travelers, 
					string net_fare, 
					string partnerid, 
					string encryption_key, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/deeplink/itco?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin))+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&travel-date=" + (travel_date==null? "" : System.Uri.EscapeDataString(travel_date))+"&outbound-segments=" + (outbound_segments==null? "" : System.Uri.EscapeDataString(outbound_segments))+"&fare=" + (fare==null? "" : System.Uri.EscapeDataString(fare))+"&fare-currency=" + (fare_currency==null? "" : System.Uri.EscapeDataString(fare_currency))+"&trackingid=" + (trackingid==null? "" : System.Uri.EscapeDataString(trackingid))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&return-date=" + (return_date==null? "" : System.Uri.EscapeDataString(return_date))+"&cabin-class=" + (cabin_class==null? "" : System.Uri.EscapeDataString(cabin_class))+"&return-segments=" + (return_segments==null? "" : System.Uri.EscapeDataString(return_segments))+"&travelers=" + (travelers==null? "" : System.Uri.EscapeDataString(travelers))+"&net-fare=" + (net_fare==null? "" : System.Uri.EscapeDataString(net_fare))+"&partnerid=" + (partnerid==null? "" : System.Uri.EscapeDataString(partnerid))+"&encryption-key=" + (encryption_key==null? "" : System.Uri.EscapeDataString(encryption_key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fares
		/// Retrieve all available fares per fare family for a specific Origin & Destination on a given date
		/// Fares offers/fares/fares
		/// </summary>
		/// <param name="catalogues">Search fares from these carriers' catalogues - currently active for Germanwings only  (4U)</param>
		/// <param name="segments">Journey details  e.g. (origin=TXL;destination=CGN;travel-date=2016-12-15;return-date=2016-12-20;cabin=Economy)</param>
		/// <param name="carriers">Include fares for these carriers e.g. ('4U;LH')</param>
		/// <param name="travelers">Type and number of travelers e.g. (adult=1;child=1;infant=1)</param>
		/// <param name="fare_types">Fares family: basic,smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")</param>
		public async Task<string> FaresAsync(string catalogues, string segments, string carriers, string travelers, string fare_types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/fares?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&segments=" + (segments==null? "" : System.Uri.EscapeDataString(segments))+"&carriers=" + (carriers==null? "" : System.Uri.EscapeDataString(carriers))+"&travelers=" + (travelers==null? "" : System.Uri.EscapeDataString(travelers))+"&fare-types=" + (fare_types==null? "" : System.Uri.EscapeDataString(fare_types));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lowest Fares
		/// Retrieve lowest fare for a specific Origin & Destination pair on a given date. Available fares are: One-way and Return for 4U. Return only for OS & LH
		/// Lowest_Fares offers/fares/lowestfares
		/// </summary>
		/// <param name="catalogues">Search fares from these carriers' catalogues e.g. '4U;OS;LH'</param>
		/// <param name="origin">Journey origin. 3-letter IATA aiport code e.g. 'FRA'</param>
		/// <param name="destination">Journey destination. 3-letter IATA airport code e.g. 'MAD'</param>
		/// <param name="travel_date">Journey travel-date YYYY-MM-DD</param>
		/// <param name="return_date">Journey return-date - mandatory for OS and LH searches YYYY-MM-DD</param>
		/// <param name="cabin_class">Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")</param>
		/// <param name="travelers">Type and number of travelers e.g. '(adult=2;child=2;infant=1)'. For LH only (adult=1) possible</param>
		/// <param name="fare_family">Fare family: basic, smart, best, smartflex, bestflex - Germanwings only (Acceptable values are: "", "basic", "smart", "best", "smartflex", "bestflex")</param>
		/// <param name="country">Country code of requestor. 2-letter ISO 3166-1 country code (e.g. 'de')</param>
		public async Task<string> Lowest_FaresAsync(string catalogues, string origin, string destination, string travel_date, string return_date, string cabin_class, string travelers, string fare_family, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/lowestfares?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin))+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&travel-date=" + (travel_date==null? "" : System.Uri.EscapeDataString(travel_date))+"&return-date=" + (return_date==null? "" : System.Uri.EscapeDataString(return_date))+"&cabin-class=" + (cabin_class==null? "" : System.Uri.EscapeDataString(cabin_class))+"&travelers=" + (travelers==null? "" : System.Uri.EscapeDataString(travelers))+"&fare-family=" + (fare_family==null? "" : System.Uri.EscapeDataString(fare_family))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fares Subscriptions
		/// Create a subscription for best price O&D. Receive regular updates on lowest fares
		/// Fares_Subscriptions offers/fares/subscriptions
		/// </summary>
		/// <param name="origin">Journey origin. 3-leter IATA airport code (e.g. 'FRA')</param>
		/// <param name="destination">Journey destination. 3-letter IATA airport code (e.g. 'MAD')</param>
		/// <param name="cabin_class">Cabin class: 'economy', 'premium_economy', 'business', 'first' (Acceptable values are: "", "economy", "premium_economy", "business", "first")</param>
		/// <param name="trip_duration">Trip duration in days (e.g. '7')</param>
		/// <param name="email">Email Address')</param>
		/// <param name="lang">2-letter ISO 3166-1 language code</param>
		/// <param name="country">2-letter ISO 3166-1 country code</param>
		/// <param name="trackingid">Tracking parameter</param>
		public async Task<string> Fares_SubscriptionsAsync(string origin, string destination, string cabin_class, string trip_duration, string email, string lang, string country, string trackingid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/fares/subscriptions?origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin))+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&cabin-class=" + (cabin_class==null? "" : System.Uri.EscapeDataString(cabin_class))+"&trip-duration=" + (trip_duration==null? "" : System.Uri.EscapeDataString(trip_duration))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&trackingid=" + (trackingid==null? "" : System.Uri.EscapeDataString(trackingid));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// OND Route
		/// Returns LH route origin & destination information
		/// OND_Route offers/ond/route/{origin}/{destination}
		/// </summary>
		/// <param name="origin">Enter either the orgin city or orgin country code (e.g 'FRA' or 'DE'). Enter '*' for all</param>
		/// <param name="destination">Enter either the destination city or country code (e.g 'MAD' or 'ES'). Enter '*' for all</param>
		/// <param name="catalogues">Carrier for which the OND will be retrieved (e.g. 'LH')</param>
		/// <param name="limit">Number of records returned per request. Defaults to 20, maximum is 100 (if a value bigger than 100 is given, 100 will be taken)</param>
		/// <param name="offset">Number of records skipped. Defaults to 0</param>
		public async Task<string> OND_RouteAsync(string origin, string destination, string catalogues, string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/ond/route/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (destination==null? "" : System.Uri.EscapeDataString(destination))+"&catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// OND Status
		/// Returns LH network route status information. Search for recently added or retired routes
		/// OND_Status offers/ond/status
		/// </summary>
		/// <param name="catalogues">Carrier for which the OND will be retrieved (e.g. 'LH')</param>
		/// <param name="new_routes">Enter if newly added routes should be returned in the response. (Acceptable values are: "", "true", "false")</param>
		/// <param name="old_routes">Enter if old (deleted) routes should be returned in the response. (Acceptable values are: "", "true", "false")</param>
		public async Task<string> OND_StatusAsync(string catalogues, string new_routes, string old_routes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/ond/status?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&new-routes=" + (new_routes==null? "" : System.Uri.EscapeDataString(new_routes))+"&old-routes=" + (old_routes==null? "" : System.Uri.EscapeDataString(old_routes));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Top OND
		/// Returns LH Top routes per country or across all countries
		/// Top_OND offers/ond/top
		/// </summary>
		/// <param name="catalogues">Carrier for which the OND will be retrieved (e.g. 'LH')</param>
		/// <param name="origin">Enter the origin country code (e.g. 'DE'). Leave empty to search Top OND across all countries</param>
		public async Task<string> Top_ONDAsync(string catalogues, string origin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "offers/ond/top?catalogues=" + (catalogues==null? "" : System.Uri.EscapeDataString(catalogues))+"&origin=" + (origin==null? "" : System.Uri.EscapeDataString(origin));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Orders
		/// Retrieve order by ID and optionally name. This service is only accessible for LH privileged partners
		/// Orders orders/orders/{orderID}/{name}
		/// </summary>
		/// <param name="orderID">Unique order identifier</param>
		/// <param name="name">Surname of traveller</param>
		public async Task<string> OrdersAsync(string orderID, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/orders/"+ (orderID==null? "" : System.Uri.EscapeDataString(orderID))+"/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Auto Check-In
		/// Trigger an automatic check-in given a ticket number. This service is only accessible for LH privileged partners
		/// Auto_Check_In preflight/autocheckin/{ticketnumber}
		/// </summary>
		/// <param name="ticketnumber">Ticket number</param>
		/// <param name="emailAddress">Email address</param>
		public async Task<string> Auto_Check_InAsync(string ticketnumber, string emailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "preflight/autocheckin/"+ (ticketnumber==null? "" : System.Uri.EscapeDataString(ticketnumber))+"&emailAddress=" + (emailAddress==null? "" : System.Uri.EscapeDataString(emailAddress));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Price Offers
		/// Retrieve a best price offer given an origin and destination.
		/// Price_Offers promotions/priceoffers/flights/ond/{origin}/{destination}
		/// </summary>
		/// <param name="origin">Departure city. 3-letter IATA city code</param>
		/// <param name="destination">Destination city. 3-letter IATA city code</param>
		/// <param name="departureDate">Departure date in local time (YYYY-MM-DD)</param>
		/// <param name="returnDate">Return date in local time (YYYY-MM-DD)</param>
		/// <param name="service">Optional parameter.</param>
		public async Task<string> Price_OffersAsync(string origin, string destination, string departureDate, string returnDate, string service, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "promotions/priceoffers/flights/ond/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+ (destination==null? "" : System.Uri.EscapeDataString(destination))+"&departureDate=" + (departureDate==null? "" : System.Uri.EscapeDataString(departureDate))+"&returnDate=" + (returnDate==null? "" : System.Uri.EscapeDataString(returnDate))+"&service=" + (service==null? "" : System.Uri.EscapeDataString(service));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Seat Details
		/// A description of all available seat details by aircraft type. You can retrieve the full set or details for a particular aircraft type.
		/// Seat_Details references/seatdetails/{aircraftCode}/{cabinCode}
		/// </summary>
		/// <param name="aircraftCode">Aircraft type. 3-character IATA equipment code</param>
		/// <param name="cabinCode">Cabin class: M, E, C, F (Acceptable values are: "", "M", "E", "C", "F")</param>
		/// <param name="lang">2-letter ISO 3166-1 language code</param>
		public async Task<string> Seat_DetailsAsync(string aircraftCode, string cabinCode, string lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "references/seatdetails/"+ (aircraftCode==null? "" : System.Uri.EscapeDataString(aircraftCode))+"/"+ (cabinCode==null? "" : System.Uri.EscapeDataString(cabinCode))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
