//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the given Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in the `REJECTED` or `REVOKED` state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateConsentRequest
	{
		
		/// <summary>
		/// Required. The resource name of the Consent artifact that contains documentation of the user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public string ConsentArtifact { get; set; }
		
		/// <summary>
		/// Timestamp in UTC of when this Consent is considered expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// The time to live for this Consent from when it is marked as active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// The request to analyze healthcare entities in a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeEntitiesRequest
	{
		
		/// <summary>
		/// Optional. Alternative output format to be generated based on the results of analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternativeOutputFormat")]
		public System.Nullable<AnalyzeEntitiesRequestAlternativeOutputFormat> AlternativeOutputFormat { get; set; }
		
		/// <summary>
		/// document_content is a document to be annotated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentContent")]
		public string DocumentContent { get; set; }
		
		/// <summary>
		/// A list of licensed vocabularies to use in the request, in addition to the default unlicensed vocabularies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensedVocabularies")]
		public string[] LicensedVocabularies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyzeEntitiesRequestAlternativeOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FHIR_BUNDLE = 1,
	}
	
	/// <summary>
	/// Includes recognized entity mentions and relationships between them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeEntitiesResponse
	{
		
		/// <summary>
		/// The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// The `entity_mentions` field contains all the annotated medical entities that were mentioned in the provided document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityMentions")]
		public EntityMention[] EntityMentions { get; set; }
		
		/// <summary>
		/// The FHIR bundle ([`R4`](http://hl7.org/fhir/R4/bundle.html)) that includes all the entities, the entity mentions, and the relationships in JSON format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fhirBundle")]
		public string FhirBundle { get; set; }
		
		/// <summary>
		/// relationships contains all the binary relationships that were identified between entity mentions within the provided document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public EntityMentionRelationship[] Relationships { get; set; }
	}
	
	/// <summary>
	/// The candidate entities that an entity mention could link to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entity
	{
		
		/// <summary>
		/// entity_id is a first class field entity_id uniquely identifies this concept and its meta-vocabulary. For example, "UMLS/C0000970".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// preferred_term is the preferred term for this concept. For example, "Acetaminophen". For ad hoc entities formed by normalization, this is the most popular unnormalized string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredTerm")]
		public string PreferredTerm { get; set; }
		
		/// <summary>
		/// Vocabulary codes are first-class fields and differentiated from the concept unique identifier (entity_id). vocabulary_codes contains the representation of this concept in particular vocabularies, such as ICD-10, SNOMED-CT and RxNORM. These are prefixed by the name of the vocabulary, followed by the unique code within that vocabulary. For example, "RXNORM/A10334543".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vocabularyCodes")]
		public string[] VocabularyCodes { get; set; }
	}
	
	/// <summary>
	/// An entity mention in the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityMention
	{
		
		/// <summary>
		/// A feature of an entity mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certaintyAssessment")]
		public Feature CertaintyAssessment { get; set; }
		
		/// <summary>
		/// The model's confidence in this entity mention annotation. A number between 0 and 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedEntities")]
		public LinkedEntity[] LinkedEntities { get; set; }
		
		/// <summary>
		/// mention_id uniquely identifies each entity mention in a single response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentionId")]
		public string MentionId { get; set; }
		
		/// <summary>
		/// A feature of an entity mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Feature Subject { get; set; }
		
		/// <summary>
		/// A feature of an entity mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temporalAssessment")]
		public Feature TemporalAssessment { get; set; }
		
		/// <summary>
		/// A span of text in the provided document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextSpan Text { get; set; }
		
		/// <summary>
		/// The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A feature of an entity mention.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Feature
	{
		
		/// <summary>
		/// The model's confidence in this feature annotation. A number between 0 and 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// The value of this feature annotation. Its range depends on the type of the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// EntityMentions can be linked to multiple entities using a LinkedEntity message lets us add other fields, e.g. confidence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkedEntity
	{
		
		/// <summary>
		/// entity_id is a concept unique identifier. These are prefixed by a string that identifies the entity coding system, followed by the unique identifier within that system. For example, "UMLS/C0000970". This also supports ad hoc entities, which are formed by normalizing entity mention content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
	}
	
	/// <summary>
	/// A span of text in the provided document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextSpan
	{
		
		/// <summary>
		/// The unicode codepoint index of the beginning of this span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginOffset")]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		/// <summary>
		/// The original text contained in this span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	/// <summary>
	/// Defines directed relationship from one entity mention to another.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityMentionRelationship
	{
		
		/// <summary>
		/// The model's confidence in this annotation. A number between 0 and 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// object_id is the id of the object entity mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// subject_id is the id of the subject entity mention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
	}
	
	/// <summary>
	/// Archives the specified User data mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArchiveUserDataMappingRequest
	{
	}
	
	/// <summary>
	/// Archives the specified User data mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArchiveUserDataMappingResponse
	{
	}
	
	/// <summary>
	/// An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attribute
	{
		
		/// <summary>
		/// Indicates the name of an attribute defined in the consent store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeDefinitionId")]
		public string AttributeDefinitionId { get; set; }
		
		/// <summary>
		/// Required. The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines "data type" with acceptable values "questionnaire" and "step-count", when the attribute name is data type, this field must contain one of those values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// A client-defined consent attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeDefinition
	{
		
		/// <summary>
		/// Required. Possible values for the attribute. The number of allowed values must not exceed 500. An empty list is invalid. The list can only be expanded after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// Required. The category of the attribute. The value of this field cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<AttributeDefinitionCategory> Category { get; set; }
		
		/// <summary>
		/// Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentDefaultValues")]
		public string[] ConsentDefaultValues { get; set; }
		
		/// <summary>
		/// Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataMappingDefaultValue")]
		public string DataMappingDefaultValue { get; set; }
		
		/// <summary>
		/// Optional. A description of the attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttributeDefinitionCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST = 2,
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Mask a string by replacing its characters with a fixed character.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CharacterMaskConfig
	{
		
		/// <summary>
		/// Character to mask the sensitive values. If not supplied, defaults to "*".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maskingCharacter")]
		public string MaskingCharacter { get; set; }
	}
	
	/// <summary>
	/// Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckDataAccessRequest
	{
		
		/// <summary>
		/// List of resource names of Consent resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentList")]
		public ConsentList ConsentList { get; set; }
		
		/// <summary>
		/// Required. The unique identifier of the resource to check access for. This identifier must correspond to a User data mapping in the given consent store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataId")]
		public string DataId { get; set; }
		
		/// <summary>
		/// The values of request attributes associated with this access request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public System.Collections.Generic.Dictionary<string, string> RequestAttributes { get; set; }
		
		/// <summary>
		/// Optional. The view for CheckDataAccessResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseView")]
		public System.Nullable<CheckDataAccessRequestResponseView> ResponseView { get; set; }
	}
	
	/// <summary>
	/// List of resource names of Consent resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConsentList
	{
		
		/// <summary>
		/// The resource names of the Consents to evaluate against, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consents")]
		public string[] Consents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckDataAccessRequestResponseView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
	
	/// <summary>
	/// Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckDataAccessResponse
	{
		
		/// <summary>
		/// The resource names of all evaluated Consents mapped to their evaluation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentDetails")]
		public System.Collections.Generic.Dictionary<string, ConsentEvaluation> ConsentDetails { get; set; }
		
		/// <summary>
		/// Whether the requested resource is consented for the given use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consented")]
		public System.Nullable<System.Boolean> Consented { get; set; }
	}
	
	/// <summary>
	/// The detailed evaluation of a particular Consent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConsentEvaluation
	{
		
		/// <summary>
		/// The evaluation result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluationResult")]
		public System.Nullable<ConsentEvaluationEvaluationResult> EvaluationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConsentEvaluationEvaluationResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVALUATION_RESULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_MATCHING_POLICY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SATISFIED_POLICY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAS_SATISFIED_POLICY = 4,
	}
	
	/// <summary>
	/// Represents a user's consent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Consent
	{
		
		/// <summary>
		/// Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public string ConsentArtifact { get; set; }
		
		/// <summary>
		/// Timestamp in UTC of when this Consent is considered expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public GoogleCloudHealthcareV1ConsentPolicy[] Policies { get; set; }
		
		/// <summary>
		/// Output only. The timestamp that the revision was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionCreateTime")]
		public string RevisionCreateTime { get; set; }
		
		/// <summary>
		/// Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Required. Indicates the current state of this Consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ConsentState> State { get; set; }
		
		/// <summary>
		/// Input only. The time to live for this Consent from when it is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		/// <summary>
		/// Required. User's UUID provided by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Represents a user's consent in terms of the resources that can be accessed and under what conditions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1ConsentPolicy
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationRule")]
		public Expr AuthorizationRule { get; set; }
		
		/// <summary>
		/// The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceAttributes")]
		public Attribute[] ResourceAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConsentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
	}
	
	/// <summary>
	/// Documentation of a user's consent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConsentArtifact
	{
		
		/// <summary>
		/// Optional. Screenshots, PDFs, or other binary information documenting the user's consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentContentScreenshots")]
		public Image[] ConsentContentScreenshots { get; set; }
		
		/// <summary>
		/// Optional. An string indicating the version of the consent information shown to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentContentVersion")]
		public string ConsentContentVersion { get; set; }
		
		/// <summary>
		/// User signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guardianSignature")]
		public Signature GuardianSignature { get; set; }
		
		/// <summary>
		/// Optional. Metadata associated with the Consent artifact. For example, the consent locale or user agent version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Resource name of the Consent artifact, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. Cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. User's UUID provided by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// User signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userSignature")]
		public Signature UserSignature { get; set; }
		
		/// <summary>
		/// User signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="witnessSignature")]
		public Signature WitnessSignature { get; set; }
	}
	
	/// <summary>
	/// Raw bytes representing consent artifact content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsUri")]
		public string GcsUri { get; set; }
		
		/// <summary>
		/// Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawBytes")]
		public string RawBytes { get; set; }
	}
	
	/// <summary>
	/// User signature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Signature
	{
		
		/// <summary>
		/// Raw bytes representing consent artifact content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// Optional. Timestamp of the signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureTime")]
		public string SignatureTime { get; set; }
		
		/// <summary>
		/// Required. User's UUID provided by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Represents a consent store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConsentStore
	{
		
		/// <summary>
		/// Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultConsentTtl")]
		public string DefaultConsentTtl { get; set; }
		
		/// <summary>
		/// Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableConsentCreateOnUpdate")]
		public System.Nullable<System.Boolean> EnableConsentCreateOnUpdate { get; set; }
		
		/// <summary>
		/// Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Creates a new message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMessageRequest
	{
		
		/// <summary>
		/// A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	/// <summary>
	/// A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		/// <summary>
		/// Output only. The datetime when the message was created. Set by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Raw message bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The message type for this message. MSH-9.1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageType")]
		public string MessageType { get; set; }
		
		/// <summary>
		/// Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The content of a HL7v2 message in a structured format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parsedData")]
		public ParsedData ParsedData { get; set; }
		
		/// <summary>
		/// All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patientIds")]
		public PatientId[] PatientIds { get; set; }
		
		/// <summary>
		/// The content of an HL7v2 message in a structured format as specified by a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schematizedData")]
		public SchematizedData SchematizedData { get; set; }
		
		/// <summary>
		/// The hospital that this message came from. MSH-4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendFacility")]
		public string SendFacility { get; set; }
		
		/// <summary>
		/// The datetime the sending application sent this message. MSH-7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendTime")]
		public string SendTime { get; set; }
	}
	
	/// <summary>
	/// The content of a HL7v2 message in a structured format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParsedData
	{
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public Segment[] Segments { get; set; }
	}
	
	/// <summary>
	/// A segment in a structured format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Segment
	{
		
		/// <summary>
		/// A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\d+)(\[\d+\])?(.\d+)?(.\d+)? Examples of (key, value) pairs: * (0.1, "hemoglobin") denotes that the first component of Field 0 has the value "hemoglobin". * (1.1.2, "CBC") denotes that the second sub-component of the first component of Field 1 has the value "CBC". * (1[0].1, "HbA1c") denotes that the first component of the first Instance of Field 1, which is repeated, has the value "HbA1c".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public System.Collections.Generic.Dictionary<string, string> Fields { get; set; }
		
		/// <summary>
		/// A string that indicates the type of segment. For example, EVN or PID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		/// <summary>
		/// Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setId")]
		public string SetId { get; set; }
	}
	
	/// <summary>
	/// A patient identifier and associated type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatientId
	{
		
		/// <summary>
		/// ID type. For example, MRN or NHS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The patient's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The content of an HL7v2 message in a structured format as specified by a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchematizedData
	{
		
		/// <summary>
		/// JSON output of the parser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The error output of the parser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
	}
	
	/// <summary>
	/// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CryptoHashConfig
	{
		
		/// <summary>
		/// An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKey")]
		public string CryptoKey { get; set; }
		
		/// <summary>
		/// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsWrapped")]
		public KmsWrappedCryptoKey KmsWrapped { get; set; }
	}
	
	/// <summary>
	/// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KmsWrappedCryptoKey
	{
		
		/// <summary>
		/// Required. The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKey")]
		public string CryptoKey { get; set; }
		
		/// <summary>
		/// Required. The wrapped data crypto key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrappedKey")]
		public string WrappedKey { get; set; }
	}
	
	/// <summary>
	/// A message representing a health dataset. A health dataset represents a collection of healthcare data pertaining to one or more patients. This may include multiple modalities of healthcare data, such as electronic medical records or medical imaging data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		/// <summary>
		/// Resource name of the dataset, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The default timezone used by this dataset. Must be a either a valid IANA time zone name such as "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources, such as HL7 messages, where no explicit timezone is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateShiftConfig
	{
		
		/// <summary>
		/// An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoKey")]
		public string CryptoKey { get; set; }
		
		/// <summary>
		/// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsWrapped")]
		public KmsWrappedCryptoKey KmsWrapped { get; set; }
	}
	
	/// <summary>
	/// Contains configuration for streaming de-identified FHIR export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeidentifiedStoreDestination
	{
		
		/// <summary>
		/// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public DeidentifyConfig Config { get; set; }
		
		/// <summary>
		/// The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="store")]
		public string Store { get; set; }
	}
	
	/// <summary>
	/// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeidentifyConfig
	{
		
		/// <summary>
		/// Specifies the parameters needed for de-identification of DICOM stores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dicom")]
		public DicomConfig Dicom { get; set; }
		
		/// <summary>
		/// Specifies how to handle de-identification of a FHIR store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fhir")]
		public FhirConfig Fhir { get; set; }
		
		/// <summary>
		/// Specifies how to handle de-identification of image pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageConfig Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public TextConfig Text { get; set; }
		
		/// <summary>
		/// Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useRegionalDataProcessing")]
		public System.Nullable<System.Boolean> UseRegionalDataProcessing { get; set; }
	}
	
	/// <summary>
	/// Specifies the parameters needed for de-identification of DICOM stores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DicomConfig
	{
		
		/// <summary>
		/// Tag filtering profile that determines which tags to keep/remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterProfile")]
		public System.Nullable<DicomConfigFilterProfile> FilterProfile { get; set; }
		
		/// <summary>
		/// List of tags to be filtered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepList")]
		public TagFilterList KeepList { get; set; }
		
		/// <summary>
		/// List of tags to be filtered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeList")]
		public TagFilterList RemoveList { get; set; }
		
		/// <summary>
		/// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipIdRedaction")]
		public System.Nullable<System.Boolean> SkipIdRedaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DicomConfigFilterProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_FILTER_PROFILE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMAL_KEEP_LIST_PROFILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEEP_ALL_PROFILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEIDENTIFY_TAG_CONTENTS = 4,
	}
	
	/// <summary>
	/// List of tags to be filtered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagFilterList
	{
		
		/// <summary>
		/// Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies how to handle de-identification of a FHIR store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FhirConfig
	{
		
		/// <summary>
		/// The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultKeepExtensions")]
		public System.Nullable<System.Boolean> DefaultKeepExtensions { get; set; }
		
		/// <summary>
		/// Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldMetadataList")]
		public FieldMetadata[] FieldMetadataList { get; set; }
	}
	
	/// <summary>
	/// Specifies FHIR paths to match, and how to handle de-identification of matching fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldMetadata
	{
		
		/// <summary>
		/// Deidentify action for one field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<FieldMetadataAction> Action { get; set; }
		
		/// <summary>
		/// List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For "choice" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldMetadataAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSPECT_AND_TRANSFORM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOT_TRANSFORM = 3,
	}
	
	/// <summary>
	/// Specifies how to handle de-identification of image pixels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageConfig
	{
		
		/// <summary>
		/// Determines how to redact text from image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRedactionMode")]
		public System.Nullable<ImageConfigTextRedactionMode> TextRedactionMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageConfigTextRedactionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_REDACTION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDACT_ALL_TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDACT_SENSITIVE_TEXT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDACT_NO_TEXT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextConfig
	{
		
		/// <summary>
		/// Transformations to apply to the detected data, overridden by `exclude_info_types`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalTransformations")]
		public InfoTypeTransformation[] AdditionalTransformations { get; set; }
		
		/// <summary>
		/// InfoTypes to skip transforming, overriding `additional_transformations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeInfoTypes")]
		public string[] ExcludeInfoTypes { get; set; }
		
		/// <summary>
		/// The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformations")]
		public InfoTypeTransformation[] Transformations { get; set; }
	}
	
	/// <summary>
	/// A transformation to apply to text that is identified as a specific info_type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InfoTypeTransformation
	{
		
		/// <summary>
		/// Mask a string by replacing its characters with a fixed character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterMaskConfig")]
		public CharacterMaskConfig CharacterMaskConfig { get; set; }
		
		/// <summary>
		/// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoHashConfig")]
		public CryptoHashConfig CryptoHashConfig { get; set; }
		
		/// <summary>
		/// Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateShiftConfig")]
		public DateShiftConfig DateShiftConfig { get; set; }
		
		/// <summary>
		/// InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infoTypes")]
		public string[] InfoTypes { get; set; }
		
		/// <summary>
		/// Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redactConfig")]
		public RedactConfig RedactConfig { get; set; }
		
		/// <summary>
		/// When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceWithInfoTypeConfig")]
		public ReplaceWithInfoTypeConfig ReplaceWithInfoTypeConfig { get; set; }
	}
	
	/// <summary>
	/// Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RedactConfig
	{
	}
	
	/// <summary>
	/// When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceWithInfoTypeConfig
	{
	}
	
	/// <summary>
	/// Redacts identifying information from the specified dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeidentifyDatasetRequest
	{
		
		/// <summary>
		/// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public DeidentifyConfig Config { get; set; }
		
		/// <summary>
		/// The name of the dataset resource to create and write the redacted data to. * The destination dataset must not exist. * The destination dataset must be in the same location as the source dataset. De-identifying data across multiple locations is not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationDataset")]
		public string DestinationDataset { get; set; }
		
		/// <summary>
		/// Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project's Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsConfigUri")]
		public string GcsConfigUri { get; set; }
	}
	
	/// <summary>
	/// Creates a new DICOM store with sensitive information de-identified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeidentifyDicomStoreRequest
	{
		
		/// <summary>
		/// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public DeidentifyConfig Config { get; set; }
		
		/// <summary>
		/// The name of the DICOM store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination DICOM store must not exist. * The caller must have the necessary permissions to create the destination DICOM store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationStore")]
		public string DestinationStore { get; set; }
		
		/// <summary>
		/// Specifies the filter configuration for DICOM resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterConfig")]
		public DicomFilterConfig FilterConfig { get; set; }
		
		/// <summary>
		/// Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project's Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsConfigUri")]
		public string GcsConfigUri { get; set; }
	}
	
	/// <summary>
	/// Specifies the filter configuration for DICOM resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DicomFilterConfig
	{
		
		/// <summary>
		/// The Cloud Storage location of the filter configuration file. The `gcs_uri` must be in the format `gs://bucket/path/to/object`. The filter configuration file must contain a list of resource paths separated by newline characters (\n or \r\n). Each resource path must be in the format "/studies/{studyUID}[/series/{seriesUID}[/instances/{instanceUID}]]" The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePathsGcsUri")]
		public string ResourcePathsGcsUri { get; set; }
	}
	
	/// <summary>
	/// Creates a new FHIR store with sensitive information de-identified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeidentifyFhirStoreRequest
	{
		
		/// <summary>
		/// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public DeidentifyConfig Config { get; set; }
		
		/// <summary>
		/// The name of the FHIR store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination FHIR store must exist. * The caller must have the healthcare.fhirResources.update permission to write to the destination FHIR store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationStore")]
		public string DestinationStore { get; set; }
		
		/// <summary>
		/// Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project's Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsConfigUri")]
		public string GcsConfigUri { get; set; }
		
		/// <summary>
		/// Filter configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceFilter")]
		public FhirFilter ResourceFilter { get; set; }
		
		/// <summary>
		/// If true, skips resources that are created or modified after the de-identify operation is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipModifiedResources")]
		public System.Nullable<System.Boolean> SkipModifiedResources { get; set; }
	}
	
	/// <summary>
	/// Filter configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FhirFilter
	{
		
		/// <summary>
		/// A list of FHIR resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Resources Resources { get; set; }
	}
	
	/// <summary>
	/// A list of FHIR resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resources
	{
		
		/// <summary>
		/// List of resources IDs. For example, "Patient/1234".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources1 { get; set; }
	}
	
	/// <summary>
	/// Contains a summary of the Deidentify operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeidentifySummary
	{
	}
	
	/// <summary>
	/// Represents a DICOM store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DicomStore
	{
		
		/// <summary>
		/// User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies where to send notifications upon changes to a data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationConfig")]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// Optional. A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to `stream_configs`, DICOM instance insertions are streamed to the new destination. When a config is removed from `stream_configs`, the server stops streaming to that destination. Each config must contain a unique destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamConfigs")]
		public GoogleCloudHealthcareV1DicomStreamConfig[] StreamConfigs { get; set; }
	}
	
	/// <summary>
	/// Specifies where to send notifications upon changes to a data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationConfig
	{
		
		/// <summary>
		/// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
		
		/// <summary>
		/// Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendForBulkImport")]
		public System.Nullable<System.Boolean> SendForBulkImport { get; set; }
	}
	
	/// <summary>
	/// StreamConfig specifies configuration for a streaming DICOM export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1DicomStreamConfig
	{
		
		/// <summary>
		/// The BigQuery table where the server writes the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigqueryDestination")]
		public GoogleCloudHealthcareV1DicomBigQueryDestination BigqueryDestination { get; set; }
	}
	
	/// <summary>
	/// The BigQuery table where the server writes the output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1DicomBigQueryDestination
	{
		
		/// <summary>
		/// Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableUri")]
		public string TableUri { get; set; }
		
		/// <summary>
		/// Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeDisposition")]
		public System.Nullable<GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDisposition> WriteDisposition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDisposition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE_DISPOSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE_EMPTY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE_TRUNCATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE_APPEND = 3,
	}
	
	/// <summary>
	/// DicomStoreMetrics contains metrics describing a DICOM store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DicomStoreMetrics
	{
		
		/// <summary>
		/// Total blob storage bytes for all instances in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobStorageSizeBytes")]
		public string BlobStorageSizeBytes { get; set; }
		
		/// <summary>
		/// Number of instances in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceCount")]
		public string InstanceCount { get; set; }
		
		/// <summary>
		/// Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of series in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seriesCount")]
		public string SeriesCount { get; set; }
		
		/// <summary>
		/// Total structured storage bytes for all instances in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredStorageSizeBytes")]
		public string StructuredStorageSizeBytes { get; set; }
		
		/// <summary>
		/// Number of studies in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studyCount")]
		public string StudyCount { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Evaluate a user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, causing slight delays between the time mappings are created or updated and when they are included in EvaluateUserConsents results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateUserConsentsRequest
	{
		
		/// <summary>
		/// List of resource names of Consent resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentList")]
		public ConsentList ConsentList { get; set; }
		
		/// <summary>
		/// Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Optional. Token to retrieve the next page of results, or empty to get the first page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Required. The values of request attributes associated with this access request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public System.Collections.Generic.Dictionary<string, string> RequestAttributes { get; set; }
		
		/// <summary>
		/// Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceAttributes")]
		public System.Collections.Generic.Dictionary<string, string> ResourceAttributes { get; set; }
		
		/// <summary>
		/// Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseView")]
		public CheckDataAccessRequestResponseView ResponseView { get; set; }
		
		/// <summary>
		/// Required. User ID to evaluate consents for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateUserConsentsResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list. This token is valid for 72 hours after it is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The consent evaluation result for each `data_id`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Result[] Results { get; set; }
	}
	
	/// <summary>
	/// The consent evaluation result for a single `data_id`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Result
	{
		
		/// <summary>
		/// The resource names of all evaluated Consents mapped to their evaluation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentDetails")]
		public System.Collections.Generic.Dictionary<string, ConsentEvaluation> ConsentDetails { get; set; }
		
		/// <summary>
		/// Whether the resource is consented for the given use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consented")]
		public System.Nullable<System.Boolean> Consented { get; set; }
		
		/// <summary>
		/// The unique identifier of the evaluated resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataId")]
		public string DataId { get; set; }
	}
	
	/// <summary>
	/// Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportDicomDataRequest
	{
		
		/// <summary>
		/// The BigQuery table where the server writes the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigqueryDestination")]
		public GoogleCloudHealthcareV1DicomBigQueryDestination BigqueryDestination { get; set; }
		
		/// <summary>
		/// The Cloud Storage location where the server writes the output and the export configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GoogleCloudHealthcareV1DicomGcsDestination GcsDestination { get; set; }
	}
	
	/// <summary>
	/// The Cloud Storage location where the server writes the output and the export configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1DicomGcsDestination
	{
		
		/// <summary>
		/// MIME types supported by DICOM spec. Each file is written in the following format: `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction. Specifically, the following are supported: - application/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000) - application/dicom; transfer-syntax=* (DICOM with no transcoding) - application/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png The following extensions are used for output files: - application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png - application/octet-stream -> no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriPrefix")]
		public string UriPrefix { get; set; }
	}
	
	/// <summary>
	/// Returns additional information in regards to a completed DICOM store export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportDicomDataResponse
	{
	}
	
	/// <summary>
	/// Request to schedule an export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportMessagesRequest
	{
		
		/// <summary>
		/// The end of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the time when the export is scheduled is used. This value has to come after the `start_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Restricts messages exported to those matching a filter, only applicable to PubsubDestination. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in the `yyyy-mm-dd` format. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, and is just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the `yyyy-mm-dd` date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. Note: The filter will be applied to every message in the HL7v2 store whose `send_time` lies in the range defined by the `start_time` and the `end_time`. Even if the filter only matches a small set of messages, the export operation can still take a long time to finish when a lot of messages are between the specified `start_time` and `end_time` range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GcsDestination GcsDestination { get; set; }
		
		/// <summary>
		/// The Pub/Sub output destination. The Cloud Healthcare Service Agent requires the `roles/pubsub.publisher` Cloud IAM role on the Pub/Sub topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubDestination")]
		public PubsubDestination PubsubDestination { get; set; }
		
		/// <summary>
		/// The start of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z) is used. This value has to come before the `end_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GcsDestination
	{
		
		/// <summary>
		/// The format of the exported HL7v2 message files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentStructure")]
		public System.Nullable<GcsDestinationContentStructure> ContentStructure { get; set; }
		
		/// <summary>
		/// Specifies the parts of the Message resource to include in the export. If not specified, FULL is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageView")]
		public System.Nullable<GcsDestinationMessageView> MessageView { get; set; }
		
		/// <summary>
		/// URI of an existing Cloud Storage directory where the server writes result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriPrefix")]
		public string UriPrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GcsDestinationContentStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_STRUCTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_JSON = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GcsDestinationMessageView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSED_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEMATIZED_ONLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 5,
	}
	
	/// <summary>
	/// The Pub/Sub output destination. The Cloud Healthcare Service Agent requires the `roles/pubsub.publisher` Cloud IAM role on the Pub/Sub topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PubsubDestination
	{
		
		/// <summary>
		/// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that Pub/Sub messages are published on. Supplied by the client. The `PubsubMessage` contains the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
	}
	
	/// <summary>
	/// Final response for the export operation. This structure is included in the response to describe the detailed outcome.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportMessagesResponse
	{
	}
	
	/// <summary>
	/// Request to export resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportResourcesRequest
	{
		
		/// <summary>
		/// If provided, only resources updated after this time are exported. The time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example, `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time must be specified to the second and include a time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _since { get; set; }
		
		/// <summary>
		/// String of comma-delimited FHIR resource types. If provided, only resources of the specified resource type(s) are exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
		
		/// <summary>
		/// The configuration for exporting to BigQuery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigqueryDestination")]
		public GoogleCloudHealthcareV1FhirBigQueryDestination BigqueryDestination { get; set; }
		
		/// <summary>
		/// The configuration for exporting to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GoogleCloudHealthcareV1FhirGcsDestination GcsDestination { get; set; }
	}
	
	/// <summary>
	/// The configuration for exporting to BigQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1FhirBigQueryDestination
	{
		
		/// <summary>
		/// BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetUri")]
		public string DatasetUri { get; set; }
		
		/// <summary>
		/// If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaConfig")]
		public SchemaConfig SchemaConfig { get; set; }
		
		/// <summary>
		/// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeDisposition")]
		public GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDisposition WriteDisposition { get; set; }
	}
	
	/// <summary>
	/// Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaConfig
	{
		
		/// <summary>
		/// Configuration for FHIR BigQuery time-partitioned tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedPartitionConfig")]
		public TimePartitioning LastUpdatedPartitionConfig { get; set; }
		
		/// <summary>
		/// The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recursiveStructureDepth")]
		public string RecursiveStructureDepth { get; set; }
		
		/// <summary>
		/// Specifies the output schema type. Schema type is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaType")]
		public System.Nullable<SchemaConfigSchemaType> SchemaType { get; set; }
	}
	
	/// <summary>
	/// Configuration for FHIR BigQuery time-partitioned tables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimePartitioning
	{
		
		/// <summary>
		/// Number of milliseconds for which to keep the storage for a partition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationMs")]
		public string ExpirationMs { get; set; }
		
		/// <summary>
		/// Type of partitioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TimePartitioningType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TimePartitioningType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTITION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchemaConfigSchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEMA_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANALYTICS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANALYTICS_V2 = 2,
	}
	
	/// <summary>
	/// The configuration for exporting to Cloud Storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1FhirGcsDestination
	{
		
		/// <summary>
		/// URI for a Cloud Storage directory where result files should be written, in the format of `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriPrefix")]
		public string UriPrefix { get; set; }
	}
	
	/// <summary>
	/// Response when all resources export successfully. This structure is included in the response to describe the detailed outcome after the operation finishes successfully.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportResourcesResponse
	{
	}
	
	/// <summary>
	/// Contains the configuration for FHIR notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FhirNotificationConfig
	{
		
		/// <summary>
		/// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
		
		/// <summary>
		/// Whether to send full FHIR resource to this Pub/Sub topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendFullResource")]
		public System.Nullable<System.Boolean> SendFullResource { get; set; }
		
		/// <summary>
		/// Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the "payloadType" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendPreviousResourceOnDelete")]
		public System.Nullable<System.Boolean> SendPreviousResourceOnDelete { get; set; }
	}
	
	/// <summary>
	/// Represents a FHIR store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FhirStore
	{
		
		/// <summary>
		/// Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New stores will have this value set to ENABLED after a notification period. Warning: turning on this flag causes processing existing resources to fail if they contain references to non-existent resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complexDataTypeReferenceParsing")]
		public System.Nullable<FhirStoreComplexDataTypeReferenceParsing> ComplexDataTypeReferenceParsing { get; set; }
		
		/// <summary>
		/// If true, overrides the default search behavior for this FHIR store to `handling=strict` which returns an error for unrecognized search parameters. If false, uses the FHIR specification default `handling=lenient` which ignores unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting the HTTP header `Prefer: handling=strict` or `Prefer: handling=lenient`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultSearchHandlingStrict")]
		public System.Nullable<System.Boolean> DefaultSearchHandlingStrict { get; set; }
		
		/// <summary>
		/// Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableReferentialIntegrity")]
		public System.Nullable<System.Boolean> DisableReferentialIntegrity { get; set; }
		
		/// <summary>
		/// Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableResourceVersioning")]
		public System.Nullable<System.Boolean> DisableResourceVersioning { get; set; }
		
		/// <summary>
		/// Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableUpdateCreate")]
		public System.Nullable<System.Boolean> EnableUpdateCreate { get; set; }
		
		/// <summary>
		/// User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies where to send notifications upon changes to a data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationConfig")]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// Specifies where and whether to send notifications upon changes to a FHIR store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationConfigs")]
		public FhirNotificationConfig[] NotificationConfigs { get; set; }
		
		/// <summary>
		/// A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamConfigs")]
		public StreamConfig[] StreamConfigs { get; set; }
		
		/// <summary>
		/// Contains the configuration for FHIR profiles and validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationConfig")]
		public ValidationConfig ValidationConfig { get; set; }
		
		/// <summary>
		/// Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<FhirStoreVersion> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FhirStoreComplexDataTypeReferenceParsing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 2,
	}
	
	/// <summary>
	/// Contains configuration for streaming FHIR export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamConfig
	{
		
		/// <summary>
		/// The configuration for exporting to BigQuery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigqueryDestination")]
		public GoogleCloudHealthcareV1FhirBigQueryDestination BigqueryDestination { get; set; }
		
		/// <summary>
		/// Contains configuration for streaming de-identified FHIR export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deidentifiedStoreDestination")]
		public DeidentifiedStoreDestination DeidentifiedStoreDestination { get; set; }
		
		/// <summary>
		/// Supply a FHIR resource type (such as "Patient" or "Observation"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTypes")]
		public string[] ResourceTypes { get; set; }
	}
	
	/// <summary>
	/// Contains the configuration for FHIR profiles and validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationConfig
	{
		
		/// <summary>
		/// Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableFhirpathValidation")]
		public System.Nullable<System.Boolean> DisableFhirpathValidation { get; set; }
		
		/// <summary>
		/// Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableProfileValidation")]
		public System.Nullable<System.Boolean> DisableProfileValidation { get; set; }
		
		/// <summary>
		/// Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableReferenceTypeValidation")]
		public System.Nullable<System.Boolean> DisableReferenceTypeValidation { get; set; }
		
		/// <summary>
		/// Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableRequiredFieldValidation")]
		public System.Nullable<System.Boolean> DisableRequiredFieldValidation { get; set; }
		
		/// <summary>
		/// A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledImplementationGuides")]
		public string[] EnabledImplementationGuides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FhirStoreVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DSTU2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STU3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		R4 = 3,
	}
	
	/// <summary>
	/// Count of resources and total storage size by type for a given FHIR store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FhirStoreMetric
	{
		
		/// <summary>
		/// The total count of FHIR resources in the store of this resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// The FHIR resource type this metric applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The total amount of structured storage used by FHIR resources of this resource type in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredStorageSizeBytes")]
		public string StructuredStorageSizeBytes { get; set; }
	}
	
	/// <summary>
	/// List of metrics for a given FHIR store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FhirStoreMetrics
	{
		
		/// <summary>
		/// List of FhirStoreMetric by resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public FhirStoreMetric[] Metrics { get; set; }
		
		/// <summary>
		/// The resource name of the FHIR store to get metrics for, in the format `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A (sub) field of a type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Field
	{
		
		/// <summary>
		/// The maximum number of times this field can be repeated. 0 or -1 means unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxOccurs")]
		public System.Nullable<System.Int32> MaxOccurs { get; set; }
		
		/// <summary>
		/// The minimum number of times this field must be present/repeated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minOccurs")]
		public System.Nullable<System.Int32> MinOccurs { get; set; }
		
		/// <summary>
		/// The name of the field. For example, "PID-1" or just "1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table "0296".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
		
		/// <summary>
		/// The type of this field. A Type with this name must be defined in an Hl7TypesConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration for importing data from Cloud Storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GcsSource
	{
		
		/// <summary>
		/// Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.ndjson` imports all files with `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The Cloud Storage location for export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1ConsentGcsDestination
	{
		
		/// <summary>
		/// URI for a Cloud Storage directory where the server writes result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket and directory referenced in `uri_prefix`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uriPrefix")]
		public string UriPrefix { get; set; }
	}
	
	/// <summary>
	/// Contains a summary of the DeidentifyDicomStore operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary
	{
	}
	
	/// <summary>
	/// Contains a summary of the DeidentifyFhirStore operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary
	{
	}
	
	/// <summary>
	/// Specifies the configuration for importing data from Cloud Storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1DicomGcsSource
	{
		
		/// <summary>
		/// Points to a Cloud Storage URI containing file(s) with content only. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * '*' to match 0 or more non-separator characters * '**' to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .dcm), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.dcm` imports all files with .dcm extensions in `my-directory/` and its sub-directories. * '?' to match 1 character. All other URI formats are invalid. Files matching the wildcard are expected to contain content only, no metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration for importing data from Cloud Storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudHealthcareV1FhirGcsSource
	{
		
		/// <summary>
		/// Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.ndjson` imports all files with `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Construct representing a logical group or a segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupOrSegment
	{
		
		/// <summary>
		/// An HL7v2 logical group construct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public SchemaGroup Group { get; set; }
		
		/// <summary>
		/// An HL7v2 Segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public SchemaSegment Segment { get; set; }
	}
	
	/// <summary>
	/// An HL7v2 logical group construct.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaGroup
	{
		
		/// <summary>
		/// True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="choice")]
		public System.Nullable<System.Boolean> Choice { get; set; }
		
		/// <summary>
		/// The maximum number of times this group can be repeated. 0 or -1 means unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxOccurs")]
		public System.Nullable<System.Int32> MaxOccurs { get; set; }
		
		/// <summary>
		/// Nested groups and/or segments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public GroupOrSegment[] Members { get; set; }
		
		/// <summary>
		/// The minimum number of times this group must be present/repeated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minOccurs")]
		public System.Nullable<System.Int32> MinOccurs { get; set; }
		
		/// <summary>
		/// The name of this group. For example, "ORDER_DETAIL".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An HL7v2 Segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaSegment
	{
		
		/// <summary>
		/// The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxOccurs")]
		public System.Nullable<System.Int32> MaxOccurs { get; set; }
		
		/// <summary>
		/// The minimum number of times this segment can be present in this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minOccurs")]
		public System.Nullable<System.Int32> MinOccurs { get; set; }
		
		/// <summary>
		/// The Segment type. For example, "PID".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hl7SchemaConfig
	{
		
		/// <summary>
		/// Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageSchemaConfigs")]
		public System.Collections.Generic.Dictionary<string, SchemaGroup> MessageSchemaConfigs { get; set; }
		
		/// <summary>
		/// Each VersionSource is tested and only if they all match is the schema used for the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public VersionSource[] Version { get; set; }
	}
	
	/// <summary>
	/// Describes a selector for extracting and matching an MSH field to a value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VersionSource
	{
		
		/// <summary>
		/// The field to extract from the MSH segment. For example, "3.1" or "18[1].1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mshField")]
		public string MshField { get; set; }
		
		/// <summary>
		/// The value to match with the field. For example, "My Application Name" or "2.3".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Root config for HL7v2 datatype definitions for a specific HL7v2 version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hl7TypesConfig
	{
		
		/// <summary>
		/// The HL7v2 type definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Type[] Type { get; set; }
		
		/// <summary>
		/// The version selectors that this config applies to. A message must match ALL version sources to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public VersionSource[] Version { get; set; }
	}
	
	/// <summary>
	/// A type definition for some HL7v2 type (incl. Segments and Datatypes).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Type
	{
		
		/// <summary>
		/// The (sub) fields this type has (if not primitive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Field[] Fields { get; set; }
		
		/// <summary>
		/// The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primitive")]
		public System.Nullable<TypePrimitive> Primitive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TypePrimitive
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMITIVE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNESCAPED_STRING = 3,
	}
	
	/// <summary>
	/// Specifies where and whether to send notifications upon changes to a data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hl7V2NotificationConfig
	{
		
		/// <summary>
		/// Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
	}
	
	/// <summary>
	/// Represents an HL7v2 store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hl7V2Store
	{
		
		/// <summary>
		/// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationConfigs")]
		public Hl7V2NotificationConfig[] NotificationConfigs { get; set; }
		
		/// <summary>
		/// The configuration for the parser. It determines how the server parses the messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parserConfig")]
		public ParserConfig ParserConfig { get; set; }
		
		/// <summary>
		/// Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectDuplicateMessage")]
		public System.Nullable<System.Boolean> RejectDuplicateMessage { get; set; }
	}
	
	/// <summary>
	/// The configuration for the parser. It determines how the server parses the messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParserConfig
	{
		
		/// <summary>
		/// Determines whether messages with no header are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowNullHeader")]
		public System.Nullable<System.Boolean> AllowNullHeader { get; set; }
		
		/// <summary>
		/// A schema package contains a set of schemas and type definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public SchemaPackage Schema { get; set; }
		
		/// <summary>
		/// Byte(s) to use as the segment terminator. If this is unset, '\r' is used as segment terminator, matching the HL7 version 2 specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentTerminator")]
		public string SegmentTerminator { get; set; }
		
		/// <summary>
		/// Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<ParserConfigVersion> Version { get; set; }
	}
	
	/// <summary>
	/// A schema package contains a set of schemas and type definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaPackage
	{
		
		/// <summary>
		/// Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreMinOccurs")]
		public System.Nullable<System.Boolean> IgnoreMinOccurs { get; set; }
		
		/// <summary>
		/// Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemas")]
		public Hl7SchemaConfig[] Schemas { get; set; }
		
		/// <summary>
		/// Determines how messages that fail to parse are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schematizedParsingType")]
		public System.Nullable<SchemaPackageSchematizedParsingType> SchematizedParsingType { get; set; }
		
		/// <summary>
		/// Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public Hl7TypesConfig[] Types { get; set; }
		
		/// <summary>
		/// Determines how unexpected segments (segments not matched to the schema) are handled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unexpectedSegmentHandling")]
		public System.Nullable<SchemaPackageUnexpectedSegmentHandling> UnexpectedSegmentHandling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchemaPackageSchematizedParsingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEMATIZED_PARSING_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_FAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD_FAIL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchemaPackageUnexpectedSegmentHandling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParserConfigVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSER_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V3 = 3,
	}
	
	/// <summary>
	/// Count of messages and total storage size by type for a given HL7 store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hl7V2StoreMetric
	{
		
		/// <summary>
		/// The total count of HL7v2 messages in the store for the given message type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// The Hl7v2 message type this metric applies to, such as `ADT` or `ORU`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageType")]
		public string MessageType { get; set; }
		
		/// <summary>
		/// The total amount of structured storage used by HL7v2 messages of this message type in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredStorageSizeBytes")]
		public string StructuredStorageSizeBytes { get; set; }
	}
	
	/// <summary>
	/// List of metrics for a given HL7v2 store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hl7V2StoreMetrics
	{
		
		/// <summary>
		/// List of HL7v2 store metrics by message type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public Hl7V2StoreMetric[] Metrics { get; set; }
		
		/// <summary>
		/// The resource name of the HL7v2 store to get metrics for, in the format `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpBody
	{
		
		/// <summary>
		/// The HTTP Content-Type header value specifying the content type of the body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The HTTP request/response body as raw binary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Application specific response metadata. Must be set in the first response for streaming APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
	}
	
	/// <summary>
	/// Imports data into the specified DICOM store. Returns an error if any of the files to import are not DICOM files. This API accepts duplicate DICOM instances by ignoring the newly-pushed instance. It does not overwrite.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportDicomDataRequest
	{
		
		/// <summary>
		/// Specifies the configuration for importing data from Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GoogleCloudHealthcareV1DicomGcsSource GcsSource { get; set; }
	}
	
	/// <summary>
	/// Returns additional information in regards to a completed DICOM store import.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportDicomDataResponse
	{
	}
	
	/// <summary>
	/// Request to import messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportMessagesRequest
	{
		
		/// <summary>
		/// Specifies the configuration for importing data from Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GcsSource GcsSource { get; set; }
	}
	
	/// <summary>
	/// Final response of importing messages. This structure is included in the response to describe the detailed outcome. It is only included when the operation finishes successfully.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportMessagesResponse
	{
	}
	
	/// <summary>
	/// Request to import resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportResourcesRequest
	{
		
		/// <summary>
		/// The content structure in the source location. If not specified, the server treats the input source files as BUNDLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentStructure")]
		public System.Nullable<ImportResourcesRequestContentStructure> ContentStructure { get; set; }
		
		/// <summary>
		/// Specifies the configuration for importing data from Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GoogleCloudHealthcareV1FhirGcsSource GcsSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportResourcesRequestContentStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_STRUCTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUNDLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUNDLE_PRETTY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_PRETTY = 4,
	}
	
	/// <summary>
	/// Final response of importing resources. This structure is included in the response to describe the detailed outcome after the operation finishes successfully.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportResourcesResponse
	{
	}
	
	/// <summary>
	/// Ingests a message into the specified HL7v2 store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IngestMessageRequest
	{
		
		/// <summary>
		/// A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	/// <summary>
	/// Acknowledges that a message has been ingested into the specified HL7v2 store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IngestMessageResponse
	{
		
		/// <summary>
		/// HL7v2 ACK message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hl7Ack")]
		public string Hl7Ack { get; set; }
		
		/// <summary>
		/// A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public Message Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAttributeDefinitionsResponse
	{
		
		/// <summary>
		/// The returned Attribute definitions. The maximum number of attributes returned is determined by the value of page_size in the ListAttributeDefinitionsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeDefinitions")]
		public AttributeDefinition[] AttributeDefinitions { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConsentArtifactsResponse
	{
		
		/// <summary>
		/// The returned Consent artifacts. The maximum number of artifacts returned is determined by the value of page_size in the ListConsentArtifactsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentArtifacts")]
		public ConsentArtifact[] ConsentArtifacts { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConsentRevisionsResponse
	{
		
		/// <summary>
		/// The returned Consent revisions. The maximum number of revisions returned is determined by the value of `page_size` in the ListConsentRevisionsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consents")]
		public Consent[] Consents { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConsentStoresResponse
	{
		
		/// <summary>
		/// The returned consent stores. The maximum number of stores returned is determined by the value of page_size in the ListConsentStoresRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentStores")]
		public ConsentStore[] ConsentStores { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConsentsResponse
	{
		
		/// <summary>
		/// The returned Consents. The maximum number of Consents returned is determined by the value of page_size in the ListConsentsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consents")]
		public Consent[] Consents { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Lists the available datasets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsResponse
	{
		
		/// <summary>
		/// The first page of datasets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasets")]
		public Dataset[] Datasets { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Lists the DICOM stores in the given dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDicomStoresResponse
	{
		
		/// <summary>
		/// The returned DICOM stores. Won't be more DICOM stores than the value of page_size in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dicomStores")]
		public DicomStore[] DicomStores { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Lists the FHIR stores in the given dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFhirStoresResponse
	{
		
		/// <summary>
		/// The returned FHIR stores. Won't be more FHIR stores than the value of page_size in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fhirStores")]
		public FhirStore[] FhirStores { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Lists the HL7v2 stores in the given dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListHl7V2StoresResponse
	{
		
		/// <summary>
		/// The returned HL7v2 stores. Won't be more HL7v2 stores than the value of page_size in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hl7V2Stores")]
		public Hl7V2Store[] Hl7V2Stores { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Lists the messages in the specified HL7v2 store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMessagesResponse
	{
		
		/// <summary>
		/// The returned Messages. Won't be more Messages than the value of page_size in the request. See view for populated fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hl7V2Messages")]
		public Message[] Hl7V2Messages { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUserDataMappingsResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The returned User data mappings. The maximum number of User data mappings returned is determined by the value of page_size in the ListUserDataMappingsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDataMappings")]
		public UserDataMapping[] UserDataMappings { get; set; }
	}
	
	/// <summary>
	/// Maps a resource to the associated user and Attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserDataMapping
	{
		
		/// <summary>
		/// Output only. Indicates the time when this mapping was archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveTime")]
		public string ArchiveTime { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether this mapping is archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for the mapped resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataId")]
		public string DataId { get; set; }
		
		/// <summary>
		/// Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field "values" in each Attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceAttributes")]
		public Attribute[] ResourceAttributes { get; set; }
		
		/// <summary>
		/// Required. User's UUID provided by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// OperationMetadata provides information about the operation execution. Returned in the long-running operation's metadata field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// The name of the API method that initiated the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMethodName")]
		public string ApiMethodName { get; set; }
		
		/// <summary>
		/// Specifies if cancellation was requested for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
		
		/// <summary>
		/// ProgressCounter provides counters to describe an operation's progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counter")]
		public ProgressCounter Counter { get; set; }
		
		/// <summary>
		/// The time at which the operation was created by the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The time at which execution was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsUrl")]
		public string LogsUrl { get; set; }
	}
	
	/// <summary>
	/// ProgressCounter provides counters to describe an operation's progress.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProgressCounter
	{
		
		/// <summary>
		/// The number of units that failed in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failure")]
		public string Failure { get; set; }
		
		/// <summary>
		/// The number of units that are pending in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public string Pending { get; set; }
		
		/// <summary>
		/// The number of units that succeeded in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Queries all data_ids that are consented for a given use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging] (https://cloud.google.com/healthcare/docs/how-tos/logging) and [QueryAccessibleData] for a sample log entry).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryAccessibleDataRequest
	{
		
		/// <summary>
		/// The Cloud Storage location for export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GoogleCloudHealthcareV1ConsentGcsDestination GcsDestination { get; set; }
		
		/// <summary>
		/// The values of request attributes associated with this access request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public System.Collections.Generic.Dictionary<string, string> RequestAttributes { get; set; }
		
		/// <summary>
		/// Optional. The values of resource attributes associated with the type of resources being requested. If no values are specified, then all resource types are included in the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceAttributes")]
		public System.Collections.Generic.Dictionary<string, string> ResourceAttributes { get; set; }
	}
	
	/// <summary>
	/// Response for successful QueryAccessibleData operations. This structure is included in the response upon operation completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryAccessibleDataResponse
	{
		
		/// <summary>
		/// List of files, each of which contains a list of data_id(s) that are consented for a specified use in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsUris")]
		public string[] GcsUris { get; set; }
	}
	
	/// <summary>
	/// Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the given Consent is in the `REJECTED` state, no new revision is committed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RejectConsentRequest
	{
		
		/// <summary>
		/// Optional. The resource name of the Consent artifact that contains documentation of the user's rejection of the draft Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public string ConsentArtifact { get; set; }
	}
	
	/// <summary>
	/// Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the given Consent is in the `REVOKED` state, no new revision is committed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevokeConsentRequest
	{
		
		/// <summary>
		/// Optional. The resource name of the Consent artifact that contains proof of the user's revocation of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public string ConsentArtifact { get; set; }
	}
	
	/// <summary>
	/// Request to search the resources in the specified FHIR store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchResourcesRequest
	{
		
		/// <summary>
		/// The FHIR resource type to search, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// SeriesMetrics contains metrics describing a DICOM series.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SeriesMetrics
	{
		
		/// <summary>
		/// Total blob storage bytes for all instances in the series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobStorageSizeBytes")]
		public string BlobStorageSizeBytes { get; set; }
		
		/// <summary>
		/// Number of instances in the series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceCount")]
		public string InstanceCount { get; set; }
		
		/// <summary>
		/// The series resource path. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}/dicomWeb/studies/{study_uid}/series/{series_uid}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public string Series { get; set; }
		
		/// <summary>
		/// Total structured storage bytes for all instances in the series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredStorageSizeBytes")]
		public string StructuredStorageSizeBytes { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// StudyMetrics contains metrics describing a DICOM study.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudyMetrics
	{
		
		/// <summary>
		/// Total blob storage bytes for all instances in the study.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobStorageSizeBytes")]
		public string BlobStorageSizeBytes { get; set; }
		
		/// <summary>
		/// Number of instances in the study.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceCount")]
		public string InstanceCount { get; set; }
		
		/// <summary>
		/// Number of series in the study.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seriesCount")]
		public string SeriesCount { get; set; }
		
		/// <summary>
		/// Total structured storage bytes for all instances in the study.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredStorageSizeBytes")]
		public string StructuredStorageSizeBytes { get; set; }
		
		/// <summary>
		/// The study resource path. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}/dicomWeb/studies/{study_uid}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="study")]
		public string Study { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Checks if a particular data_id of a User data mapping in the specified consent store is consented for the specified use.
		/// Healthcare_projects_locations_datasets_consentStores_checkDataAccess v1/{consentStore}:checkDataAccess
		/// </summary>
		/// <param name="consentStore">Required. Name of the consent store where the requested data_id is stored, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckDataAccessResponse> Healthcare_projects_locations_datasets_consentStores_checkDataAccessAsync(string consentStore, CheckDataAccessRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (consentStore==null? "" : System.Uri.EscapeDataString(consentStore))+":checkDataAccess";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckDataAccessResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Evaluates the user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, which can cause a slight delay between the time mappings are created or updated and when they are included in EvaluateUserConsents results.
		/// Healthcare_projects_locations_datasets_consentStores_evaluateUserConsents v1/{consentStore}:evaluateUserConsents
		/// </summary>
		/// <param name="consentStore">Required. Name of the consent store to retrieve User data mappings from.</param>
		/// <returns>Successful response</returns>
		public async Task<EvaluateUserConsentsResponse> Healthcare_projects_locations_datasets_consentStores_evaluateUserConsentsAsync(string consentStore, EvaluateUserConsentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (consentStore==null? "" : System.Uri.EscapeDataString(consentStore))+":evaluateUserConsents";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EvaluateUserConsentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Queries all data_ids that are consented for a specified use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. If the request is successful, a detailed response is returned of type QueryAccessibleDataResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a QueryAccessibleData call to consent store `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. ```json jsonPayload: { @type: "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry" error: { code: 9 message: "failed to evaluate consent policy" } resourceName: "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}" } logName: "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data" operation: { id: "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}" producer: "healthcare.googleapis.com/QueryAccessibleData" } receiveTimestamp: "TIMESTAMP" resource: { labels: { consent_store_id: "{consent_store_id}" dataset_id: "{dataset_id}" location: "{location_id}" project_id: "{project_id}" } type: "healthcare_consent_store" } severity: "ERROR" timestamp: "TIMESTAMP" ```
		/// Healthcare_projects_locations_datasets_consentStores_queryAccessibleData v1/{consentStore}:queryAccessibleData
		/// </summary>
		/// <param name="consentStore">Required. Name of the consent store to retrieve User data mappings from.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Healthcare_projects_locations_datasets_consentStores_queryAccessibleDataAsync(string consentStore, QueryAccessibleDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (consentStore==null? "" : System.Uri.EscapeDataString(consentStore))+":queryAccessibleData";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an HL7v2 message.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_messages_delete v1/{name}
		/// </summary>
		/// <param name="name">The resource name of the HL7v2 message to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Healthcare_projects_locations_datasets_hl7V2Stores_messages_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Healthcare_projects_locations_datasets_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <param name="view">Specifies which parts of the Message resource to return in the response. When unspecified, equivalent to FULL.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Healthcare_projects_locations_datasets_operations_getAsync(string name, GcsDestinationMessageView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the message. The contents of the message in Message.data and data extracted from the contents such as Message.create_time cannot be altered. Only the Message.labels field is allowed to be updated. The labels in the request are merged with the existing set of labels. Existing labels with the same keys are updated.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_messages_patch v1/{name}
		/// </summary>
		/// <param name="name">Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.</param>
		/// <param name="updateMask">The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Healthcare_projects_locations_datasets_hl7V2Stores_messages_patchAsync(string name, string updateMask, Message requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Message>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the entire contents of a resource. Implements the FHIR standard update interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the specified resource does not exist and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The resource must contain an `id` element having an identical value to the ID in the REST path of the request. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `update`, see [Updating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_update v1/{name}
		/// </summary>
		/// <param name="name">The name of the resource to update.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_updateAsync(string name, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a Patient resource and resources related to that patient. Implements the FHIR extended operation Patient-everything ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything), [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything), [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the operation. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The resources in scope for the response are: * The patient resource itself. * All the resources directly referenced by the patient resource. * Resources directly referencing the patient resource that meet the inclusion criteria. The inclusion criteria are based on the membership rules in the patient compartment definition ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html), [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html), [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which details the eligible resource types and referencing search parameters. For samples that show how to call `Patient-everything`, see [Getting all patient compartment resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_Patient_everything v1/{name}/$everything
		/// </summary>
		/// <param name="name">Name of the `Patient` resource for which the information is required.</param>
		/// <param name="_count">Maximum number of resources in a page. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="_page_token">Used to retrieve the next or previous page of results when using pagination. Set `_page_token` to the value of _page_token set in next or previous page links' url. Next and previous page are returned in the response bundle's links field, where `link.relation` is "previous" or "next". Omit `_page_token` if no previous request has been made.</param>
		/// <param name="_since">If provided, only resources updated after this time are returned. The time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example, `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time must be specified to the second and include a time zone.</param>
		/// <param name="_type">String of comma-delimited FHIR resource types. If provided, only resources of the specified resource type(s) are returned. Specifying multiple `_type` parameters isn't supported. For example, the result of `_type=Observation&_type=Encounter` is undefined. Use `_type=Observation,Encounter` instead.</param>
		/// <param name="end">The response includes records prior to the end date. The date uses the format YYYY-MM-DD. If no end date is provided, all records subsequent to the start date are in scope.</param>
		/// <param name="start">The response includes records subsequent to the start date. The date uses the format YYYY-MM-DD. If no start date is provided, all records prior to the end date are in scope.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_Patient_everythingAsync(string name, int _count, string _page_token, string _since, string _type, string end, string start, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/$everything&_count="+_count+"&_page_token=" + (_page_token==null? "" : System.Uri.EscapeDataString(_page_token))+"&_since=" + (_since==null? "" : System.Uri.EscapeDataString(_since))+"&_type=" + (_type==null? "" : System.Uri.EscapeDataString(_type))+"&end=" + (end==null? "" : System.Uri.EscapeDataString(end))+"&start=" + (start==null? "" : System.Uri.EscapeDataString(start));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes all the historical versions of a resource (excluding the current version) from the FHIR store. To remove all versions of a resource, first delete the current version and then call this method. This is not a FHIR standard operation. For samples that show how to call `Resource-purge`, see [Deleting historical versions of a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_Resource_purge v1/{name}/$purge
		/// </summary>
		/// <param name="name">The name of the resource to purge.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Healthcare_projects_locations_datasets_fhirStores_fhir_Resource_purgeAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/$purge";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the versions of a resource (including the current version and deleted versions) from the FHIR store. Implements the per-resource form of the FHIR standard history interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `history`, containing the version history sorted from most recent to oldest versions. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `history`, see [Listing FHIR resource versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_history v1/{name}/_history
		/// </summary>
		/// <param name="name">The name of the resource to retrieve.</param>
		/// <param name="_at">Only include resource versions that were current at some point during the time period specified in the date time value. The date parameter format is yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm] Clients may specify any of the following: * An entire year: `_at=2019` * An entire month: `_at=2019-01` * A specific day: `_at=2019-01-20` * A specific second: `_at=2018-12-31T23:59:58Z`</param>
		/// <param name="_count">The maximum number of search results on a page. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="_page_token">Used to retrieve the first, previous, next, or last page of resource versions when using pagination. Value should be set to the value of `_page_token` set in next or previous page links' URLs. Next and previous page are returned in the response bundle's links field, where `link.relation` is "previous" or "next". Omit `_page_token` if no previous request has been made.</param>
		/// <param name="_since">Only include resource versions that were created at or after the given instant in time. The instant in time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz (for example 2015-02-07T13:28:17.239+02:00 or 2017-01-01T00:00:00Z). The time must be specified to the second and include a time zone.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_historyAsync(string name, string _at, int _count, string _page_token, string _since, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/_history&_at=" + (_at==null? "" : System.Uri.EscapeDataString(_at))+"&_count="+_count+"&_page_token=" + (_page_token==null? "" : System.Uri.EscapeDataString(_page_token))+"&_since=" + (_since==null? "" : System.Uri.EscapeDataString(_since));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the FHIR capability statement ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html), [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)), or the [conformance statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html) in the DSTU2 case for the store, which contains a description of functionality supported by the server. Implements the FHIR standard capabilities interaction ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or the [conformance interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance) in the DSTU2 case. On success, the response body contains a JSON-encoded representation of a `CapabilityStatement` resource.
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_capabilities v1/{name}/fhir/metadata
		/// </summary>
		/// <param name="name">Name of the FHIR store to retrieve the capabilities for.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_capabilitiesAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/fhir/metadata";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Healthcare_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Healthcare_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Healthcare_projects_locations_datasets_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Healthcare_projects_locations_datasets_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the specified Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.
		/// Healthcare_projects_locations_datasets_consentStores_consents_activate v1/{name}:activate
		/// </summary>
		/// <param name="name">Required. The resource name of the Consent to activate, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.</param>
		/// <returns>Successful response</returns>
		public async Task<Consent> Healthcare_projects_locations_datasets_consentStores_consents_activateAsync(string name, ActivateConsentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":activate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Consent>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Archives the specified User data mapping.
		/// Healthcare_projects_locations_datasets_consentStores_userDataMappings_archive v1/{name}:archive
		/// </summary>
		/// <param name="name">Required. The resource name of the User data mapping to archive.</param>
		/// <returns>Successful response</returns>
		public async Task<ArchiveUserDataMappingResponse> Healthcare_projects_locations_datasets_consentStores_userDataMappings_archiveAsync(string name, ArchiveUserDataMappingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":archive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ArchiveUserDataMappingResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Healthcare_projects_locations_datasets_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Healthcare_projects_locations_datasets_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified revision of a Consent. An INVALID_ARGUMENT error occurs if the specified revision is the latest revision.
		/// Healthcare_projects_locations_datasets_consentStores_consents_deleteRevision v1/{name}:deleteRevision
		/// </summary>
		/// <param name="name">Required. The resource name of the Consent revision to delete, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}@{revision_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is not specified in the name.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Healthcare_projects_locations_datasets_consentStores_consents_deleteRevisionAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":deleteRevision";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Exports the messages to a destination. To filter messages to be exported, define a filter using the start and end time, relative to the message generation time (MSH.7). This API returns an Operation that can be used to track the status of the job by calling GetOperation. Immediate fatal errors appear in the error field. Otherwise, when the operation finishes, a detailed response of type ExportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_export v1/{name}:export
		/// </summary>
		/// <param name="name">The name of the source HL7v2 store, in the format `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7v2Stores/{hl7v2_store_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Healthcare_projects_locations_datasets_hl7V2Stores_exportAsync(string name, ExportMessagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":export";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets metrics associated with the DICOM store.
		/// Healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetrics v1/{name}:getDICOMStoreMetrics
		/// </summary>
		/// <param name="name">The resource name of the DICOM store to get metrics for.</param>
		/// <returns>Successful response</returns>
		public async Task<DicomStoreMetrics> Healthcare_projects_locations_datasets_dicomStores_getDICOMStoreMetricsAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getDICOMStoreMetrics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DicomStoreMetrics>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets metrics associated with the FHIR store.
		/// Healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetrics v1/{name}:getFHIRStoreMetrics
		/// </summary>
		/// <param name="name">The resource name of the FHIR store to get metrics for.</param>
		/// <returns>Successful response</returns>
		public async Task<FhirStoreMetrics> Healthcare_projects_locations_datasets_fhirStores_getFHIRStoreMetricsAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getFHIRStoreMetrics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FhirStoreMetrics>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets metrics associated with the HL7v2 store.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetrics v1/{name}:getHL7v2StoreMetrics
		/// </summary>
		/// <param name="name">The resource name of the HL7v2 store to get metrics for, in the format `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Hl7V2StoreMetrics> Healthcare_projects_locations_datasets_hl7V2Stores_getHL7v2StoreMetricsAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getHL7v2StoreMetrics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Hl7V2StoreMetrics>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Import messages to the HL7v2 store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some HL7v2 store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty HL7v2 store that is not being used by other clients. An existing message will be overwritten if a duplicate message is imported. A duplicate message is a message with the same raw bytes as a message that already exists in this HL7v2 store. When a message is overwritten, its labels will also be overwritten. The import operation is idempotent unless the input data contains multiple valid messages with the same raw bytes but different labels. In that case, after the import completes, the store contains exactly one message with those raw bytes but there is no ordering guarantee on which version of the labels it has. The operation result counters do not count duplicated raw bytes as an error and count one success for each message in the input, which might result in a success count larger than the number of messages in the HL7v2 store. If some messages fail to import, for example due to parsing errors, successfully imported messages are not rolled back. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a response of type ImportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_import v1/{name}:import
		/// </summary>
		/// <param name="name">The name of the target HL7v2 store, in the format `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7v2Stores/{hl7v2_store_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Healthcare_projects_locations_datasets_hl7V2Stores_importAsync(string name, ImportMessagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":import";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the revisions of the specified Consent in reverse chronological order.
		/// Healthcare_projects_locations_datasets_consentStores_consents_listRevisions v1/{name}:listRevisions
		/// </summary>
		/// <param name="name">Required. The resource name of the Consent to retrieve revisions for.</param>
		/// <param name="filter">Optional. Restricts the revisions returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Fields available for filtering are: - user_id. For example, `filter='user_id="user123"'`. - consent_artifact - state - revision_create_time - metadata. For example, `filter=Metadata(\"testkey\")=\"value\"` or `filter=HasMetadata(\"testkey\")`.</param>
		/// <param name="pageSize">Optional. Limit on the number of revisions to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">Optional. Token to retrieve the next page of results or empty if there are no more results in the list.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConsentRevisionsResponse> Healthcare_projects_locations_datasets_consentStores_consents_listRevisionsAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":listRevisions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConsentRevisionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the specified Consent is in the `REJECTED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `ACTIVE` or `REVOKED` state.
		/// Healthcare_projects_locations_datasets_consentStores_consents_reject v1/{name}:reject
		/// </summary>
		/// <param name="name">Required. The resource name of the Consent to reject, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.</param>
		/// <returns>Successful response</returns>
		public async Task<Consent> Healthcare_projects_locations_datasets_consentStores_consents_rejectAsync(string name, RejectConsentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":reject";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Consent>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the specified Consent is in the `REVOKED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state.
		/// Healthcare_projects_locations_datasets_consentStores_consents_revoke v1/{name}:revoke
		/// </summary>
		/// <param name="name">Required. The resource name of the Consent to revoke, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.</param>
		/// <returns>Successful response</returns>
		public async Task<Consent> Healthcare_projects_locations_datasets_consentStores_consents_revokeAsync(string name, RevokeConsentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":revoke";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Consent>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Analyze heathcare entity in a document. Its response includes the recognized entity mentions and the relationships between them. AnalyzeEntities uses context aware models to detect entities.
		/// Healthcare_projects_locations_services_nlp_analyzeEntities v1/{nlpService}:analyzeEntities
		/// </summary>
		/// <param name="nlpService">The resource name of the service of the form: "projects/{project_id}/locations/{location_id}/services/nlp".</param>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeEntitiesResponse> Healthcare_projects_locations_services_nlp_analyzeEntitiesAsync(string nlpService, AnalyzeEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (nlpService==null? "" : System.Uri.EscapeDataString(nlpService))+":analyzeEntities";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AnalyzeEntitiesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Attribute definitions in the specified consent store.
		/// Healthcare_projects_locations_datasets_consentStores_attributeDefinitions_list v1/{parent}/attributeDefinitions
		/// </summary>
		/// <param name="parent">Required. Name of the consent store to retrieve Attribute definitions from.</param>
		/// <param name="filter">Optional. Restricts the attributes returned to those matching a filter. The only field available for filtering is `category`. For example, `filter=category=\"REQUEST\"`.</param>
		/// <param name="pageSize">Optional. Limit on the number of Attribute definitions to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">Optional. Token to retrieve the next page of results or empty to get the first page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAttributeDefinitionsResponse> Healthcare_projects_locations_datasets_consentStores_attributeDefinitions_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/attributeDefinitions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAttributeDefinitionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new Attribute definition in the parent consent store.
		/// Healthcare_projects_locations_datasets_consentStores_attributeDefinitions_create v1/{parent}/attributeDefinitions
		/// </summary>
		/// <param name="parent">Required. The name of the consent store that this Attribute definition belongs to.</param>
		/// <param name="attributeDefinitionId">Required. The ID of the Attribute definition to create. The string must match the following regex: `_a-zA-Z{0,255}` and must not be a reserved keyword within the Common Expression Language as listed on https://github.com/google/cel-spec/blob/master/doc/langdef.md.</param>
		/// <returns>Successful response</returns>
		public async Task<AttributeDefinition> Healthcare_projects_locations_datasets_consentStores_attributeDefinitions_createAsync(string parent, string attributeDefinitionId, AttributeDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/attributeDefinitions&attributeDefinitionId=" + (attributeDefinitionId==null? "" : System.Uri.EscapeDataString(attributeDefinitionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AttributeDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Consent artifacts in the specified consent store.
		/// Healthcare_projects_locations_datasets_consentStores_consentArtifacts_list v1/{parent}/consentArtifacts
		/// </summary>
		/// <param name="parent">Required. Name of the consent store to retrieve consent artifacts from.</param>
		/// <param name="filter">Optional. Restricts the artifacts returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The fields available for filtering are: - user_id. For example, `filter=user_id=\"user123\"`. - consent_content_version - metadata. For example, `filter=Metadata(\"testkey\")=\"value\"` or `filter=HasMetadata(\"testkey\")`.</param>
		/// <param name="pageSize">Optional. Limit on the number of consent artifacts to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">Optional. The next_page_token value returned from the previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConsentArtifactsResponse> Healthcare_projects_locations_datasets_consentStores_consentArtifacts_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/consentArtifacts&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConsentArtifactsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new Consent artifact in the parent consent store.
		/// Healthcare_projects_locations_datasets_consentStores_consentArtifacts_create v1/{parent}/consentArtifacts
		/// </summary>
		/// <param name="parent">Required. The name of the consent store this Consent artifact belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<ConsentArtifact> Healthcare_projects_locations_datasets_consentStores_consentArtifacts_createAsync(string parent, ConsentArtifact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/consentArtifacts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConsentArtifact>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the consent stores in the specified dataset.
		/// Healthcare_projects_locations_datasets_consentStores_list v1/{parent}/consentStores
		/// </summary>
		/// <param name="parent">Required. Name of the dataset.</param>
		/// <param name="filter">Optional. Restricts the stores returned to those matching a filter. Only filtering on labels is supported. For example, `filter=labels.key=value`.</param>
		/// <param name="pageSize">Optional. Limit on the number of consent stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">Optional. Token to retrieve the next page of results, or empty to get the first page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConsentStoresResponse> Healthcare_projects_locations_datasets_consentStores_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/consentStores&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConsentStoresResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error.
		/// Healthcare_projects_locations_datasets_consentStores_create v1/{parent}/consentStores
		/// </summary>
		/// <param name="parent">Required. The name of the dataset this consent store belongs to.</param>
		/// <param name="consentStoreId">Required. The ID of the consent store to create. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`. Cannot be changed after creation.</param>
		/// <returns>Successful response</returns>
		public async Task<ConsentStore> Healthcare_projects_locations_datasets_consentStores_createAsync(string parent, string consentStoreId, ConsentStore requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/consentStores&consentStoreId=" + (consentStoreId==null? "" : System.Uri.EscapeDataString(consentStoreId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConsentStore>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Consent in the given consent store, returning each Consent's latest revision.
		/// Healthcare_projects_locations_datasets_consentStores_consents_list v1/{parent}/consents
		/// </summary>
		/// <param name="parent">Required. Name of the consent store to retrieve Consents from.</param>
		/// <param name="filter">Optional. Restricts the Consents returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The fields available for filtering are: - user_id. For example, `filter='user_id="user123"'`. - consent_artifact - state - revision_create_time - metadata. For example, `filter=Metadata(\"testkey\")=\"value\"` or `filter=HasMetadata(\"testkey\")`.</param>
		/// <param name="pageSize">Optional. Limit on the number of Consents to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">Optional. The next_page_token value returned from the previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConsentsResponse> Healthcare_projects_locations_datasets_consentStores_consents_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/consents&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConsentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new Consent in the parent consent store.
		/// Healthcare_projects_locations_datasets_consentStores_consents_create v1/{parent}/consents
		/// </summary>
		/// <param name="parent">Required. Name of the consent store.</param>
		/// <returns>Successful response</returns>
		public async Task<Consent> Healthcare_projects_locations_datasets_consentStores_consents_createAsync(string parent, Consent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/consents";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Consent>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the health datasets in the current project.
		/// Healthcare_projects_locations_datasets_list v1/{parent}/datasets
		/// </summary>
		/// <param name="parent">The name of the project whose datasets should be listed. For example, `projects/{project_id}/locations/{location_id}`.</param>
		/// <param name="pageSize">The maximum number of items to return. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDatasetsResponse> Healthcare_projects_locations_datasets_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/datasets&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDatasetsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The metadata field type is OperationMetadata.
		/// Healthcare_projects_locations_datasets_create v1/{parent}/datasets
		/// </summary>
		/// <param name="parent">The name of the project where the server creates the dataset. For example, `projects/{project_id}/locations/{location_id}`.</param>
		/// <param name="datasetId">The ID of the dataset that is being created. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Healthcare_projects_locations_datasets_createAsync(string parent, string datasetId, Dataset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/datasets&datasetId=" + (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the DICOM stores in the given dataset.
		/// Healthcare_projects_locations_datasets_dicomStores_list v1/{parent}/dicomStores
		/// </summary>
		/// <param name="parent">Name of the dataset.</param>
		/// <param name="filter">Restricts stores returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Only filtering on labels is supported. For example, `labels.key=value`.</param>
		/// <param name="pageSize">Limit on the number of DICOM stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">The next_page_token value returned from the previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDicomStoresResponse> Healthcare_projects_locations_datasets_dicomStores_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/dicomStores&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDicomStoresResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new DICOM store within the parent dataset.
		/// Healthcare_projects_locations_datasets_dicomStores_create v1/{parent}/dicomStores
		/// </summary>
		/// <param name="parent">The name of the dataset this DICOM store belongs to.</param>
		/// <param name="dicomStoreId">The ID of the DICOM store that is being created. Any string value up to 256 characters in length.</param>
		/// <returns>Successful response</returns>
		public async Task<DicomStore> Healthcare_projects_locations_datasets_dicomStores_createAsync(string parent, string dicomStoreId, DicomStore requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/dicomStores&dicomStoreId=" + (dicomStoreId==null? "" : System.Uri.EscapeDataString(dicomStoreId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DicomStore>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// DeleteInstance deletes an instance associated with the given study, series, and SOP Instance UID. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. Study and series search results can take a few seconds to be updated after an instance is deleted using DeleteInstance. For samples that show how to call DeleteInstance, see [Delete a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#delete-dicom).
		/// Healthcare_projects_locations_datasets_dicomStores_studies_series_instances_delete v1/{parent}/dicomWeb/{dicomWebPath}
		/// </summary>
		/// <param name="parent">The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.</param>
		/// <param name="dicomWebPath">The path of the DeleteInstance request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Healthcare_projects_locations_datasets_dicomStores_studies_series_instances_deleteAsync(string parent, string dicomWebPath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/dicomWeb/"+ (dicomWebPath==null? "" : System.Uri.EscapeDataString(dicomWebPath));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// RetrieveRenderedFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedFrames, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedFrames, see [Retrieve consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-consumer).
		/// Healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRendered v1/{parent}/dicomWeb/{dicomWebPath}
		/// </summary>
		/// <param name="parent">The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.</param>
		/// <param name="dicomWebPath">The path of the RetrieveRenderedFrames DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}/rendered`.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_dicomStores_studies_series_instances_frames_retrieveRenderedAsync(string parent, string dicomWebPath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/dicomWeb/"+ (dicomWebPath==null? "" : System.Uri.EscapeDataString(dicomWebPath));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Store DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#store-dicom).
		/// Healthcare_projects_locations_datasets_dicomStores_studies_storeInstances v1/{parent}/dicomWeb/{dicomWebPath}
		/// </summary>
		/// <param name="parent">The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.</param>
		/// <param name="dicomWebPath">The path of the StoreInstances DICOMweb request. For example, `studies/[{study_uid}]`. Note that the `study_uid` is optional.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_dicomStores_studies_storeInstancesAsync(string parent, string dicomWebPath, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/dicomWeb/"+ (dicomWebPath==null? "" : System.Uri.EscapeDataString(dicomWebPath));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Executes all the requests in the given Bundle. Implements the FHIR standard batch/transaction interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)). Supports all interactions within a bundle, except search. This method accepts Bundles of type `batch` and `transaction`, processing them according to the batch processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and transaction processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The request body must contain a JSON-encoded FHIR `Bundle` resource, and the request headers must contain `Content-Type: application/fhir+json`. For a batch bundle or a successful transaction, the response body contains a JSON-encoded representation of a `Bundle` resource of type `batch-response` or `transaction-response` containing one entry for each entry in the request, with the outcome of processing the entry. In the case of an error for a transaction bundle, the response body contains a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. This method checks permissions for each request in the bundle. The `executeBundle` permission is required to call this method, but you must also grant sufficient permissions to execute the individual requests in the bundle. For example, if the bundle contains a request to create a FHIR resource, the caller must also have been granted the `healthcare.fhirResources.create` permission. You can use audit logs to view the permissions for `executeBundle` and each request in the bundle. For more information, see [Viewing Cloud Audit logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging). For samples that show how to call `executeBundle`, see [Managing FHIR resources using FHIR bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_executeBundle v1/{parent}/fhir
		/// </summary>
		/// <param name="parent">Name of the FHIR store in which this bundle will be executed.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_executeBundleAsync(string parent, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. The server might return fewer resources than requested to prevent excessively large responses. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changed, and the time when the change reflects in search results. The only exception is resource identifier data, which is indexed synchronously as a special index. As a result, searching using resource identifier is not subject to indexing delay. To use the special synchronous index, the search term for identifier should be in the pattern `identifier=[system]|[value]` or `identifier=[value]`, and any of the following search result parameters can be used: * `_count` * `_include` * `_revinclude` * `_summary` * `_elements` If your query contains any other search parameters, the standard asynchronous index will be used instead. Note that searching against the special index is optimized for resolving a small number of matches. The search isn't optimized if your identifier search criteria matches a large number (i.e. more than 2,000) of resources. For a search query that will match a large number of resources, you can avoiding using the special synchronous index by including an additional `_sort` parameter in your query. Use `_sort=-_lastUpdated` if you want to keep the default sorting order. Note: The special synchronous identifier index are currently disabled for DocumentReference and DocumentManifest searches. For samples and detailed information, see [Searching for FHIR resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_search v1/{parent}/fhir/_search
		/// </summary>
		/// <param name="parent">Name of the FHIR store to retrieve resources from.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_searchAsync(string parent, SearchResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir/_search";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. The server might return fewer resources than requested to prevent excessively large responses. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changed, and the time when the change reflects in search results. The only exception is resource identifier data, which is indexed synchronously as a special index. As a result, searching using resource identifier is not subject to indexing delay. To use the special synchronous index, the search term for identifier should be in the pattern `identifier=[system]|[value]` or `identifier=[value]`, and any of the following search result parameters can be used: * `_count` * `_include` * `_revinclude` * `_summary` * `_elements` If your query contains any other search parameters, the standard asynchronous index will be used instead. Note that searching against the special index is optimized for resolving a small number of matches. The search isn't optimized if your identifier search criteria matches a large number (i.e. more than 2,000) of resources. For a search query that will match a large number of resources, you can avoiding using the special synchronous index by including an additional `_sort` parameter in your query. Use `_sort=-_lastUpdated` if you want to keep the default sorting order. Note: The special synchronous identifier index are currently disabled for DocumentReference and DocumentManifest searches. For samples and detailed information, see [Searching for FHIR resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_search_type v1/{parent}/fhir/{resourceType}/_search
		/// </summary>
		/// <param name="parent">Name of the FHIR store to retrieve resources from.</param>
		/// <param name="resourceType">The FHIR resource type to search, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_search_typeAsync(string parent, string resourceType, SearchResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/_search";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a FHIR resource that match an identifier search query. Implements the FHIR standard conditional delete interaction, limited to searching by resource identifier. If multiple resources match, 412 Precondition Failed error will be returned. Search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resource is moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `conditionalDelete`, see [Conditionally deleting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_deleting_a_fhir_resource).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDelete v1/{parent}/fhir/{type}
		/// </summary>
		/// <param name="parent">The name of the FHIR store this resource belongs to.</param>
		/// <param name="type">The FHIR resource type to delete, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](https://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](https://hl7.org/implement/standards/fhir/R4/resourcelist.html)).</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Healthcare_projects_locations_datasets_fhirStores_fhir_conditionalDeleteAsync(string parent, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// If a resource is found with the identifier specified in the query parameters, updates part of that resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard conditional patch interaction, limited to searching by resource identifier. DSTU2 doesn't define a conditional patch method, but the server supports it in the same way it supports STU3. Search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `conditionalPatch`, see [Conditionally patching a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_patching_a_fhir_resource).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatch v1/{parent}/fhir/{type}
		/// </summary>
		/// <param name="parent">The name of the FHIR store this resource belongs to.</param>
		/// <param name="type">The FHIR resource type to update, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](https://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](https://hl7.org/implement/standards/fhir/R4/resourcelist.html)).</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_conditionalPatchAsync(string parent, string type, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a server-assigned resource ID. Also supports the FHIR standard conditional create interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#ccreate), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#ccreate), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#ccreate)), specified by supplying an `If-None-Exist` header containing a FHIR search query, limited to searching by resource identifier. If no resources match this search query, the server processes the create operation as normal. When using conditional create, the search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_create v1/{parent}/fhir/{type}
		/// </summary>
		/// <param name="parent">The name of the FHIR store this resource belongs to.</param>
		/// <param name="type">The FHIR resource type to create, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must match the resource type in the provided content.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_createAsync(string parent, string type, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// If a resource is found with the identifier specified in the query parameters, updates the entire contents of that resource. Implements the FHIR standard conditional update interaction, limited to searching by resource identifier. Search term for identifier should be in the pattern `identifier=system|value` or `identifier=value` - similar to the `search` method on resources with a specific identifier. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. If the search criteria identify zero matches, and the supplied resource body contains an `id`, and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. If the search criteria identify zero matches, and the supplied resource body does not contain an `id`, the resource is created with a server-assigned ID as per the create method. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `conditionalUpdate`, see [Conditionally updating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_updating_a_fhir_resource).
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdate v1/{parent}/fhir/{type}
		/// </summary>
		/// <param name="parent">The name of the FHIR store this resource belongs to.</param>
		/// <param name="type">The FHIR resource type to update, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](https://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](https://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must match the resource type in the provided content.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_conditionalUpdateAsync(string parent, string type, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Validates an input FHIR resource's conformance to its profiles and the profiles configured on the FHIR store. Implements the FHIR extended operation $validate ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate), [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate), or [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)). The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The `Parameters` input syntax is not supported. The `profile` query parameter can be used to request that the resource only be validated against a specific profile. If a profile with the given URL cannot be found in the FHIR store then an error is returned. Errors generated by validation contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.
		/// Healthcare_projects_locations_datasets_fhirStores_fhir_Resource_validate v1/{parent}/fhir/{type}/$validate
		/// </summary>
		/// <param name="parent">The name of the FHIR store that holds the profiles being used for validation.</param>
		/// <param name="type">The FHIR resource type of the resource being validated. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), or [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must match the resource type in the provided content.</param>
		/// <param name="profile">The canonical URL of a profile that this resource should be validated against. For example, to validate a Patient resource against the US Core Patient profile this parameter would be `http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient`. A StructureDefinition with this canonical URL must exist in the FHIR store.</param>
		/// <returns>Successful response</returns>
		public async Task<HttpBody> Healthcare_projects_locations_datasets_fhirStores_fhir_Resource_validateAsync(string parent, string type, string profile, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhir/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/$validate&profile=" + (profile==null? "" : System.Uri.EscapeDataString(profile));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HttpBody>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the FHIR stores in the given dataset.
		/// Healthcare_projects_locations_datasets_fhirStores_list v1/{parent}/fhirStores
		/// </summary>
		/// <param name="parent">Name of the dataset.</param>
		/// <param name="filter">Restricts stores returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Only filtering on labels is supported, for example `labels.key=value`.</param>
		/// <param name="pageSize">Limit on the number of FHIR stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">The next_page_token value returned from the previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFhirStoresResponse> Healthcare_projects_locations_datasets_fhirStores_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhirStores&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListFhirStoresResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new FHIR store within the parent dataset.
		/// Healthcare_projects_locations_datasets_fhirStores_create v1/{parent}/fhirStores
		/// </summary>
		/// <param name="parent">The name of the dataset this FHIR store belongs to.</param>
		/// <param name="fhirStoreId">The ID of the FHIR store that is being created. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.</param>
		/// <returns>Successful response</returns>
		public async Task<FhirStore> Healthcare_projects_locations_datasets_fhirStores_createAsync(string parent, string fhirStoreId, FhirStore requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fhirStores&fhirStoreId=" + (fhirStoreId==null? "" : System.Uri.EscapeDataString(fhirStoreId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FhirStore>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the HL7v2 stores in the given dataset.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_list v1/{parent}/hl7V2Stores
		/// </summary>
		/// <param name="parent">Name of the dataset.</param>
		/// <param name="filter">Restricts stores returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Only filtering on labels is supported. For example, `labels.key=value`.</param>
		/// <param name="pageSize">Limit on the number of HL7v2 stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">The next_page_token value returned from the previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListHl7V2StoresResponse> Healthcare_projects_locations_datasets_hl7V2Stores_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/hl7V2Stores&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListHl7V2StoresResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new HL7v2 store within the parent dataset.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_create v1/{parent}/hl7V2Stores
		/// </summary>
		/// <param name="parent">The name of the dataset this HL7v2 store belongs to.</param>
		/// <param name="hl7V2StoreId">The ID of the HL7v2 store that is being created. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Hl7V2Store> Healthcare_projects_locations_datasets_hl7V2Stores_createAsync(string parent, string hl7V2StoreId, Hl7V2Store requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/hl7V2Stores&hl7V2StoreId=" + (hl7V2StoreId==null? "" : System.Uri.EscapeDataString(hl7V2StoreId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Hl7V2Store>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the messages in the given HL7v2 store with support for filtering. Note: HL7v2 messages are indexed asynchronously, so there might be a slight delay between the time a message is created and when it can be found through a filter.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_messages_list v1/{parent}/messages
		/// </summary>
		/// <param name="parent">Name of the HL7v2 store to retrieve messages from.</param>
		/// <param name="filter">Restricts messages returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Fields/functions available for filtering are: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.</param>
		/// <param name="orderBy">Orders messages returned by the specified order_by clause. Syntax: https://cloud.google.com/apis/design/design_patterns#sorting_order Fields available for ordering are: * `send_time`</param>
		/// <param name="pageSize">Limit on the number of messages to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">The next_page_token value returned from the previous List request, if any.</param>
		/// <param name="view">Specifies the parts of the Message to return in the response. When unspecified, equivalent to BASIC. Setting this to anything other than BASIC with a `page_size` larger than the default can generate a large response, which impacts the performance of this method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMessagesResponse> Healthcare_projects_locations_datasets_hl7V2Stores_messages_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, GcsDestinationMessageView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/messages&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListMessagesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_messages_create v1/{parent}/messages
		/// </summary>
		/// <param name="parent">The name of the HL7v2 store this message belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<Message> Healthcare_projects_locations_datasets_hl7V2Stores_messages_createAsync(string parent, CreateMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/messages";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Message>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received. If the method is successful, it generates a response containing an HL7v2 acknowledgment (`ACK`) message. If the method encounters an error, it returns a negative acknowledgment (`NACK`) message. This behavior is suitable for replying to HL7v2 interface systems that expect these acknowledgments.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_messages_ingest v1/{parent}/messages:ingest
		/// </summary>
		/// <param name="parent">The name of the HL7v2 store this message belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<IngestMessageResponse> Healthcare_projects_locations_datasets_hl7V2Stores_messages_ingestAsync(string parent, IngestMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/messages:ingest";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<IngestMessageResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the User data mappings in the specified consent store.
		/// Healthcare_projects_locations_datasets_consentStores_userDataMappings_list v1/{parent}/userDataMappings
		/// </summary>
		/// <param name="parent">Required. Name of the consent store to retrieve User data mappings from.</param>
		/// <param name="filter">Optional. Restricts the User data mappings returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The fields available for filtering are: - data_id - user_id. For example, `filter=user_id=\"user123\"`. - archived - archive_time</param>
		/// <param name="pageSize">Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.</param>
		/// <param name="pageToken">Optional. Token to retrieve the next page of results, or empty to get the first page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUserDataMappingsResponse> Healthcare_projects_locations_datasets_consentStores_userDataMappings_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/userDataMappings&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListUserDataMappingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new User data mapping in the parent consent store.
		/// Healthcare_projects_locations_datasets_consentStores_userDataMappings_create v1/{parent}/userDataMappings
		/// </summary>
		/// <param name="parent">Required. Name of the consent store.</param>
		/// <returns>Successful response</returns>
		public async Task<UserDataMapping> Healthcare_projects_locations_datasets_consentStores_userDataMappings_createAsync(string parent, UserDataMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/userDataMappings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserDataMapping>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Healthcare_projects_locations_datasets_hl7V2Stores_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Healthcare_projects_locations_datasets_hl7V2Stores_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Healthcare_projects_locations_datasets_hl7V2Stores_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetSeriesMetrics returns metrics for a series.
		/// Healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetrics v1/{series}:getSeriesMetrics
		/// </summary>
		/// <param name="series">The series resource path. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}/dicomWeb/studies/{study_uid}/series/{series_uid}`.</param>
		/// <returns>Successful response</returns>
		public async Task<SeriesMetrics> Healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_series_getSeriesMetricsAsync(string series, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (series==null? "" : System.Uri.EscapeDataString(series))+":getSeriesMetrics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesMetrics>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifySummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The new de-identified dataset will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
		/// Healthcare_projects_locations_datasets_deidentify v1/{sourceDataset}:deidentify
		/// </summary>
		/// <param name="sourceDataset">Source dataset resource name. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Healthcare_projects_locations_datasets_deidentifyAsync(string sourceDataset, DeidentifyDatasetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (sourceDataset==null? "" : System.Uri.EscapeDataString(sourceDataset))+":deidentify";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyFhirStoreSummary. If errors occur, error is set. Error details are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
		/// Healthcare_projects_locations_datasets_fhirStores_deidentify v1/{sourceStore}:deidentify
		/// </summary>
		/// <param name="sourceStore">Source FHIR store resource name. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Healthcare_projects_locations_datasets_fhirStores_deidentifyAsync(string sourceStore, DeidentifyFhirStoreRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (sourceStore==null? "" : System.Uri.EscapeDataString(sourceStore))+":deidentify";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// GetStudyMetrics returns metrics for a study.
		/// Healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetrics v1/{study}:getStudyMetrics
		/// </summary>
		/// <param name="study">The study resource path. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}/dicomWeb/studies/{study_uid}`.</param>
		/// <returns>Successful response</returns>
		public async Task<StudyMetrics> Healthcare_projects_locations_datasets_dicomStores_dicomWeb_studies_getStudyMetricsAsync(string study, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (study==null? "" : System.Uri.EscapeDataString(study))+":getStudyMetrics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StudyMetrics>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
