//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the directions, path, distance and travel time between a series of geographic points
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
		/// Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription directions.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route</returns>
		public async Task Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "directions."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the directions, path, distance and travel time between a series of geographic points
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
		/// Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription directions.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route</returns>
		public async Task Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "directions."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between two geographic points
		/// Represents the distance and time of the shortest or fastest path between given start and end points.
		/// Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription distance.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Distance and time of the shortest or fastest route</returns>
		public async Task Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "distance."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between two geographic points
		/// Represents the distance and time of the shortest or fastest path between given start and end points.
		/// Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription distance.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Distance and time of the shortest or fastest route</returns>
		public async Task Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "distance."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between each pair of geographic points
		/// Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		/// DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs distance/betweenPairs.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="fromPoints">A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a></param>
		/// <param name="toPoints">A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <param name="maxPairs">The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.</param>
		/// <returns>A list of routes and their route distances/times.</returns>
		public async Task DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsAsync(DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat outputFormat, string fromPoints, string toPoints, DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, int maxPairs, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "distance/betweenPairs."+outputFormat+"?fromPoints=" + (fromPoints==null? "" : System.Uri.EscapeDataString(fromPoints))+"&toPoints=" + (toPoints==null? "" : System.Uri.EscapeDataString(toPoints))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription))+"&maxPairs="+maxPairs;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between each pair of geographic points
		/// Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		/// DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs distance/betweenPairs.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="fromPoints">A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a></param>
		/// <param name="toPoints">A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <param name="maxPairs">The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.</param>
		/// <returns>A list of routes and their route distances/times.</returns>
		public async Task DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsAsync(DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat outputFormat, string fromPoints, string toPoints, DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, int maxPairs, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "distance/betweenPairs."+outputFormat+"?fromPoints=" + (fromPoints==null? "" : System.Uri.EscapeDataString(fromPoints))+"&toPoints=" + (toPoints==null? "" : System.Uri.EscapeDataString(toPoints))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription))+"&maxPairs="+maxPairs;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time
		/// OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription optimalDirections.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.</returns>
		public async Task OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "optimalDirections."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
		/// OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription optimalDirections.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.</returns>
		public async Task OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "optimalDirections."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		/// Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time
		/// OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription optimalRoute.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time</returns>
		public async Task OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "optimalRoute."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		/// Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
		/// OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription optimalRoute.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.</returns>
		public async Task OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "optimalRoute."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the path, distance and travel time between a series of geographic points
		/// Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
		/// Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription route.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br> Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route</returns>
		public async Task Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "route."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the path, distance and travel time between a series of geographic points
		/// Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
		/// Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription route.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route</returns>
		public async Task Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "route."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the directions, path, distance and travel time between a series of geographic points for a commercial vehicle
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points for a commercial vehicle
		/// TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/directions.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route</returns>
		public async Task TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/directions."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the directions, path, distance and travel time between a series of geographic points
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
		/// TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/directions.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route</returns>
		public async Task TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/directions."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between two geographic points for a commercial vehicle
		/// Represents the distance and time of the shortest or fastest path between given start and end points.
		/// TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescription truck/distance.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Distance and time of the shortest or fastest route</returns>
		public async Task TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/distance."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between two geographic points
		/// Represents the distance and time of the shortest or fastest path between given start and end points.
		/// TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescription truck/distance.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Distance and time of the shortest or fastest route</returns>
		public async Task TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/distance."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between each pair of geographic points for a commercial vehicle
		/// Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		/// TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs truck/distance/betweenPairs.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="fromPoints">A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a></param>
		/// <param name="toPoints">A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <param name="maxPairs">The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.</param>
		/// <returns>A list of routes and their route distances/times.</returns>
		public async Task TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsAsync(DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat outputFormat, string fromPoints, string toPoints, TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, int maxPairs, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/distance/betweenPairs."+outputFormat+"?fromPoints=" + (fromPoints==null? "" : System.Uri.EscapeDataString(fromPoints))+"&toPoints=" + (toPoints==null? "" : System.Uri.EscapeDataString(toPoints))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription))+"&maxPairs="+maxPairs;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get distance and travel time between each pair of geographic points
		/// Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
		/// TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairs truck/distance/betweenPairs.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="fromPoints">A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a></param>
		/// <param name="toPoints">A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <param name="maxPairs">The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.</param>
		/// <returns>A list of routes and their route distances/times.</returns>
		public async Task TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsAsync(DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat outputFormat, string fromPoints, string toPoints, TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, System.DateTimeOffset departure, bool correctSide, string disable, string routeDescription, int maxPairs, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/distance/betweenPairs."+outputFormat+"?fromPoints=" + (fromPoints==null? "" : System.Uri.EscapeDataString(fromPoints))+"&toPoints=" + (toPoints==null? "" : System.Uri.EscapeDataString(toPoints))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription))+"&maxPairs="+maxPairs;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time for a commercial vehicle.
		/// TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/optimalDirections.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.</returns>
		public async Task TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/optimalDirections."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
		/// Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
		/// TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/optimalDirections.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.</returns>
		public async Task TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/optimalDirections."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
		/// Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time for a commercial vehicle.
		/// TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/optimalRoute.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time</returns>
		public async Task TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/optimalRoute."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
		/// Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
		/// TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/optimalRoute.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start and end points.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time.</returns>
		public async Task TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/optimalRoute."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the path, distance and travel time between a series of geographic points for a commercial vehicle
		/// Represents the geometry, distance, and time of the shortest or fastest path between given start and end points for a commercial vehicle.
		/// TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/route.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br> Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route</returns>
		public async Task TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/route."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the path, distance and travel time between a series of geographic points
		/// Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
		/// TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescription truck/route.{outputFormat}
		/// </summary>
		/// <param name="outputFormat">Format of representation</param>
		/// <param name="points">A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a></param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target="_blank">outputSRS</a></param>
		/// <param name="criteria">Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.</param>
		/// <param name="distanceUnit">distance unit of measure (e.g., km, mi). Default is km.</param>
		/// <param name="roundTrip">If true, route ends at start point. Default is false.</param>
		/// <param name="departure">departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled</param>
		/// <param name="correctSide">If true, route starts and ends on same side of road as start/end point.Default is false.</param>
		/// <param name="truckRouteMultiplier">The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.</param>
		/// <param name="partition">A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition</param>
		/// <param name="disable">A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)</param>
		/// <param name="routeDescription">Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)</param>
		/// <returns>Geometry, distance, and time of the shortest or fastest route</returns>
		public async Task TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionAsync(Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat outputFormat, string points, TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS outputSRS, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria criteria, Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit distanceUnit, bool roundTrip, System.DateTimeOffset departure, bool correctSide, int truckRouteMultiplier, string partition, string disable, string routeDescription, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "truck/route."+outputFormat+"?points=" + (points==null? "" : System.Uri.EscapeDataString(points))+"&outputSRS="+outputSRS+"&criteria=" + criteria+"&distanceUnit=" + distanceUnit+"&roundTrip="+roundTrip+"&departure=" + departure.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctSide="+correctSide+"&truckRouteMultiplier="+truckRouteMultiplier+"&partition=" + (partition==null? "" : System.Uri.EscapeDataString(partition))+"&disable=" + (disable==null? "" : System.Uri.EscapeDataString(disable))+"&routeDescription=" + (routeDescription==null? "" : System.Uri.EscapeDataString(routeDescription));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="kml")]
		kml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="html")]
		html = 2,
	}
	
	public enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionCriteria
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shortest")]
		shortest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fastest")]
		fastest = 1,
	}
	
	public enum Directions__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionDistanceUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="km")]
		km = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mi")]
		mi = 1,
	}
	
	public enum Directions__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum Distance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum Distance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="html")]
		html = 1,
	}
	
	public enum DistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum DistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum OptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum OptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum OptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum OptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum Route__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum Route__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckDistance__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckDistance__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckDistanceBetweenPairs__outputFormatGetByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckDistanceBetweenPairs__outputFormatPostByFromPointsAndToPointsAndOutputSRSAndCriteriaAndDistanceUnitAndDepartureAndCorrectSideAndDisableAndRouteDescriptionAndMaxPairsOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckOptimalDirections__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckOptimalDirections__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckOptimalRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckOptimalRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckRoute__outputFormatGetByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum TruckRoute__outputFormatPostByPointsAndOutputSRSAndCriteriaAndDistanceUnitAndRoundTripAndDepartureAndCorrectSideAndTruckRouteMultiplierAndPartitionAndDisableAndRouteDescriptionOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
