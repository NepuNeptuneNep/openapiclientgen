//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddForwardedPortSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public PrivacyEnum Privacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tunnelType")]
		public TunnelType TunnelType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrivacyEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (Private)")]
		_0_Private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (Public)")]
		_1_Public = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (Org)")]
		_2_Org = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TunnelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (Basis)")]
		_0_Basis = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (Liveshare)")]
		_1_Liveshare = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AgentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assetUri")]
		public string AssetUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailableSettingsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string[] Sku { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AzureLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101 (EastAsia)")]
		_101_EastAsia = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102 (SouthEastAsia)")]
		_102_SouthEastAsia = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="201 (AustraliaCentral)")]
		_201_AustraliaCentral = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="202 (AustraliaCentral2)")]
		_202_AustraliaCentral2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="203 (AustraliaEast)")]
		_203_AustraliaEast = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="205 (AustraliaSouthEast)")]
		_205_AustraliaSouthEast = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="301 (BrazilSouth)")]
		_301_BrazilSouth = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="401 (CanadaCentral)")]
		_401_CanadaCentral = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="402 (CanadaEast)")]
		_402_CanadaEast = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="501 (NorthEurope)")]
		_501_NorthEurope = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="502 (WestEurope)")]
		_502_WestEurope = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="601 (FranceCentral)")]
		_601_FranceCentral = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="602 (FranceSouth)")]
		_602_FranceSouth = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="701 (CentralIndia)")]
		_701_CentralIndia = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="702 (SouthIndia)")]
		_702_SouthIndia = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="703 (WestIndia)")]
		_703_WestIndia = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="801 (JapanEast)")]
		_801_JapanEast = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="802 (JapanWest)")]
		_802_JapanWest = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="901 (KoreaCentral)")]
		_901_KoreaCentral = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="902 (KoreaSouth)")]
		_902_KoreaSouth = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1001 (SouthAfricaNorth)")]
		_1001_SouthAfricaNorth = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1002 (SouthAfricaWest)")]
		_1002_SouthAfricaWest = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1201 (UaeCentral)")]
		_1201_UaeCentral = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1202 (UaeNorth)")]
		_1202_UaeNorth = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1401 (UkSouth)")]
		_1401_UkSouth = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1402 (UkWest)")]
		_1402_UkWest = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1501 (CentralUs)")]
		_1501_CentralUs = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1502 (EastUs)")]
		_1502_EastUs = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1503 (EastUs2)")]
		_1503_EastUs2 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1504 (NorthCentralUs)")]
		_1504_NorthCentralUs = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1505 (SouthCentralUs)")]
		_1505_SouthCentralUs = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1506 (WestCentralUs)")]
		_1506_WestCentralUs = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1507 (WestUs)")]
		_1507_WestUs = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1508 (WestUs2)")]
		_1508_WestUs2 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1509 (WestUs3)")]
		_1509_WestUs3 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1601 (CentralUsEuap)")]
		_1601_CentralUsEuap = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1602 (EastUs2Euap)")]
		_1602_EastUs2Euap = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1701 (SwitzerlandNorth)")]
		_1701_SwitzerlandNorth = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1702 (SwitzerlandWest)")]
		_1702_SwitzerlandWest = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1801 (GermanyNorth)")]
		_1801_GermanyNorth = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1802 (GermanyWestCentral)")]
		_1802_GermanyWestCentral = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1901 (NorwayWest)")]
		_1901_NorwayWest = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1902 (NorwayEast)")]
		_1902_NorwayEast = 42,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="billGenerationTime")]
		public System.Nullable<System.DateTimeOffset> BillGenerationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public AzureLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public string PartitionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="periodEnd")]
		public System.Nullable<System.DateTimeOffset> PeriodEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="periodStart")]
		public System.Nullable<System.DateTimeOffset> PeriodStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public VsoPlanInfo Plan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Collections.Generic.Dictionary<string, double> Usage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageDetail")]
		public EnvironmentUsage[] UsageDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VsoPlanInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public AzureLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerNamespace")]
		public string ProviderNamespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public string Subscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentUsage
	{
		
		[System.Runtime.Serialization.DataMember(Name="endState")]
		public CloudEnvironmentState EndState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceUsage")]
		public ResourceUsageDetail ResourceUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CloudEnvironmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (None)")]
		_0_None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (Created)")]
		_1_Created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (Queued)")]
		_2_Queued = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 (Provisioning)")]
		_3_Provisioning = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4 (Available)")]
		_4_Available = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5 (Awaiting)")]
		_5_Awaiting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 (Unavailable)")]
		_6_Unavailable = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7 (Deleted)")]
		_7_Deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8 (Moved)")]
		_8_Moved = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9 (Shutdown)")]
		_9_Shutdown = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10 (Archived)")]
		_10_Archived = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11 (Starting)")]
		_11_Starting = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12 (ShuttingDown)")]
		_12_ShuttingDown = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13 (Failed)")]
		_13_Failed = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14 (Exporting)")]
		_14_Exporting = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15 (Updating)")]
		_15_Updating = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16 (Rebuilding)")]
		_16_Rebuilding = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceUsageDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="compute")]
		public ComputeUsageDetail[] Compute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public StorageUsageDetail[] Storage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComputeUsageDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Double> Usage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StorageUsageDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeInKB")]
		public System.Nullable<System.Int64> SizeInKB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Double> Usage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sku
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillableOwnerBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BillableOwnerType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BillableOwnerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (User)")]
		_0_User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (Organization)")]
		_1_Organization = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingType")]
		public string BillingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelType")]
		public string ChannelType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentType")]
		public string PaymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workloadType")]
		public string WorkloadType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeResourceDeletionRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolCode")]
		public string PoolCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolType")]
		public string PoolType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClaimVMBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserIdentity User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserIdentity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userPrincipalName")]
		public string UserPrincipalName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientUsageData
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeMinutes")]
		public System.Nullable<System.Int32> ActiveMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastActivity")]
		public System.Nullable<System.DateTimeOffset> LastActivity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientUsageSession
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageData")]
		public System.Collections.Generic.Dictionary<string, ClientUsageData> UsageData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudEnvironmentFolderBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="recentFolderPaths")]
		public string[] RecentFolderPaths { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudEnvironmentResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.DateTimeOffset> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoShutdownDelayMinutes")]
		public System.Nullable<System.Int32> AutoShutdownDelayMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billableOwnerType")]
		public BillableOwnerType BillableOwnerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientUsage")]
		public ClientUsageSession ClientUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public ConnectionInfoBody Connection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container")]
		public ContainerInfoBody Container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public string ContainerImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createFromPrebuild")]
		public System.Nullable<System.Boolean> CreateFromPrebuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayStorageUtilizationInKb")]
		public System.Nullable<System.Boolean> DisplayStorageUtilizationInKb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportedBlobUrl")]
		public string ExportedBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failoverDetails")]
		public FailoverDetails FailoverDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public System.Collections.Generic.Dictionary<string, string> Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitStatus")]
		public GitStatus GitStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStateUpdateReason")]
		public string LastStateUpdateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUsed")]
		public System.Nullable<System.DateTimeOffset> LastUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portForwardingConnection")]
		public ConnectionInfoBody PortForwardingConnection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildType")]
		public string PrebuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recentFolders")]
		public string[] RecentFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTier")]
		public ConsumerType ResourceTier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeConstraints")]
		public RuntimeConstraintsBody RuntimeConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seed")]
		public SeedInfoBody Seed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skuDisplayName")]
		public string SkuDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageUtilizationInKb")]
		public System.Nullable<System.Int64> StorageUtilizationInKb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public SubscriptionData SubscriptionData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateStatus")]
		public string TemplateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionInfoBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectionServiceUri")]
		public string ConnectionServiceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectionSessionId")]
		public string ConnectionSessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectionSessionPath")]
		public string ConnectionSessionPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostPublicKeys")]
		public string[] HostPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relayEndpoint")]
		public string RelayEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relaySasToken")]
		public string RelaySasToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionToken")]
		public string SessionToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tunnelProperties")]
		public TunnelProperties TunnelProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TunnelProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectAccessToken")]
		public string ConnectAccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managePortsAccessToken")]
		public string ManagePortsAccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tunnelId")]
		public string TunnelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tunnelName")]
		public string TunnelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerInfoBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailoverDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="failoverEnabled")]
		public System.Nullable<System.Boolean> FailoverEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failoverRegion")]
		public AzureLocation FailoverRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GitStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="ahead")]
		public System.Nullable<System.Int32> Ahead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behind")]
		public System.Nullable<System.Int32> Behind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commit")]
		public string Commit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasUncommittedChanges")]
		public System.Nullable<System.Boolean> HasUncommittedChanges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasUnpushedChanges")]
		public System.Nullable<System.Boolean> HasUnpushedChanges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noGitRepo")]
		public System.Nullable<System.Boolean> NoGitRepo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConsumerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (None)")]
		_0_None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (System)")]
		_1_System = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (Trusted)")]
		_2_Trusted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4 (Neutral)")]
		_4_Neutral = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8 (Untrusted)")]
		_8_Untrusted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9 (Test)")]
		_9_Test = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuntimeConstraintsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowedPortPrivacySettings")]
		public PrivacyEnum[] AllowedPortPrivacySettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageAllowList")]
		public string[] ImageAllowList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SeedInfoBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloneUrl")]
		public string CloneUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitConfig")]
		public GitConfigOptionsBody GitConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurseClone")]
		public System.Nullable<System.Boolean> RecurseClone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public RepositoryInfoBody Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seedMoniker")]
		public string SeedMoniker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seedType")]
		public string SeedType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GitConfigOptionsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryInfoBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createType")]
		public string CreateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diskUsage")]
		public string DiskUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildHash")]
		public string PrebuildHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public System.Nullable<System.Int64> RepoId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionData
	{
		
		[System.Runtime.Serialization.DataMember(Name="computeQuota")]
		public System.Nullable<System.Int32> ComputeQuota { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeUsage")]
		public System.Nullable<System.Int32> ComputeUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionState")]
		public string SubscriptionState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CollectedData
	{
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentActivityId")]
		public string ParentActivityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageName")]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCloudEnvironmentBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="analyticsTrackingId")]
		public string AnalyticsTrackingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoShutdownDelayMinutes")]
		public System.Nullable<System.Int32> AutoShutdownDelayMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billableOwner")]
		public BillableOwnerBody BillableOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public ConnectionInfoBody Connection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public string ContainerImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createAsPrebuild")]
		public System.Nullable<System.Boolean> CreateAsPrebuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devContainerJson")]
		public string DevContainerJson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devContainerPath")]
		public string DevContainerPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentalFeatures")]
		public ExperimentalFeaturesBody ExperimentalFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public System.Collections.Generic.Dictionary<string, string> Features { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitHubApiUrl")]
		public string GitHubApiUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitHubAppUrl")]
		public string GitHubAppUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitHubPfsAuthEndpoint")]
		public string GitHubPfsAuthEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="githubEnvironmentEndpoint")]
		public string GithubEnvironmentEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasDevcontainerJson")]
		public System.Nullable<System.Boolean> HasDevcontainerJson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityBody Identity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netmonCorrelationData")]
		public NetmonCorrelationDataBody NetmonCorrelationData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personalization")]
		public PersonalizationInfoBody Personalization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeConstraints")]
		public RuntimeConstraintsBody RuntimeConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public SecretDataBody[] Secrets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seed")]
		public SeedInfoBody Seed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testAccount")]
		public System.Nullable<System.Boolean> TestAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userTier")]
		public string UserTier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workingDirectory")]
		public string WorkingDirectory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentalFeaturesBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="enableDynamicHttpsDetection")]
		public System.Nullable<System.Boolean> EnableDynamicHttpsDetection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queueResourceAllocation")]
		public System.Nullable<System.Boolean> QueueResourceAllocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usePrebuildFastPathIfAvailable")]
		public System.Nullable<System.Boolean> UsePrebuildFastPathIfAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usePrebuiltImages")]
		public System.Nullable<System.Boolean> UsePrebuiltImages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useStorageV2")]
		public System.Nullable<System.Boolean> UseStorageV2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetmonCorrelationDataBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="billableOwnerCreatedAt")]
		public string BillableOwnerCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billableOwnerDatabaseId")]
		public string BillableOwnerDatabaseId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billableOwnerGlobalRelayId")]
		public string BillableOwnerGlobalRelayId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billableOwnerPlan")]
		public string BillableOwnerPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerCreatedAt")]
		public string OwnerCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerDatabaseId")]
		public string OwnerDatabaseId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerGlobalRelayId")]
		public string OwnerGlobalRelayId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerPlan")]
		public string OwnerPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryCreatedAt")]
		public string RepositoryCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryDatabaseId")]
		public string RepositoryDatabaseId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryGlobalRelayId")]
		public string RepositoryGlobalRelayId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryPrivate")]
		public System.Nullable<System.Boolean> RepositoryPrivate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalizationInfoBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="dotfilesInstallCommand")]
		public string DotfilesInstallCommand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dotfilesRepository")]
		public string DotfilesRepository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dotfilesTargetPath")]
		public string DotfilesTargetPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecretDataBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SecretType Type { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.Length(1, 65536)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecretType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (EnvironmentVariable)")]
		_1_EnvironmentVariable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (ContainerRegistry)")]
		_2_ContainerRegistry = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEnvironmentPoolResourceBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="environmentOptions")]
		public PrebuildEnvironmentOptions EnvironmentOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public SecretDataBody[] Secrets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrebuildEnvironmentOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEnvironmentStateChangeBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public CloudEnvironmentState NewValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldValue")]
		public CloudEnvironmentState OldValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrUpdatePoolBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainUserCredentials")]
		public DomainUserCredentials DomainUserCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hotPoolSettings")]
		public HotPoolSettings HotPoolSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolGroupName")]
		public string PoolGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userGroupName")]
		public string UserGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSpecs")]
		public VMSpecs VmSpecs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainUserCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationalUnit")]
		public string OrganizationalUnit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="passwordSecretIdentifier")]
		public string PasswordSecretIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HotPoolSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VMSpecs
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskType")]
		public VMDiskType DiskType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageResourceId")]
		public string ImageResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetResourceId")]
		public string SubnetResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VMDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (StandardHDD)")]
		_0_StandardHDD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (StandardSSD)")]
		_1_StandardSSD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (PremiumSSD)")]
		_2_PremiumSSD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePoolGroupBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="region")]
		public AzureLocation Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePrebuildTemplateBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="devContainerPath")]
		public string DevContainerPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentalFeatures")]
		public ExperimentalFeaturesBody ExperimentalFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public System.Collections.Generic.Dictionary<string, string> Features { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitHubPrebuildInstanceEndpoint")]
		public string GitHubPrebuildInstanceEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitHubPrebuildTemplateEndpoint")]
		public string GitHubPrebuildTemplateEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seed")]
		public SeedInfoBody Seed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public StorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateInfo")]
		public PrebuildTemplateInfo TemplateInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (V1)")]
		_0_V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (V2)")]
		_1_V2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrebuildTemplateInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="container")]
		public ContainerInfo Container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildConfigurationId")]
		public string PrebuildConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateSizeInGB")]
		public System.Nullable<System.Double> TemplateSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalTimeSavingsInSeconds")]
		public string TotalTimeSavingsInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workFlowRunId")]
		public string WorkFlowRunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTemplateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sasUrl")]
		public string SasUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DelegateIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePrebuildTemplatesBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devContainerPath")]
		public string DevContainerPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildConfigurationId")]
		public System.Nullable<System.Int64> PrebuildConfigurationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public long RepoId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentBillingInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentRegistrationCallbackBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public EnvironmentRegistrationCallbackPayloadBody Payload { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentRegistrationCallbackPayloadBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionPath")]
		public string SessionPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentStateChange
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public EnvironmentBillingInfo Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public CloudEnvironmentState NewValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldValue")]
		public CloudEnvironmentState OldValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partitionKey")]
		public string PartitionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeartBeatBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentVersion")]
		public string AgentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectedDataList")]
		public CollectedData[] CollectedDataList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssueDelegatePlanAccessTokenBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="environmentIds")]
		public string[] EnvironmentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.Nullable<System.DateTimeOffset> Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public DelegateIdentity Identity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portNumbers")]
		public int[] PortNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationInfoResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public SkuInfoResult[] Skus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SkuInfoResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="availableSettings")]
		public AvailableSettingsResult AvailableSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="available")]
		public AzureLocation[] Available { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public AzureLocation Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostnames")]
		public System.Collections.Generic.Dictionary<string, string> Hostnames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MessageCodes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (Unknown)")]
		_0_Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (ExceededQuota)")]
		_1_ExceededQuota = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (EnvironmentNameAlreadyExists)")]
		_2_EnvironmentNameAlreadyExists = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 (EnvironmentDoesNotExist)")]
		_3_EnvironmentDoesNotExist = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4 (ShutdownStaticEnvironment)")]
		_4_ShutdownStaticEnvironment = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5 (StartStaticEnvironment)")]
		_5_StartStaticEnvironment = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 (EnvironmentNotAvailable)")]
		_6_EnvironmentNotAvailable = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7 (EnvironmentNotShutdown)")]
		_7_EnvironmentNotShutdown = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8 (UnableToAllocateResources)")]
		_8_UnableToAllocateResources = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9 (UnableToAllocateResourcesWhileStarting)")]
		_9_UnableToAllocateResourcesWhileStarting = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10 (RequestedAutoShutdownDelayMinutesIsInvalid)")]
		_10_RequestedAutoShutdownDelayMinutesIsInvalid = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11 (UnableToUpdateSku)")]
		_11_UnableToUpdateSku = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12 (RequestedSkuIsInvalid)")]
		_12_RequestedSkuIsInvalid = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13 (HeartbeatUnhealthy)")]
		_13_HeartbeatUnhealthy = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14 (StartEnvironmentGenericError)")]
		_14_StartEnvironmentGenericError = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15 (RestoringFromArchive)")]
		_15_RestoringFromArchive = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16 (FilePathIsInvalid)")]
		_16_FilePathIsInvalid = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17 (TooManyRecentFolders)")]
		_17_TooManyRecentFolders = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18 (SubscriptionIsBanned)")]
		_18_SubscriptionIsBanned = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19 (EnvironmentArchived)")]
		_19_EnvironmentArchived = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20 (SubscriptionStateIsNotRegistered)")]
		_20_SubscriptionStateIsNotRegistered = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21 (FeatureDisabled)")]
		_21_FeatureDisabled = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22 (SubscriptionCannotPerformAction)")]
		_22_SubscriptionCannotPerformAction = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23 (InvalidLocationChange)")]
		_23_InvalidLocationChange = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24 (PlanDoesNotExist)")]
		_24_PlanDoesNotExist = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25 (UnableToResolveEnvironmentNameConflict)")]
		_25_UnableToResolveEnvironmentNameConflict = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26 (ExceededSecretsQuota)")]
		_26_ExceededSecretsQuota = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27 (InvalidPlanTenant)")]
		_27_InvalidPlanTenant = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28 (ExportStaticEnvironment)")]
		_28_ExportStaticEnvironment = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29 (ExportEnvironmentGenericError)")]
		_29_ExportEnvironmentGenericError = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30 (ExceededOrgDevContainerMaxLength)")]
		_30_ExceededOrgDevContainerMaxLength = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31 (ActionNotAllowedInThisState)")]
		_31_ActionNotAllowedInThisState = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32 (ExportRunningEnvironmentError)")]
		_32_ExportRunningEnvironmentError = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="34 (EnvironmentCreationIsNotAllowed)")]
		_34_EnvironmentCreationIsNotAllowed = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="35 (GitHubProxyError)")]
		_35_GitHubProxyError = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="36 (PrebuildTemplateDeletionIsNotAllowed)")]
		_36_PrebuildTemplateDeletionIsNotAllowed = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37 (TierCapacityIsUnavailable)")]
		_37_TierCapacityIsUnavailable = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38 (EnvironmentIsNotRestorable)")]
		_38_EnvironmentIsNotRestorable = 37,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkSettingsResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NetworkSettingsResourceProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkSettingsResourceProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkSettingsResourceList
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public NetworkSettingsResource[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationDataBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayMode")]
		public string DisplayMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modal")]
		public System.Nullable<System.Boolean> Modal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public PlanResourceIdentity Identity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PlanResourceProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResourceIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResourceProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultCodespaceSku")]
		public string DefaultCodespaceSku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultEnvironmentSku")]
		public string DefaultEnvironmentSku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public PlanResourceEncryptionProperties Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vnetProperties")]
		public VnetProperties VnetProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResourceEncryptionProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="keySource")]
		public string KeySource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyVaultProperties")]
		public PlanResourceKeyVaultProperties KeyVaultProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResourceKeyVaultProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyVaultUri")]
		public string KeyVaultUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyVersion")]
		public string KeyVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VnetProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="subnetId")]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResourceHeaders
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientTenantId")]
		public string ClientTenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homeTenantId")]
		public string HomeTenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityPrincipalId")]
		public string IdentityPrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityUrl")]
		public string IdentityUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResourceList
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PlanResource[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanResourceUpdateBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public PlanResourceIdentity Identity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PlanResourceProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pool
	{
		
		[System.Runtime.Serialization.DataMember(Name="poolType")]
		public PrebuildMode PoolType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetCount")]
		public System.Nullable<System.Int64> TargetCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrebuildMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (None)")]
		_0_None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (Blob)")]
		_1_Blob = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (CodespacePool)")]
		_2_CodespacePool = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 (StoragePool)")]
		_3_StoragePool = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4 (CodespaceAndStoragePool)")]
		_4_CodespaceAndStoragePool = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolConfigRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxTargetCount")]
		public string MaxTargetCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minTargetCount")]
		public string MinTargetCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolCode")]
		public string PoolCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolType")]
		public string PoolType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetCount")]
		public string TargetCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolDefinitionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public System.Collections.Generic.Dictionary<string, string> Dimensions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public AzureLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logicalSkus")]
		public string[] LogicalSkus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public ResourceSubtype Subtype { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetCount")]
		public int TargetCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ResourceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceSubtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (Default)")]
		_0_Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (ShrunkBlob)")]
		_2_ShrunkBlob = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 (FullBlob)")]
		_3_FullBlob = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4 (UserParametersBlob)")]
		_4_UserParametersBlob = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5 (PrebuildHash)")]
		_5_PrebuildHash = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 (VnetInjected)")]
		_6_VnetInjected = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (ComputeVM)")]
		_1_ComputeVM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (StorageFileShare)")]
		_2_StorageFileShare = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 (StorageArchive)")]
		_3_StorageArchive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4 (KeyVault)")]
		_4_KeyVault = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5 (OSDisk)")]
		_5_OSDisk = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6 (NetworkInterface)")]
		_6_NetworkInterface = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7 (InputQueue)")]
		_7_InputQueue = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8 (Snapshot)")]
		_8_Snapshot = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9 (PoolQueue)")]
		_9_PoolQueue = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10 (VirtualNetwork)")]
		_10_VirtualNetwork = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11 (NetworkSecurityGroup)")]
		_11_NetworkSecurityGroup = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12 (LiveShareWorkspace)")]
		_12_LiveShareWorkspace = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13 (BasisTunnel)")]
		_13_BasisTunnel = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14 (StorageBlockBlob)")]
		_14_StorageBlockBlob = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15 (DataDisk)")]
		_15_DataDisk = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16 (PortForwardingWorkspace)")]
		_16_PortForwardingWorkspace = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolGroupResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public AzureLocation Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainUserCredentials")]
		public DomainUserCredentials DomainUserCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hotPoolSettings")]
		public HotPoolSettings HotPoolSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="poolGroupName")]
		public string PoolGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningStatus")]
		public ProvisioningStatusResult ProvisioningStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userGroupName")]
		public string UserGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSpecs")]
		public VMSpecs VmSpecs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningStatusResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="completedSteps")]
		public System.Nullable<System.Int32> CompletedSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentStepDescription")]
		public string CurrentStepDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReady")]
		public System.Nullable<System.Boolean> IsReady { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operationStartedTimeUtc")]
		public string OperationStartedTimeUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalSteps")]
		public System.Nullable<System.Int32> TotalSteps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolSettingsBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devContainerPath")]
		public string DevContainerPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pools")]
		public Pool[] Pools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public string RepoId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public StorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public string Subscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PoolStatusResponseBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="allWithLatestVersion")]
		public System.Nullable<System.Boolean> AllWithLatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEnvironmentPool")]
		public System.Nullable<System.Boolean> IsEnvironmentPool { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolCode")]
		public string PoolCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readyUnassignedCount")]
		public System.Nullable<System.Int32> ReadyUnassignedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readyUnassignedLatestVersionCount")]
		public System.Nullable<System.Int32> ReadyUnassignedLatestVersionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readyUnassignedNotLatestVersionAndIdleCount")]
		public System.Nullable<System.Int32> ReadyUnassignedNotLatestVersionAndIdleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readyUnassignedNotLatestVersionCount")]
		public System.Nullable<System.Int32> ReadyUnassignedNotLatestVersionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrebuildReadinessResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devContainerPath")]
		public string DevContainerPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public AzureLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poolSkus")]
		public string[] PoolSkus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildHash")]
		public string PrebuildHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public string RepoId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedSkus")]
		public string[] SupportedSkus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateSkus")]
		public string[] TemplateSkus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrebuildTemplateInfoResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devcontainerPath")]
		public string DevcontainerPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrebuild")]
		public System.Nullable<System.Boolean> IsPrebuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUsedTime")]
		public System.Nullable<System.DateTimeOffset> LastUsedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logicalSkus")]
		public string[] LogicalSkus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildConfigurationId")]
		public string PrebuildConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildHash")]
		public string PrebuildHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public System.Nullable<System.Int64> RepoId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateStatus")]
		public string TemplateStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileSpecifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="oid")]
		public string Oid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tid")]
		public string Tid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RPSubscriptionNotification
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RPSubscriptionProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationDate")]
		public System.Nullable<System.DateTimeOffset> RegistrationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RPSubscriptionProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountOwner")]
		public SubscriptionAccountOwner AccountOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalProperties")]
		public SubscriptionAdditionalProperties AdditionalProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationPlacementId")]
		public string LocationPlacementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managedByTenants")]
		public StringStringKeyValuePair[] ManagedByTenants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quotaId")]
		public string QuotaId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredFeatures")]
		public StringStringKeyValuePair[] RegisteredFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionAccountOwner
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="puid")]
		public string Puid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionAdditionalProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingProperties")]
		public BillingProperties BillingProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceProviderProperties")]
		public string ResourceProviderProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringStringKeyValuePair
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefreshProfileTelemetryPropertiesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="partner")]
		public string Partner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userIds")]
		public string UserIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RefreshProfileTelemetryPropertiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public ProfileSpecifier[] Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="succeeded")]
		public ProfileSpecifier[] Succeeded { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplayBillRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopedCreateSecretBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SecretFilterBody[] Filters { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		[System.ComponentModel.DataAnnotations.Length(0, 200)]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public SecretScope Scope { get; set; }
		
		/// <summary>
		/// Pattern: ^(?!CLOUDENV.*$)[a-zA-Z_][a-zA-Z0-9_]{0,199}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!CLOUDENV.*$)[a-zA-Z_][a-zA-Z0-9_]{0,199}$")]
		public string SecretName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SecretType Type { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.Length(1, 65536)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecretFilterBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SecretFilterType Type { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.Length(1, 200)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecretFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (GitRepo)")]
		_1_GitRepo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (CodespaceName)")]
		_2_CodespaceName = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecretScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (Plan)")]
		_1_Plan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (User)")]
		_2_User = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopedSecretResultBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SecretFilterBody[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public SecretScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SecretType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopedUpdateSecretBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public SecretFilterBody[] Filters { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		[System.ComponentModel.DataAnnotations.Length(0, 200)]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public SecretScope Scope { get; set; }
		
		/// <summary>
		/// Pattern: ^(?!CLOUDENV.*$)[a-zA-Z_][a-zA-Z0-9_]{0,199}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!CLOUDENV.*$)[a-zA-Z_][a-zA-Z0-9_]{0,199}$")]
		public string SecretName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 65536
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.Length(1, 65536)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelemetryData
	{
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optionalValues")]
		public System.Collections.Generic.Dictionary<string, string> OptionalValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TenantInfoResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TunnelPortInfoResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="portVisibility")]
		public string PortVisibility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tunnelToken")]
		public string TunnelToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnderInvestigationResponseBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="investigationStarted")]
		public System.Nullable<System.DateTimeOffset> InvestigationStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="underInvestigation")]
		public System.Nullable<System.Boolean> UnderInvestigation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.Boolean> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnfilteredCloudEnvironmentResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.DateTimeOffset> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoShutdownDelayMinutes")]
		public System.Nullable<System.Int32> AutoShutdownDelayMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billableOwnerType")]
		public BillableOwnerType BillableOwnerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientUsage")]
		public ClientUsageSession ClientUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public ConnectionInfoBody Connection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container")]
		public ContainerInfoBody Container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public string ContainerImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createFromPrebuild")]
		public System.Nullable<System.Boolean> CreateFromPrebuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayStorageUtilizationInKb")]
		public System.Nullable<System.Boolean> DisplayStorageUtilizationInKb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportedBlobUrl")]
		public string ExportedBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failoverDetails")]
		public FailoverDetails FailoverDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public System.Collections.Generic.Dictionary<string, string> Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitStatus")]
		public GitStatus GitStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStateUpdateReason")]
		public string LastStateUpdateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUsed")]
		public System.Nullable<System.DateTimeOffset> LastUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portForwardingConnection")]
		public ConnectionInfoBody PortForwardingConnection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prebuildType")]
		public string PrebuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recentFolders")]
		public string[] RecentFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTier")]
		public ConsumerType ResourceTier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeConstraints")]
		public RuntimeConstraintsBody RuntimeConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seed")]
		public SeedInfoBody Seed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skuDisplayName")]
		public string SkuDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageUtilizationInKb")]
		public System.Nullable<System.Int64> StorageUtilizationInKb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionData")]
		public SubscriptionData SubscriptionData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateStatus")]
		public string TemplateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCloudEnvironmentBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoShutdownDelayMinutes")]
		public System.Nullable<System.Int32> AutoShutdownDelayMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failoverDetails")]
		public FailoverDetails FailoverDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planAccessToken")]
		public string PlanAccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planId")]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePoolGroupBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePrebuildTemplateBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isSuccess")]
		public bool IsSuccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePrebuildTemplateVersionsBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devContainerPath")]
		public string DevContainerPath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxPrebuildTemplateVersions")]
		public int MaxPrebuildTemplateVersions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public long RepoId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSystemConfigurationBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUserSecretsRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public SecretDataBody[] Secrets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VMConnectionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectionType")]
		public VMConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liveShareWorkspaceId")]
		public string LiveShareWorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VMConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (LiveShare)")]
		_0_LiveShare = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (WVD)")]
		_1_WVD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VMResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public VMConnectionInfo Connection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provisioningStatus")]
		public ProvisioningStatusResult ProvisioningStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public VMStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VMStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0 (Provisioning)")]
		_0_Provisioning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1 (Ready)")]
		_1_Ready = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2 (Stopped)")]
		_2_Stopped = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3 (Deleted)")]
		_3_Deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmLogsUploadInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathInContainer")]
		public string PathInContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageUri")]
		public string StorageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmResourceId")]
		public string VmResourceId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ApiV1AgentTelemetryPost api/v1/AgentTelemetry
		/// </summary>
		public async Task ApiV1AgentTelemetryPostAsync(TelemetryData[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/AgentTelemetry";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1AgentTelemetryStandalonePost api/v1/AgentTelemetry/standalone
		/// </summary>
		public async Task ApiV1AgentTelemetryStandalonePostAsync(TelemetryData[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/AgentTelemetry/standalone";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Agents_familyGet api/v1/Agents/{family}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AgentResponse> ApiV1Agents_familyGetAsync(string family, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Agents/"+ (family==null? "" : System.Uri.EscapeDataString(family));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AgentResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1EnvironmentsGetByNameAndPlanIdAndDeleted api/v1/Environments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult[]> ApiV1EnvironmentsGetByNameAndPlanIdAndDeletedAsync(string name, string planId, bool deleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&planId=" + (planId==null? "" : System.Uri.EscapeDataString(planId))+"&deleted="+deleted;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1EnvironmentsPostByAccess api/v1/Environments
		/// </summary>
		public async Task ApiV1EnvironmentsPostByAccessAsync(bool access, CreateCloudEnvironmentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments?access="+access;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdDelete api/v1/Environments/{environmentId}
		/// </summary>
		public async Task ApiV1Environments_environmentIdDeleteAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdGetByConnectAndPfConnectAndDeleted api/v1/Environments/{environmentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdGetByConnectAndPfConnectAndDeletedAsync(string environmentId, bool connect, bool pfConnect, bool deleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"&connect="+connect+"&pfConnect="+pfConnect+"&deleted="+deleted;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdPatch api/v1/Environments/{environmentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdPatchAsync(string environmentId, UpdateCloudEnvironmentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentId_callbackPost api/v1/Environments/{environmentId}/_callback
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentId_callbackPostAsync(string environmentId, EnvironmentRegistrationCallbackBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/_callback";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdArchiveGet api/v1/Environments/{environmentId}/archive
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UnfilteredCloudEnvironmentResult> ApiV1Environments_environmentIdArchiveGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/archive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnfilteredCloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdArchivePost api/v1/Environments/{environmentId}/archive
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdArchivePostAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/archive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdExportPost api/v1/Environments/{environmentId}/export
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdExportPostAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/export";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdFolderPatch api/v1/Environments/{environmentId}/folder
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdFolderPatchAsync(string environmentId, CloudEnvironmentFolderBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/folder";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdHeartbeattokenGet api/v1/Environments/{environmentId}/heartbeattoken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdHeartbeattokenGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/heartbeattoken";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdNotifyPost api/v1/Environments/{environmentId}/notify
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> ApiV1Environments_environmentIdNotifyPostAsync(string environmentId, NotificationDataBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/notify";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				return jsonReader.ReadAsString();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdPorts_portDelete api/v1/Environments/{environmentId}/ports/{port}
		/// </summary>
		/// <param name="port">Minimum: 1
		/// Maximum: 65535
		// </param>
		/// <returns>Success</returns>
		public async Task ApiV1Environments_environmentIdPorts_portDeleteAsync(string environmentId, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/ports/"+port;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdPorts_portPut api/v1/Environments/{environmentId}/ports/{port}
		/// </summary>
		/// <param name="port">Minimum: 1
		/// Maximum: 65535
		// </param>
		/// <returns>Success</returns>
		public async Task ApiV1Environments_environmentIdPorts_portPutAsync(string environmentId, int port, AddForwardedPortSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/ports/"+port;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdRestorePatch api/v1/Environments/{environmentId}/restore
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Environments_environmentIdRestorePatchAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/restore";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdSecretsPut api/v1/Environments/{environmentId}/secrets
		/// </summary>
		public async Task ApiV1Environments_environmentIdSecretsPutAsync(string environmentId, UpdateUserSecretsRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/secrets";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdShutdownPost api/v1/Environments/{environmentId}/shutdown
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdShutdownPostAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/shutdown";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdStartPostByAccess api/v1/Environments/{environmentId}/start
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdStartPostByAccessAsync(string environmentId, bool access, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/start&access="+access;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdStateGet api/v1/Environments/{environmentId}/state
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Environments_environmentIdStateGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/state";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Environments_environmentIdUpdatesGet api/v1/Environments/{environmentId}/updates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1Environments_environmentIdUpdatesGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/updates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsBillingResendPost api/v1/GenevaActions/Billing/resend
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BillSummary> ApiV1GenevaActionsBillingResendPostAsync(ReplayBillRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Billing/resend";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillSummary>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsBilling_environmentIdGetByStartTimeAndEndTime api/v1/GenevaActions/Billing/{environmentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BillSummary> ApiV1GenevaActionsBilling_environmentIdGetByStartTimeAndEndTimeAsync(string environmentId, string startTime, string endTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Billing/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime))+"&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillSummary>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsBilling_environmentIdState_changesGet api/v1/GenevaActions/Billing/{environmentId}/state-changes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnvironmentStateChange> ApiV1GenevaActionsBilling_environmentIdState_changesGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Billing/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/state-changes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnvironmentStateChange>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsBilling_environmentIdState_changesPost api/v1/GenevaActions/Billing/{environmentId}/state-changes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnvironmentStateChange> ApiV1GenevaActionsBilling_environmentIdState_changesPostAsync(string environmentId, CreateEnvironmentStateChangeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Billing/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/state-changes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnvironmentStateChange>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsConfiguration_targetPost api/v1/GenevaActions/Configuration/{target}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SystemConfigurationResponse> ApiV1GenevaActionsConfiguration_targetPostAsync(string target, UpdateSystemConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Configuration/"+ (target==null? "" : System.Uri.EscapeDataString(target));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemConfigurationResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsConfiguration_target_keyDelete api/v1/GenevaActions/Configuration/{target}/{key}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1GenevaActionsConfiguration_target_keyDeleteAsync(string target, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Configuration/"+ (target==null? "" : System.Uri.EscapeDataString(target))+"/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsConfiguration_target_keyGet api/v1/GenevaActions/Configuration/{target}/{key}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SystemConfigurationResponse> ApiV1GenevaActionsConfiguration_target_keyGetAsync(string target, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Configuration/"+ (target==null? "" : System.Uri.EscapeDataString(target))+"/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemConfigurationResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsEnvironmentsStorage_environmentIdOrFriendlyName_targetBlobGet api/v1/GenevaActions/Environments/storage/{environmentIdOrFriendlyName}/{targetBlob}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> ApiV1GenevaActionsEnvironmentsStorage_environmentIdOrFriendlyName_targetBlobGetAsync(string environmentIdOrFriendlyName, string targetBlob, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Environments/storage/"+ (environmentIdOrFriendlyName==null? "" : System.Uri.EscapeDataString(environmentIdOrFriendlyName))+"/"+ (targetBlob==null? "" : System.Uri.EscapeDataString(targetBlob));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				return jsonReader.ReadAsString();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsEnvironments_environmentIdDeleteByDeletionType api/v1/GenevaActions/Environments/{environmentId}
		/// </summary>
		public async Task ApiV1GenevaActionsEnvironments_environmentIdDeleteByDeletionTypeAsync(string environmentId, string deletionType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"&deletionType=" + (deletionType==null? "" : System.Uri.EscapeDataString(deletionType));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsEnvironments_environmentIdGet api/v1/GenevaActions/Environments/{environmentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1GenevaActionsEnvironments_environmentIdGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsEnvironments_environmentIdArchivePut api/v1/GenevaActions/Environments/{environmentId}/archive
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1GenevaActionsEnvironments_environmentIdArchivePutAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/archive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsEnvironments_environmentIdShutdownPut api/v1/GenevaActions/Environments/{environmentId}/shutdown
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloudEnvironmentResult> ApiV1GenevaActionsEnvironments_environmentIdShutdownPutAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/shutdown";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloudEnvironmentResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsEnvironments_environmentIdUploadRunningVmLogsPost api/v1/GenevaActions/Environments/{environmentId}/upload/running/vm/logs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VmLogsUploadInfo> ApiV1GenevaActionsEnvironments_environmentIdUploadRunningVmLogsPostAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/upload/running/vm/logs";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VmLogsUploadInfo>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsPoolsChange_resource_deletion_settingPost api/v1/GenevaActions/Pools/change-resource-deletion-setting
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SystemConfigurationResponse> ApiV1GenevaActionsPoolsChange_resource_deletion_settingPostAsync(ChangeResourceDeletionRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Pools/change-resource-deletion-setting";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemConfigurationResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsPools_poolCodeRotate_poolPost api/v1/GenevaActions/Pools/{poolCode}/rotate-pool
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1GenevaActionsPools_poolCodeRotate_poolPostAsync(string poolCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Pools/"+ (poolCode==null? "" : System.Uri.EscapeDataString(poolCode))+"/rotate-pool";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsPools_targetPost api/v1/GenevaActions/Pools/{target}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SystemConfigurationResponse> ApiV1GenevaActionsPools_targetPostAsync(string target, PoolConfigRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Pools/"+ (target==null? "" : System.Uri.EscapeDataString(target));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemConfigurationResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsPrebuildsPoolsCreateorupdatesettingsPost api/v1/GenevaActions/Prebuilds/pools/createorupdatesettings
		/// </summary>
		public async Task ApiV1GenevaActionsPrebuildsPoolsCreateorupdatesettingsPostAsync(PoolSettingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Prebuilds/pools/createorupdatesettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsPrebuildsPoolsDeletePost api/v1/GenevaActions/Prebuilds/pools/delete
		/// </summary>
		public async Task ApiV1GenevaActionsPrebuildsPoolsDeletePostAsync(PoolSettingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Prebuilds/pools/delete";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsPrivacyRefresh_profile_telemetry_propertiesPost api/v1/GenevaActions/Privacy/refresh-profile-telemetry-properties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RefreshProfileTelemetryPropertiesResponse> ApiV1GenevaActionsPrivacyRefresh_profile_telemetry_propertiesPostAsync(RefreshProfileTelemetryPropertiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Privacy/refresh-profile-telemetry-properties";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RefreshProfileTelemetryPropertiesResponse>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsResources_resourceIdUnder_investigationPost api/v1/GenevaActions/Resources/{resourceId}/under-investigation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UnderInvestigationResponseBody> ApiV1GenevaActionsResources_resourceIdUnder_investigationPostAsync(string resourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/Resources/"+ (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"/under-investigation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnderInvestigationResponseBody>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsVnetPoolDefinitionsDelete api/v1/GenevaActions/VnetPoolDefinitions
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1GenevaActionsVnetPoolDefinitionsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/VnetPoolDefinitions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1GenevaActionsVnetPoolDefinitionsPost api/v1/GenevaActions/VnetPoolDefinitions
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1GenevaActionsVnetPoolDefinitionsPostAsync(PoolDefinitionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/GenevaActions/VnetPoolDefinitions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1HeartBeatPost api/v1/HeartBeat
		/// </summary>
		public async Task ApiV1HeartBeatPostAsync(HeartBeatBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/HeartBeat";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1LocationsGet api/v1/Locations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationsResult> ApiV1LocationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Locations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationsResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Locations_locationGetByPlanId api/v1/Locations/{location}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LocationInfoResult> ApiV1Locations_locationGetByPlanIdAsync(string location, string planId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"&planId=" + (planId==null? "" : System.Uri.EscapeDataString(planId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationInfoResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1PrebuildsPools_poolIdInstancesPost api/v1/Prebuilds/pools/{poolId}/instances
		/// </summary>
		public async Task ApiV1PrebuildsPools_poolIdInstancesPostAsync(string poolId, CreateEnvironmentPoolResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Prebuilds/pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/instances";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1PrebuildsPools_poolIdInstancesPut api/v1/Prebuilds/pools/{poolId}/instances
		/// </summary>
		public async Task ApiV1PrebuildsPools_poolIdInstancesPutAsync(string poolId, CreateEnvironmentPoolResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Prebuilds/pools/"+ (poolId==null? "" : System.Uri.EscapeDataString(poolId))+"/instances";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1PrebuildsTemplate_environmentIdGet api/v1/Prebuilds/template/{environmentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PrebuildTemplateInfoResult> ApiV1PrebuildsTemplate_environmentIdGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Prebuilds/template/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrebuildTemplateInfoResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1SasGet api/v1/Sas
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScopedSecretResultBody[]> ApiV1SasGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Sas";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScopedSecretResultBody[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1SecretsGetByPlanId api/v1/Secrets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScopedSecretResultBody[]> ApiV1SecretsGetByPlanIdAsync(string planId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Secrets?planId=" + (planId==null? "" : System.Uri.EscapeDataString(planId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScopedSecretResultBody[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1SecretsPostByPlanId api/v1/Secrets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScopedSecretResultBody> ApiV1SecretsPostByPlanIdAsync(string planId, ScopedCreateSecretBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Secrets?planId=" + (planId==null? "" : System.Uri.EscapeDataString(planId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScopedSecretResultBody>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Secrets_secretIdDeleteByPlanIdAndScope api/v1/Secrets/{secretId}
		/// </summary>
		public async Task ApiV1Secrets_secretIdDeleteByPlanIdAndScopeAsync(string planId, SecretScope scope, string secretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Secrets/"+ (secretId==null? "" : System.Uri.EscapeDataString(secretId))+"?planId=" + (planId==null? "" : System.Uri.EscapeDataString(planId))+"&scope="+scope;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Secrets_secretIdPutByPlanId api/v1/Secrets/{secretId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScopedSecretResultBody> ApiV1Secrets_secretIdPutByPlanIdAsync(string planId, string secretId, ScopedUpdateSecretBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Secrets/"+ (secretId==null? "" : System.Uri.EscapeDataString(secretId))+"?planId=" + (planId==null? "" : System.Uri.EscapeDataString(planId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScopedSecretResultBody>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdDelete api/v1/Tenant/{tenantId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdDeleteAsync(string tenantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdGet api/v1/Tenant/{tenantId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TenantInfoResult> ApiV1Tenant_tenantIdGetAsync(string tenantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TenantInfoResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPut api/v1/Tenant/{tenantId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPutAsync(string tenantId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1TokensPlans_planNameDeleteAllCodespacesPostByExpiration api/v1/Tokens/plans/{planName}/deleteAllCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1TokensPlans_planNameDeleteAllCodespacesPostByExpirationAsync(string planName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tokens/plans/"+ (planName==null? "" : System.Uri.EscapeDataString(planName))+"/deleteAllCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1TokensPlans_planNameReadAllCodespacesPostByExpiration api/v1/Tokens/plans/{planName}/readAllCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1TokensPlans_planNameReadAllCodespacesPostByExpirationAsync(string planName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tokens/plans/"+ (planName==null? "" : System.Uri.EscapeDataString(planName))+"/readAllCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1TokensPlans_planNameWriteCodespacesPostByExpiration api/v1/Tokens/plans/{planName}/writeCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1TokensPlans_planNameWriteCodespacesPostByExpirationAsync(string planName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tokens/plans/"+ (planName==null? "" : System.Uri.EscapeDataString(planName))+"/writeCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1TokensPlans_planNameWriteDelegatesPost api/v1/Tokens/plans/{planName}/writeDelegates
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1TokensPlans_planNameWriteDelegatesPostAsync(string planName, IssueDelegatePlanAccessTokenBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tokens/plans/"+ (planName==null? "" : System.Uri.EscapeDataString(planName))+"/writeDelegates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1TokensSubscriptions_subscriptionIdResourceGroups_resourceGroupProviders_providerNamespacePlans_resourceNamePut api/v1/Tokens/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/{providerNamespace}/plans/{resourceName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1TokensSubscriptions_subscriptionIdResourceGroups_resourceGroupProviders_providerNamespacePlans_resourceNamePutAsync(string subscriptionId, string resourceGroup, string providerNamespace, string resourceName, PlanResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tokens/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/"+ (providerNamespace==null? "" : System.Uri.EscapeDataString(providerNamespace))+"/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tunnel_environmentIdPortInfoGetByPortNumber api/v1/Tunnel/{environmentId}/portInfo
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TunnelPortInfoResult> ApiV1Tunnel_environmentIdPortInfoGetByPortNumberAsync(string environmentId, int portNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Tunnel/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/portInfo&portNumber="+portNumber;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TunnelPortInfoResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1UserSubscriptionsDeleteByEmail api/v1/UserSubscriptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1UserSubscriptionsDeleteByEmailAsync(string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/UserSubscriptions?email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1UserSubscriptionsPostByEmail api/v1/UserSubscriptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1UserSubscriptionsPostByEmailAsync(string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/UserSubscriptions?email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1PoolsDefaultGetBySkuName api/v1/pools/default
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PoolStatusResponseBody[]> ApiV1PoolsDefaultGetBySkuNameAsync(string[] skuName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/pools/default?"+string.Join("&", skuName.Select(z => $"skuName={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PoolStatusResponseBody[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdProvidersGitHub_Network_resourceTypeSubscriptionLifeCycleNotificationPut api/v1/subscriptions/{subscriptionId}/providers/GitHub.Network/{resourceType}/SubscriptionLifeCycleNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdProvidersGitHub_Network_resourceTypeSubscriptionLifeCycleNotificationPutAsync(string subscriptionId, string resourceType, RPSubscriptionNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/SubscriptionLifeCycleNotification";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdProvidersGitHub_Network_resourceTypeResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/providers/GitHub.Network/{resourceType}/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdProvidersGitHub_Network_resourceTypeResourceReadBeginPostAsync(string subscriptionId, string resourceType, NetworkSettingsResourceList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_CodespacesPlansSubscriptionLifeCycleNotificationPut api/v1/subscriptions/{subscriptionId}/providers/Microsoft.Codespaces/plans/SubscriptionLifeCycleNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_CodespacesPlansSubscriptionLifeCycleNotificationPutAsync(string subscriptionId, RPSubscriptionNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Codespaces/plans/SubscriptionLifeCycleNotification";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_CodespacesPlansResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/providers/Microsoft.Codespaces/plans/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_CodespacesPlansResourceReadBeginPostAsync(string subscriptionId, PlanResourceList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Codespaces/plans/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_VSOnlinePlansSubscriptionLifeCycleNotificationPut api/v1/subscriptions/{subscriptionId}/providers/Microsoft.VSOnline/plans/SubscriptionLifeCycleNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_VSOnlinePlansSubscriptionLifeCycleNotificationPutAsync(string subscriptionId, RPSubscriptionNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VSOnline/plans/SubscriptionLifeCycleNotification";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_VSOnlinePlansResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/providers/Microsoft.VSOnline/plans/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdProvidersMicrosoft_VSOnlinePlansResourceReadBeginPostAsync(string subscriptionId, PlanResourceList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.VSOnline/plans/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceTypeResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceTypeResourceReadBeginPostAsync(string subscriptionId, string resourceGroup, string resourceType, NetworkSettingsResourceList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameDelete api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameDeleteAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNamePatch api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNamePatchAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, NetworkSettingsResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNamePut api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNamePutAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, NetworkSettingsResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceCreationCompletedPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}/resourceCreationCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceCreationCompletedPostAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceCreationCompleted";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceCreationValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}/resourceCreationValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceCreationValidatePostAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, NetworkSettingsResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceCreationValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceDeletionCompletedPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}/resourceDeletionCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceDeletionCompletedPostAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceDeletionCompleted";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceDeletionValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}/resourceDeletionValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceDeletionValidatePostAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, NetworkSettingsResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceDeletionValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourcePatchCompletedPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}/resourcePatchCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourcePatchCompletedPostAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourcePatchCompleted";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourcePatchValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}/resourcePatchValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourcePatchValidatePostAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, NetworkSettingsResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourcePatchValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/GitHub.Network/{resourceType}/{resourceName}/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersGitHub_Network_resourceType_resourceNameResourceReadBeginPostAsync(string subscriptionId, string resourceGroup, string resourceType, string resourceName, NetworkSettingsResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/GitHub.Network/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlansResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlansResourceReadBeginPostAsync(string subscriptionId, string resourceGroup, PlanResourceList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNamePut api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNamePutAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameDeleteAllCodespacesPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/deleteAllCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameDeleteAllCodespacesPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/deleteAllCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameDeleteAllEnvironmentsPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/deleteAllEnvironments
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameDeleteAllEnvironmentsPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/deleteAllEnvironments&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameReadAllCodespacesPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/readAllCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameReadAllCodespacesPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/readAllCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameReadAllEnvironmentsPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/readAllEnvironments
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameReadAllEnvironmentsPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/readAllEnvironments&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameReadDelegatesPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/readDelegates
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameReadDelegatesPostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/readDelegates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceCreationCompletedPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/resourceCreationCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceCreationCompletedPostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceCreationCompleted";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceCreationValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/resourceCreationValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceCreationValidatePostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceCreationValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceDeletionValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/resourceDeletionValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceDeletionValidatePostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceDeletionValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourcePatchCompletedPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/resourcePatchCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourcePatchCompletedPostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResourceUpdateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourcePatchCompleted";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourcePatchValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/resourcePatchValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourcePatchValidatePostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResourceUpdateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourcePatchValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameResourceReadBeginPostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameWriteCodespacesPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/writeCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameWriteCodespacesPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/writeCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameWriteDelegatesPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/writeDelegates
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameWriteDelegatesPostAsync(string subscriptionId, string resourceGroup, string resourceName, IssueDelegatePlanAccessTokenBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/writeDelegates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameWriteEnvironmentsPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/writeEnvironments
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameWriteEnvironmentsPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/writeEnvironments&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlansResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlansResourceReadBeginPostAsync(string subscriptionId, string resourceGroup, PlanResourceList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNamePut api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNamePutAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameDeleteAllCodespacesPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/deleteAllCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameDeleteAllCodespacesPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/deleteAllCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameDeleteAllEnvironmentsPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/deleteAllEnvironments
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameDeleteAllEnvironmentsPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/deleteAllEnvironments&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameReadAllCodespacesPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/readAllCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameReadAllCodespacesPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/readAllCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameReadAllEnvironmentsPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/readAllEnvironments
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameReadAllEnvironmentsPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/readAllEnvironments&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameReadDelegatesPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/readDelegates
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameReadDelegatesPostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/readDelegates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceCreationCompletedPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/resourceCreationCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceCreationCompletedPostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceCreationCompleted";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceCreationValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/resourceCreationValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceCreationValidatePostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceCreationValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceDeletionValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/resourceDeletionValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceDeletionValidatePostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceDeletionValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourcePatchCompletedPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/resourcePatchCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourcePatchCompletedPostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResourceUpdateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourcePatchCompleted";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourcePatchValidatePost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/resourcePatchValidate
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourcePatchValidatePostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResourceUpdateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourcePatchValidate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceReadBeginPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/resourceReadBegin
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameResourceReadBeginPostAsync(string subscriptionId, string resourceGroup, string resourceName, PlanResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/resourceReadBegin";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameWriteCodespacesPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/writeCodespaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameWriteCodespacesPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/writeCodespaces&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameWriteDelegatesPost api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/writeDelegates
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameWriteDelegatesPostAsync(string subscriptionId, string resourceGroup, string resourceName, IssueDelegatePlanAccessTokenBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/writeDelegates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameWriteEnvironmentsPostByExpiration api/v1/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/writeEnvironments
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionIdResourceGroups_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameWriteEnvironmentsPostByExpirationAsync(string subscriptionId, string resourceGroup, string resourceName, System.DateTimeOffset expiration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/writeEnvironments&expiration=" + expiration.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionId_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameDeleteDelegatesPost api/v1/subscriptions/{subscriptionId}/{resourceGroup}/providers/Microsoft.Codespaces/plans/{resourceName}/deleteDelegates
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionId_resourceGroupProvidersMicrosoft_CodespacesPlans_resourceNameDeleteDelegatesPostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.Codespaces/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/deleteDelegates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Subscriptions_subscriptionId_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameDeleteDelegatesPost api/v1/subscriptions/{subscriptionId}/{resourceGroup}/providers/Microsoft.VSOnline/plans/{resourceName}/deleteDelegates
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Subscriptions_subscriptionId_resourceGroupProvidersMicrosoft_VSOnlinePlans_resourceNameDeleteDelegatesPostAsync(string subscriptionId, string resourceGroup, string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/"+ (resourceGroup==null? "" : System.Uri.EscapeDataString(resourceGroup))+"/providers/Microsoft.VSOnline/plans/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/deleteDelegates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameDelete api/v1/tenant/{tenantId}/Pool/{poolName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPool_poolNameDeleteAsync(string tenantId, string poolName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/Pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameGet api/v1/tenant/{tenantId}/Pool/{poolName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PoolResult> ApiV1Tenant_tenantIdPool_poolNameGetAsync(string tenantId, string poolName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/Pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PoolResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNamePatch api/v1/tenant/{tenantId}/Pool/{poolName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PoolResult> ApiV1Tenant_tenantIdPool_poolNamePatchAsync(string tenantId, string poolName, CreateOrUpdatePoolBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/Pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PoolResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNamePut api/v1/tenant/{tenantId}/Pool/{poolName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PoolResult> ApiV1Tenant_tenantIdPool_poolNamePutAsync(string tenantId, string poolName, CreateOrUpdatePoolBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/Pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PoolResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPoolGroup_poolGroupNameDelete api/v1/tenant/{tenantId}/PoolGroup/{poolGroupName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPoolGroup_poolGroupNameDeleteAsync(string tenantId, string poolGroupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/PoolGroup/"+ (poolGroupName==null? "" : System.Uri.EscapeDataString(poolGroupName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPoolGroup_poolGroupNameGet api/v1/tenant/{tenantId}/PoolGroup/{poolGroupName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PoolGroupResult> ApiV1Tenant_tenantIdPoolGroup_poolGroupNameGetAsync(string tenantId, string poolGroupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/PoolGroup/"+ (poolGroupName==null? "" : System.Uri.EscapeDataString(poolGroupName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PoolGroupResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPoolGroup_poolGroupNamePatch api/v1/tenant/{tenantId}/PoolGroup/{poolGroupName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPoolGroup_poolGroupNamePatchAsync(string tenantId, string poolGroupName, UpdatePoolGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/PoolGroup/"+ (poolGroupName==null? "" : System.Uri.EscapeDataString(poolGroupName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPoolGroup_poolGroupNamePut api/v1/tenant/{tenantId}/PoolGroup/{poolGroupName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPoolGroup_poolGroupNamePutAsync(string tenantId, string poolGroupName, CreatePoolGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/PoolGroup/"+ (poolGroupName==null? "" : System.Uri.EscapeDataString(poolGroupName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameVmGet api/v1/tenant/{tenantId}/pool/{poolName}/Vm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VMResult[]> ApiV1Tenant_tenantIdPool_poolNameVmGetAsync(string tenantId, string poolName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/Vm";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VMResult[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameVm_vmNameDelete api/v1/tenant/{tenantId}/pool/{poolName}/Vm/{vmName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPool_poolNameVm_vmNameDeleteAsync(string tenantId, string poolName, string vmName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/Vm/"+ (vmName==null? "" : System.Uri.EscapeDataString(vmName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameVm_vmNameGet api/v1/tenant/{tenantId}/pool/{poolName}/Vm/{vmName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VMResult> ApiV1Tenant_tenantIdPool_poolNameVm_vmNameGetAsync(string tenantId, string poolName, string vmName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/Vm/"+ (vmName==null? "" : System.Uri.EscapeDataString(vmName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VMResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameVm_vmNamePut api/v1/tenant/{tenantId}/pool/{poolName}/Vm/{vmName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VMResult> ApiV1Tenant_tenantIdPool_poolNameVm_vmNamePutAsync(string tenantId, string poolName, string vmName, ClaimVMBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/Vm/"+ (vmName==null? "" : System.Uri.EscapeDataString(vmName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VMResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameVm_vmNameStartPost api/v1/tenant/{tenantId}/pool/{poolName}/Vm/{vmName}/start
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPool_poolNameVm_vmNameStartPostAsync(string tenantId, string poolName, string vmName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/Vm/"+ (vmName==null? "" : System.Uri.EscapeDataString(vmName))+"/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV1Tenant_tenantIdPool_poolNameVm_vmNameStopPost api/v1/tenant/{tenantId}/pool/{poolName}/Vm/{vmName}/stop
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1Tenant_tenantIdPool_poolNameVm_vmNameStopPostAsync(string tenantId, string poolName, string vmName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/tenant/"+ (tenantId==null? "" : System.Uri.EscapeDataString(tenantId))+"/pool/"+ (poolName==null? "" : System.Uri.EscapeDataString(poolName))+"/Vm/"+ (vmName==null? "" : System.Uri.EscapeDataString(vmName))+"/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV2PrebuildsDeletePost api/v2/prebuilds/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV2PrebuildsDeletePostAsync(DeletePrebuildTemplatesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/prebuilds/delete";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV2PrebuildsRepository_repoIdBranch_branchNameDelete api/v2/prebuilds/repository/{repoId}/branch/{branchName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV2PrebuildsRepository_repoIdBranch_branchNameDeleteAsync(long repoId, string branchName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/prebuilds/repository/"+repoId+"/branch/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV2PrebuildsTemplatesPost api/v2/prebuilds/templates
		/// </summary>
		public async Task ApiV2PrebuildsTemplatesPostAsync(CreatePrebuildTemplateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/prebuilds/templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV2PrebuildsTemplatesSkusRepo_repoIdBranch_branchNameHash_prebuildHashLocation_locationDevcontainerpath_devContainerPathGetByStorageTypeAndFastPathEnabled api/v2/prebuilds/templates/skus/repo/{repoId}/branch/{branchName}/hash/{prebuildHash}/location/{location}/devcontainerpath/{devContainerPath}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PrebuildReadinessResult> ApiV2PrebuildsTemplatesSkusRepo_repoIdBranch_branchNameHash_prebuildHashLocation_locationDevcontainerpath_devContainerPathGetByStorageTypeAndFastPathEnabledAsync(string repoId, string branchName, string prebuildHash, string location, string devContainerPath, StorageType storageType, bool fastPathEnabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/prebuilds/templates/skus/repo/"+ (repoId==null? "" : System.Uri.EscapeDataString(repoId))+"/branch/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/hash/"+ (prebuildHash==null? "" : System.Uri.EscapeDataString(prebuildHash))+"/location/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/devcontainerpath/"+ (devContainerPath==null? "" : System.Uri.EscapeDataString(devContainerPath))+"&storageType="+storageType+"&fastPathEnabled="+fastPathEnabled;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrebuildReadinessResult>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV2PrebuildsTemplatesUpdatemaxversionsPost api/v2/prebuilds/templates/updatemaxversions
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV2PrebuildsTemplatesUpdatemaxversionsPostAsync(UpdatePrebuildTemplateVersionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/prebuilds/templates/updatemaxversions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// ApiV2PrebuildsTemplates_templateIdUpdatestatusPost api/v2/prebuilds/templates/{templateId}/updatestatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV2PrebuildsTemplates_templateIdUpdatestatusPostAsync(string templateId, UpdatePrebuildTemplateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/prebuilds/templates/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId))+"/updatestatus";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// HealthGet health
		/// </summary>
		/// <returns>Success</returns>
		public async Task HealthGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// InternalNetmonCorrelationGetByMacAddress internal/Netmon/correlation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> InternalNetmonCorrelationGetByMacAddressAsync(string macAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "internal/Netmon/correlation?macAddress=" + (macAddress==null? "" : System.Uri.EscapeDataString(macAddress));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				return jsonReader.ReadAsString();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// WarmupGet warmup
		/// </summary>
		/// <returns>Success</returns>
		public async Task WarmupGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "warmup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
