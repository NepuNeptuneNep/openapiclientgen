//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Answered
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Answered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unanswered = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttachmentViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileSizeBytes")]
		public System.Nullable<System.Int64> FileSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public string FileType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DailyReportViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSizeBytes")]
		public System.Nullable<System.Int64> FileSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public System.Nullable<DailyReportViewModelHouse> House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DailyReportViewModelHouse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bicameral = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commons = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lords = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DailyReportViewModelItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DailyReportViewModel Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DailyReportViewModelSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public DailyReportViewModelItem[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupedQuestionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateTabled")]
		public System.Nullable<System.DateTimeOffset> DateTabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questionUin")]
		public string QuestionUin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HouseEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bicameral = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commons = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lords = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkedStatements
	{
		
		[System.Runtime.Serialization.DataMember(Name="linkDate")]
		public System.Nullable<System.DateTimeOffset> LinkDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public System.Nullable<LinkedStatementsLinkType> LinkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedStatementId")]
		public System.Nullable<System.Int32> LinkedStatementId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LinkedStatementsLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CorrectedStatement = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CorrectedAnswer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JointStatement = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MemberViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listAs")]
		public string ListAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberFrom")]
		public string MemberFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyAbbreviation")]
		public string PartyAbbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyColour")]
		public string PartyColour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QuestionStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAnswered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnsweredOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllQuestions = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuestionsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="answerIsCorrection")]
		public System.Nullable<System.Boolean> AnswerIsCorrection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answerIsHolding")]
		public System.Nullable<System.Boolean> AnswerIsHolding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answerText")]
		public string AnswerText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringBodyId")]
		public System.Nullable<System.Int32> AnsweringBodyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringBodyName")]
		public string AnsweringBodyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringMember")]
		public MemberViewModel AnsweringMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringMemberId")]
		public System.Nullable<System.Int32> AnsweringMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="askingMember")]
		public MemberViewModel AskingMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="askingMemberId")]
		public System.Nullable<System.Int32> AskingMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachmentCount")]
		public System.Nullable<System.Int32> AttachmentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public AttachmentViewModel[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparableAnswerText")]
		public string ComparableAnswerText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="correctingMember")]
		public MemberViewModel CorrectingMember { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="correctingMemberId")]
		public System.Nullable<System.Int32> CorrectingMemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateAnswerCorrected")]
		public System.Nullable<System.DateTimeOffset> DateAnswerCorrected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateAnswered")]
		public System.Nullable<System.DateTimeOffset> DateAnswered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateForAnswer")]
		public System.Nullable<System.DateTimeOffset> DateForAnswer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateHoldingAnswer")]
		public System.Nullable<System.DateTimeOffset> DateHoldingAnswer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTabled")]
		public System.Nullable<System.DateTimeOffset> DateTabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupedQuestions")]
		public string[] GroupedQuestions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupedQuestionsDates")]
		public GroupedQuestionViewModel[] GroupedQuestionsDates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heading")]
		public string Heading { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public DailyReportViewModelHouse House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNamedDay")]
		public System.Nullable<System.Boolean> IsNamedDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWithdrawn")]
		public System.Nullable<System.Boolean> IsWithdrawn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberHasInterest")]
		public System.Nullable<System.Boolean> MemberHasInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalAnswerText")]
		public string OriginalAnswerText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questionText")]
		public string QuestionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uin")]
		public string Uin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuestionsViewModelItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public QuestionsViewModel Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuestionsViewModelSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public QuestionsViewModelItem[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StatementLinkTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CorrectedStatement = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CorrectedAnswer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JointStatement = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatementsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="answeringBodyId")]
		public System.Nullable<System.Int32> AnsweringBodyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answeringBodyName")]
		public string AnsweringBodyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public AttachmentViewModel[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateMade")]
		public System.Nullable<System.DateTimeOffset> DateMade { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasAttachments")]
		public System.Nullable<System.Boolean> HasAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasLinkedStatements")]
		public System.Nullable<System.Boolean> HasLinkedStatements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public DailyReportViewModelHouse House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedStatements")]
		public LinkedStatements[] LinkedStatements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public MemberViewModel Member { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberId")]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberRole")]
		public string MemberRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noticeNumber")]
		public System.Nullable<System.Int32> NoticeNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uin")]
		public string Uin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatementsViewModelItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StatementsViewModel Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatementsViewModelSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public StatementsViewModelItem[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of daily reports
		/// DailyReportsGetByDateFromAndDateToAndHouseAndSkipAndTake api/dailyreports/dailyreports
		/// </summary>
		/// <param name="dateFrom">Daily report with report date on or after the date specified. Date format yyyy-mm-dd</param>
		/// <param name="dateTo">Daily report with report date on or before the date specified. Date format yyyy-mm-dd</param>
		/// <param name="house">Daily report relating to the House specified. Defaults to Bicameral</param>
		/// <param name="skip">Number of records to skip, default is 0
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="take">Number of records to take, default is 20
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<DailyReportViewModelSearchResult> DailyReportsGetByDateFromAndDateToAndHouseAndSkipAndTakeAsync(System.DateTimeOffset dateFrom, System.DateTimeOffset dateTo, DailyReportViewModelHouse house, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dailyreports/dailyreports?dateFrom=" + dateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&dateTo=" + dateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&house=" + house+"&skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DailyReportViewModelSearchResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of written questions
		/// WrittenQuestionsGetByAskingMemberIdAndAnsweringMemberIdAndTabledWhenFromAndTabledWhenToAndAnsweredAndAnsweredWhenFromAndAnsweredWhenToAndQuestionStatusAndIncludeWithdrawnAndExpandMemberAndCorrectedWhenFromAndCorrectedWhenToAndSearchTermAndUINAndAnsweringBodiesAndMembersAndHouseAndSkipAndTake api/writtenquestions/questions
		/// </summary>
		/// <param name="askingMemberId">Written questions asked by member with member ID specified
		/// Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <param name="answeringMemberId">Written questions answered by member with member ID specified
		/// Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <param name="tabledWhenFrom">Written questions tabled on or after the date specified. Date format yyyy-mm-dd</param>
		/// <param name="tabledWhenTo">Written questions tabled on or before the date specified. Date format yyyy-mm-dd</param>
		/// <param name="answered">Written questions that have been answered, unanswered or either.</param>
		/// <param name="answeredWhenFrom">Written questions answered on or after the date specified. Date format yyyy-mm-dd</param>
		/// <param name="answeredWhenTo">Written questions answered on or before the date specified. Date format yyyy-mm-dd</param>
		/// <param name="questionStatus">Written questions with the status specified</param>
		/// <param name="includeWithdrawn">Include written questions that have been withdrawn</param>
		/// <param name="expandMember">Expand the details of Members in the results</param>
		/// <param name="correctedWhenFrom">Written questions corrected on or after the date specified. Date format yyyy-mm-dd</param>
		/// <param name="correctedWhenTo">Written questions corrected on or before the date specified. Date format yyyy-mm-dd</param>
		/// <param name="searchTerm">Written questions / statements containing the search term specified, searches item content</param>
		/// <param name="uIN">Written questions / statements with the uin specified</param>
		/// <param name="answeringBodies">Written questions / statements relating to the answering bodies with the IDs specified</param>
		/// <param name="members">Written questions / statements relating to the members with the IDs specified</param>
		/// <param name="house">Written questions / statements relating to the House specified</param>
		/// <param name="skip">Number of records to skip, default is 0
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="take">Number of records to take, default is 20
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<QuestionsViewModelSearchResult> WrittenQuestionsGetByAskingMemberIdAndAnsweringMemberIdAndTabledWhenFromAndTabledWhenToAndAnsweredAndAnsweredWhenFromAndAnsweredWhenToAndQuestionStatusAndIncludeWithdrawnAndExpandMemberAndCorrectedWhenFromAndCorrectedWhenToAndSearchTermAndUINAndAnsweringBodiesAndMembersAndHouseAndSkipAndTakeAsync(
					int askingMemberId, 
					int answeringMemberId, 
					System.DateTimeOffset tabledWhenFrom, 
					System.DateTimeOffset tabledWhenTo, 
					Answered answered, 
					System.DateTimeOffset answeredWhenFrom, 
					System.DateTimeOffset answeredWhenTo, 
					QuestionStatusEnum questionStatus, 
					bool includeWithdrawn, 
					bool expandMember, 
					System.DateTimeOffset correctedWhenFrom, 
					System.DateTimeOffset correctedWhenTo, 
					string searchTerm, 
					string uIN, 
					int[] answeringBodies, 
					int[] members, 
					DailyReportViewModelHouse house, 
					int skip, 
					int take, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/writtenquestions/questions?askingMemberId="+askingMemberId+"&answeringMemberId="+answeringMemberId+"&tabledWhenFrom=" + tabledWhenFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&tabledWhenTo=" + tabledWhenTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&answered=" + answered+"&answeredWhenFrom=" + answeredWhenFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&answeredWhenTo=" + answeredWhenTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&questionStatus=" + questionStatus+"&includeWithdrawn="+includeWithdrawn+"&expandMember="+expandMember+"&correctedWhenFrom=" + correctedWhenFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&correctedWhenTo=" + correctedWhenTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&searchTerm=" + (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&uIN=" + (uIN==null? "" : System.Uri.EscapeDataString(uIN))+"&"+string.Join("&", answeringBodies.Select(z => $"answeringBodies={z}"))+"&"+string.Join("&", members.Select(z => $"members={z}"))+"&house=" + house+"&skip="+skip+"&take="+take;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<QuestionsViewModelSearchResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a written question
		/// WrittenQuestionsGetByDateAndUinAndExpandMember api/writtenquestions/questions/{date}/{uin}
		/// </summary>
		/// <param name="date">Written question on date specified</param>
		/// <param name="uin">Written question with uid specified</param>
		/// <param name="expandMember">Expand the details of Members in the results</param>
		/// <returns>Success</returns>
		public async Task<QuestionsViewModelItem> WrittenQuestionsGetByDateAndUinAndExpandMemberAsync(System.DateTimeOffset date, string uin, bool expandMember, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/writtenquestions/questions/"+date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"/"+ (uin==null? "" : System.Uri.EscapeDataString(uin))+"&expandMember="+expandMember;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<QuestionsViewModelItem>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a written question
		/// WrittenQuestionsGetByIdAndExpandMember api/writtenquestions/questions/{id}
		/// </summary>
		/// <param name="id">written question with ID specified</param>
		/// <param name="expandMember">Expand the details of Members in the result</param>
		/// <returns>Success</returns>
		public async Task<QuestionsViewModelItem> WrittenQuestionsGetByIdAndExpandMemberAsync(int id, bool expandMember, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/writtenquestions/questions/"+id+"?expandMember="+expandMember;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<QuestionsViewModelItem>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of written statements
		/// WrittenStatementsGetByMadeWhenFromAndMadeWhenToAndSearchTermAndUINAndAnsweringBodiesAndMembersAndHouseAndSkipAndTakeAndExpandMember api/writtenstatements/statements
		/// </summary>
		/// <param name="madeWhenFrom">Written statements made on or after the date specified. Date format yyyy-mm-dd</param>
		/// <param name="madeWhenTo">Written statements made on or before the date specified. Date format yyyy-mm-dd</param>
		/// <param name="searchTerm">Written questions / statements containing the search term specified, searches item content</param>
		/// <param name="uIN">Written questions / statements with the uin specified</param>
		/// <param name="answeringBodies">Written questions / statements relating to the answering bodies with the IDs specified</param>
		/// <param name="members">Written questions / statements relating to the members with the IDs specified</param>
		/// <param name="house">Written questions / statements relating to the House specified</param>
		/// <param name="skip">Number of records to skip, default is 0
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="take">Number of records to take, default is 20
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="expandMember">Expand the details of Members in the results</param>
		/// <returns>Success</returns>
		public async Task<StatementsViewModelSearchResult> WrittenStatementsGetByMadeWhenFromAndMadeWhenToAndSearchTermAndUINAndAnsweringBodiesAndMembersAndHouseAndSkipAndTakeAndExpandMemberAsync(System.DateTimeOffset madeWhenFrom, System.DateTimeOffset madeWhenTo, string searchTerm, string uIN, int[] answeringBodies, int[] members, DailyReportViewModelHouse house, int skip, int take, bool expandMember, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/writtenstatements/statements?madeWhenFrom=" + madeWhenFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&madeWhenTo=" + madeWhenTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&searchTerm=" + (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&uIN=" + (uIN==null? "" : System.Uri.EscapeDataString(uIN))+"&"+string.Join("&", answeringBodies.Select(z => $"answeringBodies={z}"))+"&"+string.Join("&", members.Select(z => $"members={z}"))+"&house=" + house+"&skip="+skip+"&take="+take+"&expandMember="+expandMember;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StatementsViewModelSearchResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a written statemnet
		/// WrittenStatementsGetByDateAndUinAndExpandMember api/writtenstatements/statements/{date}/{uin}
		/// </summary>
		/// <param name="date">Written statement on date specified</param>
		/// <param name="uin">Written statement with uid specified</param>
		/// <param name="expandMember">Expand the details of Members in the results</param>
		/// <returns>Success</returns>
		public async Task<StatementsViewModelItem> WrittenStatementsGetByDateAndUinAndExpandMemberAsync(System.DateTimeOffset date, string uin, bool expandMember, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/writtenstatements/statements/"+date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"/"+ (uin==null? "" : System.Uri.EscapeDataString(uin))+"&expandMember="+expandMember;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StatementsViewModelItem>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a written statement
		/// WrittenStatementsGetByIdAndExpandMember api/writtenstatements/statements/{id}
		/// </summary>
		/// <param name="id">Written statement with ID specified</param>
		/// <param name="expandMember">Expand the details of Members in the results</param>
		/// <returns>Success</returns>
		public async Task<StatementsViewModelSearchResult> WrittenStatementsGetByIdAndExpandMemberAsync(int id, bool expandMember, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/writtenstatements/statements/"+id+"?expandMember="+expandMember;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StatementsViewModelSearchResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
