//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Acceptable_Import_Fields
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_Activation
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account_Collection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Allowed_From_Email_Addresses
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Buy_dedicated_number
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CSV_Import_File_Preview
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Calculate_Price
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Calculate_Price_for_SMS_Campaign
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Calculate_Pricing
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cancel_Scheduled_Messages
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cancel_Voice_Calls
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact_Collection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact_List
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact_List_Collection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact_Suggestions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Country_Collection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_SMS_Campaign
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Credit_Card_Info
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Delivery_Issues
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Delivery_Receipts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Detect_Address
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Direct_Mail_Campaign
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Email_to_SMS_Allowed_Address
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Email_to_SMS_Allowed_Address___Object
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Email_Campaigns
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Email_Delivery_Receipt_Rules
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Existing_SMS_Campaigns
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Export_Contacts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Export_Post_Letter_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Export_Postcard_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fax_Delivery_Receipt_Rules
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fax_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Forgot_Password
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Forgot_Username
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_Country_Pricing
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_Post_Letter_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_Postcard_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_SMS_Statistics
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_Voice_Statistics
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get_all_Dedicated_Numbers
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Import_Contacts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_Fax_Rules
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_MMS
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_SMS
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inbound_SMS_Rules
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MMS_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Master_Template_Categories
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Master_Templates
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Post_Code_Search
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Post_Return_Address
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Referral_Accounts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Remove_Duplicate_Contacts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Remove_Opted_Out_Contacts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reseller
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reseller_Account
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reseller_Accounts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reseller_Subdomain
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SDK_Download
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SMS_Delivery_Receipt_Rules
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SMS_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Search_Contacts_Lists
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Search_Dedicated_Numbers_by_Country
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Send_Fax
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Send_Post_Letter
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Send_Postcard
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Send_a_Voice_Call___Text_to_speech
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Send_an_MMS
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Send_an_SMS
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Stripped_Strings
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subaccount
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subaccount_Collection
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Templates
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Timezones
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transactional_Email
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transfer_Contact
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class URL_Shortening
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Upload_Image
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Upload_a_File
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User_Email_Templates
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Verify_Forgot_Password
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Voice_Delivery_Receipt_Rules
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Voice_History
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Voice_Languages
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Add_a_Test_Delivery_ReceiptBody
	{
		
		/// <summary>
		/// Your URL if using the push option or 'poll' if using the pull option.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_Email_CampaignBody
	{
		
		/// <summary>
		/// The allowed email address id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from_email_address_id")]
		public double From_email_address_id { get; set; }
		
		/// <summary>
		/// The name that will appear on the email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from_name")]
		public string From_name { get; set; }
		
		/// <summary>
		/// The list id you want to access.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public double List_id { get; set; }
		
		/// <summary>
		/// The name of the sender.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// The subject of the email campaign.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// The template id you want to use.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template_id")]
		public double Template_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_Reseller_AccountBody
	{
		
		/// <summary>
		/// Your delivery to value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// Client country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Your email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
		
		/// <summary>
		/// Your first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_first_name")]
		public string User_first_name { get; set; }
		
		/// <summary>
		/// Your last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_last_name")]
		public string User_last_name { get; set; }
		
		/// <summary>
		/// Your phone number in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_phone")]
		public string User_phone { get; set; }
		
		/// <summary>
		/// Your username.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_Post_Return_AddressBody
	{
		
		/// <summary>
		/// Your address city.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// Two-letter country code defined in ISO 3166.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		public string Address_country { get; set; }
		
		/// <summary>
		/// Your address line 1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_line_1")]
		public string Address_line_1 { get; set; }
		
		/// <summary>
		/// Your address line 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_2")]
		public string Address_line_2 { get; set; }
		
		/// <summary>
		/// Your address name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_name")]
		public string Address_name { get; set; }
		
		/// <summary>
		/// Your address postal code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_postal_code")]
		public double Address_postal_code { get; set; }
		
		/// <summary>
		/// Your address state.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_new_ruleBody
	{
		
		/// <summary>
		/// Action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Decicated Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dedicated_number")]
		public string Dedicated_number { get; set; }
		
		/// <summary>
		/// Enable
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public double Enabled { get; set; }
		
		/// <summary>
		/// Rule Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule_name")]
		public string Rule_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_a_new_ruleBody2
	{
		
		/// <summary>
		/// Action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public double Enabled { get; set; }
		
		/// <summary>
		/// Match Type. 0=All reports, 1=Only failed, 2=Only successful.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match_type")]
		public double Match_type { get; set; }
		
		/// <summary>
		/// Rule Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule_name")]
		public string Rule_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Send_FaxBody
	{
		
		/// <summary>
		/// Recipient country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your reference. Will be passed back with all replies and delivery reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_string")]
		public string Custom_string { get; set; }
		
		/// <summary>
		/// Your URL to your PDF file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
		
		/// <summary>
		/// Your sender id. Must be a valid fax number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// An email address where the reply should be emailed to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_email")]
		public string From_email { get; set; }
		
		/// <summary>
		/// Your list ID if sending to a whole list. Can be used instead of 'to'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// Your messages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public string[] Messages { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get account
		/// AccountGet account
		/// </summary>
		/// <returns>OK</returns>
		public async Task AccountGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new account
		/// **Note:** *Authentication isn't required to create a new account.*
		/// AccountPost account
		/// </summary>
		/// <returns>OK</returns>
		public async Task AccountPostAsync(AccountPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Account
		/// AccountPut account
		/// </summary>
		/// <returns>OK</returns>
		public async Task AccountPutAsync(AccountPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send account activation token
		/// Account_verifySendPut account-verify/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task Account_verifySendPutAsync(Account_verifySendPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-verify/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verify new account
		/// Account_verifyVerify_activation_tokenPut account-verify/verify/{activation_token}
		/// </summary>
		/// <param name="activation_token">The ActivationToken to be used to verify an account.</param>
		/// <returns>OK</returns>
		public async Task Account_verifyVerify_activation_tokenPutAsync(string activation_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account-verify/verify/"+ (activation_token==null? "" : System.Uri.EscapeDataString(activation_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Account Usage
		/// AccountUsage_year_month_typeGet account/usage/{year}/{month}/{type}
		/// </summary>
		/// <param name="year">Your account usage year.</param>
		/// <param name="month">Your account usage month.</param>
		/// <param name="type">The account type. Value can only be either email or subaccount.</param>
		/// <returns>OK</returns>
		public async Task AccountUsage_year_month_typeGetAsync(double year, double month, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/usage/"+year+"/"+month+"/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Rules
		/// AutomationsEmailReceiptGet automations/email/receipt
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsEmailReceiptGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/email/receipt";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a New Rule
		/// AutomationsEmailReceiptPost automations/email/receipt
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsEmailReceiptPostAsync(AutomationsEmailReceiptPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/email/receipt";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Rule
		/// AutomationsEmailReceipt_rule_idDelete automations/email/receipt/{rule_id}
		/// </summary>
		/// <param name="rule_id">The email receipt rule id you want to delete.</param>
		/// <returns>OK</returns>
		public async Task AutomationsEmailReceipt_rule_idDeleteAsync(double rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/email/receipt/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a Specific Rule
		/// AutomationsEmailReceipt_rule_idGet automations/email/receipt/{rule_id}
		/// </summary>
		/// <param name="rule_id">The rule id you want to access.</param>
		/// <returns>OK</returns>
		public async Task AutomationsEmailReceipt_rule_idGetAsync(double rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/email/receipt/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Rule
		/// AutomationsEmailReceipt_rule_idPut automations/email/receipt/{rule_id}
		/// </summary>
		/// <param name="rule_id">The email receipt rule id you want to access.</param>
		/// <returns>OK</returns>
		public async Task AutomationsEmailReceipt_rule_idPutAsync(double rule_id, AutomationsEmailReceipt_rule_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/email/receipt/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List rules
		/// AutomationsFaxInboundGet automations/fax/inbound
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsFaxInboundGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/inbound";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new rule
		/// AutomationsFaxInboundPost automations/fax/inbound
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsFaxInboundPostAsync(Create_a_new_ruleBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/inbound";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a rule
		/// AutomationsFaxInbound_inbound_rule_idDelete automations/fax/inbound/{inbound_rule_id}
		/// </summary>
		/// <param name="inbound_rule_id">Fax inbound rule id</param>
		/// <returns>OK</returns>
		public async Task AutomationsFaxInbound_inbound_rule_idDeleteAsync(double inbound_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/inbound/"+inbound_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific rule
		/// AutomationsFaxInbound_inbound_rule_idGet automations/fax/inbound/{inbound_rule_id}
		/// </summary>
		/// <param name="inbound_rule_id">Fax inbound rule id</param>
		/// <returns>OK</returns>
		public async Task AutomationsFaxInbound_inbound_rule_idGetAsync(double inbound_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/inbound/"+inbound_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a rule
		/// AutomationsFaxInbound_inbound_rule_idPut automations/fax/inbound/{inbound_rule_id}
		/// </summary>
		/// <param name="inbound_rule_id">Fax inbound rule id</param>
		/// <returns>OK</returns>
		public async Task AutomationsFaxInbound_inbound_rule_idPutAsync(double inbound_rule_id, Create_a_new_ruleBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/inbound/"+inbound_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Rules
		/// AutomationsFaxReceiptsGet automations/fax/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsFaxReceiptsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a New Rule
		/// AutomationsFaxReceiptsPost automations/fax/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsFaxReceiptsPostAsync(AutomationsFaxReceiptsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Rule
		/// AutomationsFaxReceipts_rule_idDelete automations/fax/receipts/{rule_id}
		/// </summary>
		/// <param name="rule_id">The email receipt rule id you want to delete.</param>
		/// <returns>OK</returns>
		public async Task AutomationsFaxReceipts_rule_idDeleteAsync(double rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/receipts/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a Specific Rule
		/// AutomationsFaxReceipts_rule_idGet automations/fax/receipts/{rule_id}
		/// </summary>
		/// <param name="rule_id">The rule id you want to access.</param>
		/// <returns>OK</returns>
		public async Task AutomationsFaxReceipts_rule_idGetAsync(double rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/receipts/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Rule
		/// AutomationsFaxReceipts_rule_idPut automations/fax/receipts/{rule_id}
		/// </summary>
		/// <param name="rule_id">The email receipt rule id you want to access.</param>
		/// <returns>OK</returns>
		public async Task AutomationsFaxReceipts_rule_idPutAsync(double rule_id, AutomationsFaxReceipts_rule_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/fax/receipts/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List rules
		/// AutomationsSmsInboundGet automations/sms/inbound
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsSmsInboundGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/inbound";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new rule
		/// AutomationsSmsInboundPost automations/sms/inbound/
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsSmsInboundPostAsync(AutomationsSmsInboundPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/inbound/";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a rule
		/// AutomationsSmsInbound_inbound_rule_idDelete automations/sms/inbound/{inbound_rule_id}
		/// </summary>
		/// <param name="inbound_rule_id">Inbound Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsSmsInbound_inbound_rule_idDeleteAsync(double inbound_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/inbound/"+inbound_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific rule
		/// AutomationsSmsInbound_inbound_rule_idGet automations/sms/inbound/{inbound_rule_id}
		/// </summary>
		/// <param name="inbound_rule_id">Inbound Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsSmsInbound_inbound_rule_idGetAsync(double inbound_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/inbound/"+inbound_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a rule
		/// AutomationsSmsInbound_inbound_rule_idPut automations/sms/inbound/{inbound_rule_id}
		/// </summary>
		/// <param name="inbound_rule_id">Inbound Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsSmsInbound_inbound_rule_idPutAsync(double inbound_rule_id, AutomationsSmsInbound_inbound_rule_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/inbound/"+inbound_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List rules
		/// AutomationsSmsReceiptsGet automations/sms/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsSmsReceiptsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new rule
		/// AutomationsSmsReceiptsPost automations/sms/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsSmsReceiptsPostAsync(Create_a_new_ruleBody2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a rule
		/// AutomationsSmsReceipts_receipt_rule_idDelete automations/sms/receipts/{receipt_rule_id}
		/// </summary>
		/// <param name="receipt_rule_id">Receipt Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsSmsReceipts_receipt_rule_idDeleteAsync(double receipt_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/receipts/"+receipt_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific rule
		/// AutomationsSmsReceipts_receipt_rule_idGet automations/sms/receipts/{receipt_rule_id}
		/// </summary>
		/// <param name="receipt_rule_id">Receipt Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsSmsReceipts_receipt_rule_idGetAsync(double receipt_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/receipts/"+receipt_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a rule
		/// AutomationsSmsReceipts_receipt_rule_idPut automations/sms/receipts/{receipt_rule_id}
		/// </summary>
		/// <param name="receipt_rule_id">Receipt Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsSmsReceipts_receipt_rule_idPutAsync(double receipt_rule_id, Create_a_new_ruleBody2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/sms/receipts/"+receipt_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List rules
		/// AutomationsVoiceReceiptsGet automations/voice/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsVoiceReceiptsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/voice/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new rule
		/// AutomationsVoiceReceiptsPost automations/voice/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task AutomationsVoiceReceiptsPostAsync(Create_a_new_ruleBody2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/voice/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a rule
		/// AutomationsVoiceReceipts_receipt_rule_idDelete automations/voice/receipts/{receipt_rule_id}
		/// </summary>
		/// <param name="receipt_rule_id">Receipt Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsVoiceReceipts_receipt_rule_idDeleteAsync(double receipt_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/voice/receipts/"+receipt_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific rule
		/// AutomationsVoiceReceipts_receipt_rule_idGet automations/voice/receipts/{receipt_rule_id}
		/// </summary>
		/// <param name="receipt_rule_id">Receipt Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsVoiceReceipts_receipt_rule_idGetAsync(double receipt_rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/voice/receipts/"+receipt_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a rule
		/// AutomationsVoiceReceipts_receipt_rule_idPut automations/voice/receipts/{receipt_rule_id}
		/// </summary>
		/// <param name="receipt_rule_id">Receipt Rule ID.</param>
		/// <returns>OK</returns>
		public async Task AutomationsVoiceReceipts_receipt_rule_idPutAsync(double receipt_rule_id, Create_a_new_ruleBody2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "automations/voice/receipts/"+receipt_rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Contact Suggestions
		/// Contact_suggestionsGet contact-suggestions
		/// </summary>
		/// <returns>OK</returns>
		public async Task Contact_suggestionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contact-suggestions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Countries
		/// CountriesGet countries
		/// </summary>
		/// <returns>OK</returns>
		public async Task CountriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "countries";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Delivery Issues
		/// Delivery_issuesGet delivery-issues
		/// </summary>
		/// <returns>OK</returns>
		public async Task Delivery_issuesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "delivery-issues";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Delivery Issue
		/// Delivery_issuesPost delivery-issues
		/// </summary>
		/// <returns>OK</returns>
		public async Task Delivery_issuesPostAsync(Delivery_issuesPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "delivery-issues";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get All Email Campaigns
		/// Email_campaignsGet email-campaigns
		/// </summary>
		/// <returns>OK</returns>
		public async Task Email_campaignsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-campaigns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Price
		/// Email_campaignsPricePost email-campaigns/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task Email_campaignsPricePostAsync(Create_Email_CampaignBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-campaigns/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Email Campaign
		/// Email_campaignsSendPost email-campaigns/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task Email_campaignsSendPostAsync(Create_Email_CampaignBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-campaigns/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Email Campaign History
		/// Email_campaigns_campaign_idHistoryGet email-campaigns/{campaign_id}/history
		/// </summary>
		/// <param name="campaign_id">The email campaign id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Email_campaigns_campaign_idHistoryGetAsync(double campaign_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-campaigns/"+campaign_id+"/history";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Email Campaign
		/// Email_campaigns_email_campaign_idGet email-campaigns/{email_campaign_id}
		/// </summary>
		/// <param name="email_campaign_id">The email campaign id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Email_campaigns_email_campaign_idGetAsync(double email_campaign_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-campaigns/"+email_campaign_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Email Campaign
		/// Email_campaigns_email_campaign_idPut email-campaigns/{email_campaign_id}
		/// </summary>
		/// <param name="email_campaign_id">The email campaign id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Email_campaigns_email_campaign_idPutAsync(double email_campaign_id, Email_campaigns_email_campaign_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-campaigns/"+email_campaign_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel Email Campaign
		/// Email_campaigns_email_campaign_idCancelPut email-campaigns/{email_campaign_id}/cancel
		/// </summary>
		/// <param name="email_campaign_id">The email campaign id you want to cancel.</param>
		/// <returns>OK</returns>
		public async Task Email_campaigns_email_campaign_idCancelPutAsync(double email_campaign_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email-campaigns/"+email_campaign_id+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send Verification Token
		/// EmailAddress_verify_email_address_idSendPut email/address-verify/{email_address_id}/send
		/// </summary>
		/// <param name="email_address_id">The email addess id you want to access.</param>
		/// <returns>OK</returns>
		public async Task EmailAddress_verify_email_address_idSendPutAsync(double email_address_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/address-verify/"+email_address_id+"/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verify Allowed Email Address
		/// EmailAddress_verify_email_address_idVerify_activation_tokenPut email/address-verify/{email_address_id}/verify/{activation_token}
		/// </summary>
		/// <param name="email_address_id">The email address id you want to access.</param>
		/// <param name="activation_token">6E8B-4FDB-99A7-7ED08DF97BCC (required, string) - Your activation token.</param>
		/// <returns>OK</returns>
		public async Task EmailAddress_verify_email_address_idVerify_activation_tokenPutAsync(double email_address_id, string activation_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/address-verify/"+email_address_id+"/verify/"+ (activation_token==null? "" : System.Uri.EscapeDataString(activation_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get All Allowed Email Addresses
		/// EmailAddressesGet email/addresses
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailAddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/addresses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Allowed Email Address
		/// EmailAddressesPost email/addresses
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailAddressesPostAsync(EmailAddressesPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/addresses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Allowed Email Address
		/// EmailAddresses_email_address_idDelete email/addresses/{email_address_id}
		/// </summary>
		/// <param name="email_address_id">The email address you want to access.</param>
		/// <returns>OK</returns>
		public async Task EmailAddresses_email_address_idDeleteAsync(double email_address_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/addresses/"+email_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Allowed Email Address
		/// EmailAddresses_email_address_idGet email/addresses/{email_address_id}
		/// </summary>
		/// <param name="email_address_id">The email address you want to access.</param>
		/// <returns>OK</returns>
		public async Task EmailAddresses_email_address_idGetAsync(double email_address_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/addresses/"+email_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Email History
		/// EmailHistoryGet email/history
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailHistoryGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/history";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export History
		/// EmailHistoryExportGet email/history/export?filename={filename}
		/// </summary>
		/// <param name="filename">Your export filename.</param>
		/// <returns>OK</returns>
		public async Task EmailHistoryExportGetAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/history/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get All Master Email Templates
		/// EmailMaster_templatesGet email/master-templates
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailMaster_templatesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/master-templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get All Master Template Categories
		/// EmailMaster_templates_categoriesGet email/master-templates-categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailMaster_templates_categoriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/master-templates-categories";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Email Template Category
		/// EmailMaster_templates_categories_category_idGet email/master-templates-categories/{category_id}
		/// </summary>
		/// <param name="category_id">Your category id.</param>
		/// <returns>OK</returns>
		public async Task EmailMaster_templates_categories_category_idGetAsync(string category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/master-templates-categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get All Templates For Category
		/// EmailMaster_templates_categories_category_idMaster_templatesGet email/master-templates-categories/{category_id}/master-templates
		/// </summary>
		/// <param name="category_id">Your category id.</param>
		/// <returns>OK</returns>
		public async Task EmailMaster_templates_categories_category_idMaster_templatesGetAsync(string category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/master-templates-categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id))+"/master-templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Master Template
		/// EmailMaster_templates_template_idGet email/master-templates/{template_id}
		/// </summary>
		/// <param name="template_id">Your template id.</param>
		/// <returns>OK</returns>
		public async Task EmailMaster_templates_template_idGetAsync(string template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/master-templates/"+ (template_id==null? "" : System.Uri.EscapeDataString(template_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Email Price
		/// EmailPricePost email/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailPricePostAsync(EmailPricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a Test Delivery Receipt
		/// EmailReceiptsPost email/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailReceiptsPostAsync(Add_a_Test_Delivery_ReceiptBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Email Send
		/// EmailSendPost email/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailSendPostAsync(EmailSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get All Email Templates
		/// EmailTemplatesGet email/templates
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailTemplatesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create New Email Template from Master Template
		/// EmailTemplatesPost email/templates
		/// </summary>
		/// <returns>OK</returns>
		public async Task EmailTemplatesPostAsync(EmailTemplatesPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload Image to Specific Template
		/// EmailTemplates_images_template_idPost email/templates-images/{template_id}
		/// </summary>
		/// <param name="template_id">Your template id.</param>
		/// <returns>OK</returns>
		public async Task EmailTemplates_images_template_idPostAsync(string template_id, EmailTemplates_images_template_idPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/templates-images/"+ (template_id==null? "" : System.Uri.EscapeDataString(template_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Email Template
		/// EmailTemplates_template_idDelete email/templates/{template_id}
		/// </summary>
		/// <param name="template_id">Your template id.</param>
		/// <returns>OK</returns>
		public async Task EmailTemplates_template_idDeleteAsync(double template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/templates/"+template_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Email Template
		/// EmailTemplates_template_idGet email/templates/{template_id}
		/// </summary>
		/// <param name="template_id">The email template id.</param>
		/// <returns>OK</returns>
		public async Task EmailTemplates_template_idGetAsync(double template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/templates/"+template_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an Email Template
		/// EmailTemplates_template_idPut email/templates/{template_id}
		/// </summary>
		/// <param name="template_id">The id of the template to be updated.</param>
		/// <returns>OK</returns>
		public async Task EmailTemplates_template_idPutAsync(double template_id, EmailTemplates_template_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "email/templates/"+template_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export Fax History
		/// FaxHistoryExportGet fax/history/export?filename={filename}
		/// </summary>
		/// <param name="filename">Your export filename.</param>
		/// <returns>OK</returns>
		public async Task FaxHistoryExportGetAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/history/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Fax History
		/// Get a list of Fax History.
		/// FaxHistoryGet fax/history?date_from={date_from}&date_to={date_to}&q={q}&order_by={order_by}
		/// </summary>
		/// <param name="date_from">Customize result by setting from date (timestsamp)</param>
		/// <param name="date_to">Customize result by setting to date (timestamp)</param>
		/// <param name="q">Custom query</param>
		/// <param name="order_by">Order result by</param>
		/// <returns>OK</returns>
		public async Task FaxHistoryGetAsync(double date_from, double date_to, string q, string order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/history?date_from="+date_from+"&date_to="+date_to+"&q="+ (q==null? "" : System.Uri.EscapeDataString(q))+"&order_by="+ (order_by==null? "" : System.Uri.EscapeDataString(order_by));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Price
		/// FaxPricePost fax/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task FaxPricePostAsync(Send_FaxBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List of Fax Delivery Receipts
		/// FaxReceiptsGet fax/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task FaxReceiptsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a Test Delivery Receipt
		/// FaxReceiptsPost fax/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task FaxReceiptsPostAsync(Add_a_Test_Delivery_ReceiptBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Mark Fax Delivery Receipts as read
		/// FaxReceipts_readPut fax/receipts-read
		/// </summary>
		/// <returns>OK</returns>
		public async Task FaxReceipts_readPutAsync(FaxReceipts_readPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/receipts-read";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a Specific Fax Delivery Receipt
		/// FaxReceipts_message_idGet fax/receipts/{message_id}
		/// </summary>
		/// <param name="message_id">D2AF-479B-8955-6395D561DEF4" (required, number) - Message ID.</param>
		/// <returns>OK</returns>
		public async Task FaxReceipts_message_idGetAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/receipts/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send Fax
		/// **Letter File Options**
		/// 
		/// **Use existing URL**
		/// 
		/// With this option, you can use an existing URL to a PDF document. For example, you might generate the pdf on your server.
		/// 
		/// **Upload File to Our Server**
		/// 
		/// With this option, you can use the `/uploads` endpoint to upload the document. The `/uploads` endpoint returns a URL that can be used in the `/fax/send` endpoint.
		/// FaxSendPost fax/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task FaxSendPostAsync(Send_FaxBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fax/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Forgot Password
		/// Forgot_passwordPut forgot-password
		/// </summary>
		/// <returns>OK</returns>
		public async Task Forgot_passwordPutAsync(Forgot_passwordPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forgot-password";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verify Forgot Password
		/// Forgot_passwordVerifyPut forgot-password/verify
		/// </summary>
		/// <returns>OK</returns>
		public async Task Forgot_passwordVerifyPutAsync(Forgot_passwordVerifyPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forgot-password/verify";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Forgot Username
		/// Forgot_usernamePut forgot-username
		/// </summary>
		/// <returns>OK</returns>
		public async Task Forgot_usernamePutAsync(Forgot_usernamePutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forgot-username";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Contact Lists
		/// ListsGet lists
		/// </summary>
		/// <returns>OK</returns>
		public async Task ListsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new contact list
		/// ListsPost lists
		/// </summary>
		/// <returns>OK</returns>
		public async Task ListsPostAsync(ListsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Transfer a Contact
		/// Transfers a specific contact to another list.
		/// Lists_from_list_idContacts_contact_id_to_list_idPut lists/{from_list_id}/contacts/{contact_id}/{to_list_id}
		/// </summary>
		/// <param name="from_list_id">From list id.</param>
		/// <param name="contact_id">Contact ID.</param>
		/// <param name="to_list_id">To list id.</param>
		/// <returns>OK</returns>
		public async Task Lists_from_list_idContacts_contact_id_to_list_idPutAsync(double from_list_id, double contact_id, double to_list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+from_list_id+"/contacts/"+contact_id+"/"+to_list_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a specific contact list
		/// Lists_list_idDelete lists/{list_id}
		/// </summary>
		/// <param name="list_id">Your contact list id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idDeleteAsync(double list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific contact list
		/// Lists_list_idGet lists/{list_id}
		/// </summary>
		/// <param name="list_id">Your contact list id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idGetAsync(double list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a specific contact list
		/// Lists_list_idPut lists/{list_id}
		/// </summary>
		/// <param name="list_id">Your contact list id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idPutAsync(double list_id, Lists_list_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Contacts in a List
		/// Lists_list_idContactsGet lists/{list_id}/contacts
		/// </summary>
		/// <param name="list_id">Your contact list id where your contacts belong.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idContactsGetAsync(double list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/contacts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new contact
		/// Note that the fields `phone_number`, `fax_number` and email` are all optional; however at least one of them must be specified, otherwise the API call will fail.
		/// Lists_list_idContactsPost lists/{list_id}/contacts
		/// </summary>
		/// <param name="list_id">Your contact list id where your contact be associated.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idContactsPostAsync(double list_id, Lists_list_idContactsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/contacts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a specific contact
		/// Lists_list_idContacts_contact_idDelete lists/{list_id}/contacts/{contact_id}
		/// </summary>
		/// <param name="list_id">Your contact list id you want to access.</param>
		/// <param name="contact_id">Your contact id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idContacts_contact_idDeleteAsync(double list_id, double contact_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/contacts/"+contact_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific contact
		/// Lists_list_idContacts_contact_idGet lists/{list_id}/contacts/{contact_id}
		/// </summary>
		/// <param name="list_id">Your contact list id you want to access.</param>
		/// <param name="contact_id">Your contact id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idContacts_contact_idGetAsync(double list_id, double contact_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/contacts/"+contact_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a specific contact
		/// Lists_list_idContacts_contact_idPut lists/{list_id}/contacts/{contact_id}
		/// </summary>
		/// <param name="list_id">Contact list id you want to access.</param>
		/// <param name="contact_id">Contact id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idContacts_contact_idPutAsync(double list_id, double contact_id, Lists_list_idContacts_contact_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/contacts/"+contact_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export Contacts List
		/// Lists_list_idExportGet lists/{list_id}/export?filename={filename}
		/// </summary>
		/// <param name="filename">Your export filename.</param>
		/// <param name="list_id">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idExportGetAsync(string filename, string list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+ (list_id==null? "" : System.Uri.EscapeDataString(list_id))+"/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Import Contacts to List
		/// Lists_list_idImportPost lists/{list_id}/import
		/// </summary>
		/// <param name="list_id">Your contact list id you want to access.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idImportPostAsync(double list_id, Lists_list_idImportPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/import";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Show CSV Import File Preview
		/// Show first row of the csv import file.
		/// Lists_list_idImport_csv_previewPost lists/{list_id}/import-csv-preview
		/// </summary>
		/// <param name="list_id">Your contact list id.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idImport_csv_previewPostAsync(double list_id, Lists_list_idImport_csv_previewPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/import-csv-preview";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get List of Acceptable Import Fields
		/// Lists_list_idImport_fieldsGet lists/{list_id}/import-fields
		/// </summary>
		/// <param name="list_id">Automatically added</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idImport_fieldsGetAsync(string list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+ (list_id==null? "" : System.Uri.EscapeDataString(list_id))+"/import-fields";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove Duplicate Contacts
		/// Lists_list_idRemove_duplicatesPut lists/{list_id}/remove-duplicates
		/// </summary>
		/// <param name="list_id">Your contact list id.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idRemove_duplicatesPutAsync(double list_id, Lists_list_idRemove_duplicatesPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/remove-duplicates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Remove Opted Out Contacts
		/// Lists_list_idRemove_opted_out_contacts_opt_out_list_idPut lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}
		/// </summary>
		/// <param name="list_id">Your contact list id.</param>
		/// <param name="opt_out_list_id">Your opt out list id.</param>
		/// <returns>OK</returns>
		public async Task Lists_list_idRemove_opted_out_contacts_opt_out_list_idPutAsync(double list_id, double opt_out_list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/"+list_id+"/remove-opted-out-contacts/"+opt_out_list_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel All MMS
		/// MmsCancel_allPut mms/cancel-all
		/// </summary>
		/// <returns>OK</returns>
		public async Task MmsCancel_allPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/cancel-all";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export MMS History
		/// MmsHistoryExportGet mms/history/export?filename={filename}
		/// </summary>
		/// <param name="filename">Your export filename.</param>
		/// <returns>OK</returns>
		public async Task MmsHistoryExportGetAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/history/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get MMS History
		/// MmsHistoryGet mms/history?q={q}&order_by={order_by}&date_from={date_from}&date_to={date_to}
		/// </summary>
		/// <param name="q">A custom query.</param>
		/// <param name="order_by">Sort records by.</param>
		/// <param name="date_from">[Unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp) (from) used to show records by date.</param>
		/// <param name="date_to">[Unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp) (to) used to show records by date.</param>
		/// <returns>OK</returns>
		public async Task MmsHistoryGetAsync(string q, string order_by, string date_from, string date_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/history?q="+ (q==null? "" : System.Uri.EscapeDataString(q))+"&order_by="+ (order_by==null? "" : System.Uri.EscapeDataString(order_by))+"&date_from="+ (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to="+ (date_to==null? "" : System.Uri.EscapeDataString(date_to));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Price
		/// MmsPricePost mms/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task MmsPricePostAsync(MmsPricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Delivery Receipts
		/// MmsReceiptsGet mms/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task MmsReceiptsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Mark Receipts As Read
		/// MmsReceipts_readPut mms/receipts-read
		/// </summary>
		/// <returns>OK</returns>
		public async Task MmsReceipts_readPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/receipts-read";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Delivery Receipt
		/// MmsReceipts_message_idGet mms/receipts/{message_id}
		/// </summary>
		/// <param name="message_id">Message ID.</param>
		/// <returns>OK</returns>
		public async Task MmsReceipts_message_idGetAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/receipts/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send MMS
		/// MmsSendPost mms/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task MmsSendPostAsync(MmsSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel MMS
		/// Mms_message_idCancelPut mms/{message_id}/cancel
		/// </summary>
		/// <param name="message_id">Message ID.</param>
		/// <returns>OK</returns>
		public async Task Mms_message_idCancelPutAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mms/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Dedicated Numbers
		/// NumbersGet numbers
		/// </summary>
		/// <returns>OK</returns>
		public async Task NumbersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Buy dedicated number
		/// NumbersBuy_dedicated_numberPost numbers/buy/{dedicated_number}
		/// </summary>
		/// <param name="dedicated_number">Your phone number in E.164 format.</param>
		/// <returns>OK</returns>
		public async Task NumbersBuy_dedicated_numberPostAsync(string dedicated_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/buy/"+ (dedicated_number==null? "" : System.Uri.EscapeDataString(dedicated_number));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search Dedicated Numbers by Country
		/// NumbersSearch_countryGet numbers/search/{country}?{search}=1&{search_type}=2
		/// </summary>
		/// <param name="country">Your preferred country.</param>
		/// <param name="search">Your search pattern or query.</param>
		/// <param name="search_type">Your strategy for searching, 0 = starts with, 1 = anywhere, 2 = ends with.</param>
		/// <returns>OK</returns>
		public async Task NumbersSearch_countryGetAsync(string country, string search, double search_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/search/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"?"+ (search==null? "" : System.Uri.EscapeDataString(search))+"=1&"+search_type+"=2";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Direct Mail Campaigns
		/// Get list of direct mail campaigns.
		/// PostDirect_mailCampaignsGet post/direct-mail/campaigns
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostDirect_mailCampaignsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/direct-mail/campaigns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Direct Mail Campaign Price
		/// Calculate direct mail campaign price.
		/// PostDirect_mailCampaignsPricePost post/direct-mail/campaigns/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostDirect_mailCampaignsPricePostAsync(PostDirect_mailCampaignsPricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/direct-mail/campaigns/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create New Campaign
		/// Create new direct mail campaign.
		/// PostDirect_mailCampaignsSendPost post/direct-mail/campaigns/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostDirect_mailCampaignsSendPostAsync(PostDirect_mailCampaignsSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/direct-mail/campaigns/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search Locations
		/// PostDirect_mailLocationsSearch_countryGet post/direct-mail/locations/search/{country}/?q={query}
		/// </summary>
		/// <param name="country">Country code.</param>
		/// <param name="query">A postal code or place name.</param>
		/// <returns>OK</returns>
		public async Task PostDirect_mailLocationsSearch_countryGetAsync(string country, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/direct-mail/locations/search/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"/?q="+ (query==null? "" : System.Uri.EscapeDataString(query));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Detect Address
		/// The `detect-address` endpoint accepts either a letter in PDF format or an address string and attempts to convert it to a standard address format. Note that the PDF should be in standard address format, having the recipient's name and address listed at the top.
		/// 
		/// The endpoint accepts two types of data:
		/// 1. A PDF file in `base64` encoding. In this case, submit the `base64`-encoded PDF file contents in the `content` field of the request body.
		/// 2. An address string. In this case, submit the address in a string using the `address` field of the request body.
		/// PostLettersDetect_addressPost post/letters/detect-address
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostLettersDetect_addressPostAsync(PostLettersDetect_addressPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/letters/detect-address";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Post Letter History
		/// PostLettersHistoryGet post/letters/history
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostLettersHistoryGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/letters/history";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export Post Letter History
		/// PostLettersHistoryExportGet post/letters/history/export?filename={filename}
		/// </summary>
		/// <param name="filename">Your export filename.</param>
		/// <returns>OK</returns>
		public async Task PostLettersHistoryExportGetAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/letters/history/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Price
		/// PostLettersPricePost post/letters/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostLettersPricePostAsync(PostLettersPricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/letters/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send Post Letter
		/// **Supported File Types**
		/// We support `pdf`, `docx` and `doc` files. Contact us to add support for any other file type. If you're using `docx` or `doc` files, you'll need to convert the file first using our uploads endpoint with the querystring parameter `convert=post` e.g. `POST /uploads?convert=post`. This will return a URL to the converted pdf file that can be used in the `/post/letters/send` endpoint.
		/// 
		/// **Letter File Options**
		/// 
		/// **Use existing URL**
		/// 
		/// With this option, you can use an existing URL to a `pdf` document. For example, you might generate the `pdf` on your server.
		/// 
		/// **Upload File to Our Server**
		/// 
		/// With this option, you can use the `/uploads` endpoint to upload the document. The `/uploads` endpoint returns a URL that can be used in the `/post/letters/send` endpoint.
		/// PostLettersSendPost post/letters/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostLettersSendPostAsync(PostLettersSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/letters/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export Postcard History
		/// PostPostcardsExportGet post/postcards/export?filename={filename}
		/// </summary>
		/// <param name="filename">Filename for the export file.</param>
		/// <returns>OK</returns>
		public async Task PostPostcardsExportGetAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/postcards/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Postcard History
		/// PostPostcardsHistoryGet post/postcards/history
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostPostcardsHistoryGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/postcards/history";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Pricing
		/// For `file_urls` field. You can attach at least 1 and max of 2 PDF file urls.
		/// 
		/// - Supply a single pdf with 2 pages (front and back)
		/// 
		/// - Supply 2 urls to seperate PDFs
		/// PostPostcardsPricePost post/postcards/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostPostcardsPricePostAsync(PostPostcardsPricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/postcards/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send Postcard
		/// **Supported File Types**
		/// We support PDF, docx and doc. Contact us to add support for any other file type. If you're using docx or doc files, you'll need to convert the file first using our uploads endpoint with the querystring parameter ?convert=post. e.g. POST /uploads?convert=post. This will return a URL to the converted pdf file that can be used in the /post/postcards/send endpoint.
		/// 
		/// **Postcard File Options**
		/// 
		/// **Use existing URL**
		/// 
		/// With this option, you can use an existing URL to a PDF document. For example, you might generate the pdf on your server.
		/// 
		/// For `file_urls` field. You can attach at least 1 and max of 2 PDF file urls.
		/// 
		/// - Supply a single pdf with 2 pages (front and back)
		/// 
		/// - Supply 2 urls to seperate PDFs
		/// 
		/// **Upload File to Our Server**
		/// 
		/// With this option, you can use the `/uploads` endpoint to upload the document. The `/uploads` endpoint returns a URL that can be used in the `/post/postcards/send` endpoint.
		/// PostPostcardsSendPost post/postcards/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostPostcardsSendPostAsync(PostPostcardsSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/postcards/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get List of Post Return Addresses
		/// PostReturn_addressesGet post/return-addresses
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostReturn_addressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/return-addresses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Post Return Address
		/// PostReturn_addressesPost post/return-addresses
		/// </summary>
		/// <returns>OK</returns>
		public async Task PostReturn_addressesPostAsync(Create_a_Post_Return_AddressBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/return-addresses";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Post Return Address
		/// PostReturn_addresses_return_address_idDelete post/return-addresses/{return_address_id}
		/// </summary>
		/// <param name="return_address_id">Your return address id.</param>
		/// <returns>OK</returns>
		public async Task PostReturn_addresses_return_address_idDeleteAsync(double return_address_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/return-addresses/"+return_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Post Return Address
		/// PostReturn_addresses_return_address_idGet post/return-addresses/{return_address_id}
		/// </summary>
		/// <param name="return_address_id">Your return address id.</param>
		/// <returns>OK</returns>
		public async Task PostReturn_addresses_return_address_idGetAsync(double return_address_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/return-addresses/"+return_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Post Return Address
		/// PostReturn_addresses_return_address_idPut post/return-addresses/{return_address_id}
		/// </summary>
		/// <param name="return_address_id">Your return address id.</param>
		/// <returns>OK</returns>
		public async Task PostReturn_addresses_return_address_idPutAsync(double return_address_id, Create_a_Post_Return_AddressBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "post/return-addresses/"+return_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Country Pricing
		/// Pricing_countryGet pricing/{country}?currency={currency}
		/// </summary>
		/// <param name="country">Two-letter representation of the country.</param>
		/// <param name="currency">Three-letter representation of the currency.</param>
		/// <returns>OK</returns>
		public async Task Pricing_countryGetAsync(string country, string currency, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pricing/"+ (country==null? "" : System.Uri.EscapeDataString(country))+"?currency="+ (currency==null? "" : System.Uri.EscapeDataString(currency));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Credit Card info
		/// RechargeCredit_cardGet recharge/credit-card
		/// </summary>
		/// <returns>OK</returns>
		public async Task RechargeCredit_cardGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recharge/credit-card";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Credit Card info
		/// RechargeCredit_cardPut recharge/credit-card
		/// </summary>
		/// <returns>OK</returns>
		public async Task RechargeCredit_cardPutAsync(RechargeCredit_cardPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recharge/credit-card";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List of Packages
		/// RechargePackagesGet recharge/packages?country={country}
		/// </summary>
		/// <param name="country">Your country.</param>
		/// <returns>OK</returns>
		public async Task RechargePackagesGetAsync(string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recharge/packages?country="+ (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Purchase a Package
		/// RechargePurchase_package_idPut recharge/purchase/{package_id}
		/// </summary>
		/// <param name="package_id">Your package id.</param>
		/// <returns>OK</returns>
		public async Task RechargePurchase_package_idPutAsync(double package_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recharge/purchase/"+package_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Transactions
		/// RechargeTransactionsGet recharge/transactions
		/// </summary>
		/// <returns>OK</returns>
		public async Task RechargeTransactionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recharge/transactions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific transaction
		/// RechargeTransactions_transaction_idGet recharge/transactions/{transaction_id}
		/// </summary>
		/// <param name="transaction_id">1c65-47fa-aea2-3ded9ed57557 (number, required) - Your transction id.</param>
		/// <returns>OK</returns>
		public async Task RechargeTransactions_transaction_idGetAsync(string transaction_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recharge/transactions/"+ (transaction_id==null? "" : System.Uri.EscapeDataString(transaction_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get List of Referral Accounts
		/// ReferralAccountsGet referral/accounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task ReferralAccountsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referral/accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Reseller Setting
		/// Get reseller setting.
		/// ResellerGet reseller
		/// </summary>
		/// <returns>OK</returns>
		public async Task ResellerGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Reseller Setting
		/// Update a specific reseller setting.
		/// ResellerPut reseller
		/// </summary>
		/// <returns>OK</returns>
		public async Task ResellerPutAsync(ResellerPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List of Reseller Accounts
		/// Get list of Reseller Accounts
		/// ResellerAccountsGet reseller/accounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task ResellerAccountsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller/accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Reseller Account
		/// ResellerAccountsPost reseller/accounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task ResellerAccountsPostAsync(Create_Reseller_AccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller/accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Reseller Account - Public
		/// ResellerAccounts_publicPost reseller/accounts-public
		/// </summary>
		/// <returns>OK</returns>
		public async Task ResellerAccounts_publicPostAsync(ResellerAccounts_publicPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller/accounts-public";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Reseller Account
		/// Get a specific reseller account.
		/// ResellerAccounts_client_user_idGet reseller/accounts/{client_user_id}
		/// </summary>
		/// <param name="client_user_id">The client user id.</param>
		/// <returns>OK</returns>
		public async Task ResellerAccounts_client_user_idGetAsync(double client_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller/accounts/"+client_user_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Reseller Account
		/// ResellerAccounts_client_user_idPut reseller/accounts/{client_user_id}
		/// </summary>
		/// <param name="client_user_id">Your client user id.</param>
		/// <returns>OK</returns>
		public async Task ResellerAccounts_client_user_idPutAsync(double client_user_id, Create_Reseller_AccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller/accounts/"+client_user_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Transfer Credit
		/// ResellerTransfer_creditPut reseller/transfer-credit
		/// </summary>
		/// <returns>OK</returns>
		public async Task ResellerTransfer_creditPutAsync(ResellerTransfer_creditPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller/transfer-credit";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reseller By Subdomain
		/// Get reseller setting by subdomin.
		/// Reseller_subdomainGet reseller/{subdomain}
		/// </summary>
		/// <param name="subdomain">Subdomain</param>
		/// <returns>OK</returns>
		public async Task Reseller_subdomainGetAsync(string subdomain, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reseller/"+ (subdomain==null? "" : System.Uri.EscapeDataString(subdomain));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// SDK Download
		/// Sdk_download_typeGet sdk-download/{type}
		/// </summary>
		/// <param name="type">Supported types.</param>
		/// <returns>OK</returns>
		public async Task Sdk_download_typeGetAsync(string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdk-download/"+ (type==null? "" : System.Uri.EscapeDataString(type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search Contacts-Lists
		/// SearchContacts_listsGet search/contacts-lists?q={q}
		/// </summary>
		/// <param name="q">Your keyword or query.</param>
		/// <returns>OK</returns>
		public async Task SearchContacts_listsGetAsync(string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/contacts-lists?q="+ (q==null? "" : System.Uri.EscapeDataString(q));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of SMS Campaigns
		/// Sms_campaignsGet sms-campaigns
		/// </summary>
		/// <returns>OK</returns>
		public async Task Sms_campaignsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Price for SMS Campaign
		/// Sms_campaignsPricePost sms-campaigns/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task Sms_campaignsPricePostAsync(Sms_campaignsPricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use Short URL
		/// This is functionally identical to the **POST /sms-campaigns/send** endpoint, other than adding the `smsg.us/xxxxx` string to the message body additional `url_to_shorten` parameter.
		/// Sms_campaignsSendPost sms-campaigns/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task Sms_campaignsSendPostAsync(Sms_campaignsSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Link Tracking Export
		/// Compile all link tracking for the specified campaign into a CSV for download.
		/// Sms_campaigns_campaign_idLink_exportGet sms-campaigns/{campaign_id}/link-export?filename={filename}
		/// </summary>
		/// <param name="campaign_id">Your campaign id.</param>
		/// <param name="filename">Your export filename.</param>
		/// <returns>OK</returns>
		public async Task Sms_campaigns_campaign_idLink_exportGetAsync(double campaign_id, string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/"+campaign_id+"/link-export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Link Statistics
		/// Get the breakdown of statistics for your campaign. Note that the returned values vary depending on your specific customers' interaction, so it's not safe to assume a value will always be specified.
		/// Sms_campaigns_campaign_idLink_statisticsGet sms-campaigns/{campaign_id}/link-statistics
		/// </summary>
		/// <param name="campaign_id">Your campaign id.</param>
		/// <returns>OK</returns>
		public async Task Sms_campaigns_campaign_idLink_statisticsGetAsync(double campaign_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/"+campaign_id+"/link-statistics";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Link Tracking
		/// This endpoint gives you a paginated overview of all the links in a particular campaign, and who has and hasn't visited them.
		/// Sms_campaigns_campaign_idLink_trackingGet sms-campaigns/{campaign_id}/link-tracking
		/// </summary>
		/// <param name="campaign_id">Your campaign id.</param>
		/// <returns>OK</returns>
		public async Task Sms_campaigns_campaign_idLink_trackingGetAsync(double campaign_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/"+campaign_id+"/link-tracking";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get SMS Campaign
		/// Sms_campaigns_sms_campaign_idGet sms-campaigns/{sms_campaign_id}
		/// </summary>
		/// <param name="sms_campaign_id">Your SMS campaign id.</param>
		/// <returns>OK</returns>
		public async Task Sms_campaigns_sms_campaign_idGetAsync(double sms_campaign_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/"+sms_campaign_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an SMS Campaign
		/// Sms_campaigns_sms_campaign_idPut sms-campaigns/{sms_campaign_id}
		/// </summary>
		/// <param name="sms_campaign_id">Your SMS Campaign id.</param>
		/// <returns>OK</returns>
		public async Task Sms_campaigns_sms_campaign_idPutAsync(double sms_campaign_id, Sms_campaigns_sms_campaign_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/"+sms_campaign_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel an SMS Campaign
		/// Sms_campaigns_sms_campaign_idCancelPut sms-campaigns/{sms_campaign_id}/cancel
		/// </summary>
		/// <param name="sms_campaign_id">Your SMS Campaign id.</param>
		/// <returns>OK</returns>
		public async Task Sms_campaigns_sms_campaign_idCancelPutAsync(double sms_campaign_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms-campaigns/"+sms_campaign_id+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel all Scheduled Messages
		/// SmsCancel_allPut sms/cancel-all
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsCancel_allPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/cancel-all";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List of Email-to-SMS Allowed Address
		/// Get list of allowed email addresses.
		/// SmsEmail_smsGet sms/email-sms
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsEmail_smsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Email to SMS Allowed Address
		/// Create an allowed email address.
		/// SmsEmail_smsPost sms/email-sms
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsEmail_smsPostAsync(SmsEmail_smsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Stripped Strings
		/// SmsEmail_sms_stripped_stringsGet sms/email-sms-stripped-strings
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_stripped_stringsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms-stripped-strings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Stripped String
		/// SmsEmail_sms_stripped_stringsPost sms/email-sms-stripped-strings
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_stripped_stringsPostAsync(SmsEmail_sms_stripped_stringsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms-stripped-strings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Stripped String
		/// SmsEmail_sms_stripped_strings_rule_idDelete sms/email-sms-stripped-strings/{rule_id}
		/// </summary>
		/// <param name="rule_id">The rule id you want to access.</param>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_stripped_strings_rule_idDeleteAsync(double rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms-stripped-strings/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find Specific Stripped String
		/// SmsEmail_sms_stripped_strings_rule_idGet sms/email-sms-stripped-strings/{rule_id}
		/// </summary>
		/// <param name="rule_id">The rule id you want to access.</param>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_stripped_strings_rule_idGetAsync(double rule_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms-stripped-strings/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Stripped String
		/// SmsEmail_sms_stripped_strings_rule_idPut sms/email-sms-stripped-strings/{rule_id}
		/// </summary>
		/// <param name="rule_id">The rule id you want to access.</param>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_stripped_strings_rule_idPutAsync(double rule_id, SmsEmail_sms_stripped_strings_rule_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms-stripped-strings/"+rule_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Email-to-SMS Allowed Address
		/// Delete a specific allowed email address.
		/// SmsEmail_sms_email_address_idDelete sms/email-sms/{email_address_id}
		/// </summary>
		/// <param name="email_address_id">Your email address id.</param>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_email_address_idDeleteAsync(double email_address_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms/"+email_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get specific Email-to-SMS Allowed Address
		/// Get a specific allowed email address.
		/// SmsEmail_sms_email_address_idGet sms/email-sms/{email_address_id}
		/// </summary>
		/// <param name="email_address_id">Your email address id.</param>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_email_address_idGetAsync(double email_address_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms/"+email_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Email-to-SMS Allowed Address
		/// Update a specific allowed email address.
		/// SmsEmail_sms_email_address_idPut sms/email-sms/{email_address_id}
		/// </summary>
		/// <param name="email_address_id">Your email address id.</param>
		/// <returns>OK</returns>
		public async Task SmsEmail_sms_email_address_idPutAsync(double email_address_id, SmsEmail_sms_email_address_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/email-sms/"+email_address_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export SMS History
		/// SmsHistoryExportGet sms/history/export?filename={filename}
		/// </summary>
		/// <param name="filename">Your export filename.</param>
		/// <returns>OK</returns>
		public async Task SmsHistoryExportGetAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/history/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all History
		/// **SMS Delivery Status**
		/// 
		/// **Status (status field)**
		/// 
		/// | Status | Description |
		/// |---|---|---|
		/// | `Completed` | Added to delivery queue. Waiting to be sent to the network.|
		/// | `Sent` | Message sent to the network.|
		/// | `Cancelled` | Message cancelled.|
		/// | `Scheduled` | Message scheduled.|
		/// | `WaitApproval` | Waiting approval by our team. This is temporary and will change to 'Sent' once approved. This only happens for a few messages that are flagged for approval by our automated spam-detection system.|
		/// 
		/// **Status Codes (status_code field)**
		/// 
		/// | Code | Text | Description |
		/// |---|---|---|
		/// | `200` | Sent by network| Temporary success|
		/// | `201` | Received on handset| Permanent success|
		/// | `300` | Delivery failure| Permanent failure|
		/// | `301` | Delivery failure| Permanent failure|
		/// | `302` | Delivery failure| Temporary failure - supplier routing issue|
		/// SmsHistoryGet sms/history?date_from={date_from}&date_to={date_to}
		/// </summary>
		/// <param name="date_from">Timestamp (from) used to show records by date.</param>
		/// <param name="date_to">Timestamp (to) used to show recrods by date.</param>
		/// <returns>OK</returns>
		public async Task SmsHistoryGetAsync(string date_from, string date_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/history?date_from="+ (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to="+ (date_to==null? "" : System.Uri.EscapeDataString(date_to));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Inbound SMS - Pull
		/// SmsInboundGet sms/inbound
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsInboundGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/inbound";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a Test Inbound SMS
		/// SmsInboundPost sms/inbound
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsInboundPostAsync(Add_a_Test_Delivery_ReceiptBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/inbound";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Mark all Inbound SMS as read
		/// SmsInbound_readPut sms/inbound-read
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsInbound_readPutAsync(SmsInbound_readPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/inbound-read";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Mark a specific Inbound SMS as read
		/// SmsInbound_read_message_idPut sms/inbound-read/{message_id}
		/// </summary>
		/// <param name="message_id">Message ID. Must be a valid GUID.</param>
		/// <returns>OK</returns>
		public async Task SmsInbound_read_message_idPutAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/inbound-read/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Inbound - Pull
		/// SmsInbound_outbound_message_idGet sms/inbound/{outbound_message_id}
		/// </summary>
		/// <param name="outbound_message_id">Message ID of the original outbound message, to which the inbound message is a reply. Must be a valid GUID.</param>
		/// <returns>OK</returns>
		public async Task SmsInbound_outbound_message_idGetAsync(string outbound_message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/inbound/"+ (outbound_message_id==null? "" : System.Uri.EscapeDataString(outbound_message_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Price
		/// SmsPricePost sms/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsPricePostAsync(SmsPricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Delivery Receipts
		/// SmsReceiptsGet sms/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsReceiptsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a Test Delivery Receipt
		/// SmsReceiptsPost sms/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsReceiptsPostAsync(Add_a_Test_Delivery_ReceiptBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Mark Delivery Receipts as read
		/// SmsReceipts_readPut sms/receipts-read
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsReceipts_readPutAsync(SmsReceipts_readPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/receipts-read";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a Specific Delivery Receipt
		/// SmsReceipts_message_idGet sms/receipts/{message_id}
		/// </summary>
		/// <param name="message_id">Your message id.</param>
		/// <returns>OK</returns>
		public async Task SmsReceipts_message_idGetAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/receipts/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send an SMS
		/// You can post **up to 1000 messages** with each API call.
		/// SmsSendPost sms/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsSendPostAsync(SmsSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List of Templates
		/// Get list of templates.
		/// SmsTemplatesGet sms/templates
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsTemplatesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Template
		/// Create new template.
		/// SmsTemplatesPost sms/templates
		/// </summary>
		/// <returns>OK</returns>
		public async Task SmsTemplatesPostAsync(SmsTemplatesPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/templates";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a Template
		/// SmsTemplates_template_idDelete sms/templates/{template_id}
		/// </summary>
		/// <param name="template_id">Your template id.</param>
		/// <returns>OK</returns>
		public async Task SmsTemplates_template_idDeleteAsync(string template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/templates/"+ (template_id==null? "" : System.Uri.EscapeDataString(template_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Template
		/// SmsTemplates_template_idPut sms/templates/{template_id}
		/// </summary>
		/// <param name="template_id">Your template id.</param>
		/// <returns>OK</returns>
		public async Task SmsTemplates_template_idPutAsync(string template_id, SmsTemplates_template_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/templates/"+ (template_id==null? "" : System.Uri.EscapeDataString(template_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel a Scheduled Message
		/// Sms_message_idCancelPut sms/{message_id}/cancel
		/// </summary>
		/// <param name="message_id">B7CE432193CD-0753597B7293 (string, required) - The message ID you want to cancel.</param>
		/// <returns>OK</returns>
		public async Task Sms_message_idCancelPutAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sms/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get SMS Statistics
		/// StatisticsSmsGet statistics/sms
		/// </summary>
		/// <returns>OK</returns>
		public async Task StatisticsSmsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/sms";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Voice Statistics
		/// StatisticsVoiceGet statistics/voice
		/// </summary>
		/// <returns>OK</returns>
		public async Task StatisticsVoiceGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/voice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all Subaccounts
		/// SubaccountsGet subaccounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task SubaccountsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new subaccount
		/// SubaccountsPost subaccounts
		/// </summary>
		/// <returns>OK</returns>
		public async Task SubaccountsPostAsync(SubaccountsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a specific subaccount
		/// Subaccounts_subaccount_idDelete subaccounts/{subaccount_id}
		/// </summary>
		/// <param name="subaccount_id">The subaccount ID you want to access.</param>
		/// <returns>OK</returns>
		public async Task Subaccounts_subaccount_idDeleteAsync(double subaccount_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccounts/"+subaccount_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific subaccount
		/// Subaccounts_subaccount_idGet subaccounts/{subaccount_id}
		/// </summary>
		/// <param name="subaccount_id">The subaccount ID you want to access.</param>
		/// <returns>OK</returns>
		public async Task Subaccounts_subaccount_idGetAsync(string subaccount_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccounts/"+ (subaccount_id==null? "" : System.Uri.EscapeDataString(subaccount_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a specific subaccount
		/// Subaccounts_subaccount_idPut subaccounts/{subaccount_id}
		/// </summary>
		/// <param name="subaccount_id">The subaccount ID you want to access.</param>
		/// <returns>OK</returns>
		public async Task Subaccounts_subaccount_idPutAsync(double subaccount_id, Subaccounts_subaccount_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccounts/"+subaccount_id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerate API Key
		/// Subaccounts_subaccount_idRegen_api_keyPut subaccounts/{subaccount_id}/regen-api-key
		/// </summary>
		/// <param name="subaccount_id">The ID of the subaccount to be accessed.</param>
		/// <returns>OK</returns>
		public async Task Subaccounts_subaccount_idRegen_api_keyPutAsync(double subaccount_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subaccounts/"+subaccount_id+"/regen-api-key";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Timezones
		/// Get supported list of timezones.
		/// TimezonesGet timezones
		/// </summary>
		/// <returns>OK</returns>
		public async Task TimezonesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "timezones";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upload a file
		/// UploadsPost uploads?convert={convert}
		/// </summary>
		/// <returns>OK</returns>
		public async Task UploadsPostAsync(UploadsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploads?convert={convert}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel all Voice Calls
		/// VoiceCancel_allPut voice/cancel-all
		/// </summary>
		/// <returns>OK</returns>
		public async Task VoiceCancel_allPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/cancel-all";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Export Voice History
		/// VoiceHistoryExportGet voice/history/export?filename={filename}
		/// </summary>
		/// <param name="filename">Your export filename.</param>
		/// <returns>OK</returns>
		public async Task VoiceHistoryExportGetAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/history/export?filename="+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Voice History
		/// VoiceHistoryGet voice/history?date_from={date_from}&date_to={date_to}
		/// </summary>
		/// <param name="date_from">Timestamp (from) used to show records by date.</param>
		/// <param name="date_to">Timestamp (to) used to show recrods by date.</param>
		/// <returns>OK</returns>
		public async Task VoiceHistoryGetAsync(string date_from, string date_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/history?date_from="+ (date_from==null? "" : System.Uri.EscapeDataString(date_from))+"&date_to="+ (date_to==null? "" : System.Uri.EscapeDataString(date_to));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Voice Languages
		/// VoiceLangGet voice/lang
		/// </summary>
		/// <returns>OK</returns>
		public async Task VoiceLangGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/lang";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Calculate Price
		/// VoicePricePost voice/price
		/// </summary>
		/// <returns>OK</returns>
		public async Task VoicePricePostAsync(VoicePricePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/price";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Voice receipts
		/// VoiceReceiptsGet voice/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task VoiceReceiptsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a Test Delivery Receipt
		/// VoiceReceiptsPost voice/receipts
		/// </summary>
		/// <returns>OK</returns>
		public async Task VoiceReceiptsPostAsync(Add_a_Test_Delivery_ReceiptBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/receipts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Marked Voice Receipts as Read
		/// VoiceReceipts_readPut voice/receipts-read?date_before={date_before}
		/// </summary>
		/// <param name="date_before">An optional [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp) - mark all as read before this timestamp. If not given, all receipts will be marked as read.</param>
		/// <returns>OK</returns>
		public async Task VoiceReceipts_readPutAsync(double date_before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/receipts-read?date_before="+date_before;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Specific Voice Receipt
		/// VoiceReceipts_message_idGet voice/receipts/{message_id}
		/// </summary>
		/// <param name="message_id">3055-45F1-9B79-F2C43509FD16 (string, required) - The voice receipt message id.</param>
		/// <returns>OK</returns>
		public async Task VoiceReceipts_message_idGetAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/receipts/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send a Voice Call
		/// You can post **up to 1000 messages** with each API call.
		/// 
		/// We support some SSML tags allowing custom breaks or pauses to be entered, and the readout rate to be altered. [More info](https://help.clicksend.com/voice/how-to-adjust-tts-voice-calls).
		/// VoiceSendPost voice/send
		/// </summary>
		/// <returns>OK</returns>
		public async Task VoiceSendPostAsync(VoiceSendPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/send";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			using var requestWriter = new System.IO.StringWriter();
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel a Specific Voice Call
		/// Voice_message_idCancelPut voice/{message_id}/cancel
		/// </summary>
		/// <param name="message_id">Your voice message id.</param>
		/// <returns>OK</returns>
		public async Task Voice_message_idCancelPutAsync(string message_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice/"+ (message_id==null? "" : System.Uri.EscapeDataString(message_id))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class AccountPostPostBody
	{
		
		/// <summary>
		/// Your delivery to value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// Your country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Your email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
		
		/// <summary>
		/// Your first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_first_name")]
		public string User_first_name { get; set; }
		
		/// <summary>
		/// Your last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_last_name")]
		public string User_last_name { get; set; }
		
		/// <summary>
		/// Your phone number in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_phone")]
		public string User_phone { get; set; }
		
		/// <summary>
		/// Your username.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class AccountPutPutBody
	{
		
		/// <summary>
		/// Your delivery to value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// Your country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Set the private uploads flag. 0 or 1 only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="private_uploads")]
		public System.Nullable<System.Double> Private_uploads { get; set; }
		
		/// <summary>
		/// Set the private uploads flag. 0 or 1 only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setting_sms_hide_business_name")]
		public System.Nullable<System.Double> Setting_sms_hide_business_name { get; set; }
		
		/// <summary>
		/// Set the private uploads flag. 0 or 1 only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setting_sms_hide_your_number")]
		public System.Nullable<System.Double> Setting_sms_hide_your_number { get; set; }
		
		/// <summary>
		/// Timezone.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Your email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
		
		/// <summary>
		/// Your first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_first_name")]
		public string User_first_name { get; set; }
		
		/// <summary>
		/// Your last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_last_name")]
		public string User_last_name { get; set; }
		
		/// <summary>
		/// Your phone number in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_phone")]
		public string User_phone { get; set; }
		
		/// <summary>
		/// Your username.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class Account_verifySendPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_phone")]
		public string User_phone { get; set; }
	}
	
	public class AutomationsEmailReceiptPostPostBody
	{
		
		/// <summary>
		/// Action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public double Enabled { get; set; }
		
		/// <summary>
		/// Match Type. 0=All reports.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match_type")]
		public double Match_type { get; set; }
		
		/// <summary>
		/// Rule Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule_name")]
		public string Rule_name { get; set; }
	}
	
	public class AutomationsEmailReceipt_rule_idPutPutBody
	{
		
		/// <summary>
		/// Action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Double> Enabled { get; set; }
		
		/// <summary>
		/// Match Type. 0=All reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_type")]
		public System.Nullable<System.Double> Match_type { get; set; }
		
		/// <summary>
		/// Rule Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule_name")]
		public string Rule_name { get; set; }
	}
	
	public class AutomationsFaxReceiptsPostPostBody
	{
		
		/// <summary>
		/// Action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public double Enabled { get; set; }
		
		/// <summary>
		/// Match Type. 0=All reports.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match_type")]
		public double Match_type { get; set; }
		
		/// <summary>
		/// Rule Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule_name")]
		public string Rule_name { get; set; }
	}
	
	public class AutomationsFaxReceipts_rule_idPutPutBody
	{
		
		/// <summary>
		/// Action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Double> Enabled { get; set; }
		
		/// <summary>
		/// Match Type. 0=All reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_type")]
		public System.Nullable<System.Double> Match_type { get; set; }
		
		/// <summary>
		/// Rule Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule_name")]
		public string Rule_name { get; set; }
	}
	
	public class AutomationsSmsInboundPostPostBody
	{
		
		/// <summary>
		/// Action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Dedicated Number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dedicated_number")]
		public double Dedicated_number { get; set; }
		
		/// <summary>
		/// Enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public double Enabled { get; set; }
		
		/// <summary>
		/// Message Search Term.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_search_term")]
		public string Message_search_term { get; set; }
		
		/// <summary>
		/// Message Search Type: 0=Any message, 1=starts with, 2=contains, 3=does not contain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_search_type")]
		public double Message_search_type { get; set; }
		
		/// <summary>
		/// Rule Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule_name")]
		public string Rule_name { get; set; }
	}
	
	public class AutomationsSmsInbound_inbound_rule_idPutPutBody
	{
		
		/// <summary>
		/// Action.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Action Address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action_address")]
		public string Action_address { get; set; }
		
		/// <summary>
		/// Dedicated Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dedicated_number")]
		public string Dedicated_number { get; set; }
		
		/// <summary>
		/// Enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public double Enabled { get; set; }
		
		/// <summary>
		/// Message Search Term.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_search_term")]
		public string Message_search_term { get; set; }
		
		/// <summary>
		/// Message Search Type: 0=Any message, 1=starts with, 2=contains, 3=does not contain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_search_type")]
		public double Message_search_type { get; set; }
	}
	
	public class Delivery_issuesPostPostBody
	{
		
		/// <summary>
		/// The user's comments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_comments")]
		public string Client_comments { get; set; }
		
		/// <summary>
		/// The description of the message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The user's email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The message id of the message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_id")]
		public string Message_id { get; set; }
		
		/// <summary>
		/// The type of message, must be one of the following values: `SMS`, `MMS`, `VOICE`, `EMAIL_MARKETING`, `EMAIL_TRANSACTIONAL`, `FAX`, `POST`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Email_campaigns_email_campaign_idPutPutBody
	{
		
		/// <summary>
		/// The allowed email address id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_email_address_id")]
		public System.Nullable<System.Double> From_email_address_id { get; set; }
		
		/// <summary>
		/// The name that will appear on the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_name")]
		public string From_name { get; set; }
		
		/// <summary>
		/// The list id you want to access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// The name of the sender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Will replace existing schedule (even if left blank). Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// The subject of the email campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// The template id you want to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template_id")]
		public System.Nullable<System.Double> Template_id { get; set; }
	}
	
	public class EmailAddressesPostPostBody
	{
		
		/// <summary>
		/// {
		///    "email_address" : "test222@user.com"
		///}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		/// <summary>
		/// Your email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
	}
	
	public class EmailPricePostPostBody
	{
		
		/// <summary>
		/// The attachments of the email. See sample request for more details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// The bcc of the email. See sample request for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bcc")]
		public string[] Bcc { get; set; }
		
		/// <summary>
		/// The content of the email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The cc of the email. See sample request for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cc")]
		public string[] Cc { get; set; }
		
		/// <summary>
		/// The sender's email address id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from.email_address_id")]
		public double From_email_address_id { get; set; }
		
		/// <summary>
		/// The sender's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from.name")]
		public string From_name { get; set; }
		
		/// <summary>
		/// The subject of the email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// The recipients of the email. See sample request for more details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string[] To { get; set; }
	}
	
	public class EmailSendPostPostBody
	{
		
		/// <summary>
		/// The attachments of the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// The bcc of the email. Follows the same structure as `to`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bcc")]
		public string[] Bcc { get; set; }
		
		/// <summary>
		/// The content of the email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The cc of the email. Follows the same structure as `to`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cc")]
		public string[] Cc { get; set; }
		
		/// <summary>
		/// The sender's email address ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from.email_address_id")]
		public double From_email_address_id { get; set; }
		
		/// <summary>
		/// The sender's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from.name")]
		public string From_name { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// The recipients of the email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string[] To { get; set; }
	}
	
	public class EmailTemplatesPostPostBody
	{
		
		/// <summary>
		/// The ID of the master template you want to base on.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template_id_master")]
		public double Template_id_master { get; set; }
		
		/// <summary>
		/// The intended name for the new template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template_name")]
		public string Template_name { get; set; }
	}
	
	public class EmailTemplates_images_template_idPostPostBody
	{
		
		/// <summary>
		/// Uploads your selected image file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Uploads the image from the supplied URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class EmailTemplates_template_idPutPutBody
	{
		
		/// <summary>
		/// Your template body.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The intended name for the new template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template_name")]
		public string Template_name { get; set; }
	}
	
	public class FaxReceipts_readPutPutBody
	{
		
		/// <summary>
		/// An optional [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp) - mark all as read before this timestamp. If not given, all receipts will be marked as read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_before")]
		public System.Nullable<System.Double> Date_before { get; set; }
	}
	
	public class Forgot_passwordPutPutBody
	{
		
		/// <summary>
		/// Your username.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class Forgot_passwordVerifyPutPutBody
	{
		
		/// <summary>
		/// Your email activation token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activation_token")]
		public string Activation_token { get; set; }
		
		/// <summary>
		/// Your new password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Your subaccount id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subaccount_id")]
		public double Subaccount_id { get; set; }
	}
	
	public class Forgot_usernamePutPutBody
	{
		
		/// <summary>
		/// Your country. Used to format phone number. This is required if phone_number is not in international-format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your email. This is required if phone_number is not present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Your phone number. This is required if email is not present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public System.Nullable<System.Double> Phone_number { get; set; }
	}
	
	public class ListsPostPostBody
	{
		
		/// <summary>
		/// Your contact list name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list_name")]
		public string List_name { get; set; }
	}
	
	public class Lists_list_idPutPutBody
	{
		
		/// <summary>
		/// Your new contact list name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_name")]
		public string List_name { get; set; }
	}
	
	public class Lists_list_idContactsPostPostBody
	{
		
		/// <summary>
		/// Contact city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// Contact two-letter country code defined in ISO 3166.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		public string Address_country { get; set; }
		
		/// <summary>
		/// Contact address line 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_1")]
		public string Address_line_1 { get; set; }
		
		/// <summary>
		/// Contact address line 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_2")]
		public string Address_line_2 { get; set; }
		
		/// <summary>
		/// Contact postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_postal_code")]
		public string Address_postal_code { get; set; }
		
		/// <summary>
		/// Contact state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// Contact custom 1 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_1")]
		public string Custom_1 { get; set; }
		
		/// <summary>
		/// Contact custom 2 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_2")]
		public string Custom_2 { get; set; }
		
		/// <summary>
		/// Contact custom 3 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_3")]
		public string Custom_3 { get; set; }
		
		/// <summary>
		/// Contact custom 4 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_4")]
		public string Custom_4 { get; set; }
		
		/// <summary>
		/// Contact email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Contact fax number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax_number")]
		public string Fax_number { get; set; }
		
		/// <summary>
		/// Contact firstname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Contact lastname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Your organization name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_name")]
		public string Organization_name { get; set; }
		
		/// <summary>
		/// Contact phone number in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
	}
	
	public class Lists_list_idContacts_contact_idPutPutBody
	{
		
		/// <summary>
		/// Contact city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		/// <summary>
		/// Contact two-letter country code defined in ISO 3166.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		public string Address_country { get; set; }
		
		/// <summary>
		/// Contact address line 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_1")]
		public string Address_line_1 { get; set; }
		
		/// <summary>
		/// Contact address line 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_line_2")]
		public string Address_line_2 { get; set; }
		
		/// <summary>
		/// Contact postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_postal_code")]
		public string Address_postal_code { get; set; }
		
		/// <summary>
		/// Contact state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		public string Address_state { get; set; }
		
		/// <summary>
		/// Contact custom 1 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_1")]
		public string Custom_1 { get; set; }
		
		/// <summary>
		/// Contact custom 2 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_2")]
		public string Custom_2 { get; set; }
		
		/// <summary>
		/// Contact custom 3 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_3")]
		public string Custom_3 { get; set; }
		
		/// <summary>
		/// Contact custom 4 text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_4")]
		public string Custom_4 { get; set; }
		
		/// <summary>
		/// Contact email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Contact fax number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax_number")]
		public string Fax_number { get; set; }
		
		/// <summary>
		/// Contact firstname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Contact lastname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Contact organization name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_name")]
		public string Organization_name { get; set; }
		
		/// <summary>
		/// Contact phone number in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
	}
	
	public class Lists_list_idImportPostPostBody
	{
		
		/// <summary>
		/// Your field order for your contact import file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="field_order")]
		public string[] Field_order { get; set; }
		
		/// <summary>
		/// Path to your CSV import file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
	}
	
	public class Lists_list_idImport_csv_previewPostPostBody
	{
		
		/// <summary>
		/// Path to your CSV import file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
	}
	
	public class Lists_list_idRemove_duplicatesPutPutBody
	{
		
		/// <summary>
		/// List of Contact's fields to be used for checking.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
	}
	
	public class MmsPricePostPostBody
	{
		
		/// <summary>
		/// Your message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Recipient country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your reference. Will be passed back with all replies and delivery reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_string")]
		public string Custom_string { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// An email address where the reply should be emailed to. If omitted, the reply will be emailed back to the user who sent the outgoing SMS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_email")]
		public string From_email { get; set; }
		
		/// <summary>
		/// Your list ID if sending to a whole list. Can be used instead of 'to'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// Media file you want to send.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_file")]
		public string Media_file { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Subject line. Maximum 20 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	public class MmsSendPostPostBody
	{
		
		/// <summary>
		/// Your message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Recipient country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your reference. Will be passed back with all replies and delivery reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_string")]
		public string Custom_string { get; set; }
		
		/// <summary>
		/// The number to send from. Either leave blank or use a ClickSend number only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// An email address where the reply should be emailed to. If omitted, the reply will be emailed back to the user who sent the outgoing SMS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_email")]
		public string From_email { get; set; }
		
		/// <summary>
		/// Your list ID if sending to a whole list. Can be used instead of 'to'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// Media file you want to send.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_file")]
		public string Media_file { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Subject line. Maximum 20 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	public class PostDirect_mailCampaignsPricePostPostBody
	{
		
		/// <summary>
		/// List of location where you want to send your campaign, and the quantity per location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areas")]
		public string[] Areas { get; set; }
		
		/// <summary>
		/// Campaign file urls. You can submit max 2 file urls.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_urls")]
		public string[] File_urls { get; set; }
		
		/// <summary>
		/// Campaign name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Campaign file size. It can be A5 or DL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class PostDirect_mailCampaignsSendPostPostBody
	{
		
		/// <summary>
		/// List of location where you want to send your campaign, and the quantity per location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areas")]
		public string[] Areas { get; set; }
		
		/// <summary>
		/// Campaign file urls. You can submit max 2 file urls.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_urls")]
		public string[] File_urls { get; set; }
		
		/// <summary>
		/// Campaign name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Campaign file size. It can be A5 or DL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	public class PostLettersDetect_addressPostPostBody
	{
		
		/// <summary>
		/// Your file contents encoded in `base64`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	public class PostLettersPricePostPostBody
	{
		
		/// <summary>
		/// Is it in colored?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public System.Nullable<System.Double> Colour { get; set; }
		
		/// <summary>
		/// Is it in duplex?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplex")]
		public System.Nullable<System.Double> Duplex { get; set; }
		
		/// <summary>
		/// Your URL to your PDF file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
		
		/// <summary>
		/// Is it priority? 0 = Not Priority, 1 = Priority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority_post")]
		public System.Nullable<System.Double> Priority_post { get; set; }
		
		/// <summary>
		/// Your recipients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		/// <summary>
		/// Whether you used our template or not ([More Info](http://help.clicksend.com/13996-Post/post-letter-template)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template_used")]
		public System.Nullable<System.Double> Template_used { get; set; }
	}
	
	public class PostLettersSendPostPostBody
	{
		
		/// <summary>
		/// Is it in colour? 0 = Black and White, 1 = Colour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public System.Nullable<System.Double> Colour { get; set; }
		
		/// <summary>
		/// Is it in duplex? 0 = Simplex, 1 = Duplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplex")]
		public System.Nullable<System.Double> Duplex { get; set; }
		
		/// <summary>
		/// Your URL to your PDF file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
		
		/// <summary>
		/// Is it priority? 0 = Not Priority, 1 = Priority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority_post")]
		public System.Nullable<System.Double> Priority_post { get; set; }
		
		/// <summary>
		/// Your recipients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		/// <summary>
		/// Whether you used our template or not ([More Info](http://help.clicksend.com/13996-Post/post-letter-template)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template_used")]
		public System.Nullable<System.Double> Template_used { get; set; }
	}
	
	public class PostPostcardsPricePostPostBody
	{
		
		/// <summary>
		/// Postcard file urls. You can submit max 2 file urls.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_urls")]
		public string[] File_urls { get; set; }
		
		/// <summary>
		/// Your recipients.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
	}
	
	public class PostPostcardsSendPostPostBody
	{
		
		/// <summary>
		/// Postcard file urls. You can submit max 2 file urls.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_urls")]
		public string[] File_urls { get; set; }
		
		/// <summary>
		/// Your recipients.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
	}
	
	public class RechargeCredit_cardPutPutBody
	{
		
		/// <summary>
		/// Your bank's name that issued the credit card.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bank_name")]
		public string Bank_name { get; set; }
		
		/// <summary>
		/// Your CVC digits.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cvc")]
		public double Cvc { get; set; }
		
		/// <summary>
		/// Your credit card expiry month.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiry_month")]
		public double Expiry_month { get; set; }
		
		/// <summary>
		/// Your credit card expiry year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry_year")]
		public System.Nullable<System.Double> Expiry_year { get; set; }
		
		/// <summary>
		/// Your name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Your credit card no.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Double> Number { get; set; }
	}
	
	public class ResellerPutPutBody
	{
		
		/// <summary>
		/// Allow public signups.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allow_public_signups")]
		public double Allow_public_signups { get; set; }
		
		/// <summary>
		/// Colour navigation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colour_navigation")]
		public string Colour_navigation { get; set; }
		
		/// <summary>
		/// Company name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="company_name")]
		public string Company_name { get; set; }
		
		/// <summary>
		/// Default margin.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="default_margin")]
		public double Default_margin { get; set; }
		
		/// <summary>
		/// Default margin numbers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="default_margin_numbers")]
		public double Default_margin_numbers { get; set; }
		
		/// <summary>
		/// Logo URL (dark)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logo_url_dark")]
		public string Logo_url_dark { get; set; }
		
		/// <summary>
		/// Logo URL (light)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logo_url_light")]
		public string Logo_url_light { get; set; }
		
		/// <summary>
		/// Subdomain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subdomain")]
		public string Subdomain { get; set; }
		
		/// <summary>
		/// Trial balance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trial_balance")]
		public double Trial_balance { get; set; }
	}
	
	public class ResellerAccounts_publicPostPostBody
	{
		
		/// <summary>
		/// Your delivery to value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account_name")]
		public string Account_name { get; set; }
		
		/// <summary>
		/// Client country.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Reseller User ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reseller_user_id")]
		public double Reseller_user_id { get; set; }
		
		/// <summary>
		/// Your email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
		
		/// <summary>
		/// Your first name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_first_name")]
		public string User_first_name { get; set; }
		
		/// <summary>
		/// Your last name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_last_name")]
		public string User_last_name { get; set; }
		
		/// <summary>
		/// Your phone number in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_phone")]
		public string User_phone { get; set; }
		
		/// <summary>
		/// Your username.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class ResellerTransfer_creditPutPutBody
	{
		
		/// <summary>
		/// Your amount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public double Balance { get; set; }
		
		/// <summary>
		/// Your client user id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_user_id")]
		public string Client_user_id { get; set; }
		
		/// <summary>
		/// Your currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
	}
	
	public class Sms_campaignsPricePostPostBody
	{
		
		/// <summary>
		/// Your campaign message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Your list id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public double List_id { get; set; }
		
		/// <summary>
		/// Your campaign name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Sms_campaignsSendPostPostBody
	{
		
		/// <summary>
		/// Your campaign message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Your list id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public double List_id { get; set; }
		
		/// <summary>
		/// Your campaign name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// The URL you want to shorten (only required when using this feature). This must be only `http` or `https`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url_to_shorten")]
		public string Url_to_shorten { get; set; }
	}
	
	public class Sms_campaigns_sms_campaign_idPutPutBody
	{
		
		/// <summary>
		/// Your campaign message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Your list id.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public double List_id { get; set; }
		
		/// <summary>
		/// Your campaign name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Will replace existing schedule (even if left blank). Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
	}
	
	public class SmsEmail_smsPostPostBody
	{
		
		/// <summary>
		/// Your email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
	}
	
	public class SmsEmail_sms_stripped_stringsPostPostBody
	{
		
		/// <summary>
		/// The string that you want to strip from the body of email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="strip_string")]
		public string Strip_string { get; set; }
	}
	
	public class SmsEmail_sms_stripped_strings_rule_idPutPutBody
	{
		
		/// <summary>
		/// The string that you want to strip from the body of email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strip_string")]
		public string Strip_string { get; set; }
	}
	
	public class SmsEmail_sms_email_address_idPutPutBody
	{
		
		/// <summary>
		/// Your email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
	}
	
	public class SmsInbound_readPutPutBody
	{
		
		/// <summary>
		/// An optional timestamp - mark all as read before this timestamp. If not given, all messages will be marked as read.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date_before")]
		public double Date_before { get; set; }
	}
	
	public class SmsPricePostPostBody
	{
		
		/// <summary>
		/// Your message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Recipient country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your reference. Will be passed back with all replies and delivery reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_string")]
		public string Custom_string { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Your list ID if sending to a whole list. Can be used instead of 'to'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	public class SmsReceipts_readPutPutBody
	{
		
		/// <summary>
		/// An optional timestamp - mark all as read before this timestamp. If not given, all receipts will be marked as read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_before")]
		public System.Nullable<System.Double> Date_before { get; set; }
	}
	
	public class SmsSendPostPostBody
	{
		
		/// <summary>
		/// Your message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Recipient country.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your reference. Will be passed back with all replies and delivery reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_string")]
		public string Custom_string { get; set; }
		
		/// <summary>
		/// Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// An email address where the reply should be emailed to. If omitted, the reply will be emailed back to the user who sent the outgoing SMS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from_email")]
		public string From_email { get; set; }
		
		/// <summary>
		/// Your list ID if sending to a whole list. Can be used instead of 'to'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	public class SmsTemplatesPostPostBody
	{
		
		/// <summary>
		/// Your template body.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Your template name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template_name")]
		public string Template_name { get; set; }
	}
	
	public class SmsTemplates_template_idPutPutBody
	{
		
		/// <summary>
		/// Your template body.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Your template name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template_name")]
		public string Template_name { get; set; }
	}
	
	public class SubaccountsPostPostBody
	{
		
		/// <summary>
		/// Your access billing flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_billing")]
		public System.Nullable<System.Double> Access_billing { get; set; }
		
		/// <summary>
		/// Your access contacts flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_contacts")]
		public System.Nullable<System.Double> Access_contacts { get; set; }
		
		/// <summary>
		/// Your access reporting flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_reporting")]
		public System.Nullable<System.Double> Access_reporting { get; set; }
		
		/// <summary>
		/// Your access settings flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_settings")]
		public System.Nullable<System.Double> Access_settings { get; set; }
		
		/// <summary>
		/// Your access users flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_users")]
		public System.Nullable<System.Double> Access_users { get; set; }
		
		/// <summary>
		/// Your new api username.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_username")]
		public string Api_username { get; set; }
		
		/// <summary>
		/// Your new email.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Your firstname.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Your lastname.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Your new password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Your phone number in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Your share campaigns flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="share_campaigns")]
		public System.Nullable<System.Double> Share_campaigns { get; set; }
	}
	
	public class Subaccounts_subaccount_idPutPutBody
	{
		
		/// <summary>
		/// Your access billing flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_billing")]
		public System.Nullable<System.Double> Access_billing { get; set; }
		
		/// <summary>
		/// Your access contacts flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_contacts")]
		public System.Nullable<System.Double> Access_contacts { get; set; }
		
		/// <summary>
		/// Your access reporting flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_reporting")]
		public System.Nullable<System.Double> Access_reporting { get; set; }
		
		/// <summary>
		/// Your access settings flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_settings")]
		public System.Nullable<System.Double> Access_settings { get; set; }
		
		/// <summary>
		/// Your access users flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_users")]
		public System.Nullable<System.Double> Access_users { get; set; }
		
		/// <summary>
		/// Your new email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Your firstname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Your lastname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Your new password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Your phone number in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// Your share campaigns flag value, must be 1 or 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="share_campaigns")]
		public System.Nullable<System.Double> Share_campaigns { get; set; }
	}
	
	public class UploadsPostPostBody
	{
		
		/// <summary>
		/// Your file contents encoded in `base64`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Conversion type: `fax`, `mms`, `csv` or `post`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="convert")]
		public string Convert { get; set; }
	}
	
	public class VoicePricePostPostBody
	{
		
		/// <summary>
		/// Your message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The country of the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your reference. Will be passed back with all replies and delivery reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_string")]
		public string Custom_string { get; set; }
		
		/// <summary>
		/// au (string, required) - See section on available languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		/// <summary>
		/// Your list ID if sending to a whole list. Can be used instead of 'to'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// Whether you want to receive a keypress from the call recipient (1 for on, 0 [default] for off)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_input")]
		public System.Nullable<System.Double> Require_input { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Either 'female' or 'male'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public string Voice { get; set; }
	}
	
	public class VoiceSendPostPostBody
	{
		
		/// <summary>
		/// Your message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The country of the recipient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Your reference. Will be passed back with all replies and delivery reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_string")]
		public string Custom_string { get; set; }
		
		/// <summary>
		/// au (string, required) - See section on available languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		/// <summary>
		/// Your list ID if sending to a whole list. Can be used instead of 'to'. Will override 'to' if both are used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		public System.Nullable<System.Double> List_id { get; set; }
		
		/// <summary>
		/// Whether to attempt to detect an answering machine or voicemail service and leave a message (1 for on, 0 [default] for off)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machine_detection")]
		public System.Nullable<System.Double> Machine_detection { get; set; }
		
		/// <summary>
		/// Whether you want to receive a keypress from the call recipient (1 for on, 0 [default] for off)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="require_input")]
		public System.Nullable<System.Double> Require_input { get; set; }
		
		/// <summary>
		/// Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Double> Schedule { get; set; }
		
		/// <summary>
		/// Your method of sending e.g. 'wordpress', 'php', 'c#'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Either 'female' or 'male'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public string Voice { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
