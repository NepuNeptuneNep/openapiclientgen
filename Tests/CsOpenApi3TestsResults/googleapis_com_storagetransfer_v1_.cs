//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents an On-Premises Agent pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentPool
	{
		
		/// <summary>
		/// Specifies a bandwidth limit for an agent pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidthLimit")]
		public BandwidthLimit BandwidthLimit { get; set; }
		
		/// <summary>
		/// Specifies the client-specified AgentPool description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. Specifies a unique string that identifies the agent pool. Format: `projects/{project_id}/agentPools/{agent_pool_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Specifies the state of the AgentPool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AgentPoolState> State { get; set; }
	}
	
	/// <summary>
	/// Specifies a bandwidth limit for an agent pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BandwidthLimit
	{
		
		/// <summary>
		/// Bandwidth rate in megabytes per second, distributed across all the agents in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitMbps")]
		public string LimitMbps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AgentPoolState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
	}
	
	/// <summary>
	/// AWS access key (see [AWS Security Credentials](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)). For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsAccessKey
	{
		
		/// <summary>
		/// Required. AWS access key ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessKeyId")]
		public string AccessKeyId { get; set; }
		
		/// <summary>
		/// Required. AWS secret access key. This field is not returned in RPC responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretAccessKey")]
		public string SecretAccessKey { get; set; }
	}
	
	/// <summary>
	/// An AwsS3CompatibleData resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsS3CompatibleData
	{
		
		/// <summary>
		/// Required. Specifies the name of the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required. Specifies the endpoint of the storage service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// S3CompatibleMetadata contains the metadata fields that apply to the basic types of S3-compatible data providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3Metadata")]
		public S3CompatibleMetadata S3Metadata { get; set; }
	}
	
	/// <summary>
	/// S3CompatibleMetadata contains the metadata fields that apply to the basic types of S3-compatible data providers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3CompatibleMetadata
	{
		
		/// <summary>
		/// Specifies the authentication and authorization method used by the storage service. When not specified, Transfer Service will attempt to determine right auth method to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMethod")]
		public System.Nullable<S3CompatibleMetadataAuthMethod> AuthMethod { get; set; }
		
		/// <summary>
		/// The Listing API to use for discovering objects. When not specified, Transfer Service will attempt to determine the right API to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listApi")]
		public System.Nullable<S3CompatibleMetadataListApi> ListApi { get; set; }
		
		/// <summary>
		/// Specifies the network protocol of the agent. When not specified, the default value of NetworkProtocol NETWORK_PROTOCOL_HTTPS is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<S3CompatibleMetadataProtocol> Protocol { get; set; }
		
		/// <summary>
		/// Specifies the API request model used to call the storage service. When not specified, the default value of RequestModel REQUEST_MODEL_VIRTUAL_HOSTED_STYLE is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestModel")]
		public System.Nullable<S3CompatibleMetadataRequestModel> RequestModel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum S3CompatibleMetadataAuthMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_METHOD_AWS_SIGNATURE_V4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_METHOD_AWS_SIGNATURE_V2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum S3CompatibleMetadataListApi
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_API_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_OBJECTS_V2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_OBJECTS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum S3CompatibleMetadataProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_PROTOCOL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_PROTOCOL_HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_PROTOCOL_HTTP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum S3CompatibleMetadataRequestModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_MODEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_MODEL_VIRTUAL_HOSTED_STYLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_MODEL_PATH_STYLE = 2,
	}
	
	/// <summary>
	/// An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object's name is the S3 object's key name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsS3Data
	{
		
		/// <summary>
		/// AWS access key (see [AWS Security Credentials](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)). For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awsAccessKey")]
		public AwsAccessKey AwsAccessKey { get; set; }
		
		/// <summary>
		/// Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Optional. Cloudfront domain name pointing to this bucket (as origin), to use when fetching. Format: `https://{id}.cloudfront.net` or any valid custom domain `https://...`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudfrontDomain")]
		public string CloudfrontDomain { get; set; }
		
		/// <summary>
		/// Optional. The Resource name of a secret in Secret Manager. AWS credentials must be stored in Secret Manager in JSON format: { "access_key_id": "ACCESS_KEY_ID", "secret_access_key": "SECRET_ACCESS_KEY" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Amazon S3] (https://cloud.google.com/storage-transfer/docs/source-amazon-s3#secret_manager) for more information. If `credentials_secret` is specified, do not specify role_arn or aws_access_key. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsSecret")]
		public string CredentialsSecret { get; set; }
		
		/// <summary>
		/// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs's name is the [Azure Blob Storage blob's key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AzureBlobStorageData
	{
		
		/// <summary>
		/// Azure credentials For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureCredentials")]
		public AzureCredentials AzureCredentials { get; set; }
		
		/// <summary>
		/// Required. The container to transfer from the Azure Storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		/// Optional. The Resource name of a secret in Secret Manager. The Azure SAS token must be stored in Secret Manager in JSON format: { "sas_token" : "SAS_TOKEN" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Microsoft Azure Blob Storage] (https://cloud.google.com/storage-transfer/docs/source-microsoft-azure#secret_manager) for more information. If `credentials_secret` is specified, do not specify azure_credentials. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsSecret")]
		public string CredentialsSecret { get; set; }
		
		/// <summary>
		/// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Required. The name of the Azure Storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccount")]
		public string StorageAccount { get; set; }
	}
	
	/// <summary>
	/// Azure credentials For information on our data retention policy for user credentials, see [User credentials](/storage-transfer/docs/data-retention#user-credentials).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AzureCredentials
	{
		
		/// <summary>
		/// Required. Azure shared access signature (SAS). For more information about SAS, see [Grant limited access to Azure Storage resources using shared access signatures (SAS)](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sasToken")]
		public string SasToken { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// An entry describing an error that has occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorLogEntry
	{
		
		/// <summary>
		/// A list of messages that carry the error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public string[] ErrorDetails { get; set; }
		
		/// <summary>
		/// Required. A URL that refers to the target (a data source, a data sink, or an object) with which the error is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A summary of errors by error code, plus a count and sample error log entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorSummary
	{
		
		/// <summary>
		/// Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<ErrorSummaryErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// Required. Count of this type of error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCount")]
		public string ErrorCount { get; set; }
		
		/// <summary>
		/// Error samples. At most 5 error log entries are recorded for a given error code for a single transfer operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorLogEntries")]
		public ErrorLogEntry[] ErrorLogEntries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorSummaryErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ARGUMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEADLINE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_EXISTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHENTICATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_EXHAUSTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_PRECONDITION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_RANGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIMPLEMENTED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_LOSS = 16,
	}
	
	/// <summary>
	/// Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventStream
	{
		
		/// <summary>
		/// Specifies the data and time at which Storage Transfer Service stops listening for events from this stream. After this time, any transfers in progress will complete, but no new transfers are initiated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventStreamExpirationTime")]
		public string EventStreamExpirationTime { get; set; }
		
		/// <summary>
		/// Specifies the date and time that Storage Transfer Service starts listening for events from this stream. If no start time is specified or start time is in the past, Storage Transfer Service starts listening immediately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventStreamStartTime")]
		public string EventStreamStartTime { get; set; }
		
		/// <summary>
		/// Required. Specifies a unique name of the resource such as AWS SQS ARN in the form 'arn:aws:sqs:region:account_id:queue_name', or Pub/Sub subscription resource name in the form 'projects/{project}/subscriptions/{sub}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// In a GcsData resource, an object's name is the Cloud Storage object's name and its "last modification time" refers to the object's `updated` property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GcsData
	{
		
		/// <summary>
		/// Required. Cloud Storage bucket name. Must meet [Bucket Name Requirements](/storage/docs/naming#requirements).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'. The root path value must meet [Object Name Requirements](/storage/docs/naming#objectnames).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Google service account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleServiceAccount
	{
		
		/// <summary>
		/// Email address of the service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountEmail")]
		public string AccountEmail { get; set; }
		
		/// <summary>
		/// Unique identifier for the service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
	}
	
	/// <summary>
	/// An HttpData resource specifies a list of objects on the web to be transferred over HTTP. The information of the objects to be transferred is contained in a file referenced by a URL. The first line in the file must be `"TsvHttpData-1.0"`, which specifies the format of the file. Subsequent lines specify the information of the list of objects, one object per list entry. Each entry has the following tab-delimited fields: * **HTTP URL** — The location of the object. * **Length** — The size of the object in bytes. * **MD5** — The base64-encoded MD5 hash of the object. For an example of a valid TSV file, see [Transferring data from URLs](https://cloud.google.com/storage-transfer/docs/create-url-list). When transferring data based on a URL list, keep the following in mind: * When an object located at `http(s)://hostname:port/` is transferred to a data sink, the name of the object at the data sink is `/`. * If the specified size of an object does not match the actual size of the object fetched, the object is not transferred. * If the specified MD5 does not match the MD5 computed from the transferred bytes, the object transfer fails. * Ensure that each URL you specify is publicly accessible. For example, in Cloud Storage you can [share an object publicly] (/storage/docs/cloud-console#_sharingdata) and get a link to it. * Storage Transfer Service obeys `robots.txt` rules and requires the source HTTP server to support `Range` requests and to return a `Content-Length` header in each response. * ObjectConditions have no effect when filtering objects to transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpData
	{
		
		/// <summary>
		/// Required. The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listUrl")]
		public string ListUrl { get; set; }
	}
	
	/// <summary>
	/// Response from ListAgentPools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAgentPoolsResponse
	{
		
		/// <summary>
		/// A list of agent pools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentPools")]
		public AgentPool[] AgentPools { get; set; }
		
		/// <summary>
		/// The list next page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Represents the transfer operation object. To request a TransferOperation object, use transferOperations.get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned unique name. The format of `name` is `transferOperations/some/unique/name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response from ListTransferJobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTransferJobsResponse
	{
		
		/// <summary>
		/// The list next page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of transfer jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferJobs")]
		public TransferJob[] TransferJobs { get; set; }
	}
	
	/// <summary>
	/// This resource represents the configuration of a transfer job that runs periodically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferJob
	{
		
		/// <summary>
		/// Output only. The time that the transfer job was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Output only. The time that the transfer job was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionTime")]
		public string DeletionTime { get; set; }
		
		/// <summary>
		/// A description provided by the user for the job. Its max length is 1024 bytes when Unicode-encoded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventStream")]
		public EventStream EventStream { get; set; }
		
		/// <summary>
		/// Output only. The time that the transfer job was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModificationTime")]
		public string LastModificationTime { get; set; }
		
		/// <summary>
		/// The name of the most recently started TransferOperation of this JobConfig. Present if a TransferOperation has been created for this JobConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestOperationName")]
		public string LatestOperationName { get; set; }
		
		/// <summary>
		/// Specifies the logging behavior for transfer operations. For cloud-to-cloud transfers, logs are sent to Cloud Logging. See [Read transfer logs](https://cloud.google.com/storage-transfer/docs/read-transfer-logs) for details. For transfers to or from a POSIX file system, logs are stored in the Cloud Storage bucket that is the source or sink of the transfer. See [Managing Transfer for on-premises jobs] (https://cloud.google.com/storage-transfer/docs/managing-on-prem-jobs#viewing-logs) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// A unique name (within the transfer project) assigned when the job is created. If this field is empty in a CreateTransferJobRequest, Storage Transfer Service assigns a unique name. Otherwise, the specified name is used as the unique name for this job. If the specified name is in use by a job, the creation request fails with an ALREADY_EXISTS error. This name must start with `"transferJobs/"` prefix and end with a letter or a number, and should be no more than 128 characters. For transfers involving PosixFilesystem, this name must start with `transferJobs/OPI` specifically. For all other transfer types, this name must not start with `transferJobs/OPI`. Non-PosixFilesystem example: `"transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$"` PosixFilesystem example: `"transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$"` Applications must not rely on the enforcement of naming requirements involving OPI. Invalid job names fail with an INVALID_ARGUMENT error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specification to configure notifications published to Pub/Sub. Notifications are published to the customer-provided topic using the following `PubsubMessage.attributes`: * `"eventType"`: one of the EventType values * `"payloadFormat"`: one of the PayloadFormat values * `"projectId"`: the project_id of the `TransferOperation` * `"transferJobName"`: the transfer_job_name of the `TransferOperation` * `"transferOperationName"`: the name of the `TransferOperation` The `PubsubMessage.data` contains a TransferOperation resource formatted according to the specified `PayloadFormat`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationConfig")]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// The ID of the Google Cloud project that owns the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Transfers can be scheduled to recur or to run just once.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		/// <summary>
		/// Status of the job. This value MUST be specified for `CreateTransferJobRequests`. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TransferJobStatus> Status { get; set; }
		
		/// <summary>
		/// Configuration for running a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferSpec")]
		public TransferSpec TransferSpec { get; set; }
	}
	
	/// <summary>
	/// Specifies the logging behavior for transfer operations. For cloud-to-cloud transfers, logs are sent to Cloud Logging. See [Read transfer logs](https://cloud.google.com/storage-transfer/docs/read-transfer-logs) for details. For transfers to or from a POSIX file system, logs are stored in the Cloud Storage bucket that is the source or sink of the transfer. See [Managing Transfer for on-premises jobs] (https://cloud.google.com/storage-transfer/docs/managing-on-prem-jobs#viewing-logs) for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoggingConfig
	{
		
		/// <summary>
		/// For transfers with a PosixFilesystem source, this option enables the Cloud Storage transfer logs for this transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableOnpremGcsTransferLogs")]
		public System.Nullable<System.Boolean> EnableOnpremGcsTransferLogs { get; set; }
		
		/// <summary>
		/// States in which `log_actions` are logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logActionStates")]
		public string[] LogActionStates { get; set; }
		
		/// <summary>
		/// Specifies the actions to be logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logActions")]
		public string[] LogActions { get; set; }
	}
	
	/// <summary>
	/// Specification to configure notifications published to Pub/Sub. Notifications are published to the customer-provided topic using the following `PubsubMessage.attributes`: * `"eventType"`: one of the EventType values * `"payloadFormat"`: one of the PayloadFormat values * `"projectId"`: the project_id of the `TransferOperation` * `"transferJobName"`: the transfer_job_name of the `TransferOperation` * `"transferOperationName"`: the name of the `TransferOperation` The `PubsubMessage.data` contains a TransferOperation resource formatted according to the specified `PayloadFormat`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationConfig
	{
		
		/// <summary>
		/// Event types for which a notification is desired. If empty, send notifications for all event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTypes")]
		public string[] EventTypes { get; set; }
		
		/// <summary>
		/// Required. The desired format of the notification message payloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payloadFormat")]
		public System.Nullable<NotificationConfigPayloadFormat> PayloadFormat { get; set; }
		
		/// <summary>
		/// Required. The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NotificationConfigPayloadFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYLOAD_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 2,
	}
	
	/// <summary>
	/// Transfers can be scheduled to recur or to run just once.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schedule
	{
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTimeOfDay")]
		public TimeOfDay EndTimeOfDay { get; set; }
		
		/// <summary>
		/// Interval between the start of each scheduled TransferOperation. If unspecified, the default value is 24 hours. This value may not be less than 1 hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatInterval")]
		public string RepeatInterval { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleEndDate")]
		public Date ScheduleEndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleStartDate")]
		public Date ScheduleStartDate { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeOfDay")]
		public TimeOfDay StartTimeOfDay { get; set; }
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TransferJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Configuration for running a transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferSpec
	{
		
		/// <summary>
		/// An AwsS3CompatibleData resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awsS3CompatibleDataSource")]
		public AwsS3CompatibleData AwsS3CompatibleDataSource { get; set; }
		
		/// <summary>
		/// An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object's name is the S3 object's key name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awsS3DataSource")]
		public AwsS3Data AwsS3DataSource { get; set; }
		
		/// <summary>
		/// An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs's name is the [Azure Blob Storage blob's key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureBlobStorageDataSource")]
		public AzureBlobStorageData AzureBlobStorageDataSource { get; set; }
		
		/// <summary>
		/// In a GcsData resource, an object's name is the Cloud Storage object's name and its "last modification time" refers to the object's `updated` property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDataSink")]
		public GcsData GcsDataSink { get; set; }
		
		/// <summary>
		/// In a GcsData resource, an object's name is the Cloud Storage object's name and its "last modification time" refers to the object's `updated` property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDataSource")]
		public GcsData GcsDataSource { get; set; }
		
		/// <summary>
		/// In a GcsData resource, an object's name is the Cloud Storage object's name and its "last modification time" refers to the object's `updated` property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsIntermediateDataLocation")]
		public GcsData GcsIntermediateDataLocation { get; set; }
		
		/// <summary>
		/// An HttpData resource specifies a list of objects on the web to be transferred over HTTP. The information of the objects to be transferred is contained in a file referenced by a URL. The first line in the file must be `"TsvHttpData-1.0"`, which specifies the format of the file. Subsequent lines specify the information of the list of objects, one object per list entry. Each entry has the following tab-delimited fields: * **HTTP URL** — The location of the object. * **Length** — The size of the object in bytes. * **MD5** — The base64-encoded MD5 hash of the object. For an example of a valid TSV file, see [Transferring data from URLs](https://cloud.google.com/storage-transfer/docs/create-url-list). When transferring data based on a URL list, keep the following in mind: * When an object located at `http(s)://hostname:port/` is transferred to a data sink, the name of the object at the data sink is `/`. * If the specified size of an object does not match the actual size of the object fetched, the object is not transferred. * If the specified MD5 does not match the MD5 computed from the transferred bytes, the object transfer fails. * Ensure that each URL you specify is publicly accessible. For example, in Cloud Storage you can [share an object publicly] (/storage/docs/cloud-console#_sharingdata) and get a link to it. * Storage Transfer Service obeys `robots.txt` rules and requires the source HTTP server to support `Range` requests and to return a `Content-Length` header in each response. * ObjectConditions have no effect when filtering objects to transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpDataSource")]
		public HttpData HttpDataSource { get; set; }
		
		/// <summary>
		/// Conditions that determine which objects are transferred. Applies only to Cloud Data Sources such as S3, Azure, and Cloud Storage. The "last modification time" refers to the time of the last change to the object's content or metadata — specifically, this is the `updated` property of Cloud Storage objects, the `LastModified` field of S3 objects, and the `Last-Modified` header of Azure blobs. Transfers with a PosixFilesystem source or destination don't support `ObjectConditions`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectConditions")]
		public ObjectConditions ObjectConditions { get; set; }
		
		/// <summary>
		/// A POSIX filesystem resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posixDataSink")]
		public PosixFilesystem PosixDataSink { get; set; }
		
		/// <summary>
		/// A POSIX filesystem resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posixDataSource")]
		public PosixFilesystem PosixDataSource { get; set; }
		
		/// <summary>
		/// Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sinkAgentPoolName")]
		public string SinkAgentPoolName { get; set; }
		
		/// <summary>
		/// Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAgentPoolName")]
		public string SourceAgentPoolName { get; set; }
		
		/// <summary>
		/// Specifies where the manifest is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferManifest")]
		public TransferManifest TransferManifest { get; set; }
		
		/// <summary>
		/// TransferOptions define the actions to be performed on objects in a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferOptions")]
		public TransferOptions TransferOptions { get; set; }
	}
	
	/// <summary>
	/// Conditions that determine which objects are transferred. Applies only to Cloud Data Sources such as S3, Azure, and Cloud Storage. The "last modification time" refers to the time of the last change to the object's content or metadata — specifically, this is the `updated` property of Cloud Storage objects, the `LastModified` field of S3 objects, and the `Last-Modified` header of Azure blobs. Transfers with a PosixFilesystem source or destination don't support `ObjectConditions`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectConditions
	{
		
		/// <summary>
		/// If you specify `exclude_prefixes`, Storage Transfer Service uses the items in the `exclude_prefixes` array to determine which objects to exclude from a transfer. Objects must not start with one of the matching `exclude_prefixes` for inclusion in a transfer. The following are requirements of `exclude_prefixes`: * Each exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each exclude-prefix must omit the leading slash. For example, to exclude the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the exclude-prefix as `logs/y=2015/requests.gz`. * None of the exclude-prefix values can be empty, if specified. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If include_prefixes is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `exclude_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludePrefixes")]
		public string[] ExcludePrefixes { get; set; }
		
		/// <summary>
		/// If you specify `include_prefixes`, Storage Transfer Service uses the items in the `include_prefixes` array to determine which objects to include in a transfer. Objects must start with one of the matching `include_prefixes` for inclusion in the transfer. If exclude_prefixes is specified, objects must not start with any of the `exclude_prefixes` specified for inclusion in the transfer. The following are requirements of `include_prefixes`: * Each include-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix must omit the leading slash. For example, to include the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include-prefix as `logs/y=2015/requests.gz`. * None of the include-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. The max size of `include_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includePrefixes")]
		public string[] IncludePrefixes { get; set; }
		
		/// <summary>
		/// If specified, only objects with a "last modification time" before this timestamp and objects that don't have a "last modification time" are transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBefore")]
		public string LastModifiedBefore { get; set; }
		
		/// <summary>
		/// If specified, only objects with a "last modification time" on or after this timestamp and objects that don't have a "last modification time" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedSince")]
		public string LastModifiedSince { get; set; }
		
		/// <summary>
		/// Ensures that objects are not transferred if a specific maximum time has elapsed since the "last modification time". When a TransferOperation begins, objects with a "last modification time" are transferred only if the elapsed time between the start_time of the `TransferOperation`and the "last modification time" of the object is less than the value of max_time_elapsed_since_last_modification`. Objects that do not have a "last modification time" are also transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTimeElapsedSinceLastModification")]
		public string MaxTimeElapsedSinceLastModification { get; set; }
		
		/// <summary>
		/// Ensures that objects are not transferred until a specific minimum time has elapsed after the "last modification time". When a TransferOperation begins, objects with a "last modification time" are transferred only if the elapsed time between the start_time of the `TransferOperation` and the "last modification time" of the object is equal to or greater than the value of min_time_elapsed_since_last_modification`. Objects that do not have a "last modification time" are also transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTimeElapsedSinceLastModification")]
		public string MinTimeElapsedSinceLastModification { get; set; }
	}
	
	/// <summary>
	/// A POSIX filesystem resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PosixFilesystem
	{
		
		/// <summary>
		/// Root directory path to the filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootDirectory")]
		public string RootDirectory { get; set; }
	}
	
	/// <summary>
	/// Specifies where the manifest is located.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferManifest
	{
		
		/// <summary>
		/// Specifies the path to the manifest in Cloud Storage. The Google-managed service account for the transfer must have `storage.objects.get` permission for this object. An example path is `gs://bucket_name/path/manifest.csv`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// TransferOptions define the actions to be performed on objects in a transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferOptions
	{
		
		/// <summary>
		/// Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteObjectsFromSourceAfterTransfer")]
		public System.Nullable<System.Boolean> DeleteObjectsFromSourceAfterTransfer { get; set; }
		
		/// <summary>
		/// Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteObjectsUniqueInSink")]
		public System.Nullable<System.Boolean> DeleteObjectsUniqueInSink { get; set; }
		
		/// <summary>
		/// Specifies the metadata options for running a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataOptions")]
		public MetadataOptions MetadataOptions { get; set; }
		
		/// <summary>
		/// When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overwriteObjectsAlreadyExistingInSink")]
		public System.Nullable<System.Boolean> OverwriteObjectsAlreadyExistingInSink { get; set; }
		
		/// <summary>
		/// When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overwriteWhen")]
		public System.Nullable<TransferOptionsOverwriteWhen> OverwriteWhen { get; set; }
	}
	
	/// <summary>
	/// Specifies the metadata options for running a transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetadataOptions
	{
		
		/// <summary>
		/// Specifies how each object's ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public System.Nullable<MetadataOptionsAcl> Acl { get; set; }
		
		/// <summary>
		/// Specifies how each file's POSIX group ID (GID) attribute should be handled by the transfer. By default, GID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gid")]
		public System.Nullable<MetadataOptionsGid> Gid { get; set; }
		
		/// <summary>
		/// Specifies how each object's Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKey")]
		public System.Nullable<MetadataOptionsKmsKey> KmsKey { get; set; }
		
		/// <summary>
		/// Specifies how each file's mode attribute should be handled by the transfer. By default, mode is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<MetadataOptionsMode> Mode { get; set; }
		
		/// <summary>
		/// Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageClass")]
		public System.Nullable<MetadataOptionsStorageClass> StorageClass { get; set; }
		
		/// <summary>
		/// Specifies how symlinks should be handled by the transfer. By default, symlinks are not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symlink")]
		public System.Nullable<MetadataOptionsSymlink> Symlink { get; set; }
		
		/// <summary>
		/// Specifies how each object's temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temporaryHold")]
		public System.Nullable<MetadataOptionsTemporaryHold> TemporaryHold { get; set; }
		
		/// <summary>
		/// Specifies how each object's `timeCreated` metadata is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TIME_CREATED_SKIP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<MetadataOptionsTimeCreated> TimeCreated { get; set; }
		
		/// <summary>
		/// Specifies how each file's POSIX user ID (UID) attribute should be handled by the transfer. By default, UID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public System.Nullable<MetadataOptionsUid> Uid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACL_DESTINATION_BUCKET_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACL_PRESERVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsGid
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GID_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GID_SKIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GID_NUMBER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsKmsKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_KEY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_KEY_DESTINATION_BUCKET_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_KEY_PRESERVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODE_SKIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODE_PRESERVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_CLASS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_CLASS_PRESERVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_CLASS_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_CLASS_NEARLINE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_CLASS_COLDLINE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STORAGE_CLASS_ARCHIVE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsSymlink
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMLINK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMLINK_SKIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMLINK_PRESERVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsTemporaryHold
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_HOLD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_HOLD_SKIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_HOLD_PRESERVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsTimeCreated
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_CREATED_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_CREATED_SKIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_CREATED_PRESERVE_AS_CUSTOM_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataOptionsUid
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UID_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UID_SKIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UID_NUMBER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TransferOptionsOverwriteWhen
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITE_WHEN_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFFERENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALWAYS = 3,
	}
	
	/// <summary>
	/// Request passed to PauseTransferOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PauseTransferOperationRequest
	{
	}
	
	/// <summary>
	/// Request passed to ResumeTransferOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResumeTransferOperationRequest
	{
	}
	
	/// <summary>
	/// Request passed to RunTransferJob.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunTransferJobRequest
	{
		
		/// <summary>
		/// Required. The ID of the Google Cloud project that owns the transfer job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// A collection of counters that report the progress of a transfer operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferCounters
	{
		
		/// <summary>
		/// Bytes that are copied to the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesCopiedToSink")]
		public string BytesCopiedToSink { get; set; }
		
		/// <summary>
		/// Bytes that are deleted from the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesDeletedFromSink")]
		public string BytesDeletedFromSink { get; set; }
		
		/// <summary>
		/// Bytes that are deleted from the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesDeletedFromSource")]
		public string BytesDeletedFromSource { get; set; }
		
		/// <summary>
		/// Bytes that failed to be deleted from the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesFailedToDeleteFromSink")]
		public string BytesFailedToDeleteFromSink { get; set; }
		
		/// <summary>
		/// Bytes found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesFoundFromSource")]
		public string BytesFoundFromSource { get; set; }
		
		/// <summary>
		/// Bytes found only in the data sink that are scheduled to be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesFoundOnlyFromSink")]
		public string BytesFoundOnlyFromSink { get; set; }
		
		/// <summary>
		/// Bytes in the data source that failed to be transferred or that failed to be deleted after being transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesFromSourceFailed")]
		public string BytesFromSourceFailed { get; set; }
		
		/// <summary>
		/// Bytes in the data source that are not transferred because they already exist in the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesFromSourceSkippedBySync")]
		public string BytesFromSourceSkippedBySync { get; set; }
		
		/// <summary>
		/// For transfers involving PosixFilesystem only. Number of listing failures for each directory found at the source. Potential failures when listing a directory include permission failure or block failure. If listing a directory fails, no files in the directory are transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directoriesFailedToListFromSource")]
		public string DirectoriesFailedToListFromSource { get; set; }
		
		/// <summary>
		/// For transfers involving PosixFilesystem only. Number of directories found while listing. For example, if the root directory of the transfer is `base/` and there are two other directories, `a/` and `b/` under this directory, the count after listing `base/`, `base/a/` and `base/b/` is 3.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directoriesFoundFromSource")]
		public string DirectoriesFoundFromSource { get; set; }
		
		/// <summary>
		/// For transfers involving PosixFilesystem only. Number of successful listings for each directory found at the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directoriesSuccessfullyListedFromSource")]
		public string DirectoriesSuccessfullyListedFromSource { get; set; }
		
		/// <summary>
		/// Number of successfully cleaned up intermediate objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intermediateObjectsCleanedUp")]
		public string IntermediateObjectsCleanedUp { get; set; }
		
		/// <summary>
		/// Number of intermediate objects failed cleaned up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intermediateObjectsFailedCleanedUp")]
		public string IntermediateObjectsFailedCleanedUp { get; set; }
		
		/// <summary>
		/// Objects that are copied to the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsCopiedToSink")]
		public string ObjectsCopiedToSink { get; set; }
		
		/// <summary>
		/// Objects that are deleted from the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsDeletedFromSink")]
		public string ObjectsDeletedFromSink { get; set; }
		
		/// <summary>
		/// Objects that are deleted from the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsDeletedFromSource")]
		public string ObjectsDeletedFromSource { get; set; }
		
		/// <summary>
		/// Objects that failed to be deleted from the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsFailedToDeleteFromSink")]
		public string ObjectsFailedToDeleteFromSink { get; set; }
		
		/// <summary>
		/// Objects found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsFoundFromSource")]
		public string ObjectsFoundFromSource { get; set; }
		
		/// <summary>
		/// Objects found only in the data sink that are scheduled to be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsFoundOnlyFromSink")]
		public string ObjectsFoundOnlyFromSink { get; set; }
		
		/// <summary>
		/// Objects in the data source that failed to be transferred or that failed to be deleted after being transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsFromSourceFailed")]
		public string ObjectsFromSourceFailed { get; set; }
		
		/// <summary>
		/// Objects in the data source that are not transferred because they already exist in the data sink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectsFromSourceSkippedBySync")]
		public string ObjectsFromSourceSkippedBySync { get; set; }
	}
	
	/// <summary>
	/// A description of the execution of a transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferOperation
	{
		
		/// <summary>
		/// A collection of counters that report the progress of a transfer operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counters")]
		public TransferCounters Counters { get; set; }
		
		/// <summary>
		/// End time of this transfer execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Summarizes errors encountered with sample error log entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorBreakdowns")]
		public ErrorSummary[] ErrorBreakdowns { get; set; }
		
		/// <summary>
		/// Specifies the logging behavior for transfer operations. For cloud-to-cloud transfers, logs are sent to Cloud Logging. See [Read transfer logs](https://cloud.google.com/storage-transfer/docs/read-transfer-logs) for details. For transfers to or from a POSIX file system, logs are stored in the Cloud Storage bucket that is the source or sink of the transfer. See [Managing Transfer for on-premises jobs] (https://cloud.google.com/storage-transfer/docs/managing-on-prem-jobs#viewing-logs) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingConfig")]
		public LoggingConfig LoggingConfig { get; set; }
		
		/// <summary>
		/// A globally unique ID assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specification to configure notifications published to Pub/Sub. Notifications are published to the customer-provided topic using the following `PubsubMessage.attributes`: * `"eventType"`: one of the EventType values * `"payloadFormat"`: one of the PayloadFormat values * `"projectId"`: the project_id of the `TransferOperation` * `"transferJobName"`: the transfer_job_name of the `TransferOperation` * `"transferOperationName"`: the name of the `TransferOperation` The `PubsubMessage.data` contains a TransferOperation resource formatted according to the specified `PayloadFormat`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationConfig")]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// The ID of the Google Cloud project that owns the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Start time of this transfer execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Status of the transfer operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TransferOperationStatus> Status { get; set; }
		
		/// <summary>
		/// The name of the transfer job that triggers this transfer operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferJobName")]
		public string TransferJobName { get; set; }
		
		/// <summary>
		/// Configuration for running a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferSpec")]
		public TransferSpec TransferSpec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TransferOperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDING = 7,
	}
	
	/// <summary>
	/// Request passed to UpdateTransferJob.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTransferJobRequest
	{
		
		/// <summary>
		/// Required. The ID of the Google Cloud project that owns the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// This resource represents the configuration of a transfer job that runs periodically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferJob")]
		public TransferJob TransferJob { get; set; }
		
		/// <summary>
		/// The field mask of the fields in `transferJob` that are to be updated in this request. Fields in `transferJob` that can be updated are: description, transfer_spec, notification_config, logging_config, and status. To update the `transfer_spec` of the job, a complete transfer specification must be provided. An incomplete specification missing any required fields is rejected with the error INVALID_ARGUMENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTransferJobFieldMask")]
		public string UpdateTransferJobFieldMask { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the Google service account that is used by Storage Transfer Service to access buckets in the project where transfers run or in other projects. Each Google service account is associated with one Google Cloud project. Users should add this service account to the Google Cloud Storage bucket ACLs to grant access to Storage Transfer Service. This service account is created and owned by Storage Transfer Service and can only be used by Storage Transfer Service.
		/// Storagetransfer_googleServiceAccounts_get v1/googleServiceAccounts/{projectId}
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud project that the Google service account is associated with.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleServiceAccount> Storagetransfer_googleServiceAccounts_getAsync(string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/googleServiceAccounts/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleServiceAccount>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists agent pools.
		/// Storagetransfer_projects_agentPools_list v1/projects/{projectId}/agentPools
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud project that owns the job.</param>
		/// <param name="filter">An optional list of query parameters specified as JSON text in the form of: `{"agentPoolNames":["agentpool1","agentpool2",...]}` Since `agentPoolNames` support multiple values, its values must be specified with array notation. When the filter is either empty or not provided, the list returns all agent pools for the project.</param>
		/// <param name="pageSize">The list page size. The max allowed value is `256`.</param>
		/// <param name="pageToken">The list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAgentPoolsResponse> Storagetransfer_projects_agentPools_listAsync(string projectId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/agentPools&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAgentPoolsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an agent pool resource.
		/// Storagetransfer_projects_agentPools_create v1/projects/{projectId}/agentPools
		/// </summary>
		/// <param name="projectId">Required. The ID of the Google Cloud project that owns the agent pool.</param>
		/// <param name="agentPoolId">Required. The ID of the agent pool to create. The `agent_pool_id` must meet the following requirements: * Length of 128 characters or less. * Not start with the string `goog`. * Start with a lowercase ASCII character, followed by: * Zero or more: lowercase Latin alphabet characters, numerals, hyphens (`-`), periods (`.`), underscores (`_`), or tildes (`~`). * One or more numerals or lowercase ASCII characters. As expressed by the regular expression: `^(?!goog)[a-z]([a-z0-9-._~]*[a-z0-9])?$`.</param>
		/// <returns>Successful response</returns>
		public async Task<AgentPool> Storagetransfer_projects_agentPools_createAsync(string projectId, string agentPoolId, AgentPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/agentPools&agentPoolId=" + (agentPoolId==null? "" : System.Uri.EscapeDataString(agentPoolId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AgentPool>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists transfer jobs.
		/// Storagetransfer_transferJobs_list v1/transferJobs
		/// </summary>
		/// <param name="filter">Required. A list of query parameters specified as JSON text in the form of: `{"projectId":"my_project_id", "jobNames":["jobid1","jobid2",...], "jobStatuses":["status1","status2",...]}` Since `jobNames` and `jobStatuses` support multiple values, their values must be specified with array notation. `projectId` is required. `jobNames` and `jobStatuses` are optional. The valid values for `jobStatuses` are case-insensitive: ENABLED, DISABLED, and DELETED.</param>
		/// <param name="pageSize">The list page size. The max allowed value is 256.</param>
		/// <param name="pageToken">The list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTransferJobsResponse> Storagetransfer_transferJobs_listAsync(string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/transferJobs?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTransferJobsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a transfer job that runs periodically.
		/// Storagetransfer_transferJobs_create v1/transferJobs
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<TransferJob> Storagetransfer_transferJobs_createAsync(TransferJob requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/transferJobs";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransferJob>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a transfer job. Deleting a transfer job sets its status to DELETED.
		/// Storagetransfer_transferJobs_delete v1/{jobName}
		/// </summary>
		/// <param name="jobName">Required. The job to delete.</param>
		/// <param name="projectId">Required. The ID of the Google Cloud project that owns the job.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Storagetransfer_transferJobs_deleteAsync(string jobName, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a transfer job.
		/// Storagetransfer_transferJobs_get v1/{jobName}
		/// </summary>
		/// <param name="jobName">Required. The job to get.</param>
		/// <param name="projectId">Required. The ID of the Google Cloud project that owns the job.</param>
		/// <returns>Successful response</returns>
		public async Task<TransferJob> Storagetransfer_transferJobs_getAsync(string jobName, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransferJob>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a transfer job. Updating a job's transfer spec does not affect transfer operations that are running already. **Note:** The job's status field can be modified using this RPC (for example, to set a job's status to DELETED, DISABLED, or ENABLED).
		/// Storagetransfer_transferJobs_patch v1/{jobName}
		/// </summary>
		/// <param name="jobName">Required. The name of job to update.</param>
		/// <returns>Successful response</returns>
		public async Task<TransferJob> Storagetransfer_transferJobs_patchAsync(string jobName, UpdateTransferJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransferJob>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts a new operation for the specified transfer job. A `TransferJob` has a maximum of one active `TransferOperation`. If this method is called while a `TransferOperation` is active, an error is returned.
		/// Storagetransfer_transferJobs_run v1/{jobName}:run
		/// </summary>
		/// <param name="jobName">Required. The name of the transfer job.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Storagetransfer_transferJobs_runAsync(string jobName, RunTransferJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+":run";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an agent pool.
		/// Storagetransfer_projects_agentPools_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the agent pool to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Storagetransfer_projects_agentPools_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists transfer operations. Operations are ordered by their creation time in reverse chronological order.
		/// Storagetransfer_transferOperations_list v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the type being listed; must be `transferOperations`.</param>
		/// <param name="filter">Required. A list of query parameters specified as JSON text in the form of: `{"projectId":"my_project_id", "jobNames":["jobid1","jobid2",...], "operationNames":["opid1","opid2",...], "transferStatuses":["status1","status2",...]}` Since `jobNames`, `operationNames`, and `transferStatuses` support multiple values, they must be specified with array notation. `projectId` is required. `jobNames`, `operationNames`, and `transferStatuses` are optional. The valid values for `transferStatuses` are case-insensitive: IN_PROGRESS, PAUSED, SUCCESS, FAILED, and ABORTED.</param>
		/// <param name="pageSize">The list page size. The max allowed value is 256.</param>
		/// <param name="pageToken">The list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Storagetransfer_transferOperations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing agent pool resource.
		/// Storagetransfer_projects_agentPools_patch v1/{name}
		/// </summary>
		/// <param name="name">Required. Specifies a unique string that identifies the agent pool. Format: `projects/{project_id}/agentPools/{agent_pool_id}`</param>
		/// <param name="updateMask">The [field mask] (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf) of the fields in `agentPool` to update in this request. The following `agentPool` fields can be updated: * display_name * bandwidth_limit</param>
		/// <returns>Successful response</returns>
		public async Task<AgentPool> Storagetransfer_projects_agentPools_patchAsync(string name, string updateMask, AgentPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AgentPool>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels a transfer. Use the transferOperations.get method to check if the cancellation succeeded or if the operation completed despite the `cancel` request. When you cancel an operation, the currently running transfer is interrupted. For recurring transfer jobs, the next instance of the transfer job will still run. For example, if your job is configured to run every day at 1pm and you cancel Monday's operation at 1:05pm, Monday's transfer will stop. However, a transfer job will still be attempted on Tuesday. This applies only to currently running operations. If an operation is not currently running, `cancel` does nothing. *Caution:* Canceling a transfer job can leave your data in an unknown state. We recommend that you restore the state at both the destination and the source after the `cancel` request completes so that your data is in a consistent state. When you cancel a job, the next job computes a delta of files and may repair any inconsistent state. For instance, if you run a job every day, and today's job found 10 new files and transferred five files before you canceled the job, tomorrow's transfer operation will compute a new delta with the five files that were not copied today plus any new files discovered tomorrow.
		/// Storagetransfer_transferOperations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Storagetransfer_transferOperations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Pauses a transfer operation.
		/// Storagetransfer_transferOperations_pause v1/{name}:pause
		/// </summary>
		/// <param name="name">Required. The name of the transfer operation.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Storagetransfer_transferOperations_pauseAsync(string name, PauseTransferOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":pause";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Resumes a transfer operation that is paused.
		/// Storagetransfer_transferOperations_resume v1/{name}:resume
		/// </summary>
		/// <param name="name">Required. The name of the transfer operation.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Storagetransfer_transferOperations_resumeAsync(string name, ResumeTransferOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":resume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
