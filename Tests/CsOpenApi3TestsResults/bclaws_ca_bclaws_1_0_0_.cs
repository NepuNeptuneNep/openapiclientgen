//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Describes the documents and directories available within a specific 'aspect' (content group) of the BCLaws library
		/// Content_aspectIdGet content/{aspectId}
		/// </summary>
		/// <param name="aspectId">The identifier of the 'aspect' (content group) to search</param>
		/// <returns>List documents and directories within the aspect.</returns>
		public async Task Content_aspectIdGetAsync(Content_aspectIdGetAspectId aspectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "content/"+aspectId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the metadata available for the specified index or directory from the BCLaws legislative respository
		/// Content_aspectId_civixDocumentIdGet content/{aspectId}/{civixDocumentId}
		/// </summary>
		/// <param name="aspectId">The identifier of the 'aspect' (content group) to search</param>
		/// <param name="civixDocumentId">The document identification code for an index or directory</param>
		/// <returns>List documents and directories within the aspect.</returns>
		public async Task Content_aspectId_civixDocumentIdGetAsync(Content_aspectIdGetAspectId aspectId, string civixDocumentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "content/"+aspectId+"/"+ (civixDocumentId==null? "" : System.Uri.EscapeDataString(civixDocumentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a specific document from the BCLaws legislative repository (HTML format)
		/// The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
		/// DocumentId_aspectId_civixIndexId_civixDocumentIdGet document/id/{aspectId}/{civixIndexId}/{civixDocumentId}
		/// </summary>
		/// <param name="aspectId">The identifier of the 'aspect' (content group) to search</param>
		/// <param name="civixIndexId">Index identification code</param>
		/// <param name="civixDocumentId">The document identification code for an index or directory</param>
		/// <returns>List documents and directories within the aspect.</returns>
		public async Task DocumentId_aspectId_civixIndexId_civixDocumentIdGetAsync(Content_aspectIdGetAspectId aspectId, string civixIndexId, string civixDocumentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "document/id/"+aspectId+"/"+ (civixIndexId==null? "" : System.Uri.EscapeDataString(civixIndexId))+"/"+ (civixDocumentId==null? "" : System.Uri.EscapeDataString(civixDocumentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a specific document from the BCLaws legislative repository with search text highlighted (HTML format)
		/// The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
		/// DocumentId_aspectId_civixIndexId_civixDocumentIdSearch_searchStringGet document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/search/{searchString}
		/// </summary>
		/// <param name="aspectId">The identifier of the 'aspect' (content group) to search</param>
		/// <param name="civixIndexId">Index identification code</param>
		/// <param name="civixDocumentId">The document identification code for an index or directory</param>
		/// <param name="searchString">The text to search for within the document</param>
		/// <returns>List documents and directories within the aspect.</returns>
		public async Task DocumentId_aspectId_civixIndexId_civixDocumentIdSearch_searchStringGetAsync(Content_aspectIdGetAspectId aspectId, string civixIndexId, string civixDocumentId, string searchString, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "document/id/"+aspectId+"/"+ (civixIndexId==null? "" : System.Uri.EscapeDataString(civixIndexId))+"/"+ (civixDocumentId==null? "" : System.Uri.EscapeDataString(civixDocumentId))+"/search/"+ (searchString==null? "" : System.Uri.EscapeDataString(searchString));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a specific document from the BCLaws legislative repository (XML format)
		/// The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
		/// DocumentId_aspectId_civixIndexId_civixDocumentIdXmlGet document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml
		/// </summary>
		/// <param name="aspectId">The identifier of the 'aspect' (content group) to search</param>
		/// <param name="civixIndexId">Index identification code</param>
		/// <param name="civixDocumentId">The document identification code for an index or directory</param>
		/// <returns>List documents and directories within the aspect.</returns>
		public async Task DocumentId_aspectId_civixIndexId_civixDocumentIdXmlGetAsync(Content_aspectIdGetAspectId aspectId, string civixIndexId, string civixDocumentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "document/id/"+aspectId+"/"+ (civixIndexId==null? "" : System.Uri.EscapeDataString(civixIndexId))+"/"+ (civixDocumentId==null? "" : System.Uri.EscapeDataString(civixDocumentId))+"/xml";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a specific document from the BCLaws legislative repository with search text highlighted (XML format)
		/// The /document API allows you to retrieve actual documents from the BCLaws legislative repository. To retrieve a document from the repository you need the aspect identifier and two other specific pieces of information about the document: the index identifier and the document identifier. These unique identifiers can be retrieved from the /content API.
		/// DocumentId_aspectId_civixIndexId_civixDocumentIdXmlSearch_searchStringGet document/id/{aspectId}/{civixIndexId}/{civixDocumentId}/xml/search/{searchString}
		/// </summary>
		/// <param name="aspectId">The identifier of the 'aspect' (content group) to search</param>
		/// <param name="civixIndexId">Index identification code</param>
		/// <param name="civixDocumentId">The document identification code for an index or directory</param>
		/// <param name="searchString">The text to search for within the document</param>
		/// <returns>List documents and directories within the aspect.</returns>
		public async Task DocumentId_aspectId_civixIndexId_civixDocumentIdXmlSearch_searchStringGetAsync(Content_aspectIdGetAspectId aspectId, string civixIndexId, string civixDocumentId, string searchString, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "document/id/"+aspectId+"/"+ (civixIndexId==null? "" : System.Uri.EscapeDataString(civixIndexId))+"/"+ (civixDocumentId==null? "" : System.Uri.EscapeDataString(civixDocumentId))+"/xml/search/"+ (searchString==null? "" : System.Uri.EscapeDataString(searchString));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// A listing of metadata available for the specified aspect and search term from the BCLaws legislative repository
		/// Search_aspectIdFullsearchGetByQAndSAndEAndNFragAndLFrag search/{aspectId}/fullsearch
		/// </summary>
		/// <param name="aspectId">The identifier of the 'aspect' (content group) to search</param>
		/// <param name="q">query term</param>
		/// <param name="s">first hit (start index)</param>
		/// <param name="e">last hit (end index)</param>
		/// <param name="nFrag">number of fragment snippets to return (< 10)</param>
		/// <param name="lFrag">length of fragment snippets (< 200)</param>
		/// <returns>List of metadata available for the specified aspect and search term</returns>
		public async Task Search_aspectIdFullsearchGetByQAndSAndEAndNFragAndLFragAsync(Content_aspectIdGetAspectId aspectId, string q, string s, int e, int nFrag, int lFrag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/"+aspectId+"/fullsearch?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&s=" + (s==null? "" : System.Uri.EscapeDataString(s))+"&e="+e+"&nFrag="+nFrag+"&lFrag="+lFrag;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Content_aspectIdGetAspectId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="corpreg")]
		corpreg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bcgaz1")]
		bcgaz1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bcgaz2")]
		bcgaz2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oic")]
		oic = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="psl")]
		psl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ecb")]
		ecb = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hscr")]
		hscr = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="arch_oic")]
		arch_oic = 8,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
