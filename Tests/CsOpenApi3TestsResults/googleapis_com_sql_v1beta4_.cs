//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An entry for an Access Control list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AclEntry
	{
		
		/// <summary>
		/// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// This is always `sql#aclEntry`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Optional. A label to identify this entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The allowlisted value for the access control list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies options for controlling advanced machine features.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvancedMachineFeatures
	{
		
		/// <summary>
		/// The number of threads per physical core.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadsPerCore")]
		public System.Nullable<System.Int32> ThreadsPerCore { get; set; }
	}
	
	/// <summary>
	/// An Admin API warning message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiWarning
	{
		
		/// <summary>
		/// Code to uniquely identify the warning type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<ApiWarningCode> Code { get; set; }
		
		/// <summary>
		/// The warning message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The region name for REGION_UNREACHABLE warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiWarningCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_API_WARNING_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGION_UNREACHABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_RESULTS_EXCEEDS_LIMIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPROMISED_CREDENTIALS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_STATE_FAILURE = 4,
	}
	
	/// <summary>
	/// Database instance backup configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupConfiguration
	{
		
		/// <summary>
		/// We currently only support backup retention by specifying the number of backups we will retain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupRetentionSettings")]
		public BackupRetentionSettings BackupRetentionSettings { get; set; }
		
		/// <summary>
		/// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryLogEnabled")]
		public System.Nullable<System.Boolean> BinaryLogEnabled { get; set; }
		
		/// <summary>
		/// Whether this configuration is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// This is always `sql#backupConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Location of the backup
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Whether point in time recovery is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointInTimeRecoveryEnabled")]
		public System.Nullable<System.Boolean> PointInTimeRecoveryEnabled { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationLogArchivingEnabled")]
		public System.Nullable<System.Boolean> ReplicationLogArchivingEnabled { get; set; }
		
		/// <summary>
		/// Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The number of days of transaction logs we retain for point in time restore, from 1-7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionLogRetentionDays")]
		public System.Nullable<System.Int32> TransactionLogRetentionDays { get; set; }
	}
	
	/// <summary>
	/// We currently only support backup retention by specifying the number of backups we will retain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupRetentionSettings
	{
		
		/// <summary>
		/// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retainedBackups")]
		public System.Nullable<System.Int32> RetainedBackups { get; set; }
		
		/// <summary>
		/// The unit that 'retained_backups' represents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionUnit")]
		public System.Nullable<BackupRetentionSettingsRetentionUnit> RetentionUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupRetentionSettingsRetentionUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETENTION_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 1,
	}
	
	/// <summary>
	/// Backup context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupContext
	{
		
		/// <summary>
		/// The identifier of the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupId")]
		public string BackupId { get; set; }
		
		/// <summary>
		/// This is always `sql#backupContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Backup Reencryption Config
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupReencryptionConfig
	{
		
		/// <summary>
		/// Backup re-encryption limit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupLimit")]
		public System.Nullable<System.Int32> BackupLimit { get; set; }
		
		/// <summary>
		/// Type of backups users want to re-encrypt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupType")]
		public System.Nullable<BackupReencryptionConfigBackupType> BackupType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupReencryptionConfigBackupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 2,
	}
	
	/// <summary>
	/// A BackupRun resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupRun
	{
		
		/// <summary>
		/// Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupKind")]
		public System.Nullable<BackupRunBackupKind> BackupKind { get; set; }
		
		/// <summary>
		/// The description of this run, only applicable to on-demand backups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Disk encryption configuration for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionConfiguration")]
		public DiskEncryptionConfiguration DiskEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Disk encryption status for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionStatus")]
		public DiskEncryptionStatus DiskEncryptionStatus { get; set; }
		
		/// <summary>
		/// The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enqueuedTime")]
		public string EnqueuedTime { get; set; }
		
		/// <summary>
		/// Database instance operation error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public OperationError Error { get; set; }
		
		/// <summary>
		/// The identifier for this backup run. Unique only for a specific Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the database instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// This is always `sql#backupRun`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Location of the backups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The URI of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The status of this run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BackupRunStatus> Status { get; set; }
		
		/// <summary>
		/// Backup time zone to prevent restores to an instance with a different time zone. Now relevant only for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// The type of this run; can be either "AUTOMATED" or "ON_DEMAND" or "FINAL". This field defaults to "ON_DEMAND" and is ignored, when specified for insert requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BackupRunType> Type { get; set; }
		
		/// <summary>
		/// The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowStartTime")]
		public string WindowStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupRunBackupKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_BACKUP_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHYSICAL = 2,
	}
	
	/// <summary>
	/// Disk encryption configuration for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiskEncryptionConfiguration
	{
		
		/// <summary>
		/// This is always `sql#diskEncryptionConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Resource name of KMS key for disk encryption
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// Disk encryption status for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiskEncryptionStatus
	{
		
		/// <summary>
		/// This is always `sql#diskEncryptionStatus`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// KMS key version used to encrypt the Cloud SQL instance resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyVersionName")]
		public string KmsKeyVersionName { get; set; }
	}
	
	/// <summary>
	/// Database instance operation error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationError
	{
		
		/// <summary>
		/// Identifies the specific error that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// This is always `sql#operationError`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Additional information about the error encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_BACKUP_RUN_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENQUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERDUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_PENDING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupRunType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_BACKUP_RUN_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 2,
	}
	
	/// <summary>
	/// Backup run list results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupRunsListResponse
	{
		
		/// <summary>
		/// A list of backup runs in reverse chronological order of the enqueued time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BackupRun[] Items { get; set; }
		
		/// <summary>
		/// This is always `sql#backupRunsList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Binary log coordinates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BinLogCoordinates
	{
		
		/// <summary>
		/// Name of the binary log file for a Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binLogFileName")]
		public string BinLogFileName { get; set; }
		
		/// <summary>
		/// Position (offset) within the binary log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binLogPosition")]
		public string BinLogPosition { get; set; }
		
		/// <summary>
		/// This is always `sql#binLogCoordinates`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Database instance clone context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloneContext
	{
		
		/// <summary>
		/// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocatedIpRange")]
		public string AllocatedIpRange { get; set; }
		
		/// <summary>
		/// Binary log coordinates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binLogCoordinates")]
		public BinLogCoordinates BinLogCoordinates { get; set; }
		
		/// <summary>
		/// (SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseNames")]
		public string[] DatabaseNames { get; set; }
		
		/// <summary>
		/// Name of the Cloud SQL instance to be created as a clone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationInstanceName")]
		public string DestinationInstanceName { get; set; }
		
		/// <summary>
		/// This is always `sql#cloneContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitrTimestampMs")]
		public string PitrTimestampMs { get; set; }
		
		/// <summary>
		/// Timestamp, if specified, identifies the time to which the source instance is cloned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointInTime")]
		public string PointInTime { get; set; }
		
		/// <summary>
		/// Optional. (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredZone")]
		public string PreferredZone { get; set; }
	}
	
	/// <summary>
	/// Connect settings retrieval response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectSettings
	{
		
		/// <summary>
		/// `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendType")]
		public System.Nullable<ConnectSettingsBackendType> BackendType { get; set; }
		
		/// <summary>
		/// The database engine type and version. The `databaseVersion` field cannot be changed after instance creation. MySQL instances: `MYSQL_8_0`, `MYSQL_5_7` (default), or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12` (default), `POSTGRES_13`, or `POSTGRES_14`. SQL Server instances: `SQLSERVER_2017_STANDARD` (default), `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseVersion")]
		public System.Nullable<ConnectSettingsDatabaseVersion> DatabaseVersion { get; set; }
		
		/// <summary>
		/// The dns name of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsName")]
		public string DnsName { get; set; }
		
		/// <summary>
		/// The assigned IP addresses for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddresses")]
		public IpMapping[] IpAddresses { get; set; }
		
		/// <summary>
		/// This is always `sql#connectSettings`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Whether PSC connectivity is enabled for this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pscEnabled")]
		public System.Nullable<System.Boolean> PscEnabled { get; set; }
		
		/// <summary>
		/// The cloud region for the instance. e.g. `us-central1`, `europe-west1`. The region cannot be changed after instance creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// SslCerts Resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCaCert")]
		public SslCert ServerCaCert { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConnectSettingsBackendType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_BACKEND_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_GEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_GEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConnectSettingsDatabaseVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_DATABASE_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_5_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_5_5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_5_6 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_5_7 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2017_STANDARD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2017_ENTERPRISE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2017_EXPRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2017_WEB = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_9_6 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_18 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_26 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_27 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_28 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_29 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_30 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_31 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_32 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_33 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_34 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_35 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_36 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2019_STANDARD = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2019_ENTERPRISE = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2019_EXPRESS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2019_WEB = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2022_STANDARD = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2022_ENTERPRISE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2022_EXPRESS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_2022_WEB = 36,
	}
	
	/// <summary>
	/// Database instance IP mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpMapping
	{
		
		/// <summary>
		/// The IP address assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeToRetire")]
		public string TimeToRetire { get; set; }
		
		/// <summary>
		/// The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IpMappingType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IpMappingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_IP_ADDRESS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTGOING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATED_1ST_GEN = 4,
	}
	
	/// <summary>
	/// SslCerts Resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCert
	{
		
		/// <summary>
		/// PEM representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cert")]
		public string Cert { get; set; }
		
		/// <summary>
		/// Serial number, as extracted from the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certSerialNumber")]
		public string CertSerialNumber { get; set; }
		
		/// <summary>
		/// User supplied name. Constrained to [a-zA-Z.-_ ]+.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		/// <summary>
		/// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// Name of the database instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// This is always `sql#sslCert`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The URI of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Sha1 Fingerprint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Fingerprint")]
		public string Sha1Fingerprint { get; set; }
	}
	
	/// <summary>
	/// Data cache configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataCacheConfig
	{
		
		/// <summary>
		/// Whether data cache is enabled for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCacheEnabled")]
		public System.Nullable<System.Boolean> DataCacheEnabled { get; set; }
	}
	
	/// <summary>
	/// Represents a SQL database on the Cloud SQL instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Database
	{
		
		/// <summary>
		/// The Cloud SQL charset value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charset")]
		public string Charset { get; set; }
		
		/// <summary>
		/// The Cloud SQL collation value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
		
		/// <summary>
		/// This field is deprecated and will be removed from a future version of the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The name of the Cloud SQL instance. This does not include the project ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// This is always `sql#database`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// The URI of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Represents a Sql Server database on the Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlserverDatabaseDetails")]
		public SqlServerDatabaseDetails SqlserverDatabaseDetails { get; set; }
	}
	
	/// <summary>
	/// Represents a Sql Server database on the Cloud SQL instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlServerDatabaseDetails
	{
		
		/// <summary>
		/// The version of SQL Server with which the database is to be made compatible
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibilityLevel")]
		public System.Nullable<System.Int32> CompatibilityLevel { get; set; }
		
		/// <summary>
		/// The recovery model of a SQL Server database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryModel")]
		public string RecoveryModel { get; set; }
	}
	
	/// <summary>
	/// Database flags for Cloud SQL instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseFlags
	{
		
		/// <summary>
		/// The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A Cloud SQL instance resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseInstance
	{
		
		/// <summary>
		/// Output only. List all maintenance versions applicable on the instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableMaintenanceVersions")]
		public string[] AvailableMaintenanceVersions { get; set; }
		
		/// <summary>
		/// The backend type. `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendType")]
		public ConnectSettingsBackendType BackendType { get; set; }
		
		/// <summary>
		/// Connection name of the Cloud SQL instance used in connection strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionName")]
		public string ConnectionName { get; set; }
		
		/// <summary>
		/// Output only. The time when the instance was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The current disk usage of the instance in bytes. This property has been deprecated. Use the "cloudsql.googleapis.com/database/disk/bytes_used" metric in Cloud Monitoring API instead. Please see [this announcement](https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ) for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentDiskSize")]
		public string CurrentDiskSize { get; set; }
		
		/// <summary>
		/// Output only. Stores the current database version running on the instance including minor version such as `MYSQL_8_0_18`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseInstalledVersion")]
		public string DatabaseInstalledVersion { get; set; }
		
		/// <summary>
		/// The database engine type and version. The `databaseVersion` field cannot be changed after instance creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseVersion")]
		public ConnectSettingsDatabaseVersion DatabaseVersion { get; set; }
		
		/// <summary>
		/// Disk encryption configuration for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionConfiguration")]
		public DiskEncryptionConfiguration DiskEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Disk encryption status for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskEncryptionStatus")]
		public DiskEncryptionStatus DiskEncryptionStatus { get; set; }
		
		/// <summary>
		/// Output only. The dns name of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsName")]
		public string DnsName { get; set; }
		
		/// <summary>
		/// This field is deprecated and will be removed from a future version of the API. Use the `settings.settingsVersion` field instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The name and status of the failover replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverReplica")]
		public DatabaseInstanceFailoverReplica FailoverReplica { get; set; }
		
		/// <summary>
		/// The Compute Engine zone that the instance is currently serving from. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary zone. WARNING: Changing this might restart the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gceZone")]
		public string GceZone { get; set; }
		
		/// <summary>
		/// The instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public System.Nullable<DatabaseInstanceInstanceType> InstanceType { get; set; }
		
		/// <summary>
		/// The assigned IP addresses for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddresses")]
		public IpMapping[] IpAddresses { get; set; }
		
		/// <summary>
		/// The IPv6 address assigned to the instance. (Deprecated) This property was applicable only to First Generation instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6Address")]
		public string Ipv6Address { get; set; }
		
		/// <summary>
		/// This is always `sql#instance`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The current software version on the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceVersion")]
		public string MaintenanceVersion { get; set; }
		
		/// <summary>
		/// The name of the instance which will act as primary in the replication setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterInstanceName")]
		public string MasterInstanceName { get; set; }
		
		/// <summary>
		/// The maximum disk size of the instance in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDiskSize")]
		public string MaxDiskSize { get; set; }
		
		/// <summary>
		/// Name of the Cloud SQL instance. This does not include the project ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// On-premises instance configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onPremisesConfiguration")]
		public OnPremisesConfiguration OnPremisesConfiguration { get; set; }
		
		/// <summary>
		/// This message wraps up the information written by out-of-disk detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfDiskReport")]
		public SqlOutOfDiskReport OutOfDiskReport { get; set; }
		
		/// <summary>
		/// Output only. DEPRECATED: please use write_endpoint instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDnsName")]
		public string PrimaryDnsName { get; set; }
		
		/// <summary>
		/// The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// Output only. The link to service attachment of PSC instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pscServiceAttachmentLink")]
		public string PscServiceAttachmentLink { get; set; }
		
		/// <summary>
		/// The geographical region. Can be: * `us-central` (`FIRST_GEN` instances only) * `us-central1` (`SECOND_GEN` instances only) * `asia-east1` or `europe-west1`. Defaults to `us-central` or `us-central1` depending on the instance type. The region cannot be changed after instance creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Read-replica configuration for connecting to the primary instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaConfiguration")]
		public ReplicaConfiguration ReplicaConfiguration { get; set; }
		
		/// <summary>
		/// The replicas of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaNames")]
		public string[] ReplicaNames { get; set; }
		
		/// <summary>
		/// Initial root password. Use only on creation. You must set root passwords before you can connect to PostgreSQL instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootPassword")]
		public string RootPassword { get; set; }
		
		/// <summary>
		/// The status indicating if instance satisfiesPzs. Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzs")]
		public System.Nullable<System.Boolean> SatisfiesPzs { get; set; }
		
		/// <summary>
		/// Any scheduled maintenance for this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledMaintenance")]
		public SqlScheduledMaintenance ScheduledMaintenance { get; set; }
		
		/// <summary>
		/// The Compute Engine zone that the failover instance is currently serving from for a regional instance. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary/failover zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryGceZone")]
		public string SecondaryGceZone { get; set; }
		
		/// <summary>
		/// The URI of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// SslCerts Resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCaCert")]
		public SslCert ServerCaCert { get; set; }
		
		/// <summary>
		/// The service account email address assigned to the instance. \This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountEmailAddress")]
		public string ServiceAccountEmailAddress { get; set; }
		
		/// <summary>
		/// Database instance settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public Settings Settings { get; set; }
		
		/// <summary>
		/// The SQL network architecture for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlNetworkArchitecture")]
		public System.Nullable<DatabaseInstanceSqlNetworkArchitecture> SqlNetworkArchitecture { get; set; }
		
		/// <summary>
		/// The current serving state of the Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DatabaseInstanceState> State { get; set; }
		
		/// <summary>
		/// If the instance state is SUSPENDED, the reason for the suspension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspensionReason")]
		public string[] SuspensionReason { get; set; }
		
		/// <summary>
		/// Output only. The dns name of the primary instance in a replication group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeEndpoint")]
		public string WriteEndpoint { get; set; }
	}
	
	public class DatabaseInstanceFailoverReplica
	{
		
		/// <summary>
		/// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatabaseInstanceInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_INSTANCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_SQL_INSTANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_PREMISES_INSTANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_REPLICA_INSTANCE = 3,
	}
	
	/// <summary>
	/// On-premises instance configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnPremisesConfiguration
	{
		
		/// <summary>
		/// PEM representation of the trusted CA's x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertificate")]
		public string CaCertificate { get; set; }
		
		/// <summary>
		/// PEM representation of the replica's x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificate")]
		public string ClientCertificate { get; set; }
		
		/// <summary>
		/// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// The dump file to create the Cloud SQL replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dumpFilePath")]
		public string DumpFilePath { get; set; }
		
		/// <summary>
		/// The host and port of the on-premises instance in host:port format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostPort")]
		public string HostPort { get; set; }
		
		/// <summary>
		/// This is always `sql#onPremisesConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The password for connecting to on-premises instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Reference to another Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceInstance")]
		public InstanceReference SourceInstance { get; set; }
		
		/// <summary>
		/// The username for connecting to on-premises instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Reference to another Cloud SQL instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceReference
	{
		
		/// <summary>
		/// The name of the Cloud SQL instance being referenced. This does not include the project ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// The region of the Cloud SQL instance being referenced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// This message wraps up the information written by out-of-disk detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlOutOfDiskReport
	{
		
		/// <summary>
		/// The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlMinRecommendedIncreaseSizeGb")]
		public System.Nullable<System.Int32> SqlMinRecommendedIncreaseSizeGb { get; set; }
		
		/// <summary>
		/// This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlOutOfDiskState")]
		public System.Nullable<SqlOutOfDiskReportSqlOutOfDiskState> SqlOutOfDiskState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SqlOutOfDiskReportSqlOutOfDiskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_OUT_OF_DISK_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_SHUTDOWN = 2,
	}
	
	/// <summary>
	/// Read-replica configuration for connecting to the primary instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicaConfiguration
	{
		
		/// <summary>
		/// Optional. Specifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cascadableReplica")]
		public System.Nullable<System.Boolean> CascadableReplica { get; set; }
		
		/// <summary>
		/// Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverTarget")]
		public System.Nullable<System.Boolean> FailoverTarget { get; set; }
		
		/// <summary>
		/// This is always `sql#replicaConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Read-replica configuration specific to MySQL databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mysqlReplicaConfiguration")]
		public MySqlReplicaConfiguration MysqlReplicaConfiguration { get; set; }
	}
	
	/// <summary>
	/// Read-replica configuration specific to MySQL databases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MySqlReplicaConfiguration
	{
		
		/// <summary>
		/// PEM representation of the trusted CA's x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertificate")]
		public string CaCertificate { get; set; }
		
		/// <summary>
		/// PEM representation of the replica's x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificate")]
		public string ClientCertificate { get; set; }
		
		/// <summary>
		/// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// Seconds to wait between connect retries. MySQL's default is 60 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectRetryInterval")]
		public System.Nullable<System.Int32> ConnectRetryInterval { get; set; }
		
		/// <summary>
		/// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dumpFilePath")]
		public string DumpFilePath { get; set; }
		
		/// <summary>
		/// This is always `sql#mysqlReplicaConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Interval in milliseconds between replication heartbeats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterHeartbeatPeriod")]
		public string MasterHeartbeatPeriod { get; set; }
		
		/// <summary>
		/// The password for the replication connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// A list of permissible ciphers to use for SSL encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCipher")]
		public string SslCipher { get; set; }
		
		/// <summary>
		/// The username for the replication connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyServerCertificate")]
		public System.Nullable<System.Boolean> VerifyServerCertificate { get; set; }
	}
	
	/// <summary>
	/// Any scheduled maintenance for this instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlScheduledMaintenance
	{
		
		[System.Runtime.Serialization.DataMember(Name="canDefer")]
		public System.Nullable<System.Boolean> CanDefer { get; set; }
		
		/// <summary>
		/// If the scheduled maintenance can be rescheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReschedule")]
		public System.Nullable<System.Boolean> CanReschedule { get; set; }
		
		/// <summary>
		/// Maintenance cannot be rescheduled to start beyond this deadline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleDeadlineTime")]
		public string ScheduleDeadlineTime { get; set; }
		
		/// <summary>
		/// The start time of any upcoming scheduled maintenance for this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Database instance settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Settings
	{
		
		/// <summary>
		/// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationPolicy")]
		public System.Nullable<SettingsActivationPolicy> ActivationPolicy { get; set; }
		
		/// <summary>
		/// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeDirectoryConfig")]
		public SqlActiveDirectoryConfig ActiveDirectoryConfig { get; set; }
		
		/// <summary>
		/// Specifies options for controlling advanced machine features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedMachineFeatures")]
		public AdvancedMachineFeatures AdvancedMachineFeatures { get; set; }
		
		/// <summary>
		/// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedGaeApplications")]
		public string[] AuthorizedGaeApplications { get; set; }
		
		/// <summary>
		/// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityType")]
		public System.Nullable<SettingsAvailabilityType> AvailabilityType { get; set; }
		
		/// <summary>
		/// Database instance backup configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupConfiguration")]
		public BackupConfiguration BackupConfiguration { get; set; }
		
		/// <summary>
		/// The name of server Instance collation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
		
		/// <summary>
		/// Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorEnforcement")]
		public System.Nullable<SettingsConnectorEnforcement> ConnectorEnforcement { get; set; }
		
		/// <summary>
		/// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crashSafeReplicationEnabled")]
		public System.Nullable<System.Boolean> CrashSafeReplicationEnabled { get; set; }
		
		/// <summary>
		/// Data cache configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCacheConfig")]
		public DataCacheConfig DataCacheConfig { get; set; }
		
		/// <summary>
		/// The size of data disk, in GB. The data disk size minimum is 10GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskSizeGb")]
		public string DataDiskSizeGb { get; set; }
		
		/// <summary>
		/// The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskType")]
		public System.Nullable<SettingsDataDiskType> DataDiskType { get; set; }
		
		/// <summary>
		/// The database flags passed to the instance at startup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseFlags")]
		public DatabaseFlags[] DatabaseFlags { get; set; }
		
		/// <summary>
		/// Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseReplicationEnabled")]
		public System.Nullable<System.Boolean> DatabaseReplicationEnabled { get; set; }
		
		/// <summary>
		/// Configuration to protect against accidental instance deletion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionProtectionEnabled")]
		public System.Nullable<System.Boolean> DeletionProtectionEnabled { get; set; }
		
		/// <summary>
		/// Deny maintenance periods
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="denyMaintenancePeriods")]
		public DenyMaintenancePeriod[] DenyMaintenancePeriods { get; set; }
		
		/// <summary>
		/// Optional. The edition of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public System.Nullable<SettingsEdition> Edition { get; set; }
		
		/// <summary>
		/// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insightsConfig")]
		public InsightsConfig InsightsConfig { get; set; }
		
		/// <summary>
		/// IP Management configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipConfiguration")]
		public IpConfiguration IpConfiguration { get; set; }
		
		/// <summary>
		/// This is always `sql#settings`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationPreference")]
		public LocationPreference LocationPreference { get; set; }
		
		/// <summary>
		/// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindow")]
		public MaintenanceWindow MaintenanceWindow { get; set; }
		
		/// <summary>
		/// Database instance local user password validation policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordValidationPolicy")]
		public PasswordValidationPolicy PasswordValidationPolicy { get; set; }
		
		/// <summary>
		/// The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricingPlan")]
		public System.Nullable<SettingsPricingPlan> PricingPlan { get; set; }
		
		/// <summary>
		/// The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicationType")]
		public System.Nullable<SettingsReplicationType> ReplicationType { get; set; }
		
		/// <summary>
		/// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingsVersion")]
		public string SettingsVersion { get; set; }
		
		/// <summary>
		/// SQL Server specific audit configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlServerAuditConfig")]
		public SqlServerAuditConfig SqlServerAuditConfig { get; set; }
		
		/// <summary>
		/// Configuration to increase storage size automatically. The default value is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAutoResize")]
		public System.Nullable<System.Boolean> StorageAutoResize { get; set; }
		
		/// <summary>
		/// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAutoResizeLimit")]
		public string StorageAutoResizeLimit { get; set; }
		
		/// <summary>
		/// The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
		
		/// <summary>
		/// Server timezone, relevant only for Cloud SQL for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// User-provided labels, represented as a dictionary where each label is a single key value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLabels")]
		public System.Collections.Generic.Dictionary<string, string> UserLabels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SettingsActivationPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_ACTIVATION_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALWAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 3,
	}
	
	/// <summary>
	/// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlActiveDirectoryConfig
	{
		
		/// <summary>
		/// The name of the domain (e.g., mydomain.com).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// This is always sql#activeDirectoryConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SettingsAvailabilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_AVAILABILITY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SettingsConnectorEnforcement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTOR_ENFORCEMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SettingsDataDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_DATA_DISK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_SSD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_HDD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBSOLETE_LOCAL_SSD = 3,
	}
	
	/// <summary>
	/// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DenyMaintenancePeriod
	{
		
		/// <summary>
		/// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SettingsEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE_PLUS = 2,
	}
	
	/// <summary>
	/// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsightsConfig
	{
		
		/// <summary>
		/// Whether Query Insights feature is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryInsightsEnabled")]
		public System.Nullable<System.Boolean> QueryInsightsEnabled { get; set; }
		
		/// <summary>
		/// Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryPlansPerMinute")]
		public System.Nullable<System.Int32> QueryPlansPerMinute { get; set; }
		
		/// <summary>
		/// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryStringLength")]
		public System.Nullable<System.Int32> QueryStringLength { get; set; }
		
		/// <summary>
		/// Whether Query Insights will record application tags from query when enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordApplicationTags")]
		public System.Nullable<System.Boolean> RecordApplicationTags { get; set; }
		
		/// <summary>
		/// Whether Query Insights will record client address when enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordClientAddress")]
		public System.Nullable<System.Boolean> RecordClientAddress { get; set; }
	}
	
	/// <summary>
	/// IP Management configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpConfiguration
	{
		
		/// <summary>
		/// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocatedIpRange")]
		public string AllocatedIpRange { get; set; }
		
		/// <summary>
		/// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedNetworks")]
		public AclEntry[] AuthorizedNetworks { get; set; }
		
		/// <summary>
		/// Controls connectivity to private IP instances from Google services, such as BigQuery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrivatePathForGoogleCloudServices")]
		public System.Nullable<System.Boolean> EnablePrivatePathForGoogleCloudServices { get; set; }
		
		/// <summary>
		/// Whether the instance is assigned a public IP address or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4Enabled")]
		public System.Nullable<System.Boolean> Ipv4Enabled { get; set; }
		
		/// <summary>
		/// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateNetwork")]
		public string PrivateNetwork { get; set; }
		
		/// <summary>
		/// PSC settings for a Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pscConfig")]
		public PscConfig PscConfig { get; set; }
		
		/// <summary>
		/// Use `ssl_mode` instead for MySQL and PostgreSQL. SQL Server uses this flag. Whether SSL/TLS connections over IP are enforced. If set to false, then allow both non-SSL/non-TLS and SSL/TLS connections. For SSL/TLS connections, the client certificate won't be verified. If set to true, then only allow connections encrypted with SSL/TLS and with valid client certificates. If you want to enforce SSL/TLS without enforcing the requirement for valid client certificates, then use the `ssl_mode` flag instead of the legacy `require_ssl` flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireSsl")]
		public System.Nullable<System.Boolean> RequireSsl { get; set; }
		
		/// <summary>
		/// Specify how SSL/TLS is enforced in database connections. MySQL and PostgreSQL use the `ssl_mode` flag. If you must use the `require_ssl` flag for backward compatibility, then only the following value pairs are valid: * `ssl_mode=ALLOW_UNENCRYPTED_AND_ENCRYPTED` and `require_ssl=false` * `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false` * `ssl_mode=TRUSTED_CLIENT_CERTIFICATE_REQUIRED` and `require_ssl=true` The value of `ssl_mode` gets priority over the value of `require_ssl`. For example, for the pair `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false`, the `ssl_mode=ENCRYPTED_ONLY` means only accept SSL connections, while the `require_ssl=false` means accept both non-SSL and SSL connections. MySQL and PostgreSQL databases respect `ssl_mode` in this case and accept only SSL connections. SQL Server uses the `require_ssl` flag. You can set the value for this flag to `true` or `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslMode")]
		public System.Nullable<IpConfigurationSslMode> SslMode { get; set; }
	}
	
	/// <summary>
	/// PSC settings for a Cloud SQL instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PscConfig
	{
		
		/// <summary>
		/// Optional. The list of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedConsumerProjects")]
		public string[] AllowedConsumerProjects { get; set; }
		
		/// <summary>
		/// Whether PSC connectivity is enabled for this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pscEnabled")]
		public System.Nullable<System.Boolean> PscEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IpConfigurationSslMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_UNENCRYPTED_AND_ENCRYPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTED_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUSTED_CLIENT_CERTIFICATE_REQUIRED = 3,
	}
	
	/// <summary>
	/// Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationPreference
	{
		
		/// <summary>
		/// The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followGaeApplication")]
		public string FollowGaeApplication { get; set; }
		
		/// <summary>
		/// This is always `sql#locationPreference`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). To disable this field, set it to 'no_secondary_zone'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryZone")]
		public string SecondaryZone { get; set; }
		
		/// <summary>
		/// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceWindow
	{
		
		/// <summary>
		/// day of week (1-7), starting on Monday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// hour of day - 0 to 23.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.Int32> Hour { get; set; }
		
		/// <summary>
		/// This is always `sql#maintenanceWindow`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTrack")]
		public System.Nullable<MaintenanceWindowUpdateTrack> UpdateTrack { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MaintenanceWindowUpdateTrack
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_UPDATE_TRACK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		week5 = 3,
	}
	
	/// <summary>
	/// Database instance local user password validation policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PasswordValidationPolicy
	{
		
		/// <summary>
		/// The complexity of the password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complexity")]
		public System.Nullable<PasswordValidationPolicyComplexity> Complexity { get; set; }
		
		/// <summary>
		/// Disallow credentials that have been previously compromised by a public data breach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disallowCompromisedCredentials")]
		public System.Nullable<System.Boolean> DisallowCompromisedCredentials { get; set; }
		
		/// <summary>
		/// Disallow username as a part of the password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disallowUsernameSubstring")]
		public System.Nullable<System.Boolean> DisallowUsernameSubstring { get; set; }
		
		/// <summary>
		/// Whether the password policy is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePasswordPolicy")]
		public System.Nullable<System.Boolean> EnablePasswordPolicy { get; set; }
		
		/// <summary>
		/// Minimum number of characters allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordChangeInterval")]
		public string PasswordChangeInterval { get; set; }
		
		/// <summary>
		/// Number of previous passwords that cannot be reused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reuseInterval")]
		public System.Nullable<System.Int32> ReuseInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PasswordValidationPolicyComplexity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLEXITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLEXITY_DEFAULT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SettingsPricingPlan
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_PRICING_PLAN_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACKAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PER_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SettingsReplicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_REPLICATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCHRONOUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASYNCHRONOUS = 2,
	}
	
	/// <summary>
	/// SQL Server specific audit configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlServerAuditConfig
	{
		
		/// <summary>
		/// The name of the destination bucket (e.g., gs://mybucket).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// This is always sql#sqlServerAuditConfig
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// How long to keep generated audit files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionInterval")]
		public string RetentionInterval { get; set; }
		
		/// <summary>
		/// How often to upload generated audit files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadInterval")]
		public string UploadInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatabaseInstanceSqlNetworkArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_NETWORK_ARCHITECTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_NETWORK_ARCHITECTURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OLD_NETWORK_ARCHITECTURE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatabaseInstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_INSTANCE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DELETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CREATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE_MAINTENANCE = 7,
	}
	
	/// <summary>
	/// Database list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabasesListResponse
	{
		
		/// <summary>
		/// List of database resources in the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Database[] Items { get; set; }
		
		/// <summary>
		/// This is always `sql#databasesList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// This context is used to demote an existing standalone instance to be a Cloud SQL read replica for an external database server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DemoteContext
	{
		
		/// <summary>
		/// This is always `sql#demoteContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required. The name of the instance which acts as an on-premises primary instance in the replication setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceRepresentativeInstanceName")]
		public string SourceRepresentativeInstanceName { get; set; }
	}
	
	/// <summary>
	/// Read-replica configuration for connecting to the on-premises primary instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DemoteMasterConfiguration
	{
		
		/// <summary>
		/// This is always `sql#demoteMasterConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Read-replica configuration specific to MySQL databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mysqlReplicaConfiguration")]
		public DemoteMasterMySqlReplicaConfiguration MysqlReplicaConfiguration { get; set; }
	}
	
	/// <summary>
	/// Read-replica configuration specific to MySQL databases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DemoteMasterMySqlReplicaConfiguration
	{
		
		/// <summary>
		/// PEM representation of the trusted CA's x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertificate")]
		public string CaCertificate { get; set; }
		
		/// <summary>
		/// PEM representation of the replica's x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificate")]
		public string ClientCertificate { get; set; }
		
		/// <summary>
		/// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate. The format of the replica's private key can be either PKCS #1 or PKCS #8.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// This is always `sql#demoteMasterMysqlReplicaConfiguration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The password for the replication connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The username for the replication connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Database instance demote primary instance context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DemoteMasterContext
	{
		
		/// <summary>
		/// This is always `sql#demoteMasterContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name of the instance which will act as on-premises primary instance in the replication setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterInstanceName")]
		public string MasterInstanceName { get; set; }
		
		/// <summary>
		/// Read-replica configuration for connecting to the on-premises primary instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicaConfiguration")]
		public DemoteMasterConfiguration ReplicaConfiguration { get; set; }
		
		/// <summary>
		/// Flag to skip replication setup on the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipReplicationSetup")]
		public System.Nullable<System.Boolean> SkipReplicationSetup { get; set; }
		
		/// <summary>
		/// Verify the GTID consistency for demote operation. Default value: `True`. Setting this flag to `false` enables you to bypass the GTID consistency check between on-premises primary instance and Cloud SQL instance during the demotion operation but also exposes you to the risk of future replication failures. Change the value only if you know the reason for the GTID divergence and are confident that doing so will not cause any replication issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyGtidConsistency")]
		public System.Nullable<System.Boolean> VerifyGtidConsistency { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Database instance export context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportContext
	{
		
		/// <summary>
		/// Options for exporting BAK files (SQL Server-only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bakExportOptions")]
		public ExportContextBakExportOptions BakExportOptions { get; set; }
		
		/// <summary>
		/// Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csvExportOptions")]
		public ExportContextCsvExportOptions CsvExportOptions { get; set; }
		
		/// <summary>
		/// Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public string[] Databases { get; set; }
		
		/// <summary>
		/// The file type for the specified uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public System.Nullable<ExportContextFileType> FileType { get; set; }
		
		/// <summary>
		/// This is always `sql#exportContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Option for export offload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offload")]
		public System.Nullable<System.Boolean> Offload { get; set; }
		
		/// <summary>
		/// Options for exporting data as SQL statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlExportOptions")]
		public ExportContextSqlExportOptions SqlExportOptions { get; set; }
		
		/// <summary>
		/// The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ExportContextBakExportOptions
	{
		
		/// <summary>
		/// Type of this bak file will be export, FULL or DIFF, SQL Server only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bakType")]
		public System.Nullable<ExportContextBakExportOptionsBakType> BakType { get; set; }
		
		/// <summary>
		/// Deprecated: copy_only is deprecated. Use differential_base instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyOnly")]
		public System.Nullable<System.Boolean> CopyOnly { get; set; }
		
		/// <summary>
		/// Whether or not the backup can be used as a differential base copy_only backup can not be served as differential base
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="differentialBase")]
		public System.Nullable<System.Boolean> DifferentialBase { get; set; }
		
		/// <summary>
		/// Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripeCount")]
		public System.Nullable<System.Int32> StripeCount { get; set; }
		
		/// <summary>
		/// Whether or not the export should be striped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="striped")]
		public System.Nullable<System.Boolean> Striped { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportContextBakExportOptionsBakType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLOG = 3,
	}
	
	public class ExportContextCsvExportOptions
	{
		
		/// <summary>
		/// Specifies the character that should appear before a data character that needs to be escaped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="escapeCharacter")]
		public string EscapeCharacter { get; set; }
		
		/// <summary>
		/// Specifies the character that separates columns within each row (line) of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldsTerminatedBy")]
		public string FieldsTerminatedBy { get; set; }
		
		/// <summary>
		/// This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linesTerminatedBy")]
		public string LinesTerminatedBy { get; set; }
		
		/// <summary>
		/// Specifies the quoting character to be used when a data value is quoted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quoteCharacter")]
		public string QuoteCharacter { get; set; }
		
		/// <summary>
		/// The select query used to extract the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectQuery")]
		public string SelectQuery { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExportContextFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_FILE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 3,
	}
	
	public class ExportContextSqlExportOptions
	{
		
		/// <summary>
		/// Options for exporting from MySQL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mysqlExportOptions")]
		public ExportContextSqlExportOptionsMysqlExportOptions MysqlExportOptions { get; set; }
		
		/// <summary>
		/// Export only schemas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaOnly")]
		public System.Nullable<System.Boolean> SchemaOnly { get; set; }
		
		/// <summary>
		/// Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tables")]
		public string[] Tables { get; set; }
	}
	
	public class ExportContextSqlExportOptionsMysqlExportOptions
	{
		
		/// <summary>
		/// Option to include SQL statement required to set up replication. If set to `1`, the dump file includes a CHANGE MASTER TO statement with the binary log coordinates, and --set-gtid-purged is set to ON. If set to `2`, the CHANGE MASTER TO statement is written as a SQL comment and has no effect. If set to any value other than `1`, --set-gtid-purged is set to OFF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterData")]
		public System.Nullable<System.Int32> MasterData { get; set; }
	}
	
	/// <summary>
	/// Database instance failover context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailoverContext
	{
		
		/// <summary>
		/// This is always `sql#failoverContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The current settings version of this instance. Request will be rejected if this version doesn't match the current settings version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingsVersion")]
		public string SettingsVersion { get; set; }
	}
	
	/// <summary>
	/// A flag resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Flag
	{
		
		/// <summary>
		/// Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedIntValues")]
		public string[] AllowedIntValues { get; set; }
		
		/// <summary>
		/// For `STRING` flags, a list of strings that the value can be set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedStringValues")]
		public string[] AllowedStringValues { get; set; }
		
		/// <summary>
		/// The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliesTo")]
		public ConnectSettingsDatabaseVersion[] AppliesTo { get; set; }
		
		/// <summary>
		/// Whether or not the flag is considered in beta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inBeta")]
		public System.Nullable<System.Boolean> InBeta { get; set; }
		
		/// <summary>
		/// This is always `sql#flag`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// For `INTEGER` flags, the maximum allowed value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public string MaxValue { get; set; }
		
		/// <summary>
		/// For `INTEGER` flags, the minimum allowed value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public string MinValue { get; set; }
		
		/// <summary>
		/// This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresRestart")]
		public System.Nullable<System.Boolean> RequiresRestart { get; set; }
		
		/// <summary>
		/// The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags which do not take a value, such as `skip_grant_tables`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FlagType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlagType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_FLAG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_TIMEZONE_OFFSET = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOAT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPEATED_STRING = 7,
	}
	
	/// <summary>
	/// Flags list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlagsListResponse
	{
		
		/// <summary>
		/// List of flags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Flag[] Items { get; set; }
		
		/// <summary>
		/// This is always `sql#flagsList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Ephemeral certificate creation request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateEphemeralCertRequest
	{
		
		/// <summary>
		/// Optional. Access token to include in the signed certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// PEM encoded public key to include in the signed certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_key")]
		public string Public_key { get; set; }
		
		/// <summary>
		/// Optional. Optional snapshot read timestamp to trade freshness for performance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// Optional. If set, it will contain the cert valid duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validDuration")]
		public string ValidDuration { get; set; }
	}
	
	/// <summary>
	/// Ephemeral certificate creation request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateEphemeralCertResponse
	{
		
		/// <summary>
		/// SslCerts Resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralCert")]
		public SslCert EphemeralCert { get; set; }
	}
	
	/// <summary>
	/// Database instance import context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportContext
	{
		
		/// <summary>
		/// Import parameters specific to SQL Server .BAK files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bakImportOptions")]
		public ImportContextBakImportOptions BakImportOptions { get; set; }
		
		/// <summary>
		/// Options for importing data as CSV.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="csvImportOptions")]
		public ImportContextCsvImportOptions CsvImportOptions { get; set; }
		
		/// <summary>
		/// The target database for the import. If `fileType` is `SQL`, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If `fileType` is `CSV`, one database must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// The file type for the specified uri. * `SQL`: The file contains SQL statements. * `CSV`: The file contains CSV data. * `BAK`: The file contains backup data for a SQL Server instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public ExportContextFileType FileType { get; set; }
		
		/// <summary>
		/// The PostgreSQL user for this import operation. PostgreSQL instances only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importUser")]
		public string ImportUser { get; set; }
		
		/// <summary>
		/// This is always `sql#importContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Path to the import file in Cloud Storage, in the form `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when `fileType` is `SQL`. The instance must have write permissions to the bucket and read access to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	public class ImportContextBakImportOptions
	{
		
		/// <summary>
		/// Type of the bak content, FULL or DIFF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bakType")]
		public ExportContextBakExportOptionsBakType BakType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionOptions")]
		public ImportContextBakImportOptionsEncryptionOptions EncryptionOptions { get; set; }
		
		/// <summary>
		/// Whether or not the backup importing will restore database with NORECOVERY option Applies only to Cloud SQL for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRecovery")]
		public System.Nullable<System.Boolean> NoRecovery { get; set; }
		
		/// <summary>
		/// Whether or not the backup importing request will just bring database online without downloading Bak content only one of "no_recovery" and "recovery_only" can be true otherwise error will return. Applies only to Cloud SQL for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryOnly")]
		public System.Nullable<System.Boolean> RecoveryOnly { get; set; }
		
		/// <summary>
		/// Optional. The timestamp when the import should stop. This timestamp is in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, `2023-10-01T16:19:00.094`). This field is equivalent to the STOPAT keyword and applies to Cloud SQL for SQL Server only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopAt")]
		public string StopAt { get; set; }
		
		/// <summary>
		/// Optional. The marked transaction where the import should stop. This field is equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopAtMark")]
		public string StopAtMark { get; set; }
		
		/// <summary>
		/// Whether or not the backup set being restored is striped. Applies only to Cloud SQL for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="striped")]
		public System.Nullable<System.Boolean> Striped { get; set; }
	}
	
	public class ImportContextBakImportOptionsEncryptionOptions
	{
		
		/// <summary>
		/// Path to the Certificate (.cer) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certPath")]
		public string CertPath { get; set; }
		
		/// <summary>
		/// Password that encrypts the private key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pvkPassword")]
		public string PvkPassword { get; set; }
		
		/// <summary>
		/// Path to the Certificate Private Key (.pvk) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pvkPath")]
		public string PvkPath { get; set; }
	}
	
	public class ImportContextCsvImportOptions
	{
		
		/// <summary>
		/// The columns to which CSV data is imported. If not specified, all columns of the database table are loaded with CSV data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public string[] Columns { get; set; }
		
		/// <summary>
		/// Specifies the character that should appear before a data character that needs to be escaped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="escapeCharacter")]
		public string EscapeCharacter { get; set; }
		
		/// <summary>
		/// Specifies the character that separates columns within each row (line) of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldsTerminatedBy")]
		public string FieldsTerminatedBy { get; set; }
		
		/// <summary>
		/// This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linesTerminatedBy")]
		public string LinesTerminatedBy { get; set; }
		
		/// <summary>
		/// Specifies the quoting character to be used when a data value is quoted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quoteCharacter")]
		public string QuoteCharacter { get; set; }
		
		/// <summary>
		/// The table to which CSV data is imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
	}
	
	/// <summary>
	/// Database instance clone request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesCloneRequest
	{
		
		/// <summary>
		/// Database instance clone context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloneContext")]
		public CloneContext CloneContext { get; set; }
	}
	
	/// <summary>
	/// Database demote primary instance request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesDemoteMasterRequest
	{
		
		/// <summary>
		/// Database instance demote primary instance context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="demoteMasterContext")]
		public DemoteMasterContext DemoteMasterContext { get; set; }
	}
	
	/// <summary>
	/// This request is used to demote an existing standalone instance to be a Cloud SQL read replica for an external database server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesDemoteRequest
	{
		
		/// <summary>
		/// This context is used to demote an existing standalone instance to be a Cloud SQL read replica for an external database server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="demoteContext")]
		public DemoteContext DemoteContext { get; set; }
	}
	
	/// <summary>
	/// Database instance export request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesExportRequest
	{
		
		/// <summary>
		/// Database instance export context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportContext")]
		public ExportContext ExportContext { get; set; }
	}
	
	/// <summary>
	/// Instance failover request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesFailoverRequest
	{
		
		/// <summary>
		/// Database instance failover context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverContext")]
		public FailoverContext FailoverContext { get; set; }
	}
	
	/// <summary>
	/// Database instance import request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesImportRequest
	{
		
		/// <summary>
		/// Database instance import context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importContext")]
		public ImportContext ImportContext { get; set; }
	}
	
	/// <summary>
	/// Database instances list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesListResponse
	{
		
		/// <summary>
		/// List of database instance resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DatabaseInstance[] Items { get; set; }
		
		/// <summary>
		/// This is always `sql#instancesList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of warnings that occurred while handling the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public ApiWarning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Instances ListServerCas response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesListServerCasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeVersion")]
		public string ActiveVersion { get; set; }
		
		/// <summary>
		/// List of server CA certificates for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certs")]
		public SslCert[] Certs { get; set; }
		
		/// <summary>
		/// This is always `sql#instancesListServerCas`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Database Instance reencrypt request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesReencryptRequest
	{
		
		/// <summary>
		/// Backup Reencryption Config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupReencryptionConfig")]
		public BackupReencryptionConfig BackupReencryptionConfig { get; set; }
	}
	
	/// <summary>
	/// Database instance restore backup request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesRestoreBackupRequest
	{
		
		/// <summary>
		/// Database instance restore from backup context. Backup context contains source instance id and project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restoreBackupContext")]
		public RestoreBackupContext RestoreBackupContext { get; set; }
	}
	
	/// <summary>
	/// Database instance restore from backup context. Backup context contains source instance id and project id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestoreBackupContext
	{
		
		/// <summary>
		/// The ID of the backup run to restore from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupRunId")]
		public string BackupRunId { get; set; }
		
		/// <summary>
		/// The ID of the instance that the backup was taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// This is always `sql#restoreBackupContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The full project ID of the source instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	/// <summary>
	/// Rotate Server CA request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesRotateServerCaRequest
	{
		
		/// <summary>
		/// Instance rotate server CA context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotateServerCaContext")]
		public RotateServerCaContext RotateServerCaContext { get; set; }
	}
	
	/// <summary>
	/// Instance rotate server CA context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RotateServerCaContext
	{
		
		/// <summary>
		/// This is always `sql#rotateServerCaContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The fingerprint of the next version to be rotated to. If left unspecified, will be rotated to the most recently added server CA version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextVersion")]
		public string NextVersion { get; set; }
	}
	
	/// <summary>
	/// Instance truncate log request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstancesTruncateLogRequest
	{
		
		/// <summary>
		/// Database Instance truncate log context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truncateLogContext")]
		public TruncateLogContext TruncateLogContext { get; set; }
	}
	
	/// <summary>
	/// Database Instance truncate log context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TruncateLogContext
	{
		
		/// <summary>
		/// This is always `sql#truncateLogContext`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The type of log to truncate. Valid values are `MYSQL_GENERAL_TABLE` and `MYSQL_SLOW_TABLE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public string LogType { get; set; }
	}
	
	/// <summary>
	/// MySQL-specific external server sync settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MySqlSyncConfig
	{
		
		/// <summary>
		/// Flags to use for the initial dump.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialSyncFlags")]
		public SyncFlags[] InitialSyncFlags { get; set; }
	}
	
	/// <summary>
	/// Initial sync flags for certain Cloud SQL APIs. Currently used for the MySQL external server initial dump.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncFlags
	{
		
		/// <summary>
		/// The name of the flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the flag. This field must be omitted if the flag doesn't take a value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An Operation resource. For successful operations that return an Operation resource, only the fields relevant to the operation are populated in the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// An Admin API warning message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiWarning")]
		public ApiWarning ApiWarning { get; set; }
		
		/// <summary>
		/// Backup context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupContext")]
		public BackupContext BackupContext { get; set; }
		
		/// <summary>
		/// The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Database instance operation errors list wrapper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public OperationErrors Error { get; set; }
		
		/// <summary>
		/// Database instance export context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportContext")]
		public ExportContext ExportContext { get; set; }
		
		/// <summary>
		/// Database instance import context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importContext")]
		public ImportContext ImportContext { get; set; }
		
		/// <summary>
		/// The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// This is always `sql#operation`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<OperationOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The URI of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The status of an operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OperationStatus> Status { get; set; }
		
		/// <summary>
		/// Name of the database instance related to this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetLink")]
		public string TargetLink { get; set; }
		
		/// <summary>
		/// The project ID of the target instance related to this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetProject")]
		public string TargetProject { get; set; }
		
		/// <summary>
		/// The email address of the user who initiated this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Database instance operation errors list wrapper.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationErrors
	{
		
		/// <summary>
		/// The list of errors encountered while processing this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public OperationError[] Errors { get; set; }
		
		/// <summary>
		/// This is always `sql#operationErrors`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTART = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKUP_VOLUME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_VOLUME = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTORE_VOLUME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INJECT_USER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLONE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REPLICA = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_REPLICA = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROMOTE_REPLICA = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_REPLICA = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_USER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_USER = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_USER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_DATABASE = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_DATABASE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_DATABASE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILOVER = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_BACKUP = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECREATE_REPLICA = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUNCATE_LOG = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEMOTE_MASTER = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE_PRIVATE_IP = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFER_MAINTENANCE = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_CLONE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESCHEDULE_MAINTENANCE = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_EXTERNAL_SYNC = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_CLEANUP = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_RESTART = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REENCRYPT = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCHOVER = 38,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_OPERATION_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 3,
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Operations list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationsListResponse
	{
		
		/// <summary>
		/// List of operation resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Operation[] Items { get; set; }
		
		/// <summary>
		/// This is always `sql#operationsList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Read-only password status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PasswordStatus
	{
		
		/// <summary>
		/// If true, user does not have login privileges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locked")]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		/// <summary>
		/// The expiration time of the current password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordExpirationTime")]
		public string PasswordExpirationTime { get; set; }
	}
	
	/// <summary>
	/// Perform disk shrink context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerformDiskShrinkContext
	{
		
		/// <summary>
		/// The target disk shrink size in GigaBytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSizeGb")]
		public string TargetSizeGb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reschedule
	{
		
		/// <summary>
		/// Required. The type of the reschedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rescheduleType")]
		public System.Nullable<RescheduleRescheduleType> RescheduleType { get; set; }
		
		/// <summary>
		/// Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleTime")]
		public string ScheduleTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RescheduleRescheduleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESCHEDULE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMMEDIATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_AVAILABLE_WINDOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIC_TIME = 3,
	}
	
	/// <summary>
	/// External primary instance migration setting error/warning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlExternalSyncSettingError
	{
		
		/// <summary>
		/// Additional information about the error encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Can be `sql#externalSyncSettingError` or `sql#externalSyncSettingWarning`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Identifies the specific error that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SqlExternalSyncSettingErrorType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SqlExternalSyncSettingErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BINLOG_NOT_ENABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE_DATABASE_VERSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICA_ALREADY_SETUP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_PRIVILEGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_MIGRATION_TYPE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PGLOGICAL_INSTALLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PGLOGICAL_NODE_ALREADY_EXISTS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_WAL_LEVEL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SHARED_PRELOAD_LIBRARY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_MAX_REPLICATION_SLOTS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_MAX_WAL_SENDERS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_MAX_WORKER_PROCESSES = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_EXTENSIONS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_RDS_LOGICAL_REPLICATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LOGGING_SETUP = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DB_PARAM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_GTID_MODE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_AGENT_NOT_RUNNING = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_TABLE_DEFINITION = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_DEFINER = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER_SERVERNAME_MISMATCH = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY_ALREADY_SETUP = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_BINLOG_FORMAT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BINLOG_RETENTION_SETTING = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_STORAGE_ENGINE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIMITED_SUPPORT_TABLES = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXISTING_DATA_IN_REPLICA = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_OPTIONAL_PRIVILEGES = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RISKY_BACKUP_ADMIN_PRIVILEGE = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_GCS_PERMISSIONS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_FILE_INFO = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_DATABASE_SETTINGS = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_INFILE_OFF = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TURN_ON_PITR_AFTER_PROMOTE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPATIBLE_DATABASE_MINOR_VERSION = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_MAX_SUBSCRIPTIONS = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNABLE_TO_VERIFY_DEFINERS = 39,
	}
	
	/// <summary>
	/// Instance get disk shrink config response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlInstancesGetDiskShrinkConfigResponse
	{
		
		/// <summary>
		/// This is always `sql#getDiskShrinkConfig`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Additional message to customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The minimum size to which a disk can be shrunk in GigaBytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimalTargetSizeGb")]
		public string MinimalTargetSizeGb { get; set; }
	}
	
	/// <summary>
	/// Instance get latest recovery time response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlInstancesGetLatestRecoveryTimeResponse
	{
		
		/// <summary>
		/// This is always `sql#getLatestRecoveryTime`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Timestamp, identifies the latest recovery time of the source instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestRecoveryTime")]
		public string LatestRecoveryTime { get; set; }
	}
	
	/// <summary>
	/// Reschedule options for maintenance windows.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlInstancesRescheduleMaintenanceRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="reschedule")]
		public Reschedule Reschedule { get; set; }
	}
	
	/// <summary>
	/// Instance reset replica size request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlInstancesResetReplicaSizeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlInstancesStartExternalSyncRequest
	{
		
		/// <summary>
		/// MySQL-specific external server sync settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mysqlSyncConfig")]
		public MySqlSyncConfig MysqlSyncConfig { get; set; }
		
		/// <summary>
		/// Whether to skip the verification step (VESS).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipVerification")]
		public System.Nullable<System.Boolean> SkipVerification { get; set; }
		
		/// <summary>
		/// External sync mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncMode")]
		public System.Nullable<SqlInstancesStartExternalSyncRequestSyncMode> SyncMode { get; set; }
		
		/// <summary>
		/// Optional. Parallel level for initial data sync. Currently only applicable for MySQL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncParallelLevel")]
		public System.Nullable<SqlInstancesStartExternalSyncRequestSyncParallelLevel> SyncParallelLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SqlInstancesStartExternalSyncRequestSyncMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_SYNC_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFLINE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SqlInstancesStartExternalSyncRequestSyncParallelLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlInstancesVerifyExternalSyncSettingsRequest
	{
		
		/// <summary>
		/// MySQL-specific external server sync settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mysqlSyncConfig")]
		public MySqlSyncConfig MysqlSyncConfig { get; set; }
		
		/// <summary>
		/// External sync mode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncMode")]
		public SqlInstancesStartExternalSyncRequestSyncMode SyncMode { get; set; }
		
		/// <summary>
		/// Flag to enable verifying connection only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyConnectionOnly")]
		public System.Nullable<System.Boolean> VerifyConnectionOnly { get; set; }
		
		/// <summary>
		/// Optional. Flag to verify settings required by replication setup only
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyReplicationOnly")]
		public System.Nullable<System.Boolean> VerifyReplicationOnly { get; set; }
	}
	
	/// <summary>
	/// Instance verify external sync settings response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlInstancesVerifyExternalSyncSettingsResponse
	{
		
		/// <summary>
		/// List of migration violations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public SqlExternalSyncSettingError[] Errors { get; set; }
		
		/// <summary>
		/// This is always `sql#migrationSettingErrorList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// List of migration warnings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public SqlExternalSyncSettingError[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Represents a Sql Server user on the Cloud SQL instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlServerUserDetails
	{
		
		/// <summary>
		/// If the user has been disabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// The server roles for this user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverRoles")]
		public string[] ServerRoles { get; set; }
	}
	
	/// <summary>
	/// SslCertDetail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertDetail
	{
		
		/// <summary>
		/// SslCerts Resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certInfo")]
		public SslCert CertInfo { get; set; }
		
		/// <summary>
		/// The private key for the client cert, in pem format. Keep private in order to protect your security.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certPrivateKey")]
		public string CertPrivateKey { get; set; }
	}
	
	/// <summary>
	/// SslCerts create ephemeral certificate request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertsCreateEphemeralRequest
	{
		
		/// <summary>
		/// Access token to include in the signed certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// PEM encoded public key to include in the signed certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_key")]
		public string Public_key { get; set; }
	}
	
	/// <summary>
	/// SslCerts insert request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertsInsertRequest
	{
		
		/// <summary>
		/// User supplied name. Must be a distinct name from the other certificates for this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
	}
	
	/// <summary>
	/// SslCert insert response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertsInsertResponse
	{
		
		/// <summary>
		/// SslCertDetail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCert")]
		public SslCertDetail ClientCert { get; set; }
		
		/// <summary>
		/// This is always `sql#sslCertsInsert`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// An Operation resource. For successful operations that return an Operation resource, only the fields relevant to the operation are populated in the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
		
		/// <summary>
		/// SslCerts Resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCaCert")]
		public SslCert ServerCaCert { get; set; }
	}
	
	/// <summary>
	/// SslCerts list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslCertsListResponse
	{
		
		/// <summary>
		/// List of client certificates for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SslCert[] Items { get; set; }
		
		/// <summary>
		/// This is always `sql#sslCertsList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A Google Cloud SQL service tier resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tier
	{
		
		/// <summary>
		/// The maximum disk size of this tier in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DiskQuota { get; set; }
		
		/// <summary>
		/// The maximum RAM usage of this tier in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RAM { get; set; }
		
		/// <summary>
		/// This is always `sql#tier`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The applicable regions for this tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string[] Region { get; set; }
		
		/// <summary>
		/// An identifier for the machine type, for example, `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier1 { get; set; }
	}
	
	/// <summary>
	/// Tiers list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TiersListResponse
	{
		
		/// <summary>
		/// List of tiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Tier[] Items { get; set; }
		
		/// <summary>
		/// This is always `sql#tiersList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// A Cloud SQL user resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Dual password status for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dualPasswordType")]
		public System.Nullable<UserDualPasswordType> DualPasswordType { get; set; }
		
		/// <summary>
		/// This field is deprecated and will be removed from a future version of the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// This is always `sql#user`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The password for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// User level password validation policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordPolicy")]
		public UserPasswordValidationPolicy PasswordPolicy { get; set; }
		
		/// <summary>
		/// The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// Represents a Sql Server user on the Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlserverUserDetails")]
		public SqlServerUserDetails SqlserverUserDetails { get; set; }
		
		/// <summary>
		/// The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UserType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserDualPasswordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUAL_PASSWORD_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_MODIFY_DUAL_PASSWORD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_DUAL_PASSWORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUAL_PASSWORD = 3,
	}
	
	/// <summary>
	/// User level password validation policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserPasswordValidationPolicy
	{
		
		/// <summary>
		/// Number of failed login attempts allowed before user get locked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedFailedAttempts")]
		public System.Nullable<System.Int32> AllowedFailedAttempts { get; set; }
		
		/// <summary>
		/// If true, failed login attempts check will be enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFailedAttemptsCheck")]
		public System.Nullable<System.Boolean> EnableFailedAttemptsCheck { get; set; }
		
		/// <summary>
		/// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePasswordVerification")]
		public System.Nullable<System.Boolean> EnablePasswordVerification { get; set; }
		
		/// <summary>
		/// Expiration duration after password is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordExpirationDuration")]
		public string PasswordExpirationDuration { get; set; }
		
		/// <summary>
		/// Read-only password status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PasswordStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILT_IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_IAM_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_IAM_SERVICE_ACCOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_IAM_GROUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_IAM_GROUP_USER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_IAM_GROUP_SERVICE_ACCOUNT = 5,
	}
	
	/// <summary>
	/// User list response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsersListResponse
	{
		
		/// <summary>
		/// List of user resources in the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public User[] Items { get; set; }
		
		/// <summary>
		/// This is always *sql#usersList*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Unused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all available database flags for Cloud SQL instances.
		/// Sql_flags_list sql/v1beta4/flags
		/// </summary>
		/// <param name="databaseVersion">Database type and version you want to retrieve flags for. By default, this method returns flags for all database types and versions.</param>
		/// <returns>Successful response</returns>
		public async Task<FlagsListResponse> Sql_flags_listAsync(string databaseVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/flags?databaseVersion=" + (databaseVersion==null? "" : System.Uri.EscapeDataString(databaseVersion));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FlagsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists instances under a given project.
		/// Sql_instances_list sql/v1beta4/projects/{project}/instances
		/// </summary>
		/// <param name="project">Project ID of the project for which to list Cloud SQL instances.</param>
		/// <param name="filter">A filter expression that filters resources listed in the response. The expression is in the form of field:value. For example, 'instanceType:CLOUD_SQL_INSTANCE'. Fields can be nested as needed as per their JSON representation, such as 'settings.userLabels.auto_start:true'. Multiple filter queries are space-separated. For example. 'state:RUNNABLE instanceType:CLOUD_SQL_INSTANCE'. By default, each expression is an AND expression. However, you can include AND and OR expressions explicitly.</param>
		/// <param name="maxResults">The maximum number of instances to return. The service may return fewer than this value. If unspecified, at most 500 instances are returned. The maximum value is 1000; values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <returns>Successful response</returns>
		public async Task<InstancesListResponse> Sql_instances_listAsync(string project, string filter, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InstancesListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new Cloud SQL instance.
		/// Sql_instances_insert sql/v1beta4/projects/{project}/instances
		/// </summary>
		/// <param name="project">Project ID of the project to which the newly created Cloud SQL instances should belong.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_insertAsync(string project, DatabaseInstance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a Cloud SQL instance.
		/// Sql_instances_delete sql/v1beta4/projects/{project}/instances/{instance}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance to be deleted.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_deleteAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a resource containing information about a Cloud SQL instance.
		/// Sql_instances_get sql/v1beta4/projects/{project}/instances/{instance}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<DatabaseInstance> Sql_instances_getAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabaseInstance>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Partially updates settings of a Cloud SQL instance by merging the request with the current configuration. This method supports patch semantics.
		/// Sql_instances_patch sql/v1beta4/projects/{project}/instances/{instance}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_patchAsync(string project, string instance, DatabaseInstance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates settings of a Cloud SQL instance. Using this operation might cause your instance to restart.
		/// Sql_instances_update sql/v1beta4/projects/{project}/instances/{instance}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_updateAsync(string project, string instance, DatabaseInstance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in.
		/// Sql_instances_addServerCa sql/v1beta4/projects/{project}/instances/{instance}/addServerCa
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_addServerCaAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/addServerCa";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all backup runs associated with the project or a given instance and configuration in the reverse chronological order of the backup initiation time.
		/// Sql_backupRuns_list sql/v1beta4/projects/{project}/instances/{instance}/backupRuns
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID, or "-" for all instances. This does not include the project ID.</param>
		/// <param name="maxResults">Maximum number of backup runs per response.</param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <returns>Successful response</returns>
		public async Task<BackupRunsListResponse> Sql_backupRuns_listAsync(string project, string instance, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/backupRuns&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BackupRunsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new backup run on demand.
		/// Sql_backupRuns_insert sql/v1beta4/projects/{project}/instances/{instance}/backupRuns
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_backupRuns_insertAsync(string project, string instance, BackupRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/backupRuns";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the backup taken by a backup run.
		/// Sql_backupRuns_delete sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <param name="id">The ID of the backup run to delete. To find a backup run ID, use the [list](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/backupRuns/list) method.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_backupRuns_deleteAsync(string project, string instance, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/backupRuns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a resource containing information about a backup run.
		/// Sql_backupRuns_get sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <param name="id">The ID of this backup run.</param>
		/// <returns>Successful response</returns>
		public async Task<BackupRun> Sql_backupRuns_getAsync(string project, string instance, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/backupRuns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BackupRun>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart.
		/// Sql_instances_clone sql/v1beta4/projects/{project}/instances/{instance}/clone
		/// </summary>
		/// <param name="project">Project ID of the source as well as the clone Cloud SQL instance.</param>
		/// <param name="instance">The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_cloneAsync(string project, string instance, InstancesCloneRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/clone";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves connect settings about a Cloud SQL instance.
		/// Sql_connect_get sql/v1beta4/projects/{project}/instances/{instance}/connectSettings
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <param name="readTime">Optional. Optional snapshot read timestamp to trade freshness for performance.</param>
		/// <returns>Successful response</returns>
		public async Task<ConnectSettings> Sql_connect_getAsync(string project, string instance, string readTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/connectSettings&readTime=" + (readTime==null? "" : System.Uri.EscapeDataString(readTime));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConnectSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
		/// Sql_sslCerts_createEphemeral sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral
		/// </summary>
		/// <param name="project">Project ID of the Cloud SQL project.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<SslCert> Sql_sslCerts_createEphemeralAsync(string project, string instance, SslCertsCreateEphemeralRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/createEphemeral";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCert>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists databases in the specified Cloud SQL instance.
		/// Sql_databases_list sql/v1beta4/projects/{project}/instances/{instance}/databases
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<DatabasesListResponse> Sql_databases_listAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/databases";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DatabasesListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Inserts a resource containing information about a database inside a Cloud SQL instance. **Note:** You can't modify the default character set and collation.
		/// Sql_databases_insert sql/v1beta4/projects/{project}/instances/{instance}/databases
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_databases_insertAsync(string project, string instance, Database requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/databases";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a database from a Cloud SQL instance.
		/// Sql_databases_delete sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <param name="database">Name of the database to be deleted in the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_databases_deleteAsync(string project, string instance, string database, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/databases/"+ (database==null? "" : System.Uri.EscapeDataString(database));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a resource containing information about a database inside a Cloud SQL instance.
		/// Sql_databases_get sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <param name="database">Name of the database in the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Database> Sql_databases_getAsync(string project, string instance, string database, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/databases/"+ (database==null? "" : System.Uri.EscapeDataString(database));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Database>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Partially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics.
		/// Sql_databases_patch sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <param name="database">Name of the database to be updated in the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_databases_patchAsync(string project, string instance, string database, Database requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/databases/"+ (database==null? "" : System.Uri.EscapeDataString(database));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a resource containing information about a database inside a Cloud SQL instance.
		/// Sql_databases_update sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <param name="database">Name of the database to be updated in the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_databases_updateAsync(string project, string instance, string database, Database requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/databases/"+ (database==null? "" : System.Uri.EscapeDataString(database));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Demotes an existing standalone instance to be a Cloud SQL read replica for an external database server.
		/// Sql_instances_demote sql/v1beta4/projects/{project}/instances/{instance}/demote
		/// </summary>
		/// <param name="project">Required. The project ID of the project that contains the instance.</param>
		/// <param name="instance">Required. The name of the Cloud SQL instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_demoteAsync(string project, string instance, InstancesDemoteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/demote";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Demotes the stand-alone instance to be a Cloud SQL read replica for an external database server.
		/// Sql_instances_demoteMaster sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster
		/// </summary>
		/// <param name="project">ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_demoteMasterAsync(string project, string instance, InstancesDemoteMasterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/demoteMaster";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
		/// Sql_instances_export sql/v1beta4/projects/{project}/instances/{instance}/export
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance to be exported.</param>
		/// <param name="instance">The Cloud SQL instance ID. This doesn't include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_exportAsync(string project, string instance, InstancesExportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/export";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Initiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only), this causes the instance to failover to its failover replica instance.
		/// Sql_instances_failover sql/v1beta4/projects/{project}/instances/{instance}/failover
		/// </summary>
		/// <param name="project">ID of the project that contains the read replica.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_failoverAsync(string project, string instance, InstancesFailoverRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/failover";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Disk Shrink Config for a given instance.
		/// Sql_projects_instances_getDiskShrinkConfig sql/v1beta4/projects/{project}/instances/{instance}/getDiskShrinkConfig
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<SqlInstancesGetDiskShrinkConfigResponse> Sql_projects_instances_getDiskShrinkConfigAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/getDiskShrinkConfig";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlInstancesGetDiskShrinkConfigResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Latest Recovery Time for a given instance.
		/// Sql_projects_instances_getLatestRecoveryTime sql/v1beta4/projects/{project}/instances/{instance}/getLatestRecoveryTime
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<SqlInstancesGetLatestRecoveryTimeResponse> Sql_projects_instances_getLatestRecoveryTimeAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/getLatestRecoveryTime";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlInstancesGetLatestRecoveryTimeResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage.
		/// Sql_instances_import sql/v1beta4/projects/{project}/instances/{instance}/import
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_importAsync(string project, string instance, InstancesImportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/import";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out.
		/// Sql_instances_listServerCas sql/v1beta4/projects/{project}/instances/{instance}/listServerCas
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<InstancesListServerCasResponse> Sql_instances_listServerCasAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/listServerCas";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InstancesListServerCasResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Perform Disk Shrink on primary instance.
		/// Sql_projects_instances_performDiskShrink sql/v1beta4/projects/{project}/instances/{instance}/performDiskShrink
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_projects_instances_performDiskShrinkAsync(string project, string instance, PerformDiskShrinkContext requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/performDiskShrink";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Promotes the read replica instance to be a stand-alone Cloud SQL instance. Using this operation might cause your instance to restart.
		/// Sql_instances_promoteReplica sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica
		/// </summary>
		/// <param name="project">ID of the project that contains the read replica.</param>
		/// <param name="instance">Cloud SQL read replica instance name.</param>
		/// <param name="failover">Set to true if the promote operation should attempt to re-add the original primary as a replica when it comes back online. Otherwise, if this value is false or not set, the original primary will be a standalone instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_promoteReplicaAsync(string project, string instance, bool failover, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/promoteReplica&failover="+failover;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reencrypt CMEK instance with latest key version.
		/// Sql_instances_reencrypt sql/v1beta4/projects/{project}/instances/{instance}/reencrypt
		/// </summary>
		/// <param name="project">ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_reencryptAsync(string project, string instance, InstancesReencryptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/reencrypt";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reschedules the maintenance on the given instance.
		/// Sql_projects_instances_rescheduleMaintenance sql/v1beta4/projects/{project}/instances/{instance}/rescheduleMaintenance
		/// </summary>
		/// <param name="project">ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_projects_instances_rescheduleMaintenanceAsync(string project, string instance, SqlInstancesRescheduleMaintenanceRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/rescheduleMaintenance";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reset Replica Size to primary instance disk size.
		/// Sql_projects_instances_resetReplicaSize sql/v1beta4/projects/{project}/instances/{instance}/resetReplicaSize
		/// </summary>
		/// <param name="project">ID of the project that contains the read replica.</param>
		/// <param name="instance">Cloud SQL read replica instance name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_projects_instances_resetReplicaSizeAsync(string project, string instance, SqlInstancesResetReplicaSizeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/resetReplicaSize";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes all client certificates and generates a new server SSL certificate for the instance.
		/// Sql_instances_resetSslConfig sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_resetSslConfigAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/resetSslConfig";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Restarts a Cloud SQL instance.
		/// Sql_instances_restart sql/v1beta4/projects/{project}/instances/{instance}/restart
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance to be restarted.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_restartAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/restart";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Restores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart.
		/// Sql_instances_restoreBackup sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_restoreBackupAsync(string project, string instance, InstancesRestoreBackupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/restoreBackup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method.
		/// Sql_instances_rotateServerCa sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_rotateServerCaAsync(string project, string instance, InstancesRotateServerCaRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/rotateServerCa";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all of the current SSL certificates for the instance.
		/// Sql_sslCerts_list sql/v1beta4/projects/{project}/instances/{instance}/sslCerts
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<SslCertsListResponse> Sql_sslCerts_listAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/sslCerts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCertsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
		/// Sql_sslCerts_insert sql/v1beta4/projects/{project}/instances/{instance}/sslCerts
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<SslCertsInsertResponse> Sql_sslCerts_insertAsync(string project, string instance, SslCertsInsertRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/sslCerts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCertsInsertResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted.
		/// Sql_sslCerts_delete sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <param name="sha1Fingerprint">Sha1 FingerPrint.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_sslCerts_deleteAsync(string project, string instance, string sha1Fingerprint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/sslCerts/"+ (sha1Fingerprint==null? "" : System.Uri.EscapeDataString(sha1Fingerprint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation.
		/// Sql_sslCerts_get sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <param name="sha1Fingerprint">Sha1 FingerPrint.</param>
		/// <returns>Successful response</returns>
		public async Task<SslCert> Sql_sslCerts_getAsync(string project, string instance, string sha1Fingerprint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/sslCerts/"+ (sha1Fingerprint==null? "" : System.Uri.EscapeDataString(sha1Fingerprint));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SslCert>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Start External primary instance migration.
		/// Sql_projects_instances_startExternalSync sql/v1beta4/projects/{project}/instances/{instance}/startExternalSync
		/// </summary>
		/// <param name="project">ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_projects_instances_startExternalSyncAsync(string project, string instance, SqlInstancesStartExternalSyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/startExternalSync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts the replication in the read replica instance.
		/// Sql_instances_startReplica sql/v1beta4/projects/{project}/instances/{instance}/startReplica
		/// </summary>
		/// <param name="project">ID of the project that contains the read replica.</param>
		/// <param name="instance">Cloud SQL read replica instance name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_startReplicaAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/startReplica";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stops the replication in the read replica instance.
		/// Sql_instances_stopReplica sql/v1beta4/projects/{project}/instances/{instance}/stopReplica
		/// </summary>
		/// <param name="project">ID of the project that contains the read replica.</param>
		/// <param name="instance">Cloud SQL read replica instance name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_stopReplicaAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/stopReplica";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Switches over from the primary instance to a replica instance.
		/// Sql_instances_switchover sql/v1beta4/projects/{project}/instances/{instance}/switchover
		/// </summary>
		/// <param name="project">ID of the project that contains the replica.</param>
		/// <param name="instance">Cloud SQL read replica instance name.</param>
		/// <param name="dbTimeout">Optional. (MySQL only) Cloud SQL instance operations timeout, which is a sum of all database operations. Default value is 10 minutes and can be modified to a maximum value of 24 hours.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_switchoverAsync(string project, string instance, string dbTimeout, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/switchover&dbTimeout=" + (dbTimeout==null? "" : System.Uri.EscapeDataString(dbTimeout));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Truncate MySQL general and slow query log tables MySQL only.
		/// Sql_instances_truncateLog sql/v1beta4/projects/{project}/instances/{instance}/truncateLog
		/// </summary>
		/// <param name="project">Project ID of the Cloud SQL project.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_instances_truncateLogAsync(string project, string instance, InstancesTruncateLogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/truncateLog";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a user from a Cloud SQL instance.
		/// Sql_users_delete sql/v1beta4/projects/{project}/instances/{instance}/users
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <param name="host">Host of the user in the instance.</param>
		/// <param name="name">Name of the user in the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_users_deleteAsync(string project, string instance, string host, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/users&host=" + (host==null? "" : System.Uri.EscapeDataString(host))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists users in the specified Cloud SQL instance.
		/// Sql_users_list sql/v1beta4/projects/{project}/instances/{instance}/users
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UsersListResponse> Sql_users_listAsync(string project, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/users";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UsersListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new user in a Cloud SQL instance.
		/// Sql_users_insert sql/v1beta4/projects/{project}/instances/{instance}/users
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_users_insertAsync(string project, string instance, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/users";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing user in a Cloud SQL instance.
		/// Sql_users_update sql/v1beta4/projects/{project}/instances/{instance}/users
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <param name="host">Optional. Host of the user in the instance.</param>
		/// <param name="name">Name of the user in the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_users_updateAsync(string project, string instance, string host, string name, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/users&host=" + (host==null? "" : System.Uri.EscapeDataString(host))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a resource containing information about a user.
		/// Sql_users_get sql/v1beta4/projects/{project}/instances/{instance}/users/{name}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Database instance ID. This does not include the project ID.</param>
		/// <param name="name">User of the instance.</param>
		/// <param name="host">Host of a user of the instance.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Sql_users_getAsync(string project, string instance, string name, string host, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&host=" + (host==null? "" : System.Uri.EscapeDataString(host));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verify External primary instance external sync settings.
		/// Sql_projects_instances_verifyExternalSyncSettings sql/v1beta4/projects/{project}/instances/{instance}/verifyExternalSyncSettings
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<SqlInstancesVerifyExternalSyncSettingsResponse> Sql_projects_instances_verifyExternalSyncSettingsAsync(string project, string instance, SqlInstancesVerifyExternalSyncSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/verifyExternalSyncSettings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlInstancesVerifyExternalSyncSettingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
		/// Sql_connect_generateEphemeral sql/v1beta4/projects/{project}/instances/{instance}:generateEphemeralCert
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateEphemeralCertResponse> Sql_connect_generateEphemeralAsync(string project, string instance, GenerateEphemeralCertRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/instances/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+":generateEphemeralCert";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GenerateEphemeralCertResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all instance operations that have been performed on the given Cloud SQL instance in the reverse chronological order of the start time.
		/// Sql_operations_list sql/v1beta4/projects/{project}/operations
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="instance">Cloud SQL instance ID. This does not include the project ID.</param>
		/// <param name="maxResults">Maximum number of operations per response.</param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <returns>Successful response</returns>
		public async Task<OperationsListResponse> Sql_operations_listAsync(string project, string instance, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/operations&instance=" + (instance==null? "" : System.Uri.EscapeDataString(instance))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an instance operation that has been performed on an instance.
		/// Sql_operations_get sql/v1beta4/projects/{project}/operations/{operation}
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="operation">Instance operation ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Sql_operations_getAsync(string project, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/operations/"+ (operation==null? "" : System.Uri.EscapeDataString(operation));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels an instance operation that has been performed on an instance.
		/// Sql_operations_cancel sql/v1beta4/projects/{project}/operations/{operation}/cancel
		/// </summary>
		/// <param name="project">Project ID of the project that contains the instance.</param>
		/// <param name="operation">Instance operation ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Sql_operations_cancelAsync(string project, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/operations/"+ (operation==null? "" : System.Uri.EscapeDataString(operation))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all available machine types (tiers) for Cloud SQL, for example, `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).
		/// Sql_tiers_list sql/v1beta4/projects/{project}/tiers
		/// </summary>
		/// <param name="project">Project ID of the project for which to list tiers.</param>
		/// <returns>Successful response</returns>
		public async Task<TiersListResponse> Sql_tiers_listAsync(string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sql/v1beta4/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/tiers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TiersListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
