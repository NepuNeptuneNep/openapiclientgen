//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schema1
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all Chargestations
		/// GetChargeStations v1/chargestations
		/// </summary>
		/// <param name="organization">Filter by Org. Id</param>
		/// <param name="location">Filter by Location Id</param>
		/// <param name="online">Filter by Online Status</param>
		/// <param name="active">Chargestations that have been activated/deactivated by the admin</param>
		/// <param name="_public">Chargestations that are public</param>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_location">Populate location</param>
		/// <param name="include_evses">Populate evses</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>An array of chargestation objects</returns>
		public async Task GetChargeStationsAsync(
					string organization, 
					string location, 
					bool online, 
					bool active, 
					bool _public, 
					int paginate_limit, 
					string paginate_page, 
					bool paginate_enabled, 
					string sort_by, 
					GetChargeStationsSort_order sort_order, 
					System.DateTimeOffset createdAt_gte, 
					System.DateTimeOffset createdAt_lte, 
					System.DateTimeOffset updatedAt_gte, 
					System.DateTimeOffset updatedAt_lte, 
					bool include_location, 
					bool include_evses, 
					bool include_organization, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/chargestations?organization=" + (organization==null? "" : System.Uri.EscapeDataString(organization))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&online="+online+"&active="+active+"&public="+_public+"&paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_location="+include_location+"&include_evses="+include_evses+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new charge station
		/// PostChargeStations v1/chargestations
		/// </summary>
		/// <param name="requestBody">Include charge station properties to create here</param>
		public async Task PostChargeStationsAsync(Schema1 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/chargestations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to delete a charge station
		/// DeleteChargeStation v1/chargestations/{id}
		/// </summary>
		/// <param name="id">The charge station id that needs to be deleted</param>
		/// <returns>Returns the deleted chargestion object</returns>
		public async Task DeleteChargeStationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/chargestations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a single charge station's data
		/// GetChargeStation v1/chargestations/{id}
		/// </summary>
		/// <param name="id">The charge station id that needs to be fetched</param>
		/// <param name="include_location">Populate location</param>
		/// <param name="include_evses">Populate evses</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns a chargestion object</returns>
		public async Task GetChargeStationAsync(string id, bool include_location, bool include_evses, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/chargestations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_location="+include_location+"&include_evses="+include_evses+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a charge station's data
		/// PatchChargeStation v1/chargestations/{id}
		/// </summary>
		/// <param name="id">ID of charge station that needs to be updated</param>
		/// <param name="requestBody">Include charge station properties to update here</param>
		/// <returns>Returns the updated chargestion object</returns>
		public async Task<PatchChargeStationReturn> PatchChargeStationAsync(string id, Schema1 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/chargestations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PatchChargeStationReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List connectors for a chargestation
		/// GetChargeStationConnectors v1/chargestations/{id}/connectors
		/// </summary>
		/// <param name="id">chargeStation id</param>
		/// <param name="include_evse">Populate evse</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns an array of connector objects</returns>
		public async Task GetChargeStationConnectorsAsync(string id, bool include_evse, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/chargestations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/connectors&include_evse="+include_evse+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Commands data
		/// GetCommands v1/commands
		/// </summary>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_chargestation">Populate chargestation</param>
		/// <param name="include_driver">Populate driver</param>
		/// <param name="include_transaction">Populate transaction</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Success</returns>
		public async Task GetCommandsAsync(int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_chargestation, bool include_driver, bool include_transaction, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands?paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_chargestation="+include_chargestation+"&include_driver="+include_driver+"&include_transaction="+include_transaction+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request a delete an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
		/// Cancelreservation v1/commands/cancelreservation
		/// </summary>
		public async Task CancelreservationAsync(CancelreservationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/cancelreservation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a smart charging schedule
		/// Deletechargingschedule v1/commands/chargingschedule
		/// </summary>
		public async Task DeletechargingscheduleAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/chargingschedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Set one of charging power or current of a specific chargestation connector
		/// Setchargingschedule v1/commands/chargingschedule
		/// </summary>
		public async Task SetchargingscheduleAsync(object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/chargingschedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request a remote start command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
		/// Remotestart v1/commands/remotestart
		/// </summary>
		public async Task RemotestartAsync(RemotestartPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/remotestart";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request a remote stop command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
		/// Remotestop v1/commands/remotestop
		/// </summary>
		/// <param name="requestBody">Remote stop transaction info here.</param>
		public async Task RemotestopAsync(RemotestopPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/remotestop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request a reserve command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
		/// Reserve v1/commands/reserve
		/// </summary>
		public async Task ReserveAsync(ReservePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/reserve";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request a reset command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
		/// Reset v1/commands/reset
		/// </summary>
		public async Task ResetAsync(ResetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/reset";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request an unlock command for a connector. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
		/// Unlockconnector v1/commands/unlockconnector
		/// </summary>
		public async Task UnlockconnectorAsync(UnlockconnectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/unlockconnector";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a charge station's config variables
		/// GetVariables v1/commands/{id}/variables
		/// </summary>
		/// <param name="id">The chargestation id</param>
		/// <returns>Returns Cs configurations array</returns>
		public async Task GetVariablesAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/variables";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update config variables for a chargestation
		/// PatchChargeStationVariable v1/commands/{id}/variables
		/// </summary>
		/// <param name="id">ID of charge station</param>
		/// <param name="requestBody">Charge Station Variable to set</param>
		public async Task PatchChargeStationVariableAsync(string id, PatchChargeStationVariablePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/commands/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/variables";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Configurations data
		/// GetConfigurations v1/configurations
		/// </summary>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <returns>Success</returns>
		public async Task GetConfigurationsAsync(int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations?paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create connector with parameters
		/// PostConfigurations v1/configurations
		/// </summary>
		/// <param name="requestBody">Include Configuration properties to create here</param>
		public async Task PostConfigurationsAsync(PostConfigurationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get one Configuration data
		/// GetConfiguration v1/configurations/{id}
		/// </summary>
		/// <param name="id">ID of Configuration that needs to be fetched</param>
		/// <returns>Success</returns>
		public async Task GetConfigurationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configurations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List connectors
		/// GetConnectors v1/connectors
		/// </summary>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_evse">Populate evse</param>
		/// <param name="include_organization">Populate organization</param>
		/// <param name="include_rate">Populate rate</param>
		/// <returns>Returns an array of connector objects</returns>
		public async Task GetConnectorsAsync(int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_evse, bool include_organization, bool include_rate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/connectors?paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_evse="+include_evse+"&include_organization="+include_organization+"&include_rate="+include_rate;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new connector
		/// PostConnectors v1/connectors
		/// </summary>
		/// <param name="requestBody">Include Connector properties to create here</param>
		/// <returns>Returns the new connector object</returns>
		public async Task<PostConnectorsReturn> PostConnectorsAsync(PostConnectorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/connectors";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PostConnectorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a connector
		/// DeleteConnector v1/connectors/{id}
		/// </summary>
		/// <param name="id">The connector id that needs to be deleted</param>
		/// <returns>Returns the deleted connector object</returns>
		public async Task DeleteConnectorAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/connectors/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a connector
		/// GetConnector v1/connectors/{id}
		/// </summary>
		/// <param name="id">ID of connector that needs to be fetched</param>
		/// <param name="include_evse">Populate evse</param>
		/// <param name="include_organization">Populate organization</param>
		/// <param name="include_rate">Populate rate</param>
		/// <returns>Returns a connector object</returns>
		public async Task GetConnectorAsync(string id, bool include_evse, bool include_organization, bool include_rate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/connectors/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_evse="+include_evse+"&include_organization="+include_organization+"&include_rate="+include_rate;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a connector's data
		/// PatchConnector v1/connectors/{id}
		/// </summary>
		/// <param name="id">ID of connector that needs to be updated</param>
		/// <param name="requestBody">Include connector properties to update here</param>
		public async Task PatchConnectorAsync(string id, PatchConnectorPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/connectors/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all drivers
		/// GetDrivers v1/drivers
		/// </summary>
		/// <param name="active">Get a list of active drivers</param>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_tokens">Populate tokens</param>
		/// <param name="include_group">Populate group</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns a list of driver objects</returns>
		public async Task<GetDriversReturn> GetDriversAsync(bool active, int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_tokens, bool include_group, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/drivers?active="+active+"&paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_tokens="+include_tokens+"&include_group="+include_group+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDriversReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new driver
		/// PostDrivers v1/drivers
		/// </summary>
		/// <param name="requestBody">Include driver properties to create here</param>
		/// <returns>Returns the newly created driver object</returns>
		public async Task<PostDriversReturn> PostDriversAsync(PostDriversPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/drivers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PostDriversReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a driver
		/// DeleteDriver v1/drivers/{id}
		/// </summary>
		/// <param name="id">The driver id that needs to be deleted</param>
		/// <returns>Returns the deleted driver object</returns>
		public async Task DeleteDriverAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/drivers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a driver's data
		/// GetDriver v1/drivers/{id}
		/// </summary>
		/// <param name="id">The driver id that needs to be fetched</param>
		/// <param name="include_tokens">Populate tokens</param>
		/// <param name="include_group">Populate group</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns a driver object</returns>
		public async Task GetDriverAsync(string id, bool include_tokens, bool include_group, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/drivers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_tokens="+include_tokens+"&include_group="+include_group+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a driver's data
		/// PatchDriver v1/drivers/{id}
		/// </summary>
		/// <param name="id">ID of driver that needs to be updated</param>
		/// <param name="requestBody">Include driver properties to create here</param>
		/// <returns>Returns the updated driver object</returns>
		public async Task<PatchDriverReturn> PatchDriverAsync(string id, PatchDriverPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/drivers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PatchDriverReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a location
		/// DeleteLocation v1/location/{id}
		/// </summary>
		/// <param name="id">The location id that needs to be deleted</param>
		/// <returns>Returns the deleted location object</returns>
		public async Task DeleteLocationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/location/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a location's data
		/// GetLocation v1/location/{id}
		/// </summary>
		/// <param name="id">The location id that needs to be fetched</param>
		/// <param name="include_chargestations">Populate chargestations</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns a location object</returns>
		public async Task GetLocationAsync(string id, bool include_chargestations, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/location/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_chargestations="+include_chargestations+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a location's data
		/// PatchLocation v1/location/{id}
		/// </summary>
		/// <param name="id">ID of location that needs to be updated</param>
		/// <param name="requestBody">Include location properties to create here</param>
		/// <returns>Returns the updated location object</returns>
		public async Task<PatchLocationReturn> PatchLocationAsync(string id, PatchLocationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/location/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PatchLocationReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Locations data
		/// GetLocations v1/locations
		/// </summary>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Success</returns>
		public async Task GetLocationsAsync(int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/locations?paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new location
		/// PostLocations v1/locations
		/// </summary>
		/// <param name="requestBody">Include location properties to create here</param>
		/// <returns>Returns the newly created location object</returns>
		public async Task<PostLocationsReturn> PostLocationsAsync(PostLocationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/locations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PostLocationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an array of all Organizations
		/// GetOrganizations v1/organizations
		/// </summary>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_locations">Populate locations</param>
		/// <returns>Returns an array of Organization Objects</returns>
		public async Task GetOrganizationsAsync(int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_locations, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations?paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_locations="+include_locations;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get one organization's data by id
		/// GetOrganization v1/organizations/{id}
		/// </summary>
		/// <param name="id">ID of organization that needs to be fetched</param>
		/// <param name="include_locations">Populate locations</param>
		/// <returns>Returns an Organization Object</returns>
		public async Task GetOrganizationAsync(string id, bool include_locations, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_locations="+include_locations;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an organization's data
		/// PatchOrganization v1/organizations/{id}
		/// </summary>
		/// <param name="id">ID of organization that needs to be updated</param>
		/// <param name="requestBody">Include organization properties to create here</param>
		public async Task PatchOrganizationAsync(string id, PatchOrganizationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request a Websockets handshake
		/// GetRealtime v1/realtime
		/// </summary>
		public async Task GetRealtimeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/realtime";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Reservations data
		/// GetReservations v1/reservations
		/// </summary>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_chargestation">Populate chargestation</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Success</returns>
		public async Task GetReservationsAsync(int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_chargestation, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reservations?paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_chargestation="+include_chargestation+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get one reservation data
		/// GetReservation v1/reservations/{id}
		/// </summary>
		/// <param name="id">ID of the reservation that needs to be fetched</param>
		/// <param name="include_chargestation">Populate chargestation</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Success</returns>
		public async Task GetReservationAsync(string id, bool include_chargestation, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reservations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_chargestation="+include_chargestation+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to request a update an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
		/// Updatereservation v1/reservations/{id}
		/// </summary>
		/// <param name="id">ID of the reservation that needs to be fetched</param>
		public async Task UpdatereservationAsync(string id, UpdatereservationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reservations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List tokens
		/// GetTokens v1/tokens
		/// </summary>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_driver">Populate driver</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns an array of token objects</returns>
		public async Task<GetTokensReturn> GetTokensAsync(int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_driver, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tokens?paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_driver="+include_driver+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTokensReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new token
		/// PostTokens v1/tokens
		/// </summary>
		/// <param name="requestBody">Include token properties to create here</param>
		public async Task PostTokensAsync(PostTokensPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tokens";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Use to delete a token
		/// DeleteToken v1/tokens/{id}
		/// </summary>
		/// <param name="id">The token id that needs to be deleted</param>
		/// <returns>Returns the deleted token object</returns>
		public async Task DeleteTokenAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tokens/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a single token's data
		/// GetToken v1/tokens/{id}
		/// </summary>
		/// <param name="id">The token id that needs to be fetched</param>
		/// <param name="include_driver">Populate driver</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns a token object</returns>
		public async Task GetTokenAsync(string id, bool include_driver, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tokens/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_driver="+include_driver+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a token
		/// PatchToken v1/tokens/{id}
		/// </summary>
		/// <param name="id">ID of token that needs to be updated</param>
		/// <param name="requestBody">Include token properties to create here</param>
		public async Task PatchTokenAsync(string id, PatchTokenPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tokens/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of transactions
		/// GetTransactions v1/transactions
		/// </summary>
		/// <param name="status">Started to get only active transactions</param>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_chargestation">Populate chargestation</param>
		/// <param name="include_evse">Populate evse</param>
		/// <param name="include_connector">Populate connector</param>
		/// <param name="include_driver">Populate driver</param>
		/// <param name="include_token">Populate token</param>
		/// <param name="include_reservation">Populate reservation</param>
		/// <param name="include_organization">Populate organization</param>
		/// <param name="include_rate">Populate rate</param>
		/// <returns>Returns an array of transaction objects</returns>
		public async Task<GetTransactionsReturn> GetTransactionsAsync(
					GetTransactionsStatus status, 
					int paginate_limit, 
					string paginate_page, 
					bool paginate_enabled, 
					string sort_by, 
					GetChargeStationsSort_order sort_order, 
					System.DateTimeOffset createdAt_gte, 
					System.DateTimeOffset createdAt_lte, 
					System.DateTimeOffset updatedAt_gte, 
					System.DateTimeOffset updatedAt_lte, 
					bool include_chargestation, 
					bool include_evse, 
					bool include_connector, 
					bool include_driver, 
					bool include_token, 
					bool include_reservation, 
					bool include_organization, 
					bool include_rate, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/transactions?status=" + status+"&paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_chargestation="+include_chargestation+"&include_evse="+include_evse+"&include_connector="+include_connector+"&include_driver="+include_driver+"&include_token="+include_token+"&include_reservation="+include_reservation+"&include_organization="+include_organization+"&include_rate="+include_rate;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTransactionsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific transaction
		/// GetTransaction v1/transactions/{id}
		/// </summary>
		/// <param name="id">The transaction id that needs to be fetched</param>
		/// <param name="include_chargestation">Populate chargestation</param>
		/// <param name="include_evse">Populate evse</param>
		/// <param name="include_connector">Populate connector</param>
		/// <param name="include_driver">Populate driver</param>
		/// <param name="include_token">Populate token</param>
		/// <param name="include_reservation">Populate reservation</param>
		/// <param name="include_organization">Populate organization</param>
		/// <param name="include_rate">Populate rate</param>
		/// <returns>Returns a transaction object</returns>
		public async Task GetTransactionAsync(string id, bool include_chargestation, bool include_evse, bool include_connector, bool include_driver, bool include_token, bool include_reservation, bool include_organization, bool include_rate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/transactions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_chargestation="+include_chargestation+"&include_evse="+include_evse+"&include_connector="+include_connector+"&include_driver="+include_driver+"&include_token="+include_token+"&include_reservation="+include_reservation+"&include_organization="+include_organization+"&include_rate="+include_rate;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific transaction's cost
		/// GetTransactionCost v1/transactions/{id}/cost
		/// </summary>
		/// <param name="id">The transaction id that needs to be fetched</param>
		/// <returns>Returns a transaction's cost object</returns>
		public async Task GetTransactionCostAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/transactions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/cost";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all vehicles
		/// GetVehicles v1/vehicles
		/// </summary>
		/// <param name="active">Get a list of active vehicles</param>
		/// <param name="paginate_limit">Number of results per page
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="paginate_page">The queried page index</param>
		/// <param name="paginate_enabled">Enable pagination</param>
		/// <param name="sort_by">Sort data by this key</param>
		/// <param name="sort_order">asc to sort ascending (default is desc - descending)</param>
		/// <param name="createdAt_gte">Date as ISO String</param>
		/// <param name="createdAt_lte">Date as ISO String</param>
		/// <param name="updatedAt_gte">Date as ISO String</param>
		/// <param name="updatedAt_lte">Date as ISO String</param>
		/// <param name="include_driver">Populate driver</param>
		/// <param name="include_token">Populate token</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns a list of vehicle objects</returns>
		public async Task<GetVehiclesReturn> GetVehiclesAsync(bool active, int paginate_limit, string paginate_page, bool paginate_enabled, string sort_by, GetChargeStationsSort_order sort_order, System.DateTimeOffset createdAt_gte, System.DateTimeOffset createdAt_lte, System.DateTimeOffset updatedAt_gte, System.DateTimeOffset updatedAt_lte, bool include_driver, bool include_token, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vehicles?active="+active+"&paginate_limit="+paginate_limit+"&paginate_page=" + (paginate_page==null? "" : System.Uri.EscapeDataString(paginate_page))+"&paginate_enabled="+paginate_enabled+"&sort_by=" + (sort_by==null? "" : System.Uri.EscapeDataString(sort_by))+"&sort_order=" + sort_order+"&createdAt[$gte]=" + createdAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdAt[$lte]=" + createdAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$gte]=" + updatedAt_gte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&updatedAt[$lte]=" + updatedAt_lte.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&include_driver="+include_driver+"&include_token="+include_token+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetVehiclesReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a vehicle's data
		/// GetVehicle v1/vehicles/{id}
		/// </summary>
		/// <param name="id">The vehicule id that needs to be fetched</param>
		/// <param name="include_driver">Populate driver</param>
		/// <param name="include_token">Populate token</param>
		/// <param name="include_organization">Populate organization</param>
		/// <returns>Returns a vehicle object</returns>
		public async Task GetVehicleAsync(string id, bool include_driver, bool include_token, bool include_organization, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vehicles/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&include_driver="+include_driver+"&include_token="+include_token+"&include_organization="+include_organization;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a vehicle's battery
		/// GetVehicleBattery v1/vehicles/{id}/battery
		/// </summary>
		/// <param name="id">The vehicle id that needs to be fetched</param>
		/// <returns>Returns a vehicle object</returns>
		public async Task GetVehicleBatteryAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vehicles/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/battery";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a vehicle's charge
		/// GetVehicleCharge v1/vehicles/{id}/charge
		/// </summary>
		/// <param name="id">The vehicle id that needs to be fetched</param>
		/// <returns>Returns a vehicle object</returns>
		public async Task GetVehicleChargeAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vehicles/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/charge";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Change charge
		/// PostCharge v1/vehicles/{id}/charge
		/// </summary>
		/// <param name="id">The vehicle id that needs to be fetched</param>
		/// <param name="requestBody">Include command properties to send here</param>
		/// <returns>Returns the status of the command</returns>
		public async Task<PostChargeReturn> PostChargeAsync(string id, PostChargePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vehicles/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/charge";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PostChargeReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a vehicle's location
		/// GetVehicleLocation v1/vehicles/{id}/location
		/// </summary>
		/// <param name="id">The vehicle id that needs to be fetched</param>
		/// <returns>Returns a vehicle object</returns>
		public async Task GetVehicleLocationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vehicles/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/location";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a vehicle's odometer
		/// GetVehicleOdometer v1/vehicles/{id}/odometer
		/// </summary>
		/// <param name="id">The vehicle id that needs to be fetched</param>
		/// <returns>Returns a vehicle object</returns>
		public async Task GetVehicleOdometerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vehicles/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/odometer";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum GetChargeStationsSort_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 1,
	}
	
	public class PatchChargeStationReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public class CancelreservationPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="reservation")]
		public string Reservation { get; set; }
	}
	
	public class RemotestartPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargestation")]
		public string Chargestation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connector")]
		public string Connector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="driver")]
		public string Driver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	public class RemotestopPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargestation")]
		public string Chargestation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="driver")]
		public string Driver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	public class ReservePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargestation")]
		public string Chargestation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connector")]
		public string Connector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="driver")]
		public string Driver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	public class ResetPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargestation")]
		public string Chargestation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class UnlockconnectorPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargestation")]
		public string Chargestation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connector")]
		public string Connector { get; set; }
	}
	
	public class PatchChargeStationVariablePatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variable")]
		public System.Nullable<PatchChargeStationVariablePatchBodyVariable> Variable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PatchChargeStationVariablePatchBodyVariable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MeterValueSampleInterval = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HeartbeatInterval = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConnectionTimeOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebSocketPingInterval = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TransactionMessageRetryInterval = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TransactionMessageAttempts = 5,
	}
	
	public class PostConfigurationsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PostConnectorsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargestation")]
		public string Chargestation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="power")]
		public System.Nullable<System.Int32> Power { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="power_type")]
		public string Power_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PostConnectorsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public class PatchConnectorPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="chargestation")]
		public string Chargestation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="power")]
		public System.Nullable<System.Int32> Power { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="power_type")]
		public string Power_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetDriversReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string[] Result { get; set; }
	}
	
	public class PostDriversPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PostDriversPostBodyAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public PostDriversPostBodyPhone Phone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public PostDriversPostBodySource Source { get; set; }
	}
	
	public class PostDriversPostBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetAndNumber")]
		public string StreetAndNumber { get; set; }
	}
	
	public class PostDriversPostBodyPhone
	{
		
		[System.Runtime.Serialization.DataMember(Name="home")]
		public string Home { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="work")]
		public string Work { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PostDriversPostBodySource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		physical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		slack = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		telegram = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sms = 3,
	}
	
	public class PostDriversReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public class PatchDriverPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PatchDriverPatchBodyAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public PatchDriverPatchBodyPhone Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokens")]
		public string[] Tokens { get; set; }
	}
	
	public class PatchDriverPatchBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetAndNumber")]
		public string StreetAndNumber { get; set; }
	}
	
	public class PatchDriverPatchBodyPhone
	{
		
		[System.Runtime.Serialization.DataMember(Name="home")]
		public string Home { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="work")]
		public string Work { get; set; }
	}
	
	public class PatchDriverReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string[] Result { get; set; }
	}
	
	public class PatchLocationPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PatchLocationPatchBodyAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chargestations")]
		public string[] Chargestations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public PatchLocationPatchBodyCoordinates Coordinates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openingHours")]
		public PatchLocationPatchBodyOpeningHours OpeningHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	public class PatchLocationPatchBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetAndNumber")]
		public string StreetAndNumber { get; set; }
	}
	
	public class PatchLocationPatchBodyCoordinates
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours
	{
		
		[System.Runtime.Serialization.DataMember(Name="0")]
		public PatchLocationPatchBodyOpeningHours_0[] PatchLocationPatchBodyOpeningHours_0 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="1")]
		public PatchLocationPatchBodyOpeningHours_1[] PatchLocationPatchBodyOpeningHours_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="2")]
		public PatchLocationPatchBodyOpeningHours_2[] PatchLocationPatchBodyOpeningHours_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="3")]
		public PatchLocationPatchBodyOpeningHours_3[] PatchLocationPatchBodyOpeningHours_3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="4")]
		public PatchLocationPatchBodyOpeningHours_4[] PatchLocationPatchBodyOpeningHours_4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="5")]
		public PatchLocationPatchBodyOpeningHours_5[] PatchLocationPatchBodyOpeningHours_5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="6")]
		public PatchLocationPatchBodyOpeningHours_6[] PatchLocationPatchBodyOpeningHours_6 { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours_0
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours_1
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours_2
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours_3
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours_4
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours_5
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class PatchLocationPatchBodyOpeningHours_6
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public class PatchLocationReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string[] Result { get; set; }
	}
	
	public class PostLocationsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PostLocationsPostBodyAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chargestations")]
		public string[] Chargestations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public PostLocationsPostBodyCoordinates Coordinates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operatorName")]
		public string OperatorName { get; set; }
	}
	
	public class PostLocationsPostBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetAndNumber")]
		public string StreetAndNumber { get; set; }
	}
	
	public class PostLocationsPostBodyCoordinates
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class PostLocationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public class PatchOrganizationPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PatchOrganizationPatchBodyAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public PatchOrganizationPatchBodyChannels Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public PatchOrganizationPatchBodyConfigurations Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PatchOrganizationPatchBodyLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripe_connected_account_id")]
		public string Stripe_connected_account_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripe_country")]
		public string Stripe_country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripe_currency")]
		public string Stripe_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripe_reserve_amount")]
		public System.Nullable<System.Int32> Stripe_reserve_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support")]
		public PatchOrganizationPatchBodySupport Support { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportChat")]
		public PatchOrganizationPatchBodySupportChat SupportChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public PatchOrganizationPatchBodyTheme Theme { get; set; }
	}
	
	public class PatchOrganizationPatchBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetAndNumber")]
		public string StreetAndNumber { get; set; }
	}
	
	public class PatchOrganizationPatchBodyChannels
	{
		
		[System.Runtime.Serialization.DataMember(Name="slack")]
		public string Slack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="telegram")]
		public string Telegram { get; set; }
	}
	
	public class PatchOrganizationPatchBodyConfigurations
	{
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthEnabled")]
		public System.Nullable<System.Boolean> BasicAuthEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthPassword")]
		public System.Nullable<System.Boolean> BasicAuthPassword { get; set; }
	}
	
	public class PatchOrganizationPatchBodyLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public string Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public string Privacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support")]
		public string Support { get; set; }
	}
	
	public class PatchOrganizationPatchBodySupport
	{
		
		[System.Runtime.Serialization.DataMember(Name="business_hours")]
		public string Business_hours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chat")]
		public PatchOrganizationPatchBodySupportChat Chat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact_number")]
		public string Contact_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	public class PatchOrganizationPatchBodySupportChat
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PatchOrganizationPatchBodyTheme
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public PatchOrganizationPatchBodyThemeColors Colors { get; set; }
	}
	
	public class PatchOrganizationPatchBodyThemeColors
	{
		
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public string Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondary")]
		public string Secondary { get; set; }
	}
	
	public class UpdatereservationPatchBody
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connector")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Connector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="driver")]
		public string Driver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evse")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Evse { get; set; }
	}
	
	public class GetTokensReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string[] Result { get; set; }
	}
	
	public class PostTokensPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="active")]
		public bool Active { get; set; } = true;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public PostDriversPostBodySource Channel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="driver")]
		public string Driver { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="physicalId")]
		public string PhysicalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PatchTokenPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public PostDriversPostBodySource Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="driver")]
		public string Driver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="physicalId")]
		public string PhysicalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public enum GetTransactionsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ended = 1,
	}
	
	public class GetTransactionsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasNext")]
		public System.Nullable<System.Boolean> HasNext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasPrevious")]
		public System.Nullable<System.Boolean> HasPrevious { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string[] Result { get; set; }
	}
	
	public class GetVehiclesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string[] Result { get; set; }
	}
	
	public class PostChargePostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public PostChargePostBodyAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PostChargePostBodyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP = 1,
	}
	
	public class PostChargeReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ok")]
		public System.Nullable<System.Boolean> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
