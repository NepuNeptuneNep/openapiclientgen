//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SaveMultipleReviewsRequest
	{
		
		/// <summary>
		/// If the review was approved (`true`) or not (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public bool Approved { get; set; }
		
		/// <summary>
		/// Review ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Product ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Customer rating.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public double Rating { get; set; }
		
		/// <summary>
		/// Reviewer name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reviewerName")]
		public string ReviewerName { get; set; }
		
		/// <summary>
		/// Review's text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Review's title.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// If the reviewer is a verified purchaser (`true`) or not (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verifiedPurchaser")]
		public bool VerifiedPurchaser { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SaveReviewRequest
	{
		
		/// <summary>
		/// Product ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Customer rating.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public int Rating { get; set; }
		
		/// <summary>
		/// Reviewer name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reviewerName")]
		public string ReviewerName { get; set; }
		
		/// <summary>
		/// Review's text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Review's title.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Product Rating
		/// Retrieves the rating of a specific product.
		/// GetProductRating rating/{productId}
		/// </summary>
		/// <param name="productId">Product ID.</param>
		/// <returns>OK</returns>
		public async Task<GetProductRatingReturn> GetProductRatingAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rating/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetProductRatingReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Review
		/// Creates a single review
		/// SaveReview review
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SaveReviewReturn> SaveReviewAsync(SaveReviewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "review";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SaveReviewReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Review
		/// Deletes an existing review.
		/// DeleteReview review/{reviewId}
		/// </summary>
		/// <param name="reviewId">Review ID.</param>
		/// <returns>OK</returns>
		public async Task<bool> DeleteReviewAsync(string reviewId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "review/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<bool>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Review by Review ID
		/// Retrieves information of a product review by its ID.
		/// GetReviewbyReviewId review/{reviewId}
		/// </summary>
		/// <param name="reviewId">Review ID.</param>
		/// <returns>OK</returns>
		public async Task<GetReviewbyReviewIdReturn> GetReviewbyReviewIdAsync(string reviewId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "review/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetReviewbyReviewIdReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a Review
		/// Updates the information of a review.
		/// EditReview review/{reviewId}
		/// </summary>
		/// <param name="reviewId">Review ID.</param>
		/// <returns>OK</returns>
		public async Task<EditReviewReturn> EditReviewAsync(string reviewId, EditReviewPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "review/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EditReviewReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Multiple Reviews
		/// Deletes multiple reviews at once.
		/// DeleteMultipleReviews reviews
		/// </summary>
		/// <returns>OK</returns>
		public async Task<bool> DeleteMultipleReviewsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<bool>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of Reviews
		/// Retrieves a list of reviews.
		/// GetalistofReviews reviews
		/// </summary>
		/// <param name="search_term">Returns Reviews that contain the search term in `productId`, `sku`, `shopperId`, or `reviewerName`.</param>
		/// <param name="from">Zero base starting record number, `0` is the default value.</param>
		/// <param name="to">Zero base ending record number, `3` is the default value.</param>
		/// <param name="order_by">Case-sensitive fieldName to order records (optionally add `:asc` or `:desc`).</param>
		/// <param name="status">Status of the review, approved (`true`) or not (`false`).</param>
		/// <param name="product_id">Filter the reviews by product ID.</param>
		/// <returns>OK</returns>
		public async Task<GetalistofReviewsReturn> GetalistofReviewsAsync(string search_term, string from, string to, string order_by, bool status, string product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews?search_term=" + (search_term==null? "" : System.Uri.EscapeDataString(search_term))+"&from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by))+"&status="+status+"&product_id=" + (product_id==null? "" : System.Uri.EscapeDataString(product_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetalistofReviewsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Multiple Reviews
		/// Creates multiple reviews.
		/// SaveMultipleReviews reviews
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> SaveMultipleReviewsAsync(SaveMultipleReviewsRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reviews";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class GetProductRatingReturn
	{
		
		/// <summary>
		/// Avarage rating of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Double> Average { get; set; }
		
		/// <summary>
		/// Total amount of ranting of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Double> TotalCount { get; set; }
	}
	
	public class SaveReviewReturn
	{
		
		/// <summary>
		/// If the review was approved (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		/// <summary>
		/// Review ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Review's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Review's origin location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Past reviews of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pastReviews")]
		public string PastReviews { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Customer rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// Review's date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewDateTime")]
		public string ReviewDateTime { get; set; }
		
		/// <summary>
		/// Reviewer name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerName")]
		public string ReviewerName { get; set; }
		
		/// <summary>
		/// Review's search date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchDate")]
		public string SearchDate { get; set; }
		
		/// <summary>
		/// Shopper email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shopperId")]
		public string ShopperId { get; set; }
		
		/// <summary>
		/// SKU ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Review's text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Review's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// If the reviewer is a verified purchaser (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPurchaser")]
		public System.Nullable<System.Boolean> VerifiedPurchaser { get; set; }
	}
	
	public class GetReviewbyReviewIdReturn
	{
		
		/// <summary>
		/// If the review was approved (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		/// <summary>
		/// Review ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Review's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Review's origin location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Past reviews of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pastReviews")]
		public string PastReviews { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Customer rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// Review's date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewDateTime")]
		public string ReviewDateTime { get; set; }
		
		/// <summary>
		/// Reviewer name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerName")]
		public string ReviewerName { get; set; }
		
		/// <summary>
		/// Review's search date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchDate")]
		public string SearchDate { get; set; }
		
		/// <summary>
		/// Shopper email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shopperId")]
		public string ShopperId { get; set; }
		
		/// <summary>
		/// SKU ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Review's text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Review's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// If the reviewer is a verified purchaser (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPurchaser")]
		public System.Nullable<System.Boolean> VerifiedPurchaser { get; set; }
	}
	
	public class EditReviewPatchBody
	{
		
		/// <summary>
		/// Review's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Product ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Customer rating.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public double Rating { get; set; }
		
		/// <summary>
		/// Reviewer name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reviewerName")]
		public string ReviewerName { get; set; }
		
		/// <summary>
		/// Shopper email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shopperId")]
		public string ShopperId { get; set; }
		
		/// <summary>
		/// Review's text.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Review's title.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// If the reviewer is a verified purchaser (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPurchaser")]
		public System.Nullable<System.Boolean> VerifiedPurchaser { get; set; }
	}
	
	public class EditReviewReturn
	{
		
		/// <summary>
		/// If the review was approved (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		/// <summary>
		/// Review ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Review's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Review's origin location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Past reviews of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pastReviews")]
		public string PastReviews { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Customer rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// Review's date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewDateTime")]
		public string ReviewDateTime { get; set; }
		
		/// <summary>
		/// Reviewer name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerName")]
		public string ReviewerName { get; set; }
		
		/// <summary>
		/// Review's search date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchDate")]
		public string SearchDate { get; set; }
		
		/// <summary>
		/// Shopper email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shopperId")]
		public string ShopperId { get; set; }
		
		/// <summary>
		/// SKU ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Review's text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Review's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// If the reviewer is a verified purchaser (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPurchaser")]
		public System.Nullable<System.Boolean> VerifiedPurchaser { get; set; }
	}
	
	public class GetalistofReviewsReturn
	{
		
		/// <summary>
		/// Array of reviews.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetalistofReviewsReturnData[] GetalistofReviewsReturnData { get; set; }
		
		/// <summary>
		/// Range of the review's list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GetalistofReviewsReturnRange Range { get; set; }
	}
	
	public class GetalistofReviewsReturnData
	{
		
		/// <summary>
		/// If the review was approved (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		/// <summary>
		/// Review ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Review's locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Review's origin location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Past reviews of the same product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pastReviews")]
		public string PastReviews { get; set; }
		
		/// <summary>
		/// Product ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Customer rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// Review's date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewDateTime")]
		public string ReviewDateTime { get; set; }
		
		/// <summary>
		/// Reviewer name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerName")]
		public string ReviewerName { get; set; }
		
		/// <summary>
		/// Review's search date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchDate")]
		public string SearchDate { get; set; }
		
		/// <summary>
		/// Shopper email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shopperId")]
		public string ShopperId { get; set; }
		
		/// <summary>
		/// SKU ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Review's text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Review's title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// If the reviewer is a verified purchaser (`true`) or not (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedPurchaser")]
		public System.Nullable<System.Boolean> VerifiedPurchaser { get; set; }
	}
	
	public class GetalistofReviewsReturnRange
	{
		
		/// <summary>
		/// Zero base starting record number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.Double> From { get; set; }
		
		/// <summary>
		/// Zero base ending record number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.Double> To { get; set; }
		
		/// <summary>
		/// Total number of reviews on the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
