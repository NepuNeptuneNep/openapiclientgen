//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApproveSkillResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApproveSkillRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConcurrentModificationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateContactWithAddressBookResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateContactWithAddressBookRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateDeviceWithNetworkProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateDeviceWithNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceNotRegisteredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateDeviceWithRoomResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateDeviceWithRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSkillGroupWithRoomResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSkillGroupWithRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSkillWithSkillGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSkillWithSkillGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkillNotLinkedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSkillWithUsersResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateSkillWithUsersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAddressBookResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAddressBookRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A key-value pair that can be associated with a resource. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBusinessReportScheduleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBusinessReportScheduleRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportFormat Format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportContentRange ContentRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportRecurrence Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BusinessReportFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV_ZIP = 1,
	}
	
	/// <summary>
	/// The content range of the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessReportContentRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportInterval Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BusinessReportInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_WEEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 2,
	}
	
	/// <summary>
	/// The recurrence of the reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessReportRecurrence
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConferenceProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConferenceProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceProviderName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceProviderType ConferenceProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IPDialIn IPDialIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PSTNDialIn PSTNDialIn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeetingSetting MeetingSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHIME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUEJEANS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUZE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_HANGOUTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLYCOM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RINGCENTRAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKYPE_FOR_BUSINESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBEX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZOOM = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 9,
	}
	
	/// <summary>
	/// The IP endpoint and protocol for calling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IPDialIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CommsProtocol CommsProtocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommsProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H323 = 2,
	}
	
	/// <summary>
	/// The information for public switched telephone network (PSTN) conferencing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PSTNDialIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OneClickIdDelay { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OneClickPinDelay { get; set; }
	}
	
	/// <summary>
	/// <p>The values that indicate whether a pin is always required (YES), never required (NO), or OPTIONAL.</p> <ul> <li> <p>If YES, Alexa will always ask for a meeting pin.</p> </li> <li> <p>If NO, Alexa will never ask for a meeting pin.</p> </li> <li> <p>If OPTIONAL, Alexa will ask if you have a meeting pin and if the customer responds with yes, it will ask for the meeting pin.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeetingSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequirePin RequirePin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RequirePin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateContactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateContactRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipAddress[] SipAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The phone number for the contact containing the raw number and phone number type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneNumber
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME = 2,
	}
	
	/// <summary>
	/// The SIP address for the contact containing the URI and SIP address type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SipAddress
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SipType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGatewayGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGatewayGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Ssid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSecurityType SecurityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkEapMethod EapMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateAuthorityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TrustAnchors { get; set; }
		
		/// <summary>
		/// A unique, user-specified identifier for the request that ensures idempotency.
		/// Required
		/// Min length: 10
		/// Max length: 150
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Length(10, 150)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][a-zA-Z0-9_-]*")]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkSecurityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WPA_PSK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WPA2_PSK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WPA2_ENTERPRISE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkEapMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAP_TLS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidCertificateAuthorityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidServiceLinkedRoleStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DistanceUnit DistanceUnit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TemperatureUnit TemperatureUnit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WakeWord WakeWord { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SetupModeDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxVolumeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PSTNEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataRetentionOptIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateMeetingRoomConfiguration MeetingRoomConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DistanceUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPERIAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TemperatureUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAHRENHEIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CELSIUS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WakeWord
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALEXA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECHO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTER = 3,
	}
	
	/// <summary>
	/// Creates meeting room settings of a room profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMeetingRoomConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RoomUtilizationMetricsEnabled { get; set; }
		
		/// <summary>
		/// Creates settings for the end of meeting reminder feature that are applied to a room profile. The end of meeting reminder enables Alexa to remind users when a meeting is ending.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateEndOfMeetingReminder EndOfMeetingReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateInstantBooking InstantBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateRequireCheckIn RequireCheckIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateProactiveJoin ProactiveJoin { get; set; }
	}
	
	/// <summary>
	/// Creates settings for the end of meeting reminder feature that are applied to a room profile. The end of meeting reminder enables Alexa to remind users when a meeting is ending.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEndOfMeetingReminder
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int[] ReminderAtMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndOfMeetingReminderType ReminderType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndOfMeetingReminderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNOUNCEMENT_TIME_CHECK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNOUNCEMENT_VARIABLE_TIME_LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHIME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KNOCK = 3,
	}
	
	/// <summary>
	/// Creates settings for the instant booking feature that are applied to a room profile. When users start their meeting with Alexa, Alexa automatically books the room for the configured duration if the room is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateInstantBooking
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DurationInMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
	}
	
	/// <summary>
	/// Creates settings for the require check in feature that are applied to a room profile. Require check in allows a meeting room’s Alexa or AVS device to prompt the user to check in; otherwise, the room will be released.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRequireCheckIn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ReleaseAfterMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProactiveJoin
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnabledByMotion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRoomResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRoomRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoomName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSkillGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSkillGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAddressBookResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAddressBookRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBusinessReportScheduleResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBusinessReportScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteConferenceProviderResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteConferenceProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteContactResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteContactRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceUsageDataResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceUsageDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceUsageType DeviceUsageType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceUsageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOICE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGatewayGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGatewayGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceAssociatedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRoomResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRoomSkillParameterResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRoomSkillParameterRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSkillAuthorizationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSkillAuthorizationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSkillGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSkillGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EnrollmentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateContactFromAddressBookResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateContactFromAddressBookRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateDeviceFromRoomResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateDeviceFromRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateSkillFromSkillGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateSkillFromSkillGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateSkillFromUsersResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateSkillFromUsersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateSkillGroupFromRoomResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateSkillGroupFromRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ForgetSmartHomeAppliancesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ForgetSmartHomeAppliancesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAddressBookResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AddressBook AddressBook { get; set; }
	}
	
	/// <summary>
	/// An address book with attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddressBook
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAddressBookRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConferencePreferenceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConferencePreference Preference { get; set; }
	}
	
	/// <summary>
	/// The default conference provider that is used if no other scheduled meetings are detected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferencePreference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultConferenceProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConferencePreferenceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConferenceProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConferenceProvider ConferenceProvider { get; set; }
	}
	
	/// <summary>
	/// An entity that provides a conferencing solution. Alexa for Business acts as the voice interface and mediator that connects users to their preferred conference provider. Examples of conference providers include Amazon Chime, Zoom, Cisco, and Polycom. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceProvider
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConferenceProviderType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IPDialIn IPDialIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PSTNDialIn PSTNDialIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MeetingSetting MeetingSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConferenceProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetContactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Contact Contact { get; set; }
	}
	
	/// <summary>
	/// A contact with attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Contact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipAddress[] SipAddresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetContactRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	/// <summary>
	/// A device with attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Device
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceSerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SoftwareVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceStatus DeviceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceStatusInfo DeviceStatusInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceNetworkProfileInfo NetworkProfileInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAS_OFFLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEREGISTERED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	/// <summary>
	/// Detailed information about a device's status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceStatusDetail[] DeviceStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatus ConnectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ConnectionStatusUpdatedTime { get; set; }
	}
	
	/// <summary>
	/// Details of a device’s status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceStatusDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Feature Feature { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceStatusDetailCode Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Feature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUETOOTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOLUME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTIFICATIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LISTS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKILLS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_PROFILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SETTINGS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceStatusDetailCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SOFTWARE_UPDATE_NEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_WAS_OFFLINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIALS_ACCESS_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_VERSION_MISMATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATION_REJECTION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_FAILURE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DHCP_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET_UNAVAILABLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_FAILURE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_FAILURE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_ISSUING_LIMIT_EXCEEDED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CERTIFICATE_AUTHORITY = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_PROFILE_NOT_FOUND = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PASSWORD_STATE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_NOT_FOUND = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_MANAGER_ACCESS_DENIED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_AUTHORITY_ACCESS_DENIED = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFLINE = 1,
	}
	
	/// <summary>
	/// Detailed information about a device's network profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceNetworkProfileInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CertificateExpirationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Gateway Gateway { get; set; }
	}
	
	/// <summary>
	/// The details of the gateway. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Gateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SoftwareVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGatewayRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGatewayGroupResponse
	{
		
		/// <summary>
		/// The details of the gateway group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GatewayGroup GatewayGroup { get; set; }
	}
	
	/// <summary>
	/// The details of the gateway group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GatewayGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGatewayGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetInvitationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PrivateSkillIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetInvitationConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfile NetworkProfile { get; set; }
	}
	
	/// <summary>
	/// The network profile associated with a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ssid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkSecurityType SecurityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkEapMethod EapMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateAuthorityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TrustAnchors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSecretsManagerResourceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Profile Profile { get; set; }
	}
	
	/// <summary>
	/// A room profile with attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DistanceUnit DistanceUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemperatureUnit TemperatureUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WakeWord WakeWord { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SetupModeDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxVolumeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PSTNEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataRetentionOptIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MeetingRoomConfiguration MeetingRoomConfiguration { get; set; }
	}
	
	/// <summary>
	/// Meeting room settings of a room profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeetingRoomConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RoomUtilizationMetricsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndOfMeetingReminder EndOfMeetingReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstantBooking InstantBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequireCheckIn RequireCheckIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProactiveJoin ProactiveJoin { get; set; }
	}
	
	/// <summary>
	/// Settings for the end of meeting reminder feature that are applied to a room profile. The end of meeting reminder enables Alexa to remind users when a meeting is ending. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndOfMeetingReminder
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReminderAtMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndOfMeetingReminderType ReminderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Settings for the instant booking feature that are applied to a room profile. When users start their meeting with Alexa, Alexa automatically books the room for the configured duration if the room is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstantBooking
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Settings for the require check in feature that are applied to a room profile. Require check in allows a meeting room’s Alexa or AVS device to prompt the user to check in; otherwise, the room will be released. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequireCheckIn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReleaseAfterMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProactiveJoin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnabledByMotion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRoomResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Room Room { get; set; }
	}
	
	/// <summary>
	/// A room with attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Room
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRoomSkillParameterResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RoomSkillParameter RoomSkillParameter { get; set; }
	}
	
	/// <summary>
	/// A skill parameter associated with a room.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomSkillParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRoomSkillParameterRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSkillGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SkillGroup SkillGroup { get; set; }
	}
	
	/// <summary>
	/// A skill group with attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkillGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSkillGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBusinessReportSchedulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportSchedule[] BusinessReportSchedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The schedule of the usage report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessReportSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportContentRange ContentRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportRecurrence Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReport LastBusinessReport { get; set; }
	}
	
	/// <summary>
	/// Usage report with specified parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessReport
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportFailureCode FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportS3Location S3Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeliveryTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DownloadUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BusinessReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BusinessReportFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SUCH_BUCKET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_FAILURE = 2,
	}
	
	/// <summary>
	/// The S3 location of the output reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessReportS3Location
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBusinessReportSchedulesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConferenceProvidersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConferenceProvider[] ConferenceProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConferenceProvidersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceEvent[] DeviceEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The list of device events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceEventType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_STATUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_STATUS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceEventsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceEventType EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGatewayGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayGroupSummary[] GatewayGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of a gateway group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GatewayGroupSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGatewayGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGatewaysResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GatewaySummary[] Gateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of a gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GatewaySummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SoftwareVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSkillsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SkillSummary[] SkillSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The summary of skills.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkillSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsLinking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnablementType EnablementType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkillType SkillType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnablementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SkillType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSkillsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnablementType EnablementType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkillTypeFilter SkillType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SkillTypeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSkillsStoreCategoriesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Category[] CategoryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The skill store category that is shown. Alexa skills are assigned a specific skill category during creation, such as News, Social, and Sports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Category
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CategoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSkillsStoreCategoriesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSkillsStoreSkillsByCategoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SkillsStoreSkill[] SkillsStoreSkills { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The detailed information about an Alexa skill.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkillsStoreSkill
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShortDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IconUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SampleUtterances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SkillDetails SkillDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsLinking { get; set; }
	}
	
	/// <summary>
	/// Granular information about the skill.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkillDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvocationPhrase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndUserLicenseAgreement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GenericKeywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] BulletPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NewInThisVersionBulletPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SkillTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reviews Reviews { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeveloperInfo DeveloperInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reviews
	{
	}
	
	/// <summary>
	/// The details about the developer that published the skill.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeveloperInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeveloperName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivacyPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSkillsStoreSkillsByCategoryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSmartHomeAppliancesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SmartHomeAppliance[] SmartHomeAppliances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A smart home appliance that can connect to a central system. Any domestic device can be a smart appliance. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SmartHomeAppliance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManufacturerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSmartHomeAppliancesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutConferencePreferenceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutConferencePreferenceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferencePreference ConferencePreference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutInvitationConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutInvitationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PrivateSkillIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRoomSkillParameterResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutRoomSkillParameterRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RoomSkillParameter RoomSkillParameter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSkillAuthorizationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSkillAuthorizationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationResult AuthorizationResult { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnauthorizedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterAVSDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterAVSDeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceSerialNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AmazonId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeviceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RejectSkillResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RejectSkillRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResolveRoomResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoomSkillParameter[] RoomSkillParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResolveRoomRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SkillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevokeInvitationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevokeInvitationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnrollmentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchAddressBooksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AddressBookData[] AddressBooks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Information related to an address book.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddressBookData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchAddressBooksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// A filter name and value pair that is used to return a more specific list of results. Filters can be used to match a set of resources by various criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// An object representing a sort criteria. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sort
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SortValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchContactsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactData[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Information related to a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipAddress[] SipAddresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchContactsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceData[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Device attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceSerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SoftwareVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceStatus DeviceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceStatusInfo DeviceStatusInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchDevicesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchNetworkProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfileData[] NetworkProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// The data associated with a network profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkProfileData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ssid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkSecurityType SecurityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkEapMethod EapMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateAuthorityArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchNetworkProfilesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileData[] Profiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// The data of a room profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProfileData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DistanceUnit DistanceUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemperatureUnit TemperatureUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WakeWord WakeWord { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchProfilesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchRoomsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RoomData[] Rooms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// The data of a room.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchRoomsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchSkillGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SkillGroupData[] SkillGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// The attributes of a skill group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkillGroupData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchSkillGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserData[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Information related to a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnrollmentStatus EnrollmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnrollmentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnrollmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEREGISTERING = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchUsersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sort[] SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendAnnouncementResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AnnouncementArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendAnnouncementRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Filter[] RoomFilters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Content Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeToLiveInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// The content definition. This can contain only one text, SSML, or audio list object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Content
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Text[] TextList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ssml[] SsmlList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Audio[] AudioList { get; set; }
	}
	
	/// <summary>
	/// The text message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Text
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Locale Locale { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Locale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
	}
	
	/// <summary>
	/// The SSML message. For more information, see <a href="https://developer.amazon.com/docs/custom-skills/speech-synthesis-markup-language-ssml-reference.html">SSML Reference</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ssml
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Locale Locale { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>The audio message. There is a 1 MB limit on the audio file input and the only supported format is MP3. To convert your MP3 audio files to an Alexa-friendly, </p> <p>required codec version (MPEG version 2) and bit rate (48 kbps), you might use converter software. One option for this is a command-line tool, FFmpeg. For more information, see <a href="https://www.ffmpeg.org/">FFmpeg</a>. The following command converts the provided &lt;input-file&gt; to an MP3 file that is played in the announcement:</p> <p> <code>ffmpeg -i &lt;input-file&gt; -ac 2 -codec:a libmp3lame -b:a 48k -ar 16000 &lt;output-file.mp3&gt;</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Audio
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Locale Locale { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendInvitationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendInvitationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidUserStatusException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDeviceSyncResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDeviceSyncRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Feature[] Features { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSmartHomeApplianceDiscoveryResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSmartHomeApplianceDiscoveryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAddressBookResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAddressBookRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressBookArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NameInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBusinessReportScheduleResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBusinessReportScheduleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessReportRecurrence Recurrence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConferenceProviderResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConferenceProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceProviderType ConferenceProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IPDialIn IPDialIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PSTNDialIn PSTNDialIn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeetingSetting MeetingSetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateContactResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateContactRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContactArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipAddress[] SipAddresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeviceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewayResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewayRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SoftwareVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewayGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGatewayGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateAuthorityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TrustAnchors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DistanceUnit DistanceUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemperatureUnit TemperatureUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WakeWord WakeWord { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SetupModeDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxVolumeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PSTNEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataRetentionOptIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateMeetingRoomConfiguration MeetingRoomConfiguration { get; set; }
	}
	
	/// <summary>
	/// Updates meeting room settings of a room profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMeetingRoomConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RoomUtilizationMetricsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateEndOfMeetingReminder EndOfMeetingReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateInstantBooking InstantBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateRequireCheckIn RequireCheckIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateProactiveJoin ProactiveJoin { get; set; }
	}
	
	/// <summary>
	/// Settings for the end of meeting reminder feature that are applied to a room profile. The end of meeting reminder enables Alexa to remind users when a meeting is ending. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEndOfMeetingReminder
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReminderAtMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndOfMeetingReminderType ReminderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Updates settings for the instant booking feature that are applied to a room profile. If instant booking is enabled, Alexa automatically reserves a room if it is free when a user joins a meeting with Alexa.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateInstantBooking
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Updates settings for the require check in feature that are applied to a room profile. Require check in allows a meeting room’s Alexa or AVS device to prompt the user to check in; otherwise, the room will be released. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRequireCheckIn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReleaseAfterMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProactiveJoin
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnabledByMotion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRoomResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoomName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSkillGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSkillGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SkillGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnablementTypeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates a skill with the organization under the customer's AWS account. If a skill is private, the user implicitly accepts access to this skill during enablement.
		/// ApproveSkill #X-Amz-Target=AlexaForBusiness.ApproveSkill
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ApproveSkillResponse> ApproveSkillAsync(ApproveSkillRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ApproveSkill";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApproveSkillResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Associates a contact with a given address book.
		/// AssociateContactWithAddressBook #X-Amz-Target=AlexaForBusiness.AssociateContactWithAddressBook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateContactWithAddressBookResponse> AssociateContactWithAddressBookAsync(AssociateContactWithAddressBookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.AssociateContactWithAddressBook";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateContactWithAddressBookResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Associates a device with the specified network profile.
		/// AssociateDeviceWithNetworkProfile #X-Amz-Target=AlexaForBusiness.AssociateDeviceWithNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateDeviceWithNetworkProfileResponse> AssociateDeviceWithNetworkProfileAsync(AssociateDeviceWithNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.AssociateDeviceWithNetworkProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateDeviceWithNetworkProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Associates a device with a given room. This applies all the settings from the room profile to the device, and all the skills in any skill groups added to that room. This operation requires the device to be online, or else a manual sync is required.
		/// AssociateDeviceWithRoom #X-Amz-Target=AlexaForBusiness.AssociateDeviceWithRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateDeviceWithRoomResponse> AssociateDeviceWithRoomAsync(AssociateDeviceWithRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.AssociateDeviceWithRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateDeviceWithRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Associates a skill group with a given room. This enables all skills in the associated skill group on all devices in the room.
		/// AssociateSkillGroupWithRoom #X-Amz-Target=AlexaForBusiness.AssociateSkillGroupWithRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateSkillGroupWithRoomResponse> AssociateSkillGroupWithRoomAsync(AssociateSkillGroupWithRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.AssociateSkillGroupWithRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateSkillGroupWithRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Associates a skill with a skill group.
		/// AssociateSkillWithSkillGroup #X-Amz-Target=AlexaForBusiness.AssociateSkillWithSkillGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateSkillWithSkillGroupResponse> AssociateSkillWithSkillGroupAsync(AssociateSkillWithSkillGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.AssociateSkillWithSkillGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateSkillWithSkillGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Makes a private skill available for enrolled users to enable on their devices.
		/// AssociateSkillWithUsers #X-Amz-Target=AlexaForBusiness.AssociateSkillWithUsers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateSkillWithUsersResponse> AssociateSkillWithUsersAsync(AssociateSkillWithUsersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.AssociateSkillWithUsers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateSkillWithUsersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an address book with the specified details.
		/// CreateAddressBook #X-Amz-Target=AlexaForBusiness.CreateAddressBook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAddressBookResponse> CreateAddressBookAsync(CreateAddressBookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateAddressBook";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateAddressBookResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a recurring schedule for usage reports to deliver to the specified S3 location with a specified daily or weekly interval.
		/// CreateBusinessReportSchedule #X-Amz-Target=AlexaForBusiness.CreateBusinessReportSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBusinessReportScheduleResponse> CreateBusinessReportScheduleAsync(CreateBusinessReportScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateBusinessReportSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateBusinessReportScheduleResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds a new conference provider under the user's AWS account.
		/// CreateConferenceProvider #X-Amz-Target=AlexaForBusiness.CreateConferenceProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConferenceProviderResponse> CreateConferenceProviderAsync(CreateConferenceProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateConferenceProvider";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateConferenceProviderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a contact with the specified details.
		/// CreateContact #X-Amz-Target=AlexaForBusiness.CreateContact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContactResponse> CreateContactAsync(CreateContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateContact";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateContactResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a gateway group with the specified details.
		/// CreateGatewayGroup #X-Amz-Target=AlexaForBusiness.CreateGatewayGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateGatewayGroupResponse> CreateGatewayGroupAsync(CreateGatewayGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateGatewayGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateGatewayGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a network profile with the specified details.
		/// CreateNetworkProfile #X-Amz-Target=AlexaForBusiness.CreateNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNetworkProfileResponse> CreateNetworkProfileAsync(CreateNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateNetworkProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateNetworkProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new room profile with the specified details.
		/// CreateProfile #X-Amz-Target=AlexaForBusiness.CreateProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProfileResponse> CreateProfileAsync(CreateProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a room with the specified details.
		/// CreateRoom #X-Amz-Target=AlexaForBusiness.CreateRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRoomResponse> CreateRoomAsync(CreateRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a skill group with a specified name and description.
		/// CreateSkillGroup #X-Amz-Target=AlexaForBusiness.CreateSkillGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSkillGroupResponse> CreateSkillGroupAsync(CreateSkillGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateSkillGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSkillGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a user.
		/// CreateUser #X-Amz-Target=AlexaForBusiness.CreateUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserResponse> CreateUserAsync(CreateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.CreateUser";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateUserResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an address book by the address book ARN.
		/// DeleteAddressBook #X-Amz-Target=AlexaForBusiness.DeleteAddressBook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAddressBookResponse> DeleteAddressBookAsync(DeleteAddressBookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteAddressBook";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteAddressBookResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the recurring report delivery schedule with the specified schedule ARN.
		/// DeleteBusinessReportSchedule #X-Amz-Target=AlexaForBusiness.DeleteBusinessReportSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBusinessReportScheduleResponse> DeleteBusinessReportScheduleAsync(DeleteBusinessReportScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteBusinessReportSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteBusinessReportScheduleResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a conference provider.
		/// DeleteConferenceProvider #X-Amz-Target=AlexaForBusiness.DeleteConferenceProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteConferenceProviderResponse> DeleteConferenceProviderAsync(DeleteConferenceProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteConferenceProvider";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteConferenceProviderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a contact by the contact ARN.
		/// DeleteContact #X-Amz-Target=AlexaForBusiness.DeleteContact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteContactResponse> DeleteContactAsync(DeleteContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteContact";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteContactResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes a device from Alexa For Business.
		/// DeleteDevice #X-Amz-Target=AlexaForBusiness.DeleteDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDeviceResponse> DeleteDeviceAsync(DeleteDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteDevice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteDeviceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// When this action is called for a specified shared device, it allows authorized users to delete the device's entire previous history of voice input data and associated response data. This action can be called once every 24 hours for a specific shared device.
		/// DeleteDeviceUsageData #X-Amz-Target=AlexaForBusiness.DeleteDeviceUsageData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDeviceUsageDataResponse> DeleteDeviceUsageDataAsync(DeleteDeviceUsageDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteDeviceUsageData";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteDeviceUsageDataResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a gateway group.
		/// DeleteGatewayGroup #X-Amz-Target=AlexaForBusiness.DeleteGatewayGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteGatewayGroupResponse> DeleteGatewayGroupAsync(DeleteGatewayGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteGatewayGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteGatewayGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a network profile by the network profile ARN.
		/// DeleteNetworkProfile #X-Amz-Target=AlexaForBusiness.DeleteNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteNetworkProfileResponse> DeleteNetworkProfileAsync(DeleteNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteNetworkProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteNetworkProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a room profile by the profile ARN.
		/// DeleteProfile #X-Amz-Target=AlexaForBusiness.DeleteProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProfileResponse> DeleteProfileAsync(DeleteProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a room by the room ARN.
		/// DeleteRoom #X-Amz-Target=AlexaForBusiness.DeleteRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRoomResponse> DeleteRoomAsync(DeleteRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes room skill parameter details by room, skill, and parameter key ID.
		/// DeleteRoomSkillParameter #X-Amz-Target=AlexaForBusiness.DeleteRoomSkillParameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRoomSkillParameterResponse> DeleteRoomSkillParameterAsync(DeleteRoomSkillParameterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteRoomSkillParameter";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteRoomSkillParameterResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unlinks a third-party account from a skill.
		/// DeleteSkillAuthorization #X-Amz-Target=AlexaForBusiness.DeleteSkillAuthorization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSkillAuthorizationResponse> DeleteSkillAuthorizationAsync(DeleteSkillAuthorizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteSkillAuthorization";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteSkillAuthorizationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a skill group by skill group ARN.
		/// DeleteSkillGroup #X-Amz-Target=AlexaForBusiness.DeleteSkillGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSkillGroupResponse> DeleteSkillGroupAsync(DeleteSkillGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteSkillGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteSkillGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a specified user by user ARN and enrollment ARN.
		/// DeleteUser #X-Amz-Target=AlexaForBusiness.DeleteUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DeleteUser";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteUserResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates a contact from a given address book.
		/// DisassociateContactFromAddressBook #X-Amz-Target=AlexaForBusiness.DisassociateContactFromAddressBook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateContactFromAddressBookResponse> DisassociateContactFromAddressBookAsync(DisassociateContactFromAddressBookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DisassociateContactFromAddressBook";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateContactFromAddressBookResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates a device from its current room. The device continues to be connected to the Wi-Fi network and is still registered to the account. The device settings and skills are removed from the room.
		/// DisassociateDeviceFromRoom #X-Amz-Target=AlexaForBusiness.DisassociateDeviceFromRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateDeviceFromRoomResponse> DisassociateDeviceFromRoomAsync(DisassociateDeviceFromRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DisassociateDeviceFromRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateDeviceFromRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates a skill from a skill group.
		/// DisassociateSkillFromSkillGroup #X-Amz-Target=AlexaForBusiness.DisassociateSkillFromSkillGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateSkillFromSkillGroupResponse> DisassociateSkillFromSkillGroupAsync(DisassociateSkillFromSkillGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DisassociateSkillFromSkillGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateSkillFromSkillGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Makes a private skill unavailable for enrolled users and prevents them from enabling it on their devices.
		/// DisassociateSkillFromUsers #X-Amz-Target=AlexaForBusiness.DisassociateSkillFromUsers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateSkillFromUsersResponse> DisassociateSkillFromUsersAsync(DisassociateSkillFromUsersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DisassociateSkillFromUsers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateSkillFromUsersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates a skill group from a specified room. This disables all skills in the skill group on all devices in the room.
		/// DisassociateSkillGroupFromRoom #X-Amz-Target=AlexaForBusiness.DisassociateSkillGroupFromRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateSkillGroupFromRoomResponse> DisassociateSkillGroupFromRoomAsync(DisassociateSkillGroupFromRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.DisassociateSkillGroupFromRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateSkillGroupFromRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Forgets smart home appliances associated to a room.
		/// ForgetSmartHomeAppliances #X-Amz-Target=AlexaForBusiness.ForgetSmartHomeAppliances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ForgetSmartHomeAppliancesResponse> ForgetSmartHomeAppliancesAsync(ForgetSmartHomeAppliancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ForgetSmartHomeAppliances";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ForgetSmartHomeAppliancesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets address the book details by the address book ARN.
		/// GetAddressBook #X-Amz-Target=AlexaForBusiness.GetAddressBook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAddressBookResponse> GetAddressBookAsync(GetAddressBookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetAddressBook";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAddressBookResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the existing conference preferences.
		/// GetConferencePreference #X-Amz-Target=AlexaForBusiness.GetConferencePreference
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetConferencePreferenceResponse> GetConferencePreferenceAsync(GetConferencePreferenceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetConferencePreference";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetConferencePreferenceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details about a specific conference provider.
		/// GetConferenceProvider #X-Amz-Target=AlexaForBusiness.GetConferenceProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetConferenceProviderResponse> GetConferenceProviderAsync(GetConferenceProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetConferenceProvider";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetConferenceProviderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the contact details by the contact ARN.
		/// GetContact #X-Amz-Target=AlexaForBusiness.GetContact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContactResponse> GetContactAsync(GetContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetContact";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetContactResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of a device by device ARN.
		/// GetDevice #X-Amz-Target=AlexaForBusiness.GetDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceResponse> GetDeviceAsync(GetDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetDevice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDeviceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the details of a gateway.
		/// GetGateway #X-Amz-Target=AlexaForBusiness.GetGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetGatewayResponse> GetGatewayAsync(GetGatewayRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetGateway";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetGatewayResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the details of a gateway group.
		/// GetGatewayGroup #X-Amz-Target=AlexaForBusiness.GetGatewayGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetGatewayGroupResponse> GetGatewayGroupAsync(GetGatewayGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetGatewayGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetGatewayGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the configured values for the user enrollment invitation email template.
		/// GetInvitationConfiguration #X-Amz-Target=AlexaForBusiness.GetInvitationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInvitationConfigurationResponse> GetInvitationConfigurationAsync(GetInvitationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetInvitationConfiguration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetInvitationConfigurationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the network profile details by the network profile ARN.
		/// GetNetworkProfile #X-Amz-Target=AlexaForBusiness.GetNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetNetworkProfileResponse> GetNetworkProfileAsync(GetNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetNetworkProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetNetworkProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of a room profile by profile ARN.
		/// GetProfile #X-Amz-Target=AlexaForBusiness.GetProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetProfileResponse> GetProfileAsync(GetProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets room details by room ARN.
		/// GetRoom #X-Amz-Target=AlexaForBusiness.GetRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRoomResponse> GetRoomAsync(GetRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets room skill parameter details by room, skill, and parameter key ARN.
		/// GetRoomSkillParameter #X-Amz-Target=AlexaForBusiness.GetRoomSkillParameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRoomSkillParameterResponse> GetRoomSkillParameterAsync(GetRoomSkillParameterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetRoomSkillParameter";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetRoomSkillParameterResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets skill group details by skill group ARN.
		/// GetSkillGroup #X-Amz-Target=AlexaForBusiness.GetSkillGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSkillGroupResponse> GetSkillGroupAsync(GetSkillGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.GetSkillGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSkillGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the details of the schedules that a user configured. A download URL of the report associated with each schedule is returned every time this action is called. A new download URL is returned each time, and is valid for 24 hours.
		/// ListBusinessReportSchedules #X-Amz-Target=AlexaForBusiness.ListBusinessReportSchedules
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBusinessReportSchedulesResponse> ListBusinessReportSchedulesAsync(string MaxResults, string NextToken, ListBusinessReportSchedulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListBusinessReportSchedules?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListBusinessReportSchedulesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists conference providers under a specific AWS account.
		/// ListConferenceProviders #X-Amz-Target=AlexaForBusiness.ListConferenceProviders
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListConferenceProvidersResponse> ListConferenceProvidersAsync(string MaxResults, string NextToken, ListConferenceProvidersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListConferenceProviders?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListConferenceProvidersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the device event history, including device connection status, for up to 30 days.
		/// ListDeviceEvents #X-Amz-Target=AlexaForBusiness.ListDeviceEvents
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeviceEventsResponse> ListDeviceEventsAsync(string MaxResults, string NextToken, ListDeviceEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListDeviceEvents?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDeviceEventsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of gateway group summaries. Use GetGatewayGroup to retrieve details of a specific gateway group.
		/// ListGatewayGroups #X-Amz-Target=AlexaForBusiness.ListGatewayGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListGatewayGroupsResponse> ListGatewayGroupsAsync(string MaxResults, string NextToken, ListGatewayGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListGatewayGroups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListGatewayGroupsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of gateway summaries. Use GetGateway to retrieve details of a specific gateway. An optional gateway group ARN can be provided to only retrieve gateway summaries of gateways that are associated with that gateway group ARN.
		/// ListGateways #X-Amz-Target=AlexaForBusiness.ListGateways
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListGatewaysResponse> ListGatewaysAsync(string MaxResults, string NextToken, ListGatewaysRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListGateways?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListGatewaysResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all enabled skills in a specific skill group.
		/// ListSkills #X-Amz-Target=AlexaForBusiness.ListSkills
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSkillsResponse> ListSkillsAsync(string MaxResults, string NextToken, ListSkillsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListSkills?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSkillsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all categories in the Alexa skill store.
		/// ListSkillsStoreCategories #X-Amz-Target=AlexaForBusiness.ListSkillsStoreCategories
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSkillsStoreCategoriesResponse> ListSkillsStoreCategoriesAsync(string MaxResults, string NextToken, ListSkillsStoreCategoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListSkillsStoreCategories?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSkillsStoreCategoriesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all skills in the Alexa skill store by category.
		/// ListSkillsStoreSkillsByCategory #X-Amz-Target=AlexaForBusiness.ListSkillsStoreSkillsByCategory
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSkillsStoreSkillsByCategoryResponse> ListSkillsStoreSkillsByCategoryAsync(string MaxResults, string NextToken, ListSkillsStoreSkillsByCategoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListSkillsStoreSkillsByCategory?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSkillsStoreSkillsByCategoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all of the smart home appliances associated with a room.
		/// ListSmartHomeAppliances #X-Amz-Target=AlexaForBusiness.ListSmartHomeAppliances
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSmartHomeAppliancesResponse> ListSmartHomeAppliancesAsync(string MaxResults, string NextToken, ListSmartHomeAppliancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListSmartHomeAppliances?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSmartHomeAppliancesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all tags for the specified resource.
		/// ListTags #X-Amz-Target=AlexaForBusiness.ListTags
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagsResponse> ListTagsAsync(string MaxResults, string NextToken, ListTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ListTags?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the conference preferences on a specific conference provider at the account level.
		/// PutConferencePreference #X-Amz-Target=AlexaForBusiness.PutConferencePreference
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutConferencePreferenceResponse> PutConferencePreferenceAsync(PutConferencePreferenceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.PutConferencePreference";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutConferencePreferenceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configures the email template for the user enrollment invitation with the specified attributes.
		/// PutInvitationConfiguration #X-Amz-Target=AlexaForBusiness.PutInvitationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutInvitationConfigurationResponse> PutInvitationConfigurationAsync(PutInvitationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.PutInvitationConfiguration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutInvitationConfigurationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates room skill parameter details by room, skill, and parameter key ID. Not all skills have a room skill parameter.
		/// PutRoomSkillParameter #X-Amz-Target=AlexaForBusiness.PutRoomSkillParameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRoomSkillParameterResponse> PutRoomSkillParameterAsync(PutRoomSkillParameterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.PutRoomSkillParameter";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutRoomSkillParameterResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Links a user's account to a third-party skill provider. If this API operation is called by an assumed IAM role, the skill being linked must be a private skill. Also, the skill must be owned by the AWS account that assumed the IAM role.
		/// PutSkillAuthorization #X-Amz-Target=AlexaForBusiness.PutSkillAuthorization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutSkillAuthorizationResponse> PutSkillAuthorizationAsync(PutSkillAuthorizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.PutSkillAuthorization";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutSkillAuthorizationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Registers an Alexa-enabled device built by an Original Equipment Manufacturer (OEM) using Alexa Voice Service (AVS).
		/// RegisterAVSDevice #X-Amz-Target=AlexaForBusiness.RegisterAVSDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterAVSDeviceResponse> RegisterAVSDeviceAsync(RegisterAVSDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.RegisterAVSDevice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegisterAVSDeviceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates a skill from the organization under a user's AWS account. If the skill is a private skill, it moves to an AcceptStatus of PENDING. Any private or public skill that is rejected can be added later by calling the ApproveSkill API.
		/// RejectSkill #X-Amz-Target=AlexaForBusiness.RejectSkill
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RejectSkillResponse> RejectSkillAsync(RejectSkillRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.RejectSkill";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RejectSkillResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Determines the details for the room from which a skill request was invoked. This operation is used by skill developers.</p> <p>To query ResolveRoom from an Alexa skill, the skill ID needs to be authorized. When the skill is using an AWS Lambda function, the skill is automatically authorized when you publish your skill as a private skill to your AWS account. Skills that are hosted using a custom web service must be manually authorized. To get your skill authorized, contact AWS Support with your AWS account ID that queries the ResolveRoom API and skill ID. </p>
		/// ResolveRoom #X-Amz-Target=AlexaForBusiness.ResolveRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResolveRoomResponse> ResolveRoomAsync(ResolveRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.ResolveRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ResolveRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Revokes an invitation and invalidates the enrollment URL.
		/// RevokeInvitation #X-Amz-Target=AlexaForBusiness.RevokeInvitation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RevokeInvitationResponse> RevokeInvitationAsync(RevokeInvitationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.RevokeInvitation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RevokeInvitationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches address books and lists the ones that meet a set of filter and sort criteria.
		/// SearchAddressBooks #X-Amz-Target=AlexaForBusiness.SearchAddressBooks
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchAddressBooksResponse> SearchAddressBooksAsync(string MaxResults, string NextToken, SearchAddressBooksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchAddressBooks?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchAddressBooksResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches contacts and lists the ones that meet a set of filter and sort criteria.
		/// SearchContacts #X-Amz-Target=AlexaForBusiness.SearchContacts
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchContactsResponse> SearchContactsAsync(string MaxResults, string NextToken, SearchContactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchContacts?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchContactsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches devices and lists the ones that meet a set of filter criteria.
		/// SearchDevices #X-Amz-Target=AlexaForBusiness.SearchDevices
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchDevicesResponse> SearchDevicesAsync(string MaxResults, string NextToken, SearchDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchDevices?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchDevicesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches network profiles and lists the ones that meet a set of filter and sort criteria.
		/// SearchNetworkProfiles #X-Amz-Target=AlexaForBusiness.SearchNetworkProfiles
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchNetworkProfilesResponse> SearchNetworkProfilesAsync(string MaxResults, string NextToken, SearchNetworkProfilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchNetworkProfiles?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchNetworkProfilesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches room profiles and lists the ones that meet a set of filter criteria.
		/// SearchProfiles #X-Amz-Target=AlexaForBusiness.SearchProfiles
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchProfilesResponse> SearchProfilesAsync(string MaxResults, string NextToken, SearchProfilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchProfiles?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchProfilesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches rooms and lists the ones that meet a set of filter and sort criteria.
		/// SearchRooms #X-Amz-Target=AlexaForBusiness.SearchRooms
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchRoomsResponse> SearchRoomsAsync(string MaxResults, string NextToken, SearchRoomsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchRooms?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchRoomsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches skill groups and lists the ones that meet a set of filter and sort criteria.
		/// SearchSkillGroups #X-Amz-Target=AlexaForBusiness.SearchSkillGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchSkillGroupsResponse> SearchSkillGroupsAsync(string MaxResults, string NextToken, SearchSkillGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchSkillGroups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchSkillGroupsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Searches users and lists the ones that meet a set of filter and sort criteria.
		/// SearchUsers #X-Amz-Target=AlexaForBusiness.SearchUsers
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchUsersResponse> SearchUsersAsync(string MaxResults, string NextToken, SearchUsersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SearchUsers?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchUsersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Triggers an asynchronous flow to send text, SSML, or audio announcements to rooms that are identified by a search or filter.
		/// SendAnnouncement #X-Amz-Target=AlexaForBusiness.SendAnnouncement
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendAnnouncementResponse> SendAnnouncementAsync(SendAnnouncementRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SendAnnouncement";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SendAnnouncementResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sends an enrollment invitation email with a URL to a user. The URL is valid for 30 days or until you call this operation again, whichever comes first.
		/// SendInvitation #X-Amz-Target=AlexaForBusiness.SendInvitation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendInvitationResponse> SendInvitationAsync(SendInvitationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.SendInvitation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SendInvitationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Resets a device and its account to the known default settings. This clears all information and settings set by previous users in the following ways:</p> <ul> <li> <p>Bluetooth - This unpairs all bluetooth devices paired with your echo device.</p> </li> <li> <p>Volume - This resets the echo device's volume to the default value.</p> </li> <li> <p>Notifications - This clears all notifications from your echo device.</p> </li> <li> <p>Lists - This clears all to-do items from your echo device.</p> </li> <li> <p>Settings - This internally syncs the room's profile (if the device is assigned to a room), contacts, address books, delegation access for account linking, and communications (if enabled on the room profile).</p> </li> </ul>
		/// StartDeviceSync #X-Amz-Target=AlexaForBusiness.StartDeviceSync
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartDeviceSyncResponse> StartDeviceSyncAsync(StartDeviceSyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.StartDeviceSync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartDeviceSyncResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Initiates the discovery of any smart home appliances associated with the room.
		/// StartSmartHomeApplianceDiscovery #X-Amz-Target=AlexaForBusiness.StartSmartHomeApplianceDiscovery
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartSmartHomeApplianceDiscoveryResponse> StartSmartHomeApplianceDiscoveryAsync(StartSmartHomeApplianceDiscoveryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.StartSmartHomeApplianceDiscovery";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartSmartHomeApplianceDiscoveryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds metadata tags to a specified resource.
		/// TagResource #X-Amz-Target=AlexaForBusiness.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.TagResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes metadata tags from a specified resource.
		/// UntagResource #X-Amz-Target=AlexaForBusiness.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UntagResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates address book details by the address book ARN.
		/// UpdateAddressBook #X-Amz-Target=AlexaForBusiness.UpdateAddressBook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAddressBookResponse> UpdateAddressBookAsync(UpdateAddressBookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateAddressBook";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateAddressBookResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the configuration of the report delivery schedule with the specified schedule ARN.
		/// UpdateBusinessReportSchedule #X-Amz-Target=AlexaForBusiness.UpdateBusinessReportSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateBusinessReportScheduleResponse> UpdateBusinessReportScheduleAsync(UpdateBusinessReportScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateBusinessReportSchedule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateBusinessReportScheduleResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing conference provider's settings.
		/// UpdateConferenceProvider #X-Amz-Target=AlexaForBusiness.UpdateConferenceProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateConferenceProviderResponse> UpdateConferenceProviderAsync(UpdateConferenceProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateConferenceProvider";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateConferenceProviderResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the contact details by the contact ARN.
		/// UpdateContact #X-Amz-Target=AlexaForBusiness.UpdateContact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateContactResponse> UpdateContactAsync(UpdateContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateContact";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateContactResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the device name by device ARN.
		/// UpdateDevice #X-Amz-Target=AlexaForBusiness.UpdateDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDeviceResponse> UpdateDeviceAsync(UpdateDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateDevice";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateDeviceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the details of a gateway. If any optional field is not provided, the existing corresponding value is left unmodified.
		/// UpdateGateway #X-Amz-Target=AlexaForBusiness.UpdateGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateGatewayResponse> UpdateGatewayAsync(UpdateGatewayRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateGateway";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateGatewayResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the details of a gateway group. If any optional field is not provided, the existing corresponding value is left unmodified.
		/// UpdateGatewayGroup #X-Amz-Target=AlexaForBusiness.UpdateGatewayGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateGatewayGroupResponse> UpdateGatewayGroupAsync(UpdateGatewayGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateGatewayGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateGatewayGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a network profile by the network profile ARN.
		/// UpdateNetworkProfile #X-Amz-Target=AlexaForBusiness.UpdateNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNetworkProfileResponse> UpdateNetworkProfileAsync(UpdateNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateNetworkProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateNetworkProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing room profile by room profile ARN.
		/// UpdateProfile #X-Amz-Target=AlexaForBusiness.UpdateProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProfileResponse> UpdateProfileAsync(UpdateProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateProfile";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates room details by room ARN.
		/// UpdateRoom #X-Amz-Target=AlexaForBusiness.UpdateRoom
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateRoomResponse> UpdateRoomAsync(UpdateRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateRoom";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateRoomResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates skill group details by skill group ARN.
		/// UpdateSkillGroup #X-Amz-Target=AlexaForBusiness.UpdateSkillGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSkillGroupResponse> UpdateSkillGroupAsync(UpdateSkillGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AlexaForBusiness.UpdateSkillGroup";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSkillGroupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum ApproveSkillX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ApproveSkill")]
		AlexaForBusiness_ApproveSkill = 0,
	}
	
	public enum AssociateContactWithAddressBookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.AssociateContactWithAddressBook")]
		AlexaForBusiness_AssociateContactWithAddressBook = 0,
	}
	
	public enum AssociateDeviceWithNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.AssociateDeviceWithNetworkProfile")]
		AlexaForBusiness_AssociateDeviceWithNetworkProfile = 0,
	}
	
	public enum AssociateDeviceWithRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.AssociateDeviceWithRoom")]
		AlexaForBusiness_AssociateDeviceWithRoom = 0,
	}
	
	public enum AssociateSkillGroupWithRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.AssociateSkillGroupWithRoom")]
		AlexaForBusiness_AssociateSkillGroupWithRoom = 0,
	}
	
	public enum AssociateSkillWithSkillGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.AssociateSkillWithSkillGroup")]
		AlexaForBusiness_AssociateSkillWithSkillGroup = 0,
	}
	
	public enum AssociateSkillWithUsersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.AssociateSkillWithUsers")]
		AlexaForBusiness_AssociateSkillWithUsers = 0,
	}
	
	public enum CreateAddressBookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateAddressBook")]
		AlexaForBusiness_CreateAddressBook = 0,
	}
	
	public enum CreateBusinessReportScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateBusinessReportSchedule")]
		AlexaForBusiness_CreateBusinessReportSchedule = 0,
	}
	
	public enum CreateConferenceProviderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateConferenceProvider")]
		AlexaForBusiness_CreateConferenceProvider = 0,
	}
	
	public enum CreateContactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateContact")]
		AlexaForBusiness_CreateContact = 0,
	}
	
	public enum CreateGatewayGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateGatewayGroup")]
		AlexaForBusiness_CreateGatewayGroup = 0,
	}
	
	public enum CreateNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateNetworkProfile")]
		AlexaForBusiness_CreateNetworkProfile = 0,
	}
	
	public enum CreateProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateProfile")]
		AlexaForBusiness_CreateProfile = 0,
	}
	
	public enum CreateRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateRoom")]
		AlexaForBusiness_CreateRoom = 0,
	}
	
	public enum CreateSkillGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateSkillGroup")]
		AlexaForBusiness_CreateSkillGroup = 0,
	}
	
	public enum CreateUserX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.CreateUser")]
		AlexaForBusiness_CreateUser = 0,
	}
	
	public enum DeleteAddressBookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteAddressBook")]
		AlexaForBusiness_DeleteAddressBook = 0,
	}
	
	public enum DeleteBusinessReportScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteBusinessReportSchedule")]
		AlexaForBusiness_DeleteBusinessReportSchedule = 0,
	}
	
	public enum DeleteConferenceProviderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteConferenceProvider")]
		AlexaForBusiness_DeleteConferenceProvider = 0,
	}
	
	public enum DeleteContactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteContact")]
		AlexaForBusiness_DeleteContact = 0,
	}
	
	public enum DeleteDeviceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteDevice")]
		AlexaForBusiness_DeleteDevice = 0,
	}
	
	public enum DeleteDeviceUsageDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteDeviceUsageData")]
		AlexaForBusiness_DeleteDeviceUsageData = 0,
	}
	
	public enum DeleteGatewayGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteGatewayGroup")]
		AlexaForBusiness_DeleteGatewayGroup = 0,
	}
	
	public enum DeleteNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteNetworkProfile")]
		AlexaForBusiness_DeleteNetworkProfile = 0,
	}
	
	public enum DeleteProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteProfile")]
		AlexaForBusiness_DeleteProfile = 0,
	}
	
	public enum DeleteRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteRoom")]
		AlexaForBusiness_DeleteRoom = 0,
	}
	
	public enum DeleteRoomSkillParameterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteRoomSkillParameter")]
		AlexaForBusiness_DeleteRoomSkillParameter = 0,
	}
	
	public enum DeleteSkillAuthorizationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteSkillAuthorization")]
		AlexaForBusiness_DeleteSkillAuthorization = 0,
	}
	
	public enum DeleteSkillGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteSkillGroup")]
		AlexaForBusiness_DeleteSkillGroup = 0,
	}
	
	public enum DeleteUserX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DeleteUser")]
		AlexaForBusiness_DeleteUser = 0,
	}
	
	public enum DisassociateContactFromAddressBookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DisassociateContactFromAddressBook")]
		AlexaForBusiness_DisassociateContactFromAddressBook = 0,
	}
	
	public enum DisassociateDeviceFromRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DisassociateDeviceFromRoom")]
		AlexaForBusiness_DisassociateDeviceFromRoom = 0,
	}
	
	public enum DisassociateSkillFromSkillGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DisassociateSkillFromSkillGroup")]
		AlexaForBusiness_DisassociateSkillFromSkillGroup = 0,
	}
	
	public enum DisassociateSkillFromUsersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DisassociateSkillFromUsers")]
		AlexaForBusiness_DisassociateSkillFromUsers = 0,
	}
	
	public enum DisassociateSkillGroupFromRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.DisassociateSkillGroupFromRoom")]
		AlexaForBusiness_DisassociateSkillGroupFromRoom = 0,
	}
	
	public enum ForgetSmartHomeAppliancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ForgetSmartHomeAppliances")]
		AlexaForBusiness_ForgetSmartHomeAppliances = 0,
	}
	
	public enum GetAddressBookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetAddressBook")]
		AlexaForBusiness_GetAddressBook = 0,
	}
	
	public enum GetConferencePreferenceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetConferencePreference")]
		AlexaForBusiness_GetConferencePreference = 0,
	}
	
	public enum GetConferenceProviderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetConferenceProvider")]
		AlexaForBusiness_GetConferenceProvider = 0,
	}
	
	public enum GetContactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetContact")]
		AlexaForBusiness_GetContact = 0,
	}
	
	public enum GetDeviceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetDevice")]
		AlexaForBusiness_GetDevice = 0,
	}
	
	public enum GetGatewayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetGateway")]
		AlexaForBusiness_GetGateway = 0,
	}
	
	public enum GetGatewayGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetGatewayGroup")]
		AlexaForBusiness_GetGatewayGroup = 0,
	}
	
	public enum GetInvitationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetInvitationConfiguration")]
		AlexaForBusiness_GetInvitationConfiguration = 0,
	}
	
	public enum GetNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetNetworkProfile")]
		AlexaForBusiness_GetNetworkProfile = 0,
	}
	
	public enum GetProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetProfile")]
		AlexaForBusiness_GetProfile = 0,
	}
	
	public enum GetRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetRoom")]
		AlexaForBusiness_GetRoom = 0,
	}
	
	public enum GetRoomSkillParameterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetRoomSkillParameter")]
		AlexaForBusiness_GetRoomSkillParameter = 0,
	}
	
	public enum GetSkillGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.GetSkillGroup")]
		AlexaForBusiness_GetSkillGroup = 0,
	}
	
	public enum ListBusinessReportSchedulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListBusinessReportSchedules")]
		AlexaForBusiness_ListBusinessReportSchedules = 0,
	}
	
	public enum ListConferenceProvidersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListConferenceProviders")]
		AlexaForBusiness_ListConferenceProviders = 0,
	}
	
	public enum ListDeviceEventsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListDeviceEvents")]
		AlexaForBusiness_ListDeviceEvents = 0,
	}
	
	public enum ListGatewayGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListGatewayGroups")]
		AlexaForBusiness_ListGatewayGroups = 0,
	}
	
	public enum ListGatewaysX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListGateways")]
		AlexaForBusiness_ListGateways = 0,
	}
	
	public enum ListSkillsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListSkills")]
		AlexaForBusiness_ListSkills = 0,
	}
	
	public enum ListSkillsStoreCategoriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListSkillsStoreCategories")]
		AlexaForBusiness_ListSkillsStoreCategories = 0,
	}
	
	public enum ListSkillsStoreSkillsByCategoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListSkillsStoreSkillsByCategory")]
		AlexaForBusiness_ListSkillsStoreSkillsByCategory = 0,
	}
	
	public enum ListSmartHomeAppliancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListSmartHomeAppliances")]
		AlexaForBusiness_ListSmartHomeAppliances = 0,
	}
	
	public enum ListTagsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ListTags")]
		AlexaForBusiness_ListTags = 0,
	}
	
	public enum PutConferencePreferenceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.PutConferencePreference")]
		AlexaForBusiness_PutConferencePreference = 0,
	}
	
	public enum PutInvitationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.PutInvitationConfiguration")]
		AlexaForBusiness_PutInvitationConfiguration = 0,
	}
	
	public enum PutRoomSkillParameterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.PutRoomSkillParameter")]
		AlexaForBusiness_PutRoomSkillParameter = 0,
	}
	
	public enum PutSkillAuthorizationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.PutSkillAuthorization")]
		AlexaForBusiness_PutSkillAuthorization = 0,
	}
	
	public enum RegisterAVSDeviceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.RegisterAVSDevice")]
		AlexaForBusiness_RegisterAVSDevice = 0,
	}
	
	public enum RejectSkillX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.RejectSkill")]
		AlexaForBusiness_RejectSkill = 0,
	}
	
	public enum ResolveRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.ResolveRoom")]
		AlexaForBusiness_ResolveRoom = 0,
	}
	
	public enum RevokeInvitationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.RevokeInvitation")]
		AlexaForBusiness_RevokeInvitation = 0,
	}
	
	public enum SearchAddressBooksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchAddressBooks")]
		AlexaForBusiness_SearchAddressBooks = 0,
	}
	
	public enum SearchContactsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchContacts")]
		AlexaForBusiness_SearchContacts = 0,
	}
	
	public enum SearchDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchDevices")]
		AlexaForBusiness_SearchDevices = 0,
	}
	
	public enum SearchNetworkProfilesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchNetworkProfiles")]
		AlexaForBusiness_SearchNetworkProfiles = 0,
	}
	
	public enum SearchProfilesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchProfiles")]
		AlexaForBusiness_SearchProfiles = 0,
	}
	
	public enum SearchRoomsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchRooms")]
		AlexaForBusiness_SearchRooms = 0,
	}
	
	public enum SearchSkillGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchSkillGroups")]
		AlexaForBusiness_SearchSkillGroups = 0,
	}
	
	public enum SearchUsersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SearchUsers")]
		AlexaForBusiness_SearchUsers = 0,
	}
	
	public enum SendAnnouncementX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SendAnnouncement")]
		AlexaForBusiness_SendAnnouncement = 0,
	}
	
	public enum SendInvitationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.SendInvitation")]
		AlexaForBusiness_SendInvitation = 0,
	}
	
	public enum StartDeviceSyncX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.StartDeviceSync")]
		AlexaForBusiness_StartDeviceSync = 0,
	}
	
	public enum StartSmartHomeApplianceDiscoveryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.StartSmartHomeApplianceDiscovery")]
		AlexaForBusiness_StartSmartHomeApplianceDiscovery = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.TagResource")]
		AlexaForBusiness_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UntagResource")]
		AlexaForBusiness_UntagResource = 0,
	}
	
	public enum UpdateAddressBookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateAddressBook")]
		AlexaForBusiness_UpdateAddressBook = 0,
	}
	
	public enum UpdateBusinessReportScheduleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateBusinessReportSchedule")]
		AlexaForBusiness_UpdateBusinessReportSchedule = 0,
	}
	
	public enum UpdateConferenceProviderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateConferenceProvider")]
		AlexaForBusiness_UpdateConferenceProvider = 0,
	}
	
	public enum UpdateContactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateContact")]
		AlexaForBusiness_UpdateContact = 0,
	}
	
	public enum UpdateDeviceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateDevice")]
		AlexaForBusiness_UpdateDevice = 0,
	}
	
	public enum UpdateGatewayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateGateway")]
		AlexaForBusiness_UpdateGateway = 0,
	}
	
	public enum UpdateGatewayGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateGatewayGroup")]
		AlexaForBusiness_UpdateGatewayGroup = 0,
	}
	
	public enum UpdateNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateNetworkProfile")]
		AlexaForBusiness_UpdateNetworkProfile = 0,
	}
	
	public enum UpdateProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateProfile")]
		AlexaForBusiness_UpdateProfile = 0,
	}
	
	public enum UpdateRoomX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateRoom")]
		AlexaForBusiness_UpdateRoom = 0,
	}
	
	public enum UpdateSkillGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AlexaForBusiness.UpdateSkillGroup")]
		AlexaForBusiness_UpdateSkillGroup = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
