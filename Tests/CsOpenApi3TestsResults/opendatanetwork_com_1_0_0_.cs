//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Data_Availability
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Data_Constraints
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Data_Values
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entity_Lookup
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entity_Relationships
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Map_Creation
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Search_Datasets
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Search_Questions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Suggestions
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Find all available data for some entities
		/// Find_all_available_data_for_some_entities data/v1/availability/
		/// </summary>
		/// <param name="entity_id">Comma separated list of entity IDs.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Find_all_available_data_for_some_entitiesAsync(string entity_id, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/v1/availability/?entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get constraint permutations for entities
		/// Get_constraint_permutations_for_entities data/v1/constraint/{variable}
		/// </summary>
		/// <param name="variable">Full ID of the variable to retrieve.</param>
		/// <param name="entity_id">Comma separated list of entity IDs.</param>
		/// <param name="constraint">Constraint to use.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Get_constraint_permutations_for_entitiesAsync(string variable, string entity_id, string constraint, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/v1/constraint/"+ (variable==null? "" : System.Uri.EscapeDataString(variable))+"&entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&constraint=" + (constraint==null? "" : System.Uri.EscapeDataString(constraint))+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a map
		/// Create_a_map data/v1/map/new
		/// </summary>
		/// <param name="variable">A single variable ID.</param>
		/// <param name="entity_id">A comma separated list of entity IDs.
		///Entities must have the same type and represent geographical regions.</param>
		/// <param name="constraint">Values must be specified for each constraint in the dataset.
		///For example, to generate map data for `demographics.population.count`,
		///you must specify a value for `year` by passing `year=2013`.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Create_a_mapAsync(string variable, string entity_id, string constraint, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/v1/map/new?variable=" + (variable==null? "" : System.Uri.EscapeDataString(variable))+"&entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&constraint=" + (constraint==null? "" : System.Uri.EscapeDataString(constraint))+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get values for variables
		/// Get_values_for_variables data/v1/values
		/// </summary>
		/// <param name="variable">Comma separated list of variable IDs.
		///Defaults to retrieving all variables.
		///It is also possible to pass in a topic such as
		///`demographics`, or a dataset such as `demographics.population`,
		///which would both be equivalent to specifying
		///`demographics.population.count` and `demographics.population.change`.
		///Note that only variables in the same dataset are allowed.</param>
		/// <param name="entity_id">Comma separated list of entity IDs.
		///Defaults to retrieving all entities.
		///Note that since there is currently no results pagination,
		///retrieving values for all entities may produce incomplete results.</param>
		/// <param name="forecast">Number of steps to forecast.
		///Must be an integer between 0 and 20.
		///Forecasts are produced using linear extrapolation
		///on the data. They are only available when retrieving
		///data for a single variable across many numerical
		///constraint options.
		///
		///+ Default `0`</param>
		/// <param name="describe">Whether or not to produce a description of the data.
		///Set to `true` to produce a description.
		///Descriptions are not available if no entities are specified.
		///
		///+ Default `false`</param>
		/// <param name="format">If format is set to `google`, the data frame will be formatted
		///as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class).
		///If the format is not provided or invalid, then the frame
		///will be formatted normally.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Get_values_for_variablesAsync(string variable, string entity_id, double forecast, bool describe, Get_values_for_variablesFormat format, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data/v1/values?variable=" + (variable==null? "" : System.Uri.EscapeDataString(variable))+"&entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&forecast="+forecast+"&describe="+describe+"&format=" + format+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Entities
		/// Get_Entities entity/v1
		/// </summary>
		/// <param name="entity_id">ID of the entity.</param>
		/// <param name="entity_name">Name of the entity.</param>
		/// <param name="entity_type">Type of the entity.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Get_EntitiesAsync(string entity_id, string entity_name, string entity_type, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entity/v1?entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&entity_name=" + (entity_name==null? "" : System.Uri.EscapeDataString(entity_name))+"&entity_type=" + (entity_type==null? "" : System.Uri.EscapeDataString(entity_type))+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find the relatives of an entity
		/// Find_the_relatives_of_an_entity entity/v1/{relation}
		/// </summary>
		/// <param name="relation">The type of relation to find.</param>
		/// <param name="entity_id">ID of the target entity.</param>
		/// <param name="variable_id">If this parameter is included, only entities with data for the given
		///variable will be returned. Note that this may cause the number of
		///entities returned to be less than the specified `limit`.</param>
		/// <param name="limit">Maximum number of entities in each group.
		///Must be an integer from 1 to 1000.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Find_the_relatives_of_an_entityAsync(Find_the_relatives_of_an_entityRelation relation, string entity_id, string variable_id, double limit, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entity/v1/"+relation+"?entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&variable_id=" + (variable_id==null? "" : System.Uri.EscapeDataString(variable_id))+"&limit="+limit+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get datasets
		/// Get_datasets search/v1/dataset
		/// </summary>
		/// <param name="entity_id">Entities to use in formulating the query.</param>
		/// <param name="dataset_id">If included, the search terms of the dataset
		///will be used in the query.</param>
		/// <param name="limit">Maximum number of results to return.
		///Must be an integer from 0 to 50000.</param>
		/// <param name="offset">Number of results to skip.
		///Used for pagination.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Get_datasetsAsync(string entity_id, string dataset_id, double limit, double offset, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/v1/dataset?entity_id=" + (entity_id==null? "" : System.Uri.EscapeDataString(entity_id))+"&dataset_id=" + (dataset_id==null? "" : System.Uri.EscapeDataString(dataset_id))+"&limit="+limit+"&offset="+offset+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get questions
		/// Get_questions search/v1/question
		/// </summary>
		/// <param name="query">String to search against.</param>
		/// <param name="limit">Maximum number of results to return.
		///Must be an integer from 0 to 50000.</param>
		/// <param name="offset">Number of results to skip.
		///Used for pagination.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Get_questionsAsync(string query, double limit, double offset, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/v1/question?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&limit="+limit+"&offset="+offset+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get suggestions
		/// Get_suggestions suggest/v1/{type}
		/// </summary>
		/// <param name="type">Type of the object to find.</param>
		/// <param name="query">Query to match.</param>
		/// <param name="limit">Maximum number of results to return.
		///Must be an integer from 0 to 100.</param>
		/// <param name="variable_id">This parameter is only available when suggesting entities with `type=entity`.
		///If it is provided, suggestions will be filtered to include
		///only entities that have data for the given variable.
		///
		///If the variable provided is invalid, no entities will be returned.
		///
		///Note that this filtering will increase response time significantly,
		///so it should only be used when necessary.</param>
		/// <param name="app_token">The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be
		///used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).</param>
		/// <returns>OK</returns>
		public async Task Get_suggestionsAsync(Get_suggestionsType type, string query, double limit, string variable_id, string app_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suggest/v1/"+type+"?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&limit="+limit+"&variable_id=" + (variable_id==null? "" : System.Uri.EscapeDataString(variable_id))+"&app_token=" + (app_token==null? "" : System.Uri.EscapeDataString(app_token));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Get_values_for_variablesFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		google = 0,
	}
	
	public enum Find_the_relatives_of_an_entityRelation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		parent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		child = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sibling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		peer = 3,
	}
	
	public enum Get_suggestionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		entity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		category = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publisher = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataset = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		question = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
