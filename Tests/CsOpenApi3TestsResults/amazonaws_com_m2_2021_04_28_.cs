//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelBatchJobExecutionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateApplicationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationArn")]
		public string ApplicationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDataSetImportTaskResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	/// <summary>
	/// Identifies a specific data set to import from an external location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSetImportItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSet")]
		public DataSet DataSet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalLocation")]
		public ExternalLocation ExternalLocation { get; set; }
	}
	
	/// <summary>
	/// Defines a data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetName")]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetOrg")]
		public DatasetOrgAttributes DatasetOrg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recordLength")]
		public RecordLength RecordLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageType")]
		public string StorageType { get; set; }
	}
	
	/// <summary>
	/// Additional details about the data set. Different attributes correspond to different data set organizations. The values are populated based on datasetOrg, storageType and backend (Blu Age or Micro Focus).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetOrgAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="gdg")]
		public GdgAttributes Gdg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="po")]
		public PoAttributes Po { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ps")]
		public PsAttributes Ps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vsam")]
		public VsamAttributes Vsam { get; set; }
	}
	
	/// <summary>
	/// The required attributes for a generation data group data set. A generation data set is one of a collection of successive, historically related, catalogued data sets that together are known as a generation data group (GDG). Use this structure when you want to import a GDG. For more information on GDG, see <a href="https://www.ibm.com/docs/en/zos/2.3.0?topic=guide-generation-data-sets">Generation data sets</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdgAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rollDisposition")]
		public string RollDisposition { get; set; }
	}
	
	/// <summary>
	/// The supported properties for a PO type data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="memberFileExtensions")]
		public string[] MemberFileExtensions { get; set; }
	}
	
	/// <summary>
	/// The supported properties for a PS type data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PsAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
	}
	
	/// <summary>
	/// The attributes of a VSAM type data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VsamAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternateKeys")]
		public AlternateKey[] AlternateKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compressed")]
		public System.Nullable<System.Boolean> Compressed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public PrimaryKey PrimaryKey { get; set; }
	}
	
	/// <summary>
	/// Defines an alternate key. This value is optional. A legacy data set might not have any alternate key defined but if those alternate keys definitions exist, provide them, as some applications will make use of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlternateKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowDuplicates")]
		public System.Nullable<System.Boolean> AllowDuplicates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public int Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public int Offset { get; set; }
	}
	
	/// <summary>
	/// The primary key for a KSDS data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrimaryKey
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public int Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public int Offset { get; set; }
	}
	
	/// <summary>
	/// The length of the records in the data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordLength
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max")]
		public int Max { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="min")]
		public int Min { get; set; }
	}
	
	/// <summary>
	/// Defines an external storage location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
	}
	
	/// <summary>
	/// Defines the storage configuration for a runtime environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="efs")]
		public EfsStorageConfiguration Efs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fsx")]
		public FsxStorageConfiguration Fsx { get; set; }
	}
	
	/// <summary>
	/// Defines the storage configuration for an Amazon EFS file system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EfsStorageConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystemId")]
		public string FileSystemId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
	}
	
	/// <summary>
	/// Defines the storage configuration for an Amazon FSx file system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FsxStorageConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSystemId")]
		public string FileSystemId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteApplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteApplicationFromEnvironmentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEnvironmentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationArn")]
		public string ApplicationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deployedVersion")]
		public DeployedVersionSummary DeployedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStartTime")]
		public System.DateTimeOffset LastStartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latestVersion")]
		public ApplicationVersionSummary LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listenerArns")]
		public string[] ListenerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listenerPorts")]
		public System.Nullable<System.Int32> ListenerPorts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancerDnsName")]
		public string LoadBalancerDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logGroups")]
		public LogGroupSummary[] LogGroups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ApplicationLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetGroupArns")]
		public string[] TargetGroupArns { get; set; }
	}
	
	/// <summary>
	/// Contains a summary of a deployed application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeployedVersionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DeploymentLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deploying = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		microfocus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bluage = 1,
	}
	
	/// <summary>
	/// Defines an application version summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationVersionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ApplicationVersionLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationVersionLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// A subset of the attributes that describe a log group. In CloudWatch a log group is a group of log streams that share the same retention, monitoring, and access control settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogGroupSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logGroupName")]
		public string LogGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public string LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Starting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Deleting From Environment")]
		Deleting_From_Environment = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationVersionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definitionContent")]
		public string DefinitionContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ApplicationVersionLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBatchJobExecutionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="batchJobIdentifier")]
		public BatchJobIdentifier BatchJobIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public BatchJobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobUser")]
		public string JobUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnCode")]
		public string ReturnCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BatchJobExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	/// <summary>
	/// Identifies a specific batch job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchJobIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileBatchJobIdentifier")]
		public FileBatchJobIdentifier FileBatchJobIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptBatchJobIdentifier")]
		public ScriptBatchJobIdentifier ScriptBatchJobIdentifier { get; set; }
	}
	
	/// <summary>
	/// A batch job identifier in which the batch job to run is identified by the file name and the relative path to the file name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileBatchJobIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
	}
	
	/// <summary>
	/// A batch job identifier in which the batch job to run is identified by the script name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptBatchJobIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scriptName")]
		public string ScriptName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JES2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JES3 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchJobExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Submitting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Holding = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dispatching = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Succeeded With Warning")]
		Succeeded_With_Warning = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDataSetDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="blocksize")]
		public System.Nullable<System.Int32> Blocksize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetName")]
		public string DataSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataSetOrg")]
		public DatasetDetailOrgAttributes DataSetOrg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastReferencedTime")]
		public System.DateTimeOffset LastReferencedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordLength")]
		public System.Nullable<System.Int32> RecordLength { get; set; }
	}
	
	/// <summary>
	/// Additional details about the data set. Different attributes correspond to different data set organizations. The values are populated based on datasetOrg, storageType and backend (Blu Age or Micro Focus).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetDetailOrgAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="gdg")]
		public GdgDetailAttributes Gdg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="po")]
		public PoDetailAttributes Po { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ps")]
		public PsDetailAttributes Ps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vsam")]
		public VsamDetailAttributes Vsam { get; set; }
	}
	
	/// <summary>
	/// The required attributes for a generation data group data set. A generation data set is one of a collection of successive, historically related, catalogued data sets that together are known as a generation data group (GDG). Use this structure when you want to import a GDG. For more information on GDG, see <a href="https://www.ibm.com/docs/en/zos/2.3.0?topic=guide-generation-data-sets">Generation data sets</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GdgDetailAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rollDisposition")]
		public string RollDisposition { get; set; }
	}
	
	/// <summary>
	/// The supported properties for a PO type data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoDetailAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
	}
	
	/// <summary>
	/// The supported properties for a PS type data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PsDetailAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
	}
	
	/// <summary>
	/// The attributes of a VSAM type data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VsamDetailAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternateKeys")]
		public AlternateKey[] AlternateKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheAtStartup")]
		public System.Nullable<System.Boolean> CacheAtStartup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compressed")]
		public System.Nullable<System.Boolean> Compressed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public PrimaryKey PrimaryKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordFormat")]
		public string RecordFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDataSetImportTaskResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataSetTaskLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public DataSetImportSummary Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataSetTaskLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
	}
	
	/// <summary>
	/// Represents a summary of data set imports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSetImportSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public int Failed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inProgress")]
		public int InProgress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public int Pending { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="succeeded")]
		public int Succeeded { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DeploymentLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actualCapacity")]
		public System.Nullable<System.Int32> ActualCapacity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="highAvailabilityConfig")]
		public HighAvailabilityConfig HighAvailabilityConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancerArn")]
		public string LoadBalancerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingMaintenance")]
		public PendingMaintenance PendingMaintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageConfigurations")]
		public StorageConfiguration[] StorageConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Defines the details of a high availability configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HighAvailabilityConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="desiredCapacity")]
		public int DesiredCapacity { get; set; }
	}
	
	/// <summary>
	/// The scheduled maintenance for a runtime engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingMaintenance
	{
		
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public MaintenanceSchedule Schedule { get; set; }
	}
	
	/// <summary>
	/// The information about the maintenance schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSignedBluinsightsUrlResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signedBiUrl")]
		public string SignedBiUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationVersionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersions")]
		public ApplicationVersionSummary[] ApplicationVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public ApplicationSummary[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A subset of the possible application attributes. Used in the application list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationArn")]
		public string ApplicationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStatus")]
		public ApplicationDeploymentLifecycle DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStartTime")]
		public System.DateTimeOffset LastStartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ApplicationLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionStatus")]
		public ApplicationVersionLifecycle VersionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationDeploymentLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deploying = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deployed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBatchJobDefinitionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchJobDefinitions")]
		public BatchJobDefinition[] BatchJobDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Defines the details of a batch job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchJobDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileBatchJobDefinition")]
		public FileBatchJobDefinition FileBatchJobDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptBatchJobDefinition")]
		public ScriptBatchJobDefinition ScriptBatchJobDefinition { get; set; }
	}
	
	/// <summary>
	/// A file containing a batch job definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileBatchJobDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
	}
	
	/// <summary>
	/// A batch job definition contained in a script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptBatchJobDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scriptName")]
		public string ScriptName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBatchJobExecutionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchJobExecutions")]
		public BatchJobExecutionSummary[] BatchJobExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A subset of the possible batch job attributes. Used in the batch job list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchJobExecutionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="batchJobIdentifier")]
		public BatchJobIdentifier BatchJobIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public BatchJobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnCode")]
		public string ReturnCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BatchJobExecutionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDataSetImportHistoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetImportTasks")]
		public DataSetImportTask[] DataSetImportTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a data set import task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSetImportTask
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataSetTaskLifecycle Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public DataSetImportSummary Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDataSetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSets")]
		public DataSetSummary[] DataSets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A subset of the possible data set attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSetSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSetName")]
		public string DataSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataSetOrg")]
		public string DataSetOrg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastReferencedTime")]
		public System.DateTimeOffset LastReferencedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deployments")]
		public DeploymentSummary[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A subset of information about a specific deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DeploymentLifecycle Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEngineVersionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineVersions")]
		public EngineVersionsSummary[] EngineVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A subset of information about the engine version for a specific application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EngineVersionsSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public string EngineType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEnvironmentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public EnvironmentSummary[] Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains a subset of the possible runtime environment attributes. Used in the environment list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvironmentSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentLifecycle Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartApplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBatchJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopApplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateApplicationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
	}
	
	/// <summary>
	/// Job parameters are optional. Can contain up to 500 entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchJobParametersMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelBatchJobExecutionRequest
	{
	}
	
	/// <summary>
	/// The application definition for a particular application. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Definition
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Definition Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Identifies one or more data sets you want to import with the <a>CreateDataSetImportTask</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSetImportConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataSets")]
		public DataSetImportItem[] DataSets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDataSetImportTaskRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importConfig")]
		public DataSetImportConfig ImportConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public int ApplicationVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEnvironmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="highAvailabilityConfig")]
		public HighAvailabilityConfig HighAvailabilityConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageConfigurations")]
		public StorageConfiguration[] StorageConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteApplicationFromEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBatchJobExecutionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDataSetDetailsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDataSetImportTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBatchJobDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBatchJobExecutionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDataSetImportHistoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDataSetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEngineVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEnvironmentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBatchJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchJobIdentifier")]
		public BatchJobIdentifier BatchJobIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobParams")]
		public BatchJobParametersMap JobParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="forceStop")]
		public System.Nullable<System.Boolean> ForceStop { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateApplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentApplicationVersion")]
		public int CurrentApplicationVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Definition Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEnvironmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="applyDuringMaintenanceWindow")]
		public System.Nullable<System.Boolean> ApplyDuringMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="desiredCapacity")]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		public string PreferredMaintenanceWindow { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels the running of a specific batch job execution.
		/// CancelBatchJobExecution applications/{applicationId}/batch-job-executions/{executionId}/cancel
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application.</param>
		/// <param name="executionId">The unique identifier of the batch job execution.</param>
		/// <returns>Success</returns>
		public async Task<CancelBatchJobExecutionResponse> CancelBatchJobExecutionAsync(string applicationId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/batch-job-executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CancelBatchJobExecutionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new application with given parameters. Requires an existing runtime environment and application definition file.
		/// CreateApplication applications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateApplicationResponse> CreateApplicationAsync(CreateApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the applications associated with a specific Amazon Web Services account. You can provide the unique identifier of a specific runtime environment in a query parameter to see all applications associated with that environment.
		/// ListApplications applications
		/// </summary>
		/// <param name="environmentId">The unique identifier of the runtime environment where the applications are deployed.</param>
		/// <param name="maxResults">The maximum number of applications to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="names">The names of the applications.
		/// Minimum items: 1
		/// Maximum items: 10
		// </param>
		/// <param name="nextToken">A pagination token to control the number of applications displayed in the list.</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationsResponse> ListApplicationsAsync(string environmentId, int maxResults, string[] names, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications?environmentId=" + (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"&maxResults="+maxResults+"&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApplicationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts a data set import task for a specific application.
		/// CreateDataSetImportTask applications/{applicationId}/dataset-import-task
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application for which you want to import data sets.</param>
		/// <returns>Success</returns>
		public async Task<CreateDataSetImportTaskResponse> CreateDataSetImportTaskAsync(string applicationId, CreateDataSetImportTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/dataset-import-task";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateDataSetImportTaskResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates and starts a deployment to deploy an application into a runtime environment.
		/// CreateDeployment applications/{applicationId}/deployments
		/// </summary>
		/// <param name="applicationId">The application identifier.</param>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentResponse> CreateDeploymentAsync(string applicationId, CreateDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/deployments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateDeploymentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of all deployments of a specific application. A deployment is a combination of a specific application and a specific version of that application. Each deployment is mapped to a particular application version.
		/// ListDeployments applications/{applicationId}/deployments
		/// </summary>
		/// <param name="applicationId">The application identifier.</param>
		/// <param name="maxResults">The maximum number of objects to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="nextToken">A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentsResponse> ListDeploymentsAsync(string applicationId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/deployments&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDeploymentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a runtime environment for a given runtime engine.
		/// CreateEnvironment environments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEnvironmentResponse> CreateEnvironmentAsync(CreateEnvironmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateEnvironmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the runtime environments.
		/// ListEnvironments environments
		/// </summary>
		/// <param name="engineType">The engine type for the runtime environment.</param>
		/// <param name="maxResults">The maximum number of runtime environments to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="names">The names of the runtime environments. Must be unique within the account.
		/// Minimum items: 1
		/// Maximum items: 10
		// </param>
		/// <param name="nextToken">A pagination token to control the number of runtime environments displayed in the list.</param>
		/// <returns>Success</returns>
		public async Task<ListEnvironmentsResponse> ListEnvironmentsAsync(EngineType engineType, int maxResults, string[] names, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments?engineType=" + engineType+"&maxResults="+maxResults+"&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListEnvironmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a specific application. You cannot delete a running application.
		/// DeleteApplication applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteApplicationResponse> DeleteApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describes the details of a specific application.
		/// GetApplication applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The identifier of the application.</param>
		/// <returns>Success</returns>
		public async Task<GetApplicationResponse> GetApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an application and creates a new version.
		/// UpdateApplication applications/{applicationId}
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateApplicationResponse> UpdateApplicationAsync(string applicationId, UpdateApplicationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a specific application from the specific runtime environment where it was previously deployed. You cannot delete a runtime environment using DeleteEnvironment if any application has ever been deployed to it. This API removes the association of the application with the runtime environment so you can delete the environment smoothly.
		/// DeleteApplicationFromEnvironment applications/{applicationId}/environment/{environmentId}
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application you want to delete.</param>
		/// <param name="environmentId">The unique identifier of the runtime environment where the application was previously deployed.</param>
		/// <returns>Success</returns>
		public async Task<DeleteApplicationFromEnvironmentResponse> DeleteApplicationFromEnvironmentAsync(string applicationId, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/environment/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteApplicationFromEnvironmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a specific runtime environment. The environment cannot contain deployed applications. If it does, you must delete those applications before you delete the environment.
		/// DeleteEnvironment environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">The unique identifier of the runtime environment you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteEnvironmentResponse> DeleteEnvironmentAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteEnvironmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describes a specific runtime environment.
		/// GetEnvironment environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">The unique identifier of the runtime environment.</param>
		/// <returns>Success</returns>
		public async Task<GetEnvironmentResponse> GetEnvironmentAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetEnvironmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the configuration details for a specific runtime environment.
		/// UpdateEnvironment environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">The unique identifier of the runtime environment that you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateEnvironmentResponse> UpdateEnvironmentAsync(string environmentId, UpdateEnvironmentPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateEnvironmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns details about a specific version of a specific application.
		/// GetApplicationVersion applications/{applicationId}/versions/{applicationVersion}
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application.</param>
		/// <param name="applicationVersion">The specific version of the application.
		/// Minimum: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetApplicationVersionResponse> GetApplicationVersionAsync(string applicationId, int applicationVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/versions/"+applicationVersion;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetApplicationVersionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of a specific batch job execution for a specific application.
		/// GetBatchJobExecution applications/{applicationId}/batch-job-executions/{executionId}
		/// </summary>
		/// <param name="applicationId">The identifier of the application.</param>
		/// <param name="executionId">The unique identifier of the batch job execution.</param>
		/// <returns>Success</returns>
		public async Task<GetBatchJobExecutionResponse> GetBatchJobExecutionAsync(string applicationId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/batch-job-executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetBatchJobExecutionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of a specific data set.
		/// GetDataSetDetails applications/{applicationId}/datasets/{dataSetName}
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application that this data set is associated with.</param>
		/// <param name="dataSetName">The name of the data set.</param>
		/// <returns>Success</returns>
		public async Task<GetDataSetDetailsResponse> GetDataSetDetailsAsync(string applicationId, string dataSetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/datasets/"+ (dataSetName==null? "" : System.Uri.EscapeDataString(dataSetName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDataSetDetailsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the status of a data set import task initiated with the <a>CreateDataSetImportTask</a> operation.
		/// GetDataSetImportTask applications/{applicationId}/dataset-import-tasks/{taskId}
		/// </summary>
		/// <param name="applicationId">The application identifier.</param>
		/// <param name="taskId">The task identifier returned by the <a>CreateDataSetImportTask</a> operation. </param>
		/// <returns>Success</returns>
		public async Task<GetDataSetImportTaskResponse> GetDataSetImportTaskAsync(string applicationId, string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/dataset-import-tasks/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDataSetImportTaskResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details of a specific deployment with a given deployment identifier.
		/// GetDeployment applications/{applicationId}/deployments/{deploymentId}
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application.</param>
		/// <param name="deploymentId">The unique identifier for the deployment.</param>
		/// <returns>Success</returns>
		public async Task<GetDeploymentResponse> GetDeploymentAsync(string applicationId, string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDeploymentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a single sign-on URL that can be used to connect to AWS Blu Insights.
		/// GetSignedBluinsightsUrl signed-bi-url
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSignedBluinsightsUrlResponse> GetSignedBluinsightsUrlAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signed-bi-url";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSignedBluinsightsUrlResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of the application versions for a specific application.
		/// ListApplicationVersions applications/{applicationId}/versions
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application.</param>
		/// <param name="maxResults">The maximum number of application versions to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="nextToken">A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationVersionsResponse> ListApplicationVersionsAsync(string applicationId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/versions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListApplicationVersionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the available batch job definitions based on the batch job resources uploaded during the application creation. You can use the batch job definitions in the list to start a batch job.
		/// ListBatchJobDefinitions applications/{applicationId}/batch-job-definitions
		/// </summary>
		/// <param name="applicationId">The identifier of the application.</param>
		/// <param name="maxResults">The maximum number of batch job definitions to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="nextToken">A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</param>
		/// <param name="prefix">If the batch job definition is a FileBatchJobDefinition, the prefix allows you to search on the file names of FileBatchJobDefinitions.</param>
		/// <returns>Success</returns>
		public async Task<ListBatchJobDefinitionsResponse> ListBatchJobDefinitionsAsync(string applicationId, int maxResults, string nextToken, string prefix, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/batch-job-definitions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListBatchJobDefinitionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists historical, current, and scheduled batch job executions for a specific application.
		/// ListBatchJobExecutions applications/{applicationId}/batch-job-executions
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application.</param>
		/// <param name="executionIds">The unique identifier of each batch job execution.
		/// Minimum items: 1
		/// Maximum items: 10
		// </param>
		/// <param name="jobName">The name of each batch job execution.</param>
		/// <param name="maxResults">The maximum number of batch job executions to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="nextToken">A pagination token to control the number of batch job executions displayed in the list.</param>
		/// <param name="startedAfter">The time after which the batch job executions started.</param>
		/// <param name="startedBefore">The time before the batch job executions started.</param>
		/// <param name="status">The status of the batch job executions.</param>
		/// <returns>Success</returns>
		public async Task<ListBatchJobExecutionsResponse> ListBatchJobExecutionsAsync(string applicationId, string[] executionIds, string jobName, int maxResults, string nextToken, System.DateTimeOffset startedAfter, System.DateTimeOffset startedBefore, ListBatchJobExecutionsStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/batch-job-executions&"+string.Join("&", executionIds.Select(z => $"executionIds={System.Uri.EscapeDataString(z.ToString())}"))+"&jobName=" + (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&startedAfter=" + startedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&startedBefore=" + startedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + status;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListBatchJobExecutionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the data set imports for the specified application.
		/// ListDataSetImportHistory applications/{applicationId}/dataset-import-tasks
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application.</param>
		/// <param name="maxResults">The maximum number of objects to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="nextToken">A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</param>
		/// <returns>Success</returns>
		public async Task<ListDataSetImportHistoryResponse> ListDataSetImportHistoryAsync(string applicationId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/dataset-import-tasks&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDataSetImportHistoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the data sets imported for a specific application. In Amazon Web Services Mainframe Modernization, data sets are associated with applications deployed on runtime environments. This is known as importing data sets. Currently, Amazon Web Services Mainframe Modernization can import data sets into catalogs using <a href="https://docs.aws.amazon.com/m2/latest/APIReference/API_CreateDataSetImportTask.html">CreateDataSetImportTask</a>.
		/// ListDataSets applications/{applicationId}/datasets
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application for which you want to list the associated data sets.</param>
		/// <param name="maxResults">The maximum number of objects to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="nextToken">A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</param>
		/// <param name="prefix">The prefix of the data set name, which you can use to filter the list of data sets.</param>
		/// <returns>Success</returns>
		public async Task<ListDataSetsResponse> ListDataSetsAsync(string applicationId, int maxResults, string nextToken, string prefix, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/datasets&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDataSetsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the available engine versions.
		/// ListEngineVersions engine-versions
		/// </summary>
		/// <param name="engineType">The type of target platform.</param>
		/// <param name="maxResults">The maximum number of objects to return.
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="nextToken">A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.</param>
		/// <returns>Success</returns>
		public async Task<ListEngineVersionsResponse> ListEngineVersionsAsync(EngineType engineType, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "engine-versions?engineType=" + engineType+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListEngineVersionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds one or more tags to the specified resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts an application that is currently stopped.
		/// StartApplication applications/{applicationId}/start
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application you want to start.</param>
		/// <returns>Success</returns>
		public async Task<StartApplicationResponse> StartApplicationAsync(string applicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts a batch job and returns the unique identifier of this execution of the batch job. The associated application must be running in order to start the batch job.
		/// StartBatchJob applications/{applicationId}/batch-job
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application associated with this batch job.</param>
		/// <returns>Success</returns>
		public async Task<StartBatchJobResponse> StartBatchJobAsync(string applicationId, StartBatchJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/batch-job";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartBatchJobResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stops a running application.
		/// StopApplication applications/{applicationId}/stop
		/// </summary>
		/// <param name="applicationId">The unique identifier of the application you want to stop.</param>
		/// <returns>Success</returns>
		public async Task<StopApplicationResponse> StopApplicationAsync(string applicationId, StopApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="tagKeys">The keys of the tags to remove.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CreateApplicationPostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier the service generates to ensure the idempotency of the request to create an application. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The application definition for a particular application. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public CreateApplicationPostBodyDefinition Definition { get; set; }
		
		/// <summary>
		/// The description of the application.
		/// Min length: 0
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of the target platform for this application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// The identifier of a customer managed key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// The unique identifier of the application.
		/// Required
		/// Pattern: ^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) that identifies a role that the application uses to access Amazon Web Services resources that are not part of the application or are in a different Amazon Web Services account.
		/// Pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]|):[0-9]{12}:[A-Za-z0-9/][A-Za-z0-9:_/+=,@.-]{0,1023}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]|):[0-9]{12}:[A-Za-z0-9/][A-Za-z0-9:_/+=,@.-]{0,1023}$")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A list of tags to apply to the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateApplicationPostBodyDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
	}
	
	public class CreateDataSetImportTaskPostBody
	{
		
		/// <summary>
		///  Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a data set import. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Identifies one or more data sets you want to import with the <a>CreateDataSetImportTask</a> operation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="importConfig")]
		public CreateDataSetImportTaskPostBodyImportConfig ImportConfig { get; set; }
	}
	
	public class CreateDataSetImportTaskPostBodyImportConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataSets")]
		public DataSetImportItem[] DataSets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
	}
	
	public class CreateDeploymentPostBody
	{
		
		/// <summary>
		/// The version of the application to deploy.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int ApplicationVersion { get; set; }
		
		/// <summary>
		/// Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a deployment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The identifier of the runtime environment where you want to deploy this application.
		/// Required
		/// Pattern: ^\S{1,80}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S{1,80}$")]
		public string EnvironmentId { get; set; }
	}
	
	public class CreateEnvironmentPostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create an environment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The description of the runtime environment.
		/// Min length: 0
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// The engine type for the runtime environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="engineType")]
		public EngineType EngineType { get; set; }
		
		/// <summary>
		/// The version of the engine type for the runtime environment.
		/// Pattern: ^\S{1,10}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S{1,10}$")]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Defines the details of a high availability configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highAvailabilityConfig")]
		public CreateEnvironmentPostBodyHighAvailabilityConfig HighAvailabilityConfig { get; set; }
		
		/// <summary>
		/// The type of instance for the runtime environment.
		/// Required
		/// Pattern: ^\S{1,20}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S{1,20}$")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// The identifier of a customer managed key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// The name of the runtime environment. Must be unique within the account.
		/// Required
		/// Pattern: ^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
		/// Pattern: ^\S{1,50}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S{1,50}$")]
		public string PreferredMaintenanceWindow { get; set; }
		
		/// <summary>
		/// Specifies whether the runtime environment is publicly accessible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		/// <summary>
		/// The list of security groups for the VPC associated with this runtime environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Optional. The storage configurations for this runtime environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageConfigurations")]
		public StorageConfiguration[] StorageConfigurations { get; set; }
		
		/// <summary>
		/// The list of subnets associated with the VPC for this runtime environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// The tags for the runtime environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateEnvironmentPostBodyHighAvailabilityConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="desiredCapacity")]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
	}
	
	public class UpdateApplicationPatchBody
	{
		
		/// <summary>
		/// The current version of the application to update.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentApplicationVersion")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int CurrentApplicationVersion { get; set; }
		
		/// <summary>
		/// The application definition for a particular application. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public UpdateApplicationPatchBodyDefinition Definition { get; set; }
		
		/// <summary>
		/// The description of the application to update.
		/// Min length: 0
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
	}
	
	public class UpdateApplicationPatchBodyDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public string S3Location { get; set; }
	}
	
	public class UpdateEnvironmentPatchBody
	{
		
		/// <summary>
		/// Indicates whether to update the runtime environment during the maintenance window. The default is false. Currently, Amazon Web Services Mainframe Modernization accepts the <code>engineVersion</code> parameter only if <code>applyDuringMaintenanceWindow</code> is true. If any parameter other than <code>engineVersion</code> is provided in <code>UpdateEnvironmentRequest</code>, it will fail if <code>applyDuringMaintenanceWindow</code> is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyDuringMaintenanceWindow")]
		public System.Nullable<System.Boolean> ApplyDuringMaintenanceWindow { get; set; }
		
		/// <summary>
		/// The desired capacity for the runtime environment to update. The minimum possible value is 0 and the maximum is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredCapacity")]
		public System.Nullable<System.Int32> DesiredCapacity { get; set; }
		
		/// <summary>
		/// The version of the runtime engine for the runtime environment.
		/// Pattern: ^\S{1,10}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S{1,10}$")]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// The instance type for the runtime environment to update.
		/// Pattern: ^\S{1,20}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S{1,20}$")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		public string PreferredMaintenanceWindow { get; set; }
	}
	
	public enum ListBatchJobExecutionsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Submitting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Holding = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dispatching = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Succeeded With Warning")]
		Succeeded_With_Warning = 8,
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to add to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartBatchJobPostBody
	{
		
		/// <summary>
		/// Identifies a specific batch job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchJobIdentifier")]
		public StartBatchJobPostBodyBatchJobIdentifier BatchJobIdentifier { get; set; }
		
		/// <summary>
		/// Job parameters are optional. Can contain up to 500 entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobParams")]
		public System.Collections.Generic.Dictionary<string, string> JobParams { get; set; }
	}
	
	public class StartBatchJobPostBodyBatchJobIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileBatchJobIdentifier")]
		public FileBatchJobIdentifier FileBatchJobIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptBatchJobIdentifier")]
		public ScriptBatchJobIdentifier ScriptBatchJobIdentifier { get; set; }
	}
	
	public class StopApplicationPostBody
	{
		
		/// <summary>
		/// Stopping an application process can take a long time. Setting this parameter to true lets you force stop the application so you don't need to wait until the process finishes to apply another action on the application. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceStop")]
		public System.Nullable<System.Boolean> ForceStop { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
