//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get collection by id
		/// Returns a single collection
		/// GetCollectionById collection/{id}
		/// </summary>
		/// <param name="id">Collection id</param>
		/// <returns>No response was specified</returns>
		public async Task GetCollectionByIdAsync(int id)
		{
			var requestUri = "collection/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get collection icons by id
		/// Returns a list of icons associated with a collection
		/// GetCollectionIconsById collection/{id}/icons
		/// </summary>
		/// <param name="id">Collection id</param>
		/// <param name="limit">Maximum number of results</param>
		/// <param name="offset">Number of results to displace or skip over</param>
		/// <param name="page">Number of results of limit length to displace or skip over</param>
		/// <returns>No response was specified</returns>
		public async Task GetCollectionIconsByIdAsync(int id, int limit, int offset, int page)
		{
			var requestUri = "collection/"+id+"/icons?limit="+limit+"&offset="+offset+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get collection by slug
		/// Returns a single collection
		/// GetCollectionBySlug collection/{slug}
		/// </summary>
		/// <param name="slug">Collection slug</param>
		/// <returns>No response was specified</returns>
		public async Task GetCollectionBySlugAsync(string slug)
		{
			var requestUri = "collection/"+ (slug==null? "" : System.Uri.EscapeDataString(slug));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get collection icons by slug
		/// Returns a list of icons associated with a collection
		/// GetCollectionIconsBySlug collection/{slug}/icons
		/// </summary>
		/// <param name="slug">Collection slug</param>
		/// <param name="limit">Maximum number of results</param>
		/// <param name="offset">Number of results to displace or skip over</param>
		/// <param name="page">Number of results of limit length to displace or skip over</param>
		/// <returns>No response was specified</returns>
		public async Task GetCollectionIconsBySlugAsync(string slug, int limit, int offset, int page)
		{
			var requestUri = "collection/"+ (slug==null? "" : System.Uri.EscapeDataString(slug))+"/icons&limit="+limit+"&offset="+offset+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all collections
		/// Return's a list of all collections
		/// GetAllCollections collections
		/// </summary>
		/// <param name="limit">Maximum number of results</param>
		/// <param name="offset">Number of results to displace or skip over</param>
		/// <param name="page">Number of results of limit length to displace or skip over</param>
		/// <returns>No response was specified</returns>
		public async Task GetAllCollectionsAsync(int limit, int offset, int page)
		{
			var requestUri = "collections?limit="+limit+"&offset="+offset+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get icon by id
		/// Returns a single icon
		/// GetIconById icon/{id}
		/// </summary>
		/// <param name="id">Icon id</param>
		/// <returns>No response was specified</returns>
		public async Task GetIconByIdAsync(int id)
		{
			var requestUri = "icon/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get icon by term
		/// Returns a single icon
		/// GetIconByTerm icon/{term}
		/// </summary>
		/// <param name="term">Icon term</param>
		/// <returns>No response was specified</returns>
		public async Task GetIconByTermAsync(string term)
		{
			var requestUri = "icon/"+ (term==null? "" : System.Uri.EscapeDataString(term));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get recent icons
		/// Returns list of most recently uploaded icons
		/// GetRecentIcons icons/recent_uploads
		/// </summary>
		/// <param name="limit">Maximum number of results</param>
		/// <param name="offset">Number of results to displace or skip over</param>
		/// <param name="page">Number of results of limit length to displace or skip over</param>
		/// <returns>No response was specified</returns>
		public async Task GetRecentIconsAsync(int limit, int offset, int page)
		{
			var requestUri = "icons/recent_uploads?limit="+limit+"&offset="+offset+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get icons by term
		/// Returns a list of icons
		/// GetIconsByTerm icons/{term}
		/// </summary>
		/// <param name="term">Icon term</param>
		/// <param name="limit_to_public_domain">Limit results to public domain icons only</param>
		/// <param name="limit">Maximum number of results</param>
		/// <param name="offset">Number of results to displace or skip over</param>
		/// <param name="page">Number of results of limit length to displace or skip over</param>
		/// <returns>No response was specified</returns>
		public async Task GetIconsByTermAsync(string term, int limit_to_public_domain, int limit, int offset, int page)
		{
			var requestUri = "icons/"+ (term==null? "" : System.Uri.EscapeDataString(term))+"&limit_to_public_domain="+limit_to_public_domain+"&limit="+limit+"&offset="+offset+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get api quota status
		/// Returns current oauth usage and limits
		/// GetApiQuotaStatus oauth/usage
		/// </summary>
		/// <returns>No response was specified</returns>
		public async Task GetApiQuotaStatusAsync()
		{
			var requestUri = "oauth/usage";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get user collections
		/// Returns a list of collections associated with a user
		/// GetUserCollections user/{user_id}/collections
		/// </summary>
		/// <param name="user_id">User id</param>
		/// <returns>No response was specified</returns>
		public async Task GetUserCollectionsAsync(int user_id)
		{
			var requestUri = "user/"+user_id+"/collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get user collection
		/// Returns a single collection associated with a user
		/// GetUserCollection user/{user_id}/collections/{slug}
		/// </summary>
		/// <param name="user_id">User id</param>
		/// <param name="slug">Collection slug</param>
		/// <returns>No response was specified</returns>
		public async Task GetUserCollectionAsync(int user_id, string slug)
		{
			var requestUri = "user/"+user_id+"/collections/"+ (slug==null? "" : System.Uri.EscapeDataString(slug));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get user uploads with user
		/// Returns a list of uploads associated with a user
		/// GetUserUploadsWithUser user/{username}/uploads
		/// </summary>
		/// <param name="username">Username</param>
		/// <param name="limit">Maximum number of results</param>
		/// <param name="offset">Number of results to displace or skip over</param>
		/// <param name="page">Number of results of limit length to displace or skip over</param>
		/// <returns>No response was specified</returns>
		public async Task GetUserUploadsWithUserAsync(string username, int limit, int offset, int page)
		{
			var requestUri = "user/"+ (username==null? "" : System.Uri.EscapeDataString(username))+"/uploads&limit="+limit+"&offset="+offset+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
