//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Software update configuration machine run job navigation properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobNavigation
	{
		
		/// <summary>
		/// Id of the job associated with the software update configuration run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Software update configuration machine run model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoftwareUpdateConfigurationMachineRun
	{
		
		/// <summary>
		/// Resource Id of the software update configuration machine run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the software update configuration machine run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Software update configuration machine run properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateConfigurationMachineRunProperties Properties { get; set; }
	}
	
	/// <summary>
	/// result of listing all software update configuration machine runs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SoftwareUpdateConfigurationMachineRunListResult
	{
		
		/// <summary>
		/// link to next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// outer object returned when listing all software update configuration machine runs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SoftwareUpdateConfigurationMachineRun[] Value { get; set; }
	}
	
	/// <summary>
	/// Software update configuration machine run properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateConfigurationMachineRunProperties
	{
		
		/// <summary>
		/// configured duration for the software update configuration run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuredDuration")]
		public string ConfiguredDuration { get; set; }
		
		/// <summary>
		/// correlation id of the software update configuration machine run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// createdBy property, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// Creation time of the resource, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// End time of the software update configuration machine run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Error response of an operation failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public UpdateConfigurationMachineRunPropertiesError Error { get; set; }
		
		/// <summary>
		/// Software update configuration machine run job navigation properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public JobNavigation Job { get; set; }
		
		/// <summary>
		/// lastModifiedBy property, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Last time resource was modified, which only appears in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Operating system target of the software update configuration triggered this run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public string OsType { get; set; }
		
		/// <summary>
		/// Software update configuration Run Navigation model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareUpdateConfiguration")]
		public UpdateConfigurationNavigation SoftwareUpdateConfiguration { get; set; }
		
		/// <summary>
		/// source computer id of the software update configuration machine run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceComputerId")]
		public string SourceComputerId { get; set; }
		
		/// <summary>
		/// Start time of the software update configuration machine run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Status of the software update configuration machine run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// name of the updated computer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetComputer")]
		public string TargetComputer { get; set; }
		
		/// <summary>
		/// type of the updated computer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetComputerType")]
		public string TargetComputerType { get; set; }
	}
	
	public class UpdateConfigurationMachineRunPropertiesError
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Software update configuration Run Navigation model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateConfigurationNavigation
	{
		
		/// <summary>
		/// Name of the software update configuration triggered the software update configuration run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return list of software update configuration machine runs
		/// SoftwareUpdateConfigurationMachineRuns_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationMachineRuns
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="filter">The filter to apply on the operation. You can use the following filters: 'properties/osType', 'properties/status', 'properties/startTime', and 'properties/softwareUpdateConfiguration/name'</param>
		/// <param name="skip">number of entries you skip before returning results</param>
		/// <param name="top">Maximum number of entries returned in the results collection</param>
		/// <returns>Return list of software update configuration machine runs.</returns>
		public async Task<SoftwareUpdateConfigurationMachineRunListResult> SoftwareUpdateConfigurationMachineRuns_ListAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string api_version, string filter, string skip, string top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/softwareUpdateConfigurationMachineRuns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$skip=" + (skip==null? "" : System.Uri.EscapeDataString(skip))+"&$top=" + (top==null? "" : System.Uri.EscapeDataString(top));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SoftwareUpdateConfigurationMachineRunListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a single software update configuration machine run by Id.
		/// SoftwareUpdateConfigurationMachineRuns_GetById subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/softwareUpdateConfigurationMachineRuns/{softwareUpdateConfigurationMachineRunId}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="softwareUpdateConfigurationMachineRunId">The Id of the software update configuration machine run.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>A single software update configuration machine run.</returns>
		public async Task<SoftwareUpdateConfigurationMachineRun> SoftwareUpdateConfigurationMachineRuns_GetByIdAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string softwareUpdateConfigurationMachineRunId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/softwareUpdateConfigurationMachineRuns/"+ (softwareUpdateConfigurationMachineRunId==null? "" : System.Uri.EscapeDataString(softwareUpdateConfigurationMachineRunId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SoftwareUpdateConfigurationMachineRun>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
