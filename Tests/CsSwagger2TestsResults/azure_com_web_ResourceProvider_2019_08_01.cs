//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// App Service billing entity that contains information about meter which the Azure billing system utilizes to charge users for services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BillingMeter
	{
		
		/// <summary>
		/// BillingMeter resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of Billing Meters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BillingMeterCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BillingMeter[] Value { get; set; }
	}
	
	/// <summary>
	/// Object with a list of the resources that need to be moved and the resource group they should be moved to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CsmMoveResourceEnvelope
	{
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Max length: 90
		/// Pattern:  ^[-\w\._\(\)]+[^\.]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceGroup")]
		[System.ComponentModel.DataAnnotations.Length(1, 90)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@" ^[-\w\._\(\)]+[^\.]$")]
		public string TargetResourceGroup { get; set; }
	}
	
	/// <summary>
	/// List of available locations (regions or App Service Environments) for
	///deployment of App Service resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DeploymentLocations
	{
		
		/// <summary>
		/// Available App Service Environments with basic information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostingEnvironmentDeploymentInfos")]
		public HostingEnvironmentDeploymentInfo[] HostingEnvironmentDeploymentInfos { get; set; }
		
		/// <summary>
		/// Available App Service Environments with full descriptions of the environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostingEnvironments")]
		public DeploymentLocationsHostingEnvironments[] DeploymentLocationsHostingEnvironments { get; set; }
		
		/// <summary>
		/// Available regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public GeoRegion[] Locations { get; set; }
	}
	
	/// <summary>
	/// Information needed to create resources on an App Service Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HostingEnvironmentDeploymentInfo
	{
		
		/// <summary>
		/// Location of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class DeploymentLocationsHostingEnvironments
	{
		
		/// <summary>
		/// List of comma separated strings describing which VM sizes are allowed for front-ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedMultiSizes")]
		public string AllowedMultiSizes { get; set; }
		
		/// <summary>
		/// List of comma separated strings describing which VM sizes are allowed for workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedWorkerSizes")]
		public string AllowedWorkerSizes { get; set; }
		
		/// <summary>
		/// API Management Account associated with the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiManagementAccountId")]
		public string ApiManagementAccountId { get; set; }
		
		/// <summary>
		/// Custom settings for changing the behavior of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterSettings")]
		public DeploymentLocationsHostingEnvironmentsClusterSettings[] DeploymentLocationsHostingEnvironmentsClusterSettings { get; set; }
		
		/// <summary>
		/// Edition of the metadata database for the App Service Environment, e.g. "Standard".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseEdition")]
		public string DatabaseEdition { get; set; }
		
		/// <summary>
		/// Service objective of the metadata database for the App Service Environment, e.g. "S0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseServiceObjective")]
		public string DatabaseServiceObjective { get; set; }
		
		/// <summary>
		/// Default Scale Factor for FrontEnds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFrontEndScaleFactor")]
		public System.Nullable<System.Int32> DefaultFrontEndScaleFactor { get; set; }
		
		/// <summary>
		/// DNS suffix of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsSuffix")]
		public string DnsSuffix { get; set; }
		
		/// <summary>
		/// True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available
		///(most likely because NSG blocked the incoming traffic).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicCacheEnabled")]
		public System.Nullable<System.Boolean> DynamicCacheEnabled { get; set; }
		
		/// <summary>
		/// Current total, used, and available worker capacities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentCapacities")]
		public DeploymentLocationsHostingEnvironmentsEnvironmentCapacities[] DeploymentLocationsHostingEnvironmentsEnvironmentCapacities { get; set; }
		
		/// <summary>
		/// True/false indicating whether the App Service Environment is healthy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentIsHealthy")]
		public System.Nullable<System.Boolean> EnvironmentIsHealthy { get; set; }
		
		/// <summary>
		/// Detailed message about with results of the last check of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentStatus")]
		public string EnvironmentStatus { get; set; }
		
		/// <summary>
		/// Scale factor for front-ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frontEndScaleFactor")]
		public System.Nullable<System.Int32> FrontEndScaleFactor { get; set; }
		
		/// <summary>
		/// Flag that displays whether an ASE has linux workers or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasLinuxWorkers")]
		public System.Nullable<System.Boolean> HasLinuxWorkers { get; set; }
		
		/// <summary>
		/// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalLoadBalancingMode")]
		public System.Nullable<DeploymentLocationsHostingEnvironmentsInternalLoadBalancingMode> InternalLoadBalancingMode { get; set; }
		
		/// <summary>
		/// Number of IP SSL addresses reserved for the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipsslAddressCount")]
		public System.Nullable<System.Int32> IpsslAddressCount { get; set; }
		
		/// <summary>
		/// Last deployment action on the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastAction")]
		public string LastAction { get; set; }
		
		/// <summary>
		/// Result of the last deployment action on the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastActionResult")]
		public string LastActionResult { get; set; }
		
		/// <summary>
		/// Location of the App Service Environment, e.g. "West US".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Maximum number of VMs in the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumNumberOfMachines")]
		public System.Nullable<System.Int32> MaximumNumberOfMachines { get; set; }
		
		/// <summary>
		/// Number of front-end instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiRoleCount")]
		public System.Nullable<System.Int32> MultiRoleCount { get; set; }
		
		/// <summary>
		/// Front-end VM size, e.g. "Medium", "Large".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiSize")]
		public string MultiSize { get; set; }
		
		/// <summary>
		/// Name of the App Service Environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Access control list for controlling traffic to the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAccessControlList")]
		public DeploymentLocationsHostingEnvironmentsNetworkAccessControlList[] DeploymentLocationsHostingEnvironmentsNetworkAccessControlList { get; set; }
		
		/// <summary>
		/// Provisioning state of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<DeploymentLocationsHostingEnvironmentsProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Resource group of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceGroup")]
		public string ResourceGroup { get; set; }
		
		/// <summary>
		/// Key Vault ID for ILB App Service Environment default SSL certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCertKeyVaultId")]
		public string SslCertKeyVaultId { get; set; }
		
		/// <summary>
		/// Key Vault Secret Name for ILB App Service Environment default SSL certificate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCertKeyVaultSecretName")]
		public string SslCertKeyVaultSecretName { get; set; }
		
		/// <summary>
		/// Current status of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DeploymentLocationsHostingEnvironmentsStatus> Status { get; set; }
		
		/// <summary>
		/// Subscription of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available
		/// (most likely because NSG blocked the incoming traffic).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspended")]
		public System.Nullable<System.Boolean> Suspended { get; set; }
		
		/// <summary>
		/// Number of upgrade domains of the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeDomains")]
		public System.Nullable<System.Int32> UpgradeDomains { get; set; }
		
		/// <summary>
		/// User added ip ranges to whitelist on ASE db
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userWhitelistedIpRanges")]
		public string[] UserWhitelistedIpRanges { get; set; }
		
		/// <summary>
		/// Description of IP SSL mapping for the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vipMappings")]
		public DeploymentLocationsHostingEnvironmentsVipMappings[] DeploymentLocationsHostingEnvironmentsVipMappings { get; set; }
		
		/// <summary>
		/// Specification for using a Virtual Network.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="virtualNetwork")]
		public DeploymentLocationsHostingEnvironmentsVirtualNetwork VirtualNetwork { get; set; }
		
		/// <summary>
		/// Name of the Virtual Network for the App Service Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetName")]
		public string VnetName { get; set; }
		
		/// <summary>
		/// Resource group of the Virtual Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetResourceGroupName")]
		public string VnetResourceGroupName { get; set; }
		
		/// <summary>
		/// Subnet of the Virtual Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vnetSubnetName")]
		public string VnetSubnetName { get; set; }
		
		/// <summary>
		/// Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workerPools")]
		public DeploymentLocationsHostingEnvironmentsWorkerPools[] DeploymentLocationsHostingEnvironmentsWorkerPools { get; set; }
	}
	
	public class DeploymentLocationsHostingEnvironmentsClusterSettings
	{
		
		/// <summary>
		/// Pair name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Pair value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class DeploymentLocationsHostingEnvironmentsEnvironmentCapacities
	{
		
		/// <summary>
		/// Available capacity (# of machines, bytes of storage etc...).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableCapacity")]
		public System.Nullable<System.Int64> AvailableCapacity { get; set; }
		
		/// <summary>
		/// Shared/dedicated workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeMode")]
		public System.Nullable<DeploymentLocationsHostingEnvironmentsEnvironmentCapacitiesComputeMode> ComputeMode { get; set; }
		
		/// <summary>
		/// If <code>true</code>, it includes basic apps.
		///Basic apps are not used for capacity allocation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeFromCapacityAllocation")]
		public System.Nullable<System.Boolean> ExcludeFromCapacityAllocation { get; set; }
		
		/// <summary>
		/// <code>true</code> if capacity is applicable for all apps; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isApplicableForAllComputeModes")]
		public System.Nullable<System.Boolean> IsApplicableForAllComputeModes { get; set; }
		
		/// <summary>
		/// Is this a linux stamp capacity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLinux")]
		public System.Nullable<System.Boolean> IsLinux { get; set; }
		
		/// <summary>
		/// Name of the stamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Shared or Dedicated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteMode")]
		public string SiteMode { get; set; }
		
		/// <summary>
		/// Total capacity (# of machines, bytes of storage etc...).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCapacity")]
		public System.Nullable<System.Int64> TotalCapacity { get; set; }
		
		/// <summary>
		/// Name of the unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Size of the machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerSize")]
		public System.Nullable<DeploymentLocationsHostingEnvironmentsEnvironmentCapacitiesWorkerSize> WorkerSize { get; set; }
		
		/// <summary>
		/// Size ID of machines: 
		///0 - Small
		///1 - Medium
		///2 - Large
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerSizeId")]
		public System.Nullable<System.Int32> WorkerSizeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentLocationsHostingEnvironmentsEnvironmentCapacitiesComputeMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shared = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dedicated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dynamic = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentLocationsHostingEnvironmentsEnvironmentCapacitiesWorkerSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Large = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		D1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		D2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		D3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NestedSmall = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentLocationsHostingEnvironmentsInternalLoadBalancingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Web = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Publishing = 2,
	}
	
	public class DeploymentLocationsHostingEnvironmentsNetworkAccessControlList
	{
		
		/// <summary>
		/// Action object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<DeploymentLocationsHostingEnvironmentsNetworkAccessControlListAction> Action { get; set; }
		
		/// <summary>
		/// Description of network access control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Order of precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// Remote subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSubnet")]
		public string RemoteSubnet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentLocationsHostingEnvironmentsNetworkAccessControlListAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Permit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentLocationsHostingEnvironmentsProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeploymentLocationsHostingEnvironmentsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Preparing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scaling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
	}
	
	public class DeploymentLocationsHostingEnvironmentsVipMappings
	{
		
		/// <summary>
		/// Is virtual IP mapping in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inUse")]
		public System.Nullable<System.Boolean> InUse { get; set; }
		
		/// <summary>
		/// Internal HTTP port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalHttpPort")]
		public System.Nullable<System.Int32> InternalHttpPort { get; set; }
		
		/// <summary>
		/// Internal HTTPS port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalHttpsPort")]
		public System.Nullable<System.Int32> InternalHttpsPort { get; set; }
		
		/// <summary>
		/// name of the service that virtual IP is assigned to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Virtual IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualIP")]
		public string VirtualIP { get; set; }
	}
	
	public class DeploymentLocationsHostingEnvironmentsVirtualNetwork
	{
		
		/// <summary>
		/// Resource id of the Virtual Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the Virtual Network (read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subnet within the Virtual Network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
		
		/// <summary>
		/// Resource type of the Virtual Network (read-only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class DeploymentLocationsHostingEnvironmentsWorkerPools
	{
		
		/// <summary>
		/// Shared or dedicated app hosting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computeMode")]
		public DeploymentLocationsHostingEnvironmentsEnvironmentCapacitiesComputeMode ComputeMode { get; set; }
		
		/// <summary>
		/// Names of all instances in the worker pool (read only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
		
		/// <summary>
		/// Number of instances in the worker pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerCount")]
		public System.Nullable<System.Int32> WorkerCount { get; set; }
		
		/// <summary>
		/// VM size of the worker pool instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerSize")]
		public string WorkerSize { get; set; }
		
		/// <summary>
		/// Worker size ID for referencing this worker pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerSizeId")]
		public System.Nullable<System.Int32> WorkerSizeId { get; set; }
	}
	
	/// <summary>
	/// Geographical region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GeoRegion
	{
		
		/// <summary>
		/// GeoRegion resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of geographical regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GeoRegionCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GeoRegion[] Value { get; set; }
	}
	
	/// <summary>
	/// A Global SKU Description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GlobalCsmSkuDescription
	{
		
		/// <summary>
		/// Capabilities of the SKU, e.g., is traffic manager enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public GlobalCsmSkuDescriptionCapabilities[] GlobalCsmSkuDescriptionCapabilities { get; set; }
		
		/// <summary>
		/// Description of the App Service plan scale options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public GlobalCsmSkuDescriptionCapacity Capacity { get; set; }
		
		/// <summary>
		/// Family code of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Locations of the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Name of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Size specifier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Service Tier of the resource SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	public class GlobalCsmSkuDescriptionCapabilities
	{
		
		/// <summary>
		/// Name of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Value of the SKU capability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class GlobalCsmSkuDescriptionCapacity
	{
		
		/// <summary>
		/// Default number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Int32> Default { get; set; }
		
		/// <summary>
		/// Maximum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// Minimum number of workers for this App Service plan SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// Available scale configurations for an App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public string ScaleType { get; set; }
	}
	
	/// <summary>
	/// Premier add-on offer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PremierAddOnOffer
	{
		
		/// <summary>
		/// PremierAddOnOffer resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of premier add-on offers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PremierAddOnOfferCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PremierAddOnOffer[] Value { get; set; }
	}
	
	/// <summary>
	/// Information regarding availability of a resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceNameAvailability
	{
		
		/// <summary>
		/// If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// <code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// <code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<ResourceNameAvailabilityReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceNameAvailabilityReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// Resource name availability request content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceNameAvailabilityRequest
	{
		
		/// <summary>
		/// Is fully qualified domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFqdn")]
		public System.Nullable<System.Boolean> IsFqdn { get; set; }
		
		/// <summary>
		/// Resource name to verify.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type used for verification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ResourceNameAvailabilityRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceNameAvailabilityRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Site = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Slot = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HostingEnvironment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublishingUser = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Web/sites")]
		Microsoft_Web_sites = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Web/sites/slots")]
		Microsoft_Web_sites_slots = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Web/hostingEnvironments")]
		Microsoft_Web_hostingEnvironments = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Web/publishingUsers")]
		Microsoft_Web_publishingUsers = 7,
	}
	
	/// <summary>
	/// Collection of SKU information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuInfos
	{
		
		/// <summary>
		/// Resource type that this SKU applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// List of SKUs the subscription is able to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public GlobalCsmSkuDescription[] Skus { get; set; }
	}
	
	/// <summary>
	/// The source control OAuth token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControl
	{
		
		/// <summary>
		/// SourceControl resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// Collection of source controls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceControlCollection
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SourceControl[] Value { get; set; }
	}
	
	/// <summary>
	/// App properties used for validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ValidateProperties
	{
		
		/// <summary>
		/// Target capacity of the App Service plan (number of VMs).
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Capacity { get; set; }
		
		/// <summary>
		/// Platform (windows or linux)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImagePlatform")]
		public string ContainerImagePlatform { get; set; }
		
		/// <summary>
		/// Repository name (image name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImageRepository")]
		public string ContainerImageRepository { get; set; }
		
		/// <summary>
		/// Image tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerImageTag")]
		public string ContainerImageTag { get; set; }
		
		/// <summary>
		/// Base URL of the container registry
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRegistryBaseUrl")]
		public string ContainerRegistryBaseUrl { get; set; }
		
		/// <summary>
		/// Password for to access the container registry
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRegistryPassword")]
		public string ContainerRegistryPassword { get; set; }
		
		/// <summary>
		/// Username for to access the container registry
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerRegistryUsername")]
		public string ContainerRegistryUsername { get; set; }
		
		/// <summary>
		/// Name of App Service Environment where app or App Service plan should be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostingEnvironment")]
		public string HostingEnvironment { get; set; }
		
		/// <summary>
		/// <code>true</code> if App Service plan is for Spot instances; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSpot")]
		public System.Nullable<System.Boolean> IsSpot { get; set; }
		
		/// <summary>
		/// <code>true</code> if App Service plan is running as a windows container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isXenon")]
		public System.Nullable<System.Boolean> IsXenon { get; set; }
		
		/// <summary>
		/// <code>true</code> if App Service plan is for Linux workers; otherwise, <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needLinuxWorkers")]
		public System.Nullable<System.Boolean> NeedLinuxWorkers { get; set; }
		
		/// <summary>
		/// ARM resource ID of an App Service plan that would host the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverFarmId")]
		public string ServerFarmId { get; set; }
		
		/// <summary>
		/// Name of the target SKU for the App Service plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuName")]
		public string SkuName { get; set; }
	}
	
	/// <summary>
	/// Resource validation request content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ValidateRequest
	{
		
		/// <summary>
		/// Expected location of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource name to verify.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// App properties used for validation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ValidateProperties Properties { get; set; }
		
		/// <summary>
		/// Resource type used for verification.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ValidateRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ValidateRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerFarm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Site = 1,
	}
	
	/// <summary>
	/// Describes the result of resource validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ValidateResponse
	{
		
		/// <summary>
		/// Error details for when validation fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ValidateResponseError Error { get; set; }
		
		/// <summary>
		/// Result of validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Error details for when validation fails.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ValidateResponseError
	{
		
		/// <summary>
		/// Validation error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Validation error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The required set of inputs to validate a VNET
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VnetParameters
	{
		
		/// <summary>
		/// VnetParameters resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// A class that describes the reason for a validation failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VnetValidationFailureDetails
	{
		
		/// <summary>
		/// VnetValidationFailureDetails resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	/// <summary>
	/// A class that describes a test that failed during NSG and UDR validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VnetValidationTestFailure
	{
		
		/// <summary>
		/// VnetValidationTestFailure resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets publishing user
		/// Description for Gets publishing user
		/// GetPublishingUser providers/Microsoft.Web/publishingUsers/web
		/// </summary>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<GetPublishingUserReturn> GetPublishingUserAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Web/publishingUsers/web?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetPublishingUserReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates publishing user
		/// Description for Updates publishing user
		/// UpdatePublishingUser providers/Microsoft.Web/publishingUsers/web
		/// </summary>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Details of publishing user</param>
		/// <returns>OK</returns>
		public async Task<UpdatePublishingUserReturn> UpdatePublishingUserAsync(string api_version, UpdatePublishingUserPutBody requestBody)
		{
			var requestUri = "providers/Microsoft.Web/publishingUsers/web?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdatePublishingUserReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the source controls available for Azure websites.
		/// Description for Gets the source controls available for Azure websites.
		/// ListSourceControls providers/Microsoft.Web/sourcecontrols
		/// </summary>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SourceControlCollection> ListSourceControlsAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Web/sourcecontrols?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SourceControlCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets source control token
		/// Description for Gets source control token
		/// GetSourceControl providers/Microsoft.Web/sourcecontrols/{sourceControlType}
		/// </summary>
		/// <param name="sourceControlType">Type of source control</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SourceControl> GetSourceControlAsync(string sourceControlType, string api_version)
		{
			var requestUri = "providers/Microsoft.Web/sourcecontrols/"+ (sourceControlType==null? "" : System.Uri.EscapeDataString(sourceControlType))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SourceControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates source control token
		/// Description for Updates source control token
		/// UpdateSourceControl providers/Microsoft.Web/sourcecontrols/{sourceControlType}
		/// </summary>
		/// <param name="sourceControlType">Type of source control</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Source control token information</param>
		/// <returns>OK</returns>
		public async Task<SourceControl> UpdateSourceControlAsync(string sourceControlType, string api_version, SourceControl requestBody)
		{
			var requestUri = "providers/Microsoft.Web/sourcecontrols/"+ (sourceControlType==null? "" : System.Uri.EscapeDataString(sourceControlType))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SourceControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of meters for a given location.
		/// Description for Gets a list of meters for a given location.
		/// ListBillingMeters subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters
		/// </summary>
		/// <param name="billingLocation">Azure Location of billable resource</param>
		/// <param name="osType">App Service OS type meters used for</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<BillingMeterCollection> ListBillingMetersAsync(string billingLocation, string osType, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/billingMeters?billingLocation=" + (billingLocation==null? "" : System.Uri.EscapeDataString(billingLocation))+"&osType=" + (osType==null? "" : System.Uri.EscapeDataString(osType))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BillingMeterCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Check if a resource name is available.
		/// Description for Check if a resource name is available.
		/// CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Name availability request.</param>
		/// <returns>OK</returns>
		public async Task<ResourceNameAvailability> CheckNameAvailabilityAsync(string subscriptionId, string api_version, ResourceNameAvailabilityRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/checknameavailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ResourceNameAvailability>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets list of available geo regions plus ministamps
		/// Description for Gets list of available geo regions plus ministamps
		/// GetSubscriptionDeploymentLocations subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<DeploymentLocations> GetSubscriptionDeploymentLocationsAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/deploymentLocations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeploymentLocations>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of available geographical regions.
		/// Description for Get a list of available geographical regions.
		/// ListGeoRegions subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions
		/// </summary>
		/// <param name="sku">Name of SKU used to filter the regions.</param>
		/// <param name="linuxWorkersEnabled">Specify <code>true</code> if you want to filter to only regions that support Linux workers.</param>
		/// <param name="xenonWorkersEnabled">Specify <code>true</code> if you want to filter to only regions that support Xenon workers.</param>
		/// <param name="linuxDynamicWorkersEnabled">Specify <code>true</code> if you want to filter to only regions that support Linux Consumption Workers.</param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<GeoRegionCollection> ListGeoRegionsAsync(ListGeoRegionsSku sku, bool linuxWorkersEnabled, bool xenonWorkersEnabled, bool linuxDynamicWorkersEnabled, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/geoRegions?sku=" + sku+"&linuxWorkersEnabled="+linuxWorkersEnabled+"&xenonWorkersEnabled="+xenonWorkersEnabled+"&linuxDynamicWorkersEnabled="+linuxDynamicWorkersEnabled+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GeoRegionCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all apps that are assigned to a hostname.
		/// Description for List all apps that are assigned to a hostname.
		/// ListSiteIdentifiersAssignedToHostName subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Hostname information.</param>
		/// <returns>OK</returns>
		public async Task<ListSiteIdentifiersAssignedToHostNameReturn> ListSiteIdentifiersAssignedToHostNameAsync(string subscriptionId, string api_version, ListSiteIdentifiersAssignedToHostNamePostBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/listSitesAssignedToHostName&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSiteIdentifiersAssignedToHostNameReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all premier add-on offers.
		/// Description for List all premier add-on offers.
		/// ListPremierAddOnOffers subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<PremierAddOnOfferCollection> ListPremierAddOnOffersAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/premieraddonoffers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PremierAddOnOfferCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all SKUs.
		/// Description for List all SKUs.
		/// ListSkus subscriptions/{subscriptionId}/providers/Microsoft.Web/skus
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <returns>OK</returns>
		public async Task<SkuInfos> ListSkusAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SkuInfos>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
		/// Description for Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
		/// VerifyHostingEnvironmentVnet subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet
		/// </summary>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">VNET information</param>
		/// <returns>OK</returns>
		public async Task<VnetValidationFailureDetails> VerifyHostingEnvironmentVnetAsync(string subscriptionId, string api_version, VnetParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Web/verifyHostingEnvironmentVnet&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VnetValidationFailureDetails>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Move resources between resource groups.
		/// Description for Move resources between resource groups.
		/// Move subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Object that represents the resource to move.</param>
		public async Task MoveAsync(string resourceGroupName, string subscriptionId, string api_version, CsmMoveResourceEnvelope requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/moveResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Validate if a resource can be created.
		/// Description for Validate if a resource can be created.
		/// Validate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Request with the resources to validate.</param>
		/// <returns>OK</returns>
		public async Task<ValidateResponse> ValidateAsync(string resourceGroupName, string subscriptionId, string api_version, ValidateRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Web/validate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ValidateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Validate whether a resource can be moved.
		/// Description for Validate whether a resource can be moved.
		/// ValidateMove subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="subscriptionId">Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).</param>
		/// <param name="api_version">API Version</param>
		/// <param name="requestBody">Object that represents the resource to move.</param>
		public async Task ValidateMoveAsync(string resourceGroupName, string subscriptionId, string api_version, CsmMoveResourceEnvelope requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/validateMoveResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class GetPublishingUserReturn
	{
		
		/// <summary>
		/// User resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class UpdatePublishingUserPutBody
	{
		
		/// <summary>
		/// User resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public class UpdatePublishingUserReturn
	{
		
		/// <summary>
		/// User resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
	
	public enum ListGeoRegionsSku
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shared = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dynamic = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Isolated = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PremiumV2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElasticPremium = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElasticIsolated = 9,
	}
	
	public class ListSiteIdentifiersAssignedToHostNamePostBody
	{
		
		/// <summary>
		/// Name of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ListSiteIdentifiersAssignedToHostNameReturn
	{
		
		/// <summary>
		/// Link to next page of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of resources.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ListSiteIdentifiersAssignedToHostNameReturnValue[] ListSiteIdentifiersAssignedToHostNameReturnValue { get; set; }
	}
	
	public class ListSiteIdentifiersAssignedToHostNameReturnValue
	{
		
		/// <summary>
		/// Identifier resource specific properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
