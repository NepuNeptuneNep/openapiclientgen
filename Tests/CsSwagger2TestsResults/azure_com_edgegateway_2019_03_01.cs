//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the base class for all object models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ARMBaseModel
	{
		
		/// <summary>
		/// The path ID that uniquely identifies the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The hierarchical type of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The shipping address of the customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Address
	{
		
		/// <summary>
		/// The address line1.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// The address line2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// The address line3.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine3")]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// The city name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The postal code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The state name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	/// <summary>
	/// Alert on the data box edge/gateway device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Alert
	{
		
		/// <summary>
		/// Properties of alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AlertProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertProperties
	{
		
		/// <summary>
		/// Alert type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertType")]
		public string AlertType { get; set; }
		
		/// <summary>
		/// UTC time when the alert appeared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appearedAtDateTime")]
		public System.Nullable<System.DateTimeOffset> AppearedAtDateTime { get; set; }
		
		/// <summary>
		/// Alert details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailedInformation")]
		public System.Collections.Generic.Dictionary<string, string> DetailedInformation { get; set; }
		
		/// <summary>
		/// Error details for the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public AlertErrorDetails ErrorDetails { get; set; }
		
		/// <summary>
		/// Alert recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendation")]
		public string Recommendation { get; set; }
		
		/// <summary>
		/// Severity of the alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<AlertPropertiesSeverity> Severity { get; set; }
		
		/// <summary>
		/// Alert title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Error details for the alert.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertErrorDetails
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Error Message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Number of occurrences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrences")]
		public System.Nullable<System.Int32> Occurrences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlertPropertiesSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Informational = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Critical = 2,
	}
	
	/// <summary>
	/// Collection of alerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlertList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Alert[] Value { get; set; }
	}
	
	/// <summary>
	/// Represent the secrets intended for encryption with asymmetric key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AsymmetricEncryptedSecret
	{
		
		/// <summary>
		/// The algorithm used to encrypt "Value".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionAlgorithm")]
		public AsymmetricEncryptedSecretEncryptionAlgorithm EncryptionAlgorithm { get; set; }
		
		/// <summary>
		/// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionCertThumbprint")]
		public string EncryptionCertThumbprint { get; set; }
		
		/// <summary>
		/// The value of the secret.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AsymmetricEncryptedSecretEncryptionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSAES_PKCS1_v_1_5 = 2,
	}
	
	/// <summary>
	/// Authentication mechanism for IoT devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Authentication
	{
		
		/// <summary>
		/// Symmetric key for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symmetricKey")]
		public SymmetricKey SymmetricKey { get; set; }
	}
	
	/// <summary>
	/// Symmetric key for authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SymmetricKey
	{
		
		/// <summary>
		/// Represent the secrets intended for encryption with asymmetric key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public AsymmetricEncryptedSecret ConnectionString { get; set; }
	}
	
	/// <summary>
	/// Azure container mapping of the endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureContainerInfo
	{
		
		/// <summary>
		/// Container name (Based on the data format specified, this represents the name of Azure Files/Page blob/Block blob).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// Storage format used for the file represented by the share.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataFormat")]
		public AzureContainerInfoDataFormat DataFormat { get; set; }
		
		/// <summary>
		/// ID of the storage account credential used to access storage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountCredentialId")]
		public string StorageAccountCredentialId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureContainerInfoDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BlockBlob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PageBlob = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureFile = 2,
	}
	
	/// <summary>
	/// The bandwidth schedule details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BandwidthSchedule
	{
		
		/// <summary>
		/// The properties of the bandwidth schedule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BandwidthScheduleProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of the bandwidth schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BandwidthScheduleProperties
	{
		
		/// <summary>
		/// The days of the week when this schedule is applicable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days")]
		public string[] Days { get; set; }
		
		/// <summary>
		/// The bandwidth rate in Mbps.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rateInMbps")]
		public int RateInMbps { get; set; }
		
		/// <summary>
		/// The start time of the schedule in UTC.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
		
		/// <summary>
		/// The stop time of the schedule in UTC.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public string Stop { get; set; }
	}
	
	/// <summary>
	/// The collection of bandwidth schedules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BandwidthSchedulesList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of bandwidth schedules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BandwidthSchedule[] Value { get; set; }
	}
	
	/// <summary>
	/// The mapping between a particular client IP and the type of access client has on the NFS share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClientAccessRight
	{
		
		/// <summary>
		/// Type of access to be allowed for the client.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessPermission")]
		public ClientAccessRightAccessPermission AccessPermission { get; set; }
		
		/// <summary>
		/// IP of the client.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClientAccessRightAccessPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoAccess = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadWrite = 2,
	}
	
	/// <summary>
	/// An error response from the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Contains all the contact details of the customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContactDetails
	{
		
		/// <summary>
		/// The name of the company.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// The contact person name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactPerson")]
		public string ContactPerson { get; set; }
		
		/// <summary>
		/// The email list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailList")]
		public string[] EmailList { get; set; }
		
		/// <summary>
		/// The phone number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	/// <summary>
	/// The Data Box Edge/Gateway device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataBoxEdgeDevice
	{
		
		/// <summary>
		/// The etag for the devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The location of the device. This is a supported and registered Azure geographical region (for example, West US, East US, or Southeast Asia). The geographical region of a device cannot be changed once it is created, but if an identical geographical region is specified on update, the request will succeed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The properties of the Data Box Edge/Gateway device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataBoxEdgeDeviceProperties Properties { get; set; }
		
		/// <summary>
		/// The SKU type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The list of tags that describe the device. These tags can be used to view and group this device (across resource groups).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The properties of the Data Box Edge/Gateway device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataBoxEdgeDeviceProperties
	{
		
		/// <summary>
		/// Type of compute roles configured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuredRoleTypes")]
		public string[] ConfiguredRoleTypes { get; set; }
		
		/// <summary>
		/// The Data Box Edge/Gateway device culture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public string Culture { get; set; }
		
		/// <summary>
		/// The status of the Data Box Edge/Gateway device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataBoxEdgeDeviceStatus")]
		public System.Nullable<DataBoxEdgeDevicePropertiesDataBoxEdgeDeviceStatus> DataBoxEdgeDeviceStatus { get; set; }
		
		/// <summary>
		/// The Description of the Data Box Edge/Gateway device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The device software version number of the device (eg: 1.2.18105.6).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceHcsVersion")]
		public string DeviceHcsVersion { get; set; }
		
		/// <summary>
		/// The Data Box Edge/Gateway device local capacity in MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceLocalCapacity")]
		public System.Nullable<System.Int64> DeviceLocalCapacity { get; set; }
		
		/// <summary>
		/// The Data Box Edge/Gateway device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceModel")]
		public string DeviceModel { get; set; }
		
		/// <summary>
		/// The Data Box Edge/Gateway device software version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSoftwareVersion")]
		public string DeviceSoftwareVersion { get; set; }
		
		/// <summary>
		/// The type of the Data Box Edge/Gateway device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public System.Nullable<DataBoxEdgeDevicePropertiesDeviceType> DeviceType { get; set; }
		
		/// <summary>
		/// The Data Box Edge/Gateway device name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// The description of the Data Box Edge/Gateway device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelDescription")]
		public string ModelDescription { get; set; }
		
		/// <summary>
		/// The Serial Number of Data Box Edge/Gateway device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The Data Box Edge/Gateway device timezone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataBoxEdgeDevicePropertiesDataBoxEdgeDeviceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyToSetup = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Offline = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NeedsAttention = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartiallyDisconnected = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataBoxEdgeDevicePropertiesDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DataBoxEdgeDevice = 0,
	}
	
	/// <summary>
	/// The SKU type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<SkuName> Name { get; set; }
		
		/// <summary>
		/// The SKU tier. This is based on the SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<SkuTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Edge = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
	}
	
	/// <summary>
	/// The extended Info of the Data Box Edge/Gateway device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataBoxEdgeDeviceExtendedInfo
	{
		
		/// <summary>
		/// The properties of the Data Box Edge/Gateway device extended info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DataBoxEdgeDeviceExtendedInfoProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of the Data Box Edge/Gateway device extended info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataBoxEdgeDeviceExtendedInfoProperties
	{
		
		/// <summary>
		/// The public part of the encryption certificate. Client uses this to encrypt any secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public string EncryptionKey { get; set; }
		
		/// <summary>
		/// The digital signature of encrypted certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionKeyThumbprint")]
		public string EncryptionKeyThumbprint { get; set; }
		
		/// <summary>
		/// The Resource ID of the Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceKey")]
		public string ResourceKey { get; set; }
	}
	
	/// <summary>
	/// The collection of Data Box Edge/Gateway devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataBoxEdgeDeviceList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of Data Box Edge/Gateway devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public DataBoxEdgeDevice[] Value { get; set; }
	}
	
	/// <summary>
	/// The Data Box Edge/Gateway device patch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataBoxEdgeDevicePatch
	{
		
		/// <summary>
		/// The tags attached to the Data Box Edge/Gateway resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Trigger details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileEventTrigger
	{
		
		/// <summary>
		/// The path ID that uniquely identifies the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// File trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FileTriggerProperties Properties { get; set; }
		
		/// <summary>
		/// The hierarchical type of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// File trigger properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileTriggerProperties
	{
		
		/// <summary>
		/// A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customContextTag")]
		public string CustomContextTag { get; set; }
		
		/// <summary>
		/// Compute role against which events will be raised.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinkInfo")]
		public RoleSinkInfo SinkInfo { get; set; }
		
		/// <summary>
		/// File source details.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceInfo")]
		public FileSourceInfo SourceInfo { get; set; }
	}
	
	/// <summary>
	/// Compute role against which events will be raised.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleSinkInfo
	{
		
		/// <summary>
		/// Compute role ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
	}
	
	/// <summary>
	/// File source details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileSourceInfo
	{
		
		/// <summary>
		/// File share ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareId")]
		public string ShareId { get; set; }
	}
	
	/// <summary>
	/// Metadata of IoT device/IoT Edge device to be configured.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTDeviceInfo
	{
		
		/// <summary>
		/// Authentication mechanism for IoT devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public Authentication Authentication { get; set; }
		
		/// <summary>
		/// ID of the IoT device/edge device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Host name for the IoT hub associated to the device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ioTHostHub")]
		public string IoTHostHub { get; set; }
	}
	
	/// <summary>
	/// Compute role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTRole
	{
		
		/// <summary>
		/// The path ID that uniquely identifies the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// IoT role properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public IoTRoleProperties Properties { get; set; }
		
		/// <summary>
		/// The hierarchical type of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// IoT role properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IoTRoleProperties
	{
		
		/// <summary>
		/// Host OS supported by the IoT role.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostPlatform")]
		public IoTRolePropertiesHostPlatform HostPlatform { get; set; }
		
		/// <summary>
		/// Metadata of IoT device/IoT Edge device to be configured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ioTDeviceDetails")]
		public IoTDeviceInfo IoTDeviceDetails { get; set; }
		
		/// <summary>
		/// Metadata of IoT device/IoT Edge device to be configured.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ioTEdgeDeviceDetails")]
		public IoTDeviceInfo IoTEdgeDeviceDetails { get; set; }
		
		/// <summary>
		/// Role status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleStatus")]
		public IoTRolePropertiesRoleStatus RoleStatus { get; set; }
		
		/// <summary>
		/// Mount points of shares in role(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareMappings")]
		public MountPointMap[] ShareMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IoTRolePropertiesHostPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IoTRolePropertiesRoleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// The share mount point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MountPointMap
	{
		
		/// <summary>
		/// Mount point for the share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
		
		/// <summary>
		/// ID of the role to which share is mounted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
		
		/// <summary>
		/// Role type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleType")]
		public System.Nullable<MountPointMapRoleType> RoleType { get; set; }
		
		/// <summary>
		/// ID of the share mounted to the role VM.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareId")]
		public string ShareId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MountPointMapRoleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Functions = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cognitive = 3,
	}
	
	/// <summary>
	/// Details related to the IPv4 address configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Ipv4Config
	{
		
		/// <summary>
		/// The IPv4 gateway of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateway")]
		public string Gateway { get; set; }
		
		/// <summary>
		/// The IPv4 address of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The IPv4 subnet of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
	}
	
	/// <summary>
	/// Details related to the IPv6 address configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Ipv6Config
	{
		
		/// <summary>
		/// The IPv6 gateway of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateway")]
		public string Gateway { get; set; }
		
		/// <summary>
		/// The IPv6 address of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The IPv6 prefix of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefixLength")]
		public System.Nullable<System.Int32> PrefixLength { get; set; }
	}
	
	/// <summary>
	/// A device job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Job
	{
		
		/// <summary>
		/// The UTC date and time at which the job completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// The job error information containing the list of job errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public JobErrorDetails Error { get; set; }
		
		/// <summary>
		/// The path ID that uniquely identifies the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The percentage of the job that is complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		/// <summary>
		/// The properties for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobProperties Properties { get; set; }
		
		/// <summary>
		/// The UTC date and time at which the job started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The current status of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<JobStatus> Status { get; set; }
		
		/// <summary>
		/// The hierarchical type of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The job error information containing the list of job errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobErrorDetails
	{
		
		/// <summary>
		/// The code intended for programmatic access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public JobErrorItem[] ErrorDetails { get; set; }
		
		/// <summary>
		/// The message that describes the error in detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The job error items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobErrorItem
	{
		
		/// <summary>
		/// The code intended for programmatic access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The message that describes the error in detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The recommended actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendations")]
		public string[] Recommendations { get; set; }
	}
	
	/// <summary>
	/// The properties for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobProperties
	{
		
		/// <summary>
		/// Current stage of the update operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentStage")]
		public System.Nullable<JobPropertiesCurrentStage> CurrentStage { get; set; }
		
		/// <summary>
		/// Details about the download progress of update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadProgress")]
		public UpdateDownloadProgress DownloadProgress { get; set; }
		
		/// <summary>
		/// Local share/remote container relative path to the error manifest file of the refresh.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorManifestFile")]
		public string ErrorManifestFile { get; set; }
		
		/// <summary>
		/// If only subfolders need to be refreshed, then the subfolder path inside the share. (The path is empty if there are no subfolders.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
		
		/// <summary>
		/// Progress details during installation of updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installProgress")]
		public UpdateInstallProgress InstallProgress { get; set; }
		
		/// <summary>
		/// The type of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public System.Nullable<JobPropertiesJobType> JobType { get; set; }
		
		/// <summary>
		/// ARM ID of the share that was refreshed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareId")]
		public string ShareId { get; set; }
		
		/// <summary>
		/// Total number of errors encountered during the refresh process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRefreshErrors")]
		public System.Nullable<System.Int32> TotalRefreshErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPropertiesCurrentStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScanStarted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScanComplete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScanFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DownloadStarted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DownloadComplete = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DownloadFailed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstallStarted = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstallComplete = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstallFailed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RebootInitiated = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RescanStarted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RescanComplete = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RescanFailed = 16,
	}
	
	/// <summary>
	/// Details about the download progress of update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateDownloadProgress
	{
		
		/// <summary>
		/// The download phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadPhase")]
		public System.Nullable<UpdateDownloadProgressDownloadPhase> DownloadPhase { get; set; }
		
		/// <summary>
		/// Number of updates downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfUpdatesDownloaded")]
		public System.Nullable<System.Int32> NumberOfUpdatesDownloaded { get; set; }
		
		/// <summary>
		/// Number of updates to download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfUpdatesToDownload")]
		public System.Nullable<System.Int32> NumberOfUpdatesToDownload { get; set; }
		
		/// <summary>
		/// Percentage of completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		/// <summary>
		/// Total bytes downloaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesDownloaded")]
		public System.Nullable<System.Double> TotalBytesDownloaded { get; set; }
		
		/// <summary>
		/// Total bytes to download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesToDownload")]
		public System.Nullable<System.Double> TotalBytesToDownload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UpdateDownloadProgressDownloadPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Downloading = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verifying = 3,
	}
	
	/// <summary>
	/// Progress details during installation of updates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateInstallProgress
	{
		
		/// <summary>
		/// Number of updates installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfUpdatesInstalled")]
		public System.Nullable<System.Int32> NumberOfUpdatesInstalled { get; set; }
		
		/// <summary>
		/// Number of updates to install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfUpdatesToInstall")]
		public System.Nullable<System.Int32> NumberOfUpdatesToInstall { get; set; }
		
		/// <summary>
		/// Percentage completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPropertiesJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScanForUpdates = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DownloadUpdates = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstallUpdates = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RefreshShare = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paused = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 6,
	}
	
	/// <summary>
	/// Metric Dimension v1.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricDimension_V1
	{
		
		/// <summary>
		/// Display name of the metrics dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Name of the metrics dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// To be exported to shoe box.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toBeExportedForShoebox")]
		public System.Nullable<System.Boolean> ToBeExportedForShoebox { get; set; }
	}
	
	/// <summary>
	/// Metric specification version 1.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricSpecification_V1
	{
		
		/// <summary>
		/// Metric aggregation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public System.Nullable<MetricSpecification_V1AggregationType> AggregationType { get; set; }
		
		/// <summary>
		/// Metric category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<MetricSpecification_V1Category> Category { get; set; }
		
		/// <summary>
		/// Metric dimensions, other than default dimension which is resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public MetricDimension_V1[] Dimensions { get; set; }
		
		/// <summary>
		/// Description of the metric to be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDescription")]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// Display name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Set true to fill the gaps with zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fillGapWithZero")]
		public System.Nullable<System.Boolean> FillGapWithZero { get; set; }
		
		/// <summary>
		/// Name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource name override.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdDimensionNameOverride")]
		public string ResourceIdDimensionNameOverride { get; set; }
		
		/// <summary>
		/// Support metric aggregation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedAggregationTypes")]
		public MetricSpecification_V1AggregationType[] SupportedAggregationTypes { get; set; }
		
		/// <summary>
		/// Support granularity of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedTimeGrainTypes")]
		public string[] SupportedTimeGrainTypes { get; set; }
		
		/// <summary>
		/// Metric units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<MetricSpecification_V1Unit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricSpecification_V1AggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Total = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricSpecification_V1Category
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Capacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Transaction = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum MetricSpecification_V1Unit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountPerSecond = 7,
	}
	
	/// <summary>
	/// Represents the networkAdapter on a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkAdapter
	{
		
		/// <summary>
		/// Instance ID of network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterId")]
		public string AdapterId { get; set; }
		
		/// <summary>
		/// The network adapter position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterPosition")]
		public NetworkAdapterPosition AdapterPosition { get; set; }
		
		/// <summary>
		/// Value indicating whether this adapter has DHCP enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dhcpStatus")]
		public System.Nullable<NetworkAdapterDhcpStatus> DhcpStatus { get; set; }
		
		/// <summary>
		/// The list of DNS Servers of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsServers")]
		public string[] DnsServers { get; set; }
		
		/// <summary>
		/// Logical index of the adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Details related to the IPv4 address configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4Configuration")]
		public Ipv4Config Ipv4Configuration { get; set; }
		
		/// <summary>
		/// Details related to the IPv6 address configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6Configuration")]
		public Ipv6Config Ipv6Configuration { get; set; }
		
		/// <summary>
		/// The IPv6 local address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6LinkLocalAddress")]
		public string Ipv6LinkLocalAddress { get; set; }
		
		/// <summary>
		/// Hardware label for the adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Link speed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkSpeed")]
		public System.Nullable<System.Int64> LinkSpeed { get; set; }
		
		/// <summary>
		/// MAC address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Network adapter name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAdapterName")]
		public string NetworkAdapterName { get; set; }
		
		/// <summary>
		/// Node ID of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// Value indicating whether this adapter is RDMA capable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rdmaStatus")]
		public System.Nullable<NetworkAdapterRdmaStatus> RdmaStatus { get; set; }
		
		/// <summary>
		/// Value indicating whether this adapter is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<NetworkAdapterStatus> Status { get; set; }
	}
	
	/// <summary>
	/// The network adapter position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkAdapterPosition
	{
		
		/// <summary>
		/// The network group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkGroup")]
		public System.Nullable<NetworkAdapterPositionNetworkGroup> NetworkGroup { get; set; }
		
		/// <summary>
		/// The port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkAdapterPositionNetworkGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonRDMA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDMA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkAdapterDhcpStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkAdapterRdmaStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incapable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Capable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkAdapterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
	}
	
	/// <summary>
	/// The network settings of a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkSettings
	{
		
		/// <summary>
		/// The properties of network settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public NetworkSettingsProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of network settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkSettingsProperties
	{
		
		/// <summary>
		/// The network adapter list on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAdapters")]
		public NetworkAdapter[] NetworkAdapters { get; set; }
	}
	
	/// <summary>
	/// Operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Operation display properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Operation properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Operation display properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// Description of the operation to be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Operation to be performed on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The type of resource in which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Operation properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationProperties
	{
		
		/// <summary>
		/// Service specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSpecification")]
		public ServiceSpecification ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// Service specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceSpecification
	{
		
		/// <summary>
		/// Metric specification as defined by shoebox.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSpecifications")]
		public MetricSpecification_V1[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// The list of operations used for the discovery of available provider operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The order details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Order
	{
		
		/// <summary>
		/// Order properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OrderProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Order properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrderProperties
	{
		
		/// <summary>
		/// Contains all the contact details of the customer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactInformation")]
		public ContactDetails ContactInformation { get; set; }
		
		/// <summary>
		/// Represents a single status change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentStatus")]
		public OrderStatus CurrentStatus { get; set; }
		
		/// <summary>
		/// Tracking information for the package delivered to the customer whether it has an original or a replacement device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryTrackingInfo")]
		public TrackingInfo[] DeliveryTrackingInfo { get; set; }
		
		/// <summary>
		/// List of status changes in the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderHistory")]
		public OrderStatus[] OrderHistory { get; set; }
		
		/// <summary>
		/// Tracking information for the package returned from the customer whether it has an original or a replacement device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnTrackingInfo")]
		public TrackingInfo[] ReturnTrackingInfo { get; set; }
		
		/// <summary>
		/// Serial number of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The shipping address of the customer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public Address ShippingAddress { get; set; }
	}
	
	/// <summary>
	/// Represents a single status change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrderStatus
	{
		
		/// <summary>
		/// Comments related to this status change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Status of the order as per the allowed status types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OrderStatusStatus Status { get; set; }
		
		/// <summary>
		/// Time of status update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDateTime")]
		public System.Nullable<System.DateTimeOffset> UpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OrderStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Untracked = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingFulfilment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingPreparation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingShipment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arriving = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delivered = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReplacementRequested = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LostDevice = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Declined = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReturnInitiated = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingReturnShipment = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ShippedBack = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CollectedAtMicrosoft = 13,
	}
	
	/// <summary>
	/// Tracking courier information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackingInfo
	{
		
		/// <summary>
		/// Name of the carrier used in the delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// Serial number of the device being tracked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Tracking ID of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
		
		/// <summary>
		/// Tracking URL of the shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingUrl")]
		public string TrackingUrl { get; set; }
	}
	
	/// <summary>
	/// List of order entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OrderList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Order[] Value { get; set; }
	}
	
	/// <summary>
	/// Trigger details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PeriodicTimerEventTrigger
	{
		
		/// <summary>
		/// The path ID that uniquely identifies the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Periodic timer trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public PeriodicTimerProperties Properties { get; set; }
		
		/// <summary>
		/// The hierarchical type of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Periodic timer trigger properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PeriodicTimerProperties
	{
		
		/// <summary>
		/// A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customContextTag")]
		public string CustomContextTag { get; set; }
		
		/// <summary>
		/// Compute role against which events will be raised.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sinkInfo")]
		public RoleSinkInfo SinkInfo { get; set; }
		
		/// <summary>
		/// Periodic timer event source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceInfo")]
		public PeriodicTimerSourceInfo SourceInfo { get; set; }
	}
	
	/// <summary>
	/// Periodic timer event source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PeriodicTimerSourceInfo
	{
		
		/// <summary>
		/// Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public string Schedule { get; set; }
		
		/// <summary>
		/// The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified up to seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Topic where periodic events are published to IoT device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	/// <summary>
	/// Raw Certificate Data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RawCertificateData
	{
		
		/// <summary>
		/// The authentication type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public System.Nullable<RawCertificateDataAuthenticationType> AuthenticationType { get; set; }
		
		/// <summary>
		/// The base64 encoded certificate raw data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RawCertificateDataAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureActiveDirectory = 1,
	}
	
	/// <summary>
	/// Fields for tracking refresh job on the share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RefreshDetails
	{
		
		/// <summary>
		/// Indicates the relative path of the error xml for the last refresh job on this particular share, if any. This could be a failed job or a successful job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorManifestFile")]
		public string ErrorManifestFile { get; set; }
		
		/// <summary>
		/// If a refresh share job is currently in progress on this share, this field indicates the ARM resource ID of that job. The field is empty if no job is in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inProgressRefreshJobId")]
		public string InProgressRefreshJobId { get; set; }
		
		/// <summary>
		/// Indicates the completed time for the last refresh job on this particular share, if any.This could be a failed job or a successful job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCompletedRefreshJobTimeInUTC")]
		public System.Nullable<System.DateTimeOffset> LastCompletedRefreshJobTimeInUTC { get; set; }
		
		/// <summary>
		/// Indicates the id of the last refresh job on this particular share,if any. This could be a failed job or a successful job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastJob")]
		public string LastJob { get; set; }
	}
	
	/// <summary>
	/// Compute role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Role
	{
		
		/// <summary>
		/// Role type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public MountPointMapRoleType Kind { get; set; }
	}
	
	/// <summary>
	/// Collection of all the roles on the Data Box Edge device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoleList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The Value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Role[] Value { get; set; }
	}
	
	/// <summary>
	/// The security settings of a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecuritySettings
	{
		
		/// <summary>
		/// The properties of security settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SecuritySettingsProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of security settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecuritySettingsProperties
	{
		
		/// <summary>
		/// Represent the secrets intended for encryption with asymmetric key pair.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceAdminPassword")]
		public AsymmetricEncryptedSecret DeviceAdminPassword { get; set; }
	}
	
	/// <summary>
	/// Represents a share on the  Data Box Edge/Gateway device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Share
	{
		
		/// <summary>
		/// The share properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ShareProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The share properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareProperties
	{
		
		/// <summary>
		/// Access protocol to be used by the share.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessProtocol")]
		public SharePropertiesAccessProtocol AccessProtocol { get; set; }
		
		/// <summary>
		/// Azure container mapping of the endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureContainerInfo")]
		public AzureContainerInfo AzureContainerInfo { get; set; }
		
		/// <summary>
		/// List of IP addresses and corresponding access rights on the share(required for NFS protocol).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientAccessRights")]
		public ClientAccessRight[] ClientAccessRights { get; set; }
		
		/// <summary>
		/// Data policy of the share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataPolicy")]
		public System.Nullable<SharePropertiesDataPolicy> DataPolicy { get; set; }
		
		/// <summary>
		/// Description for the share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Current monitoring status of the share.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitoringStatus")]
		public IoTRolePropertiesRoleStatus MonitoringStatus { get; set; }
		
		/// <summary>
		/// Fields for tracking refresh job on the share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshDetails")]
		public RefreshDetails RefreshDetails { get; set; }
		
		/// <summary>
		/// Share mount point to the role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareMappings")]
		public MountPointMap[] ShareMappings { get; set; }
		
		/// <summary>
		/// Current status of the share.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareStatus")]
		public SharePropertiesShareStatus ShareStatus { get; set; }
		
		/// <summary>
		/// Mapping of users and corresponding access rights on the share (required for SMB protocol).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccessRights")]
		public UserAccessRight[] UserAccessRights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SharePropertiesAccessProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NFS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SharePropertiesDataPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cloud = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SharePropertiesShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Offline = 1,
	}
	
	/// <summary>
	/// The mapping between a particular user and the access type on the SMB share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserAccessRight
	{
		
		/// <summary>
		/// Type of access to be allowed for the user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public UserAccessRightAccessType AccessType { get; set; }
		
		/// <summary>
		/// User ID (already existing in the device).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UserAccessRightAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Change = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Read = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 2,
	}
	
	/// <summary>
	/// Specifies the mapping between this particular user and the type of access he has on shares on this device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareAccessRight
	{
		
		/// <summary>
		/// Type of access to be allowed on the share for this user.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public UserAccessRightAccessType AccessType { get; set; }
		
		/// <summary>
		/// The share ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareId")]
		public string ShareId { get; set; }
	}
	
	/// <summary>
	/// Collection of all the shares on the Data Box Edge/Gateway device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ShareList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of shares.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Share[] Value { get; set; }
	}
	
	/// <summary>
	/// The storage account credential.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountCredential
	{
		
		/// <summary>
		/// The storage account credential properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageAccountCredentialProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The storage account credential properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountCredentialProperties
	{
		
		/// <summary>
		/// Represent the secrets intended for encryption with asymmetric key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public AsymmetricEncryptedSecret AccountKey { get; set; }
		
		/// <summary>
		/// Type of storage accessed on the storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public StorageAccountCredentialPropertiesAccountType AccountType { get; set; }
		
		/// <summary>
		/// Alias for the storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// Blob end point for private clouds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobDomainName")]
		public string BlobDomainName { get; set; }
		
		/// <summary>
		/// Connection string for the storage account. Use this string if username and account key are not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionString")]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// Signifies whether SSL needs to be enabled or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sslStatus")]
		public IoTRolePropertiesRoleStatus SslStatus { get; set; }
		
		/// <summary>
		/// Username for the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountCredentialPropertiesAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeneralPurposeStorage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BlobStorage = 1,
	}
	
	/// <summary>
	/// The collection of storage account credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountCredentialList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StorageAccountCredential[] Value { get; set; }
	}
	
	/// <summary>
	/// Trigger details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Trigger
	{
		
		/// <summary>
		/// Trigger Kind.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public TriggerKind Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TriggerKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FileEvent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeriodicTimerEvent = 1,
	}
	
	/// <summary>
	/// Collection of all trigger on the data box edge device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Trigger[] Value { get; set; }
	}
	
	/// <summary>
	/// Details about ongoing updates and availability of updates on the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateSummary
	{
		
		/// <summary>
		/// The device update information summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UpdateSummaryProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The device update information summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateSummaryProperties
	{
		
		/// <summary>
		/// The last time when a scan was done on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceLastScannedDateTime")]
		public System.Nullable<System.DateTimeOffset> DeviceLastScannedDateTime { get; set; }
		
		/// <summary>
		/// The current version of the device in format: 1.2.17312.13.",
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceVersionNumber")]
		public string DeviceVersionNumber { get; set; }
		
		/// <summary>
		/// The current version of the device in text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyDeviceVersionName")]
		public string FriendlyDeviceVersionName { get; set; }
		
		/// <summary>
		/// The job ID of the download job in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inProgressDownloadJobId")]
		public string InProgressDownloadJobId { get; set; }
		
		/// <summary>
		/// The time when the currently running download (if any) started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inProgressDownloadJobStartedDateTime")]
		public System.Nullable<System.DateTimeOffset> InProgressDownloadJobStartedDateTime { get; set; }
		
		/// <summary>
		/// The job ID of the install job in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inProgressInstallJobId")]
		public string InProgressInstallJobId { get; set; }
		
		/// <summary>
		/// The time when the currently running install (if any) started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inProgressInstallJobStartedDateTime")]
		public System.Nullable<System.DateTimeOffset> InProgressInstallJobStartedDateTime { get; set; }
		
		/// <summary>
		/// The time when the last Download job was completed (success/cancelled/failed) on the appliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCompletedDownloadJobDateTime")]
		public System.Nullable<System.DateTimeOffset> LastCompletedDownloadJobDateTime { get; set; }
		
		/// <summary>
		/// The time when the last Install job was completed (success/cancelled/failed) on the appliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCompletedInstallJobDateTime")]
		public System.Nullable<System.DateTimeOffset> LastCompletedInstallJobDateTime { get; set; }
		
		/// <summary>
		/// The time when the last scan job was completed (success/cancelled/failed) on the appliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCompletedScanJobDateTime")]
		public System.Nullable<System.DateTimeOffset> LastCompletedScanJobDateTime { get; set; }
		
		/// <summary>
		/// The current update operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ongoingUpdateOperation")]
		public System.Nullable<UpdateSummaryPropertiesOngoingUpdateOperation> OngoingUpdateOperation { get; set; }
		
		/// <summary>
		/// Indicates if updates are available and at least one of the updates needs a reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rebootBehavior")]
		public System.Nullable<UpdateSummaryPropertiesRebootBehavior> RebootBehavior { get; set; }
		
		/// <summary>
		/// The number of updates available for the current device version as per the last device scan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalNumberOfUpdatesAvailable")]
		public System.Nullable<System.Int32> TotalNumberOfUpdatesAvailable { get; set; }
		
		/// <summary>
		/// The total number of items pending download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalNumberOfUpdatesPendingDownload")]
		public System.Nullable<System.Int32> TotalNumberOfUpdatesPendingDownload { get; set; }
		
		/// <summary>
		/// The total number of items pending install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalNumberOfUpdatesPendingInstall")]
		public System.Nullable<System.Int32> TotalNumberOfUpdatesPendingInstall { get; set; }
		
		/// <summary>
		/// The total size of updates available for download in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdateSizeInBytes")]
		public System.Nullable<System.Double> TotalUpdateSizeInBytes { get; set; }
		
		/// <summary>
		/// The list of updates available for install.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTitles")]
		public string[] UpdateTitles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UpdateSummaryPropertiesOngoingUpdateOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Download = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Install = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UpdateSummaryPropertiesRebootBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NeverReboots = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequiresReboot = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestReboot = 2,
	}
	
	/// <summary>
	/// The upload certificate request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UploadCertificateRequest
	{
		
		/// <summary>
		/// Raw Certificate Data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RawCertificateData Properties { get; set; }
	}
	
	/// <summary>
	/// The upload registration certificate response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UploadCertificateResponse
	{
		
		/// <summary>
		/// Azure Active Directory tenant authority.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aadAuthority")]
		public string AadAuthority { get; set; }
		
		/// <summary>
		/// Azure Active Directory tenant ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aadTenantId")]
		public string AadTenantId { get; set; }
		
		/// <summary>
		/// Specifies authentication type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public RawCertificateDataAuthenticationType AuthType { get; set; }
		
		/// <summary>
		/// The azure management endpoint audience.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureManagementEndpointAudience")]
		public string AzureManagementEndpointAudience { get; set; }
		
		/// <summary>
		/// The resource ID of the Data Box Edge/Gateway device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Azure Active Directory service principal client ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="servicePrincipalClientId")]
		public string ServicePrincipalClientId { get; set; }
		
		/// <summary>
		/// Azure Active Directory service principal object ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="servicePrincipalObjectId")]
		public string ServicePrincipalObjectId { get; set; }
	}
	
	/// <summary>
	/// Represents a user who has access to one or more shares on the Data Box Edge/Gateway device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class User
	{
		
		/// <summary>
		/// The user properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public UserProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The user properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserProperties
	{
		
		/// <summary>
		/// Represent the secrets intended for encryption with asymmetric key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedPassword")]
		public AsymmetricEncryptedSecret EncryptedPassword { get; set; }
		
		/// <summary>
		/// List of shares that the user has rights on. This field should not be specified during user creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareAccessRights")]
		public ShareAccessRight[] ShareAccessRights { get; set; }
	}
	
	/// <summary>
	/// Collection of users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserList
	{
		
		/// <summary>
		/// Link to the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public User[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all the supported operations.
		/// Operations_List providers/Microsoft.DataBoxEdge/operations
		/// </summary>
		/// <param name="api_version">The API version.</param>
		/// <returns>List of supported operations.</returns>
		public async Task<OperationsList> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.DataBoxEdge/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationsList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the data box edge/gateway devices in a subscription.
		/// Devices_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="expand">Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.</param>
		/// <returns>The collection of data box edge/gateway devices.</returns>
		public async Task<DataBoxEdgeDeviceList> Devices_ListBySubscriptionAsync(string subscriptionId, string api_version, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DataBoxEdgeDeviceList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the data box edge/gateway devices in a resource group.
		/// Devices_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices
		/// </summary>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="expand">Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.</param>
		/// <returns>The collection of data box edge/gateway devices.</returns>
		public async Task<DataBoxEdgeDeviceList> Devices_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DataBoxEdgeDeviceList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the data box edge/gateway device.
		/// Devices_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The data box edge/gateway device.</returns>
		public async Task<DataBoxEdgeDevice> Devices_GetAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DataBoxEdgeDevice>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a Data Box Edge/Gateway resource.
		/// Devices_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The resource object.</param>
		/// <returns>Successfully created or updated the resource.</returns>
		public async Task<DataBoxEdgeDevice> Devices_CreateOrUpdateAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version, DataBoxEdgeDevice requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DataBoxEdgeDevice>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the data box edge/gateway device.
		/// Devices_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the resource.</returns>
		public async Task Devices_DeleteAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Modifies a Data Box Edge/Gateway resource.
		/// Devices_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The resource parameters.</param>
		/// <returns>Successfully updated the resource.</returns>
		public async Task<DataBoxEdgeDevice> Devices_UpdateAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version, DataBoxEdgeDevicePatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DataBoxEdgeDevice>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the alerts for a data box edge/gateway device.
		/// Alerts_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/alerts
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The collection of alerts.</returns>
		public async Task<AlertList> Alerts_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/alerts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AlertList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets an alert by name.
		/// Alerts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/alerts/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The alert name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The alert details.</returns>
		public async Task<Alert> Alerts_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/alerts/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Alert>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the bandwidth schedules for a data box edge/gateway device.
		/// BandwidthSchedules_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The collection of bandwidth schedules.</returns>
		public async Task<BandwidthSchedulesList> BandwidthSchedules_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/bandwidthSchedules&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BandwidthSchedulesList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified bandwidth schedule.
		/// BandwidthSchedules_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The bandwidth schedule name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The bandwidth schedule.</returns>
		public async Task<BandwidthSchedule> BandwidthSchedules_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/bandwidthSchedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BandwidthSchedule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a bandwidth schedule.
		/// BandwidthSchedules_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The bandwidth schedule name which needs to be added/updated.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The bandwidth schedule to be added or updated.</param>
		/// <returns>Successfully created or updated the bandwidth schedule.</returns>
		public async Task<BandwidthSchedule> BandwidthSchedules_CreateOrUpdateAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version, BandwidthSchedule requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/bandwidthSchedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BandwidthSchedule>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified bandwidth schedule.
		/// BandwidthSchedules_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The bandwidth schedule name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the bandwidth schedule.</returns>
		public async Task BandwidthSchedules_DeleteAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/bandwidthSchedules/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Downloads the updates on a data box edge/gateway device.
		/// Devices_DownloadUpdates subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/downloadUpdates
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully downloaded the updates on the device.</returns>
		public async Task Devices_DownloadUpdatesAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/downloadUpdates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets additional information for the specified data box edge/gateway device.
		/// Devices_GetExtendedInformation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/getExtendedInformation
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The additional information.</returns>
		public async Task<DataBoxEdgeDeviceExtendedInfo> Devices_GetExtendedInformationAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/getExtendedInformation&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DataBoxEdgeDeviceExtendedInfo>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Installs the updates on the data box edge/gateway device.
		/// Devices_InstallUpdates subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/installUpdates
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully installed updates on the device.</returns>
		public async Task Devices_InstallUpdatesAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/installUpdates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of a specified job on a data box edge/gateway device.
		/// Jobs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/jobs/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The job name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job details.</returns>
		public async Task<Job> Jobs_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/jobs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Job>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the network settings of the specified data box edge/gateway device.
		/// Devices_GetNetworkSettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/networkSettings/default
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The device network settings.</returns>
		public async Task<NetworkSettings> Devices_GetNetworkSettingsAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/networkSettings/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<NetworkSettings>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the details of a specified job on a data box edge/gateway device.
		/// OperationsStatus_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/operationsStatus/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The job name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The job details.</returns>
		public async Task<Job> OperationsStatus_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/operationsStatus/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Job>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the orders related to a data box edge/gateway device.
		/// Orders_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Lists all the orders for the Data Box Edge Device</returns>
		public async Task<OrderList> Orders_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/orders&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OrderList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a specific order by name.
		/// Orders_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders/default
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The order details of a device.</returns>
		public async Task<Order> Orders_GetAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/orders/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Order>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an order.
		/// Orders_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders/default
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The order to be created or updated.</param>
		/// <returns>Successfully created or updated the order.</returns>
		public async Task<Order> Orders_CreateOrUpdateAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version, Order requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/orders/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Order>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the order related to the device.
		/// Orders_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders/default
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the order.</returns>
		public async Task Orders_DeleteAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/orders/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the roles configured in a data box edge/gateway device.
		/// Roles_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>List of all the roles configured in the device.</returns>
		public async Task<RoleList> Roles_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/roles&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RoleList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a specific role by name.
		/// Roles_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The role name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The role with the specified name in the given device.</returns>
		public async Task<Role> Roles_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/roles/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Role>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update a role.
		/// Roles_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The role name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The role properties.</param>
		/// <returns>Successfully created or updated the role.</returns>
		public async Task<Role> Roles_CreateOrUpdateAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version, Role requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/roles/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Role>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the role on the data box edge device.
		/// Roles_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The role name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the role.</returns>
		public async Task Roles_DeleteAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/roles/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Scans for updates on a data box edge/gateway device.
		/// Devices_ScanForUpdates subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/scanForUpdates
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully scanned the device for updates.</returns>
		public async Task Devices_ScanForUpdatesAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/scanForUpdates&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the security settings on a data box edge/gateway device.
		/// Devices_CreateOrUpdateSecuritySettings subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/securitySettings/default/update
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The security settings.</param>
		public async Task Devices_CreateOrUpdateSecuritySettingsAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version, SecuritySettings requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/securitySettings/default/update&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the shares in a data box edge/gateway device.
		/// Shares_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The collection of all the shares on the device.</returns>
		public async Task<ShareList> Shares_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/shares&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ShareList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a share by name.
		/// Shares_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The share name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The share details.</returns>
		public async Task<Share> Shares_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/shares/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Share>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new share or updates an existing share on the device.
		/// Shares_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The share name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The share properties.</param>
		/// <returns>Successfully created or updated the share.</returns>
		public async Task<Share> Shares_CreateOrUpdateAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version, Share requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/shares/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Share>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the share on the data box edge/gateway device.
		/// Shares_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The share name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the share.</returns>
		public async Task Shares_DeleteAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/shares/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Refreshes the share metadata with the data from the cloud.
		/// Shares_Refresh subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}/refresh
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The share name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully refreshed the share on the device.</returns>
		public async Task Shares_RefreshAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/shares/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/refresh&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the storage account credentials in a data box edge/gateway device.
		/// StorageAccountCredentials_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The collection of storage account credentials.</returns>
		public async Task<StorageAccountCredentialList> StorageAccountCredentials_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/storageAccountCredentials&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccountCredentialList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified storage account credential.
		/// StorageAccountCredentials_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The storage account credential name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The storage account credential properties.</returns>
		public async Task<StorageAccountCredential> StorageAccountCredentials_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/storageAccountCredentials/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccountCredential>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates the storage account credential.
		/// StorageAccountCredentials_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The storage account credential name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The storage account credential.</param>
		/// <returns>Successfully created or updated the storage account credential.</returns>
		public async Task<StorageAccountCredential> StorageAccountCredentials_CreateOrUpdateAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version, StorageAccountCredential requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/storageAccountCredentials/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccountCredential>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the storage account credential.
		/// StorageAccountCredentials_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The storage account credential name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the storage account credential.</returns>
		public async Task StorageAccountCredentials_DeleteAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/storageAccountCredentials/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the triggers configured in the device.
		/// Triggers_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="expand">Specify $filter='CustomContextTag eq <tag>' to filter on custom context tag property</param>
		/// <returns>List all the triggers configured in the device</returns>
		public async Task<TriggerList> Triggers_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version, string expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/triggers&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TriggerList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific trigger by name.
		/// Triggers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The trigger name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The trigger.</returns>
		public async Task<Trigger> Triggers_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/triggers/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Trigger>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a trigger.
		/// Triggers_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers/{name}
		/// </summary>
		/// <param name="deviceName">Creates or updates a trigger</param>
		/// <param name="name">The trigger name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The trigger.</param>
		/// <returns>Successfully created or updated the trigger.</returns>
		public async Task<Trigger> Triggers_CreateOrUpdateAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version, Trigger requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/triggers/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Trigger>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the trigger on the gateway device.
		/// Triggers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The trigger name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the trigger.</returns>
		public async Task Triggers_DeleteAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/triggers/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about the availability of updates based on the last scan of the device. It also gets information about any ongoing download or install jobs on the device.
		/// Devices_GetUpdateSummary subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/updateSummary/default
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The update summary.</returns>
		public async Task<UpdateSummary> Devices_GetUpdateSummaryAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/updateSummary/default&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSummary>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Uploads registration certificate for the device.
		/// Devices_UploadCertificate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/uploadCertificate
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The upload certificate request.</param>
		/// <returns>Successfully uploaded the registration certificate.</returns>
		public async Task<UploadCertificateResponse> Devices_UploadCertificateAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version, UploadCertificateRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/uploadCertificate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UploadCertificateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the users registered on a data box edge/gateway device.
		/// Users_ListByDataBoxEdgeDevice subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The collection of all users on the device.</returns>
		public async Task<UserList> Users_ListByDataBoxEdgeDeviceAsync(string deviceName, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/users&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified user.
		/// Users_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The user name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>The user details.</returns>
		public async Task<User> Users_GetAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new user or updates an existing user's information on a data box edge/gateway device.
		/// Users_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The user name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <param name="requestBody">The user details.</param>
		/// <returns>Successfully created or updated the user.</returns>
		public async Task<User> Users_CreateOrUpdateAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version, User requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the user on a databox edge/gateway device.
		/// Users_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users/{name}
		/// </summary>
		/// <param name="deviceName">The device name.</param>
		/// <param name="name">The user name.</param>
		/// <param name="subscriptionId">The subscription ID.</param>
		/// <param name="resourceGroupName">The resource group name.</param>
		/// <param name="api_version">The API version.</param>
		/// <returns>Successfully deleted the user.</returns>
		public async Task Users_DeleteAsync(string deviceName, string name, string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/"+ (deviceName==null? "" : System.Uri.EscapeDataString(deviceName))+"/users/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
