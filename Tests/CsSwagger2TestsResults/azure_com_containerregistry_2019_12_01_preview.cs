//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Actor
	{
		
		/// <summary>
		/// The subject or username associated with the request context that generated the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The configuration of service URI and custom headers for the webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CallbackConfig
	{
		
		/// <summary>
		/// Custom headers that will be added to the webhook notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public System.Collections.Generic.Dictionary<string, string> CustomHeaders { get; set; }
		
		/// <summary>
		/// The service URI for the webhook to post notifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyVaultProperties")]
		public KeyVaultProperties KeyVaultProperties { get; set; }
		
		/// <summary>
		/// Indicates whether or not the encryption is enabled for container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<EncryptionPropertyStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultProperties
	{
		
		/// <summary>
		/// The client id of the identity which will be used to access key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// Key vault uri to access the encryption key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyIdentifier")]
		public string KeyIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionPropertyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 1,
	}
	
	/// <summary>
	/// The event for a webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Event
	{
		
		/// <summary>
		/// The event request message sent to the service URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventRequestMessage")]
		public EventRequestMessage EventRequestMessage { get; set; }
		
		/// <summary>
		/// The event response message received from the service URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventResponseMessage")]
		public EventResponseMessage EventResponseMessage { get; set; }
	}
	
	/// <summary>
	/// The event request message sent to the service URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventRequestMessage
	{
		
		/// <summary>
		/// The content of the event request message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public EventContent Content { get; set; }
		
		/// <summary>
		/// The headers of the event request message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// The HTTP method used to send the event request message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The URI used to send the event request message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestUri")]
		public string RequestUri { get; set; }
		
		/// <summary>
		/// The HTTP message version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The content of the event request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventContent
	{
		
		/// <summary>
		/// The action that encompasses the provided event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// The agent that initiated the event. For most situations, this could be from the authorization context of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public Actor Actor { get; set; }
		
		/// <summary>
		/// The event ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The request that generated the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public Request Request { get; set; }
		
		/// <summary>
		/// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// The target of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Target Target { get; set; }
		
		/// <summary>
		/// The time at which the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// The request that generated the event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Request
	{
		
		/// <summary>
		/// The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addr")]
		public string Addr { get; set; }
		
		/// <summary>
		/// The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The ID of the request that initiated the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The request method that generated the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The user agent header of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useragent")]
		public string Useragent { get; set; }
	}
	
	/// <summary>
	/// The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Source
	{
		
		/// <summary>
		/// The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addr")]
		public string Addr { get; set; }
		
		/// <summary>
		/// The running instance of an application. Changes after each restart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceID")]
		public string InstanceID { get; set; }
	}
	
	/// <summary>
	/// The target of the event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Target
	{
		
		/// <summary>
		/// The digest of the content, as defined by the Registry V2 HTTP API Specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// The number of bytes of the content. Same as Size field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int64> Length { get; set; }
		
		/// <summary>
		/// The MIME type of the referenced object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public string MediaType { get; set; }
		
		/// <summary>
		/// The name of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The repository name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The number of bytes of the content. Same as Length field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// The tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The direct URL to the content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The version of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The event response message received from the service URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventResponseMessage
	{
		
		/// <summary>
		/// The content of the event response message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The headers of the event response message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// The reason phrase of the event response message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonPhrase")]
		public string ReasonPhrase { get; set; }
		
		/// <summary>
		/// The status code of the event response message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
		
		/// <summary>
		/// The HTTP message version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The basic information of an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventInfo
	{
		
		/// <summary>
		/// The event ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list events for a webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EventListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Event[] Value { get; set; }
	}
	
	/// <summary>
	/// IP rule with specific IP or IP range in CIDR format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IPRule
	{
		
		/// <summary>
		/// The action of IP ACL rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<IPRuleAction> Action { get; set; }
		
		/// <summary>
		/// Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IPRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
	}
	
	/// <summary>
	/// Managed identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IdentityProperties
	{
		
		/// <summary>
		/// The principal ID of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant ID of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IdentityPropertiesType> Type { get; set; }
		
		/// <summary>
		/// The list of user identities associated with the resource. The user identity 
		///dictionary key references will be ARM resource ids in the form: 
		///'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
		///    providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, UserIdentityProperties> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SystemAssigned, UserAssigned")]
		SystemAssigned_UserAssigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserIdentityProperties
	{
		
		/// <summary>
		/// The client id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportImageParameters
	{
		
		/// <summary>
		/// When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation before any copying begins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<ImportImageParametersMode> Mode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ImportSource Source { get; set; }
		
		/// <summary>
		/// List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetTags")]
		public string[] TargetTags { get; set; }
		
		/// <summary>
		/// List of strings of repository names to do a manifest only copy. No tag will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="untaggedTargetRepositories")]
		public string[] UntaggedTargetRepositories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ImportImageParametersMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoForce = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Force = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public ImportSourceCredentials Credentials { get; set; }
		
		/// <summary>
		/// The address of the source registry (e.g. 'mcr.microsoft.com').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registryUri")]
		public string RegistryUri { get; set; }
		
		/// <summary>
		/// The resource identifier of the source Azure Container Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Repository name of the source image.
		///Specify an image by repository ('hello-world'). This will use the 'latest' tag.
		///Specify an image by tag ('hello-world:latest').
		///Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceImage")]
		public string SourceImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImportSourceCredentials
	{
		
		/// <summary>
		/// The password used to authenticate with the source registry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The username to authenticate with the source registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The network rule set for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkRuleSet
	{
		
		/// <summary>
		/// The default action of allow or deny when no other rules match.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(NetworkRuleSetDefaultAction.Allow)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public NetworkRuleSetDefaultAction DefaultAction { get; set; } = NetworkRuleSetDefaultAction.Allow;
		
		/// <summary>
		/// The IP ACL rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		public IPRule[] IpRules { get; set; }
		
		/// <summary>
		/// The virtual network rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public VirtualNetworkRule[] VirtualNetworkRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkRuleSetDefaultAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	/// <summary>
	/// Virtual network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRule
	{
		
		/// <summary>
		/// The action of virtual network rule.
		/// </summary>
		[System.ComponentModel.DefaultValue(IPRuleAction.Allow)]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public IPRuleAction Action { get; set; } = IPRuleAction.Allow;
		
		/// <summary>
		/// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The definition of a container registry operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDefinition
	{
		
		/// <summary>
		/// The display information for a container registry operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplayDefinition Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin information of the container registry operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// The definition of Azure Monitoring properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationPropertiesDefinition Properties { get; set; }
	}
	
	/// <summary>
	/// The display information for a container registry operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplayDefinition
	{
		
		/// <summary>
		/// The description for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The operation that users can perform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The resource provider name: Microsoft.ContainerRegistry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The definition of Azure Monitoring properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationPropertiesDefinition
	{
		
		/// <summary>
		/// The definition of Azure Monitoring list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSpecification")]
		public OperationServiceSpecificationDefinition ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// The definition of Azure Monitoring list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationServiceSpecificationDefinition
	{
		
		/// <summary>
		/// A list of Azure Monitoring metrics definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSpecifications")]
		public OperationMetricSpecificationDefinition[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// The definition of Azure Monitoring metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationMetricSpecificationDefinition
	{
		
		/// <summary>
		/// Metric aggregation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public string AggregationType { get; set; }
		
		/// <summary>
		/// Metric description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDescription")]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// Metric display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Internal metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalMetricName")]
		public string InternalMetricName { get; set; }
		
		/// <summary>
		/// Metric name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Metric unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list container registry operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of container registry operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of container registry operations. Since this list may be incomplete, the nextLink field should be used to request the next list of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public OperationDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The policies for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Policies
	{
		
		/// <summary>
		/// The quarantine policy for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quarantinePolicy")]
		public QuarantinePolicy QuarantinePolicy { get; set; }
		
		/// <summary>
		/// The retention policy for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPolicy")]
		public RetentionPolicy RetentionPolicy { get; set; }
		
		/// <summary>
		/// The content trust policy for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustPolicy")]
		public TrustPolicy TrustPolicy { get; set; }
	}
	
	/// <summary>
	/// The quarantine policy for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class QuarantinePolicy
	{
		
		/// <summary>
		/// The value that indicates whether the policy is enabled or not.
		/// </summary>
		[System.ComponentModel.DefaultValue(EncryptionPropertyStatus.disabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EncryptionPropertyStatus Status { get; set; } = EncryptionPropertyStatus.disabled;
	}
	
	/// <summary>
	/// The retention policy for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetentionPolicy
	{
		
		/// <summary>
		/// The number of days to retain an untagged manifest after which it gets purged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="days")]
		public System.Nullable<System.Int32> Days { get; set; }
		
		/// <summary>
		/// The timestamp when the policy was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// The value that indicates whether the policy is enabled or not.
		/// </summary>
		[System.ComponentModel.DefaultValue(EncryptionPropertyStatus.disabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EncryptionPropertyStatus Status { get; set; } = EncryptionPropertyStatus.disabled;
	}
	
	/// <summary>
	/// The content trust policy for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrustPolicy
	{
		
		/// <summary>
		/// The value that indicates whether the policy is enabled or not.
		/// </summary>
		[System.ComponentModel.DefaultValue(EncryptionPropertyStatus.disabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EncryptionPropertyStatus Status { get; set; } = EncryptionPropertyStatus.disabled;
		
		/// <summary>
		/// The type of trust policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TrustPolicyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TrustPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Notary = 0,
	}
	
	/// <summary>
	/// The parameters used to regenerate the login credential.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateCredentialParameters
	{
		
		/// <summary>
		/// Specifies name of the password which should be regenerated -- password or password2.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public RegenerateCredentialParametersName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegenerateCredentialParametersName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password2 = 1,
	}
	
	/// <summary>
	/// An object that represents a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Registry
	{
		
		/// <summary>
		/// Managed identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityProperties Identity { get; set; }
		
		/// <summary>
		/// The properties of a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegistryProperties Properties { get; set; }
		
		/// <summary>
		/// The SKU of a container registry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// The properties of a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryProperties
	{
		
		/// <summary>
		/// The value that indicates whether the admin user is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminUserEnabled")]
		public System.Nullable<System.Boolean> AdminUserEnabled { get; set; }
		
		/// <summary>
		/// The creation date of the container registry in ISO8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public EncryptionProperty Encryption { get; set; }
		
		/// <summary>
		/// The URL that can be used to log into the container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginServer")]
		public string LoginServer { get; set; }
		
		/// <summary>
		/// The network rule set for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkRuleSet")]
		public NetworkRuleSet NetworkRuleSet { get; set; }
		
		/// <summary>
		/// The policies for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policies Policies { get; set; }
		
		/// <summary>
		/// The provisioning state of the container registry at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<RegistryPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The status of an Azure resource at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// The properties of a storage account for a container registry. Only applicable to Classic SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccount")]
		public StorageAccountProperties StorageAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegistryPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	/// <summary>
	/// The status of an Azure resource at the time the operation was called.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Status
	{
		
		/// <summary>
		/// The short label for the status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStatus")]
		public string DisplayStatus { get; set; }
		
		/// <summary>
		/// The detailed message for the status, including alerts and error messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The timestamp when the status was changed to the current value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// The properties of a storage account for a container registry. Only applicable to Classic SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountProperties
	{
		
		/// <summary>
		/// The resource ID of the storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The SKU of a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// The SKU name of the container registry. Required for registry creation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SkuName Name { get; set; }
		
		/// <summary>
		/// The SKU tier based on the SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public SkuName Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Classic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 3,
	}
	
	/// <summary>
	/// The response from the ListCredentials operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryListCredentialsResult
	{
		
		/// <summary>
		/// The list of passwords for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwords")]
		public RegistryPassword[] Passwords { get; set; }
		
		/// <summary>
		/// The username for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The login password for the container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryPassword
	{
		
		/// <summary>
		/// The password name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public RegenerateCredentialParametersName Name { get; set; }
		
		/// <summary>
		/// The password value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list container registries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of container registries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Registry[] Value { get; set; }
	}
	
	/// <summary>
	/// A request to check whether a container registry name is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryNameCheckRequest
	{
		
		/// <summary>
		/// The name of the container registry.
		/// Required
		/// Min length: 5
		/// Max length: 50
		/// Pattern: ^[a-zA-Z0-9]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.Length(5, 50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]*$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public RegistryNameCheckRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegistryNameCheckRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.ContainerRegistry/registries")]
		Microsoft_ContainerRegistry_registries = 0,
	}
	
	/// <summary>
	/// The result of a request to check the availability of a container registry name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryNameStatus
	{
		
		/// <summary>
		/// If any, the error message that provides more detail for the reason that the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The value that indicates whether the name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// If any, the reason that the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating the properties of a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryPropertiesUpdateParameters
	{
		
		/// <summary>
		/// The value that indicates whether the admin user is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminUserEnabled")]
		public System.Nullable<System.Boolean> AdminUserEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public EncryptionProperty Encryption { get; set; }
		
		/// <summary>
		/// The network rule set for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkRuleSet")]
		public NetworkRuleSet NetworkRuleSet { get; set; }
		
		/// <summary>
		/// The policies for a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policies Policies { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryUpdateParameters
	{
		
		/// <summary>
		/// Managed identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityProperties Identity { get; set; }
		
		/// <summary>
		/// The parameters for updating the properties of a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RegistryPropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// The SKU of a container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The tags for the container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The quota usage for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryUsage
	{
		
		/// <summary>
		/// The current value of the usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int64> CurrentValue { get; set; }
		
		/// <summary>
		/// The limit of the usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// The name of the usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unit of measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<RegistryUsageUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RegistryUsageUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
	}
	
	/// <summary>
	/// The result of a request to get container registry quota usages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegistryUsageListResult
	{
		
		/// <summary>
		/// The list of container registry quota usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RegistryUsage[] Value { get; set; }
	}
	
	/// <summary>
	/// An object that represents a replication for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Replication
	{
		
		/// <summary>
		/// The properties of a replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ReplicationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a replication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReplicationProperties
	{
		
		/// <summary>
		/// The provisioning state of the replication at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public RegistryPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The status of an Azure resource at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list replications for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReplicationListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of replications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Replication[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a replication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReplicationUpdateParameters
	{
		
		/// <summary>
		/// The tags for the replication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// An Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource. This cannot be changed after the resource is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An object that represents a webhook for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Webhook
	{
		
		/// <summary>
		/// The properties of a webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WebhookProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookProperties
	{
		
		/// <summary>
		/// The list of actions that trigger the webhook to post notifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// The provisioning state of the webhook at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public RegistryPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The status of the webhook at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EncryptionPropertyStatus Status { get; set; }
	}
	
	/// <summary>
	/// The parameters for creating a webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookCreateParameters
	{
		
		/// <summary>
		/// The location of the webhook. This cannot be changed after the resource is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The parameters for creating the properties of a webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WebhookPropertiesCreateParameters Properties { get; set; }
		
		/// <summary>
		/// The tags for the webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The parameters for creating the properties of a webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookPropertiesCreateParameters
	{
		
		/// <summary>
		/// The list of actions that trigger the webhook to post notifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// Custom headers that will be added to the webhook notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public System.Collections.Generic.Dictionary<string, string> CustomHeaders { get; set; }
		
		/// <summary>
		/// The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The service URI for the webhook to post notifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
		
		/// <summary>
		/// The status of the webhook at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EncryptionPropertyStatus Status { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list webhooks for a container registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next list of webhooks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Webhook[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating the properties of a webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookPropertiesUpdateParameters
	{
		
		/// <summary>
		/// The list of actions that trigger the webhook to post notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// Custom headers that will be added to the webhook notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public System.Collections.Generic.Dictionary<string, string> CustomHeaders { get; set; }
		
		/// <summary>
		/// The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The service URI for the webhook to post notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceUri")]
		public string ServiceUri { get; set; }
		
		/// <summary>
		/// The status of the webhook at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EncryptionPropertyStatus Status { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a webhook.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WebhookUpdateParameters
	{
		
		/// <summary>
		/// The parameters for updating the properties of a webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WebhookPropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// The tags for the webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Azure Container Registry REST API operations.
		/// Operations_List providers/Microsoft.ContainerRegistry/operations
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.ContainerRegistry/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
		/// Registries_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="requestBody">The object containing information for the availability request.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<RegistryNameStatus> Registries_CheckNameAvailabilityAsync(string api_version, string subscriptionId, RegistryNameCheckRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ContainerRegistry/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistryNameStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the container registries under the specified subscription.
		/// Registries_List subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<RegistryListResult> Registries_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.ContainerRegistry/registries?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistryListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the container registries under the specified resource group.
		/// Registries_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<RegistryListResult> Registries_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistryListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified container registry.
		/// Registries_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Registry> Registries_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Registry>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a container registry with the specified parameters.
		/// Registries_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for creating a container registry.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Registry> Registries_CreateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, Registry requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Registry>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a container registry.
		/// Registries_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Registries_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a container registry with the specified parameters.
		/// Registries_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for updating a container registry.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Registry> Registries_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, RegistryUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Registry>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Copies an image to this container registry from the specified container registry.
		/// Registries_ImportImage subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters specifying the image to copy and the source container registry.</param>
		/// <returns>The request was successful; the operation has completed successfully.</returns>
		public async Task Registries_ImportImageAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, ImportImageParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/importImage?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the login credentials for the specified container registry.
		/// Registries_ListCredentials subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the list of credentials retrieved and returned successfully.</returns>
		public async Task<RegistryListCredentialsResult> Registries_ListCredentialsAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/listCredentials?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistryListCredentialsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the quota usages for the specified container registry.
		/// Registries_ListUsages subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the registry usages retrieved and returned successfully.</returns>
		public async Task<RegistryUsageListResult> Registries_ListUsagesAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/listUsages?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistryUsageListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerates one of the login credentials for the specified container registry.
		/// Registries_RegenerateCredential subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">Specifies name of the password which should be regenerated -- password or password2.</param>
		/// <returns>The request was successful; the specified credential regenerated successfully.</returns>
		public async Task<RegistryListCredentialsResult> Registries_RegenerateCredentialAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, RegenerateCredentialParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/regenerateCredential?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RegistryListCredentialsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the replications for the specified container registry.
		/// Replications_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ReplicationListResult> Replications_ListAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/replications?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReplicationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified replication.
		/// Replications_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="replicationName">The name of the replication.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Replication> Replications_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string replicationName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/replications/"+ (replicationName==null? "" : System.Uri.EscapeDataString(replicationName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Replication>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a replication for a container registry with the specified parameters.
		/// Replications_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="replicationName">The name of the replication.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for creating a replication.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Replication> Replications_CreateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string replicationName, Replication requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/replications/"+ (replicationName==null? "" : System.Uri.EscapeDataString(replicationName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Replication>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a replication from a container registry.
		/// Replications_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="replicationName">The name of the replication.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Replications_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string replicationName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/replications/"+ (replicationName==null? "" : System.Uri.EscapeDataString(replicationName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a replication for a container registry with the specified parameters.
		/// Replications_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="replicationName">The name of the replication.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for updating a replication.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Replication> Replications_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string replicationName, ReplicationUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/replications/"+ (replicationName==null? "" : System.Uri.EscapeDataString(replicationName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Replication>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the webhooks for the specified container registry.
		/// Webhooks_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<WebhookListResult> Webhooks_ListAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WebhookListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified webhook.
		/// Webhooks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="webhookName">The name of the webhook.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Webhook> Webhooks_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string webhookName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks/"+ (webhookName==null? "" : System.Uri.EscapeDataString(webhookName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Webhook>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a webhook for a container registry with the specified parameters.
		/// Webhooks_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="webhookName">The name of the webhook.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for creating a webhook.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Webhook> Webhooks_CreateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string webhookName, WebhookCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks/"+ (webhookName==null? "" : System.Uri.EscapeDataString(webhookName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Webhook>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a webhook from a container registry.
		/// Webhooks_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="webhookName">The name of the webhook.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Webhooks_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string webhookName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks/"+ (webhookName==null? "" : System.Uri.EscapeDataString(webhookName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a webhook with the specified parameters.
		/// Webhooks_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="webhookName">The name of the webhook.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for updating a webhook.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Webhook> Webhooks_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string webhookName, WebhookUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks/"+ (webhookName==null? "" : System.Uri.EscapeDataString(webhookName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Webhook>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the configuration of service URI and custom headers for the webhook.
		/// Webhooks_GetCallbackConfig subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="webhookName">The name of the webhook.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<CallbackConfig> Webhooks_GetCallbackConfigAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string webhookName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks/"+ (webhookName==null? "" : System.Uri.EscapeDataString(webhookName))+"/getCallbackConfig?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CallbackConfig>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists recent events for the specified webhook.
		/// Webhooks_ListEvents subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="webhookName">The name of the webhook.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<EventListResult> Webhooks_ListEventsAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string webhookName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks/"+ (webhookName==null? "" : System.Uri.EscapeDataString(webhookName))+"/listEvents?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EventListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Triggers a ping event to be sent to the webhook.
		/// Webhooks_Ping subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="webhookName">The name of the webhook.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<EventInfo> Webhooks_PingAsync(string api_version, string subscriptionId, string resourceGroupName, string registryName, string webhookName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/webhooks/"+ (webhookName==null? "" : System.Uri.EscapeDataString(webhookName))+"/ping?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EventInfo>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
