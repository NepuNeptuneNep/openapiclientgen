//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Location information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Location
	{
		
		/// <summary>
		/// The display name of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location metadata information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LocationMetadata Metadata { get; set; }
		
		/// <summary>
		/// The location name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The display name of the location and its region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalDisplayName")]
		public string RegionalDisplayName { get; set; }
		
		/// <summary>
		/// The subscription ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Location list operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationListResult
	{
		
		/// <summary>
		/// An array of locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Location[] Value { get; set; }
	}
	
	/// <summary>
	/// Location metadata information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LocationMetadata
	{
		
		/// <summary>
		/// The geography group of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geographyGroup")]
		public string GeographyGroup { get; set; }
		
		/// <summary>
		/// The latitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		/// <summary>
		/// The longitude of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		/// <summary>
		/// The regions paired to this region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pairedRegion")]
		public PairedRegion[] PairedRegion { get; set; }
		
		/// <summary>
		/// The physical location of the Azure location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalLocation")]
		public string PhysicalLocation { get; set; }
		
		/// <summary>
		/// The category of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCategory")]
		public System.Nullable<LocationMetadataRegionCategory> RegionCategory { get; set; }
		
		/// <summary>
		/// The type of the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionType")]
		public System.Nullable<LocationMetadataRegionType> RegionType { get; set; }
	}
	
	/// <summary>
	/// Information regarding paired region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PairedRegion
	{
		
		/// <summary>
		/// The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the paired region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The subscription ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LocationMetadataRegionCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recommended = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LocationMetadataRegionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Physical = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Logical = 1,
	}
	
	/// <summary>
	/// Information about a tenant managing the subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagedByTenant
	{
		
		/// <summary>
		/// The tenant ID of the managing tenant. This is a GUID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Microsoft.Resources operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of Microsoft.Resources operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Subscription information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Subscription
	{
		
		/// <summary>
		/// The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationSource")]
		public string AuthorizationSource { get; set; }
		
		/// <summary>
		/// The subscription display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An array containing the tenants managing the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedByTenants")]
		public ManagedByTenant[] ManagedByTenants { get; set; }
		
		/// <summary>
		/// The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<SubscriptionState> State { get; set; }
		
		/// <summary>
		/// The subscription ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// Subscription policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionPolicies")]
		public SubscriptionPolicies SubscriptionPolicies { get; set; }
		
		/// <summary>
		/// The subscription tenant ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SubscriptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PastDue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
	}
	
	/// <summary>
	/// Subscription list operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionListResult
	{
		
		/// <summary>
		/// The URL to get the next set of results.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Subscription[] Value { get; set; }
	}
	
	/// <summary>
	/// Subscription policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SubscriptionPolicies
	{
		
		/// <summary>
		/// The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationPlacementId")]
		public string LocationPlacementId { get; set; }
		
		/// <summary>
		/// The subscription quota ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaId")]
		public string QuotaId { get; set; }
		
		/// <summary>
		/// The subscription spending limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spendingLimit")]
		public System.Nullable<SubscriptionPoliciesSpendingLimit> SpendingLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SubscriptionPoliciesSpendingLimit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		On = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CurrentPeriodOff = 2,
	}
	
	/// <summary>
	/// Tenant Id information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TenantIdDescription
	{
		
		/// <summary>
		/// The fully qualified ID of the tenant. For example, /tenants/00000000-0000-0000-0000-000000000000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The tenant ID. For example, 00000000-0000-0000-0000-000000000000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	/// <summary>
	/// Tenant Ids information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TenantListResult
	{
		
		/// <summary>
		/// The URL to use for getting the next set of results.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// An array of tenants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TenantIdDescription[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Microsoft.Resources REST API operations.
		/// Operations_List providers/Microsoft.Resources/operations
		/// </summary>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Resources/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all subscriptions for a tenant.
		/// Subscriptions_List subscriptions
		/// </summary>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK - Returns an array of subscriptions.</returns>
		public async Task<SubscriptionListResult> Subscriptions_ListAsync(string api_version)
		{
			var requestUri = "subscriptions?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SubscriptionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets details about a specified subscription.
		/// Subscriptions_Get subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK - Returns information about the subscription.</returns>
		public async Task<Subscription> Subscriptions_GetAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Subscription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all available geo-locations.
		/// This operation provides all the locations that are available for resource providers; however, each resource provider may support a subset of this list.
		/// Subscriptions_ListLocations subscriptions/{subscriptionId}/locations
		/// </summary>
		/// <param name="subscriptionId">The ID of the target subscription.</param>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK - Returns an array of locations.</returns>
		public async Task<LocationListResult> Subscriptions_ListLocationsAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/locations&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LocationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the tenants for your account.
		/// Tenants_List tenants
		/// </summary>
		/// <param name="api_version">The API version to use for the operation.</param>
		/// <returns>OK - Returns an array of tenants.</returns>
		public async Task<TenantListResult> Tenants_ListAsync(string api_version)
		{
			var requestUri = "tenants?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TenantListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
