//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class APIKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountid")]
		public string Accountid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accounttypename")]
		public string Accounttypename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public string Cash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="change")]
		public string Change { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changepercent")]
		public string Changepercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computer")]
		public string Computer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyid")]
		public string Currencyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencytext")]
		public string Currencytext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hwid")]
		public string Hwid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="positions")]
		public Positions Positions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="positionspercent")]
		public Positions Positionspercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionid")]
		public string Sessionid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeid")]
		public string Typeid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Positions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BacktestTrade
	{
		
		[System.Runtime.Serialization.DataMember(Name="barsheld")]
		public string Barsheld { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changepct")]
		public string Changepct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public string Commission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entrydatetime")]
		public string Entrydatetime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryprice")]
		public string Entryprice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entrysignal")]
		public string Entrysignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exitdatetime")]
		public string Exitdatetime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exitprice")]
		public string Exitprice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exitsignal")]
		public string Exitsignal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mae")]
		public string Mae { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mfe")]
		public string Mfe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pandl")]
		public string Pandl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public string Shares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ByMonths
	{
		
		[System.Runtime.Serialization.DataMember(Name="equitypct")]
		public string Equitypct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ByQuarters
	{
		
		[System.Runtime.Serialization.DataMember(Name="equitypct")]
		public string Equitypct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class ByYears
	{
		
		[System.Runtime.Serialization.DataMember(Name="equitypct")]
		public string Equitypct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class CloudStrategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computer")]
		public string Computer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hwid")]
		public string Hwid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public string Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategyid")]
		public string Strategyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategystatusname")]
		public string Strategystatusname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Command
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountid")]
		public string Accountid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commanddate")]
		public System.Nullable<System.DateTimeOffset> Commanddate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commandid")]
		public string Commandid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commandstatusname")]
		public string Commandstatusname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commandtypename")]
		public string Commandtypename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computer")]
		public string Computer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hwid")]
		public string Hwid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public Parameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Parameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Connection
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public string Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectionid")]
		public string Connectionid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectionstring")]
		public string Connectionstring { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorcode")]
		public string Connectorcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorid")]
		public string Connectorid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorname")]
		public string Connectorname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectortypename")]
		public string Connectortypename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationdate")]
		public System.Nullable<System.DateTimeOffset> Creationdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionid")]
		public string Sessionid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedate")]
		public System.Nullable<System.DateTimeOffset> Updatedate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Connector
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorid")]
		public string Connectorid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectortypename")]
		public string Connectortypename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeid")]
		public string Typeid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Contribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="pandl")]
		public string Pandl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="share")]
		public string Share { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class DrawdownItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="drawdownpct")]
		public string Drawdownpct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EquityItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public string Cash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equity")]
		public string Equity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EquityPctItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="buyandhold")]
		public string Buyandhold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equity")]
		public string Equity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EquityPctSmItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="buyandhold")]
		public string Buyandhold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equity")]
		public string Equity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Longentry
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validnot")]
		public string Validnot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validor")]
		public string Validor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public string Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="step")]
		public string Step { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public string Stop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Longexit
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validnot")]
		public string Validnot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validor")]
		public string Validor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Longshort
	{
		
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public string Apr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avgbarsheld")]
		public string Avgbarsheld { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avgloss")]
		public string Avgloss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avglossbarsheld")]
		public string Avglossbarsheld { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avglosspct")]
		public string Avglosspct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avgprofit")]
		public string Avgprofit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avgprofitavgloss")]
		public string Avgprofitavgloss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avgprofitbarsheld")]
		public string Avgprofitbarsheld { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avgprofitpct")]
		public string Avgprofitpct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endcapital")]
		public string Endcapital { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exposure")]
		public string Exposure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grossloss")]
		public string Grossloss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grossprofit")]
		public string Grossprofit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="losingtrades")]
		public string Losingtrades { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="losingtradespct")]
		public string Losingtradespct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mar")]
		public string Mar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="margininterest")]
		public string Margininterest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxconsecloss")]
		public string Maxconsecloss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxconsecwin")]
		public string Maxconsecwin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxdrawdown")]
		public string Maxdrawdown { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxdrawdowndate")]
		public string Maxdrawdowndate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxdrawdownlength")]
		public string Maxdrawdownlength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxdrawdownpct")]
		public string Maxdrawdownpct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxdrawdownpctdate")]
		public string Maxdrawdownpctdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mpr")]
		public string Mpr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netprofit")]
		public string Netprofit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netprofitpct")]
		public string Netprofitpct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profitabletrades")]
		public string Profitabletrades { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profitabletradespct")]
		public string Profitabletradespct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profitfactor")]
		public string Profitfactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profitriskratio")]
		public string Profitriskratio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rar")]
		public string Rar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recoveryfactor")]
		public string Recoveryfactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sharperatio")]
		public string Sharperatio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortinoratio")]
		public string Sortinoratio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startcapital")]
		public string Startcapital { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalcommission")]
		public string Totalcommission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totaltrades")]
		public string Totaltrades { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalvolume")]
		public string Totalvolume { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="turnover")]
		public string Turnover { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Market
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryid")]
		public string Countryid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketid")]
		public string Marketid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public string Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public string Shares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewSignal
	{
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public string Shares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewStrategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public string Apr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="drawdown")]
		public string Drawdown { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limitorder")]
		public string Limitorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketname")]
		public string Marketname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiposition")]
		public string Multiposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="positionsize")]
		public string Positionsize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategytypeid")]
		public string Strategytypeid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbols")]
		public string Symbols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeframe")]
		public string Timeframe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewTask
	{
		
		[System.Runtime.Serialization.DataMember(Name="isbenchmark")]
		public string Isbenchmark { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategyid")]
		public string Strategyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasktypeid")]
		public string Tasktypeid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userid2")]
		public string Userid2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NewUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class News
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsid")]
		public string Newsid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public string Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderid")]
		public string Orderid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public string Shares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusname")]
		public string Statusname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Result
	{
		
		[System.Runtime.Serialization.DataMember(Name="c")]
		public System.Nullable<System.Double> C { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="h")]
		public System.Nullable<System.Double> H { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l")]
		public System.Nullable<System.Double> L { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="n")]
		public System.Nullable<System.Int32> N { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="o")]
		public System.Nullable<System.Double> O { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="t")]
		public System.Nullable<System.Int32> T { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="v")]
		public System.Nullable<System.Int32> V { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Rule
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruletype")]
		public string Ruletype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validnot")]
		public string Validnot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validor")]
		public string Validor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Rules
	{
		
		[System.Runtime.Serialization.DataMember(Name="longentry")]
		public Longentry[] Longentry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longexit")]
		public Longexit[] Longexit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Session
	{
		
		[System.Runtime.Serialization.DataMember(Name="computer")]
		public string Computer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hwid")]
		public string Hwid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionid")]
		public string Sessionid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionmodename")]
		public string Sessionmodename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionstatusname")]
		public string Sessionstatusname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userid")]
		public string Userid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Signal
	{
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public string Shares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signalid")]
		public string Signalid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Snapshot
	{
		
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public string Cash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daynum")]
		public string Daynum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snapshotid")]
		public string Snapshotid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class StartStrategyData
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountid")]
		public string Accountid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategyid")]
		public string Strategyid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Strategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public string Apr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="brokername")]
		public string Brokername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datascale")]
		public string Datascale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="drawdown")]
		public string Drawdown { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limitorder")]
		public string Limitorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketname")]
		public string Marketname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiposition")]
		public string Multiposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="positionsize")]
		public string Positionsize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="risklevelcode")]
		public string Risklevelcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="risklevelid")]
		public string Risklevelid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="risklevelname")]
		public string Risklevelname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rules Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategyid")]
		public string Strategyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategytypeid")]
		public string Strategytypeid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbols")]
		public string[] Symbols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskfolder")]
		public string Taskfolder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskid")]
		public string Taskid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskresult")]
		public Taskresult Taskresult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeframe")]
		public string Timeframe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedate")]
		public System.Nullable<System.DateTimeOffset> Updatedate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Taskresult
	{
		
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public string Apr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="curMonthProfit")]
		public string CurMonthProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="curYearProfit")]
		public string CurYearProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="drawdown")]
		public string Drawdown { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="halfYearProfit")]
		public string HalfYearProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthProfit")]
		public string MonthProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevMonthProfit")]
		public string PrevMonthProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalProfit")]
		public string TotalProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekProfit")]
		public string WeekProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearProfit")]
		public string YearProfit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class StrategyPosition
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Task_
	{
		
		[System.Runtime.Serialization.DataMember(Name="isbenchmark")]
		public string Isbenchmark { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusupdatedate")]
		public System.Nullable<System.DateTimeOffset> Statusupdatedate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategyid")]
		public string Strategyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskid")]
		public string Taskid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usestaticdata")]
		public string Usestaticdata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Trade
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public string Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shares")]
		public string Shares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tradeid")]
		public string Tradeid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UpdatedConnection
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public string Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorid")]
		public string Connectorid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UpdatedStrategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limitorder")]
		public string Limitorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketname")]
		public string Marketname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiposition")]
		public string Multiposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbols")]
		public string Symbols { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UpdatedStrategyContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rules Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdby")]
		public string Createdby { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regdate")]
		public string Regdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userid")]
		public string Userid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get autofollow strategies list
		/// Get autofollow strategies list
		/// AutofollowStrategiesGet autofollow/strategies
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Strategy[]> AutofollowStrategiesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Strategy[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new autofollow strategy
		/// Create new autofollow strategy
		/// AutofollowStrategiesPost autofollow/strategies
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<AutofollowStrategiesPostReturn> AutofollowStrategiesPostAsync(AutofollowStrategiesPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AutofollowStrategiesPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get autofollow strategy by ID
		/// Get autofollow strategy by ID
		/// AutofollowStrategies_strategyidGet autofollow/strategies/{strategyid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Strategy> AutofollowStrategies_strategyidGetAsync(long strategyid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies/"+strategyid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Strategy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update autofollow strategy
		/// Update autofollow strategy
		/// AutofollowStrategies_strategyidPut autofollow/strategies/{strategyid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<AutofollowStrategies_strategyidPutReturn> AutofollowStrategies_strategyidPutAsync(long strategyid, AutofollowStrategies_strategyidPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies/"+strategyid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AutofollowStrategies_strategyidPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update rules for strategy that was created with strategy builder
		/// Update rules for strategy that was created with strategy builder
		/// AutofollowStrategies_strategyidContentPut autofollow/strategies/{strategyid}/content
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<AutofollowStrategies_strategyidContentPutReturn> AutofollowStrategies_strategyidContentPutAsync(long strategyid, AutofollowStrategies_strategyidContentPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies/"+strategyid+"/content";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AutofollowStrategies_strategyidContentPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get positions for strategy
		/// Get positions for strategy
		/// AutofollowStrategies_strategyidPositionsGet autofollow/strategies/{strategyid}/positions
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<StrategyPosition[]> AutofollowStrategies_strategyidPositionsGetAsync(long strategyid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies/"+strategyid+"/positions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StrategyPosition[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get trading signals for strategy
		/// Get trading signals for strategy
		/// AutofollowStrategies_strategyidSignalsGetByCount autofollow/strategies/{strategyid}/signals
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Signal[]> AutofollowStrategies_strategyidSignalsGetByCountAsync(long strategyid, long count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies/"+strategyid+"/signals?count="+count;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Signal[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Send a new signal for autofollow strategy
		/// Send a new signal for autofollow strategy
		/// AutofollowStrategies_strategyidSignalsPost autofollow/strategies/{strategyid}/signals
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<AutofollowStrategies_strategyidSignalsPostReturn> AutofollowStrategies_strategyidSignalsPostAsync(long strategyid, AutofollowStrategies_strategyidSignalsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "autofollow/strategies/"+strategyid+"/signals";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AutofollowStrategies_strategyidSignalsPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get strategy builder rules list
		/// Get strategy builder rules list
		/// BuilderRulesGet builder/rules
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Rule[]> BuilderRulesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builder/rules";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Rule[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get strategy builder rules by ID
		/// Get strategy builder rules by ID
		/// BuilderRules_ruleidGet builder/rules/{ruleid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Rule[]> BuilderRules_ruleidGetAsync(long ruleid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builder/rules/"+ruleid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Rule[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get API keys
		/// Get API keys
		/// ClientApikeysGet client/apikeys
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<APIKey[]> ClientApikeysGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/apikeys";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<APIKey[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create new API key
		/// Create new API key
		/// ClientApikeysPost client/apikeys
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<ClientApikeysPostReturn> ClientApikeysPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/apikeys";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ClientApikeysPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete API key
		/// Delete API key
		/// ClientApikeys_keyidDelete client/apikeys/{keyid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<ClientApikeys_keyidDeleteReturn> ClientApikeys_keyidDeleteAsync(long keyid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/apikeys/"+keyid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ClientApikeys_keyidDeleteReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get users list
		/// Get users list
		/// ClientUsersGet client/users
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<User[]> ClientUsersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/users";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Logs user into the system
		/// Logs user into the system
		/// ClientUsersLoginPost client/users/login
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<ClientUsersLoginPostReturn> ClientUsersLoginPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/users/login";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ClientUsersLoginPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Register a new user
		/// Register a new user
		/// ClientUsersRegisterPost client/users/register
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<ClientUsersRegisterPostReturn> ClientUsersRegisterPostAsync(ClientUsersRegisterPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/users/register";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ClientUsersRegisterPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get user by ID
		/// Get user by ID
		/// ClientUsers_useridGet client/users/{userid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<User> ClientUsers_useridGetAsync(long userid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/users/"+userid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<User>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get trading accounts list
		/// Get trading accounts list
		/// CloudAccountsGet cloud/accounts
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Account[]> CloudAccountsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get trading account by ID
		/// Get trading account by ID
		/// CloudAccounts_accountidGet cloud/accounts/{accountid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Account> CloudAccounts_accountidGetAsync(long accountid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Close all positions by account
		/// Close all positions by account
		/// CloudAccounts_accountidCloseallPost cloud/accounts/{accountid}/closeall
		/// </summary>
		public async Task CloudAccounts_accountidCloseallPostAsync(long accountid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid+"/closeall";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get orders list by account
		/// Get orders list by account
		/// CloudAccounts_accountidOrdersGet cloud/accounts/{accountid}/orders
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Order[]> CloudAccounts_accountidOrdersGetAsync(long accountid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid+"/orders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Order[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Place a new order
		/// Place a new order
		/// CloudAccounts_accountidOrdersPost cloud/accounts/{accountid}/orders
		/// </summary>
		public async Task CloudAccounts_accountidOrdersPostAsync(long accountid, CloudAccounts_accountidOrdersPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid+"/orders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel an order by ID
		/// Cancel an order by ID
		/// CloudAccounts_accountidOrders_orderidDelete cloud/accounts/{accountid}/orders/{orderid}
		/// </summary>
		public async Task CloudAccounts_accountidOrders_orderidDeleteAsync(long accountid, long orderid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid+"/orders/"+orderid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get account equity and cash snapshots
		/// Get account equity and cash snapshots
		/// CloudAccounts_accountidSnapshotsGet cloud/accounts/{accountid}/snapshots
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Snapshot[]> CloudAccounts_accountidSnapshotsGetAsync(long accountid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid+"/snapshots";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Snapshot[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Syhchronize an account with account active strategies
		/// Syhchronize an account with account active strategies
		/// CloudAccounts_accountidSyncPost cloud/accounts/{accountid}/sync
		/// </summary>
		public async Task CloudAccounts_accountidSyncPostAsync(long accountid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid+"/sync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get trades list by account
		/// Get trades list by account
		/// CloudAccounts_accountidTradesGet cloud/accounts/{accountid}/trades
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Trade[]> CloudAccounts_accountidTradesGetAsync(long accountid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/accounts/"+accountid+"/trades";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Trade[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get commands list
		/// Get commands list
		/// CloudCommandsGet cloud/commands
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Command[]> CloudCommandsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/commands";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Command[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get command by ID
		/// Get command by ID
		/// CloudCommands_commandidGet cloud/commands/{commandid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Command> CloudCommands_commandidGetAsync(long commandid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/commands/"+commandid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Command>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get connections list
		/// Get connections list
		/// CloudConnectionsGet cloud/connections
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Connection[]> CloudConnectionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/connections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Connection[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new connection
		/// Create a new connection
		/// CloudConnectionsPost cloud/connections
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<CloudConnectionsPostReturn> CloudConnectionsPostAsync(CloudConnectionsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/connections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CloudConnectionsPostReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get connection by ID
		/// Get connection by ID
		/// CloudConnections_connectionidGet cloud/connections/{connectionid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Connection> CloudConnections_connectionidGetAsync(long connectionid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/connections/"+connectionid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Connection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update existing connection
		/// Update existing connection
		/// CloudConnections_connectionidPut cloud/connections/{connectionid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<CloudConnections_connectionidPutReturn> CloudConnections_connectionidPutAsync(long connectionid, CloudConnections_connectionidPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/connections/"+connectionid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CloudConnections_connectionidPutReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete connection by ID
		/// Delete connection by ID
		/// CloudConnections_connectionidDelete cloud/connections/{connectionid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<CloudConnections_connectionidDeleteReturn> CloudConnections_connectionidDeleteAsync(long connectionid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/connections/"+connectionid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CloudConnections_connectionidDeleteReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get available connectors list
		/// Get available connectors list
		/// CloudConnectorsGet cloud/connectors
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Connector[]> CloudConnectorsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/connectors";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Connector[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get connector by ID
		/// Get connector by ID
		/// CloudConnectors_connectoridGet cloud/connectors/{connectorid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Connector> CloudConnectors_connectoridGetAsync(long connectorid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/connectors/"+connectorid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Connector>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get sessions list
		/// Get sessions list
		/// CloudSessionsGet cloud/sessions
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Session[]> CloudSessionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/sessions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Session[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get session by ID
		/// Get session by ID
		/// CloudSessions_sessionidGet cloud/sessions/{sessionid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Session> CloudSessions_sessionidGetAsync(long sessionid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/sessions/"+sessionid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Session>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get list of active (executing) strategies
		/// Get list of active (executing) strategies
		/// CloudStrategiesGet cloud/strategies
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<CloudStrategy[]> CloudStrategiesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/strategies";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CloudStrategy[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Start a strategy execution for account
		/// Start a strategy execution for account
		/// CloudStrategiesStartPost cloud/strategies/start
		/// </summary>
		public async Task CloudStrategiesStartPostAsync(CloudStrategiesStartPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/strategies/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get active (executing) strategy by ID
		/// Get active (executing) strategy by ID
		/// CloudStrategies_strategyidGet cloud/strategies/{strategyid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<CloudStrategy[]> CloudStrategies_strategyidGetAsync(long strategyid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/strategies/"+strategyid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CloudStrategy[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stop a strategy execution by ID
		/// Stop a strategy execution by ID
		/// CloudStrategies_strategyidStopPost cloud/strategies/{strategyid}/stop
		/// </summary>
		public async Task CloudStrategies_strategyidStopPostAsync(long strategyid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cloud/strategies/"+strategyid+"/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get markets list
		/// Get markets list
		/// MarketdataMarketsGet marketdata/markets
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Market[]> MarketdataMarketsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketdata/markets";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Market[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get market by ID
		/// Get market by ID
		/// MarketdataMarkets_marketidGet marketdata/markets/{marketid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Market> MarketdataMarkets_marketidGetAsync(long marketid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketdata/markets/"+marketid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Market>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get symbols list
		/// Get symbols list
		/// MarketdataSymbolsGetByMarketidAndFilter marketdata/symbols
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<string[]> MarketdataSymbolsGetByMarketidAndFilterAsync(long marketid, long filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketdata/symbols?marketid="+marketid+"&filter="+filter;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get symbol by ID
		/// Get symbol by ID
		/// MarketdataSymbols_symbolidGet marketdata/symbols/{symbolid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<string> MarketdataSymbols_symbolidGetAsync(long symbolid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketdata/symbols/"+symbolid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get historical data for instrument
		/// Get historical data for instrument
		/// MarketdataSymbols_symbolidHistdataGetByTfAndFromAndTo marketdata/symbols/{symbolid}/histdata
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<MarketdataSymbols_symbolidHistdataGetByTfAndFromAndToReturn> MarketdataSymbols_symbolidHistdataGetByTfAndFromAndToAsync(long symbolid, long tf, long from, long to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketdata/symbols/"+symbolid+"/histdata?tf="+tf+"&from="+from+"&to="+to;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MarketdataSymbols_symbolidHistdataGetByTfAndFromAndToReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get news list
		/// Get news list
		/// NewsNewsGet news/news
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<News[]> NewsNewsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "news/news";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<News[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get news by ID
		/// Get news by ID
		/// NewsNews_newsidGet news/news/{newsid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<News> NewsNews_newsidGetAsync(long newsid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "news/news/"+newsid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<News>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Ping
		/// Ping
		/// PingGet ping
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<string> PingGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ping";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get tasks list
		/// Get tasks list
		/// TaskmanagerTasksGet taskmanager/tasks
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Task_[]> TaskmanagerTasksGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Task_[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new task
		/// Create a new task
		/// TaskmanagerTasksPost taskmanager/tasks
		/// </summary>
		public async Task TaskmanagerTasksPostAsync(TaskmanagerTasksPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get task by ID
		/// Get task by ID
		/// TaskmanagerTasks_taskidGet taskmanager/tasks/{taskid}
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Task_> TaskmanagerTasks_taskidGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Task_>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get backtest data for equity chart, grouped by months
		/// Get backtest data for equity chart, grouped by months
		/// TaskmanagerTasks_taskidBymonthsGet taskmanager/tasks/{taskid}/bymonths
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<ByMonths[]> TaskmanagerTasks_taskidBymonthsGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/bymonths";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ByMonths[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get backtest data for equity chart, grouped by quarters
		/// Get backtest data for equity chart, grouped by quarters
		/// TaskmanagerTasks_taskidByquartersGet taskmanager/tasks/{taskid}/byquarters
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<ByQuarters[]> TaskmanagerTasks_taskidByquartersGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/byquarters";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ByQuarters[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get backtest data for equity chart, grouped by years
		/// Get backtest data for equity chart, grouped by years
		/// TaskmanagerTasks_taskidByyearsGet taskmanager/tasks/{taskid}/byyears
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<ByYears[]> TaskmanagerTasks_taskidByyearsGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/byyears";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ByYears[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get backtest symbol contribution data
		/// Get backtest symbol contribution data
		/// TaskmanagerTasks_taskidContributionGet taskmanager/tasks/{taskid}/contribution
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<Contribution[]> TaskmanagerTasks_taskidContributionGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/contribution";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Contribution[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get data for drawdown chart
		/// Get data for drawdown chart
		/// TaskmanagerTasks_taskidDrawdownGet taskmanager/tasks/{taskid}/drawdown
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<DrawdownItem[]> TaskmanagerTasks_taskidDrawdownGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/drawdown";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DrawdownItem[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get data for equity chart
		/// Get data for equity chart
		/// TaskmanagerTasks_taskidEquityGet taskmanager/tasks/{taskid}/equity
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<EquityItem[]> TaskmanagerTasks_taskidEquityGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/equity";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EquityItem[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get data for equity chart (%)
		/// Get data for equity chart (%)
		/// TaskmanagerTasks_taskidEquitypctGet taskmanager/tasks/{taskid}/equitypct
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<EquityPctItem[]> TaskmanagerTasks_taskidEquitypctGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/equitypct";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EquityPctItem[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get spared data for equity chart (%)
		/// Get spared data for equity chart (%)
		/// TaskmanagerTasks_taskidEquitypctsmGet taskmanager/tasks/{taskid}/equitypctsm
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<EquityPctSmItem[]> TaskmanagerTasks_taskidEquitypctsmGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/equitypctsm";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EquityPctSmItem[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get task result folder name
		/// Get task result folder name
		/// TaskmanagerTasks_taskidFolderGet taskmanager/tasks/{taskid}/folder
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<TaskmanagerTasks_taskidFolderGetReturn> TaskmanagerTasks_taskidFolderGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/folder";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskmanagerTasks_taskidFolderGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get backtest statistics
		/// Get backtest statistics
		/// TaskmanagerTasks_taskidPerformanceGet taskmanager/tasks/{taskid}/performance
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<TaskmanagerTasks_taskidPerformanceGetReturn> TaskmanagerTasks_taskidPerformanceGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/performance";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskmanagerTasks_taskidPerformanceGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get task result
		/// Get task result
		/// TaskmanagerTasks_taskidResultGet taskmanager/tasks/{taskid}/result
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<TaskmanagerTasks_taskidResultGetReturn> TaskmanagerTasks_taskidResultGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/result";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskmanagerTasks_taskidResultGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get task result (version 2)
		/// Get task result (version 2)
		/// TaskmanagerTasks_taskidResult2Get taskmanager/tasks/{taskid}/result2
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<TaskmanagerTasks_taskidResult2GetReturn> TaskmanagerTasks_taskidResult2GetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/result2";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskmanagerTasks_taskidResult2GetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get task status
		/// Get task status
		/// TaskmanagerTasks_taskidStatusGet taskmanager/tasks/{taskid}/status
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<TaskmanagerTasks_taskidStatusGetReturn> TaskmanagerTasks_taskidStatusGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/status";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskmanagerTasks_taskidStatusGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get backtest trades list
		/// Get backtest trades list
		/// TaskmanagerTasks_taskidTradesGet taskmanager/tasks/{taskid}/trades
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<BacktestTrade[]> TaskmanagerTasks_taskidTradesGetAsync(long taskid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taskmanager/tasks/"+taskid+"/trades";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BacktestTrade[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get current server time
		/// Get current server time
		/// TimeGet time
		/// </summary>
		/// <returns>Successful operation</returns>
		public async Task<TimeGetReturn> TimeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TimeGetReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class AutofollowStrategiesPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public NewStrategy Strategy { get; set; }
	}
	
	public class AutofollowStrategiesPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="strategyid")]
		public System.Nullable<System.Int32> Strategyid { get; set; }
	}
	
	public class AutofollowStrategies_strategyidPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public UpdatedStrategy Strategy { get; set; }
	}
	
	public class AutofollowStrategies_strategyidPutReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public class AutofollowStrategies_strategyidContentPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public UpdatedStrategyContent Strategy { get; set; }
	}
	
	public class AutofollowStrategies_strategyidContentPutReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="strategyid")]
		public string Strategyid { get; set; }
	}
	
	public class AutofollowStrategies_strategyidSignalsPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="signal")]
		public NewSignal Signal { get; set; }
	}
	
	public class AutofollowStrategies_strategyidSignalsPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="signalid")]
		public string Signalid { get; set; }
	}
	
	public class ClientApikeysPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public System.Nullable<System.Int32> Keyid { get; set; }
	}
	
	public class ClientApikeys_keyidDeleteReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public System.Nullable<System.Int32> Keyid { get; set; }
	}
	
	public class ClientUsersLoginPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userid")]
		public System.Nullable<System.Int32> Userid { get; set; }
	}
	
	public class ClientUsersRegisterPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public NewUser User { get; set; }
	}
	
	public class ClientUsersRegisterPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="userid")]
		public System.Nullable<System.Int32> Userid { get; set; }
	}
	
	public class CloudAccounts_accountidOrdersPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public NewOrder Order { get; set; }
	}
	
	public class CloudConnectionsPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public UpdatedConnection Connection { get; set; }
	}
	
	public class CloudConnectionsPostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectionid")]
		public System.Nullable<System.Int32> Connectionid { get; set; }
	}
	
	public class CloudConnections_connectionidPutPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public UpdatedConnection Connection { get; set; }
	}
	
	public class CloudConnections_connectionidPutReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectionid")]
		public System.Nullable<System.Int32> Connectionid { get; set; }
	}
	
	public class CloudConnections_connectionidDeleteReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectionid")]
		public System.Nullable<System.Int32> Connectionid { get; set; }
	}
	
	public class CloudStrategiesStartPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public StartStrategyData Data { get; set; }
	}
	
	public class MarketdataSymbols_symbolidHistdataGetByTfAndFromAndToReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjusted")]
		public System.Nullable<System.Boolean> Adjusted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryCount")]
		public System.Nullable<System.Int32> QueryCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Result[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultsCount")]
		public System.Nullable<System.Int32> ResultsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticker")]
		public string Ticker { get; set; }
	}
	
	public class TaskmanagerTasksPostPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="task")]
		public NewTask Task { get; set; }
	}
	
	public class TaskmanagerTasks_taskidFolderGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
	}
	
	public class TaskmanagerTasks_taskidPerformanceGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="buyandhold")]
		public Longshort Buyandhold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="long")]
		public Longshort Long { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longshort")]
		public Longshort Longshort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="short")]
		public Longshort Short { get; set; }
	}
	
	public class TaskmanagerTasks_taskidResultGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="bymonths_csv")]
		public string Bymonths_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bymonths_png")]
		public string Bymonths_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byquarters_csv")]
		public string Byquarters_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byquarters_png")]
		public string Byquarters_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byyears_csv")]
		public string Byyears_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byyears_png")]
		public string Byyears_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_csv")]
		public string Contribution_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_png")]
		public string Contribution_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="drawdown_csv")]
		public string Drawdown_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="drawdown_png")]
		public string Drawdown_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equity_csv")]
		public string Equity_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equity_png")]
		public string Equity_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equitypct_csv")]
		public string Equitypct_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equitypct_png")]
		public string Equitypct_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equitypctnofill_csv")]
		public string Equitypctnofill_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equitypctnofill_png")]
		public string Equitypctnofill_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equitypctsm")]
		public string Equitypctsm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equitypctsm_csv")]
		public string Equitypctsm_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equitypctsm_png")]
		public string Equitypctsm_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="performance_csv")]
		public string Performance_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="performance_png")]
		public string Performance_png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trades_csv")]
		public string Trades_csv { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trades_png")]
		public string Trades_png { get; set; }
	}
	
	public class TaskmanagerTasks_taskidResult2GetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public string Apr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="curMonthProfit")]
		public string CurMonthProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="curYearProfit")]
		public string CurYearProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="drawdown")]
		public string Drawdown { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="halfYearProfit")]
		public string HalfYearProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthProfit")]
		public string MonthProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevMonthProfit")]
		public string PrevMonthProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalProfit")]
		public string TotalProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekProfit")]
		public string WeekProfit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearProfit")]
		public string YearProfit { get; set; }
	}
	
	public class TaskmanagerTasks_taskidStatusGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class TimeGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="servertime")]
		public System.Nullable<System.Int32> Servertime { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
