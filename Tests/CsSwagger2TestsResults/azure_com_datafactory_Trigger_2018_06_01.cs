//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Trigger that runs every time a Blob event occurs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobEventsTrigger
	{
		
		/// <summary>
		/// Blob Events Trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeProperties")]
		public object TypeProperties { get; set; }
	}
	
	/// <summary>
	/// Trigger that runs every time the selected Blob container changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobTrigger
	{
		
		/// <summary>
		/// Blob Trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeProperties")]
		public object TypeProperties { get; set; }
	}
	
	/// <summary>
	/// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChainingTrigger
	{
		
		/// <summary>
		/// Pipeline that needs to be triggered with the given parameters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public object Pipeline { get; set; }
		
		/// <summary>
		/// Chaining Trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeProperties")]
		public object TypeProperties { get; set; }
	}
	
	/// <summary>
	/// The days of the week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sunday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tuesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wednesday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thursday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Friday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Saturday = 6,
	}
	
	/// <summary>
	/// Referenced dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DependencyReference
	{
		
		/// <summary>
		/// The type of dependency reference.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Base class for all triggers that support one to many model for trigger to pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MultiplePipelineTrigger : Trigger
	{
		
		/// <summary>
		/// Pipelines that need to be started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelines")]
		public MultiplePipelineTriggerPipelines[] MultiplePipelineTriggerPipelines { get; set; }
	}
	
	public class MultiplePipelineTriggerPipelines
	{
		
		/// <summary>
		/// An object mapping parameter names to argument values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
		
		/// <summary>
		/// Pipeline reference type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineReference")]
		public object PipelineReference { get; set; }
	}
	
	/// <summary>
	/// Enumerates possible frequency option for the schedule trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RecurrenceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
	}
	
	/// <summary>
	/// The recurrence schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecurrenceSchedule
	{
		
		/// <summary>
		/// The hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public int[] Hours { get; set; }
		
		/// <summary>
		/// The minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public int[] Minutes { get; set; }
		
		/// <summary>
		/// The month days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthDays")]
		public int[] MonthDays { get; set; }
		
		/// <summary>
		/// The monthly occurrences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyOccurrences")]
		public RecurrenceScheduleOccurrence[] MonthlyOccurrences { get; set; }
		
		/// <summary>
		/// The days of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weekDays")]
		public DayOfWeek[] WeekDays { get; set; }
	}
	
	/// <summary>
	/// The recurrence schedule occurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecurrenceScheduleOccurrence
	{
		
		/// <summary>
		/// The days of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public DayOfWeek Day { get; set; }
		
		/// <summary>
		/// The occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrence")]
		public System.Nullable<System.Int32> Occurrence { get; set; }
	}
	
	/// <summary>
	/// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RerunTumblingWindowTrigger
	{
		
		/// <summary>
		/// Rerun Trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeProperties")]
		public object TypeProperties { get; set; }
	}
	
	/// <summary>
	/// Execution policy for an activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RetryPolicy
	{
		
		/// <summary>
		/// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Interval between retries in seconds. Default is 30.
		/// Minimum: 30
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(30, 86400)]
		public System.Nullable<System.Int32> IntervalInSeconds { get; set; }
	}
	
	/// <summary>
	/// Trigger that creates pipeline runs periodically, on schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleTrigger
	{
		
		/// <summary>
		/// Schedule Trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeProperties")]
		public object TypeProperties { get; set; }
	}
	
	/// <summary>
	/// The workflow trigger recurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScheduleTriggerRecurrence
	{
		
		/// <summary>
		/// The end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Enumerates possible frequency option for the schedule trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public RecurrenceFrequency Frequency { get; set; }
		
		/// <summary>
		/// The interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		/// <summary>
		/// The recurrence schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public RecurrenceSchedule Schedule { get; set; }
		
		/// <summary>
		/// The start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Self referenced tumbling window trigger dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SelfDependencyTumblingWindowTriggerReference
	{
		
		/// <summary>
		/// Timespan applied to the start time of a tumbling window when evaluating dependency.
		/// Required
		/// Min length: 8
		/// Max length: 15
		/// Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))")]
		public string Offset { get; set; }
		
		/// <summary>
		/// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
		/// Min length: 8
		/// Max length: 15
		/// Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))")]
		public string Size { get; set; }
	}
	
	/// <summary>
	/// Azure data factory nested object which contains information about creating pipeline run
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Trigger
	{
		
		/// <summary>
		/// List of tags that can be used for describing the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Trigger description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Enumerates possible state of Triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeState")]
		public System.Nullable<TriggerRuntimeState> RuntimeState { get; set; }
		
		/// <summary>
		/// Trigger type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TriggerRuntimeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 2,
	}
	
	/// <summary>
	/// Trigger referenced dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerDependencyReference
	{
		
		/// <summary>
		/// Trigger reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceTrigger")]
		public TriggerReference ReferenceTrigger { get; set; }
	}
	
	/// <summary>
	/// Trigger reference type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerReference
	{
		
		/// <summary>
		/// Reference trigger name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceName")]
		public string ReferenceName { get; set; }
		
		/// <summary>
		/// Trigger reference type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TriggerReferenceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TriggerReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TriggerReference = 0,
	}
	
	/// <summary>
	/// Enumerates possible frequency option for the tumbling window trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TumblingWindowFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 1,
	}
	
	/// <summary>
	/// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TumblingWindowTrigger
	{
		
		/// <summary>
		/// Pipeline that needs to be triggered with the given parameters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public object Pipeline { get; set; }
		
		/// <summary>
		/// Tumbling Window Trigger properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeProperties")]
		public object TypeProperties { get; set; }
	}
	
	/// <summary>
	/// Referenced tumbling window trigger dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TumblingWindowTriggerDependencyReference
	{
		
		/// <summary>
		/// Timespan applied to the start time of a tumbling window when evaluating dependency.
		/// Min length: 8
		/// Max length: 15
		/// Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))")]
		public string Offset { get; set; }
		
		/// <summary>
		/// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
		/// Min length: 8
		/// Max length: 15
		/// Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))")]
		public string Size { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
