//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Definition of the runbook property type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContentHash
	{
		
		/// <summary>
		/// Gets or sets the content hash algorithm used to hash the content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Gets or sets expected hash value of the content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Definition of the content link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContentLink
	{
		
		/// <summary>
		/// Definition of the runbook property type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHash")]
		public ContentHash ContentHash { get; set; }
		
		/// <summary>
		/// Gets or sets the uri of the runbook content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// Gets or sets the version of the content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Definition of the job stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStream
	{
		
		/// <summary>
		/// Gets or sets the id of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Definition of the job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobStreamProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The response model for the list job stream operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStreamListResult
	{
		
		/// <summary>
		/// Gets or sets the next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of job streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JobStream[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of the job stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobStreamProperties
	{
		
		/// <summary>
		/// Gets or sets the id of the job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobStreamId")]
		public string JobStreamId { get; set; }
		
		/// <summary>
		/// Gets or sets the stream text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamText")]
		public string StreamText { get; set; }
		
		/// <summary>
		/// Gets or sets the stream type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamType")]
		public System.Nullable<JobStreamPropertiesStreamType> StreamType { get; set; }
		
		/// <summary>
		/// Gets or sets the summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Gets or sets the creation time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
		
		/// <summary>
		/// Gets or sets the values of the job stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Collections.Generic.Dictionary<string, object> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobStreamPropertiesStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Progress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Output = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debug = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verbose = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any = 6,
	}
	
	public class Runbook
	{
	}
	
	/// <summary>
	/// The parameters supplied to the create or update runbook operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookCreateOrUpdateDraftParameters
	{
		
		/// <summary>
		/// Content of the Runbook.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runbookContent")]
		public string RunbookContent { get; set; }
	}
	
	/// <summary>
	/// The parameters supplied to the create or update draft runbook properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookCreateOrUpdateDraftProperties
	{
		
		/// <summary>
		/// Gets or sets the description of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="draft")]
		public RunbookDraft Draft { get; set; }
		
		/// <summary>
		/// Gets or sets the activity-level tracing options of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logActivityTrace")]
		public System.Nullable<System.Int32> LogActivityTrace { get; set; }
		
		/// <summary>
		/// Gets or sets progress log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logProgress")]
		public System.Nullable<System.Boolean> LogProgress { get; set; }
		
		/// <summary>
		/// Gets or sets verbose log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logVerbose")]
		public System.Nullable<System.Boolean> LogVerbose { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the runbook.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runbookType")]
		public RunbookCreateOrUpdateDraftPropertiesRunbookType RunbookType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunbookCreateOrUpdateDraftPropertiesRunbookType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Script = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Graph = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PowerShellWorkflow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PowerShell = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GraphPowerShellWorkflow = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GraphPowerShell = 5,
	}
	
	/// <summary>
	/// The parameters supplied to the create or update runbook operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookCreateOrUpdateParameters
	{
		
		/// <summary>
		/// Gets or sets the location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters supplied to the create or update runbook properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RunbookCreateOrUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// Gets or sets the tags attached to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The parameters supplied to the create or update runbook properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookCreateOrUpdateProperties
	{
		
		/// <summary>
		/// Gets or sets the description of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="draft")]
		public RunbookDraft Draft { get; set; }
		
		/// <summary>
		/// Gets or sets the activity-level tracing options of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logActivityTrace")]
		public System.Nullable<System.Int32> LogActivityTrace { get; set; }
		
		/// <summary>
		/// Gets or sets progress log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logProgress")]
		public System.Nullable<System.Boolean> LogProgress { get; set; }
		
		/// <summary>
		/// Gets or sets verbose log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logVerbose")]
		public System.Nullable<System.Boolean> LogVerbose { get; set; }
		
		/// <summary>
		/// Definition of the content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishContentLink")]
		public ContentLink PublishContentLink { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the runbook.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runbookType")]
		public RunbookCreateOrUpdateDraftPropertiesRunbookType RunbookType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookDraft
	{
		
		/// <summary>
		/// Gets or sets the creation time of the runbook draft.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Definition of the content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draftContentLink")]
		public ContentLink DraftContentLink { get; set; }
		
		/// <summary>
		/// Gets or sets whether runbook is in edit mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inEdit")]
		public System.Nullable<System.Boolean> InEdit { get; set; }
		
		/// <summary>
		/// Gets or sets the last modified time of the runbook draft.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Gets or sets the runbook output types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputTypes")]
		public string[] OutputTypes { get; set; }
		
		/// <summary>
		/// Gets or sets the runbook draft parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, RunbookParameter> Parameters { get; set; }
	}
	
	/// <summary>
	/// The response model for the undo edit runbook operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookDraftUndoEditResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<RunbookDraftUndoEditResultStatusCode> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunbookDraftUndoEditResultStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Continue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SwitchingProtocols = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonAuthoritativeInformation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoContent = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResetContent = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartialContent = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MultipleChoices = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ambiguous = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MovedPermanently = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moved = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Found = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Redirect = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SeeOther = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RedirectMethod = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotModified = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UseProxy = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unused = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TemporaryRedirect = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RedirectKeepVerb = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PaymentRequired = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MethodNotAllowed = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAcceptable = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProxyAuthenticationRequired = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestTimeout = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gone = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LengthRequired = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreconditionFailed = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestEntityTooLarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestUriTooLong = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnsupportedMediaType = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestedRangeNotSatisfiable = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExpectationFailed = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpgradeRequired = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotImplemented = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadGateway = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceUnavailable = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GatewayTimeout = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HttpVersionNotSupported = 46,
	}
	
	/// <summary>
	/// The response model for the list runbook operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookListResult
	{
		
		/// <summary>
		/// Gets or sets the next link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets a list of runbooks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Runbook[] Value { get; set; }
	}
	
	/// <summary>
	/// Definition of the runbook parameter type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookParameter
	{
		
		/// <summary>
		/// Gets or sets the default value of parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Gets or sets a Boolean value to indicate whether the parameter is mandatory or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMandatory")]
		public System.Nullable<System.Boolean> IsMandatory { get; set; }
		
		/// <summary>
		/// Get or sets the position of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Definition of the runbook property type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookProperties
	{
		
		/// <summary>
		/// Gets or sets the creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Gets or sets the description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="draft")]
		public RunbookDraft Draft { get; set; }
		
		/// <summary>
		/// Gets or sets the job count of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCount")]
		public System.Nullable<System.Int32> JobCount { get; set; }
		
		/// <summary>
		/// Gets or sets the last modified by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Gets or sets the last modified time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Gets or sets the option to log activity trace of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logActivityTrace")]
		public System.Nullable<System.Int32> LogActivityTrace { get; set; }
		
		/// <summary>
		/// Gets or sets progress log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logProgress")]
		public System.Nullable<System.Boolean> LogProgress { get; set; }
		
		/// <summary>
		/// Gets or sets verbose log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logVerbose")]
		public System.Nullable<System.Boolean> LogVerbose { get; set; }
		
		/// <summary>
		/// Gets or sets the runbook output types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputTypes")]
		public string[] OutputTypes { get; set; }
		
		/// <summary>
		/// Gets or sets the runbook parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, RunbookParameter> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets the provisioning state of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<RunbookPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Definition of the content link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishContentLink")]
		public ContentLink PublishContentLink { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runbookType")]
		public RunbookCreateOrUpdateDraftPropertiesRunbookType RunbookType { get; set; }
		
		/// <summary>
		/// Gets or sets the state of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<RunbookPropertiesState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunbookPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunbookPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Edit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Published = 2,
	}
	
	/// <summary>
	/// The parameters supplied to the update runbook operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookUpdateParameters
	{
		
		/// <summary>
		/// Gets or sets the location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters supplied to the update runbook properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RunbookUpdateProperties Properties { get; set; }
		
		/// <summary>
		/// Gets or sets the tags attached to the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The parameters supplied to the update runbook properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunbookUpdateProperties
	{
		
		/// <summary>
		/// Gets or sets the description of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the activity-level tracing options of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logActivityTrace")]
		public System.Nullable<System.Int32> LogActivityTrace { get; set; }
		
		/// <summary>
		/// Gets or sets progress log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logProgress")]
		public System.Nullable<System.Boolean> LogProgress { get; set; }
		
		/// <summary>
		/// Gets or sets verbose log option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logVerbose")]
		public System.Nullable<System.Boolean> LogVerbose { get; set; }
	}
	
	/// <summary>
	/// Definition of the test job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TestJob
	{
		
		/// <summary>
		/// Gets or sets the creation time of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Gets or sets the end time of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Gets or sets the exception of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public string Exception { get; set; }
		
		/// <summary>
		/// Gets or sets the last modified time of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Gets or sets the last status modified time of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastStatusModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastStatusModifiedTime { get; set; }
		
		/// <summary>
		/// The activity-level tracing options of the runbook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logActivityTrace")]
		public System.Nullable<System.Int32> LogActivityTrace { get; set; }
		
		/// <summary>
		/// Gets or sets the parameters of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets the runOn which specifies the group name where the job is to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runOn")]
		public string RunOn { get; set; }
		
		/// <summary>
		/// Gets or sets the start time of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Gets or sets the status of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Gets or sets the status details of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public string StatusDetails { get; set; }
	}
	
	/// <summary>
	/// The parameters supplied to the create test job operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TestJobCreateParameters
	{
		
		/// <summary>
		/// Gets or sets the parameters of the test job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// Gets or sets the runOn which specifies the group name where the job is to be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runOn")]
		public string RunOn { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of runbooks.
		/// Runbook_ListByAutomationAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<RunbookListResult> Runbook_ListByAutomationAccountAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RunbookListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the runbook identified by runbook name.
		/// Runbook_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<Runbook> Runbook_GetAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Runbook>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create the runbook identified by runbook name.
		/// Runbook_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The create or update parameters for runbook. Provide either content link for a published runbook or draft, not both.</param>
		/// <returns>OK</returns>
		public async Task<Runbook> Runbook_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version, RunbookCreateOrUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Runbook>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete the runbook by name.
		/// Runbook_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task Runbook_DeleteAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the runbook identified by runbook name.
		/// Runbook_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The update parameters for runbook.</param>
		/// <returns>OK</returns>
		public async Task<Runbook> Runbook_UpdateAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version, RunbookUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Runbook>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the content of runbook identified by runbook name.
		/// Runbook_GetContent subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/content
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task Runbook_GetContentAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/content&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the runbook draft identified by runbook name.
		/// RunbookDraft_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<RunbookDraft> RunbookDraft_GetAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RunbookDraft>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the content of runbook draft identified by runbook name.
		/// RunbookDraft_GetContent subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/content
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task RunbookDraft_GetContentAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/content&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve the test job for the specified runbook.
		/// TestJob_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<TestJob> TestJob_GetAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/testJob&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestJob>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a test job of the runbook.
		/// TestJob_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The parameters supplied to the create test job operation.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="requestBody">The parameters supplied to the create test job operation.</param>
		public async Task TestJob_CreateAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version, TestJobCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/testJob&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Resume the test job.
		/// TestJob_Resume subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/resume
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task TestJob_ResumeAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/testJob/resume&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stop the test job.
		/// TestJob_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/stop
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task TestJob_StopAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/testJob/stop&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a list of test job streams identified by runbook name.
		/// TestJobStreams_ListByTestJob subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/streams
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="filter">The filter to apply on the operation.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<JobStreamListResult> TestJobStreams_ListByTestJobAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string filter, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/testJob/streams&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<JobStreamListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve a test job stream of the test job identified by runbook name and stream id.
		/// TestJobStreams_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/streams/{jobStreamId}
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="jobStreamId">The job stream id.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<JobStream> TestJobStreams_GetAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string jobStreamId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/testJob/streams/"+ (jobStreamId==null? "" : System.Uri.EscapeDataString(jobStreamId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<JobStream>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Suspend the test job.
		/// TestJob_Suspend subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/testJob/suspend
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task TestJob_SuspendAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/testJob/suspend&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Undo draft edit to last known published state identified by runbook name.
		/// RunbookDraft_UndoEdit subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/draft/undoEdit
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The runbook name.</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK</returns>
		public async Task<RunbookDraftUndoEditResult> RunbookDraft_UndoEditAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/draft/undoEdit&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RunbookDraftUndoEditResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Publish runbook draft.
		/// Runbook_Publish subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}/publish
		/// </summary>
		/// <param name="subscriptionId">Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">Name of an Azure Resource group.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="automationAccountName">The name of the automation account.</param>
		/// <param name="runbookName">The parameters supplied to the publish runbook operation.</param>
		/// <param name="api_version">Client Api Version.</param>
		public async Task Runbook_PublishAsync(string subscriptionId, string resourceGroupName, string automationAccountName, string runbookName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Automation/automationAccounts/"+ (automationAccountName==null? "" : System.Uri.EscapeDataString(automationAccountName))+"/runbooks/"+ (runbookName==null? "" : System.Uri.EscapeDataString(runbookName))+"/publish&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
