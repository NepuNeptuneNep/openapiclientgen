//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerRegistry
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// A class for managing DataReferenceConfiguration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataReferenceConfiguration
	{
		
		/// <summary>
		/// The name of the data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataStoreName")]
		public string DataStoreName { get; set; }
		
		/// <summary>
		/// Operation on the datastore, mount, download, upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<DataReferenceConfigurationMode> Mode { get; set; }
		
		/// <summary>
		/// Whether to overwrite the data if existing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overwrite")]
		public System.Nullable<System.Boolean> Overwrite { get; set; }
		
		/// <summary>
		/// The path on the compute target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathOnCompute")]
		public string PathOnCompute { get; set; }
		
		/// <summary>
		/// Relative path on the datastore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathOnDataStore")]
		public string PathOnDataStore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataReferenceConfigurationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Download = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upload = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DockerSection
	{
		
		/// <summary>
		/// Extra arguments to the Docker run command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string[] Arguments { get; set; }
		
		/// <summary>
		/// Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseDockerfile")]
		public string BaseDockerfile { get; set; }
		
		/// <summary>
		/// Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseImage")]
		public string BaseImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseImageRegistry")]
		public ContainerRegistry BaseImageRegistry { get; set; }
		
		/// <summary>
		/// Set true to perform this run inside a Docker container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Set false to disable AzureML's usage of the Docker shared volumes feature to work around bugs in certain versions of Docker for Windows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedVolumes")]
		public System.Nullable<System.Boolean> SharedVolumes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="docker")]
		public DockerSection Docker { get; set; }
		
		/// <summary>
		/// Definition of environment variables to be defined in the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		/// <summary>
		/// The inferencing stack version added to the image. To avoid adding an inferencing stack, do not set this value. Valid values: "latest".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inferencingStackVersion")]
		public string InferencingStackVersion { get; set; }
		
		/// <summary>
		/// The name of the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="python")]
		public PythonSection Python { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spark")]
		public SparkSection Spark { get; set; }
		
		/// <summary>
		/// The environment version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PythonSection
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseCondaEnvironment")]
		public string BaseCondaEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condaDependencies")]
		public string CondaDependencies { get; set; }
		
		/// <summary>
		/// The python interpreter path. This is only used when user_managed_dependencies=True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpreterPath")]
		public string InterpreterPath { get; set; }
		
		/// <summary>
		/// True means that AzureML reuses an existing python environment; False means that AzureML will create a python environment based on the Conda dependencies specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userManagedDependencies")]
		public System.Nullable<System.Boolean> UserManagedDependencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SparkSection
	{
		
		/// <summary>
		/// The Spark packages to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public SparkMavenPackage[] Packages { get; set; }
		
		/// <summary>
		/// Whether to precache the packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precachePackages")]
		public System.Nullable<System.Boolean> PrecachePackages { get; set; }
		
		/// <summary>
		/// The list of spark repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public string[] Repositories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SparkMavenPackage
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifact")]
		public string Artifact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The error response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// Dictionary containing correlation details for the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlation")]
		public System.Collections.Generic.Dictionary<string, string> Correlation { get; set; }
		
		/// <summary>
		/// The hosting environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		/// <summary>
		/// The root error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public RootError Error { get; set; }
		
		/// <summary>
		/// The Azure region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The time in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	/// <summary>
	/// The root error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RootError
	{
		
		/// <summary>
		/// The service-defined error code. Supported error codes: ServiceError, UserError, ValidationError, AzureStorageError, TransientError, RequestThrottled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The related errors that occurred during the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetails[] Details { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
		
		/// <summary>
		/// A human-readable representation of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the error (e.g., the name of the property in error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// A nested structure of errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InnerErrorResponse
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A nested structure of errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerError")]
		public InnerErrorResponse InnerError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HdiConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="yarnDeployMode")]
		public System.Nullable<HdiConfigurationYarnDeployMode> YarnDeployMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum HdiConfigurationYarnDeployMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Client = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cluster = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HistoryConfiguration
	{
		
		/// <summary>
		/// The list of directories to monitor and upload files from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directoriesToWatch")]
		public string[] DirectoriesToWatch { get; set; }
		
		/// <summary>
		/// Set to true to collect outputs and store in run history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputCollection")]
		public System.Nullable<System.Boolean> OutputCollection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MpiConfiguration
	{
		
		/// <summary>
		/// Number of processes per node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processCountPerNode")]
		public System.Nullable<System.Int32> ProcessCountPerNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunConfiguration
	{
		
		/// <summary>
		/// Command line arguments for the python script file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string[] Arguments { get; set; }
		
		/// <summary>
		/// The supported communicators are None, ParameterServer, OpenMpi, and IntelMpi Keep in mind that OpenMpi requires a custom image with OpenMpi installed.
		///Use ParameterServer or OpenMpi for AmlCompute clusters. Use IntelMpi for distributed training jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communicator")]
		public System.Nullable<RunConfigurationCommunicator> Communicator { get; set; }
		
		/// <summary>
		/// All the data sources are made available to the run during execution based on each configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataReferences")]
		public System.Collections.Generic.Dictionary<string, DataReferenceConfiguration> DataReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public EnvironmentDefinition Environment { get; set; }
		
		/// <summary>
		/// The supported frameworks are Python, PySpark, CNTK, TensorFlow, and PyTorch. Use Tensorflow for AmlCompute clusters, and Python for distributed training jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public System.Nullable<RunConfigurationFramework> Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hdi")]
		public HdiConfiguration Hdi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="history")]
		public HistoryConfiguration History { get; set; }
		
		/// <summary>
		/// This is primarily intended for notebooks to override the default job name.
		///Defaults to ArgumentVector[0] if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobName")]
		public string JobName { get; set; }
		
		/// <summary>
		/// Maximum allowed time for the run. The system will attempt to automatically cancel the run if it took longer than this value.
		///MaxRunDurationSeconds=null means infinite duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRunDurationSeconds")]
		public System.Nullable<System.Int64> MaxRunDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mpi")]
		public MpiConfiguration Mpi { get; set; }
		
		/// <summary>
		/// Number of compute nodes to run the job on. Only applies to AMLCompute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		/// <summary>
		/// The relative path to the python script file. The file path is relative to the source_directory passed to submit run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spark")]
		public SparkConfiguration Spark { get; set; }
		
		/// <summary>
		/// Target refers to compute where the job is scheduled for execution. The default target is "local" referring to the local machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tensorflow")]
		public TensorflowConfiguration Tensorflow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunConfigurationCommunicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ParameterServer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gloo = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mpi = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nccl = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunConfigurationFramework
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Python = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PySpark = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cntk = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TensorFlow = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PyTorch = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SparkConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public System.Collections.Generic.Dictionary<string, string> Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TensorflowConfiguration
	{
		
		/// <summary>
		/// Number of parameter servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterServerCount")]
		public System.Nullable<System.Int32> ParameterServerCount { get; set; }
		
		/// <summary>
		/// The number of workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerCount")]
		public System.Nullable<System.Int32> WorkerCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public RunConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Specifies that the run history entry for this execution should be scoped within
		///an existing run as a child. Defaults to null, meaning the run has no parent.
		///This is intended for first-party service integration, not third-party API users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentRunId")]
		public string ParentRunId { get; set; }
		
		/// <summary>
		/// Specifies the runsource property for this run. The default value is "experiment" if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runType")]
		public string RunType { get; set; }
		
		/// <summary>
		/// Snapshots are user project folders that have been uploaded to the cloud for subsequent
		///execution. This field is required when executing against cloud-based compute targets
		///unless the run submission was against the API endpoint that takes a zipped project folder
		///inline with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		public string SnapshotId { get; set; }
	}
	
	/// <summary>
	/// Contains the details of a run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartRunResult
	{
		
		/// <summary>
		/// The identifier for a run.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancel a run.
		/// Cancels a run within an experiment.
		/// Runs_CancelRunWithUri execution/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runId/{runId}/cancel
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">The id of the run to cancel.</param>
		/// <returns>The run was successfully cancelled.</returns>
		public async Task<StartRunResult> Runs_CancelRunWithUriAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
		{
			var requestUri = "execution/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/runId/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartRunResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Start a run from a snapshot on a remote compute target.
		/// Starts an experiment run on the remote compute target using the provided definition.json file to define the run.
		/// The code for the run is retrieved using the snapshotId in definition.json.
		/// Runs_StartSnapshotRun execution/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/snapshotrun
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">A run id. If not supplied a run id will be created automatically.</param>
		/// <param name="requestBody">A JSON run definition structure.</param>
		/// <returns>A snapshot run was successfully started.</returns>
		public async Task<StartRunResult> Runs_StartSnapshotRunAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, RunDefinition requestBody)
		{
			var requestUri = "execution/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/snapshotrun&runId=" + (runId==null? "" : System.Uri.EscapeDataString(runId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartRunResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Start a run on a local machine.
		/// Starts an experiment run using the provided definition.json file to define the run.
		/// The source code and configuration is defined in a zip archive in project.zip.
		/// Runs_StartLocalRun execution/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/startlocalrun
		/// </summary>
		/// <param name="subscriptionId">The Azure Subscription ID.</param>
		/// <param name="resourceGroupName">The Name of the resource group in which the workspace is located.</param>
		/// <param name="workspaceName">The name of the workspace.</param>
		/// <param name="experimentName">The experiment name.</param>
		/// <param name="runId">A run id. If not supplied a run id will be created automatically.</param>
		/// <param name="requestBody">A JSON run definition structure.</param>
		/// <returns>File Response</returns>
		public async Task<string> Runs_StartLocalRunAsync(string subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, RunDefinition requestBody)
		{
			var requestUri = "execution/v1.0/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.MachineLearningServices/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/startlocalrun&runId=" + (runId==null? "" : System.Uri.EscapeDataString(runId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
