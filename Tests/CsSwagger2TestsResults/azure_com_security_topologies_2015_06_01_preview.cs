//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopologyList
	{
		
		/// <summary>
		/// The URI to fetch the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TopologyResource[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopologyResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TopologyResourceProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopologyResourceProperties
	{
		
		/// <summary>
		/// The UTC time on which the topology was calculated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedDateTime")]
		public System.Nullable<System.DateTimeOffset> CalculatedDateTime { get; set; }
		
		/// <summary>
		/// Azure resources which are part of this topology resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topologyResources")]
		public TopologySingleResource[] TopologyResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopologySingleResource
	{
		
		/// <summary>
		/// Azure resources connected to this resource which are in lower level in the topology view
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public TopologySingleResourceChild[] Children { get; set; }
		
		/// <summary>
		/// The location of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Indicates the resource connectivity level to the Internet (InternetFacing, Internal ,etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkZones")]
		public string NetworkZones { get; set; }
		
		/// <summary>
		/// Azure resources connected to this resource which are in higher level in the topology view
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parents")]
		public TopologySingleResourceParent[] Parents { get; set; }
		
		/// <summary>
		/// Indicates if the resource has security recommendations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendationsExist")]
		public System.Nullable<System.Boolean> RecommendationsExist { get; set; }
		
		/// <summary>
		/// Azure resource id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The security severity of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// Score of the resource based on its security severity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topologyScore")]
		public System.Nullable<System.Int32> TopologyScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopologySingleResourceChild
	{
		
		/// <summary>
		/// Azure resource id which serves as child resource in topology view
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TopologySingleResourceParent
	{
		
		/// <summary>
		/// Azure resource id which serves as parent resource in topology view
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list that allows to build a topology view of a subscription and location.
		/// Topology_ListByHomeRegion subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/topologies
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="api_version">API version for the operation</param>
		/// <returns>OK</returns>
		public async Task<TopologyList> Topology_ListByHomeRegionAsync(string subscriptionId, string ascLocation, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/topologies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TopologyList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list that allows to build a topology view of a subscription.
		/// Topology_List subscriptions/{subscriptionId}/providers/Microsoft.Security/topologies
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="api_version">API version for the operation</param>
		/// <returns>OK</returns>
		public async Task<TopologyList> Topology_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Security/topologies&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TopologyList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a specific topology component.
		/// Topology_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/topologies/{topologyResourceName}
		/// </summary>
		/// <param name="subscriptionId">Azure subscription ID</param>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="ascLocation">The location where ASC stores the data of the subscription. can be retrieved from Get locations</param>
		/// <param name="topologyResourceName">Name of a topology resources collection.</param>
		/// <param name="api_version">API version for the operation</param>
		/// <returns>OK</returns>
		public async Task<TopologyResource> Topology_GetAsync(string subscriptionId, string resourceGroupName, string ascLocation, string topologyResourceName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Security/locations/"+ (ascLocation==null? "" : System.Uri.EscapeDataString(ascLocation))+"/topologies/"+ (topologyResourceName==null? "" : System.Uri.EscapeDataString(topologyResourceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TopologyResource>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
