//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Azure Application Insights information for performance counters reporting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AppInsightsReference
	{
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="component")]
		public ResourceId Component { get; set; }
		
		/// <summary>
		/// Value of the Azure Application Insights instrumentation key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instrumentationKey")]
		public string InstrumentationKey { get; set; }
		
		/// <summary>
		/// Key Vault Secret reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instrumentationKeySecretReference")]
		public KeyVaultSecretReference InstrumentationKeySecretReference { get; set; }
	}
	
	/// <summary>
	/// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoScaleSettings
	{
		
		/// <summary>
		/// The number of compute nodes to allocate on cluster creation. Note that this value is used only during cluster creation. Default: 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialNodeCount")]
		public System.Nullable<System.Int32> InitialNodeCount { get; set; }
		
		/// <summary>
		/// The maximum number of compute nodes the cluster can have.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximumNodeCount")]
		public int MaximumNodeCount { get; set; }
		
		/// <summary>
		/// The minimum number of compute nodes the Batch AI service will try to allocate for the cluster. Note, the actual number of nodes can be less than the specified value if the subscription has not enough quota to fulfill the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumNodeCount")]
		public int MinimumNodeCount { get; set; }
	}
	
	/// <summary>
	/// Azure Blob Storage Container mounting configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureBlobFileSystemReference
	{
		
		/// <summary>
		/// Name of the Azure storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Name of the Azure Blob Storage container to mount on the cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// Azure storage account credentials.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public AzureStorageCredentialsInfo Credentials { get; set; }
		
		/// <summary>
		/// Mount options for mounting blobfuse file system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountOptions")]
		public string MountOptions { get; set; }
		
		/// <summary>
		/// The relative path on the compute node where the Azure File container will be mounted. Note that all cluster level containers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level containers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
	}
	
	/// <summary>
	/// Azure File Share mounting configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureFileShareReference
	{
		
		/// <summary>
		/// Name of the Azure storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// URL to access the Azure File.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureFileUrl")]
		public string AzureFileUrl { get; set; }
		
		/// <summary>
		/// Azure storage account credentials.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public AzureStorageCredentialsInfo Credentials { get; set; }
		
		/// <summary>
		/// File mode for directories on the mounted file share. Default value: 0777.
		/// </summary>
		[System.ComponentModel.DefaultValue("0777")]
		[System.Runtime.Serialization.DataMember(Name="directoryMode")]
		public string DirectoryMode { get; set; } = "0777";
		
		/// <summary>
		/// File mode for files on the mounted file share. Default value: 0777.
		/// </summary>
		[System.ComponentModel.DefaultValue("0777")]
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public string FileMode { get; set; } = "0777";
		
		/// <summary>
		/// The relative path on the compute node where the Azure File share will be mounted. Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
	}
	
	/// <summary>
	/// Azure storage account credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureStorageCredentialsInfo
	{
		
		/// <summary>
		/// Storage account key. One of accountKey or accountKeySecretReference must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKey")]
		public string AccountKey { get; set; }
		
		/// <summary>
		/// Key Vault Secret reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountKeySecretReference")]
		public KeyVaultSecretReference AccountKeySecretReference { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch AI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BatchAIError
	{
		
		/// <summary>
		/// An identifier of the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public NameValuePair[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Name-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameValuePair
	{
		
		/// <summary>
		/// The name in the name-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value in the name-value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// CNTK (aka Microsoft Cognitive Toolkit) job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CNTKsettings
	{
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script or cntk executable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArgs")]
		public string CommandLineArgs { get; set; }
		
		/// <summary>
		/// Specifies the path of the BrainScript config file. This property can be specified only if the languageType is 'BrainScript'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configFilePath")]
		public string ConfigFilePath { get; set; }
		
		/// <summary>
		/// The language to use for launching CNTK (aka Microsoft Cognitive Toolkit) job. Valid values are 'BrainScript' or 'Python'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageType")]
		public string LanguageType { get; set; }
		
		/// <summary>
		/// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processCount")]
		public System.Nullable<System.Int32> ProcessCount { get; set; }
		
		/// <summary>
		/// The path to the Python interpreter. This property can be specified only if the languageType is 'Python'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonInterpreterPath")]
		public string PythonInterpreterPath { get; set; }
		
		/// <summary>
		/// Python script to execute. This property can be specified only if the languageType is 'Python'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonScriptFilePath")]
		public string PythonScriptFilePath { get; set; }
	}
	
	/// <summary>
	/// Caffe2 job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Caffe2Settings
	{
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArgs")]
		public string CommandLineArgs { get; set; }
		
		/// <summary>
		/// The path to the Python interpreter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonInterpreterPath")]
		public string PythonInterpreterPath { get; set; }
		
		/// <summary>
		/// The python script to execute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pythonScriptFilePath")]
		public string PythonScriptFilePath { get; set; }
	}
	
	/// <summary>
	/// Caffe job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CaffeSettings
	{
		
		/// <summary>
		/// Command line arguments that need to be passed to the Caffe job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArgs")]
		public string CommandLineArgs { get; set; }
		
		/// <summary>
		/// Path of the config file for the job. This property cannot be specified if pythonScriptFilePath is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configFilePath")]
		public string ConfigFilePath { get; set; }
		
		/// <summary>
		/// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processCount")]
		public System.Nullable<System.Int32> ProcessCount { get; set; }
		
		/// <summary>
		/// The path to the Python interpreter. The property can be specified only if the pythonScriptFilePath is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonInterpreterPath")]
		public string PythonInterpreterPath { get; set; }
		
		/// <summary>
		/// Python script to execute. This property cannot be specified if configFilePath is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonScriptFilePath")]
		public string PythonScriptFilePath { get; set; }
	}
	
	/// <summary>
	/// Chainer job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChainerSettings
	{
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArgs")]
		public string CommandLineArgs { get; set; }
		
		/// <summary>
		/// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processCount")]
		public System.Nullable<System.Int32> ProcessCount { get; set; }
		
		/// <summary>
		/// The path to the Python interpreter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonInterpreterPath")]
		public string PythonInterpreterPath { get; set; }
		
		/// <summary>
		/// The python script to execute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pythonScriptFilePath")]
		public string PythonScriptFilePath { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch AI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the Batch AI service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the Batch AI service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Information about a Cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Cluster : ProxyResource
	{
		
		/// <summary>
		/// Cluster properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ClusterProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a Cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterBaseProperties
	{
		
		/// <summary>
		/// Node setup settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeSetup")]
		public NodeSetup NodeSetup { get; set; }
		
		/// <summary>
		/// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleSettings")]
		public ScaleSettings ScaleSettings { get; set; }
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public ResourceId Subnet { get; set; }
		
		/// <summary>
		/// Settings for user account that gets created on each on the nodes of a cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAccountSettings")]
		public UserAccountSettings UserAccountSettings { get; set; }
		
		/// <summary>
		/// VM configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// VM priority. Allowed values are: dedicated (default) and lowpriority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmPriority")]
		public System.Nullable<ClusterBasePropertiesVmPriority> VmPriority { get; set; }
		
		/// <summary>
		/// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size. For information about available VM sizes for clusters using images from the Virtual Machines Marketplace see Sizes for Virtual Machines (Linux). Batch AI service supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterBasePropertiesVmPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lowpriority = 1,
	}
	
	/// <summary>
	/// Cluster creation operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterCreateParameters
	{
		
		/// <summary>
		/// The properties of a Cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ClusterBaseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List Clusters operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of returned Clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Cluster[] Value { get; set; }
	}
	
	/// <summary>
	/// Cluster properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterProperties
	{
		
		/// <summary>
		/// Allocation state of the cluster. Possible values are: steady - Indicates that the cluster is not resizing. There are no changes to the number of compute nodes in the cluster in progress. A cluster enters this state when it is created and when no operations are being performed on the cluster to change the number of compute nodes. resizing - Indicates that the cluster is resizing; that is, compute nodes are being added to or removed from the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationState")]
		public System.Nullable<ClusterPropertiesAllocationState> AllocationState { get; set; }
		
		/// <summary>
		/// The time at which the cluster entered its current allocation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> AllocationStateTransitionTime { get; set; }
		
		/// <summary>
		/// The time when the cluster was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The number of compute nodes currently assigned to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentNodeCount")]
		public System.Nullable<System.Int32> CurrentNodeCount { get; set; }
		
		/// <summary>
		/// Collection of errors encountered by various compute nodes during node setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchAIError[] Errors { get; set; }
		
		/// <summary>
		/// Node setup settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeSetup")]
		public NodeSetup NodeSetup { get; set; }
		
		/// <summary>
		/// Counts of various compute node states on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeStateCounts")]
		public NodeStateCounts NodeStateCounts { get; set; }
		
		/// <summary>
		/// Provisioning state of the cluster. Possible value are: creating - Specifies that the cluster is being created. succeeded - Specifies that the cluster has been created successfully. failed - Specifies that the cluster creation has failed. deleting - Specifies that the cluster is being deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ClusterPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Time when the provisioning state was changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ProvisioningStateTransitionTime { get; set; }
		
		/// <summary>
		/// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleSettings")]
		public ScaleSettings ScaleSettings { get; set; }
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public ResourceId Subnet { get; set; }
		
		/// <summary>
		/// Settings for user account that gets created on each on the nodes of a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccountSettings")]
		public UserAccountSettings UserAccountSettings { get; set; }
		
		/// <summary>
		/// VM configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineConfiguration")]
		public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
		
		/// <summary>
		/// VM priority of cluster nodes.
		/// </summary>
		[System.ComponentModel.DefaultValue(ClusterBasePropertiesVmPriority.dedicated)]
		[System.Runtime.Serialization.DataMember(Name="vmPriority")]
		public ClusterBasePropertiesVmPriority VmPriority { get; set; } = ClusterBasePropertiesVmPriority.dedicated;
		
		/// <summary>
		/// The size of the virtual machines in the cluster. All nodes in a cluster have the same VM size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterPropertiesAllocationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		steady = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resizing = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClusterPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
	}
	
	/// <summary>
	/// Cluster update parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterUpdateParameters
	{
		
		/// <summary>
		/// The properties of a Cluster that need to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ClusterUpdateProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a Cluster that need to be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ClusterUpdateProperties
	{
		
		/// <summary>
		/// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleSettings")]
		public ScaleSettings ScaleSettings { get; set; }
	}
	
	/// <summary>
	/// Docker container settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ContainerSettings
	{
		
		/// <summary>
		/// Information about docker image for the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imageSourceRegistry")]
		public ImageSourceRegistry ImageSourceRegistry { get; set; }
		
		/// <summary>
		/// Size of /dev/shm. Please refer to docker documentation for supported argument formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shmSize")]
		public string ShmSize { get; set; }
	}
	
	/// <summary>
	/// Custom MPI job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomMpiSettings
	{
		
		/// <summary>
		/// The command line to be executed by mpi runtime on each compute node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processCount")]
		public System.Nullable<System.Int32> ProcessCount { get; set; }
	}
	
	/// <summary>
	/// Custom tool kit job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomToolkitSettings
	{
		
		/// <summary>
		/// The command line to execute on the master node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
	}
	
	/// <summary>
	/// Data disks settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DataDisks
	{
		
		/// <summary>
		/// Caching type for the disks. Available values are none (default), readonly, readwrite. Caching type can be set only for VM sizes supporting premium storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cachingType")]
		public System.Nullable<DataDisksCachingType> CachingType { get; set; }
		
		/// <summary>
		/// Number of data disks attached to the File Server. If multiple disks attached, they will be configured in RAID level 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskCount")]
		public int DiskCount { get; set; }
		
		/// <summary>
		/// Disk size in GB for the blank data disks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskSizeInGB")]
		public int DiskSizeInGB { get; set; }
		
		/// <summary>
		/// Type of storage account to be used on the disk. Possible values are: Standard_LRS or Premium_LRS. Premium storage account type can only be used with VM sizes supporting premium storage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storageAccountType")]
		public DataDisksStorageAccountType StorageAccountType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataDisksCachingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="readonly")]
		_readonly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		readwrite = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DataDisksStorageAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_LRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_LRS = 1,
	}
	
	/// <summary>
	/// Actions which should be performed when compute nodes are removed from the cluster. Possible values are: requeue (default) - Terminate running jobs and requeue them so the jobs will run again. Remove compute nodes as soon as jobs have been terminated; terminate - Terminate running jobs. The jobs will not run again. Remove compute nodes as soon as jobs have been terminated. waitforjobcompletion - Allow currently running jobs to complete. Schedule no new jobs while waiting. Remove compute nodes when all jobs have completed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DeallocationOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requeue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waitforjobcompletion = 2,
	}
	
	/// <summary>
	/// An environment variable definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentVariable
	{
		
		/// <summary>
		/// The name of the environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the environment variable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An environment variable with secret value definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EnvironmentVariableWithSecretValue
	{
		
		/// <summary>
		/// The name of the environment variable to store the secret value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the environment variable. This value will never be reported back by Batch AI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Key Vault Secret reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueSecretReference")]
		public KeyVaultSecretReference ValueSecretReference { get; set; }
	}
	
	/// <summary>
	/// Experiment information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Experiment : ProxyResource
	{
		
		/// <summary>
		/// Experiment properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ExperimentProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExperimentListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of experiments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Experiment[] Value { get; set; }
	}
	
	/// <summary>
	/// Experiment properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ExperimentProperties
	{
		
		/// <summary>
		/// Time when the Experiment was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The provisioned state of the experiment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ExperimentPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The time at which the experiment entered its current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ProvisioningStateTransitionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ExperimentPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	/// <summary>
	/// Properties of the file or directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class File
	{
		
		/// <summary>
		/// URL to download the corresponding file. The downloadUrl is not returned for directories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// Type of the file. Possible values are file and directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public System.Nullable<FileFileType> FileType { get; set; }
		
		/// <summary>
		/// Name of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// File properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FileProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FileFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		directory = 1,
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of returned job directories and files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public File[] Value { get; set; }
	}
	
	/// <summary>
	/// File properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileProperties
	{
		
		/// <summary>
		/// The file of the size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public System.Nullable<System.Int64> ContentLength { get; set; }
		
		/// <summary>
		/// The time at which the file was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
	}
	
	/// <summary>
	/// File Server information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileServer : ProxyResource
	{
		
		/// <summary>
		/// File Server properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FileServerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a file server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileServerBaseProperties
	{
		
		/// <summary>
		/// Data disks settings.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public DataDisks DataDisks { get; set; }
		
		/// <summary>
		/// SSH configuration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sshConfiguration")]
		public SshConfiguration SshConfiguration { get; set; }
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public ResourceId Subnet { get; set; }
		
		/// <summary>
		/// The size of the virtual machine for the File Server. For information about available VM sizes from the Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	/// <summary>
	/// File Server creation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileServerCreateParameters
	{
		
		/// <summary>
		/// The properties of a file server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public FileServerBaseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Values returned by the File Server List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileServerListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of File Servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public FileServer[] Value { get; set; }
	}
	
	/// <summary>
	/// File Server properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileServerProperties
	{
		
		/// <summary>
		/// Time when the FileServer was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Data disks settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDisks")]
		public DataDisks DataDisks { get; set; }
		
		/// <summary>
		/// File Server mount Information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountSettings")]
		public MountSettings MountSettings { get; set; }
		
		/// <summary>
		/// Provisioning state of the File Server. Possible values: creating - The File Server is getting created; updating - The File Server creation has been accepted and it is getting updated; deleting - The user has requested that the File Server be deleted, and it is in the process of being deleted; failed - The File Server creation has failed with the specified error code. Details about the error code are specified in the message field; succeeded - The File Server creation has succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<FileServerPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Time when the provisioning state was changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ProvisioningStateTransitionTime { get; set; }
		
		/// <summary>
		/// SSH configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshConfiguration")]
		public SshConfiguration SshConfiguration { get; set; }
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public ResourceId Subnet { get; set; }
		
		/// <summary>
		/// VM size of the File Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSize")]
		public string VmSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum FileServerPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	/// <summary>
	/// File Server mounting configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileServerReference
	{
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileServer")]
		public ResourceId FileServer { get; set; }
		
		/// <summary>
		/// Mount options to be passed to mount command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountOptions")]
		public string MountOptions { get; set; }
		
		/// <summary>
		/// The relative path on the compute node where the File Server will be mounted. Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
		
		/// <summary>
		/// File Server directory that needs to be mounted. If this property is not specified, the entire File Server will be mounted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceDirectory")]
		public string SourceDirectory { get; set; }
	}
	
	/// <summary>
	/// Specifies the settings for Horovod job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HorovodSettings
	{
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArgs")]
		public string CommandLineArgs { get; set; }
		
		/// <summary>
		/// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processCount")]
		public System.Nullable<System.Int32> ProcessCount { get; set; }
		
		/// <summary>
		/// The path to the Python interpreter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonInterpreterPath")]
		public string PythonInterpreterPath { get; set; }
		
		/// <summary>
		/// The python script to execute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pythonScriptFilePath")]
		public string PythonScriptFilePath { get; set; }
	}
	
	/// <summary>
	/// The OS image reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageReference
	{
		
		/// <summary>
		/// Offer of the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public string Offer { get; set; }
		
		/// <summary>
		/// Publisher of the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// SKU of the image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Version of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// The ARM resource identifier of the virtual machine image for the compute nodes. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}. The virtual machine image must be in the same region and subscription as the cluster. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. Note, you need to provide publisher, offer and sku of the base OS image of which the custom image has been derived from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineImageId")]
		public string VirtualMachineImageId { get; set; }
	}
	
	/// <summary>
	/// Information about docker image for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageSourceRegistry
	{
		
		/// <summary>
		/// Credentials to access a container image in a private repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public PrivateRegistryCredentials Credentials { get; set; }
		
		/// <summary>
		/// The name of the image in the image repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// URL for image repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverUrl")]
		public string ServerUrl { get; set; }
	}
	
	/// <summary>
	/// Input directory for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InputDirectory
	{
		
		/// <summary>
		/// The ID for the input directory. The job can use AZ_BATCHAI_INPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The path to the input directory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Information about a Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Job : ProxyResource
	{
		
		/// <summary>
		/// Job properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a Batch AI Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobBaseProperties
	{
		
		/// <summary>
		/// Caffe2 job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caffe2Settings")]
		public Caffe2Settings Caffe2Settings { get; set; }
		
		/// <summary>
		/// Caffe job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caffeSettings")]
		public CaffeSettings CaffeSettings { get; set; }
		
		/// <summary>
		/// Chainer job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chainerSettings")]
		public ChainerSettings ChainerSettings { get; set; }
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public ResourceId Cluster { get; set; }
		
		/// <summary>
		/// CNTK (aka Microsoft Cognitive Toolkit) job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntkSettings")]
		public CNTKsettings CntkSettings { get; set; }
		
		/// <summary>
		/// Constraints associated with the Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public object Constraints { get; set; }
		
		/// <summary>
		/// Docker container settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerSettings")]
		public ContainerSettings ContainerSettings { get; set; }
		
		/// <summary>
		/// Custom MPI job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMpiSettings")]
		public CustomMpiSettings CustomMpiSettings { get; set; }
		
		/// <summary>
		/// Custom tool kit job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customToolkitSettings")]
		public CustomToolkitSettings CustomToolkitSettings { get; set; }
		
		/// <summary>
		/// A list of user defined environment variables which will be setup for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Specifies the settings for Horovod job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horovodSettings")]
		public HorovodSettings HorovodSettings { get; set; }
		
		/// <summary>
		/// A list of input directories for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputDirectories")]
		public InputDirectory[] InputDirectories { get; set; }
		
		/// <summary>
		/// Job preparation settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparation")]
		public JobPreparation JobPreparation { get; set; }
		
		/// <summary>
		/// Details of volumes to mount on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountVolumes")]
		public MountVolumes MountVolumes { get; set; }
		
		/// <summary>
		/// Number of compute nodes to run the job on. The job will be gang scheduled on that many compute nodes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public int NodeCount { get; set; }
		
		/// <summary>
		/// A list of output directories for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputDirectories")]
		public OutputDirectory[] OutputDirectories { get; set; }
		
		/// <summary>
		/// pyTorch job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pyTorchSettings")]
		public PyTorchSettings PyTorchSettings { get; set; }
		
		/// <summary>
		/// Scheduling priority associated with the job. Possible values: low, normal, high.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulingPriority")]
		public System.Nullable<JobBasePropertiesSchedulingPriority> SchedulingPriority { get; set; }
		
		/// <summary>
		/// A list of user defined environment variables with secret values which will be setup for the job. Server will never report values of these variables back.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public EnvironmentVariableWithSecretValue[] Secrets { get; set; }
		
		/// <summary>
		/// The path where the Batch AI service will store stdout, stderror and execution log of the job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stdOutErrPathPrefix")]
		public string StdOutErrPathPrefix { get; set; }
		
		/// <summary>
		/// TensorFlow job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tensorFlowSettings")]
		public TensorFlowSettings TensorFlowSettings { get; set; }
	}
	
	/// <summary>
	/// Output directory for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OutputDirectory
	{
		
		/// <summary>
		/// The ID of the output directory. The job can use AZ_BATCHAI_OUTPUT_<id> environment variable to find the directory path, where <id> is the value of id attribute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The prefix path where the output directory will be created. Note, this is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. The full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pathPrefix")]
		public string PathPrefix { get; set; }
		
		/// <summary>
		/// The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathSuffix")]
		public string PathSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobBasePropertiesSchedulingPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		normal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high = 2,
	}
	
	/// <summary>
	/// Job creation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobCreateParameters
	{
		
		/// <summary>
		/// The properties of a Batch AI Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public JobBaseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Job[] Value { get; set; }
	}
	
	/// <summary>
	/// Job preparation settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobPreparation
	{
		
		/// <summary>
		/// The command line to execute. If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
	}
	
	/// <summary>
	/// Job properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class JobProperties
	{
		
		/// <summary>
		/// Caffe2 job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caffe2Settings")]
		public Caffe2Settings Caffe2Settings { get; set; }
		
		/// <summary>
		/// Caffe job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caffeSettings")]
		public CaffeSettings CaffeSettings { get; set; }
		
		/// <summary>
		/// Chainer job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chainerSettings")]
		public ChainerSettings ChainerSettings { get; set; }
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public ResourceId Cluster { get; set; }
		
		/// <summary>
		/// CNTK (aka Microsoft Cognitive Toolkit) job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntkSettings")]
		public CNTKsettings CntkSettings { get; set; }
		
		/// <summary>
		/// Constraints associated with the Job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public object Constraints { get; set; }
		
		/// <summary>
		/// Docker container settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerSettings")]
		public ContainerSettings ContainerSettings { get; set; }
		
		/// <summary>
		/// The creation time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Custom MPI job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMpiSettings")]
		public CustomMpiSettings CustomMpiSettings { get; set; }
		
		/// <summary>
		/// Custom tool kit job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customToolkitSettings")]
		public CustomToolkitSettings CustomToolkitSettings { get; set; }
		
		/// <summary>
		/// A collection of user defined environment variables to be setup for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Information about the execution of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public object ExecutionInfo { get; set; }
		
		/// <summary>
		/// The current state of the job. Possible values are: queued - The job is queued and able to run. A job enters this state when it is created, or when it is awaiting a retry after a failed run. running - The job is running on a compute cluster. This includes job-level preparation such as downloading resource files or set up container specified on the job - it does not necessarily mean that the job command line has started executing. terminating - The job is terminated by the user, the terminate operation is in progress. succeeded - The job has completed running successfully and exited with exit code 0. failed - The job has finished unsuccessfully (failed with a non-zero exit code) and has exhausted its retry limit. A job is also marked as failed if an error occurred launching the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionState")]
		public System.Nullable<JobPropertiesExecutionState> ExecutionState { get; set; }
		
		/// <summary>
		/// The time at which the job entered its current execution state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ExecutionStateTransitionTime { get; set; }
		
		/// <summary>
		/// Specifies the settings for Horovod job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horovodSettings")]
		public HorovodSettings HorovodSettings { get; set; }
		
		/// <summary>
		/// A list of input directories for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputDirectories")]
		public InputDirectory[] InputDirectories { get; set; }
		
		/// <summary>
		/// A segment of job's output directories path created by Batch AI. Batch AI creates job's output directories under an unique path to avoid conflicts between jobs. This value contains a path segment generated by Batch AI to make the path unique and can be used to find the output directory on the node or mounted filesystem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobOutputDirectoryPathSegment")]
		public string JobOutputDirectoryPathSegment { get; set; }
		
		/// <summary>
		/// Job preparation settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobPreparation")]
		public JobPreparation JobPreparation { get; set; }
		
		/// <summary>
		/// Details of volumes to mount on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountVolumes")]
		public MountVolumes MountVolumes { get; set; }
		
		/// <summary>
		/// The job will be gang scheduled on that many compute nodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		/// <summary>
		/// A list of output directories for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputDirectories")]
		public OutputDirectory[] OutputDirectories { get; set; }
		
		/// <summary>
		/// The provisioned state of the Batch AI job
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ExperimentPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The time at which the job entered its current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ProvisioningStateTransitionTime { get; set; }
		
		/// <summary>
		/// pyTorch job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pyTorchSettings")]
		public PyTorchSettings PyTorchSettings { get; set; }
		
		/// <summary>
		/// Scheduling priority associated with the job.
		/// </summary>
		[System.ComponentModel.DefaultValue(JobBasePropertiesSchedulingPriority.normal)]
		[System.Runtime.Serialization.DataMember(Name="schedulingPriority")]
		public JobBasePropertiesSchedulingPriority SchedulingPriority { get; set; } = JobBasePropertiesSchedulingPriority.normal;
		
		/// <summary>
		/// A collection of user defined environment variables with secret values to be setup for the job. Server will never report values of these variables back.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public EnvironmentVariableWithSecretValue[] Secrets { get; set; }
		
		/// <summary>
		/// The path where the Batch AI service stores stdout, stderror and execution log of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stdOutErrPathPrefix")]
		public string StdOutErrPathPrefix { get; set; }
		
		/// <summary>
		/// TensorFlow job settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tensorFlowSettings")]
		public TensorFlowSettings TensorFlowSettings { get; set; }
		
		/// <summary>
		/// The toolkit type of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolType")]
		public System.Nullable<JobPropertiesToolType> ToolType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPropertiesExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum JobPropertiesToolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cntk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tensorflow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		caffe = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		caffe2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chainer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		horovod = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custommpi = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 7,
	}
	
	/// <summary>
	/// Key Vault Secret reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultSecretReference
	{
		
		/// <summary>
		/// The URL referencing a secret in the Key Vault.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretUrl")]
		public string SecretUrl { get; set; }
		
		/// <summary>
		/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceVault")]
		public ResourceId SourceVault { get; set; }
	}
	
	/// <summary>
	/// The List Usages operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListUsagesResult
	{
		
		/// <summary>
		/// The URI to fetch the next page of compute resource usage information. Call ListNext() with this to fetch the next page of compute resource usage information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of compute resource usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Usage[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes Batch AI Resource Usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Usage
	{
		
		/// <summary>
		/// The current usage of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int32> CurrentValue { get; set; }
		
		/// <summary>
		/// The maximum permitted usage of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int64> Limit { get; set; }
		
		/// <summary>
		/// The Usage Names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public UsageName Name { get; set; }
		
		/// <summary>
		/// An enum describing the unit of usage measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<UsageUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UsageUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
	}
	
	/// <summary>
	/// Manual scale settings for the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManualScaleSettings
	{
		
		/// <summary>
		/// Actions which should be performed when compute nodes are removed from the cluster. Possible values are: requeue (default) - Terminate running jobs and requeue them so the jobs will run again. Remove compute nodes as soon as jobs have been terminated; terminate - Terminate running jobs. The jobs will not run again. Remove compute nodes as soon as jobs have been terminated. waitforjobcompletion - Allow currently running jobs to complete. Schedule no new jobs while waiting. Remove compute nodes when all jobs have completed.
		/// </summary>
		[System.ComponentModel.DefaultValue(DeallocationOption.requeue)]
		[System.Runtime.Serialization.DataMember(Name="nodeDeallocationOption")]
		public DeallocationOption NodeDeallocationOption { get; set; } = DeallocationOption.requeue;
		
		/// <summary>
		/// The desired number of compute nodes in the Cluster. Default is 0.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetNodeCount")]
		public int TargetNodeCount { get; set; } = 0;
	}
	
	/// <summary>
	/// File Server mount Information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MountSettings
	{
		
		/// <summary>
		/// Internal IP address of the File Server which can be used to access the File Server from within the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileServerInternalIP")]
		public string FileServerInternalIP { get; set; }
		
		/// <summary>
		/// Public IP address of the File Server which can be used to SSH to the node from outside of the subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileServerPublicIP")]
		public string FileServerPublicIP { get; set; }
		
		/// <summary>
		/// Path where the data disks are mounted on the File Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
	}
	
	/// <summary>
	/// Details of volumes to mount on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MountVolumes
	{
		
		/// <summary>
		/// A collection of Azure Blob Containers that are to be mounted to the cluster nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureBlobFileSystems")]
		public AzureBlobFileSystemReference[] AzureBlobFileSystems { get; set; }
		
		/// <summary>
		/// A collection of Azure File Shares that are to be mounted to the cluster nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFileShares")]
		public AzureFileShareReference[] AzureFileShares { get; set; }
		
		/// <summary>
		/// A collection of Batch AI File Servers that are to be mounted to the cluster nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileServers")]
		public FileServerReference[] FileServers { get; set; }
		
		/// <summary>
		/// A collection of unmanaged file systems that are to be mounted to the cluster nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmanagedFileSystems")]
		public UnmanagedFileSystemReference[] UnmanagedFileSystems { get; set; }
	}
	
	/// <summary>
	/// Unmanaged file system mounting configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UnmanagedFileSystemReference
	{
		
		/// <summary>
		/// Mount command line. Note, Batch AI will append mount path to the command on its own.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mountCommand")]
		public string MountCommand { get; set; }
		
		/// <summary>
		/// The relative path on the compute node where the unmanaged file system will be mounted. Note that all cluster level unmanaged file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level unmanaged file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relativeMountPath")]
		public string RelativeMountPath { get; set; }
	}
	
	/// <summary>
	/// Node setup settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeSetup
	{
		
		/// <summary>
		/// Details of volumes to mount on the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountVolumes")]
		public MountVolumes MountVolumes { get; set; }
		
		/// <summary>
		/// Performance counters reporting settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceCountersSettings")]
		public PerformanceCountersSettings PerformanceCountersSettings { get; set; }
		
		/// <summary>
		/// Specifies a setup task which can be used to customize the compute nodes of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setupTask")]
		public SetupTask SetupTask { get; set; }
	}
	
	/// <summary>
	/// Counts of various compute node states on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NodeStateCounts
	{
		
		/// <summary>
		/// Number of compute nodes in idle state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleNodeCount")]
		public System.Nullable<System.Int32> IdleNodeCount { get; set; }
		
		/// <summary>
		/// Number of compute nodes which are leaving the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leavingNodeCount")]
		public System.Nullable<System.Int32> LeavingNodeCount { get; set; }
		
		/// <summary>
		/// Number of compute nodes which are being prepared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preparingNodeCount")]
		public System.Nullable<System.Int32> PreparingNodeCount { get; set; }
		
		/// <summary>
		/// Number of compute nodes which are running jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runningNodeCount")]
		public System.Nullable<System.Int32> RunningNodeCount { get; set; }
		
		/// <summary>
		/// Number of compute nodes which are in unusable state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unusableNodeCount")]
		public System.Nullable<System.Int32> UnusableNodeCount { get; set; }
	}
	
	/// <summary>
	/// Details of a REST API operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that describes the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// This is of the format {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// Contains the list of all operations supported by BatchAI resource provider
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Performance counters reporting settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PerformanceCountersSettings
	{
		
		/// <summary>
		/// Azure Application Insights information for performance counters reporting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appInsightsReference")]
		public AppInsightsReference AppInsightsReference { get; set; }
	}
	
	/// <summary>
	/// Credentials to access a container image in a private repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateRegistryCredentials
	{
		
		/// <summary>
		/// User password to login to the docker repository. One of password or passwordSecretReference must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Key Vault Secret reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordSecretReference")]
		public KeyVaultSecretReference PasswordSecretReference { get; set; }
		
		/// <summary>
		/// User name to login to the repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// A definition of an Azure proxy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// The ID of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// pyTorch job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PyTorchSettings
	{
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArgs")]
		public string CommandLineArgs { get; set; }
		
		/// <summary>
		/// Type of the communication backend for distributed jobs. Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communicationBackend")]
		public string CommunicationBackend { get; set; }
		
		/// <summary>
		/// Number of processes to launch for the job execution. The default value for this property is equal to nodeCount property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processCount")]
		public System.Nullable<System.Int32> ProcessCount { get; set; }
		
		/// <summary>
		/// The path to the Python interpreter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonInterpreterPath")]
		public string PythonInterpreterPath { get; set; }
		
		/// <summary>
		/// The python script to execute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pythonScriptFilePath")]
		public string PythonScriptFilePath { get; set; }
	}
	
	/// <summary>
	/// Login details to SSH to a compute node in cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RemoteLoginInformation
	{
		
		/// <summary>
		/// Public IP address of the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// ID of the compute node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		/// <summary>
		/// SSH port number of the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RemoteLoginInformationListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of returned remote login details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public RemoteLoginInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// A definition of an Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The ID of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceId
	{
		
		/// <summary>
		/// The ID of the resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// At least one of manual or autoScale settings must be specified. Only one of manual or autoScale settings can be specified. If autoScale settings are specified, the system automatically scales the cluster up and down (within the supplied limits) based on the pending jobs on the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ScaleSettings
	{
		
		/// <summary>
		/// Auto-scale settings for the cluster. The system automatically scales the cluster up and down (within minimumNodeCount and maximumNodeCount) based on the number of queued and running jobs assigned to the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScale")]
		public AutoScaleSettings AutoScale { get; set; }
		
		/// <summary>
		/// Manual scale settings for the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manual")]
		public ManualScaleSettings Manual { get; set; }
	}
	
	/// <summary>
	/// Specifies a setup task which can be used to customize the compute nodes of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SetupTask
	{
		
		/// <summary>
		/// The command line to be executed on each cluster's node after it being allocated or rebooted. The command is executed in a bash subshell as a root.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commandLine")]
		public string CommandLine { get; set; }
		
		/// <summary>
		/// A collection of user defined environment variables to be set for setup task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		/// <summary>
		/// A collection of user defined environment variables with secret values to be set for the setup task. Server will never report values of these variables back.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public EnvironmentVariableWithSecretValue[] Secrets { get; set; }
		
		/// <summary>
		/// The prefix of a path where the Batch AI service will upload the stdout, stderr and execution log of the setup task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stdOutErrPathPrefix")]
		public string StdOutErrPathPrefix { get; set; }
		
		/// <summary>
		/// A path segment appended by Batch AI to stdOutErrPathPrefix to form a path where stdout, stderr and execution log of the setup task will be uploaded. Batch AI creates the setup task output directories under an unique path to avoid conflicts between different clusters. The full path can be obtained by concatenation of stdOutErrPathPrefix and stdOutErrPathSuffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stdOutErrPathSuffix")]
		public string StdOutErrPathSuffix { get; set; }
	}
	
	/// <summary>
	/// SSH configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SshConfiguration
	{
		
		/// <summary>
		/// List of source IP ranges to allow SSH connection from. The default value is '*' (all source IPs are allowed). Maximum number of IP ranges that can be specified is 400.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIPsToAllow")]
		public string[] PublicIPsToAllow { get; set; }
		
		/// <summary>
		/// Settings for user account that gets created on each on the nodes of a cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAccountSettings")]
		public UserAccountSettings UserAccountSettings { get; set; }
	}
	
	/// <summary>
	/// TensorFlow job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TensorFlowSettings
	{
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script for the master task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterCommandLineArgs")]
		public string MasterCommandLineArgs { get; set; }
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script for the parameter server. Optional for single process jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterServerCommandLineArgs")]
		public string ParameterServerCommandLineArgs { get; set; }
		
		/// <summary>
		/// The number of parameter server tasks. If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training. This property can be specified only for distributed TensorFlow training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterServerCount")]
		public System.Nullable<System.Int32> ParameterServerCount { get; set; }
		
		/// <summary>
		/// The path to the Python interpreter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonInterpreterPath")]
		public string PythonInterpreterPath { get; set; }
		
		/// <summary>
		/// The python script to execute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pythonScriptFilePath")]
		public string PythonScriptFilePath { get; set; }
		
		/// <summary>
		/// Command line arguments that need to be passed to the python script for the worker task. Optional for single process jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerCommandLineArgs")]
		public string WorkerCommandLineArgs { get; set; }
		
		/// <summary>
		/// The number of worker tasks. If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerCount")]
		public System.Nullable<System.Int32> WorkerCount { get; set; }
	}
	
	/// <summary>
	/// The toolkit type of the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ToolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cntk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tensorflow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		caffe = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		caffe2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chainer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		horovod = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custommpi = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 7,
	}
	
	/// <summary>
	/// The Usage Names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageName
	{
		
		/// <summary>
		/// The localized name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Settings for user account that gets created on each on the nodes of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserAccountSettings
	{
		
		/// <summary>
		/// Name of the administrator user account which can be used to SSH to nodes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminUserName")]
		public string AdminUserName { get; set; }
		
		/// <summary>
		/// Password of the administrator user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminUserPassword")]
		public string AdminUserPassword { get; set; }
		
		/// <summary>
		/// SSH public key of the administrator user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminUserSshPublicKey")]
		public string AdminUserSshPublicKey { get; set; }
	}
	
	/// <summary>
	/// VM configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualMachineConfiguration
	{
		
		/// <summary>
		/// The OS image reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageReference")]
		public ImageReference ImageReference { get; set; }
	}
	
	/// <summary>
	/// Batch AI Workspace information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Workspace : Resource
	{
		
		/// <summary>
		/// Workspace specific properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public WorkspaceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Workspace creation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceCreateParameters
	{
		
		/// <summary>
		/// The region in which to create the Workspace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The user specified tags associated with the Workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Values returned by the List operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceListResult
	{
		
		/// <summary>
		/// The continuation token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection of workspaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Workspace[] Value { get; set; }
	}
	
	/// <summary>
	/// Workspace specific properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceProperties
	{
		
		/// <summary>
		/// Time when the Workspace was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The provisioned state of the Workspace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public ExperimentPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The time at which the workspace entered its current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningStateTransitionTime")]
		public System.Nullable<System.DateTimeOffset> ProvisioningStateTransitionTime { get; set; }
	}
	
	/// <summary>
	/// Workspace update parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WorkspaceUpdateParameters
	{
		
		/// <summary>
		/// The user specified tags associated with the Workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists available operations for the Microsoft.BatchAI provider.
		/// Operations_List providers/Microsoft.BatchAI/operations
		/// </summary>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.BatchAI/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the current usage information as well as limits for Batch AI resources for given subscription.
		/// Usages_List subscriptions/{subscriptionId}/providers/Microsoft.BatchAI/locations/{location}/usages
		/// </summary>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <param name="location">The location for which resource usage is queried.</param>
		/// <returns>OK</returns>
		public async Task<ListUsagesResult> Usages_ListAsync(string api_version, string subscriptionId, string location)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.BatchAI/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/usages?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListUsagesResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of Workspaces associated with the given subscription.
		/// Workspaces_List subscriptions/{subscriptionId}/providers/Microsoft.BatchAI/workspaces
		/// </summary>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains a formatted list of workspaces and their properties.</returns>
		public async Task<WorkspaceListResult> Workspaces_ListAsync(int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.BatchAI/workspaces?maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WorkspaceListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of Workspaces within the specified resource group.
		/// Workspaces_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains a list of workspaces within the resource group.</returns>
		public async Task<WorkspaceListResult> Workspaces_ListByResourceGroupAsync(string resourceGroupName, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<WorkspaceListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a Workspace.
		/// Workspaces_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains information about the Workspace.</returns>
		public async Task<Workspace> Workspaces_GetAsync(string resourceGroupName, string workspaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Workspace>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Workspace.
		/// Workspaces_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <param name="requestBody">Workspace creation parameters.</param>
		/// <returns>The operation was successful. The response contains the workspace entity.</returns>
		public async Task<Workspace> Workspaces_CreateAsync(string resourceGroupName, string workspaceName, string api_version, string subscriptionId, WorkspaceCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Workspace>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a Workspace.
		/// Workspaces_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful.</returns>
		public async Task Workspaces_DeleteAsync(string resourceGroupName, string workspaceName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates properties of a Workspace.
		/// Workspaces_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <param name="requestBody">Additional parameters for workspace update.</param>
		/// <returns>The operation was successful. The response contains the Workspace entity.</returns>
		public async Task<Workspace> Workspaces_UpdateAsync(string resourceGroupName, string workspaceName, string api_version, string subscriptionId, WorkspaceUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Workspace>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about Clusters associated with the given Workspace.
		/// Clusters_ListByWorkspace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains a list of Clusters and their properties.</returns>
		public async Task<ClusterListResult> Clusters_ListByWorkspaceAsync(string resourceGroupName, string workspaceName, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/clusters&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ClusterListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a Cluster.
		/// Clusters_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clusterName">The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains information about the Cluster.</returns>
		public async Task<Cluster> Clusters_GetAsync(string resourceGroupName, string workspaceName, string clusterName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Cluster>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Cluster in the given Workspace.
		/// Clusters_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clusterName">The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <param name="requestBody">The parameters to provide for the Cluster creation.</param>
		/// <returns>The operation was successful. The response contains the Cluster entity.</returns>
		public async Task<Cluster> Clusters_CreateAsync(string resourceGroupName, string workspaceName, string clusterName, string api_version, string subscriptionId, ClusterCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Cluster>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a Cluster.
		/// Clusters_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clusterName">The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful.</returns>
		public async Task Clusters_DeleteAsync(string resourceGroupName, string workspaceName, string clusterName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates properties of a Cluster.
		/// Clusters_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clusterName">The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <param name="requestBody">Additional parameters for cluster update.</param>
		/// <returns>The operation was successful. The response contains the Cluster entity.</returns>
		public async Task<Cluster> Clusters_UpdateAsync(string resourceGroupName, string workspaceName, string clusterName, string api_version, string subscriptionId, ClusterUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Cluster>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the IP address, port of all the compute nodes in the Cluster.
		/// Clusters_ListRemoteLoginInformation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/clusters/{clusterName}/listRemoteLoginInformation
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="clusterName">The name of the cluster within the specified resource group. Cluster names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains the list of IP addresses.</returns>
		public async Task<RemoteLoginInformationListResult> Clusters_ListRemoteLoginInformationAsync(string resourceGroupName, string workspaceName, string clusterName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/listRemoteLoginInformation&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RemoteLoginInformationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of Experiments within the specified Workspace.
		/// Experiments_ListByWorkspace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains a list of experiments within the workspace.</returns>
		public async Task<ExperimentListResult> Experiments_ListByWorkspaceAsync(string resourceGroupName, string workspaceName, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExperimentListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about an Experiment.
		/// Experiments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains information about the experiment.</returns>
		public async Task<Experiment> Experiments_GetAsync(string resourceGroupName, string workspaceName, string experimentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Experiment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an Experiment.
		/// Experiments_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains the experiment entity.</returns>
		public async Task<Experiment> Experiments_CreateAsync(string resourceGroupName, string workspaceName, string experimentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Experiment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an Experiment.
		/// Experiments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful.</returns>
		public async Task Experiments_DeleteAsync(string resourceGroupName, string workspaceName, string experimentName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of Jobs within the specified Experiment.
		/// Jobs_ListByExperiment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains a list of ExperimentJob entities associated with the experiment.</returns>
		public async Task<JobListResult> Jobs_ListByExperimentAsync(string resourceGroupName, string workspaceName, string experimentName, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/jobs&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<JobListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a Job.
		/// Jobs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobName">The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains the Job entity.</returns>
		public async Task<Job> Jobs_GetAsync(string resourceGroupName, string workspaceName, string experimentName, string jobName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Job>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a Job in the given Experiment.
		/// Jobs_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobName">The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <param name="requestBody">The parameters to provide for job creation.</param>
		/// <returns>The operation was successful. The response contains the job entity.</returns>
		public async Task<Job> Jobs_CreateAsync(string resourceGroupName, string workspaceName, string experimentName, string jobName, string api_version, string subscriptionId, JobCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Job>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a Job.
		/// Jobs_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobName">The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful.</returns>
		public async Task Jobs_DeleteAsync(string resourceGroupName, string workspaceName, string experimentName, string jobName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all directories and files inside the given directory of the Job's output directory (if the output directory is on Azure File Share or Azure Storage Container).
		/// Jobs_ListOutputFiles subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/listOutputFiles
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobName">The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="outputdirectoryid">Id of the job output directory. This is the OutputDirectory-->id parameter that is given by the user during Create Job.</param>
		/// <param name="directory">The path to the directory.</param>
		/// <param name="linkexpiryinminutes">The number of minutes after which the download link will expire.
		/// Minimum: 5
		/// Maximum: 600
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains the list of files.</returns>
		public async Task<FileListResult> Jobs_ListOutputFilesAsync(string resourceGroupName, string workspaceName, string experimentName, string jobName, string outputdirectoryid, string directory, int linkexpiryinminutes, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/listOutputFiles&outputdirectoryid=" + (outputdirectoryid==null? "" : System.Uri.EscapeDataString(outputdirectoryid))+"&directory=" + (directory==null? "" : System.Uri.EscapeDataString(directory))+"&linkexpiryinminutes="+linkexpiryinminutes+"&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FileListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of currently existing nodes which were used for the Job execution. The returned information contains the node ID, its public IP and SSH port.
		/// Jobs_ListRemoteLoginInformation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/listRemoteLoginInformation
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobName">The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains compute node remote login information.</returns>
		public async Task<RemoteLoginInformationListResult> Jobs_ListRemoteLoginInformationAsync(string resourceGroupName, string workspaceName, string experimentName, string jobName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/listRemoteLoginInformation&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RemoteLoginInformationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Terminates a job.
		/// Jobs_Terminate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/experiments/{experimentName}/jobs/{jobName}/terminate
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="experimentName">The name of the experiment. Experiment names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="jobName">The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful.</returns>
		public async Task Jobs_TerminateAsync(string resourceGroupName, string workspaceName, string experimentName, string jobName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/experiments/"+ (experimentName==null? "" : System.Uri.EscapeDataString(experimentName))+"/jobs/"+ (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"/terminate&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a list of File Servers associated with the specified workspace.
		/// FileServers_ListByWorkspace subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="maxresults">The maximum number of items to return in the response. A maximum of 1000 files can be returned.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains a list of File Servers and their properties.</returns>
		public async Task<FileServerListResult> FileServers_ListByWorkspaceAsync(string resourceGroupName, string workspaceName, int maxresults, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/fileServers&maxresults="+maxresults+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FileServerListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a File Server.
		/// FileServers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers/{fileServerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="fileServerName">The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful. The response contains information about the FileServer.</returns>
		public async Task<FileServer> FileServers_GetAsync(string resourceGroupName, string workspaceName, string fileServerName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/fileServers/"+ (fileServerName==null? "" : System.Uri.EscapeDataString(fileServerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FileServer>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a File Server in the given workspace.
		/// FileServers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers/{fileServerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="fileServerName">The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <param name="requestBody">The parameters to provide for File Server creation.</param>
		/// <returns>The operation was successful. The response contains the file server entity.</returns>
		public async Task<FileServer> FileServers_CreateAsync(string resourceGroupName, string workspaceName, string fileServerName, string api_version, string subscriptionId, FileServerCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/fileServers/"+ (fileServerName==null? "" : System.Uri.EscapeDataString(fileServerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FileServer>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a File Server.
		/// FileServers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BatchAI/workspaces/{workspaceName}/fileServers/{fileServerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group to which the resource belongs.</param>
		/// <param name="workspaceName">The name of the workspace. Workspace names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="fileServerName">The name of the file server within the specified resource group. File server names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="api_version">Specifies the version of API used for this request.</param>
		/// <param name="subscriptionId">The subscriptionID for the Azure user.</param>
		/// <returns>The operation was successful.</returns>
		public async Task FileServers_DeleteAsync(string resourceGroupName, string workspaceName, string fileServerName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.BatchAI/workspaces/"+ (workspaceName==null? "" : System.Uri.EscapeDataString(workspaceName))+"/fileServers/"+ (fileServerName==null? "" : System.Uri.EscapeDataString(fileServerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
