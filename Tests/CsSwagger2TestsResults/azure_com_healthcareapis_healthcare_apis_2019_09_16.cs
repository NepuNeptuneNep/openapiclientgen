//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Input values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The name of the service instance to check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The fully qualified resource type which includes provider namespace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// Error details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorDetailsInternal Error { get; set; }
	}
	
	/// <summary>
	/// Error details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDetailsInternal
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Service REST API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{read | write | action | delete}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Default value is 'user,system'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// The object that represents the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// Friendly description for the operation,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Service provider: Microsoft.HealthcareApis
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource Type: Services
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// A list of service operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// The link used to get the next page of service description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of service operations supported by the Microsoft.HealthcareApis resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties indicating the operation result of an operation on a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResultsDescription
	{
		
		/// <summary>
		/// The ID of the operation returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the operation result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional properties of the operation result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		/// <summary>
		/// The time that the operation was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The status of the operation being performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OperationResultsDescriptionStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationResultsDescriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Requested = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 4,
	}
	
	/// <summary>
	/// The common properties of a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// An etag associated with the resource, used for optimistic concurrency when editing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The resource identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public ResourceKind Kind { get; set; }
		
		/// <summary>
		/// The resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The resource name.
		/// Pattern: ^[a-z0-9][a-z0-9-]{1,21}[a-z0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z0-9][a-z0-9-]{1,21}[a-z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fhir = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fhir-Stu3")]
		fhirMinusStu3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fhir-R4")]
		fhirMinusR4 = 2,
	}
	
	/// <summary>
	/// An access policy entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceAccessPolicyEntry
	{
		
		/// <summary>
		/// An Azure AD object ID (User or Apps) that is allowed access to the FHIR service.
		/// Required
		/// Pattern: ^(([0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}){1})+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(([0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}){1})+$")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// Authentication configuration information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceAuthenticationConfigurationInfo
	{
		
		/// <summary>
		/// The audience url for the service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audience")]
		public string Audience { get; set; }
		
		/// <summary>
		/// The authority url for the service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public string Authority { get; set; }
		
		/// <summary>
		/// If the SMART on FHIR proxy is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smartProxyEnabled")]
		public System.Nullable<System.Boolean> SmartProxyEnabled { get; set; }
	}
	
	/// <summary>
	/// The settings for the CORS configuration of the service instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceCorsConfigurationInfo
	{
		
		/// <summary>
		/// If credentials are allowed via CORS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowCredentials")]
		public System.Nullable<System.Boolean> AllowCredentials { get; set; }
		
		/// <summary>
		/// The headers to be allowed via CORS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string[] Headers { get; set; }
		
		/// <summary>
		/// The max age to be allowed via CORS.
		/// Minimum: 0
		/// Maximum: 99999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAge")]
		[System.ComponentModel.DataAnnotations.Range(0, 99999)]
		public System.Nullable<System.Int32> MaxAge { get; set; }
		
		/// <summary>
		/// The methods to be allowed via CORS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methods")]
		public string[] Methods { get; set; }
		
		/// <summary>
		/// The origins to be allowed via CORS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origins")]
		public string[] Origins { get; set; }
	}
	
	/// <summary>
	/// The settings for the Cosmos DB database backing the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceCosmosDbConfigurationInfo
	{
		
		/// <summary>
		/// The provisioned throughput for the backing database.
		/// Minimum: 400
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerThroughput")]
		[System.ComponentModel.DataAnnotations.Range(400, 10000)]
		public System.Nullable<System.Int32> OfferThroughput { get; set; }
	}
	
	/// <summary>
	/// The description of the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServicesDescription
	{
		
		/// <summary>
		/// The properties of a service instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ServicesProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a service instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServicesProperties
	{
		
		/// <summary>
		/// The access policies of the service instance.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessPolicies")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ServiceAccessPolicyEntry[] AccessPolicies { get; set; }
		
		/// <summary>
		/// Authentication configuration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationConfiguration")]
		public ServiceAuthenticationConfigurationInfo AuthenticationConfiguration { get; set; }
		
		/// <summary>
		/// The settings for the CORS configuration of the service instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corsConfiguration")]
		public ServiceCorsConfigurationInfo CorsConfiguration { get; set; }
		
		/// <summary>
		/// The settings for the Cosmos DB database backing the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosmosDbConfiguration")]
		public ServiceCosmosDbConfigurationInfo CosmosDbConfiguration { get; set; }
		
		/// <summary>
		/// The provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ServicesPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServicesPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verifying = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deprovisioned = 8,
	}
	
	/// <summary>
	/// A list of service description objects with a next link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServicesDescriptionListResult
	{
		
		/// <summary>
		/// The link used to get the next page of service description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// A list of service description objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ServicesDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties indicating whether a given service name is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServicesNameAvailabilityInfo
	{
		
		/// <summary>
		/// The detailed reason message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The value which indicates whether the provided name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason for unavailability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<ServicesNameAvailabilityInfoReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServicesNameAvailabilityInfoReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// The description of the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServicesPatchDescription
	{
		
		/// <summary>
		/// Instance tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Healthcare service REST API operations.
		/// Operations_List providers/Microsoft.HealthcareApis/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.HealthcareApis/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Check if a service instance name is available.
		/// Services_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/checkNameAvailability
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="requestBody">Set the name parameter in the CheckNameAvailabilityParameters structure to the name of the service instance to check.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the service name is available. If the name is not available, the body contains the reason.</returns>
		public async Task<ServicesNameAvailabilityInfo> Services_CheckNameAvailabilityAsync(string api_version, string subscriptionId, CheckNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.HealthcareApis/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServicesNameAvailabilityInfo>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the operation result for a long running operation.
		/// OperationResults_Get subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/locations/{locationName}/operationresults/{operationResultId}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="locationName">The location of the operation.</param>
		/// <param name="operationResultId">The ID of the operation result to get.</param>
		/// <returns>The body contains all of the properties of the operation result.</returns>
		public async Task<OperationResultsDescription> OperationResults_GetAsync(string api_version, string subscriptionId, string locationName, string operationResultId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.HealthcareApis/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/operationresults/"+ (operationResultId==null? "" : System.Uri.EscapeDataString(operationResultId))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationResultsDescription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all the service instances in a subscription.
		/// Services_List subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/services
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the service instances in the subscription.</returns>
		public async Task<ServicesDescriptionListResult> Services_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.HealthcareApis/services?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServicesDescriptionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all the service instances in a resource group.
		/// Services_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the service instance.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <returns>This is a synchronous operation. The body contains a JSON-serialized array of the metadata from all the service instances in the resource group.</returns>
		public async Task<ServicesDescriptionListResult> Services_ListByResourceGroupAsync(string api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HealthcareApis/services?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServicesDescriptionListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the metadata of a service instance.
		/// Services_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the service instance.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceName">The name of the service instance.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <returns>The body contains all of the properties of the service instance.</returns>
		public async Task<ServicesDescription> Services_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HealthcareApis/services/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServicesDescription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update the metadata of a service instance.
		/// Services_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the service instance.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceName">The name of the service instance.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="requestBody">The service instance metadata.</param>
		/// <returns>Updated - Put request accepted and an existing resource is being updated; the operation will complete asynchronously.</returns>
		public async Task<ServicesDescription> Services_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, ServicesDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HealthcareApis/services/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServicesDescription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a service instance.
		/// Services_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the service instance.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceName">The name of the service instance.
		/// Min length: 3
		/// Max length: 24
		// </param>
		public async Task Services_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HealthcareApis/services/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the metadata of a service instance.
		/// Services_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">The subscription identifier.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the service instance.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="resourceName">The name of the service instance.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="requestBody">The service instance metadata and security metadata.</param>
		/// <returns>The tags for the resource were updated successfully.</returns>
		public async Task<ServicesDescription> Services_UpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string resourceName, ServicesPatchDescription requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.HealthcareApis/services/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServicesDescription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
