//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Details about the API request error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ComputerVisionError
	{
		
		/// <summary>
		/// The error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ComputerVisionErrorCode Code { get; set; }
		
		/// <summary>
		/// A message explaining the error reported by the service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A unique request identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ComputerVisionErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageFormat = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnsupportedMediaType = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageUrl = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedFeature = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedImage = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Timeout = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidImageSize = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadArgument = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetectFaceError = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedLanguage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidThumbnailSize = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidDetails = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidModel = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelledRequest = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSupportedVisualFeature = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedToProcess = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unspecified = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageException = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageUrl
	{
		
		/// <summary>
		/// Publicly reachable URL of an image.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An object representing a recognized text line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Line
	{
		
		/// <summary>
		/// Quadrangle bounding box, with coordinates in original image. The eight numbers represent the four points (x-coordinate, y-coordinate from the left-top corner of the image) of the detected rectangle from the left-top corner in the clockwise direction. For images, coordinates are in pixels. For PDF, coordinates are in inches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public Double[] BoundingBox { get; set; }
		
		/// <summary>
		/// The text content of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// List of words in the text line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="words")]
		public Word[] Words { get; set; }
	}
	
	/// <summary>
	/// An object representing a recognized word.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Word
	{
		
		/// <summary>
		/// Quadrangle bounding box, with coordinates in original image. The eight numbers represent the four points (x-coordinate, y-coordinate from the left-top corner of the image) of the detected rectangle from the left-top corner in the clockwise direction. For images, coordinates are in pixels. For PDF, coordinates are in inches.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="boundingBox")]
		public Double[] BoundingBox { get; set; }
		
		/// <summary>
		/// Qualitative confidence measure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<WordConfidence> Confidence { get; set; }
		
		/// <summary>
		/// The text content of the word.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum WordConfidence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 1,
	}
	
	/// <summary>
	/// Status code of the text operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
	}
	
	/// <summary>
	/// OCR result of the read operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ReadOperationResult
	{
		
		/// <summary>
		/// An array of text recognition result of the read operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recognitionResults")]
		public TextRecognitionResult[] RecognitionResults { get; set; }
		
		/// <summary>
		/// Status code of the text operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationStatus Status { get; set; }
	}
	
	/// <summary>
	/// An object representing a recognized text region
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TextRecognitionResult
	{
		
		/// <summary>
		/// The orientation of the image in degrees in the clockwise direction. Range between [0, 360).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clockwiseOrientation")]
		public System.Nullable<System.Double> ClockwiseOrientation { get; set; }
		
		/// <summary>
		/// The height of the image in pixels or the PDF in inches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// A list of recognized text lines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lines")]
		public Line[] Lines { get; set; }
		
		/// <summary>
		/// The 1-based page number of the recognition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF, the unit is 'inch'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<TextRecognitionResultUnit> Unit { get; set; }
		
		/// <summary>
		/// The width of the image in pixels or the PDF in inches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TextRecognitionResultUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pixel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inch = 1,
	}
	
	/// <summary>
	/// Result of recognition text operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TextOperationResult
	{
		
		/// <summary>
		/// An object representing a recognized text region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recognitionResult")]
		public TextRecognitionResult RecognitionResult { get; set; }
		
		/// <summary>
		/// Status code of the text operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationStatus Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read File interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult' operation to access OCR results.​
		/// BatchReadFile read/core/asyncBatchAnalyze
		/// </summary>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		public async Task BatchReadFileAsync(ImageUrl requestBody)
		{
			var requestUri = "read/core/asyncBatchAnalyze";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Batch Read File interface.
		/// GetReadOperationResult read/operations/{operationId}
		/// </summary>
		/// <param name="operationId">Id of read operation returned in the response of the 'Batch Read File' interface.</param>
		/// <returns>Returns the read operation status.</returns>
		public async Task<ReadOperationResult> GetReadOperationResultAsync(string operationId)
		{
			var requestUri = "read/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReadOperationResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
		/// RecognizeText recognizeText
		/// </summary>
		/// <param name="mode">Type of text to recognize.</param>
		/// <param name="requestBody">A JSON document with a URL pointing to the image that is to be analyzed.</param>
		public async Task RecognizeTextAsync(RecognizeTextMode mode, ImageUrl requestBody)
		{
			var requestUri = "recognizeText?mode=" + mode;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This interface is used for getting text operation result. The URL to this interface should be retrieved from 'Operation-Location' field returned from Recognize Text interface.
		/// GetTextOperationResult textOperations/{operationId}
		/// </summary>
		/// <param name="operationId">Id of the text operation returned in the response of the 'Recognize Text'</param>
		/// <returns>Returns the operation status.</returns>
		public async Task<TextOperationResult> GetTextOperationResultAsync(string operationId)
		{
			var requestUri = "textOperations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TextOperationResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum RecognizeTextMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Handwritten = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Printed = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
