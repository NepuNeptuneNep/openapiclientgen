//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The EngagementFabric account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Account
	{
	}
	
	/// <summary>
	/// The list of the EngagementFabric accounts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountList
	{
		
		/// <summary>
		/// EngagementFabric accounts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Account[] Value { get; set; }
	}
	
	/// <summary>
	/// The patch of EngagementFabric account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountPatch
	{
		
		/// <summary>
		/// The tags of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The EngagementFabric channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Channel
	{
		
		/// <summary>
		/// The EngagementFabric channel properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ChannelProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The EngagementFabric channel properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChannelProperties
	{
		
		/// <summary>
		/// The functions to be enabled for the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelFunctions")]
		public string[] ChannelFunctions { get; set; }
		
		/// <summary>
		/// The channel type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelType")]
		public string ChannelType { get; set; }
		
		/// <summary>
		/// The channel credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public System.Collections.Generic.Dictionary<string, string> Credentials { get; set; }
	}
	
	/// <summary>
	/// The list of the EngagementFabric channels
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChannelList
	{
		
		/// <summary>
		/// EngagementFabric channels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Channel[] Value { get; set; }
	}
	
	/// <summary>
	/// EngagementFabric channel description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChannelTypeDescription
	{
		
		/// <summary>
		/// Text description for the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelDescription")]
		public string ChannelDescription { get; set; }
		
		/// <summary>
		/// All the available functions for the channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelFunctions")]
		public string[] ChannelFunctions { get; set; }
		
		/// <summary>
		/// Channel type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelType")]
		public string ChannelType { get; set; }
	}
	
	/// <summary>
	/// List of the EngagementFabric channel descriptions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ChannelTypeDescriptionList
	{
		
		/// <summary>
		/// Channel descriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ChannelTypeDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameter for name availability check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityParameter
	{
		
		/// <summary>
		/// The name to be checked
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The fully qualified resource type for the name to be checked
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The result of name availability check
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResult
	{
		
		/// <summary>
		/// The message if name is unavailable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The name to be checked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// The reason of name availability result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// The reason of name availability result
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameUnavailableReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// The default error response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// Content of the default error response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// Content of the default error response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// The error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The list of additional details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// The error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The description of the EngagementFabric account key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyDescription
	{
		
		/// <summary>
		/// The name of the key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The rank of the EngagementFabric account key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<KeyDescriptionRank> Rank { get; set; }
		
		/// <summary>
		/// The value of the key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum KeyDescriptionRank
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrimaryKey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondaryKey = 1,
	}
	
	/// <summary>
	/// The list of the EngagementFabric account keys
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyDescriptionList
	{
		
		/// <summary>
		/// Account keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public KeyDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The rank of the EngagementFabric account key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum KeyRank
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrimaryKey = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondaryKey = 1,
	}
	
	/// <summary>
	/// The EngagementFabric operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// The display information of the EngagementFabric operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the EngagementFabric operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The display information of the EngagementFabric operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// The description of the EngagementFabric operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the EngagementFabric operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The resource provider namespace of the EngagementFabric operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource type of the EngagementFabric operation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The list of the EngagementFabric operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationList
	{
		
		/// <summary>
		/// The EngagementFabric operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The base model for the proxy-only Azure resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyOnlyResource
	{
	}
	
	/// <summary>
	/// The parameter to regenerate single EngagementFabric account key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RegenerateKeyParameter
	{
		
		/// <summary>
		/// The name of key to be regenerated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The rank of the EngagementFabric account key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public KeyDescriptionRank Rank { get; set; }
	}
	
	/// <summary>
	/// The base model for Azure resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The ID of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The fully qualified type of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The EngagementFabric SKU
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SKU
	{
		
		/// <summary>
		/// The name of the SKU
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The price tier of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// The EngagementFabric SKU description of given resource type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuDescription
	{
		
		/// <summary>
		/// Locations and zones
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationInfo")]
		public SkuLocationInfoItem[] LocationInfo { get; set; }
		
		/// <summary>
		/// The set of locations that the SKU is available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// The name of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The fully qualified resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The restrictions because of which SKU cannot be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public string[] Restrictions { get; set; }
		
		/// <summary>
		/// The price tier of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// The Locations and zones info for SKU
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuLocationInfoItem
	{
		
		/// <summary>
		/// The available location of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The available zone of the SKU
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zones")]
		public string[] Zones { get; set; }
	}
	
	/// <summary>
	/// The list of the EngagementFabric SKU descriptions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuDescriptionList
	{
		
		/// <summary>
		/// SKU descriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SkuDescription[] Value { get; set; }
	}
	
	/// <summary>
	/// The base model for the tracked Azure resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource
	{
		
		/// <summary>
		/// The location of the resource
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The EngagementFabric SKU
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public SKU Sku { get; set; }
		
		/// <summary>
		/// The tags of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List operation of EngagementFabric resources
		/// Operations_List providers/Microsoft.EngagementFabric/operations
		/// </summary>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<OperationList> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.EngagementFabric/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the EngagementFabric accounts in given subscription
		/// Accounts_List subscriptions/{subscriptionId}/providers/Microsoft.EngagementFabric/Accounts
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<AccountList> Accounts_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EngagementFabric/Accounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List available SKUs of EngagementFabric resource
		/// SKUs_List subscriptions/{subscriptionId}/providers/Microsoft.EngagementFabric/skus
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<SkuDescriptionList> SKUs_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.EngagementFabric/skus&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SkuDescriptionList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List EngagementFabric accounts in given resource group
		/// Accounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<AccountList> Accounts_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AccountList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the EngagementFabric account
		/// Accounts_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<Account> Accounts_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or Update the EngagementFabric account
		/// Accounts_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <param name="requestBody">The EngagementFabric account description</param>
		/// <returns>OK</returns>
		public async Task<Account> Accounts_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, Account requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete the EngagementFabric account
		/// Accounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task Accounts_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update EngagementFabric account
		/// Accounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <param name="requestBody">The account patch</param>
		/// <returns>OK</returns>
		public async Task<Account> Accounts_UpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, AccountPatch requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Account>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the EngagementFabric channels
		/// Channels_ListByAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<ChannelList> Channels_ListByAccountAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/Channels&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ChannelList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the EngagementFabric channel
		/// Channels_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="channelName">Channel Name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<Channel> Channels_GetAsync(string subscriptionId, string resourceGroupName, string accountName, string channelName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/Channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Channel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or Update the EngagementFabric channel
		/// Channels_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="channelName">Channel Name</param>
		/// <param name="api_version">API version</param>
		/// <param name="requestBody">The EngagementFabric channel description</param>
		/// <returns>OK</returns>
		public async Task<Channel> Channels_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string accountName, string channelName, string api_version, Channel requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/Channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Channel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete the EngagementFabric channel
		/// Channels_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/Channels/{channelName}
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="channelName">The EngagementFabric channel name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task Channels_DeleteAsync(string subscriptionId, string resourceGroupName, string accountName, string channelName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/Channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List available EngagementFabric channel types and functions
		/// Accounts_ListChannelTypes subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/listChannelTypes
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<ChannelTypeDescriptionList> Accounts_ListChannelTypesAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listChannelTypes&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ChannelTypeDescriptionList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List keys of the EngagementFabric account
		/// Accounts_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/listKeys
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <returns>OK</returns>
		public async Task<KeyDescriptionList> Accounts_ListKeysAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<KeyDescriptionList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerate key of the EngagementFabric account
		/// Accounts_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/Accounts/{accountName}/regenerateKey
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="accountName">Account Name</param>
		/// <param name="api_version">API version</param>
		/// <param name="requestBody">Parameters specifying the key to be regenerated</param>
		/// <returns>OK</returns>
		public async Task<KeyDescription> Accounts_RegenerateKeyAsync(string subscriptionId, string resourceGroupName, string accountName, string api_version, RegenerateKeyParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/Accounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/regenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<KeyDescription>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Check availability of EngagementFabric resource
		/// CheckNameAvailability subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EngagementFabric/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">Subscription ID</param>
		/// <param name="resourceGroupName">Resource Group Name</param>
		/// <param name="api_version">API version</param>
		/// <param name="requestBody">Parameter describing the name to be checked</param>
		/// <returns>OK</returns>
		public async Task<CheckNameAvailabilityResult> CheckNameAvailabilityAsync(string subscriptionId, string resourceGroupName, string api_version, CheckNameAvailabilityParameter requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.EngagementFabric/checkNameAvailability&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
