//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The properties of the Canonical support plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CanonicalSupportPlanProperties
	{
		
		/// <summary>
		/// The provisioning state of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<CanonicalSupportPlanPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CanonicalSupportPlanPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Purchasing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Downgrading = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upgrading = 6,
	}
	
	/// <summary>
	/// The status of the Canonical support plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CanonicalSupportPlanResponseEnvelope
	{
		
		/// <summary>
		/// The id of the ARM resource, e.g. "/subscriptions/{id}/providers/Microsoft.Addons/supportProvider/{supportProviderName}/supportPlanTypes/{planTypeName}".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the Canonical support plan, i.e. "essential", "standard" or "advanced".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties of the Canonical support plan.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CanonicalSupportPlanProperties Properties { get; set; }
		
		/// <summary>
		/// Microsoft.Addons/supportProvider
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CanonicalSupportPlanStatusElement
	{
		
		/// <summary>
		/// Whether the support plan is enabled for this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Support plan type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportPlanType")]
		public System.Nullable<CanonicalSupportPlanStatusElementSupportPlanType> SupportPlanType { get; set; }
		
		/// <summary>
		/// This indicates that when this support plan is cancelled and then enabled that AddonsRP will emit a one-time charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="willEmitOneTimeChargeIfReEnabled")]
		public System.Nullable<System.Boolean> WillEmitOneTimeChargeIfReEnabled { get; set; }
		
		/// <summary>
		/// This indicates that when this support plan is enabled if AddonsRP will emit a one-time charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="willEmitOneTimeChargeWhenEnabled")]
		public System.Nullable<System.Boolean> WillEmitOneTimeChargeWhenEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CanonicalSupportPlanStatusElementSupportPlanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		essential = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		advanced = 2,
	}
	
	/// <summary>
	/// Error description and code explaining why an operation failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorDefinition
	{
		
		/// <summary>
		/// Service specific error code which serves as the substatus for the HTTP error code.
		/// Required
		/// Minimum: 100
		/// Maximum: 600
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.Range(100, 600)]
		public int Code { get; set; }
		
		/// <summary>
		/// Description of the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Definition object with the name and properties of an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsDefinition
	{
		
		/// <summary>
		/// Display object with properties of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationsDisplayDefinition Display { get; set; }
		
		/// <summary>
		/// Name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Display object with properties of the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationsDisplayDefinition
	{
		
		/// <summary>
		/// Description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Short description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Resource provider of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Addons RP operations.
		/// Operations_List providers/Microsoft.Addons/operations
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <returns>List all the operations.</returns>
		public async Task<OperationsDefinition[]> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Addons/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationsDefinition[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the Canonical Support Plans.
		/// Returns the Canonical Support Plans as well as whether they are enabled or not for the subscription.
		/// CanonicalSupportPlanTypes_Get subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/{providerName}/supportPlanTypes
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="providerName">The support plan type. For now the only valid type is "canonical".</param>
		/// <returns>OK</returns>
		public async Task<CanonicalSupportPlanTypes_GetReturn[]> CanonicalSupportPlanTypes_GetAsync(string api_version, string subscriptionId, string providerName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Addons/supportProviders/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/supportPlanTypes?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CanonicalSupportPlanTypes_GetReturn[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns whether or not the canonical support plan of type {type} is enabled for the subscription.
		/// SupportPlanTypes_Get subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/{providerName}/supportPlanTypes/{planTypeName}
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="providerName">The support plan type. For now the only valid type is "canonical".</param>
		/// <param name="planTypeName">The Canonical support plan type.</param>
		/// <returns>OK</returns>
		public async Task<CanonicalSupportPlanResponseEnvelope> SupportPlanTypes_GetAsync(string api_version, string subscriptionId, string providerName, SupportPlanTypes_GetPlanTypeName planTypeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Addons/supportProviders/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/supportPlanTypes/"+planTypeName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CanonicalSupportPlanResponseEnvelope>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates the Canonical support plan of type {type} for the subscription.
		/// SupportPlanTypes_CreateOrUpdate subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/{providerName}/supportPlanTypes/{planTypeName}
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="providerName">The support plan type. For now the only valid type is "canonical".</param>
		/// <param name="planTypeName">The Canonical support plan type.</param>
		/// <returns>OK</returns>
		public async Task<CanonicalSupportPlanResponseEnvelope> SupportPlanTypes_CreateOrUpdateAsync(string api_version, string subscriptionId, string providerName, SupportPlanTypes_GetPlanTypeName planTypeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Addons/supportProviders/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/supportPlanTypes/"+planTypeName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CanonicalSupportPlanResponseEnvelope>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels the Canonical support plan of type {type} for the subscription.
		/// SupportPlanTypes_Delete subscriptions/{subscriptionId}/providers/Microsoft.Addons/supportProviders/{providerName}/supportPlanTypes/{planTypeName}
		/// </summary>
		/// <param name="api_version">Client API version.</param>
		/// <param name="subscriptionId">Subscription credentials that uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="providerName">The support plan type. For now the only valid type is "canonical".</param>
		/// <param name="planTypeName">The Canonical support plan type.</param>
		public async Task SupportPlanTypes_DeleteAsync(string api_version, string subscriptionId, string providerName, SupportPlanTypes_GetPlanTypeName planTypeName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Addons/supportProviders/"+ (providerName==null? "" : System.Uri.EscapeDataString(providerName))+"/supportPlanTypes/"+planTypeName+"?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CanonicalSupportPlanTypes_GetReturn
	{
		
		/// <summary>
		/// Whether the support plan is enabled for this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Support plan type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportPlanType")]
		public CanonicalSupportPlanStatusElementSupportPlanType SupportPlanType { get; set; }
		
		/// <summary>
		/// This indicates that when this support plan is cancelled and then enabled that AddonsRP will emit a one-time charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="willEmitOneTimeChargeIfReEnabled")]
		public System.Nullable<System.Boolean> WillEmitOneTimeChargeIfReEnabled { get; set; }
		
		/// <summary>
		/// This indicates that when this support plan is enabled if AddonsRP will emit a one-time charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="willEmitOneTimeChargeWhenEnabled")]
		public System.Nullable<System.Boolean> WillEmitOneTimeChargeWhenEnabled { get; set; }
	}
	
	public enum SupportPlanTypes_GetPlanTypeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Essential = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
