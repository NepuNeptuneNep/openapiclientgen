//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckZappitiServiceRequest
	{
		
		/// <summary>
		/// Client API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckZappitiServiceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CheckZappitiServiceResultErrorCode> ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckZappitiServiceResultErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotInstalled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotRunning = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailToStart = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadApiKey = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionDetailsRequest
	{
		
		/// <summary>
		/// Client API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConnectionDetailsResult
	{
		
		/// <summary>
		/// User's Authentification key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		/// <summary>
		/// User's collection id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Collection { get; set; }
		
		/// <summary>
		/// User's email used for the collection
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckZappitiServiceResultErrorCode ErrorCode { get; set; }
		
		/// <summary>
		/// Server's IP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// Port used by the server
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ServerPort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotInstalled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotRunning = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailToStart = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadApiKey = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstallZappitiServiceRequest
	{
		
		/// <summary>
		/// Client API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InstallZappitiServiceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CheckZappitiServiceResultErrorCode ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IsAliveRequest
	{
		
		/// <summary>
		/// Client API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IsAliveResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CheckZappitiServiceResultErrorCode ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LastMediaRequest
	{
		
		/// <summary>
		/// Client API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LastMediaResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Actors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackgroundUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Directors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Episode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckZappitiServiceResultErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PosterUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Runtime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Synopsis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TvShowName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartVideoRequest
	{
		
		/// <summary>
		/// Client API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// User auth key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		/// <summary>
		/// Collection id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Collection { get; set; }
		
		/// <summary>
		/// Server Ip
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ip { get; set; }
		
		/// <summary>
		/// Id of the video to start
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MediaId { get; set; }
		
		/// <summary>
		/// Server Port
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartVideoResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CheckZappitiServiceResultErrorCode ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartZappitiServiceRequest
	{
		
		/// <summary>
		/// Client API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StartZappitiServiceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CheckZappitiServiceResultErrorCode ErrorCode { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Check if Zappiti Service app status on the player
		/// ErrorCode.NotInstalled
		/// ErrorCode.NotRunning
		/// ErrorCode.Running
		/// 
		/// Zappiti_ServicePost CheckZappitiService
		/// </summary>
		/// <returns>CheckZappitiServiceResult</returns>
		public async Task<CheckZappitiServiceResult> Zappiti_ServicePostAsync(CheckZappitiServiceRequest requestBody)
		{
			var requestUri = "CheckZappitiService";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckZappitiServiceResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get user's login details
		/// GeneralPost ConnectionDetails
		/// </summary>
		/// <returns>ConnectionDetailsResult</returns>
		public async Task<ConnectionDetailsResult> GeneralPostAsync(ConnectionDetailsRequest requestBody)
		{
			var requestUri = "ConnectionDetails";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConnectionDetailsResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Open a popup that allow the user to install Zappiti Service, if not already installed
		/// Zappiti_ServicePost InstallZappitiService
		/// </summary>
		/// <returns>InstallZappitiServiceResult</returns>
		public async Task<InstallZappitiServiceResult> Zappiti_ServicePostAsync(InstallZappitiServiceRequest requestBody)
		{
			var requestUri = "InstallZappitiService";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<InstallZappitiServiceResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get server status
		/// GeneralPost IsAlive
		/// </summary>
		/// <returns>IsAliveResult</returns>
		public async Task<IsAliveResult> GeneralPostAsync(IsAliveRequest requestBody)
		{
			var requestUri = "IsAlive";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<IsAliveResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get informations about last media playback
		/// PlaybackPost LastMedia
		/// </summary>
		/// <returns>LastMediaResult</returns>
		public async Task<LastMediaResult> PlaybackPostAsync(LastMediaRequest requestBody)
		{
			var requestUri = "LastMedia";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LastMediaResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Start the playback
		/// Start the playback of the speficied video.
		/// 
		/// PlaybackPost StartVideo
		/// </summary>
		/// <returns>StartVideoResult</returns>
		public async Task<StartVideoResult> PlaybackPostAsync(StartVideoRequest requestBody)
		{
			var requestUri = "StartVideo";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartVideoResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Start Zappiti Service if not started yet
		/// Zappiti_ServicePost StartZappitiService
		/// </summary>
		/// <returns>StartZappitiServiceResult</returns>
		public async Task<StartZappitiServiceResult> Zappiti_ServicePostAsync(StartZappitiServiceRequest requestBody)
		{
			var requestUri = "StartZappitiService";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartZappitiServiceResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
