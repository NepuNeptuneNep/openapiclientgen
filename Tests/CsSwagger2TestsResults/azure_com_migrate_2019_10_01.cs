//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A disk assessed for an assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessedDisk
	{
		
		/// <summary>
		/// User friendly name of the assessed disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gigabytes of storage provided by the recommended Azure disk size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gigabytesForRecommendedDiskSize")]
		public System.Nullable<System.Int32> GigabytesForRecommendedDiskSize { get; set; }
		
		/// <summary>
		/// Gigabytes of storage provisioned for this disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gigabytesProvisioned")]
		public System.Nullable<System.Double> GigabytesProvisioned { get; set; }
		
		/// <summary>
		/// Disk throughput in MegaBytes per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="megabytesPerSecondOfRead")]
		public System.Nullable<System.Double> MegabytesPerSecondOfRead { get; set; }
		
		/// <summary>
		/// Disk throughput in MegaBytes per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="megabytesPerSecondOfWrite")]
		public System.Nullable<System.Double> MegabytesPerSecondOfWrite { get; set; }
		
		/// <summary>
		/// Estimated aggregate storage cost for a 31-day month for this disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyStorageCost")]
		public System.Nullable<System.Double> MonthlyStorageCost { get; set; }
		
		/// <summary>
		/// Name of the assessed disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of read operations per second for the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfReadOperationsPerSecond")]
		public System.Nullable<System.Double> NumberOfReadOperationsPerSecond { get; set; }
		
		/// <summary>
		/// Number of read and write operations per second for the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfWriteOperationsPerSecond")]
		public System.Nullable<System.Double> NumberOfWriteOperationsPerSecond { get; set; }
		
		/// <summary>
		/// Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedDiskSize")]
		public System.Nullable<AssessedDiskRecommendedDiskSize> RecommendedDiskSize { get; set; }
		
		/// <summary>
		/// Storage type selected for this disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedDiskType")]
		public System.Nullable<AssessedDiskRecommendedDiskType> RecommendedDiskType { get; set; }
		
		/// <summary>
		/// Whether this disk is suitable for Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitability")]
		public System.Nullable<AssessedDiskSuitability> Suitability { get; set; }
		
		/// <summary>
		/// If disk is suitable to be migrate but some conditions/checks were not considered while calculating suitability, this explains the details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitabilityDetail")]
		public System.Nullable<AssessedDiskSuitabilityDetail> SuitabilityDetail { get; set; }
		
		/// <summary>
		/// If disk is not suitable to be migrated, this explains the reasons and mitigation steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitabilityExplanation")]
		public System.Nullable<AssessedDiskSuitabilityExplanation> SuitabilityExplanation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedDiskRecommendedDiskSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S6 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S15 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S20 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S30 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S40 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S50 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P4 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P6 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P10 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P20 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P30 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P40 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P50 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S60 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S70 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_S80 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P60 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P70 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_P80 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E10 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E15 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E20 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E40 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E50 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E60 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E70 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E80 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E4 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD_E6 = 33,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedDiskRecommendedDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardSSD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardOrPremium = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedDiskSuitability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSuitable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suitable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConditionallySuitable = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadinessUnknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedDiskSuitabilityDetail
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfReadOperationsPerSecondMissing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfWriteOperationsPerSecondMissing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegabytesPerSecondOfReadMissing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegabytesPerSecondOfWriteMissing = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskGigabytesConsumedMissing = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskGigabytesProvisionedMissing = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfReadOperationsPerSecondOutOfRange = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfWriteOperationsPerSecondOutOfRange = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegabytesPerSecondOfReadOutOfRange = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegabytesPerSecondOfWriteOutOfRange = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskGigabytesConsumedOutOfRange = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskGigabytesProvisionedOutOfRange = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedDiskSuitabilityExplanation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotApplicable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSizeGreaterThanSupported = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoSuitableDiskSizeForIops = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoSuitableDiskSizeForThroughput = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoDiskSizeFoundInSelectedLocation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoDiskSizeFoundForSelectedRedundancy = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalErrorOccurredForDiskEvaluation = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoEaPriceFoundForDiskSize = 8,
	}
	
	/// <summary>
	/// A machine evaluated as part of an assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessedMachine
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Path reference to this assessed machine. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of an assessed machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AssessedMachineProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments/assessedMachines].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of an assessed machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessedMachineProperties
	{
		
		/// <summary>
		/// Boot type of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootType")]
		public System.Nullable<AssessedMachinePropertiesBootType> BootType { get; set; }
		
		/// <summary>
		/// Confidence rating of assessed machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidenceRatingInPercentage")]
		public System.Nullable<System.Double> ConfidenceRatingInPercentage { get; set; }
		
		/// <summary>
		/// Time when this machine was created. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		/// <summary>
		/// ARM ID of the discovered machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datacenterMachineArmId")]
		public string DatacenterMachineArmId { get; set; }
		
		/// <summary>
		/// ARM ID of the discovered datacenter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datacenterManagementServerArmId")]
		public string DatacenterManagementServerArmId { get; set; }
		
		/// <summary>
		/// Name of the server hosting the datacenter management solution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datacenterManagementServerName")]
		public string DatacenterManagementServerName { get; set; }
		
		/// <summary>
		/// Description of the machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public System.Collections.Generic.Dictionary<string, AssessedDisk> Disks { get; set; }
		
		/// <summary>
		/// User readable name of the machine as defined by the user in their private datacenter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Memory in Megabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="megabytesOfMemory")]
		public System.Nullable<System.Double> MegabytesOfMemory { get; set; }
		
		/// <summary>
		/// Megabytes of memory in the Recommended Azure VM Size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="megabytesOfMemoryForRecommendedSize")]
		public System.Nullable<System.Double> MegabytesOfMemoryForRecommendedSize { get; set; }
		
		/// <summary>
		/// Monthly network cost estimate for the network adapters that are attached to this machine as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyBandwidthCost")]
		public System.Nullable<System.Double> MonthlyBandwidthCost { get; set; }
		
		/// <summary>
		/// Compute Cost for a 31-day month, if the machine is migrated to Azure with the Recommended Size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyComputeCostForRecommendedSize")]
		public System.Nullable<System.Double> MonthlyComputeCostForRecommendedSize { get; set; }
		
		/// <summary>
		/// Monthly premium storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyPremiumStorageCost")]
		public System.Nullable<System.Double> MonthlyPremiumStorageCost { get; set; }
		
		/// <summary>
		/// Monthly standard SSD storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyStandardSSDStorageCost")]
		public System.Nullable<System.Double> MonthlyStandardSSDStorageCost { get; set; }
		
		/// <summary>
		/// Monthly storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyStorageCost")]
		public System.Nullable<System.Double> MonthlyStorageCost { get; set; }
		
		/// <summary>
		/// Dictionary of network adapters attached to the machine. Key is name of the adapter. Value is a network adapter object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAdapters")]
		public System.Collections.Generic.Dictionary<string, AssessedNetworkAdapter> NetworkAdapters { get; set; }
		
		/// <summary>
		/// Processor count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfCores")]
		public System.Nullable<System.Int32> NumberOfCores { get; set; }
		
		/// <summary>
		/// Number of CPU cores in the Recommended Azure VM Size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfCoresForRecommendedSize")]
		public System.Nullable<System.Int32> NumberOfCoresForRecommendedSize { get; set; }
		
		/// <summary>
		/// Operating System name of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemName")]
		public string OperatingSystemName { get; set; }
		
		/// <summary>
		/// Operating System type of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemType")]
		public string OperatingSystemType { get; set; }
		
		/// <summary>
		/// Operating System version of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemVersion")]
		public string OperatingSystemVersion { get; set; }
		
		/// <summary>
		/// Utilization percentage of the processor core as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentageCoresUtilization")]
		public System.Nullable<System.Double> PercentageCoresUtilization { get; set; }
		
		/// <summary>
		/// Utilization percentage of the memory as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentageMemoryUtilization")]
		public System.Nullable<System.Double> PercentageMemoryUtilization { get; set; }
		
		/// <summary>
		/// Recommended Azure size for this machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedSize")]
		public System.Nullable<AssessedMachinePropertiesRecommendedSize> RecommendedSize { get; set; }
		
		/// <summary>
		/// Whether machine is suitable for migration to Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitability")]
		public AssessedDiskSuitability Suitability { get; set; }
		
		/// <summary>
		/// If machine is not suitable for cloud, this explains the reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitabilityDetail")]
		public System.Nullable<AssessedMachinePropertiesSuitabilityDetail> SuitabilityDetail { get; set; }
		
		/// <summary>
		/// If machine is not ready to be migrated, this explains the reasons and mitigation steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitabilityExplanation")]
		public System.Nullable<AssessedMachinePropertiesSuitabilityExplanation> SuitabilityExplanation { get; set; }
		
		/// <summary>
		/// Time when this machine was last updated. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedMachinePropertiesBootType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIOS = 2,
	}
	
	/// <summary>
	/// A network adapter assessed for an assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessedNetworkAdapter
	{
		
		/// <summary>
		/// User friendly name of the assessed network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// List of IP Addresses on the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddresses")]
		public string[] IpAddresses { get; set; }
		
		/// <summary>
		/// MAC Address of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Adapter throughput for incoming traffic in MegaBytes per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="megabytesPerSecondReceived")]
		public System.Nullable<System.Double> MegabytesPerSecondReceived { get; set; }
		
		/// <summary>
		/// Adapter throughput for outgoing traffic in MegaBytes per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="megabytesPerSecondTransmitted")]
		public System.Nullable<System.Double> MegabytesPerSecondTransmitted { get; set; }
		
		/// <summary>
		/// Monthly cost estimate for network bandwidth used by this network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyBandwidthCosts")]
		public System.Nullable<System.Double> MonthlyBandwidthCosts { get; set; }
		
		/// <summary>
		/// Gigabytes transmitted through this adapter each month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="netGigabytesTransmittedPerMonth")]
		public System.Nullable<System.Double> NetGigabytesTransmittedPerMonth { get; set; }
		
		/// <summary>
		/// Whether this adapter is suitable for Azure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitability")]
		public AssessedDiskSuitability Suitability { get; set; }
		
		/// <summary>
		/// If network adapter is not suitable for cloud, this explains the reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitabilityDetail")]
		public System.Nullable<AssessedNetworkAdapterSuitabilityDetail> SuitabilityDetail { get; set; }
		
		/// <summary>
		/// If network adapter is suitable, this explains the reasons and mitigation steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suitabilityExplanation")]
		public System.Nullable<AssessedNetworkAdapterSuitabilityExplanation> SuitabilityExplanation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedNetworkAdapterSuitabilityDetail
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegabytesOfDataTransmittedMissing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MegabytesOfDataTransmittedOutOfRange = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedNetworkAdapterSuitabilityExplanation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotApplicable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalErrorOccurred = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedMachinePropertiesRecommendedSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic_A0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic_A1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic_A2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic_A3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic_A4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A0 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A2 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A3 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A5 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A6 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A7 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A8 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A9 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A10 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A11 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A1_v2 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A2_v2 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A4_v2 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A8_v2 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A2m_v2 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A4m_v2 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_A8m_v2 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D1 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D2 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D3 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D4 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D11 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D12 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D13 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D14 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D1_v2 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D2_v2 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D3_v2 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D4_v2 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D5_v2 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D11_v2 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D12_v2 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D13_v2 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D14_v2 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D15_v2 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS1 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS2 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS3 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS4 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS11 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS12 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS13 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS14 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS1_v2 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS2_v2 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS3_v2 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS4_v2 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS5_v2 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS11_v2 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS12_v2 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS13_v2 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS14_v2 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_DS15_v2 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F1 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F2 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F4 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F8 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F16 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F1s = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F2s = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F4s = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F8s = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F16s = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_G1 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_G2 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_G3 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_G4 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_G5 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_GS1 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_GS2 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_GS3 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_GS4 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_GS5 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_H8 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_H16 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_H8m = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_H16m = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_H16r = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_H16mr = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_L4s = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_L8s = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_L16s = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_L32s = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D2s_v3 = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D4s_v3 = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D8s_v3 = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D16s_v3 = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D32s_v3 = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D64s_v3 = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D2_v3 = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D4_v3 = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D8_v3 = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D16_v3 = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D32_v3 = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_D64_v3 = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F2s_v2 = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F4s_v2 = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F8s_v2 = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F16s_v2 = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F32s_v2 = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F64s_v2 = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_F72s_v2 = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E2_v3 = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E4_v3 = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E8_v3 = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E16_v3 = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E32_v3 = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E64_v3 = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E2s_v3 = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E4s_v3 = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E8s_v3 = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E16s_v3 = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E32s_v3 = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_E64s_v3 = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_M64s = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_M64ms = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_M128s = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_M128ms = 125,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedMachinePropertiesSuitabilityDetail
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecommendedSizeHasLessNetworkAdapters = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CannotReportComputeCost = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CannotReportStorageCost = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CannotReportBandwidthCosts = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PercentageOfCoresUtilizedMissing = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PercentageOfMemoryUtilizedMissing = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PercentageOfCoresUtilizedOutOfRange = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PercentageOfMemoryUtilizedOutOfRange = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessedMachinePropertiesSuitabilityExplanation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotApplicable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GuestOperatingSystemArchitectureNotSupported = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GuestOperatingSystemNotSupported = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BootTypeNotSupported = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MoreDisksThanSupported = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoSuitableVmSizeFound = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneOrMoreDisksNotSuitable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneOrMoreAdaptersNotSuitable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalErrorOccurredDuringComputeEvaluation = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalErrorOccurredDuringStorageEvaluation = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalErrorOccurredDuringNetworkEvaluation = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoVmSizeSupportsStoragePerformance = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoVmSizeSupportsNetworkPerformance = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoVmSizeForSelectedPricingTier = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoVmSizeForSelectedAzureLocation = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckRedHatLinuxVersion = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckOpenSuseLinuxVersion = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckWindowsServer2008R2Version = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckCentOsVersion = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDebianLinuxVersion = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckSuseLinuxVersion = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckOracleLinuxVersion = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckUbuntuLinuxVersion = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckCoreOsLinuxVersion = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WindowsServerVersionConditionallySupported = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoGuestOperatingSystemConditionallySupported = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WindowsClientVersionsConditionallySupported = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BootTypeUnknown = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GuestOperatingSystemUnknown = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WindowsServerVersionsSupportedWithCaveat = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WindowsOSNoLongerUnderMSSupport = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EndorsedWithConditionsLinuxDistributions = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnendorsedLinuxDistributions = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoVmSizeForStandardPricingTier = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoVmSizeForBasicPricingTier = 35,
	}
	
	/// <summary>
	/// List of assessed machines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessedMachineResultList
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of assessed machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AssessedMachine[] Value { get; set; }
	}
	
	/// <summary>
	/// An assessment created for a group in the Migration project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Assessment
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Path reference to this assessment. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessment/{assessmentName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Unique name of an assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of an assessment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AssessmentProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of an assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessmentProperties
	{
		
		/// <summary>
		/// Storage type selected for this disk.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureDiskType")]
		public AssessedDiskRecommendedDiskType AzureDiskType { get; set; }
		
		/// <summary>
		/// AHUB discount on windows virtual machines.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureHybridUseBenefit")]
		public AssessmentPropertiesAzureHybridUseBenefit AzureHybridUseBenefit { get; set; }
		
		/// <summary>
		/// Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureLocation")]
		public AssessmentPropertiesAzureLocation AzureLocation { get; set; }
		
		/// <summary>
		/// Offer code according to which cost estimation is done.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureOfferCode")]
		public AssessmentPropertiesAzureOfferCode AzureOfferCode { get; set; }
		
		/// <summary>
		/// Pricing tier for Size evaluation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azurePricingTier")]
		public AssessmentPropertiesAzurePricingTier AzurePricingTier { get; set; }
		
		/// <summary>
		/// Storage Redundancy type offered by Azure.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureStorageRedundancy")]
		public AssessmentPropertiesAzureStorageRedundancy AzureStorageRedundancy { get; set; }
		
		/// <summary>
		/// List of azure VM families.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureVmFamilies")]
		public string[] AzureVmFamilies { get; set; }
		
		/// <summary>
		/// Confidence rating percentage for assessment. Can be in the range [0, 100].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidenceRatingInPercentage")]
		public System.Nullable<System.Double> ConfidenceRatingInPercentage { get; set; }
		
		/// <summary>
		/// Time when this project was created. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		/// <summary>
		/// Currency to report prices in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public AssessmentPropertiesCurrency Currency { get; set; }
		
		/// <summary>
		/// Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="discountPercentage")]
		public double DiscountPercentage { get; set; }
		
		/// <summary>
		/// Enterprise agreement subscription arm id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eaSubscriptionId")]
		public string EaSubscriptionId { get; set; }
		
		/// <summary>
		/// Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyBandwidthCost")]
		public System.Nullable<System.Double> MonthlyBandwidthCost { get; set; }
		
		/// <summary>
		/// Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyComputeCost")]
		public System.Nullable<System.Double> MonthlyComputeCost { get; set; }
		
		/// <summary>
		/// Monthly premium storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyPremiumStorageCost")]
		public System.Nullable<System.Double> MonthlyPremiumStorageCost { get; set; }
		
		/// <summary>
		/// Monthly standard SSD storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyStandardSSDStorageCost")]
		public System.Nullable<System.Double> MonthlyStandardSSDStorageCost { get; set; }
		
		/// <summary>
		/// Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlyStorageCost")]
		public System.Nullable<System.Double> MonthlyStorageCost { get; set; }
		
		/// <summary>
		/// Number of assessed machines part of this assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfMachines")]
		public System.Nullable<System.Int32> NumberOfMachines { get; set; }
		
		/// <summary>
		/// Percentile of performance data used to recommend Azure size.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentile")]
		public AssessmentPropertiesPercentile Percentile { get; set; }
		
		/// <summary>
		/// End time to consider performance data for assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perfDataEndTime")]
		public System.Nullable<System.DateTimeOffset> PerfDataEndTime { get; set; }
		
		/// <summary>
		/// Start time to consider performance data for assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perfDataStartTime")]
		public System.Nullable<System.DateTimeOffset> PerfDataStartTime { get; set; }
		
		/// <summary>
		/// Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pricesTimestamp")]
		public System.Nullable<System.DateTimeOffset> PricesTimestamp { get; set; }
		
		/// <summary>
		/// Azure reserved instance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reservedInstance")]
		public AssessmentPropertiesReservedInstance ReservedInstance { get; set; }
		
		/// <summary>
		/// Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scalingFactor")]
		public double ScalingFactor { get; set; }
		
		/// <summary>
		/// Assessment sizing criterion.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sizingCriterion")]
		public AssessmentPropertiesSizingCriterion SizingCriterion { get; set; }
		
		/// <summary>
		/// User configurable setting that describes the status of the assessment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public AssessmentPropertiesStage Stage { get; set; }
		
		/// <summary>
		/// Whether the assessment has been created and is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AssessmentPropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// Time range of performance data used to recommend a size.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeRange")]
		public AssessmentPropertiesTimeRange TimeRange { get; set; }
		
		/// <summary>
		/// Time when this project was last updated. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vmUptime")]
		public VmUptime VmUptime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesAzureHybridUseBenefit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		No = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesAzureLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EastAsia = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoutheastAsia = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AustraliaEast = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AustraliaSoutheast = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BrazilSouth = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CanadaCentral = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CanadaEast = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WestEurope = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NorthEurope = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CentralIndia = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SouthIndia = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WestIndia = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JapanEast = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JapanWest = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KoreaCentral = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KoreaSouth = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UkWest = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UkSouth = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NorthCentralUs = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EastUs = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WestUs2 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SouthCentralUs = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CentralUs = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EastUs2 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WestUs = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WestCentralUs = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GermanyCentral = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GermanyNortheast = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChinaNorth = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChinaEast = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USGovArizona = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USGovTexas = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USGovIowa = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USGovVirginia = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USDoDCentral = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USDoDEast = 36,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesAzureOfferCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0003P = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0044P = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0059P = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0060P = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0062P = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0063P = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0064P = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0029P = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0022P = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0023P = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0148P = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0025P = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0036P = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0120P = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0121P = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0122P = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0123P = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0124P = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0125P = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0126P = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0127P = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0128P = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0129P = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0130P = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0111P = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0144P = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZR0149P = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0044P = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0059P = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0060P = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0063P = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0120P = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0121P = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0125P = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSMCAZR0128P = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZRDE0003P = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZRDE0044P = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSAZRUSGOV0003P = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EA = 39,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesAzurePricingTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesAzureStorageRedundancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocallyRedundant = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZoneRedundant = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GeoRedundant = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadAccessGeoRedundant = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesCurrency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DKK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KRW = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOK = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUB = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZAR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEK = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBP = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HKD = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRL = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWD = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHF = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARS = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUD = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNY = 25,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesPercentile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percentile50 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percentile90 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percentile95 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percentile99 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesReservedInstance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI1Year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI3Year = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesSizingCriterion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PerformanceBased = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AsOnPremises = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnderReview = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OutOfSync = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OutDated = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AssessmentPropertiesTimeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VmUptime
	{
		
		/// <summary>
		/// Number of days in a month for VM uptime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysPerMonth")]
		public string DaysPerMonth { get; set; }
		
		/// <summary>
		/// Number of hours per day for VM uptime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursPerDay")]
		public string HoursPerDay { get; set; }
	}
	
	/// <summary>
	/// Assessment options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessmentOptions
	{
		
		/// <summary>
		/// Unique identifier of an assessment options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Unique name of an assessment options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Assessment options properties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AssessmentOptionsProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Assessment options properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessmentOptionsProperties
	{
		
		/// <summary>
		/// List of supported currencies for reserved instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedInstanceSupportedCurrencies")]
		public string[] ReservedInstanceSupportedCurrencies { get; set; }
		
		/// <summary>
		/// List of supported Azure regions for reserved instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedInstanceSupportedLocations")]
		public string[] ReservedInstanceSupportedLocations { get; set; }
		
		/// <summary>
		/// List of supported Azure offer codes for reserved instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedInstanceSupportedOffers")]
		public string[] ReservedInstanceSupportedOffers { get; set; }
		
		/// <summary>
		/// List of supported VM Families.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedInstanceVmFamilies")]
		public string[] ReservedInstanceVmFamilies { get; set; }
		
		/// <summary>
		/// Dictionary of VM families grouped by vm family name describing the targeted azure locations of VM family and the category of the family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmFamilies")]
		public VmFamily[] VmFamilies { get; set; }
	}
	
	/// <summary>
	/// VM family name, the list of targeted azure locations and the category of the family.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VmFamily
	{
		
		/// <summary>
		/// Category of the VM family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string[] Category { get; set; }
		
		/// <summary>
		/// Name of the VM family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// List of Azure regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLocations")]
		public string[] TargetLocations { get; set; }
	}
	
	/// <summary>
	/// List of API operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessmentOptionsResultList
	{
		
		/// <summary>
		/// List of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AssessmentOptions[] Value { get; set; }
	}
	
	/// <summary>
	/// List of assessments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AssessmentResultList
	{
		
		/// <summary>
		/// List of assessments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Assessment[] Value { get; set; }
	}
	
	/// <summary>
	/// An error response from the Azure Migrate service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the Azure Migrate service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the Azure Migrate service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CollectorAgentProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastHeartbeatUtc")]
		public System.Nullable<System.DateTimeOffset> LastHeartbeatUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spnDetails")]
		public CollectorBodyAgentSpnProperties SpnDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CollectorBodyAgentSpnProperties
	{
		
		/// <summary>
		/// Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Intended audience for the service principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audience")]
		public string Audience { get; set; }
		
		/// <summary>
		/// AAD Authority URL which was used to request the token for the service principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public string Authority { get; set; }
		
		/// <summary>
		/// Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CollectorProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentProperties")]
		public CollectorAgentProperties AgentProperties { get; set; }
		
		/// <summary>
		/// Time when this collector was created. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public string CreatedTimestamp { get; set; }
		
		/// <summary>
		/// The ARM id of the discovery service site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discoverySiteId")]
		public string DiscoverySiteId { get; set; }
		
		/// <summary>
		/// Time when this collector was updated. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTimestamp")]
		public string UpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// A disk discovered on a machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Disk
	{
		
		/// <summary>
		/// User friendly name of the disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gigabytes of storage provisioned for this disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gigabytesAllocated")]
		public System.Nullable<System.Double> GigabytesAllocated { get; set; }
	}
	
	/// <summary>
	/// Download URL for assessment report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DownloadUrl
	{
		
		/// <summary>
		/// Hyperlink to download report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentReportUrl")]
		public string AssessmentReportUrl { get; set; }
		
		/// <summary>
		/// Expiry date of download url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
	}
	
	/// <summary>
	/// A group created in a Migration project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Group
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Path reference to this group. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of group resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GroupProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the object = [Microsoft.Migrate/assessmentProjects/groups].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of group resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupProperties
	{
		
		/// <summary>
		/// If the assessments are in running state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areAssessmentsRunning")]
		public System.Nullable<System.Boolean> AreAssessmentsRunning { get; set; }
		
		/// <summary>
		/// List of References to Assessments created on this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessments")]
		public string[] Assessments { get; set; }
		
		/// <summary>
		/// Time when this group was created. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		/// <summary>
		/// Whether the group has been created and is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupStatus")]
		public System.Nullable<GroupPropertiesGroupStatus> GroupStatus { get; set; }
		
		/// <summary>
		/// Number of machines part of this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineCount")]
		public System.Nullable<System.Int32> MachineCount { get; set; }
		
		/// <summary>
		/// Time when this group was last updated. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GroupPropertiesGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 4,
	}
	
	/// <summary>
	/// Body properties of group update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupBodyProperties
	{
		
		/// <summary>
		/// List of machine names that are part of this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machines")]
		public string[] Machines { get; set; }
		
		/// <summary>
		/// Whether to add or remove the machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<GroupBodyPropertiesOperationType> OperationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GroupBodyPropertiesOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Remove = 1,
	}
	
	/// <summary>
	/// List of groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GroupResultList
	{
		
		/// <summary>
		/// List of groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Group[] Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HyperVCollector
	{
		
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CollectorProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of Hyper-V collectors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class HyperVCollectorList
	{
		
		/// <summary>
		/// List of Hyper-V collectors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public HyperVCollector[] Value { get; set; }
	}
	
	/// <summary>
	/// A machine in a migration project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Machine
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Path reference to this machine. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the machine. It is a GUID which is unique identifier of machine in private data center. For user-readable name, we have a displayName property on this machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of a machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MachineProperties Properties { get; set; }
		
		/// <summary>
		/// Type of the object = [Microsoft.Migrate/assessmentProjects/machines].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of a machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineProperties
	{
		
		/// <summary>
		/// Boot type of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootType")]
		public AssessedMachinePropertiesBootType BootType { get; set; }
		
		/// <summary>
		/// Time when this machine was created. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		/// <summary>
		/// ARM ID of the data center as tracked by the Microsoft.OffAzure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datacenterManagementServerArmId")]
		public string DatacenterManagementServerArmId { get; set; }
		
		/// <summary>
		/// Name of the server hosting the datacenter management solution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datacenterManagementServerName")]
		public string DatacenterManagementServerName { get; set; }
		
		/// <summary>
		/// Description of the machine
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// ARM ID of the machine as tracked by the Microsoft.OffAzure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discoveryMachineArmId")]
		public string DiscoveryMachineArmId { get; set; }
		
		/// <summary>
		/// Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public System.Collections.Generic.Dictionary<string, Disk> Disks { get; set; }
		
		/// <summary>
		/// User readable name of the machine as defined by the user in their private datacenter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// List of references to the groups that the machine is member of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Memory in Megabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="megabytesOfMemory")]
		public System.Nullable<System.Double> MegabytesOfMemory { get; set; }
		
		/// <summary>
		/// Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAdapters")]
		public System.Collections.Generic.Dictionary<string, NetworkAdapter> NetworkAdapters { get; set; }
		
		/// <summary>
		/// Processor count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfCores")]
		public System.Nullable<System.Int32> NumberOfCores { get; set; }
		
		/// <summary>
		/// Operating System name of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemName")]
		public string OperatingSystemName { get; set; }
		
		/// <summary>
		/// Operating System type of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemType")]
		public string OperatingSystemType { get; set; }
		
		/// <summary>
		/// Operating System version of the machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemVersion")]
		public string OperatingSystemVersion { get; set; }
		
		/// <summary>
		/// Time when this machine was last updated. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// A network adapter discovered on a machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkAdapter
	{
		
		/// <summary>
		/// User friendly name of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// List of IP Addresses on the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddresses")]
		public string[] IpAddresses { get; set; }
		
		/// <summary>
		/// MAC Address of the network adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
	}
	
	/// <summary>
	/// List of machines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MachineResultList
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Machine[] Value { get; set; }
	}
	
	/// <summary>
	/// A REST API operation supported by the provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Displayable properties of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Name of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// Displayable properties of the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// Description of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Operation Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Provider of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource operated on by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// List of API operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResultList
	{
		
		/// <summary>
		/// List of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Azure Migrate Project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Project
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Path reference to this project /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Azure location in which project is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ProjectProperties Properties { get; set; }
		
		/// <summary>
		/// Tags provided by Azure Tagging service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
		
		/// <summary>
		/// Type of the object = [Microsoft.Migrate/assessmentProjects].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectProperties
	{
		
		/// <summary>
		/// Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentSolutionId")]
		public string AssessmentSolutionId { get; set; }
		
		/// <summary>
		/// Time when this project was created. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		/// <summary>
		/// The ARM id of service map workspace created by customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerWorkspaceId")]
		public string CustomerWorkspaceId { get; set; }
		
		/// <summary>
		/// Location of service map workspace created by customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerWorkspaceLocation")]
		public string CustomerWorkspaceLocation { get; set; }
		
		/// <summary>
		/// Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastAssessmentTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastAssessmentTimestamp { get; set; }
		
		/// <summary>
		/// Number of assessments created in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfAssessments")]
		public System.Nullable<System.Int32> NumberOfAssessments { get; set; }
		
		/// <summary>
		/// Number of groups created in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfGroups")]
		public System.Nullable<System.Int32> NumberOfGroups { get; set; }
		
		/// <summary>
		/// Number of machines in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfMachines")]
		public System.Nullable<System.Int32> NumberOfMachines { get; set; }
		
		/// <summary>
		/// Assessment project status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectStatus")]
		public System.Nullable<ProjectPropertiesProjectStatus> ProjectStatus { get; set; }
		
		/// <summary>
		/// Provisioning state of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<ProjectPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Endpoint at which the collector agent can call agent REST API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceEndpoint")]
		public string ServiceEndpoint { get; set; }
		
		/// <summary>
		/// Time when this project was last updated. Date-Time represented in ISO-8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectPropertiesProjectStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ProjectPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 5,
	}
	
	/// <summary>
	/// List of projects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProjectResultList
	{
		
		/// <summary>
		/// List of projects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Project[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of group update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UpdateGroupBody
	{
		
		/// <summary>
		/// For optimistic concurrency control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		/// <summary>
		/// Body properties of group update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public GroupBodyProperties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VMwareCollector
	{
		
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public CollectorProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of VMware collectors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VMwareCollectorList
	{
		
		/// <summary>
		/// List of VMware collectors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public VMwareCollector[] Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get list of operations supported in the API.
		/// Get a list of REST API supported by Microsoft.Migrate provider.
		/// Operations_List providers/Microsoft.Migrate/operations
		/// </summary>
		/// <returns>OK. Returns list of operations.</returns>
		public async Task<OperationResultList> Operations_ListAsync()
		{
			var requestUri = "providers/Microsoft.Migrate/operations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all projects.
		/// Get all the projects in the subscription.
		/// Projects_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.Migrate/assessmentProjects
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK.</returns>
		public async Task<ProjectResultList> Projects_ListBySubscriptionAsync(string subscriptionId, Projects_ListBySubscriptionApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Migrate/assessmentProjects&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProjectResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all assessments created in the project.
		/// Get all assessments created in the project.
		/// 
		/// Returns a json array of objects of type 'assessment' as specified in Models section.
		/// 
		/// Assessments_ListByProject subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns list of Assessment objects.</returns>
		public async Task<AssessmentResultList> Assessments_ListByProjectAsync(string subscriptionId, string resourceGroupName, string projectName, Assessments_ListByProjectApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/assessments&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssessmentResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all groups
		/// Get all groups created in the project. Returns a json array of objects of type 'group' as specified in the Models section.
		/// Groups_ListByProject subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns list of groups.</returns>
		public async Task<GroupResultList> Groups_ListByProjectAsync(string subscriptionId, string resourceGroupName, string projectName, Groups_ListByProjectApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GroupResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific group.
		/// Get information related to a specific group in the project. Returns a json object of type 'group' as specified in the models section.
		/// Groups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns the group with the specified name.</returns>
		public async Task<Group> Groups_GetAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, Groups_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Group>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new group with specified settings.
		/// Create a new group by sending a json object of type 'group' as given in Models section as part of the Request Body. The group name in a project is unique.
		/// 
		/// This operation is Idempotent.
		/// 
		/// Groups_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <param name="requestBody">New or Updated Group object.</param>
		/// <returns>OK. Existing group updated.</returns>
		public async Task<Group> Groups_CreateAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, Groups_CreateApi_version api_version, Group requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Group>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete the group
		/// Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.
		/// 
		/// A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it.
		/// 
		/// Groups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Deleted the group.</returns>
		public async Task Groups_DeleteAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, Groups_DeleteApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all assessments created for the specified group.
		/// Get all assessments created for the specified group.
		/// 
		/// Returns a json array of objects of type 'assessment' as specified in Models section.
		/// 
		/// Assessments_ListByGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns list of Assessment objects.</returns>
		public async Task<AssessmentResultList> Assessments_ListByGroupAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, Assessments_ListByGroupApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/assessments&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssessmentResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an assessment.
		/// Get an existing assessment with the specified name. Returns a json object of type 'assessment' as specified in Models section.
		/// Assessments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="assessmentName">Unique name of an assessment within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns Assessment object.</returns>
		public async Task<Assessment> Assessments_GetAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, Assessments_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/assessments/"+ (assessmentName==null? "" : System.Uri.EscapeDataString(assessmentName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Assessment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or Update assessment.
		/// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
		/// 
		/// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a "InProgress" state. This will be indicated by the field 'computationState' on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field 'computationState' will be updated to 'Ready', and then other PUT or DELETE operations can happen on the assessment.
		/// 
		/// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
		/// 
		/// Assessments_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="assessmentName">Unique name of an assessment within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <param name="requestBody">New or Updated Assessment object.</param>
		/// <returns>OK. Existing assessment updated.</returns>
		public async Task<Assessment> Assessments_CreateAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, Assessments_CreateApi_version api_version, Assessment requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/assessments/"+ (assessmentName==null? "" : System.Uri.EscapeDataString(assessmentName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Assessment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an assessment from the project.
		/// Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.
		/// 
		/// When an assessment is under computation, as indicated by the 'computationState' field, it cannot be deleted. Any such attempt will return a 400 - Bad Request.
		/// 
		/// Assessments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="assessmentName">Unique name of an assessment within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Deleted the assessment.</returns>
		public async Task Assessments_DeleteAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, Assessments_DeleteApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/assessments/"+ (assessmentName==null? "" : System.Uri.EscapeDataString(assessmentName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get assessed machines for assessment.
		/// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type 'assessedMachine' as specified in the Models section.
		/// 
		/// Whenever an assessment is created or updated, it goes under computation. During this phase, the 'status' field of Assessment object reports 'Computing'.
		/// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
		/// 
		/// AssessedMachines_ListByAssessment subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="assessmentName">Unique name of an assessment within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns list of machines with their assessment data in the assessment.</returns>
		public async Task<AssessedMachineResultList> AssessedMachines_ListByAssessmentAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, AssessedMachines_ListByAssessmentApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/assessments/"+ (assessmentName==null? "" : System.Uri.EscapeDataString(assessmentName))+"/assessedMachines&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssessedMachineResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an assessed machine.
		/// Get an assessed machine with its size & cost estimate that was evaluated in the specified assessment.
		/// AssessedMachines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="assessmentName">Unique name of an assessment within a project.</param>
		/// <param name="assessedMachineName">Unique name of an assessed machine evaluated as part of an assessment.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns a specific assessed machine.</returns>
		public async Task<AssessedMachine> AssessedMachines_GetAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, string assessedMachineName, AssessedMachines_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/assessments/"+ (assessmentName==null? "" : System.Uri.EscapeDataString(assessmentName))+"/assessedMachines/"+ (assessedMachineName==null? "" : System.Uri.EscapeDataString(assessedMachineName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssessedMachine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get download URL for the assessment report.
		/// Get the URL for downloading the assessment in a report format.
		/// Assessments_GetReportDownloadUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="assessmentName">Unique name of an assessment within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK.</returns>
		public async Task<DownloadUrl> Assessments_GetReportDownloadUrlAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, Assessments_GetReportDownloadUrlApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/assessments/"+ (assessmentName==null? "" : System.Uri.EscapeDataString(assessmentName))+"/downloadUrl&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DownloadUrl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update machines in group.
		/// Update machines in group by adding or removing machines.
		/// Groups_UpdateMachines subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/updateMachines
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="groupName">Unique name of a group within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <param name="requestBody">Machines list to be added or removed from group.</param>
		/// <returns>OK. Existing group updated.</returns>
		public async Task<Group> Groups_UpdateMachinesAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, Groups_UpdateMachinesApi_version api_version, UpdateGroupBody requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/groups/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/updateMachines&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Group>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of Hyper-V collector.
		/// Get a list of Hyper-V collector.
		/// HyperVCollectors_ListByProject subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns list of Hyper-V collectors.</returns>
		public async Task<HyperVCollectorList> HyperVCollectors_ListByProjectAsync(string subscriptionId, string resourceGroupName, string projectName, HyperVCollectors_ListByProjectApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/hypervcollectors&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HyperVCollectorList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a Hyper-V collector.
		/// Get a Hyper-V collector.
		/// HyperVCollectors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="hyperVCollectorName">Unique name of a Hyper-V collector within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns the specific Hyper-V collector.</returns>
		public async Task<HyperVCollector> HyperVCollectors_GetAsync(string subscriptionId, string resourceGroupName, string projectName, string hyperVCollectorName, HyperVCollectors_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/hypervcollectors/"+ (hyperVCollectorName==null? "" : System.Uri.EscapeDataString(hyperVCollectorName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HyperVCollector>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or Update Hyper-V collector.
		/// Create or Update Hyper-V collector
		/// HyperVCollectors_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="hyperVCollectorName">Unique name of a Hyper-V collector within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <param name="requestBody">New or Updated Hyper-V collector.</param>
		/// <returns>OK. Existing Hyper-V collector.</returns>
		public async Task<HyperVCollector> HyperVCollectors_CreateAsync(string subscriptionId, string resourceGroupName, string projectName, string hyperVCollectorName, HyperVCollectors_CreateApi_version api_version, HyperVCollector requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/hypervcollectors/"+ (hyperVCollectorName==null? "" : System.Uri.EscapeDataString(hyperVCollectorName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HyperVCollector>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes Hyper-V collector from the project.
		/// Delete a Hyper-V collector from the project.
		/// HyperVCollectors_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="hyperVCollectorName">Unique name of a Hyper-V collector within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Deleted the Hyper-V collector.</returns>
		public async Task HyperVCollectors_DeleteAsync(string subscriptionId, string resourceGroupName, string projectName, string hyperVCollectorName, HyperVCollectors_DeleteApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/hypervcollectors/"+ (hyperVCollectorName==null? "" : System.Uri.EscapeDataString(hyperVCollectorName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all machines in the project
		/// Get data of all the machines available in the project. Returns a json array of objects of type 'machine' defined in Models section.
		/// Machines_ListByProject subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns list of all machine objects.</returns>
		public async Task<MachineResultList> Machines_ListByProjectAsync(string subscriptionId, string resourceGroupName, string projectName, Machines_ListByProjectApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/machines&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MachineResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a specific machine.
		/// Get the machine with the specified name. Returns a json object of type 'machine' defined in Models section.
		/// Machines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="machineName">Unique name of a machine in private datacenter.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns the machine with the specified name.</returns>
		public async Task<Machine> Machines_GetAsync(string subscriptionId, string resourceGroupName, string projectName, string machineName, Machines_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/machines/"+ (machineName==null? "" : System.Uri.EscapeDataString(machineName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Machine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a list of VMware collector.
		/// Get a list of VMware collector.
		/// VMwareCollectors_ListByProject subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns list of VMware collectors.</returns>
		public async Task<VMwareCollectorList> VMwareCollectors_ListByProjectAsync(string subscriptionId, string resourceGroupName, string projectName, VMwareCollectors_ListByProjectApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/vmwarecollectors&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VMwareCollectorList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a VMware collector.
		/// Get a VMware collector.
		/// VMwareCollectors_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="vmWareCollectorName">Unique name of a VMware collector within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Returns the specific VMware collector.</returns>
		public async Task<VMwareCollector> VMwareCollectors_GetAsync(string subscriptionId, string resourceGroupName, string projectName, string vmWareCollectorName, VMwareCollectors_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/vmwarecollectors/"+ (vmWareCollectorName==null? "" : System.Uri.EscapeDataString(vmWareCollectorName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VMwareCollector>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or Update VMware collector.
		/// Create or Update VMware collector
		/// VMwareCollectors_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="vmWareCollectorName">Unique name of a VMware collector within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <param name="requestBody">New or Updated VMware collector.</param>
		/// <returns>OK. Existing VMware collector.</returns>
		public async Task<VMwareCollector> VMwareCollectors_CreateAsync(string subscriptionId, string resourceGroupName, string projectName, string vmWareCollectorName, VMwareCollectors_CreateApi_version api_version, VMwareCollector requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/vmwarecollectors/"+ (vmWareCollectorName==null? "" : System.Uri.EscapeDataString(vmWareCollectorName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<VMwareCollector>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes VMware collector from the project.
		/// Delete a VMware collector from the project.
		/// VMwareCollectors_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="vmWareCollectorName">Unique name of a VMware collector within a project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Deleted the VMware collector.</returns>
		public async Task VMwareCollectors_DeleteAsync(string subscriptionId, string resourceGroupName, string projectName, string vmWareCollectorName, VMwareCollectors_DeleteApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/vmwarecollectors/"+ (vmWareCollectorName==null? "" : System.Uri.EscapeDataString(vmWareCollectorName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all projects.
		/// Get all the projects in the resource group.
		/// Projects_List subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK.</returns>
		public async Task<ProjectResultList> Projects_ListAsync(string subscriptionId, string resourceGroupName, Projects_ListApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ProjectResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the specified project.
		/// Get the project with the specified name.
		/// Projects_Get subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK.</returns>
		public async Task<Project> Projects_GetAsync(string subscriptionId, string resourceGroupName, string projectName, Projects_GetApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Project>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update project.
		/// Create a project with specified name. If a project already exists, update it.
		/// Projects_Create subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <param name="requestBody">New or Updated project object.</param>
		/// <returns>OK. Existing project updated.</returns>
		public async Task<Project> Projects_CreateAsync(string subscriptionId, string resourceGroupName, string projectName, Projects_CreateApi_version api_version, Project requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Project>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete the project
		/// Delete the project. Deleting non-existent project is a no-operation.
		/// Projects_Delete subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK. Deleted the group.</returns>
		public async Task Projects_DeleteAsync(string subscriptionId, string resourceGroupName, string projectName, Projects_DeleteApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update project.
		/// Update a project with specified name. Supports partial updates, for example only tags can be provided.
		/// Projects_Update subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <param name="requestBody">Updated project object.</param>
		/// <returns>OK. Existing project updated.</returns>
		public async Task<Project> Projects_UpdateAsync(string subscriptionId, string resourceGroupName, string projectName, Projects_UpdateApi_version api_version, Project requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Project>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets list of all available options for the properties of an assessment on a project.
		/// Gets list of all available options for the properties of an assessment on a project.
		/// Project_AssessmentOptionsList subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK.</returns>
		public async Task<AssessmentOptionsResultList> Project_AssessmentOptionsListAsync(string subscriptionId, string resourceGroupName, string projectName, Project_AssessmentOptionsListApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/assessmentOptions&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssessmentOptionsResultList>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all available options for the properties of an assessment on a project.
		/// Get all available options for the properties of an assessment on a project.
		/// Project_AssessmentOptions subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription Id in which project was created.</param>
		/// <param name="resourceGroupName">Name of the Azure Resource Group that project is part of.</param>
		/// <param name="projectName">Name of the Azure Migrate project.</param>
		/// <param name="assessmentOptionsName">Name of the assessment options. The only name accepted in default.</param>
		/// <param name="api_version">Standard request header. Used by service to identify API version used by client.</param>
		/// <returns>OK.</returns>
		public async Task<AssessmentOptions> Project_AssessmentOptionsAsync(string subscriptionId, string resourceGroupName, string projectName, string assessmentOptionsName, Project_AssessmentOptionsApi_version api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourcegroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Migrate/assessmentProjects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/assessmentOptions/"+ (assessmentOptionsName==null? "" : System.Uri.EscapeDataString(assessmentOptionsName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssessmentOptions>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Projects_ListBySubscriptionApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Assessments_ListByProjectApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Groups_ListByProjectApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Groups_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Groups_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Groups_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Assessments_ListByGroupApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Assessments_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Assessments_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Assessments_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum AssessedMachines_ListByAssessmentApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum AssessedMachines_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Assessments_GetReportDownloadUrlApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Groups_UpdateMachinesApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum HyperVCollectors_ListByProjectApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum HyperVCollectors_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum HyperVCollectors_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum HyperVCollectors_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Machines_ListByProjectApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Machines_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum VMwareCollectors_ListByProjectApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum VMwareCollectors_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum VMwareCollectors_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum VMwareCollectors_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Projects_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Projects_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Projects_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Projects_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Projects_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Project_AssessmentOptionsListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
	
	public enum Project_AssessmentOptionsApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019-10-01")]
		_2019Minus10Minus01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
