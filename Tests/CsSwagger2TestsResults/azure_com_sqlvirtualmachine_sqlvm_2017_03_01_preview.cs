//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Additional SQL Server feature settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AdditionalFeaturesServerConfigurations
	{
		
		/// <summary>
		/// Enable or disable R services (SQL 2016 onwards).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRServicesEnabled")]
		public System.Nullable<System.Boolean> IsRServicesEnabled { get; set; }
	}
	
	/// <summary>
	/// Configure backups for databases in your SQL virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoBackupSettings
	{
		
		/// <summary>
		/// Backup schedule type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupScheduleType")]
		public System.Nullable<AutoBackupSettingsBackupScheduleType> BackupScheduleType { get; set; }
		
		/// <summary>
		/// Include or exclude system databases from auto backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupSystemDbs")]
		public System.Nullable<System.Boolean> BackupSystemDbs { get; set; }
		
		/// <summary>
		/// Enable or disable autobackup on SQL virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		/// <summary>
		/// Enable or disable encryption for backup on SQL virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableEncryption")]
		public System.Nullable<System.Boolean> EnableEncryption { get; set; }
		
		/// <summary>
		/// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullBackupFrequency")]
		public System.Nullable<AutoBackupSettingsFullBackupFrequency> FullBackupFrequency { get; set; }
		
		/// <summary>
		/// Start time of a given day during which full backups can take place. 0-23 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullBackupStartTime")]
		public System.Nullable<System.Int32> FullBackupStartTime { get; set; }
		
		/// <summary>
		/// Duration of the time window of a given day during which full backups can take place. 1-23 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullBackupWindowHours")]
		public System.Nullable<System.Int32> FullBackupWindowHours { get; set; }
		
		/// <summary>
		/// Frequency of log backups. 5-60 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logBackupFrequency")]
		public System.Nullable<System.Int32> LogBackupFrequency { get; set; }
		
		/// <summary>
		/// Password for encryption on backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Retention period of backup: 1-30 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
		
		/// <summary>
		/// Storage account key where backup will be taken to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccessKey")]
		public string StorageAccessKey { get; set; }
		
		/// <summary>
		/// Storage account url where backup will be taken to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountUrl")]
		public string StorageAccountUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoBackupSettingsBackupScheduleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoBackupSettingsFullBackupFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 1,
	}
	
	/// <summary>
	/// Set a patching window during which Windows and SQL patches will be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AutoPatchingSettings
	{
		
		/// <summary>
		/// Day of week to apply the patch on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public System.Nullable<AutoPatchingSettingsDayOfWeek> DayOfWeek { get; set; }
		
		/// <summary>
		/// Enable or disable autopatching on SQL virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		/// <summary>
		/// Duration of patching.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindowDuration")]
		public System.Nullable<System.Int32> MaintenanceWindowDuration { get; set; }
		
		/// <summary>
		/// Hour of the day when patching is initiated. Local VM time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindowStartingHour")]
		public System.Nullable<System.Int32> MaintenanceWindowStartingHour { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AutoPatchingSettingsDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tuesday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wednesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thursday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Friday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Saturday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sunday = 6,
	}
	
	/// <summary>
	/// A SQL Server availability group listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailabilityGroupListener
	{
		
		/// <summary>
		/// The properties of an availability group listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public AvailabilityGroupListenerProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of an availability group listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailabilityGroupListenerProperties
	{
		
		/// <summary>
		/// Name of the availability group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityGroupName")]
		public string AvailabilityGroupName { get; set; }
		
		/// <summary>
		/// Create a default availability group if it does not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDefaultAvailabilityGroupIfNotExist")]
		public System.Nullable<System.Boolean> CreateDefaultAvailabilityGroupIfNotExist { get; set; }
		
		/// <summary>
		/// List of load balancer configurations for an availability group listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancerConfigurations")]
		public LoadBalancerConfiguration[] LoadBalancerConfigurations { get; set; }
		
		/// <summary>
		/// Listener port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Provisioning state to track the async operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// A load balancer configuration for an availability group listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class LoadBalancerConfiguration
	{
		
		/// <summary>
		/// Resource id of the load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancerResourceId")]
		public string LoadBalancerResourceId { get; set; }
		
		/// <summary>
		/// A private IP address bound to the availability group listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIpAddress")]
		public PrivateIPAddress PrivateIpAddress { get; set; }
		
		/// <summary>
		/// Probe port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probePort")]
		public System.Nullable<System.Int32> ProbePort { get; set; }
		
		/// <summary>
		/// Resource id of the public IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpAddressResourceId")]
		public string PublicIpAddressResourceId { get; set; }
		
		/// <summary>
		/// List of the SQL virtual machine instance resource id's that are enrolled into the availability group listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlVirtualMachineInstances")]
		public string[] SqlVirtualMachineInstances { get; set; }
	}
	
	/// <summary>
	/// A private IP address bound to the availability group listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateIPAddress
	{
		
		/// <summary>
		/// Private IP address bound to the availability group listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Subnet used to include private IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetResourceId")]
		public string SubnetResourceId { get; set; }
	}
	
	/// <summary>
	/// A list of availability group listeners.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AvailabilityGroupListenerListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public AvailabilityGroupListener[] Value { get; set; }
	}
	
	/// <summary>
	/// Configure your SQL virtual machine to be able to connect to the Azure Key Vault service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultCredentialSettings
	{
		
		/// <summary>
		/// Azure Key Vault url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureKeyVaultUrl")]
		public string AzureKeyVaultUrl { get; set; }
		
		/// <summary>
		/// Credential name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialName")]
		public string CredentialName { get; set; }
		
		/// <summary>
		/// Enable or disable key vault credential setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		/// <summary>
		/// Service principal name to access key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicePrincipalName")]
		public string ServicePrincipalName { get; set; }
		
		/// <summary>
		/// Service principal name secret to access key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicePrincipalSecret")]
		public string ServicePrincipalSecret { get; set; }
	}
	
	/// <summary>
	/// SQL REST API operation definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Display metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// The name of the operation being performed on this particular object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The intended executor of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public System.Nullable<OperationOrigin> Origin { get; set; }
		
		/// <summary>
		/// Additional descriptions for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
	}
	
	/// <summary>
	/// Display metadata associated with the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// The localized friendly description for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The localized friendly name for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// The localized friendly form of the resource provider name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The localized friendly form of the resource type related to this action/operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum OperationOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 1,
	}
	
	/// <summary>
	/// Result of the request to list SQL operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// ARM proxy resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
	}
	
	/// <summary>
	/// ARM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Azure Active Directory identity configuration for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceIdentity
	{
		
		/// <summary>
		/// The Azure Active Directory principal id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The Azure Active Directory tenant id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ResourceIdentityType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ResourceIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// Set disk storage settings for SQL Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SQLStorageSettings
	{
		
		/// <summary>
		/// SQL Server default file path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFilePath")]
		public string DefaultFilePath { get; set; }
		
		/// <summary>
		/// Logical Unit Numbers for the disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="luns")]
		public int[] Luns { get; set; }
	}
	
	/// <summary>
	/// Set the connectivity, storage and workload settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServerConfigurationsManagementSettings
	{
		
		/// <summary>
		/// Additional SQL Server feature settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalFeaturesServerConfigurations")]
		public AdditionalFeaturesServerConfigurations AdditionalFeaturesServerConfigurations { get; set; }
		
		/// <summary>
		/// Set the access level and network port settings for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlConnectivityUpdateSettings")]
		public SqlConnectivityUpdateSettings SqlConnectivityUpdateSettings { get; set; }
		
		/// <summary>
		/// Set disk storage settings for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlStorageUpdateSettings")]
		public SqlStorageUpdateSettings SqlStorageUpdateSettings { get; set; }
		
		/// <summary>
		/// Set workload type to optimize storage for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlWorkloadTypeUpdateSettings")]
		public SqlWorkloadTypeUpdateSettings SqlWorkloadTypeUpdateSettings { get; set; }
	}
	
	/// <summary>
	/// Set the access level and network port settings for SQL Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlConnectivityUpdateSettings
	{
		
		/// <summary>
		/// SQL Server connectivity option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectivityType")]
		public System.Nullable<SqlConnectivityUpdateSettingsConnectivityType> ConnectivityType { get; set; }
		
		/// <summary>
		/// SQL Server port.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// SQL Server sysadmin login password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlAuthUpdatePassword")]
		public string SqlAuthUpdatePassword { get; set; }
		
		/// <summary>
		/// SQL Server sysadmin login to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlAuthUpdateUserName")]
		public string SqlAuthUpdateUserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlConnectivityUpdateSettingsConnectivityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 2,
	}
	
	/// <summary>
	/// Set disk storage settings for SQL Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlStorageUpdateSettings
	{
		
		/// <summary>
		/// Disk configuration to apply to SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskConfigurationType")]
		public System.Nullable<SqlStorageUpdateSettingsDiskConfigurationType> DiskConfigurationType { get; set; }
		
		/// <summary>
		/// Virtual machine disk count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskCount")]
		public System.Nullable<System.Int32> DiskCount { get; set; }
		
		/// <summary>
		/// Device id of the first disk to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startingDeviceId")]
		public System.Nullable<System.Int32> StartingDeviceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlStorageUpdateSettingsDiskConfigurationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 2,
	}
	
	/// <summary>
	/// Set workload type to optimize storage for SQL Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlWorkloadTypeUpdateSettings
	{
		
		/// <summary>
		/// SQL Server workload type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlWorkloadType")]
		public System.Nullable<SqlWorkloadTypeUpdateSettingsSqlWorkloadType> SqlWorkloadType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlWorkloadTypeUpdateSettingsSqlWorkloadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OLTP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DW = 2,
	}
	
	/// <summary>
	/// A SQL virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachine
	{
		
		/// <summary>
		/// Azure Active Directory identity configuration for a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public ResourceIdentity Identity { get; set; }
		
		/// <summary>
		/// The SQL virtual machine properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlVirtualMachineProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The SQL virtual machine properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachineProperties
	{
		
		/// <summary>
		/// Configure backups for databases in your SQL virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoBackupSettings")]
		public AutoBackupSettings AutoBackupSettings { get; set; }
		
		/// <summary>
		/// Set a patching window during which Windows and SQL patches will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPatchingSettings")]
		public AutoPatchingSettings AutoPatchingSettings { get; set; }
		
		/// <summary>
		/// Configure your SQL virtual machine to be able to connect to the Azure Key Vault service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyVaultCredentialSettings")]
		public KeyVaultCredentialSettings KeyVaultCredentialSettings { get; set; }
		
		/// <summary>
		/// Provisioning state to track the async operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Set the connectivity, storage and workload settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverConfigurationsManagementSettings")]
		public ServerConfigurationsManagementSettings ServerConfigurationsManagementSettings { get; set; }
		
		/// <summary>
		/// SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlImageOffer")]
		public string SqlImageOffer { get; set; }
		
		/// <summary>
		/// SQL Server edition type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlImageSku")]
		public System.Nullable<SqlVirtualMachinePropertiesSqlImageSku> SqlImageSku { get; set; }
		
		/// <summary>
		/// SQL Server Management type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlManagement")]
		public System.Nullable<SqlVirtualMachinePropertiesSqlManagement> SqlManagement { get; set; }
		
		/// <summary>
		/// SQL Server license type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlServerLicenseType")]
		public System.Nullable<SqlVirtualMachinePropertiesSqlServerLicenseType> SqlServerLicenseType { get; set; }
		
		/// <summary>
		/// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlVirtualMachineGroupResourceId")]
		public string SqlVirtualMachineGroupResourceId { get; set; }
		
		/// <summary>
		/// Storage Configurations for SQL Data, Log and TempDb.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageConfigurationSettings")]
		public StorageConfigurationSettings StorageConfigurationSettings { get; set; }
		
		/// <summary>
		/// ARM Resource id of underlying virtual machine created from SQL marketplace image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachineResourceId")]
		public string VirtualMachineResourceId { get; set; }
		
		/// <summary>
		/// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wsfcDomainCredentials")]
		public WsfcDomainCredentials WsfcDomainCredentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlVirtualMachinePropertiesSqlImageSku
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Developer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Express = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enterprise = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Web = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlVirtualMachinePropertiesSqlManagement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LightWeight = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoAgent = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlVirtualMachinePropertiesSqlServerLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AHUB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DR = 2,
	}
	
	/// <summary>
	/// Storage Configurations for SQL Data, Log and TempDb.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageConfigurationSettings
	{
		
		/// <summary>
		/// Disk configuration to apply to SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskConfigurationType")]
		public SqlStorageUpdateSettingsDiskConfigurationType DiskConfigurationType { get; set; }
		
		/// <summary>
		/// Set disk storage settings for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlDataSettings")]
		public SQLStorageSettings SqlDataSettings { get; set; }
		
		/// <summary>
		/// Set disk storage settings for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlLogSettings")]
		public SQLStorageSettings SqlLogSettings { get; set; }
		
		/// <summary>
		/// Set disk storage settings for SQL Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlTempDbSettings")]
		public SQLStorageSettings SqlTempDbSettings { get; set; }
		
		/// <summary>
		/// Storage workload type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageWorkloadType")]
		public SqlWorkloadTypeUpdateSettingsSqlWorkloadType StorageWorkloadType { get; set; }
	}
	
	/// <summary>
	/// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WsfcDomainCredentials
	{
		
		/// <summary>
		/// Cluster bootstrap account password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterBootstrapAccountPassword")]
		public string ClusterBootstrapAccountPassword { get; set; }
		
		/// <summary>
		/// Cluster operator account password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterOperatorAccountPassword")]
		public string ClusterOperatorAccountPassword { get; set; }
		
		/// <summary>
		/// SQL service account password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlServiceAccountPassword")]
		public string SqlServiceAccountPassword { get; set; }
	}
	
	/// <summary>
	/// A SQL virtual machine group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachineGroup
	{
		
		/// <summary>
		/// The properties of a SQL virtual machine group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SqlVirtualMachineGroupProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a SQL virtual machine group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachineGroupProperties
	{
		
		/// <summary>
		/// Cluster type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterConfiguration")]
		public System.Nullable<SqlVirtualMachineGroupPropertiesClusterConfiguration> ClusterConfiguration { get; set; }
		
		/// <summary>
		/// Type of cluster manager: Windows Server Failover Cluster (WSFC), implied by the scale type of the group and the OS type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterManagerType")]
		public System.Nullable<SqlVirtualMachineGroupPropertiesClusterManagerType> ClusterManagerType { get; set; }
		
		/// <summary>
		/// Provisioning state to track the async operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public string ProvisioningState { get; set; }
		
		/// <summary>
		/// Scale type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleType")]
		public System.Nullable<SqlVirtualMachineGroupPropertiesScaleType> ScaleType { get; set; }
		
		/// <summary>
		/// SQL image offer. Examples may include SQL2016-WS2016, SQL2017-WS2016.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlImageOffer")]
		public string SqlImageOffer { get; set; }
		
		/// <summary>
		/// SQL image sku.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlImageSku")]
		public System.Nullable<SqlVirtualMachineGroupPropertiesSqlImageSku> SqlImageSku { get; set; }
		
		/// <summary>
		/// Active Directory account details to operate Windows Server Failover Cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wsfcDomainProfile")]
		public WsfcDomainProfile WsfcDomainProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlVirtualMachineGroupPropertiesClusterConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domainful = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlVirtualMachineGroupPropertiesClusterManagerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WSFC = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlVirtualMachineGroupPropertiesScaleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HA = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SqlVirtualMachineGroupPropertiesSqlImageSku
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Developer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enterprise = 1,
	}
	
	/// <summary>
	/// Active Directory account details to operate Windows Server Failover Cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class WsfcDomainProfile
	{
		
		/// <summary>
		/// Account name used for creating cluster (at minimum needs permissions to 'Create Computer Objects' in domain).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterBootstrapAccount")]
		public string ClusterBootstrapAccount { get; set; }
		
		/// <summary>
		/// Account name used for operating cluster i.e. will be part of administrators group on all the participating virtual machines in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterOperatorAccount")]
		public string ClusterOperatorAccount { get; set; }
		
		/// <summary>
		/// Fully qualified name of the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainFqdn")]
		public string DomainFqdn { get; set; }
		
		/// <summary>
		/// Optional path for fileshare witness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileShareWitnessPath")]
		public string FileShareWitnessPath { get; set; }
		
		/// <summary>
		/// Organizational Unit path in which the nodes and cluster will be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ouPath")]
		public string OuPath { get; set; }
		
		/// <summary>
		/// Account name under which SQL service will run on all participating SQL virtual machines in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlServiceAccount")]
		public string SqlServiceAccount { get; set; }
		
		/// <summary>
		/// Primary key of the witness storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountPrimaryKey")]
		public string StorageAccountPrimaryKey { get; set; }
		
		/// <summary>
		/// Fully qualified ARM resource id of the witness storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAccountUrl")]
		public string StorageAccountUrl { get; set; }
	}
	
	/// <summary>
	/// A list of SQL virtual machine groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachineGroupListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlVirtualMachineGroup[] Value { get; set; }
	}
	
	/// <summary>
	/// An update to a SQL virtual machine group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachineGroupUpdate
	{
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// A list of SQL virtual machines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachineListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SqlVirtualMachine[] Value { get; set; }
	}
	
	/// <summary>
	/// An update to a SQL virtual machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SqlVirtualMachineUpdate
	{
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// ARM tracked top level resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource
	{
		
		/// <summary>
		/// Resource location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available SQL Rest API operations.
		/// Operations_List providers/Microsoft.SqlVirtualMachine/operations
		/// </summary>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved operations.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.SqlVirtualMachine/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all SQL virtual machine groups in a subscription.
		/// SqlVirtualMachineGroups_List subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups
		/// </summary>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all SQL virtual machine groups in the subscription.</returns>
		public async Task<SqlVirtualMachineGroupListResult> SqlVirtualMachineGroups_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineGroupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all SQL virtual machines in a subscription.
		/// SqlVirtualMachines_List subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines
		/// </summary>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all SQL virtual machines in the subscription.</returns>
		public async Task<SqlVirtualMachineListResult> SqlVirtualMachines_ListAsync(string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all SQL virtual machine groups in a resource group.
		/// SqlVirtualMachineGroups_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all SQL virtual machine groups in the resource group.</returns>
		public async Task<SqlVirtualMachineGroupListResult> SqlVirtualMachineGroups_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineGroupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a SQL virtual machine group.
		/// SqlVirtualMachineGroups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved the SQL virtual machine group.</returns>
		public async Task<SqlVirtualMachineGroup> SqlVirtualMachineGroups_GetAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a SQL virtual machine group.
		/// SqlVirtualMachineGroups_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The SQL virtual machine group.</param>
		/// <returns>Successfully updated the SQL virtual machine group.</returns>
		public async Task<SqlVirtualMachineGroup> SqlVirtualMachineGroups_CreateOrUpdateAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string subscriptionId, string api_version, SqlVirtualMachineGroup requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a SQL virtual machine group.
		/// SqlVirtualMachineGroups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully deleted the SQL virtual machine group.</returns>
		public async Task SqlVirtualMachineGroups_DeleteAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates SQL virtual machine group tags.
		/// SqlVirtualMachineGroups_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The SQL virtual machine group.</param>
		/// <returns>Successfully updated the SQL virtual machine group.</returns>
		public async Task<SqlVirtualMachineGroup> SqlVirtualMachineGroups_UpdateAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string subscriptionId, string api_version, SqlVirtualMachineGroupUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all availability group listeners in a SQL virtual machine group.
		/// AvailabilityGroupListeners_ListByGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all availability group listeners in a SQL virtual machine group.</returns>
		public async Task<AvailabilityGroupListenerListResult> AvailabilityGroupListeners_ListByGroupAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"/availabilityGroupListeners&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AvailabilityGroupListenerListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets an availability group listener.
		/// AvailabilityGroupListeners_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="availabilityGroupListenerName">Name of the availability group listener.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved the availability group listener.</returns>
		public async Task<AvailabilityGroupListener> AvailabilityGroupListeners_GetAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string availabilityGroupListenerName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"/availabilityGroupListeners/"+ (availabilityGroupListenerName==null? "" : System.Uri.EscapeDataString(availabilityGroupListenerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AvailabilityGroupListener>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an availability group listener.
		/// AvailabilityGroupListeners_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="availabilityGroupListenerName">Name of the availability group listener.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The availability group listener.</param>
		/// <returns>Successfully updated the availability group listener.</returns>
		public async Task<AvailabilityGroupListener> AvailabilityGroupListeners_CreateOrUpdateAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string availabilityGroupListenerName, string subscriptionId, string api_version, AvailabilityGroupListener requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"/availabilityGroupListeners/"+ (availabilityGroupListenerName==null? "" : System.Uri.EscapeDataString(availabilityGroupListenerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AvailabilityGroupListener>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an availability group listener.
		/// AvailabilityGroupListeners_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="availabilityGroupListenerName">Name of the availability group listener.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully deleted the availability group listener.</returns>
		public async Task AvailabilityGroupListeners_DeleteAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string availabilityGroupListenerName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"/availabilityGroupListeners/"+ (availabilityGroupListenerName==null? "" : System.Uri.EscapeDataString(availabilityGroupListenerName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the list of sql virtual machines in a SQL virtual machine group.
		/// SqlVirtualMachines_ListBySqlVmGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/sqlVirtualMachines
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineGroupName">Name of the SQL virtual machine group.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of sql virtual machines in a SQL virtual machine group.</returns>
		public async Task<SqlVirtualMachineListResult> SqlVirtualMachines_ListBySqlVmGroupAsync(string resourceGroupName, string sqlVirtualMachineGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/"+ (sqlVirtualMachineGroupName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineGroupName))+"/sqlVirtualMachines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all SQL virtual machines in a resource group.
		/// SqlVirtualMachines_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved all SQL virtual machines in the resource group.</returns>
		public async Task<SqlVirtualMachineListResult> SqlVirtualMachines_ListByResourceGroupAsync(string resourceGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachineListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a SQL virtual machine.
		/// SqlVirtualMachines_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineName">Name of the SQL virtual machine.</param>
		/// <param name="expand">The child resources to include in the response.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully retrieved the SQL virtual machine.</returns>
		public async Task<SqlVirtualMachine> SqlVirtualMachines_GetAsync(string resourceGroupName, string sqlVirtualMachineName, string expand, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/"+ (sqlVirtualMachineName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineName))+"&$expand=" + (expand==null? "" : System.Uri.EscapeDataString(expand))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a SQL virtual machine.
		/// SqlVirtualMachines_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineName">Name of the SQL virtual machine.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The SQL virtual machine.</param>
		/// <returns>Successfully updated the SQL virtual machine.</returns>
		public async Task<SqlVirtualMachine> SqlVirtualMachines_CreateOrUpdateAsync(string resourceGroupName, string sqlVirtualMachineName, string subscriptionId, string api_version, SqlVirtualMachine requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/"+ (sqlVirtualMachineName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a SQL virtual machine.
		/// SqlVirtualMachines_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineName">Name of the SQL virtual machine.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <returns>Successfully deleted the SQL virtual machine.</returns>
		public async Task SqlVirtualMachines_DeleteAsync(string resourceGroupName, string sqlVirtualMachineName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/"+ (sqlVirtualMachineName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a SQL virtual machine.
		/// SqlVirtualMachines_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}
		/// </summary>
		/// <param name="resourceGroupName">Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="sqlVirtualMachineName">Name of the SQL virtual machine.</param>
		/// <param name="subscriptionId">Subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">API version to use for the request.</param>
		/// <param name="requestBody">The SQL virtual machine.</param>
		/// <returns>Successfully updated the SQL virtual machine.</returns>
		public async Task<SqlVirtualMachine> SqlVirtualMachines_UpdateAsync(string resourceGroupName, string sqlVirtualMachineName, string subscriptionId, string api_version, SqlVirtualMachineUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/"+ (sqlVirtualMachineName==null? "" : System.Uri.EscapeDataString(sqlVirtualMachineName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SqlVirtualMachine>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
