//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// API key payload which is exposed in the request/response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiKey
	{
		
		/// <summary>
		/// Gets or sets the API key name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Gets or sets the API key value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Collection of the API key payload which is exposed in the response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ApiKeyCollection
	{
		
		/// <summary>
		/// Gets or sets the collection of API key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public ApiKey[] Keys { get; set; }
	}
	
	/// <summary>
	/// Payload of the blockchain member which is exposed in the request/response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlockchainMember
	{
		
		/// <summary>
		/// Payload of the blockchain member properties for a blockchain member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlockchainMemberProperties Properties { get; set; }
		
		/// <summary>
		/// Blockchain member Sku in payload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// Payload of the blockchain member properties for a blockchain member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlockchainMemberProperties
	{
		
		/// <summary>
		/// Gets or sets the consortium for the blockchain member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consortium")]
		public string Consortium { get; set; }
		
		/// <summary>
		/// Gets the managed consortium management account address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consortiumManagementAccountAddress")]
		public string ConsortiumManagementAccountAddress { get; set; }
		
		/// <summary>
		/// Sets the managed consortium management account password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consortiumManagementAccountPassword")]
		public string ConsortiumManagementAccountPassword { get; set; }
		
		/// <summary>
		/// Gets the display name of the member in the consortium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consortiumMemberDisplayName")]
		public string ConsortiumMemberDisplayName { get; set; }
		
		/// <summary>
		/// Gets the role of the member in the consortium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consortiumRole")]
		public string ConsortiumRole { get; set; }
		
		/// <summary>
		/// Gets the dns endpoint of the blockchain member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public string Dns { get; set; }
		
		/// <summary>
		/// Gets or sets firewall rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public FirewallRule[] FirewallRules { get; set; }
		
		/// <summary>
		/// Sets the basic auth password of the blockchain member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Gets or sets the blockchain protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<BlockchainMemberPropertiesProtocol> Protocol { get; set; }
		
		/// <summary>
		/// Gets or sets the blockchain member provision state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<BlockchainMemberPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Gets the public key of the blockchain member (default transaction node).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		/// <summary>
		/// Gets the Ethereum root contract address of the blockchain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootContractAddress")]
		public string RootContractAddress { get; set; }
		
		/// <summary>
		/// Gets the auth user name of the blockchain member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// Payload of the blockchain member nodes Sku for a blockchain member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validatorNodesSku")]
		public BlockchainMemberNodesSku ValidatorNodesSku { get; set; }
	}
	
	/// <summary>
	/// Ip range for firewall rules
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FirewallRule
	{
		
		/// <summary>
		/// Gets or sets the end IP address of the firewall rule range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIpAddress")]
		public string EndIpAddress { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the firewall rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Gets or sets the start IP address of the firewall rule range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIpAddress")]
		public string StartIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BlockchainMemberPropertiesProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parity = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quorum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Corda = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BlockchainMemberPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stale = 5,
	}
	
	/// <summary>
	/// Payload of the blockchain member nodes Sku for a blockchain member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlockchainMemberNodesSku
	{
		
		/// <summary>
		/// Gets or sets the nodes capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public System.Nullable<System.Int32> Capacity { get; set; }
	}
	
	/// <summary>
	/// Blockchain member Sku in payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sku
	{
		
		/// <summary>
		/// Gets or sets Sku name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets Sku tier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// Collection of the blockchain member payload which is exposed in the request/response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlockchainMemberCollection
	{
		
		/// <summary>
		/// Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets the collection of blockchain members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BlockchainMember[] Value { get; set; }
	}
	
	/// <summary>
	/// Update the payload of the blockchain member properties for a blockchain member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlockchainMemberPropertiesUpdate
	{
		
		/// <summary>
		/// Sets the managed consortium management account password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consortiumManagementAccountPassword")]
		public string ConsortiumManagementAccountPassword { get; set; }
	}
	
	/// <summary>
	/// Update the payload of the blockchain member which is exposed in the request/response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlockchainMemberUpdate
	{
		
		/// <summary>
		/// Update the payload of the blockchain member properties for a blockchain member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public BlockchainMemberPropertiesUpdate Properties { get; set; }
		
		/// <summary>
		/// Tags of the service which is a list of key value pairs that describes the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Consortium payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Consortium
	{
		
		/// <summary>
		/// Gets or sets the blockchain member name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the protocol for the consortium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public BlockchainMemberPropertiesProtocol Protocol { get; set; }
	}
	
	/// <summary>
	/// Collection of the consortium payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsortiumCollection
	{
		
		/// <summary>
		/// Gets or sets the collection of consortiums.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Consortium[] Value { get; set; }
	}
	
	/// <summary>
	/// Consortium approval
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsortiumMember
	{
		
		/// <summary>
		/// Gets the consortium member modified date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		/// <summary>
		/// Gets the consortium member display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Gets the consortium member join date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joinDate")]
		public System.Nullable<System.DateTimeOffset> JoinDate { get; set; }
		
		/// <summary>
		/// Gets the consortium member name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets the consortium member role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Gets the consortium member status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Gets the consortium member subscription id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Collection of consortium payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ConsortiumMemberCollection
	{
		
		/// <summary>
		/// Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets the collection of consortiums.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ConsortiumMember[] Value { get; set; }
	}
	
	/// <summary>
	/// Name availability payload which is exposed in the response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameAvailability
	{
		
		/// <summary>
		/// Gets or sets the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Gets or sets the value indicating whether the name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Gets or sets the name availability reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<NameAvailabilityReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NameAvailabilityReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 2,
	}
	
	/// <summary>
	/// Name availability request payload which is exposed in the request of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NameAvailabilityRequest
	{
		
		/// <summary>
		/// Gets or sets the name to check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the type of the resource to check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Operation result payload which is exposed in the response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationResult
	{
		
		/// <summary>
		/// Gets or sets the operation end time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Gets or sets the operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the operation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// The core properties of the resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified resource Id of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the service - e.g. "Microsoft.Blockchain"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Operation payload which is exposed in the response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperation
	{
		
		/// <summary>
		/// Operation display payload which is exposed in the response of the resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public ResourceProviderOperationDisplay Display { get; set; }
		
		/// <summary>
		/// Gets or sets a value indicating whether the operation is a data action or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDataAction")]
		public System.Nullable<System.Boolean> IsDataAction { get; set; }
		
		/// <summary>
		/// Gets or sets the operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the origin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
	}
	
	/// <summary>
	/// Operation display payload which is exposed in the response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperationDisplay
	{
		
		/// <summary>
		/// Gets or sets the description of the provider for display purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the operation for display purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the provider for display purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the resource type for display purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Collection of operation payload which is exposed in the response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceProviderOperationCollection
	{
		
		/// <summary>
		/// Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets the collection of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceProviderOperation[] Value { get; set; }
	}
	
	/// <summary>
	/// Resource type Sku.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceTypeSku
	{
		
		/// <summary>
		/// Gets or sets the resource type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Gets or sets the Skus
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public SkuSetting[] Skus { get; set; }
	}
	
	/// <summary>
	/// Sku Setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuSetting
	{
		
		/// <summary>
		/// Gets or sets the locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// Gets or sets the Sku name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the required features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredFeatures")]
		public string[] RequiredFeatures { get; set; }
		
		/// <summary>
		/// Gets or sets the Sku tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
	}
	
	/// <summary>
	/// Collection of the resource type Sku.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ResourceTypeSkuCollection
	{
		
		/// <summary>
		/// Gets or sets the collection of resource type Sku.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ResourceTypeSku[] Value { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a top level resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TrackedResource
	{
		
		/// <summary>
		/// The GEO location of the blockchain service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Tags of the service which is a list of key value pairs that describes the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// Payload of the transaction node which is the request/response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransactionNode
	{
		
		/// <summary>
		/// Gets or sets the transaction node location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Payload of transaction node properties payload in the transaction node payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TransactionNodeProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Payload of transaction node properties payload in the transaction node payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransactionNodeProperties
	{
		
		/// <summary>
		/// Gets or sets the transaction node dns endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public string Dns { get; set; }
		
		/// <summary>
		/// Gets or sets the firewall rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public FirewallRule[] FirewallRules { get; set; }
		
		/// <summary>
		/// Sets the transaction node dns endpoint basic auth password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Gets or sets the blockchain member provision state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<TransactionNodePropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Gets or sets the transaction node public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		/// <summary>
		/// Gets or sets the transaction node dns endpoint basic auth user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TransactionNodePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSpecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// Collection of transaction node payload which is exposed in the request/response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransactionNodeCollection
	{
		
		/// <summary>
		/// Gets or sets the URL, that the client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets or sets the collection of transaction nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TransactionNode[] Value { get; set; }
	}
	
	/// <summary>
	/// Update the payload of the transaction node properties in the transaction node payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransactionNodePropertiesUpdate
	{
		
		/// <summary>
		/// Gets or sets the firewall rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallRules")]
		public FirewallRule[] FirewallRules { get; set; }
		
		/// <summary>
		/// Sets the transaction node dns endpoint basic auth password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Update the transaction node payload which is exposed in the request/response of the resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TransactionNodeUpdate
	{
		
		/// <summary>
		/// Update the payload of the transaction node properties in the transaction node payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TransactionNodePropertiesUpdate Properties { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the available operations of Microsoft.Blockchain resource provider.
		/// Operations_List providers/Microsoft.Blockchain/operations
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <returns>Success</returns>
		public async Task<ResourceProviderOperationCollection> Operations_ListAsync(Operations_ListApi_version api_version)
		{
			var requestUri = "providers/Microsoft.Blockchain/operations?api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ResourceProviderOperationCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the blockchain members for a subscription.
		/// BlockchainMembers_ListAll subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/blockchainMembers
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <returns>Success</returns>
		public async Task<BlockchainMemberCollection> BlockchainMembers_ListAllAsync(BlockchainMembers_ListAllApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Blockchain/blockchainMembers?api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BlockchainMemberCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Async operation result.
		/// BlockchainMemberOperationResults_Get subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/locations/{locationName}/blockchainMemberOperationResults/{operationId}
		/// </summary>
		/// <param name="locationName">Location name.</param>
		/// <param name="operationId">Operation Id.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <returns>Success</returns>
		public async Task<OperationResult> BlockchainMemberOperationResults_GetAsync(string locationName, string operationId, BlockchainMemberOperationResults_GetApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Blockchain/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/blockchainMemberOperationResults/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// To check whether a resource name is available.
		/// Locations_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/locations/{locationName}/checkNameAvailability
		/// </summary>
		/// <param name="locationName">Location Name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="requestBody">Name availability request payload.</param>
		/// <returns>Success</returns>
		public async Task<NameAvailability> Locations_CheckNameAvailabilityAsync(string locationName, Locations_CheckNameAvailabilityApi_version api_version, string subscriptionId, NameAvailabilityRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Blockchain/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/checkNameAvailability&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<NameAvailability>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the available consortiums for a subscription.
		/// Locations_ListConsortiums subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/locations/{locationName}/listConsortiums
		/// </summary>
		/// <param name="locationName">Location Name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <returns>Success</returns>
		public async Task<ConsortiumCollection> Locations_ListConsortiumsAsync(string locationName, Locations_ListConsortiumsApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Blockchain/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/listConsortiums&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConsortiumCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the Skus of the resource type.
		/// Skus_List subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/skus
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <returns>Success</returns>
		public async Task<ResourceTypeSkuCollection> Skus_ListAsync(Skus_ListApi_version api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Blockchain/skus?api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ResourceTypeSkuCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the blockchain members for a resource group.
		/// BlockchainMembers_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers
		/// </summary>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success</returns>
		public async Task<BlockchainMemberCollection> BlockchainMembers_ListAsync(BlockchainMembers_ListApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers?api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BlockchainMemberCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get details about a blockchain member.
		/// BlockchainMembers_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success</returns>
		public async Task<BlockchainMember> BlockchainMembers_GetAsync(string blockchainMemberName, BlockchainMembers_GetApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BlockchainMember>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a blockchain member.
		/// BlockchainMembers_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">Payload to create a blockchain member.</param>
		/// <returns>Success</returns>
		public async Task<BlockchainMember> BlockchainMembers_CreateAsync(string blockchainMemberName, BlockchainMembers_CreateApi_version api_version, string subscriptionId, string resourceGroupName, BlockchainMember requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BlockchainMember>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a blockchain member.
		/// BlockchainMembers_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		public async Task BlockchainMembers_DeleteAsync(string blockchainMemberName, BlockchainMembers_DeleteApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a blockchain member.
		/// BlockchainMembers_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">Payload to update the blockchain member.</param>
		/// <returns>Success</returns>
		public async Task<BlockchainMember> BlockchainMembers_UpdateAsync(string blockchainMemberName, BlockchainMembers_UpdateApi_version api_version, string subscriptionId, string resourceGroupName, BlockchainMemberUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BlockchainMember>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the consortium members for a blockchain member.
		/// BlockchainMembers_ListConsortiumMembers subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/consortiumMembers
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success</returns>
		public async Task<ConsortiumMemberCollection> BlockchainMembers_ListConsortiumMembersAsync(string blockchainMemberName, BlockchainMembers_ListConsortiumMembersApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/consortiumMembers&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ConsortiumMemberCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the API keys for a blockchain member.
		/// BlockchainMembers_ListApiKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/listApiKeys
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success</returns>
		public async Task<ApiKeyCollection> BlockchainMembers_ListApiKeysAsync(string blockchainMemberName, BlockchainMembers_ListApiKeysApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/listApiKeys&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiKeyCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerate the API keys for a blockchain member.
		/// BlockchainMembers_ListRegenerateApiKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/regenerateApiKeys
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">api key to be regenerate</param>
		/// <returns>Success</returns>
		public async Task<ApiKeyCollection> BlockchainMembers_ListRegenerateApiKeysAsync(string blockchainMemberName, BlockchainMembers_ListRegenerateApiKeysApi_version api_version, string subscriptionId, string resourceGroupName, ApiKey requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/regenerateApiKeys&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiKeyCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the transaction nodes for a blockchain member.
		/// TransactionNodes_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success</returns>
		public async Task<TransactionNodeCollection> TransactionNodes_ListAsync(string blockchainMemberName, TransactionNodes_ListApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/transactionNodes&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransactionNodeCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the details of the transaction node.
		/// TransactionNodes_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="transactionNodeName">Transaction node name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success</returns>
		public async Task<TransactionNode> TransactionNodes_GetAsync(string blockchainMemberName, string transactionNodeName, TransactionNodes_GetApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/transactionNodes/"+ (transactionNodeName==null? "" : System.Uri.EscapeDataString(transactionNodeName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransactionNode>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create or update the transaction node.
		/// TransactionNodes_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="transactionNodeName">Transaction node name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">Payload to create the transaction node.</param>
		/// <returns>Success</returns>
		public async Task<TransactionNode> TransactionNodes_CreateAsync(string blockchainMemberName, string transactionNodeName, TransactionNodes_CreateApi_version api_version, string subscriptionId, string resourceGroupName, TransactionNode requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/transactionNodes/"+ (transactionNodeName==null? "" : System.Uri.EscapeDataString(transactionNodeName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransactionNode>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete the transaction node.
		/// TransactionNodes_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="transactionNodeName">Transaction node name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		public async Task TransactionNodes_DeleteAsync(string blockchainMemberName, string transactionNodeName, TransactionNodes_DeleteApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/transactionNodes/"+ (transactionNodeName==null? "" : System.Uri.EscapeDataString(transactionNodeName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the transaction node.
		/// TransactionNodes_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="transactionNodeName">Transaction node name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">Payload to create the transaction node.</param>
		/// <returns>Success</returns>
		public async Task<TransactionNode> TransactionNodes_UpdateAsync(string blockchainMemberName, string transactionNodeName, TransactionNodes_UpdateApi_version api_version, string subscriptionId, string resourceGroupName, TransactionNodeUpdate requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/transactionNodes/"+ (transactionNodeName==null? "" : System.Uri.EscapeDataString(transactionNodeName))+"&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TransactionNode>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the API keys for the transaction node.
		/// TransactionNodes_ListApiKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/listApiKeys
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="transactionNodeName">Transaction node name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success</returns>
		public async Task<ApiKeyCollection> TransactionNodes_ListApiKeysAsync(string blockchainMemberName, string transactionNodeName, TransactionNodes_ListApiKeysApi_version api_version, string subscriptionId, string resourceGroupName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/transactionNodes/"+ (transactionNodeName==null? "" : System.Uri.EscapeDataString(transactionNodeName))+"/listApiKeys&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiKeyCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerate the API keys for the blockchain member.
		/// TransactionNodes_ListRegenerateApiKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/transactionNodes/{transactionNodeName}/regenerateApiKeys
		/// </summary>
		/// <param name="blockchainMemberName">Blockchain member name.</param>
		/// <param name="transactionNodeName">Transaction node name.</param>
		/// <param name="api_version">Client API Version.</param>
		/// <param name="subscriptionId">Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="requestBody">api key to be regenerated</param>
		/// <returns>Success</returns>
		public async Task<ApiKeyCollection> TransactionNodes_ListRegenerateApiKeysAsync(string blockchainMemberName, string transactionNodeName, TransactionNodes_ListRegenerateApiKeysApi_version api_version, string subscriptionId, string resourceGroupName, ApiKey requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Blockchain/blockchainMembers/"+ (blockchainMemberName==null? "" : System.Uri.EscapeDataString(blockchainMemberName))+"/transactionNodes/"+ (transactionNodeName==null? "" : System.Uri.EscapeDataString(transactionNodeName))+"/regenerateApiKeys&api-version=" + api_version;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiKeyCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Operations_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_ListAllApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMemberOperationResults_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum Locations_CheckNameAvailabilityApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum Locations_ListConsortiumsApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum Skus_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_ListConsortiumMembersApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_ListApiKeysApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum BlockchainMembers_ListRegenerateApiKeysApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum TransactionNodes_ListApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum TransactionNodes_GetApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum TransactionNodes_CreateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum TransactionNodes_DeleteApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum TransactionNodes_UpdateApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum TransactionNodes_ListApiKeysApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
	
	public enum TransactionNodes_ListRegenerateApiKeysApi_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018-06-01-preview")]
		_2018Minus06Minus01Minuspreview = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
