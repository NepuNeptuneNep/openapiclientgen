//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The parameters to list SAS credentials of a storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AccountSasParameters
	{
		
		/// <summary>
		/// The key to sign the account SAS token with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyToSign")]
		public string KeyToSign { get; set; }
		
		/// <summary>
		/// The time at which the shared access signature becomes invalid.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signedExpiry")]
		public System.DateTimeOffset SignedExpiry { get; set; }
		
		/// <summary>
		/// An IP address or a range of IP addresses from which to accept requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedIp")]
		public string SignedIp { get; set; }
		
		/// <summary>
		/// The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signedPermission")]
		public AccountSasParametersSignedPermission SignedPermission { get; set; }
		
		/// <summary>
		/// The protocol permitted for a request made with the account SAS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedProtocol")]
		public System.Nullable<AccountSasParametersSignedProtocol> SignedProtocol { get; set; }
		
		/// <summary>
		/// The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signedResourceTypes")]
		public AccountSasParametersSignedResourceTypes SignedResourceTypes { get; set; }
		
		/// <summary>
		/// The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signedServices")]
		public AccountSasParametersSignedServices SignedServices { get; set; }
		
		/// <summary>
		/// The time at which the SAS becomes valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedStart")]
		public System.Nullable<System.DateTimeOffset> SignedStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AccountSasParametersSignedPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		d = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		w = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		l = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		u = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AccountSasParametersSignedProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="https,http")]
		httpshttp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AccountSasParametersSignedResourceTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		o = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AccountSasParametersSignedServices
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		b = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		q = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		f = 3,
	}
	
	/// <summary>
	/// Settings properties for Active Directory (AD).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ActiveDirectoryProperties
	{
		
		/// <summary>
		/// Specifies the security identifier (SID) for Azure Storage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azureStorageSid")]
		public string AzureStorageSid { get; set; }
		
		/// <summary>
		/// Specifies the domain GUID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainGuid")]
		public string DomainGuid { get; set; }
		
		/// <summary>
		/// Specifies the primary domain that the AD DNS server is authoritative for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Specifies the security identifier (SID).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainSid")]
		public string DomainSid { get; set; }
		
		/// <summary>
		/// Specifies the Active Directory forest to get.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="forestName")]
		public string ForestName { get; set; }
		
		/// <summary>
		/// Specifies the NetBIOS domain name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="netBiosDomainName")]
		public string NetBiosDomainName { get; set; }
	}
	
	/// <summary>
	/// Settings for Azure Files identity based authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AzureFilesIdentityBasedAuthentication
	{
		
		/// <summary>
		/// Settings properties for Active Directory (AD).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeDirectoryProperties")]
		public ActiveDirectoryProperties ActiveDirectoryProperties { get; set; }
		
		/// <summary>
		/// Indicates the directory service used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="directoryServiceOptions")]
		public AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions DirectoryServiceOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AADDS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD = 2,
	}
	
	/// <summary>
	/// Blob restore parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobRestoreParameters
	{
		
		/// <summary>
		/// Blob ranges to restore.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blobRanges")]
		public BlobRestoreRange[] BlobRanges { get; set; }
		
		/// <summary>
		/// Restore blob to the specified time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeToRestore")]
		public System.DateTimeOffset TimeToRestore { get; set; }
	}
	
	/// <summary>
	/// Blob range
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobRestoreRange
	{
		
		/// <summary>
		/// Blob end range. Empty means account end.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endRange")]
		public string EndRange { get; set; }
		
		/// <summary>
		/// Blob start range. Empty means account start.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startRange")]
		public string StartRange { get; set; }
	}
	
	/// <summary>
	/// Blob restore status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BlobRestoreStatus
	{
		
		/// <summary>
		/// Failure reason when blob restore is failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Blob restore parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public BlobRestoreParameters Parameters { get; set; }
		
		/// <summary>
		/// Id for tracking blob restore request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restoreId")]
		public string RestoreId { get; set; }
		
		/// <summary>
		/// The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BlobRestoreStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BlobRestoreStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// The CheckNameAvailability operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CheckNameAvailabilityResult
	{
		
		/// <summary>
		/// Gets an error message explaining the Reason value in more detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameAvailable")]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CheckNameAvailabilityResultReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CheckNameAvailabilityResultReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountNameInvalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AlreadyExists = 1,
	}
	
	/// <summary>
	/// The custom domain assigned to this storage account. This can be set via Update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomDomain
	{
		
		/// <summary>
		/// Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useSubDomainName")]
		public System.Nullable<System.Boolean> UseSubDomainName { get; set; }
	}
	
	/// <summary>
	/// Object to define the number of days after creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DateAfterCreation
	{
		
		/// <summary>
		/// Value indicating the age in days after creation
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="daysAfterCreationGreaterThan")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double DaysAfterCreationGreaterThan { get; set; }
	}
	
	/// <summary>
	/// Object to define the number of days after last modification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DateAfterModification
	{
		
		/// <summary>
		/// Value indicating the age in days after last modification
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="daysAfterModificationGreaterThan")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double DaysAfterModificationGreaterThan { get; set; }
	}
	
	/// <summary>
	/// Dimension of blobs, possibly be blob type or access tier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Dimension
	{
		
		/// <summary>
		/// Display name of dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Display name of dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The encryption settings on the storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Encryption
	{
		
		/// <summary>
		/// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(EncryptionKeySource.Microsoft_Storage)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keySource")]
		public EncryptionKeySource KeySource { get; set; } = EncryptionKeySource.Microsoft_Storage;
		
		/// <summary>
		/// Properties of key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyvaultproperties")]
		public KeyVaultProperties Keyvaultproperties { get; set; }
		
		/// <summary>
		/// A list of services that support encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public EncryptionServices Services { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionKeySource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Storage")]
		Microsoft_Storage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Keyvault")]
		Microsoft_Keyvault = 1,
	}
	
	/// <summary>
	/// A service that allows server-side encryption to be used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionService
	{
		
		/// <summary>
		/// A boolean indicating whether or not the service encrypts the data as it is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public System.Nullable<EncryptionServiceKeyType> KeyType { get; set; }
		
		/// <summary>
		/// Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastEnabledTime")]
		public System.Nullable<System.DateTimeOffset> LastEnabledTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum EncryptionServiceKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Service = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Account = 1,
	}
	
	/// <summary>
	/// A list of services that support encryption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncryptionServices
	{
		
		/// <summary>
		/// A service that allows server-side encryption to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public EncryptionService Blob { get; set; }
		
		/// <summary>
		/// A service that allows server-side encryption to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public EncryptionService File { get; set; }
		
		/// <summary>
		/// A service that allows server-side encryption to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public EncryptionService Queue { get; set; }
		
		/// <summary>
		/// A service that allows server-side encryption to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public EncryptionService Table { get; set; }
	}
	
	/// <summary>
	/// The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Endpoints
	{
		
		/// <summary>
		/// Gets the blob endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public string Blob { get; set; }
		
		/// <summary>
		/// Gets the dfs endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dfs")]
		public string Dfs { get; set; }
		
		/// <summary>
		/// Gets the file endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internetEndpoints")]
		public StorageAccountInternetEndpoints InternetEndpoints { get; set; }
		
		/// <summary>
		/// The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsoftEndpoints")]
		public StorageAccountMicrosoftEndpoints MicrosoftEndpoints { get; set; }
		
		/// <summary>
		/// Gets the queue endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
		
		/// <summary>
		/// Gets the table endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
		
		/// <summary>
		/// Gets the web endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="web")]
		public string Web { get; set; }
	}
	
	/// <summary>
	/// An error response from the storage resource provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class GeoReplicationStats
	{
		
		/// <summary>
		/// A boolean flag which indicates whether or not account failover is supported for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canFailover")]
		public System.Nullable<System.Boolean> CanFailover { get; set; }
		
		/// <summary>
		/// All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSyncTime")]
		public System.Nullable<System.DateTimeOffset> LastSyncTime { get; set; }
		
		/// <summary>
		/// The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<GeoReplicationStatsStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum GeoReplicationStatsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Live = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bootstrap = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unavailable = 2,
	}
	
	/// <summary>
	/// IP rule with specific IP or IP range in CIDR format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IPRule
	{
		
		/// <summary>
		/// The action of IP ACL rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<IPRuleAction> Action { get; set; }
		
		/// <summary>
		/// Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IPRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
	}
	
	/// <summary>
	/// Identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Identity
	{
		
		/// <summary>
		/// The principal ID of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant ID of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IdentityType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
	}
	
	/// <summary>
	/// Properties of key vault.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class KeyVaultProperties
	{
		
		/// <summary>
		/// The name of KeyVault key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyname")]
		public string Keyname { get; set; }
		
		/// <summary>
		/// The Uri of KeyVault.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyvaulturi")]
		public string Keyvaulturi { get; set; }
		
		/// <summary>
		/// The version of KeyVault key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyversion")]
		public string Keyversion { get; set; }
	}
	
	/// <summary>
	/// The List SAS credentials operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListAccountSasResponse
	{
		
		/// <summary>
		/// List SAS credentials of storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountSasToken")]
		public string AccountSasToken { get; set; }
	}
	
	/// <summary>
	/// The List service SAS credentials operation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ListServiceSasResponse
	{
		
		/// <summary>
		/// List service SAS credentials of specific resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSasToken")]
		public string ServiceSasToken { get; set; }
	}
	
	public class ManagementPolicy
	{
	}
	
	/// <summary>
	/// Actions are applied to the filtered blobs when the execution condition is met.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicyAction
	{
		
		/// <summary>
		/// Management policy action for base blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseBlob")]
		public ManagementPolicyBaseBlob BaseBlob { get; set; }
		
		/// <summary>
		/// Management policy action for snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot")]
		public ManagementPolicySnapShot Snapshot { get; set; }
	}
	
	/// <summary>
	/// Management policy action for base blob.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicyBaseBlob
	{
		
		/// <summary>
		/// Object to define the number of days after last modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public DateAfterModification Delete { get; set; }
		
		/// <summary>
		/// Object to define the number of days after last modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierToArchive")]
		public DateAfterModification TierToArchive { get; set; }
		
		/// <summary>
		/// Object to define the number of days after last modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierToCool")]
		public DateAfterModification TierToCool { get; set; }
	}
	
	/// <summary>
	/// An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicyDefinition
	{
		
		/// <summary>
		/// Actions are applied to the filtered blobs when the execution condition is met.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public ManagementPolicyAction Actions { get; set; }
		
		/// <summary>
		/// Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ManagementPolicyFilter Filters { get; set; }
	}
	
	/// <summary>
	/// Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicyFilter
	{
		
		/// <summary>
		/// An array of predefined enum values. Only blockBlob is supported.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blobTypes")]
		public string[] BlobTypes { get; set; }
		
		/// <summary>
		/// An array of strings for prefixes to be match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefixMatch")]
		public string[] PrefixMatch { get; set; }
	}
	
	/// <summary>
	/// The Storage Account ManagementPolicy properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicyProperties
	{
		
		/// <summary>
		/// Returns the date and time the ManagementPolicies was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ManagementPolicySchema Policy { get; set; }
	}
	
	/// <summary>
	/// An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicyRule
	{
		
		/// <summary>
		/// An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public ManagementPolicyDefinition Definition { get; set; }
		
		/// <summary>
		/// Rule is enabled if set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The valid value is Lifecycle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ManagementPolicyRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ManagementPolicyRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lifecycle = 0,
	}
	
	/// <summary>
	/// The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicySchema
	{
		
		/// <summary>
		/// The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ManagementPolicyRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Management policy action for snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ManagementPolicySnapShot
	{
		
		/// <summary>
		/// Object to define the number of days after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public DateAfterCreation Delete { get; set; }
	}
	
	/// <summary>
	/// Metric specification of operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class MetricSpecification
	{
		
		/// <summary>
		/// Aggregation type could be Average.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public string AggregationType { get; set; }
		
		/// <summary>
		/// The category this metric specification belong to, could be Capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Dimensions of blobs, including blob type and access tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Display description of metric specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDescription")]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// Display name of metric specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The property to decide fill gap with zero or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fillGapWithZero")]
		public System.Nullable<System.Boolean> FillGapWithZero { get; set; }
		
		/// <summary>
		/// Name of metric specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Account Resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIdDimensionNameOverride")]
		public string ResourceIdDimensionNameOverride { get; set; }
		
		/// <summary>
		/// Unit could be Bytes or Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Network rule set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class NetworkRuleSet
	{
		
		/// <summary>
		/// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bypass")]
		public System.Nullable<NetworkRuleSetBypass> Bypass { get; set; }
		
		/// <summary>
		/// Specifies the default action of allow or deny when no other rules match.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(NetworkRuleSetDefaultAction.Allow)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public NetworkRuleSetDefaultAction DefaultAction { get; set; } = NetworkRuleSetDefaultAction.Allow;
		
		/// <summary>
		/// Sets the IP ACL rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipRules")]
		public IPRule[] IpRules { get; set; }
		
		/// <summary>
		/// Sets the virtual network rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualNetworkRules")]
		public VirtualNetworkRule[] VirtualNetworkRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkRuleSetBypass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Logging = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Metrics = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureServices = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum NetworkRuleSetDefaultAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	/// <summary>
	/// Virtual Network rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class VirtualNetworkRule
	{
		
		/// <summary>
		/// The action of virtual network rule.
		/// </summary>
		[System.ComponentModel.DefaultValue(IPRuleAction.Allow)]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public IPRuleAction Action { get; set; } = IPRuleAction.Allow;
		
		/// <summary>
		/// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Gets the state of virtual network rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VirtualNetworkRuleState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum VirtualNetworkRuleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deprovisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		networkSourceDeleted = 4,
	}
	
	/// <summary>
	/// Storage REST API operation definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Operation
	{
		
		/// <summary>
		/// Display metadata associated with the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public object Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The origin of operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// Properties of operation, include metric specifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public OperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationListResult
	{
		
		/// <summary>
		/// List of Storage operations supported by the Storage resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of operation, include metric specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OperationProperties
	{
		
		/// <summary>
		/// One property of operation, include metric specifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceSpecification")]
		public ServiceSpecification ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// The Private Endpoint resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpoint
	{
		
		/// <summary>
		/// The ARM identifier for Private Endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class PrivateEndpointConnection
	{
	}
	
	/// <summary>
	/// Properties of the PrivateEndpointConnectProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateEndpointConnectionProperties
	{
		
		/// <summary>
		/// The Private Endpoint resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpoint")]
		public PrivateEndpoint PrivateEndpoint { get; set; }
		
		/// <summary>
		/// A collection of information about the state of the connection between service consumer and provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateLinkServiceConnectionState")]
		public PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get; set; }
		
		/// <summary>
		/// The current provisioning state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<PrivateEndpointConnectionPropertiesProvisioningState> ProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PrivateEndpointConnectionPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// The current provisioning state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PrivateEndpointConnectionProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// The private endpoint connection status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PrivateEndpointServiceConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 2,
	}
	
	public class PrivateLinkResource
	{
	}
	
	/// <summary>
	/// A list of private link resources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkResourceListResult
	{
		
		/// <summary>
		/// Array of private link resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public PrivateLinkResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of a private link resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkResourceProperties
	{
		
		/// <summary>
		/// The private link resource group id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The private link resource required member names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredMembers")]
		public string[] RequiredMembers { get; set; }
		
		/// <summary>
		/// The private link resource Private link DNS zone name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredZoneNames")]
		public string[] RequiredZoneNames { get; set; }
	}
	
	/// <summary>
	/// A collection of information about the state of the connection between service consumer and provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PrivateLinkServiceConnectionState
	{
		
		/// <summary>
		/// A message indicating if changes on the service provider require any updates on the consumer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionRequired")]
		public string ActionRequired { get; set; }
		
		/// <summary>
		/// The reason for approval/rejection of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The private endpoint connection status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PrivateEndpointServiceConnectionStatus Status { get; set; }
	}
	
	/// <summary>
	/// The restriction because of which SKU cannot be used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Restriction
	{
		
		/// <summary>
		/// The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The "NotAvailableForSubscription" is related to capacity at DC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public System.Nullable<RestrictionReasonCode> ReasonCode { get; set; }
		
		/// <summary>
		/// The type of restrictions. As of now only possible value for this is location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RestrictionReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuotaId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailableForSubscription = 1,
	}
	
	/// <summary>
	/// Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RoutingPreference
	{
		
		/// <summary>
		/// A boolean flag which indicates whether internet routing storage endpoints are to be published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishInternetEndpoints")]
		public System.Nullable<System.Boolean> PublishInternetEndpoints { get; set; }
		
		/// <summary>
		/// A boolean flag which indicates whether microsoft routing storage endpoints are to be published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishMicrosoftEndpoints")]
		public System.Nullable<System.Boolean> PublishMicrosoftEndpoints { get; set; }
		
		/// <summary>
		/// Routing Choice defines the kind of network routing opted by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingChoice")]
		public System.Nullable<RoutingPreferenceRoutingChoice> RoutingChoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RoutingPreferenceRoutingChoice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrosoftRouting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternetRouting = 1,
	}
	
	/// <summary>
	/// The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SKUCapability
	{
		
		/// <summary>
		/// The name of capability, The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A string value to indicate states of given capability. Possibly 'true' or 'false'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The parameters to list service SAS credentials of a specific resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceSasParameters
	{
		
		/// <summary>
		/// The canonical path to the signed resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canonicalizedResource")]
		public string CanonicalizedResource { get; set; }
		
		/// <summary>
		/// The end of partition key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endPk")]
		public string EndPk { get; set; }
		
		/// <summary>
		/// The end of row key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endRk")]
		public string EndRk { get; set; }
		
		/// <summary>
		/// The key to sign the account SAS token with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyToSign")]
		public string KeyToSign { get; set; }
		
		/// <summary>
		/// The response header override for cache control.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rscc")]
		public string Rscc { get; set; }
		
		/// <summary>
		/// The response header override for content disposition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rscd")]
		public string Rscd { get; set; }
		
		/// <summary>
		/// The response header override for content encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsce")]
		public string Rsce { get; set; }
		
		/// <summary>
		/// The response header override for content language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rscl")]
		public string Rscl { get; set; }
		
		/// <summary>
		/// The response header override for content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsct")]
		public string Rsct { get; set; }
		
		/// <summary>
		/// The time at which the shared access signature becomes invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedExpiry")]
		public System.Nullable<System.DateTimeOffset> SignedExpiry { get; set; }
		
		/// <summary>
		/// A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedIdentifier")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string SignedIdentifier { get; set; }
		
		/// <summary>
		/// An IP address or a range of IP addresses from which to accept requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedIp")]
		public string SignedIp { get; set; }
		
		/// <summary>
		/// The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedPermission")]
		public AccountSasParametersSignedPermission SignedPermission { get; set; }
		
		/// <summary>
		/// The protocol permitted for a request made with the account SAS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedProtocol")]
		public System.Nullable<ServiceSasParametersSignedProtocol> SignedProtocol { get; set; }
		
		/// <summary>
		/// The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedResource")]
		public System.Nullable<ServiceSasParametersSignedResource> SignedResource { get; set; }
		
		/// <summary>
		/// The time at which the SAS becomes valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signedStart")]
		public System.Nullable<System.DateTimeOffset> SignedStart { get; set; }
		
		/// <summary>
		/// The start of partition key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startPk")]
		public string StartPk { get; set; }
		
		/// <summary>
		/// The start of row key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startRk")]
		public string StartRk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServiceSasParametersSignedProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="https,http")]
		httpshttp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ServiceSasParametersSignedResource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		b = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		f = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s = 3,
	}
	
	/// <summary>
	/// One property of operation, include metric specifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ServiceSpecification
	{
		
		/// <summary>
		/// Metric specifications of operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricSpecifications")]
		public MetricSpecification[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// Storage SKU and its properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SkuInformation
	{
		
		/// <summary>
		/// The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public SKUCapability[] Capabilities { get; set; }
		
		/// <summary>
		/// Indicates the type of storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<SkuInformationKind> Kind { get; set; }
		
		/// <summary>
		/// The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public string[] Locations { get; set; }
		
		/// <summary>
		/// The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public SkuInformationName Name { get; set; }
		
		/// <summary>
		/// The type of the resource, usually it is 'storageAccounts'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public Restriction[] Restrictions { get; set; }
		
		/// <summary>
		/// The SKU tier. This is based on the SKU name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<SkuInformationTier> Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuInformationKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Storage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageV2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BlobStorage = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FileStorage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BlockBlobStorage = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuInformationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_LRS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_GRS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_RAGRS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_ZRS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_LRS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium_ZRS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_GZRS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard_RAGZRS = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SkuInformationTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Premium = 1,
	}
	
	public class StorageAccount
	{
	}
	
	/// <summary>
	/// The parameters used to check the availability of the storage account name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountCheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The storage account name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of resource, Microsoft.Storage/storageAccounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StorageAccountCheckNameAvailabilityParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountCheckNameAvailabilityParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.Storage/storageAccounts")]
		Microsoft_Storage_storageAccounts = 0,
	}
	
	/// <summary>
	/// The parameters used when creating a storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountCreateParameters
	{
		
		/// <summary>
		/// Identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// Required. Indicates the type of storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public SkuInformationKind Kind { get; set; }
		
		/// <summary>
		/// Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The parameters used to create the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageAccountPropertiesCreateParameters Properties { get; set; }
		
		/// <summary>
		/// The SKU of the storage account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public object Sku { get; set; }
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountInternetEndpoints
	{
		
		/// <summary>
		/// Gets the blob endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public string Blob { get; set; }
		
		/// <summary>
		/// Gets the dfs endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dfs")]
		public string Dfs { get; set; }
		
		/// <summary>
		/// Gets the file endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Gets the web endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="web")]
		public string Web { get; set; }
	}
	
	/// <summary>
	/// An access key for the storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountKey
	{
		
		/// <summary>
		/// Name of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Permissions for the key -- read-only or full permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public System.Nullable<StorageAccountKeyPermissions> Permissions { get; set; }
		
		/// <summary>
		/// Base 64-encoded value of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountKeyPermissions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Read = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Full = 1,
	}
	
	/// <summary>
	/// The response from the ListKeys operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountListKeysResult
	{
		
		/// <summary>
		/// Gets the list of storage account keys and their properties for the specified storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public StorageAccountKey[] Keys { get; set; }
	}
	
	/// <summary>
	/// The response from the List Storage Accounts operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountListResult
	{
		
		/// <summary>
		/// Request URL that can be used to query next page of storage accounts. Returned when total number of requested storage accounts exceed maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Gets the list of storage accounts and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StorageAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountMicrosoftEndpoints
	{
		
		/// <summary>
		/// Gets the blob endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blob")]
		public string Blob { get; set; }
		
		/// <summary>
		/// Gets the dfs endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dfs")]
		public string Dfs { get; set; }
		
		/// <summary>
		/// Gets the file endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Gets the queue endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
		
		/// <summary>
		/// Gets the table endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public string Table { get; set; }
		
		/// <summary>
		/// Gets the web endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="web")]
		public string Web { get; set; }
	}
	
	/// <summary>
	/// Properties of the storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountProperties
	{
		
		/// <summary>
		/// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTier")]
		public System.Nullable<StorageAccountPropertiesAccessTier> AccessTier { get; set; }
		
		/// <summary>
		/// Settings for Azure Files identity based authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFilesIdentityBasedAuthentication")]
		public AzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication { get; set; }
		
		/// <summary>
		/// Blob restore status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobRestoreStatus")]
		public BlobRestoreStatus BlobRestoreStatus { get; set; }
		
		/// <summary>
		/// Gets the creation date and time of the storage account in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// The custom domain assigned to this storage account. This can be set via Update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDomain")]
		public CustomDomain CustomDomain { get; set; }
		
		/// <summary>
		/// The encryption settings on the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// If the failover is in progress, the value will be true, otherwise, it will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverInProgress")]
		public System.Nullable<System.Boolean> FailoverInProgress { get; set; }
		
		/// <summary>
		/// Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoReplicationStats")]
		public GeoReplicationStats GeoReplicationStats { get; set; }
		
		/// <summary>
		/// Account HierarchicalNamespace enabled if sets to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isHnsEnabled")]
		public System.Nullable<System.Boolean> IsHnsEnabled { get; set; }
		
		/// <summary>
		/// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeFileSharesState")]
		public System.Nullable<StorageAccountPropertiesLargeFileSharesState> LargeFileSharesState { get; set; }
		
		/// <summary>
		/// Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastGeoFailoverTime")]
		public System.Nullable<System.DateTimeOffset> LastGeoFailoverTime { get; set; }
		
		/// <summary>
		/// Network rule set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAcls")]
		public NetworkRuleSet NetworkAcls { get; set; }
		
		/// <summary>
		/// The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEndpoints")]
		public Endpoints PrimaryEndpoints { get; set; }
		
		/// <summary>
		/// Gets the location of the primary data center for the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryLocation")]
		public string PrimaryLocation { get; set; }
		
		/// <summary>
		/// List of private endpoint connection associated with the specified storage account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEndpointConnections")]
		public PrivateEndpointConnection[] PrivateEndpointConnections { get; set; }
		
		/// <summary>
		/// Gets the status of the storage account at the time the operation was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<StorageAccountPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingPreference")]
		public RoutingPreference RoutingPreference { get; set; }
		
		/// <summary>
		/// The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryEndpoints")]
		public Endpoints SecondaryEndpoints { get; set; }
		
		/// <summary>
		/// Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryLocation")]
		public string SecondaryLocation { get; set; }
		
		/// <summary>
		/// Gets the status indicating whether the primary location of the storage account is available or unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusOfPrimary")]
		public System.Nullable<StorageAccountPropertiesStatusOfPrimary> StatusOfPrimary { get; set; }
		
		/// <summary>
		/// Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusOfSecondary")]
		public StorageAccountPropertiesStatusOfPrimary StatusOfSecondary { get; set; }
		
		/// <summary>
		/// Allows https traffic only to storage service if sets to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsHttpsTrafficOnly")]
		public System.Nullable<System.Boolean> SupportsHttpsTrafficOnly { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountPropertiesAccessTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cool = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountPropertiesLargeFileSharesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResolvingDNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StorageAccountPropertiesStatusOfPrimary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 1,
	}
	
	/// <summary>
	/// The parameters used to create the storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountPropertiesCreateParameters
	{
		
		/// <summary>
		/// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTier")]
		public StorageAccountPropertiesAccessTier AccessTier { get; set; }
		
		/// <summary>
		/// Settings for Azure Files identity based authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFilesIdentityBasedAuthentication")]
		public AzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication { get; set; }
		
		/// <summary>
		/// The custom domain assigned to this storage account. This can be set via Update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDomain")]
		public CustomDomain CustomDomain { get; set; }
		
		/// <summary>
		/// The encryption settings on the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Account HierarchicalNamespace enabled if sets to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isHnsEnabled")]
		public System.Nullable<System.Boolean> IsHnsEnabled { get; set; }
		
		/// <summary>
		/// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeFileSharesState")]
		public StorageAccountPropertiesLargeFileSharesState LargeFileSharesState { get; set; }
		
		/// <summary>
		/// Network rule set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAcls")]
		public NetworkRuleSet NetworkAcls { get; set; }
		
		/// <summary>
		/// Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingPreference")]
		public RoutingPreference RoutingPreference { get; set; }
		
		/// <summary>
		/// Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsHttpsTrafficOnly")]
		public System.Nullable<System.Boolean> SupportsHttpsTrafficOnly { get; set; }
	}
	
	/// <summary>
	/// The parameters used when updating a storage account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountPropertiesUpdateParameters
	{
		
		/// <summary>
		/// Required for storage accounts where kind = BlobStorage. The access tier used for billing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTier")]
		public StorageAccountPropertiesAccessTier AccessTier { get; set; }
		
		/// <summary>
		/// Settings for Azure Files identity based authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="azureFilesIdentityBasedAuthentication")]
		public AzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication { get; set; }
		
		/// <summary>
		/// The custom domain assigned to this storage account. This can be set via Update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDomain")]
		public CustomDomain CustomDomain { get; set; }
		
		/// <summary>
		/// The encryption settings on the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeFileSharesState")]
		public StorageAccountPropertiesLargeFileSharesState LargeFileSharesState { get; set; }
		
		/// <summary>
		/// Network rule set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkAcls")]
		public NetworkRuleSet NetworkAcls { get; set; }
		
		/// <summary>
		/// Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingPreference")]
		public RoutingPreference RoutingPreference { get; set; }
		
		/// <summary>
		/// Allows https traffic only to storage service if sets to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsHttpsTrafficOnly")]
		public System.Nullable<System.Boolean> SupportsHttpsTrafficOnly { get; set; }
	}
	
	/// <summary>
	/// The parameters used to regenerate the storage account key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountRegenerateKeyParameters
	{
		
		/// <summary>
		/// The name of storage keys that want to be regenerated, possible values are key1, key2, kerb1, kerb2.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
	}
	
	/// <summary>
	/// The parameters that can be provided when updating the storage account properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageAccountUpdateParameters
	{
		
		/// <summary>
		/// Identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// Optional. Indicates the type of storage account. Currently only StorageV2 value supported by server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public SkuInformationKind Kind { get; set; }
		
		/// <summary>
		/// The parameters used when updating a storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public StorageAccountPropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// The SKU of the storage account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public object Sku { get; set; }
		
		/// <summary>
		/// Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in length than 128 characters and a value no greater in length than 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The response from the List Storage SKUs operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class StorageSkuListResult
	{
		
		/// <summary>
		/// Get the list result of storage SKUs and their properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SkuInformation[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes Storage Resource Usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Usage
	{
		
		/// <summary>
		/// Gets the current count of the allocated resources in the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public System.Nullable<System.Int32> CurrentValue { get; set; }
		
		/// <summary>
		/// Gets the maximum count of the resources that can be allocated in the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The usage names that can be used; currently limited to StorageAccount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public UsageName Name { get; set; }
		
		/// <summary>
		/// Gets the unit of measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<UsageUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum UsageUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CountsPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BytesPerSecond = 5,
	}
	
	/// <summary>
	/// The response from the List Usages operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageListResult
	{
		
		/// <summary>
		/// Gets or sets the list of Storage Resource Usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Usage[] Value { get; set; }
	}
	
	/// <summary>
	/// The usage names that can be used; currently limited to StorageAccount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UsageName
	{
		
		/// <summary>
		/// Gets a localized string describing the resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedValue")]
		public string LocalizedValue { get; set; }
		
		/// <summary>
		/// Gets a string describing the resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available Storage Rest API operations.
		/// Operations_List providers/Microsoft.Storage/operations
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version)
		{
			var requestUri = "providers/Microsoft.Storage/operations?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<OperationListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Checks that the storage account name is valid and is not already in use.
		/// StorageAccounts_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</param>
		/// <returns>OK -- Operation to check the storage account name availability was successful.</returns>
		public async Task<CheckNameAvailabilityResult> StorageAccounts_CheckNameAvailabilityAsync(string api_version, string subscriptionId, StorageAccountCheckNameAvailabilityParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Storage/checkNameAvailability?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CheckNameAvailabilityResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the current usage count and the limit for the resources of the location under the subscription.
		/// Usages_ListByLocation subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="location">The location of the Azure Storage resource.</param>
		/// <returns>OK -- current usage count and limit retrieved and returned successfully.</returns>
		public async Task<UsageListResult> Usages_ListByLocationAsync(string api_version, string subscriptionId, string location)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Storage/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/usages?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UsageListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the available SKUs supported by Microsoft.Storage for given subscription.
		/// Skus_List subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- List of storage SKUs in the given subscription retrieved and returned successfully.</returns>
		public async Task<StorageSkuListResult> Skus_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Storage/skus?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageSkuListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
		/// StorageAccounts_List subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts
		/// </summary>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- List of storage accounts was retrieved and returned successfully.</returns>
		public async Task<StorageAccountListResult> StorageAccounts_ListAsync(string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Storage/storageAccounts?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccountListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
		/// StorageAccounts_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- List of storage accounts in the given resource group retrieved and returned successfully.</returns>
		public async Task<StorageAccountListResult> StorageAccounts_ListByResourceGroupAsync(string resourceGroupName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccountListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.
		/// StorageAccounts_GetProperties subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="expand">May be used to expand the properties within account's properties. By default, data is not included when fetching properties. Currently we only support geoReplicationStats and blobRestoreStatus.</param>
		/// <returns>OK -- properties retrieved successfully for the storage account.</returns>
		public async Task<StorageAccount> StorageAccounts_GetPropertiesAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, StorageAccounts_GetPropertiesExpand expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + expand;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccount>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
		/// StorageAccounts_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The parameters to provide for the created account.</param>
		/// <returns>OK -- returned when the storage account was already created from a previous request with the same properties specified in the request body.</returns>
		public async Task<StorageAccount> StorageAccounts_CreateAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, StorageAccountCreateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccount>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a storage account in Microsoft Azure.
		/// StorageAccounts_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- storage account deleted successfully.</returns>
		public async Task StorageAccounts_DeleteAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.
		/// StorageAccounts_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The parameters to provide for the updated account.</param>
		/// <returns>OK -- storage account properties updated successfully.</returns>
		public async Task<StorageAccount> StorageAccounts_UpdateAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, StorageAccountUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccount>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List SAS credentials of a storage account.
		/// StorageAccounts_ListAccountSAS subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The parameters to provide to list SAS credentials for the storage account.</param>
		/// <returns>OK -- returned the account SAS created for the storage account requested.</returns>
		public async Task<ListAccountSasResponse> StorageAccounts_ListAccountSASAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, AccountSasParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/ListAccountSas&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAccountSasResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List service SAS credentials of a specific resource.
		/// StorageAccounts_ListServiceSAS subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The parameters to provide to list service SAS credentials.</param>
		/// <returns>OK -- returned the service SAS created for the storage service requested.</returns>
		public async Task<ListServiceSasResponse> StorageAccounts_ListServiceSASAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, ServiceSasParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/ListServiceSas&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListServiceSasResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Failover request can be triggered for a storage account in case of availability issues. The failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover.
		/// StorageAccounts_Failover subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- Returned when the storage account failover is completed, and the secondary cluster has become primary.</returns>
		public async Task StorageAccounts_FailoverAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/failover&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the access keys or Kerberos keys (if active directory enabled) for the specified storage account.
		/// StorageAccounts_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="expand">Specifies type of the key to be listed. Possible value is kerb.</param>
		/// <returns>OK -- list of keys retrieved and returned successfully.</returns>
		public async Task<StorageAccountListKeysResult> StorageAccounts_ListKeysAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, StorageAccounts_ListKeysExpand expand)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/listKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$expand=" + expand;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccountListKeysResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the managementpolicy associated with the specified storage account.
		/// ManagementPolicies_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="managementPolicyName">The name of the Storage Account Management Policy. It should always be 'default'</param>
		/// <returns>OK -- Get the managementpolicy successfully.</returns>
		public async Task<ManagementPolicy> ManagementPolicies_GetAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, ManagementPolicies_GetManagementPolicyName managementPolicyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/managementPolicies/"+managementPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManagementPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the managementpolicy to the specified storage account.
		/// ManagementPolicies_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="managementPolicyName">The name of the Storage Account Management Policy. It should always be 'default'</param>
		/// <param name="requestBody">The ManagementPolicy set to a storage account.</param>
		/// <returns>OK -- Put managementpolicy successfully.</returns>
		public async Task<ManagementPolicy> ManagementPolicies_CreateOrUpdateAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, ManagementPolicies_CreateOrUpdateManagementPolicyName managementPolicyName, ManagementPolicy requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/managementPolicies/"+managementPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManagementPolicy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the managementpolicy associated with the specified storage account.
		/// ManagementPolicies_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="managementPolicyName">The name of the Storage Account Management Policy. It should always be 'default'</param>
		/// <returns>OK -- Delete the managementpolicy successfully.</returns>
		public async Task ManagementPolicies_DeleteAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, ManagementPolicies_DeleteManagementPolicyName managementPolicyName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/managementPolicies/"+managementPolicyName+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the specified private endpoint connection associated with the storage account.
		/// PrivateEndpointConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection associated with the Storage Account</param>
		/// <returns>OK -- Get the private endpoint connection properties successfully.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_GetAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, string privateEndpointConnectionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the state of specified private endpoint connection associated with the storage account.
		/// PrivateEndpointConnections_Put subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection associated with the Storage Account</param>
		/// <param name="requestBody">The private endpoint connection properties.</param>
		/// <returns>OK -- Update the private endpoint connection properties successfully.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_PutAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, string privateEndpointConnectionName, PrivateEndpointConnection requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PrivateEndpointConnection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified private endpoint connection associated with the storage account.
		/// PrivateEndpointConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="privateEndpointConnectionName">The name of the private endpoint connection associated with the Storage Account</param>
		/// <returns>OK -- Delete the private endpoint connection successfully.</returns>
		public async Task PrivateEndpointConnections_DeleteAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, string privateEndpointConnectionName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : System.Uri.EscapeDataString(privateEndpointConnectionName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the private link resources that need to be created for a storage account.
		/// PrivateLinkResources_ListByStorageAccount subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateLinkResources
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>Successfully retrieved private link resources.</returns>
		public async Task<PrivateLinkResourceListResult> PrivateLinkResources_ListByStorageAccountAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/privateLinkResources&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PrivateLinkResourceListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Regenerates one of the access keys or Kerberos keys for the specified storage account.
		/// StorageAccounts_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">Specifies name of the key which should be regenerated -- key1, key2, kerb1, kerb2.</param>
		/// <returns>OK -- specified key regenerated successfully.</returns>
		public async Task<StorageAccountListKeysResult> StorageAccounts_RegenerateKeyAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, StorageAccountRegenerateKeyParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/regenerateKey&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StorageAccountListKeysResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Restore blobs in the specified blob ranges
		/// StorageAccounts_RestoreBlobRanges subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/restoreBlobRanges
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <param name="requestBody">The parameters to provide for restore blob ranges.</param>
		/// <returns>OK -- returned when blob ranges are restored completely with the same properties specified in the request body.</returns>
		public async Task<BlobRestoreStatus> StorageAccounts_RestoreBlobRangesAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId, BlobRestoreParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/restoreBlobRanges&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BlobRestoreStatus>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Revoke user delegation keys.
		/// StorageAccounts_RevokeUserDelegationKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group within the user's subscription. The name is case insensitive.
		/// Min length: 1
		/// Max length: 90
		// </param>
		/// <param name="accountName">The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
		/// Min length: 3
		/// Max length: 24
		// </param>
		/// <param name="api_version">The API version to use for this operation.
		/// Min length: 1
		// </param>
		/// <param name="subscriptionId">The ID of the target subscription.
		/// Min length: 1
		// </param>
		/// <returns>OK -- revoke user delegation keys succeeded.</returns>
		public async Task StorageAccounts_RevokeUserDelegationKeysAsync(string resourceGroupName, string accountName, string api_version, string subscriptionId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Storage/storageAccounts/"+ (accountName==null? "" : System.Uri.EscapeDataString(accountName))+"/revokeUserDelegationKeys&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum StorageAccounts_GetPropertiesExpand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		geoReplicationStats = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blobRestoreStatus = 1,
	}
	
	public enum StorageAccounts_ListKeysExpand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kerb = 0,
	}
	
	public enum ManagementPolicies_GetManagementPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ManagementPolicies_CreateOrUpdateManagementPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
	
	public enum ManagementPolicies_DeleteManagementPolicyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
