//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Category
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Document
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTwitterContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SerializeFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserCategoryModelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DocumentResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Category[] AutoCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentencePart[] Citations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudTagHTML { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sentence[] CoreSentences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetectedLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocSentimentPolarity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocSentimentResultString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DocSentimentValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentencePart[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentencePart[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NegativePhraseCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NeutralPhraseCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartOfSpeech[] PartsOfSpeech { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PositivePhraseCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResultTextHtml { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlangWord[] SlangWords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subjectivity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Summarization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlangWord[] SwearWords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentencePart[] Themes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransactionCurrentDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransactionDailyLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransactionTotalCreditsLeft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransactionUseByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Category[] UserCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SentencePart
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeywordType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Mentions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SentencePartType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SentenceText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SentimentPolarity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SentimentResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SentimentValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Sentence
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Relevance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SentenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SentimentPolarity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SentimentResultString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SentimentValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PartOfSpeech
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectSentimentPolarity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectSentimentResultString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ObjectSentimentValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SlangWord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SlangWordText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SlangWordTranslation { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Root_Get api/Root
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DocumentResult> Root_GetAsync()
		{
			var requestUri = "api/Root";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DocumentResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Root_Post api/Root
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DocumentResult> Root_PostAsync(Document requestBody)
		{
			var requestUri = "api/Root";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DocumentResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
