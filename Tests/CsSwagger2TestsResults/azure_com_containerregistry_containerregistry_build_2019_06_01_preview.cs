//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The properties that determine the run agent configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AgentProperties
	{
		
		/// <summary>
		/// The CPU configuration in terms of number of cores required for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Int32> Cpu { get; set; }
	}
	
	/// <summary>
	/// The properties of a run argument.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Argument
	{
		
		/// <summary>
		/// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSecret")]
		public System.Nullable<System.Boolean> IsSecret { get; set; }
		
		/// <summary>
		/// The name of the argument.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the argument.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The authorization properties for accessing the source code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthInfo
	{
		
		/// <summary>
		/// Time in seconds that the token remains valid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public System.Nullable<System.Int32> ExpiresIn { get; set; }
		
		/// <summary>
		/// The refresh token used to refresh the access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		/// The scope of the access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The access token used to access the source control provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of Auth token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		public AuthInfoTokenType TokenType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AuthInfoTokenType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAuth = 1,
	}
	
	/// <summary>
	/// The authorization properties for accessing the source code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AuthInfoUpdateParameters
	{
		
		/// <summary>
		/// Time in seconds that the token remains valid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public System.Nullable<System.Int32> ExpiresIn { get; set; }
		
		/// <summary>
		/// The refresh token used to refresh the access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		/// The scope of the access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// The access token used to access the source control provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of Auth token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		public AuthInfoTokenType TokenType { get; set; }
	}
	
	/// <summary>
	/// Properties that describe a base image dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BaseImageDependency
	{
		
		/// <summary>
		/// The sha256-based digest of the image manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// The registry login server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registry")]
		public string Registry { get; set; }
		
		/// <summary>
		/// The repository name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The type of the base image dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BaseImageDependencyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BaseImageDependencyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BuildTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunTime = 1,
	}
	
	/// <summary>
	/// The trigger based on base image dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BaseImageTrigger
	{
		
		/// <summary>
		/// The type of the auto trigger for base image dependency updates.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baseImageTriggerType")]
		public BaseImageTriggerBaseImageTriggerType BaseImageTriggerType { get; set; }
		
		/// <summary>
		/// The name of the trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The current status of trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BaseImageTriggerStatus> Status { get; set; }
		
		/// <summary>
		/// The endpoint URL for receiving update triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTriggerEndpoint")]
		public string UpdateTriggerEndpoint { get; set; }
		
		/// <summary>
		/// Type of Payload body for Base image update triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTriggerPayloadType")]
		public System.Nullable<BaseImageTriggerUpdateTriggerPayloadType> UpdateTriggerPayloadType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BaseImageTriggerBaseImageTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Runtime = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BaseImageTriggerStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum BaseImageTriggerUpdateTriggerPayloadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Token = 1,
	}
	
	/// <summary>
	/// The properties for updating base image dependency trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class BaseImageTriggerUpdateParameters
	{
		
		/// <summary>
		/// The type of the auto trigger for base image dependency updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseImageTriggerType")]
		public BaseImageTriggerBaseImageTriggerType BaseImageTriggerType { get; set; }
		
		/// <summary>
		/// The name of the trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The current status of trigger.
		/// </summary>
		[System.ComponentModel.DefaultValue(BaseImageTriggerStatus.Enabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BaseImageTriggerStatus Status { get; set; } = BaseImageTriggerStatus.Enabled;
		
		/// <summary>
		/// The endpoint URL for receiving update triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTriggerEndpoint")]
		public string UpdateTriggerEndpoint { get; set; }
		
		/// <summary>
		/// Type of Payload body for Base image update triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTriggerPayloadType")]
		public BaseImageTriggerUpdateTriggerPayloadType UpdateTriggerPayloadType { get; set; }
	}
	
	/// <summary>
	/// The parameters that describes a set of credentials that will be used when a run is invoked.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Credentials
	{
		
		/// <summary>
		/// Describes the credential parameters for accessing other custom registries. The key
		///for the dictionary item will be the registry login server (myregistry.azurecr.io) and
		///the value of the item will be the registry credentials for accessing the registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRegistries")]
		public System.Collections.Generic.Dictionary<string, CustomRegistryCredentials> CustomRegistries { get; set; }
		
		/// <summary>
		/// Describes the credential parameters for accessing the source registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceRegistry")]
		public SourceRegistryCredentials SourceRegistry { get; set; }
	}
	
	/// <summary>
	/// Describes the credentials that will be used to access a custom registry during a run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class CustomRegistryCredentials
	{
		
		/// <summary>
		/// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
		///this value is the Client ID. If a system-assigned identity, the value will be `system`. In
		///the case of a system-assigned identity, the Client ID will be determined by the runner. This
		///identity may be used to authenticate to key vault to retrieve credentials or it may be the only 
		///source of authentication used for accessing the registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// Describes the properties of a secret object value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public SecretObject Password { get; set; }
		
		/// <summary>
		/// Describes the properties of a secret object value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public SecretObject UserName { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a secret object value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SecretObject
	{
		
		/// <summary>
		/// The type of the secret object which determines how the value of the secret object has to be
		///interpreted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SecretObjectType> Type { get; set; }
		
		/// <summary>
		/// The value of the secret. The format of this value will be determined
		///based on the type of the secret object. If the type is Opaque, the value will be
		///used as is without any modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SecretObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Opaque = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vaultsecret = 1,
	}
	
	/// <summary>
	/// Describes the credential parameters for accessing the source registry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceRegistryCredentials
	{
		
		/// <summary>
		/// The authentication mode which determines the source registry login scope. The credentials for the source registry
		///will be generated using the given scope. These credentials will be used to login to
		///the source registry during the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginMode")]
		public System.Nullable<SourceRegistryCredentialsLoginMode> LoginMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SourceRegistryCredentialsLoginMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 1,
	}
	
	/// <summary>
	/// The parameters for a docker quick build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DockerBuildRequest
	{
		
		/// <summary>
		/// The properties that determine the run agent configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentConfiguration")]
		public AgentProperties AgentConfiguration { get; set; }
		
		/// <summary>
		/// The collection of override arguments to be used when executing the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public Argument[] Arguments { get; set; }
		
		/// <summary>
		/// The parameters that describes a set of credentials that will be used when a run is invoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		/// <summary>
		/// The Docker file path relative to the source location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dockerFilePath")]
		public string DockerFilePath { get; set; }
		
		/// <summary>
		/// The fully qualified image names including the repository and tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageNames")]
		public string[] ImageNames { get; set; }
		
		/// <summary>
		/// The value of this property indicates whether the image built should be pushed to the registry or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPushEnabled")]
		public System.Nullable<System.Boolean> IsPushEnabled { get; set; }
		
		/// <summary>
		/// The value of this property indicates whether the image cache is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noCache")]
		public System.Nullable<System.Boolean> NoCache { get; set; }
		
		/// <summary>
		/// The platform properties against which the run has to happen.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformProperties Platform { get; set; }
		
		/// <summary>
		/// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
		///If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLocation")]
		public string SourceLocation { get; set; }
		
		/// <summary>
		/// The name of the target build stage for the docker build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Run timeout in seconds.
		/// Minimum: 300
		/// Maximum: 28800
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		[System.ComponentModel.DataAnnotations.Range(300, 28800)]
		public System.Nullable<System.Int32> Timeout { get; set; }
	}
	
	/// <summary>
	/// The platform properties against which the run has to happen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PlatformProperties
	{
		
		/// <summary>
		/// The OS architecture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public System.Nullable<PlatformPropertiesArchitecture> Architecture { get; set; }
		
		/// <summary>
		/// The operating system type required for the run.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="os")]
		public PlatformPropertiesOs Os { get; set; }
		
		/// <summary>
		/// Variant of the CPU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public System.Nullable<PlatformPropertiesVariant> Variant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PlatformPropertiesArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amd64 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="386")]
		_386 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arm = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arm64 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PlatformPropertiesOs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PlatformPropertiesVariant
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v6 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v7 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v8 = 2,
	}
	
	/// <summary>
	/// The Docker build step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DockerBuildStep
	{
		
		/// <summary>
		/// The collection of override arguments to be used when executing this build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public Argument[] Arguments { get; set; }
		
		/// <summary>
		/// The Docker file path relative to the source context.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dockerFilePath")]
		public string DockerFilePath { get; set; }
		
		/// <summary>
		/// The fully qualified image names including the repository and tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageNames")]
		public string[] ImageNames { get; set; }
		
		/// <summary>
		/// The value of this property indicates whether the image built should be pushed to the registry or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPushEnabled")]
		public System.Nullable<System.Boolean> IsPushEnabled { get; set; }
		
		/// <summary>
		/// The value of this property indicates whether the image cache is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noCache")]
		public System.Nullable<System.Boolean> NoCache { get; set; }
		
		/// <summary>
		/// The name of the target build stage for the docker build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The properties for updating a docker build step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DockerBuildStepUpdateParameters
	{
		
		/// <summary>
		/// The collection of override arguments to be used when executing this build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public Argument[] Arguments { get; set; }
		
		/// <summary>
		/// The Docker file path relative to the source context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockerFilePath")]
		public string DockerFilePath { get; set; }
		
		/// <summary>
		/// The fully qualified image names including the repository and tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageNames")]
		public string[] ImageNames { get; set; }
		
		/// <summary>
		/// The value of this property indicates whether the image built should be pushed to the registry or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPushEnabled")]
		public System.Nullable<System.Boolean> IsPushEnabled { get; set; }
		
		/// <summary>
		/// The value of this property indicates whether the image cache is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noCache")]
		public System.Nullable<System.Boolean> NoCache { get; set; }
		
		/// <summary>
		/// The name of the target build stage for the docker build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The parameters for a quick task run request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncodedTaskRunRequest
	{
		
		/// <summary>
		/// The properties that determine the run agent configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentConfiguration")]
		public AgentProperties AgentConfiguration { get; set; }
		
		/// <summary>
		/// The parameters that describes a set of credentials that will be used when a run is invoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		/// <summary>
		/// Base64 encoded value of the template/definition file content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encodedTaskContent")]
		public string EncodedTaskContent { get; set; }
		
		/// <summary>
		/// Base64 encoded value of the parameters/values file content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedValuesContent")]
		public string EncodedValuesContent { get; set; }
		
		/// <summary>
		/// The platform properties against which the run has to happen.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformProperties Platform { get; set; }
		
		/// <summary>
		/// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
		///If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLocation")]
		public string SourceLocation { get; set; }
		
		/// <summary>
		/// Run timeout in seconds.
		/// Minimum: 300
		/// Maximum: 28800
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		[System.ComponentModel.DataAnnotations.Range(300, 28800)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// The collection of overridable values that can be passed when running a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SetValue[] Values { get; set; }
	}
	
	/// <summary>
	/// The properties of a overridable value that can be passed to a task template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SetValue
	{
		
		/// <summary>
		/// Flag to indicate whether the value represents a secret or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSecret")]
		public System.Nullable<System.Boolean> IsSecret { get; set; }
		
		/// <summary>
		/// The name of the overridable value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The overridable value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a encoded task step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncodedTaskStep
	{
		
		/// <summary>
		/// Base64 encoded value of the template/definition file content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encodedTaskContent")]
		public string EncodedTaskContent { get; set; }
		
		/// <summary>
		/// Base64 encoded value of the parameters/values file content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedValuesContent")]
		public string EncodedValuesContent { get; set; }
		
		/// <summary>
		/// The collection of overridable values that can be passed when running a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SetValue[] Values { get; set; }
	}
	
	/// <summary>
	/// The properties for updating encoded task step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class EncodedTaskStepUpdateParameters
	{
		
		/// <summary>
		/// Base64 encoded value of the template/definition file content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedTaskContent")]
		public string EncodedTaskContent { get; set; }
		
		/// <summary>
		/// Base64 encoded value of the parameters/values file content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodedValuesContent")]
		public string EncodedValuesContent { get; set; }
		
		/// <summary>
		/// The collection of overridable values that can be passed when running a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SetValue[] Values { get; set; }
	}
	
	/// <summary>
	/// An error response from the Azure Container Registry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Error
	{
		
		/// <summary>
		/// error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// error message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An error response from the Azure Container Registry service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorSchema
	{
		
		/// <summary>
		/// An error response from the Azure Container Registry service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
	}
	
	/// <summary>
	/// The request parameters for a scheduling run against a task file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileTaskRunRequest
	{
		
		/// <summary>
		/// The properties that determine the run agent configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentConfiguration")]
		public AgentProperties AgentConfiguration { get; set; }
		
		/// <summary>
		/// The parameters that describes a set of credentials that will be used when a run is invoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		/// <summary>
		/// The platform properties against which the run has to happen.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformProperties Platform { get; set; }
		
		/// <summary>
		/// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
		///If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLocation")]
		public string SourceLocation { get; set; }
		
		/// <summary>
		/// The template/definition file path relative to the source.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskFilePath")]
		public string TaskFilePath { get; set; }
		
		/// <summary>
		/// Run timeout in seconds.
		/// Minimum: 300
		/// Maximum: 28800
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		[System.ComponentModel.DataAnnotations.Range(300, 28800)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// The collection of overridable values that can be passed when running a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SetValue[] Values { get; set; }
		
		/// <summary>
		/// The values/parameters file path relative to the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuesFilePath")]
		public string ValuesFilePath { get; set; }
	}
	
	/// <summary>
	/// The properties of a task step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileTaskStep
	{
		
		/// <summary>
		/// The task template/definition file path relative to the source context.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskFilePath")]
		public string TaskFilePath { get; set; }
		
		/// <summary>
		/// The collection of overridable values that can be passed when running a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SetValue[] Values { get; set; }
		
		/// <summary>
		/// The task values/parameters file path relative to the source context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuesFilePath")]
		public string ValuesFilePath { get; set; }
	}
	
	/// <summary>
	/// The properties of updating a task step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class FileTaskStepUpdateParameters
	{
		
		/// <summary>
		/// The task template/definition file path relative to the source context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskFilePath")]
		public string TaskFilePath { get; set; }
		
		/// <summary>
		/// The collection of overridable values that can be passed when running a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SetValue[] Values { get; set; }
		
		/// <summary>
		/// The values/parameters file path relative to the source context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuesFilePath")]
		public string ValuesFilePath { get; set; }
	}
	
	/// <summary>
	/// Managed identity for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class IdentityProperties
	{
		
		/// <summary>
		/// The principal ID of resource identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant ID of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The identity type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IdentityPropertiesType> Type { get; set; }
		
		/// <summary>
		/// The list of user identities associated with the resource. The user identity 
		///dictionary key references will be ARM resource ids in the form: 
		///'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
		///    providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAssignedIdentities")]
		public System.Collections.Generic.Dictionary<string, UserIdentityProperties> UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum IdentityPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SystemAssigned, UserAssigned")]
		SystemAssigned_UserAssigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class UserIdentityProperties
	{
		
		/// <summary>
		/// The client id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal id of user assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Properties for a registry image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageDescriptor
	{
		
		/// <summary>
		/// The sha256-based digest of the image manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// The registry login server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registry")]
		public string Registry { get; set; }
		
		/// <summary>
		/// The repository name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The tag name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// The image update trigger that caused a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ImageUpdateTrigger
	{
		
		/// <summary>
		/// The unique ID of the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The list of image updates that caused the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageDescriptor[] Images { get; set; }
		
		/// <summary>
		/// The timestamp when the image update happened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class OverrideTaskStepProperties
	{
		
		/// <summary>
		/// Gets or sets the collection of override arguments to be used when
		///executing a build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public Argument[] Arguments { get; set; }
		
		/// <summary>
		/// The source context against which run has to be queued.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextPath")]
		public string ContextPath { get; set; }
		
		/// <summary>
		/// The file against which run has to be queued.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// The name of the target build stage for the docker build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTriggerToken")]
		public string UpdateTriggerToken { get; set; }
		
		/// <summary>
		/// The collection of overridable values that can be passed when running a Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SetValue[] Values { get; set; }
	}
	
	/// <summary>
	/// The properties for updating the platform configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PlatformUpdateParameters
	{
		
		/// <summary>
		/// The OS architecture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public System.Nullable<PlatformUpdateParametersArchitecture> Architecture { get; set; }
		
		/// <summary>
		/// The operating system type required for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="os")]
		public PlatformPropertiesOs Os { get; set; }
		
		/// <summary>
		/// Variant of the CPU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public PlatformPropertiesVariant Variant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum PlatformUpdateParametersArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amd64 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="386")]
		_386 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arm = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arm64 = 4,
	}
	
	/// <summary>
	/// The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ProxyResource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Resource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource. This cannot be changed after the resource is created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Run resource properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Run
	{
		
		/// <summary>
		/// The properties for a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RunProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties for a run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunProperties
	{
		
		/// <summary>
		/// The properties that determine the run agent configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentConfiguration")]
		public AgentProperties AgentConfiguration { get; set; }
		
		/// <summary>
		/// The time the run was scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// The list of custom registries that were logged in during this run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRegistries")]
		public string[] CustomRegistries { get; set; }
		
		/// <summary>
		/// The time the run finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// The image update trigger that caused a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUpdateTrigger")]
		public ImageUpdateTrigger ImageUpdateTrigger { get; set; }
		
		/// <summary>
		/// The value that indicates whether archiving is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isArchiveEnabled")]
		public System.Nullable<System.Boolean> IsArchiveEnabled { get; set; }
		
		/// <summary>
		/// The last updated time for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputImages")]
		public ImageDescriptor[] OutputImages { get; set; }
		
		/// <summary>
		/// The platform properties against which the run has to happen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformProperties Platform { get; set; }
		
		/// <summary>
		/// The provisioning state of a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public System.Nullable<RunPropertiesProvisioningState> ProvisioningState { get; set; }
		
		/// <summary>
		/// The error message received from backend systems after the run is scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runErrorMessage")]
		public string RunErrorMessage { get; set; }
		
		/// <summary>
		/// The unique identifier for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// The type of run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runType")]
		public System.Nullable<RunPropertiesRunType> RunType { get; set; }
		
		/// <summary>
		/// The scope of the credentials that were used to login to the source registry during this run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceRegistryAuth")]
		public string SourceRegistryAuth { get; set; }
		
		/// <summary>
		/// The source trigger that caused a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTrigger")]
		public SourceTriggerDescriptor SourceTrigger { get; set; }
		
		/// <summary>
		/// The time the run started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The current status of the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<RunPropertiesStatus> Status { get; set; }
		
		/// <summary>
		/// The task against which run was scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task")]
		public string Task { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timerTrigger")]
		public TimerTriggerDescriptor TimerTrigger { get; set; }
		
		/// <summary>
		/// The update trigger token passed for the Run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTriggerToken")]
		public string UpdateTriggerToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunPropertiesRunType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuickBuild = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QuickRun = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoBuild = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoRun = 3,
	}
	
	/// <summary>
	/// The source trigger that caused a run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceTriggerDescriptor
	{
		
		/// <summary>
		/// The branch name in the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// The unique ID that identifies a commit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		/// <summary>
		/// The event type of the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// The unique ID of the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The source control provider type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerType")]
		public string ProviderType { get; set; }
		
		/// <summary>
		/// The unique ID that identifies pull request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// The repository URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryUrl")]
		public string RepositoryUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum RunPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Timeout = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimerTriggerDescriptor
	{
		
		/// <summary>
		/// The occurrence that triggered the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleOccurrence")]
		public string ScheduleOccurrence { get; set; }
		
		/// <summary>
		/// The timer trigger name that caused the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timerTriggerName")]
		public string TimerTriggerName { get; set; }
	}
	
	/// <summary>
	/// Properties that are enabled for Odata querying on runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunFilter
	{
		
		/// <summary>
		/// The create time for a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// The time the run finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		/// <summary>
		/// The value that indicates whether archiving is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isArchiveEnabled")]
		public System.Nullable<System.Boolean> IsArchiveEnabled { get; set; }
		
		/// <summary>
		/// The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of
		///build type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputImageManifests")]
		public string OutputImageManifests { get; set; }
		
		/// <summary>
		/// The unique identifier for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// The type of run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runType")]
		public RunPropertiesRunType RunType { get; set; }
		
		/// <summary>
		/// The current status of the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RunPropertiesStatus Status { get; set; }
		
		/// <summary>
		/// The name of the task that the run corresponds to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskName")]
		public string TaskName { get; set; }
	}
	
	/// <summary>
	/// The result of get log link operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunGetLogResult
	{
		
		/// <summary>
		/// The link to logs for a run on a azure container registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLink")]
		public string LogLink { get; set; }
	}
	
	/// <summary>
	/// Collection of runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Run[] Value { get; set; }
	}
	
	/// <summary>
	/// The request parameters for scheduling a run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunRequest
	{
		
		/// <summary>
		/// The value that indicates whether archiving is enabled for the run or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isArchiveEnabled")]
		public System.Nullable<System.Boolean> IsArchiveEnabled { get; set; }
		
		/// <summary>
		/// The type of the run request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The set of run properties that can be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RunUpdateParameters
	{
		
		/// <summary>
		/// The value that indicates whether archiving is enabled or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isArchiveEnabled")]
		public System.Nullable<System.Boolean> IsArchiveEnabled { get; set; }
	}
	
	/// <summary>
	/// The properties of the source code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceProperties
	{
		
		/// <summary>
		/// The branch name of the source code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// The full URL to the source code repository
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryUrl")]
		public string RepositoryUrl { get; set; }
		
		/// <summary>
		/// The authorization properties for accessing the source code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceControlAuthProperties")]
		public AuthInfo SourceControlAuthProperties { get; set; }
		
		/// <summary>
		/// The type of source control service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceControlType")]
		public SourcePropertiesSourceControlType SourceControlType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SourcePropertiesSourceControlType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Github = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VisualStudioTeamService = 1,
	}
	
	/// <summary>
	/// The properties of a source based trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceTrigger
	{
		
		/// <summary>
		/// The name of the trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties of the source code repository.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceRepository")]
		public SourceProperties SourceRepository { get; set; }
		
		/// <summary>
		/// The source event corresponding to the trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceTriggerEvents")]
		public string[] SourceTriggerEvents { get; set; }
		
		/// <summary>
		/// The current status of trigger.
		/// </summary>
		[System.ComponentModel.DefaultValue(BaseImageTriggerStatus.Enabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BaseImageTriggerStatus Status { get; set; } = BaseImageTriggerStatus.Enabled;
	}
	
	/// <summary>
	/// The properties for updating a source based trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceTriggerUpdateParameters
	{
		
		/// <summary>
		/// The name of the trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The properties for updating the source code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceRepository")]
		public SourceUpdateParameters SourceRepository { get; set; }
		
		/// <summary>
		/// The source event corresponding to the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTriggerEvents")]
		public string[] SourceTriggerEvents { get; set; }
		
		/// <summary>
		/// The current status of trigger.
		/// </summary>
		[System.ComponentModel.DefaultValue(BaseImageTriggerStatus.Enabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BaseImageTriggerStatus Status { get; set; } = BaseImageTriggerStatus.Enabled;
	}
	
	/// <summary>
	/// The properties for updating the source code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceUpdateParameters
	{
		
		/// <summary>
		/// The branch name of the source code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// The full URL to the source code repository
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryUrl")]
		public string RepositoryUrl { get; set; }
		
		/// <summary>
		/// The authorization properties for accessing the source code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceControlAuthProperties")]
		public AuthInfoUpdateParameters SourceControlAuthProperties { get; set; }
		
		/// <summary>
		/// The type of source control service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceControlType")]
		public SourcePropertiesSourceControlType SourceControlType { get; set; }
	}
	
	/// <summary>
	/// The properties of a response to source upload request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SourceUploadDefinition
	{
		
		/// <summary>
		/// The relative path to the source. This is used to submit the subsequent queue build request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		/// <summary>
		/// The URL where the client can upload the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadUrl")]
		public string UploadUrl { get; set; }
	}
	
	/// <summary>
	/// The task that has the ARM resource and task properties. 
	///The task will have all information to schedule a run against it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Task_
	{
		
		/// <summary>
		/// Managed identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityProperties Identity { get; set; }
		
		/// <summary>
		/// The properties of a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TaskProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskProperties
	{
		
		/// <summary>
		/// The properties that determine the run agent configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentConfiguration")]
		public AgentProperties AgentConfiguration { get; set; }
		
		/// <summary>
		/// The creation date of task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The parameters that describes a set of credentials that will be used when a run is invoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		/// <summary>
		/// The platform properties against which the run has to happen.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformProperties Platform { get; set; }
		
		/// <summary>
		/// The provisioning state of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public RunPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The current status of task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BaseImageTriggerStatus Status { get; set; }
		
		/// <summary>
		/// Base properties for any task step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="step")]
		public TaskStepProperties Step { get; set; }
		
		/// <summary>
		/// Run timeout in seconds.
		/// Minimum: 300
		/// Maximum: 28800
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		[System.ComponentModel.DataAnnotations.Range(300, 28800)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// The properties of a trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public TriggerProperties Trigger { get; set; }
	}
	
	/// <summary>
	/// Base properties for any task step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskStepProperties
	{
		
		/// <summary>
		/// List of base image dependencies for a step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseImageDependencies")]
		public BaseImageDependency[] BaseImageDependencies { get; set; }
		
		/// <summary>
		/// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextAccessToken")]
		public string ContextAccessToken { get; set; }
		
		/// <summary>
		/// The URL(absolute or relative) of the source context for the task step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextPath")]
		public string ContextPath { get; set; }
		
		/// <summary>
		/// The type of the step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TaskStepPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum TaskStepPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Docker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FileTask = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EncodedTask = 2,
	}
	
	/// <summary>
	/// The properties of a trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerProperties
	{
		
		/// <summary>
		/// The trigger based on base image dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseImageTrigger")]
		public BaseImageTrigger BaseImageTrigger { get; set; }
		
		/// <summary>
		/// The collection of triggers based on source code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTriggers")]
		public SourceTrigger[] SourceTriggers { get; set; }
		
		/// <summary>
		/// The collection of timer triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timerTriggers")]
		public TimerTrigger[] TimerTriggers { get; set; }
	}
	
	/// <summary>
	/// The properties of a timer trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimerTrigger
	{
		
		/// <summary>
		/// The name of the trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The CRON expression for the task schedule
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public string Schedule { get; set; }
		
		/// <summary>
		/// The current status of trigger.
		/// </summary>
		[System.ComponentModel.DefaultValue(BaseImageTriggerStatus.Enabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BaseImageTriggerStatus Status { get; set; } = BaseImageTriggerStatus.Enabled;
	}
	
	/// <summary>
	/// The collection of tasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Task_[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties for updating a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskPropertiesUpdateParameters
	{
		
		/// <summary>
		/// The properties that determine the run agent configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentConfiguration")]
		public AgentProperties AgentConfiguration { get; set; }
		
		/// <summary>
		/// The parameters that describes a set of credentials that will be used when a run is invoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		/// <summary>
		/// The properties for updating the platform configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public PlatformUpdateParameters Platform { get; set; }
		
		/// <summary>
		/// The current status of task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BaseImageTriggerStatus Status { get; set; }
		
		/// <summary>
		/// Base properties for updating any task step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public TaskStepUpdateParameters Step { get; set; }
		
		/// <summary>
		/// Run timeout in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// The properties for updating triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public TriggerUpdateParameters Trigger { get; set; }
	}
	
	/// <summary>
	/// Base properties for updating any task step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskStepUpdateParameters
	{
		
		/// <summary>
		/// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextAccessToken")]
		public string ContextAccessToken { get; set; }
		
		/// <summary>
		/// The URL(absolute or relative) of the source context for the task step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contextPath")]
		public string ContextPath { get; set; }
		
		/// <summary>
		/// The type of the step.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TaskStepPropertiesType Type { get; set; }
	}
	
	/// <summary>
	/// The properties for updating triggers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TriggerUpdateParameters
	{
		
		/// <summary>
		/// The properties for updating base image dependency trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseImageTrigger")]
		public BaseImageTriggerUpdateParameters BaseImageTrigger { get; set; }
		
		/// <summary>
		/// The collection of triggers based on source code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTriggers")]
		public SourceTriggerUpdateParameters[] SourceTriggers { get; set; }
		
		/// <summary>
		/// The collection of timer triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timerTriggers")]
		public TimerTriggerUpdateParameters[] TimerTriggers { get; set; }
	}
	
	/// <summary>
	/// The properties for updating a timer trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TimerTriggerUpdateParameters
	{
		
		/// <summary>
		/// The name of the trigger.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The CRON expression for the task schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public string Schedule { get; set; }
		
		/// <summary>
		/// The current status of trigger.
		/// </summary>
		[System.ComponentModel.DefaultValue(BaseImageTriggerStatus.Enabled)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BaseImageTriggerStatus Status { get; set; } = BaseImageTriggerStatus.Enabled;
	}
	
	/// <summary>
	/// The task run that has the ARM resource and properties. 
	///The task run will have the information of request and result of a run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskRun
	{
		
		/// <summary>
		/// Managed identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityProperties Identity { get; set; }
		
		/// <summary>
		/// The properties of task run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TaskRunProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The properties of task run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskRunProperties
	{
		
		/// <summary>
		/// How the run should be forced to rerun even if the run request configuration has not changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceUpdateTag")]
		public string ForceUpdateTag { get; set; }
		
		/// <summary>
		/// The provisioning state of this task run
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningState")]
		public RunPropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// The request parameters for scheduling a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runRequest")]
		public RunRequest RunRequest { get; set; }
		
		/// <summary>
		/// Run resource properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runResult")]
		public Run RunResult { get; set; }
	}
	
	/// <summary>
	/// The collection of task runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskRunListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public TaskRun[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a task run update parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskRunPropertiesUpdateParameters
	{
		
		/// <summary>
		/// How the run should be forced to rerun even if the run request configuration has not changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceUpdateTag")]
		public string ForceUpdateTag { get; set; }
		
		/// <summary>
		/// The request parameters for scheduling a run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runRequest")]
		public RunRequest RunRequest { get; set; }
	}
	
	/// <summary>
	/// The parameters for a task run request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskRunRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="overrideTaskStepProperties")]
		public OverrideTaskStepProperties OverrideTaskStepProperties { get; set; }
		
		/// <summary>
		/// The resource ID of task against which run has to be queued.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a task run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskRunUpdateParameters
	{
		
		/// <summary>
		/// Managed identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityProperties Identity { get; set; }
		
		/// <summary>
		/// The properties of a task run update parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TaskRunPropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// The ARM resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class TaskUpdateParameters
	{
		
		/// <summary>
		/// Managed identity for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public IdentityProperties Identity { get; set; }
		
		/// <summary>
		/// The properties for updating a task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TaskPropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// The ARM resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the upload location for the user to be able to upload the source.
		/// Registries_GetBuildSourceUploadUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<SourceUploadDefinition> Registries_GetBuildSourceUploadUrlAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/listBuildSourceUploadUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SourceUploadDefinition>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the runs for a registry.
		/// Runs_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="filter">The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed.</param>
		/// <param name="top">$top is supported for get list of runs, which limits the maximum number of runs to return.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<RunListResult> Runs_ListAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string filter, int top)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/runs&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version))+"&$filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&$top="+top;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RunListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the detailed information for a given run.
		/// Runs_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="runId">The run ID.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Run> Runs_GetAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string runId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Run>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patch the run properties.
		/// Runs_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="runId">The run ID.</param>
		/// <param name="requestBody">The run update properties.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Run> Runs_UpdateAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string runId, RunUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Run>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancel an existing run.
		/// Runs_Cancel subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/cancel
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="runId">The run ID.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Runs_CancelAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string runId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/cancel&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a link to download the run logs.
		/// Runs_GetLogSasUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/listLogSasUrl
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="runId">The run ID.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<RunGetLogResult> Runs_GetLogSasUrlAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string runId)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/runs/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/listLogSasUrl&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RunGetLogResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Schedules a new run based on the request parameters and add it to the run queue.
		/// Registries_ScheduleRun subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters of a run that needs to scheduled.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Run> Registries_ScheduleRunAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, RunRequest requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/scheduleRun&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Run>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the task runs for a specified container registry.
		/// TaskRuns_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<TaskRunListResult> TaskRuns_ListAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/taskRuns&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskRunListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the detailed information for a given task run.
		/// TaskRuns_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskRunName">The run request name.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<TaskRun> TaskRuns_GetAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskRunName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/taskRuns/"+ (taskRunName==null? "" : System.Uri.EscapeDataString(taskRunName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskRun>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task run for a container registry with the specified parameters.
		/// TaskRuns_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskRunName">The name of task run.</param>
		/// <param name="requestBody">The parameters of a run that needs to scheduled.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<TaskRun> TaskRuns_CreateAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskRunName, TaskRun requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/taskRuns/"+ (taskRunName==null? "" : System.Uri.EscapeDataString(taskRunName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskRun>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a specified task run resource.
		/// TaskRuns_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskRunName">The task run name.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task TaskRuns_DeleteAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskRunName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/taskRuns/"+ (taskRunName==null? "" : System.Uri.EscapeDataString(taskRunName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a task run with the specified parameters.
		/// TaskRuns_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskRunName">The task run name.</param>
		/// <param name="requestBody">The parameters for updating a task run.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<TaskRun> TaskRuns_UpdateAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskRunName, TaskRunUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/taskRuns/"+ (taskRunName==null? "" : System.Uri.EscapeDataString(taskRunName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskRun>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the tasks for a specified container registry.
		/// Tasks_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<TaskListResult> Tasks_ListAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tasks&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TaskListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the properties of a specified task.
		/// Tasks_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskName">The name of the container registry task.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Task_> Tasks_GetAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Task_>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a task for a container registry with the specified parameters.
		/// Tasks_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskName">The name of the container registry task.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for creating a task.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Task_> Tasks_CreateAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskName, Task_ requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Task_>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a specified task.
		/// Tasks_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskName">The name of the container registry task.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task Tasks_DeleteAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a task with the specified parameters.
		/// Tasks_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskName">The name of the container registry task.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="requestBody">The parameters for updating a task.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Task_> Tasks_UpdateAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskName, TaskUpdateParameters requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Task_>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a task with extended information that includes all secrets.
		/// Tasks_GetDetails subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.
		/// Min length: 1
		// </param>
		/// <param name="registryName">The name of the container registry.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="taskName">The name of the container registry task.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<Task_> Tasks_GetDetailsAsync(string subscriptionId, string resourceGroupName, string registryName, string api_version, string taskName)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ContainerRegistry/registries/"+ (registryName==null? "" : System.Uri.EscapeDataString(registryName))+"/tasks/"+ (taskName==null? "" : System.Uri.EscapeDataString(taskName))+"/listDetails&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Task_>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
