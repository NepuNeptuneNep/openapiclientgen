//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A list of sync database ID properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncDatabaseIdListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SyncDatabaseIdProperties[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of the sync database id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncDatabaseIdProperties
	{
		
		/// <summary>
		/// ARM resource id of sync database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Properties of the database full schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncFullSchemaProperties
	{
		
		/// <summary>
		/// Last update time of the database schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// List of tables in the database full schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tables")]
		public SyncFullSchemaTable[] Tables { get; set; }
	}
	
	/// <summary>
	/// Properties of the table in the database full schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncFullSchemaTable
	{
		
		/// <summary>
		/// List of columns in the table of database full schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public SyncFullSchemaTableColumn[] Columns { get; set; }
		
		/// <summary>
		/// Error id of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorId")]
		public string ErrorId { get; set; }
		
		/// <summary>
		/// If there is error in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasError")]
		public System.Nullable<System.Boolean> HasError { get; set; }
		
		/// <summary>
		/// Name of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Quoted name of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotedName")]
		public string QuotedName { get; set; }
	}
	
	/// <summary>
	/// Properties of the column in the table of database full schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncFullSchemaTableColumn
	{
		
		/// <summary>
		/// Data size of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSize")]
		public string DataSize { get; set; }
		
		/// <summary>
		/// Data type of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Error id of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorId")]
		public string ErrorId { get; set; }
		
		/// <summary>
		/// If there is error in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasError")]
		public System.Nullable<System.Boolean> HasError { get; set; }
		
		/// <summary>
		/// If it is the primary key of the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPrimaryKey")]
		public System.Nullable<System.Boolean> IsPrimaryKey { get; set; }
		
		/// <summary>
		/// Name of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Quoted name of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotedName")]
		public string QuotedName { get; set; }
	}
	
	/// <summary>
	/// A list of sync schema properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncFullSchemaPropertiesListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SyncFullSchemaProperties[] Value { get; set; }
	}
	
	/// <summary>
	/// An Azure SQL Database sync group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroup
	{
		
		/// <summary>
		/// Properties of a sync group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SyncGroupProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a sync group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupProperties
	{
		
		/// <summary>
		/// Conflict resolution policy of the sync group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionPolicy")]
		public System.Nullable<SyncGroupPropertiesConflictResolutionPolicy> ConflictResolutionPolicy { get; set; }
		
		/// <summary>
		/// Password for the sync group hub database credential.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hubDatabasePassword")]
		public string HubDatabasePassword { get; set; }
		
		/// <summary>
		/// User name for the sync group hub database credential.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hubDatabaseUserName")]
		public string HubDatabaseUserName { get; set; }
		
		/// <summary>
		/// Sync interval of the sync group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		/// <summary>
		/// Last sync time of the sync group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSyncTime")]
		public System.Nullable<System.DateTimeOffset> LastSyncTime { get; set; }
		
		/// <summary>
		/// Properties of sync group schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public SyncGroupSchema Schema { get; set; }
		
		/// <summary>
		/// ARM resource id of the sync database in the sync group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncDatabaseId")]
		public string SyncDatabaseId { get; set; }
		
		/// <summary>
		/// Sync state of the sync group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncState")]
		public System.Nullable<SyncGroupPropertiesSyncState> SyncState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SyncGroupPropertiesConflictResolutionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HubWin = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MemberWin = 1,
	}
	
	/// <summary>
	/// Properties of sync group schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupSchema
	{
		
		/// <summary>
		/// Name of master sync member where the schema is from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterSyncMemberName")]
		public string MasterSyncMemberName { get; set; }
		
		/// <summary>
		/// List of tables in sync group schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tables")]
		public SyncGroupSchemaTable[] Tables { get; set; }
	}
	
	/// <summary>
	/// Properties of table in sync group schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupSchemaTable
	{
		
		/// <summary>
		/// List of columns in sync group schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public SyncGroupSchemaTableColumn[] Columns { get; set; }
		
		/// <summary>
		/// Quoted name of sync group schema table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotedName")]
		public string QuotedName { get; set; }
	}
	
	/// <summary>
	/// Properties of column in sync group table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupSchemaTableColumn
	{
		
		/// <summary>
		/// Data size of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSize")]
		public string DataSize { get; set; }
		
		/// <summary>
		/// Data type of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Quoted name of sync group table column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotedName")]
		public string QuotedName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SyncGroupPropertiesSyncState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotReady = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Progressing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Good = 4,
	}
	
	/// <summary>
	/// A list of sync groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SyncGroup[] Value { get; set; }
	}
	
	/// <summary>
	/// A list of sync group log properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupLogListResult
	{
		
		/// <summary>
		/// Link to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Array of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public SyncGroupLogProperties[] Value { get; set; }
	}
	
	/// <summary>
	/// Properties of an Azure SQL Database sync group log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class SyncGroupLogProperties
	{
		
		/// <summary>
		/// Details of the sync group log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// OperationStatus of the sync group log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationStatus")]
		public string OperationStatus { get; set; }
		
		/// <summary>
		/// Source of the sync group log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Timestamp of the sync group log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// TracingId of the sync group log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracingId")]
		public string TracingId { get; set; }
		
		/// <summary>
		/// Type of the sync group log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SyncGroupLogPropertiesType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum SyncGroupLogPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a collection of sync database ids.
		/// SyncGroups_ListSyncDatabaseIds subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds
		/// </summary>
		/// <param name="locationName">The name of the region where the resource is located.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved collection of sync database ids.</returns>
		public async Task<SyncDatabaseIdListResult> SyncGroups_ListSyncDatabaseIdsAsync(string locationName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Sql/locations/"+ (locationName==null? "" : System.Uri.EscapeDataString(locationName))+"/syncDatabaseIds&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncDatabaseIdListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists sync groups under a hub database.
		/// SyncGroups_ListByDatabase subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the list of sync groups.</returns>
		public async Task<SyncGroupListResult> SyncGroups_ListByDatabaseAsync(string resourceGroupName, string serverName, string databaseName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncGroupListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a sync group.
		/// SyncGroups_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved the specified sync group.</returns>
		public async Task<SyncGroup> SyncGroups_GetAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates a sync group.
		/// SyncGroups_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The requested sync group resource state.</param>
		/// <returns>Successfully updated the sync group.</returns>
		public async Task<SyncGroup> SyncGroups_CreateOrUpdateAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version, SyncGroup requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a sync group.
		/// SyncGroups_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully deleted the sync group.</returns>
		public async Task SyncGroups_DeleteAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a sync group.
		/// SyncGroups_Update subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <param name="requestBody">The requested sync group resource state.</param>
		/// <returns>Successfully updated the sync group.</returns>
		public async Task<SyncGroup> SyncGroups_UpdateAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version, SyncGroup requestBody)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Cancels a sync group synchronization.
		/// SyncGroups_CancelSync subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/cancelSync
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully cancel a sync group synchronization.</returns>
		public async Task SyncGroups_CancelSyncAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/cancelSync&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a collection of hub database schemas.
		/// SyncGroups_ListHubSchemas subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/hubSchemas
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully get a sync group hub database schema.</returns>
		public async Task<SyncFullSchemaPropertiesListResult> SyncGroups_ListHubSchemasAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/hubSchemas&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncFullSchemaPropertiesListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a collection of sync group logs.
		/// SyncGroups_ListLogs subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/logs
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="startTime">Get logs generated after this time.</param>
		/// <param name="endTime">Get logs generated before this time.</param>
		/// <param name="type">The types of logs to retrieve.</param>
		/// <param name="continuationToken">The continuation token for this operation.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully retrieved sync group logs.</returns>
		public async Task<SyncGroupLogListResult> SyncGroups_ListLogsAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string startTime, string endTime, SyncGroupLogPropertiesType type, string continuationToken, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/logs&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime))+"&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&type=" + type+"&continuationToken=" + (continuationToken==null? "" : System.Uri.EscapeDataString(continuationToken))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncGroupLogListResult>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Refreshes a hub database schema.
		/// SyncGroups_RefreshHubSchema subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/refreshHubSchema
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully refreshed a sync hub schema.</returns>
		public async Task SyncGroups_RefreshHubSchemaAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/refreshHubSchema&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Triggers a sync group synchronization.
		/// SyncGroups_TriggerSync subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/triggerSync
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serverName">The name of the server.</param>
		/// <param name="databaseName">The name of the database on which the sync group is hosted.</param>
		/// <param name="syncGroupName">The name of the sync group.</param>
		/// <param name="subscriptionId">The subscription ID that identifies an Azure subscription.</param>
		/// <param name="api_version">The API version to use for the request.</param>
		/// <returns>Successfully triggered a sync group synchronization.</returns>
		public async Task SyncGroups_TriggerSyncAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string subscriptionId, string api_version)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : System.Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.Sql/servers/"+ (serverName==null? "" : System.Uri.EscapeDataString(serverName))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/syncGroups/"+ (syncGroupName==null? "" : System.Uri.EscapeDataString(syncGroupName))+"/triggerSync&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
