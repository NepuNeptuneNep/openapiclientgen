//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Auth
	{
		
		[System.Runtime.Serialization.DataMember(Name="apikey")]
		public string Apikey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userkey")]
		public string Userkey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class BasicEpisode
	{
		
		[System.Runtime.Serialization.DataMember(Name="absoluteNumber")]
		public System.Nullable<System.Int32> AbsoluteNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airedEpisodeNumber")]
		public System.Nullable<System.Int32> AiredEpisodeNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airedSeason")]
		public System.Nullable<System.Int32> AiredSeason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dvdEpisodeNumber")]
		public System.Nullable<System.Int32> DvdEpisodeNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dvdSeason")]
		public System.Nullable<System.Int32> DvdSeason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episodeName")]
		public string EpisodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAired")]
		public string FirstAired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public EpisodeLanguageInfo Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.Int32> LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EpisodeLanguageInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="episodeName")]
		public string EpisodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Conflict
	{
		
		[System.ComponentModel.DefaultValue("Conflict")]
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; } = "Conflict";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Episode
	{
		
		[System.Runtime.Serialization.DataMember(Name="absoluteNumber")]
		public System.Nullable<System.Int32> AbsoluteNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airedEpisodeNumber")]
		public System.Nullable<System.Int32> AiredEpisodeNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airedSeason")]
		public System.Nullable<System.Int32> AiredSeason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airsAfterSeason")]
		public System.Nullable<System.Int32> AirsAfterSeason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airsBeforeEpisode")]
		public System.Nullable<System.Int32> AirsBeforeEpisode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airsBeforeSeason")]
		public System.Nullable<System.Int32> AirsBeforeSeason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="director")]
		public string Director { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directors")]
		public string[] Directors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dvdChapter")]
		public System.Nullable<System.Double> DvdChapter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dvdDiscid")]
		public string DvdDiscid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dvdEpisodeNumber")]
		public System.Nullable<System.Double> DvdEpisodeNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dvdSeason")]
		public System.Nullable<System.Int32> DvdSeason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episodeName")]
		public string EpisodeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAired")]
		public string FirstAired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guestStars")]
		public string[] GuestStars { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imdbId")]
		public string ImdbId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.Int32> LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public string LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productionCode")]
		public string ProductionCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesId")]
		public string SeriesId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUrl")]
		public string ShowUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="siteRating")]
		public System.Nullable<System.Double> SiteRating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="siteRatingCount")]
		public System.Nullable<System.Int32> SiteRatingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbAdded")]
		public string ThumbAdded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbAuthor")]
		public System.Nullable<System.Int32> ThumbAuthor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbHeight")]
		public string ThumbHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbWidth")]
		public string ThumbWidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="writers")]
		public string[] Writers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EpisodeDataQueryParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class EpisodeRecordData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Episode Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class JSONErrors
	{
		
		/// <summary>
		/// Invalid filters passed to route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidFilters")]
		public string[] InvalidFilters { get; set; }
		
		/// <summary>
		/// Invalid language or translation missing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidLanguage")]
		public string InvalidLanguage { get; set; }
		
		/// <summary>
		/// Invalid query params passed to route
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidQueryParams")]
		public string[] InvalidQueryParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class FilterKeys
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Language
	{
		
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class LanguageData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Language[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public System.Nullable<System.Int32> First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Int32> Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public System.Nullable<System.Int32> Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public System.Nullable<System.Int32> Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NotAuthorized
	{
		
		[System.ComponentModel.DefaultValue("Not Authorized")]
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; } = "Not Authorized";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class NotFound
	{
		
		[System.ComponentModel.DefaultValue("Not Found")]
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; } = "Not Found";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Series
	{
		
		[System.Runtime.Serialization.DataMember(Name="added")]
		public string Added { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airsDayOfWeek")]
		public string AirsDayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airsTime")]
		public string AirsTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="banner")]
		public string Banner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAired")]
		public string FirstAired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genre")]
		public string[] Genre { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imdbId")]
		public string ImdbId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.Int32> LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public string Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtime")]
		public string Runtime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesId")]
		public string SeriesId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesName")]
		public string SeriesName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="siteRating")]
		public System.Nullable<System.Double> SiteRating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="siteRatingCount")]
		public System.Nullable<System.Int32> SiteRatingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zap2itId")]
		public string Zap2itId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesActors
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SeriesActorsData[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesActorsData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageAdded")]
		public string ImageAdded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageAuthor")]
		public System.Nullable<System.Int32> ImageAuthor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesId")]
		public System.Nullable<System.Int32> SeriesId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Series Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesEpisodes
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Episode[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesEpisodesQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Episode[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesEpisodesQueryParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesEpisodesSummary
	{
		
		/// <summary>
		/// Number of all aired episodes for this series
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airedEpisodes")]
		public string AiredEpisodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="airedSeasons")]
		public string[] AiredSeasons { get; set; }
		
		/// <summary>
		/// Number of all dvd episodes for this series
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dvdEpisodes")]
		public string DvdEpisodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dvdSeasons")]
		public string[] DvdSeasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesImageQueryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public string KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languageId")]
		public System.Nullable<System.Int32> LanguageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingsInfo")]
		public SeriesImageQueryResultRatingsInfo RatingsInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string Resolution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subKey")]
		public string SubKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
	}
	
	public class SeriesImageQueryResultRatingsInfo
	{
		
		/// <summary>
		/// Average rating for the given record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Double> Average { get; set; }
		
		/// <summary>
		/// Number of ratings for the given record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesImageQueryResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SeriesImageQueryResult[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesImagesCount
	{
		
		[System.Runtime.Serialization.DataMember(Name="fanart")]
		public System.Nullable<System.Int32> Fanart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poster")]
		public System.Nullable<System.Int32> Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="season")]
		public System.Nullable<System.Int32> Season { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seasonwide")]
		public System.Nullable<System.Int32> Seasonwide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="series")]
		public System.Nullable<System.Int32> Series { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesImagesCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SeriesImagesCount Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesImagesQueryParam
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public string KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languageId")]
		public string LanguageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public string[] Resolution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subKey")]
		public string[] SubKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesImagesQueryParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SeriesImagesQueryParam[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="banner")]
		public string Banner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAired")]
		public string FirstAired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesName")]
		public string SeriesName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class SeriesSearchResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SeriesSearchResult[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Token
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class Update
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.Int32> LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UpdateData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Update[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UpdateDataQueryParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="favoritesDisplaymode")]
		public string FavoritesDisplaymode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public User Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserFavorites
	{
		
		[System.Runtime.Serialization.DataMember(Name="favorites")]
		public string[] Favorites { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserFavoritesData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserFavorites Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserRatings
	{
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Int32> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingItemId")]
		public System.Nullable<System.Int32> RatingItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingType")]
		public string RatingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserRatingsData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserRatings[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public JSONErrors Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserRatingsDataNoLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UserRatings[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserRatingsDataNoLinksEmptyArray
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	[System.SerializableAttribute()]
	public class UserRatingsQueryParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the full information for a given episode id. __Deprecation Warning:__ The _director_ key will be deprecated in favor of the new _directors_ key in a future release.
		/// Episodes_idGet episodes/{id}
		/// </summary>
		/// <param name="id">ID of the episode</param>
		/// <returns>An array of query keys as strings</returns>
		public async Task<EpisodeRecordData> Episodes_idGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EpisodeRecordData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All available languages. These language abbreviations can be used in the `Accept-Language` header for routes that return translation records.
		/// LanguagesGet languages
		/// </summary>
		/// <returns>An array of language objects.</returns>
		public async Task<LanguageData> LanguagesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "languages";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<LanguageData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Information about a particular language, given the language ID.
		/// Languages_idGet languages/{id}
		/// </summary>
		/// <param name="id">ID of the language</param>
		/// <returns>An array of language objects.</returns>
		public async Task<Language> Languages_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "languages/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Language>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a session token to be included in the rest of the requests. Note that API key authentication is required for all subsequent requests and user auth is required for routes in the `User` section
		/// LoginPost login
		/// </summary>
		/// <param name="requestBody">JSON string containing your authentication details.</param>
		/// <returns>Returns a JWT token for use with the rest of the API routes</returns>
		public async Task<Token> LoginPostAsync(Auth requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "login";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Refreshes your current, valid JWT token and returns a new token. Hit this route so that you do not have to post to `/login` with your API key and credentials once you have already been authenticated.
		/// Refresh_tokenGet refresh_token
		/// </summary>
		/// <returns>Returns a new token to use in your subsequent requests</returns>
		public async Task<Token> Refresh_tokenGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "refresh_token";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Token>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allows the user to search for a series based on the following parameters.
		/// SearchSeriesGetByNameAndImdbIdAndZap2itIdAndSlug search/series
		/// </summary>
		/// <param name="name">Name of the series to search for.</param>
		/// <param name="imdbId">IMDB id of the series</param>
		/// <param name="zap2itId">Zap2it ID of the series to search for.</param>
		/// <param name="slug">Slug from site URL of series (https://www.thetvdb.com/series/$SLUG)</param>
		/// <returns>An array of results that match the provided query.</returns>
		public async Task<SeriesSearchResults> SearchSeriesGetByNameAndImdbIdAndZap2itIdAndSlugAsync(string name, string imdbId, string zap2itId, string slug, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/series?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&imdbId=" + (imdbId==null? "" : System.Uri.EscapeDataString(imdbId))+"&zap2itId=" + (zap2itId==null? "" : System.Uri.EscapeDataString(zap2itId))+"&slug=" + (slug==null? "" : System.Uri.EscapeDataString(slug));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesSearchResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of parameters to query by in the `/search/series` route.
		/// SearchSeriesParamsGet search/series/params
		/// </summary>
		/// <returns>An array of query keys as strings</returns>
		public async Task<EpisodeDataQueryParams> SearchSeriesParamsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/series/params";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<EpisodeDataQueryParams>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a series records that contains all information known about a particular series id.
		/// Series_idGet series/{id}
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>A series record.</returns>
		public async Task<SeriesData> Series_idGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns actors for the given series id
		/// Series_idActorsGet series/{id}/actors
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>An array of actor objects for the given series id.</returns>
		public async Task<SeriesActors> Series_idActorsGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/actors";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesActors>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All episodes for a given series. Paginated with 100 results per page.
		/// Series_idEpisodesGetByPage series/{id}/episodes
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <param name="page">Page of results to fetch. Defaults to page 1 if not provided.</param>
		/// <returns>An array of episode objects for the given series id.</returns>
		public async Task<SeriesEpisodes> Series_idEpisodesGetByPageAsync(long id, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/episodes?page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesEpisodes>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This route allows the user to query against episodes for the given series. The response is a paginated array of episode records.
		/// Series_idEpisodesQueryGetByAbsoluteNumberAndAiredSeasonAndAiredEpisodeAndDvdSeasonAndDvdEpisodeAndImdbIdAndPage series/{id}/episodes/query
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <param name="absoluteNumber">Absolute number of the episode</param>
		/// <param name="airedSeason">Aired season number</param>
		/// <param name="airedEpisode">Aired episode number</param>
		/// <param name="dvdSeason">DVD season number</param>
		/// <param name="dvdEpisode">DVD episode number</param>
		/// <param name="imdbId">IMDB id of the series</param>
		/// <param name="page">Page of results to fetch. Defaults to page 1 if not provided.</param>
		/// <returns>An array of basic Episode results that matched the query</returns>
		public async Task<SeriesEpisodesQuery> Series_idEpisodesQueryGetByAbsoluteNumberAndAiredSeasonAndAiredEpisodeAndDvdSeasonAndDvdEpisodeAndImdbIdAndPageAsync(long id, string absoluteNumber, string airedSeason, string airedEpisode, string dvdSeason, string dvdEpisode, string imdbId, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/episodes/query?absoluteNumber=" + (absoluteNumber==null? "" : System.Uri.EscapeDataString(absoluteNumber))+"&airedSeason=" + (airedSeason==null? "" : System.Uri.EscapeDataString(airedSeason))+"&airedEpisode=" + (airedEpisode==null? "" : System.Uri.EscapeDataString(airedEpisode))+"&dvdSeason=" + (dvdSeason==null? "" : System.Uri.EscapeDataString(dvdSeason))+"&dvdEpisode=" + (dvdEpisode==null? "" : System.Uri.EscapeDataString(dvdEpisode))+"&imdbId=" + (imdbId==null? "" : System.Uri.EscapeDataString(imdbId))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesEpisodesQuery>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the allowed query keys for the `/series/{id}/episodes/query` route
		/// Series_idEpisodesQueryParamsGet series/{id}/episodes/query/params
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>An array of query keys as strings</returns>
		public async Task<SeriesEpisodesQueryParams> Series_idEpisodesQueryParamsGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/episodes/query/params";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesEpisodesQueryParams>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a summary of the episodes and seasons available for the series.
		/// 
		/// __Note__: Season "0" is for all episodes that are considered to be specials.
		/// Series_idEpisodesSummaryGet series/{id}/episodes/summary
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>A summary of the episodes and seasons avaialable for the given series.</returns>
		public async Task<SeriesEpisodesSummary> Series_idEpisodesSummaryGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/episodes/summary";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesEpisodesSummary>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a series records, filtered by the supplied comma-separated list of keys. Query keys can be found at the `/series/{id}/filter/params` route.
		/// Series_idFilterGetByKeys series/{id}/filter
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <param name="keys">Comma-separated list of keys to filter by</param>
		/// <returns>A filtered series record</returns>
		public async Task<SeriesData> Series_idFilterGetByKeysAsync(long id, string keys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/filter?keys=" + (keys==null? "" : System.Uri.EscapeDataString(keys));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the list of keys available for the `/series/{id}/filter` route
		/// Series_idFilterParamsGet series/{id}/filter/params
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>A list of keys to filter by</returns>
		public async Task<FilterKeys> Series_idFilterParamsGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/filter/params";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FilterKeys>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a summary of the images for a particular series
		/// Series_idImagesGet series/{id}/images
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>A summary of the image types and counts available for the given series.</returns>
		public async Task<SeriesImagesCounts> Series_idImagesGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/images";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesImagesCounts>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Query images for the given series ID.
		/// Series_idImagesQueryGetByKeyTypeAndResolutionAndSubKey series/{id}/images/query
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <param name="keyType">Type of image you're querying for (fanart, poster, etc. See ../images/query/params for more details).</param>
		/// <param name="resolution">Resolution to filter by (1280x1024, for example)</param>
		/// <param name="subKey">Subkey for the above query keys. See /series/{id}/images/query/params for more information</param>
		/// <returns>An array of basic Episode results that matched the query</returns>
		public async Task<SeriesImageQueryResults> Series_idImagesQueryGetByKeyTypeAndResolutionAndSubKeyAsync(long id, string keyType, string resolution, string subKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/images/query?keyType=" + (keyType==null? "" : System.Uri.EscapeDataString(keyType))+"&resolution=" + (resolution==null? "" : System.Uri.EscapeDataString(resolution))+"&subKey=" + (subKey==null? "" : System.Uri.EscapeDataString(subKey));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesImageQueryResults>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the allowed query keys for the `/series/{id}/images/query` route. Contains a parameter record for each unique `keyType`, listing values that will return results.
		/// Series_idImagesQueryParamsGet series/{id}/images/query/params
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>An array of query keys as strings</returns>
		public async Task<SeriesImagesQueryParams> Series_idImagesQueryParamsGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "series/"+id+"/images/query/params";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SeriesImagesQueryParams>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of series that have changed in a maximum of one week blocks since the provided `fromTime`.
		/// 
		/// 
		/// The user may specify a `toTime` to grab results for less than a week. Any timespan larger than a week will be reduced down to one week automatically.
		/// UpdatedQueryGetByFromTimeAndToTime updated/query
		/// </summary>
		/// <param name="fromTime">Epoch time to start your date range.</param>
		/// <param name="toTime">Epoch time to end your date range. Must be one week from `fromTime`.</param>
		/// <returns>An array of Update objects that match the given timeframe.</returns>
		public async Task<UpdateData> UpdatedQueryGetByFromTimeAndToTimeAsync(string fromTime, string toTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updated/query?fromTime=" + (fromTime==null? "" : System.Uri.EscapeDataString(fromTime))+"&toTime=" + (toTime==null? "" : System.Uri.EscapeDataString(toTime));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of valid query keys for the `/updated/query/params` route.
		/// UpdatedQueryParamsGet updated/query/params
		/// </summary>
		/// <returns>An array of Update objects that match the given timeframe.</returns>
		public async Task<UpdateDataQueryParams> UpdatedQueryParamsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updated/query/params";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateDataQueryParams>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns basic information about the currently authenticated user.
		/// UserGet user
		/// </summary>
		/// <returns>User information.</returns>
		public async Task<UserData> UserGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of favorite series for a given user, will be a blank array if no favorites exist.
		/// UserFavoritesGet user/favorites
		/// </summary>
		/// <returns>User favorites.</returns>
		public async Task<UserFavoritesData> UserFavoritesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/favorites";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserFavoritesData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds the supplied series ID to the user’s favorite’s list and returns the updated list.
		/// UserFavorites_idPut user/favorites/{id}
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>List of user favorites.</returns>
		public async Task<UserFavoritesData> UserFavorites_idPutAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/favorites/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserFavoritesData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the given series ID from the user’s favorite’s list and returns the updated list.
		/// UserFavorites_idDelete user/favorites/{id}
		/// </summary>
		/// <param name="id">ID of the series</param>
		/// <returns>List of user favorites.</returns>
		public async Task<UserFavoritesData> UserFavorites_idDeleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/favorites/"+id;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserFavoritesData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of ratings for the given user.
		/// UserRatingsGet user/ratings
		/// </summary>
		/// <returns>Array of user ratings.</returns>
		public async Task<UserRatingsData> UserRatingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/ratings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserRatingsData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of ratings for a given user that match the query.
		/// UserRatingsQueryGetByItemType user/ratings/query
		/// </summary>
		/// <param name="itemType">Item to query. Can be either 'series', 'episode', or 'banner'</param>
		/// <returns>List of user ratings that match the given query.</returns>
		public async Task<UserRatingsData> UserRatingsQueryGetByItemTypeAsync(string itemType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/ratings/query?itemType=" + (itemType==null? "" : System.Uri.EscapeDataString(itemType));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserRatingsData>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of query params for use in the `/user/ratings/query` route.
		/// UserRatingsQueryParamsGet user/ratings/query/params
		/// </summary>
		/// <returns>Parameters to use for querying.</returns>
		public async Task<UserRatingsQueryParams> UserRatingsQueryParamsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/ratings/query/params";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserRatingsQueryParams>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This route deletes a given rating of a given type.
		/// UserRatings_itemType_itemIdDelete user/ratings/{itemType}/{itemId}
		/// </summary>
		/// <param name="itemType">Item to update. Can be either 'series', 'episode', or 'image'</param>
		/// <param name="itemId">ID of the ratings record that you wish to modify</param>
		/// <returns>Returns OK if the delete was successful</returns>
		public async Task<UserRatingsDataNoLinksEmptyArray> UserRatings_itemType_itemIdDeleteAsync(string itemType, long itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/ratings/"+ (itemType==null? "" : System.Uri.EscapeDataString(itemType))+"/"+itemId;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserRatingsDataNoLinksEmptyArray>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// This route updates a given rating of a given type.
		/// UserRatings_itemType_itemId_itemRatingPut user/ratings/{itemType}/{itemId}/{itemRating}
		/// </summary>
		/// <param name="itemType">Item to update. Can be either 'series', 'episode', or 'image'</param>
		/// <param name="itemId">ID of the ratings record that you wish to modify</param>
		/// <param name="itemRating">The updated rating number</param>
		/// <returns>Update OK if the update was successful</returns>
		public async Task<UserRatingsDataNoLinks> UserRatings_itemType_itemId_itemRatingPutAsync(string itemType, long itemId, long itemRating, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/ratings/"+ (itemType==null? "" : System.Uri.EscapeDataString(itemType))+"/"+itemId+"/"+itemRating;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserRatingsDataNoLinks>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
