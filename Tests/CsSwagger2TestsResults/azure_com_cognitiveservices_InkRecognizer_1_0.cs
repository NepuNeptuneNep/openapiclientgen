//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AlternatePatternElement
	{
		
		/// <summary>
		/// The category of recognition units that represent types that don't have children recognition units.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public AlternatePatternElementCategory Category { get; set; }
		
		/// <summary>
		/// A number between 0 and 1 which indicates the confidence level in the result
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Array of point objects that represent points that are relevant to the type of recognition unit. For example, for leaf node of inkDrawing category that represents a triangle, points would include the x,y coordinates of the vertices of the recognized triangle. The points represent the coordinates of points used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		public PointDetailsPattern[] Points { get; set; }
		
		/// <summary>
		/// The recognized string from an inkWord or the name of a recognized shape in an inkDrawing object
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recognizedString")]
		public string RecognizedString { get; set; }
		
		/// <summary>
		/// The angular orientation of an object relative to the horizontal axis
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotationAngle")]
		public System.Nullable<System.Double> RotationAngle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AlternatePatternElementCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkDrawing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkBullet = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkWord = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 3,
	}
	
	/// <summary>
	/// This holds all the properties of one point
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class PointDetailsPattern
	{
		
		/// <summary>
		/// This represents the x coordinate of the point
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		public double X { get; set; }
		
		/// <summary>
		/// This represents the y coordinate of the point
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		public double Y { get; set; }
	}
	
	/// <summary>
	/// This shows the expected contents of a request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisRequest
	{
		
		/// <summary>
		/// This describes the domain of the client application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationType")]
		public System.Nullable<AnalysisRequestApplicationType> ApplicationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inkPointValueAttributes")]
		public InkPointValueAttribute[] InkPointValueAttributes { get; set; }
		
		/// <summary>
		/// This identifies the kind of device used as the writing instrument
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputDeviceKind")]
		public System.Nullable<AnalysisRequestInputDeviceKind> InputDeviceKind { get; set; }
		
		/// <summary>
		/// The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in the ink strokes. The response will include results from this language.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// This is the array of strokes sent for recognition. Best results are produced when the order of strokes added in the array matches the order in which the user created them. Changing the stroke order may produce unexpected results.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="strokes")]
		public Stroke[] Strokes { get; set; }
		
		/// <summary>
		/// This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<AnalysisRequestUnit> Unit { get; set; }
		
		/// <summary>
		///  This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiple")]
		public System.Nullable<System.Double> UnitMultiple { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisRequestApplicationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drawing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mixed = 2,
	}
	
	/// <summary>
	/// A container for the attributes of a value contained in the ink point object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InkPointValueAttribute
	{
		
		/// <summary>
		/// The maximum value for the attribute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalMaximum")]
		public System.Nullable<System.Double> LogicalMaximum { get; set; }
		
		/// <summary>
		/// The minimum value for the attribute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logicalMinimum")]
		public System.Nullable<System.Double> LogicalMinimum { get; set; }
		
		/// <summary>
		/// The name of the point attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisRequestInputDeviceKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		digitizer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lightPen = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		touchScreen = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		touchPad = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whiteBoard = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3dDigitizer")]
		_3dDigitizer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stereoPlotter = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		articulatedArm = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		armature = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class Stroke
	{
		
		/// <summary>
		/// The properties to use when rendering ink
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drawingAttributes")]
		public DrawingAttributesPattern DrawingAttributes { get; set; }
		
		/// <summary>
		/// This is treated as a unique identifier for each stroke within a request. If the id is repeated within the same request, the service will return an error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// This is an optional property which influences the decision about what the stroke kind is between inkWriting and inkDrawing. This property should be set ONLY if the type of user content is known ahead of time. Not setting this value implies the kind is not known ahead of time. Kind represents the type of content the stroke is a part of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<StrokeKind> Kind { get; set; }
		
		/// <summary>
		/// The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in this stroke. The response will include results from this language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		public InkPoint[] Points { get; set; }
	}
	
	/// <summary>
	/// The properties to use when rendering ink
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class DrawingAttributesPattern
	{
		
		/// <summary>
		/// This shows the components of the color in rgba format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public DrawingAttributesPatternColor Color { get; set; }
		
		/// <summary>
		///  This indicates whether Bezier smoothing is used to render the stroke
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitToCurve")]
		public System.Nullable<System.Boolean> FitToCurve { get; set; }
		
		/// <summary>
		/// The height of the stylus used to draw the stroke
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		///  This indicates whether the thickness of a rendered Stroke changes according the amount of pressure applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignorePressure")]
		public System.Nullable<System.Boolean> IgnorePressure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rasterOp")]
		public System.Nullable<DrawingAttributesPatternRasterOp> RasterOp { get; set; }
		
		/// <summary>
		/// This specifies the tip to be used to draw a stroke
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tip")]
		public System.Nullable<DrawingAttributesPatternTip> Tip { get; set; }
		
		/// <summary>
		/// The width of the stylus used to draw the stroke
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	public class DrawingAttributesPatternColor
	{
		
		/// <summary>
		/// The alpha component of the color
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="a")]
		public System.Nullable<System.Double> A { get; set; }
		
		/// <summary>
		/// The blue component of the color
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="b")]
		public System.Nullable<System.Double> B { get; set; }
		
		/// <summary>
		/// The green component of the color
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="g")]
		public System.Nullable<System.Double> G { get; set; }
		
		/// <summary>
		/// The red component of the color
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="r")]
		public System.Nullable<System.Double> R { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DrawingAttributesPatternRasterOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noOperation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copyPen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		maskPen = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum DrawingAttributesPatternTip
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ellipse = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rectangle = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum StrokeKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkDrawing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkWriting = 1,
	}
	
	/// <summary>
	/// An object containing the properties of an point in the path of an ink stroke. The main properties are the x and y values. Other include tip pressure, x tilt etc. For the coordinate values, it is recommended to have a precision of 8 digits after the decimal to obtain most accurate recognition results. The origin (0,0) of the canvas is assumed to be at the top left corner of the canvas
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class InkPoint
	{
		
		/// <summary>
		/// The force exerted directly by the user on a transducer sensor, such as a pressure-sensitive button on the barrel of a stylus. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barrelPressure")]
		public System.Nullable<System.Double> BarrelPressure { get; set; }
		
		/// <summary>
		/// A non-tip button located on the barrel of a stylus. Its function is typically mapped to a system secondary button. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barrelSwitch")]
		public System.Nullable<System.Boolean> BarrelSwitch { get; set; }
		
		/// <summary>
		/// The control is used for erasing objects. It is typically located opposite the writing end of a stylus. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eraser")]
		public System.Nullable<System.Boolean> Eraser { get; set; }
		
		/// <summary>
		/// The height of the tip of the writing instrument. This is used by touch screen devices to report the height of the finger contact on the writing surface. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// A value that indicates that the currently sensed position originates from the end of a stylus opposite the tip switch. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inverted")]
		public System.Nullable<System.Boolean> Inverted { get; set; }
		
		/// <summary>
		/// A secondary switch used in conjunction with the tip switch to indicate pressure above a certain threshold applied with the stylus. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryTip")]
		public System.Nullable<System.Boolean> SecondaryTip { get; set; }
		
		/// <summary>
		/// The time relative to the absolute time the transducer last became active. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
		
		/// <summary>
		/// The force exerted against the tablet surface by the transducer, typically a stylus. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tipPressure")]
		public System.Nullable<System.Double> TipPressure { get; set; }
		
		/// <summary>
		/// A switch located on the tip of a stylus indicating contact of the stylus with a surface. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tipSwitch")]
		public System.Nullable<System.Boolean> TipSwitch { get; set; }
		
		/// <summary>
		/// The width of the tip of the writing instrument. This is used by touch screen devices to report the width of the finger contact on the writing surface. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
		
		/// <summary>
		/// The x coordinate of the pen location on the writing surface.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		public double X { get; set; }
		
		/// <summary>
		/// The plane angle between the Y-Z plane and the plane containing the transducer axis and the Y axis. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xTilt")]
		public System.Nullable<System.Double> XTilt { get; set; }
		
		/// <summary>
		/// The y coordinate of the pen location on the writing surface.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		public double Y { get; set; }
		
		/// <summary>
		/// The angle between the X-Z and transducer-X planes. A positive Y Tilt is toward the user. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yTilt")]
		public System.Nullable<System.Double> YTilt { get; set; }
		
		/// <summary>
		/// The z coordinate of the pen location on the writing space. This may not be used for recognition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="z")]
		public System.Nullable<System.Double> Z { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisRequestUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cm = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in")]
		_in = 2,
	}
	
	/// <summary>
	/// This shows the expected contents of a response from the service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class AnalysisResponse
	{
		
		/// <summary>
		/// This is the language used for recognizing handwriting from the ink strokes in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The list of recognition units based on the analysis of the ink strokes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recognitionUnits")]
		public AnalysisResponseRecognitionUnits[] AnalysisResponseRecognitionUnits { get; set; }
		
		/// <summary>
		/// This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<AnalysisResponseUnit> Unit { get; set; }
		
		/// <summary>
		///  This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitMultiple")]
		public System.Nullable<System.Double> UnitMultiple { get; set; }
	}
	
	public class AnalysisResponseRecognitionUnits
	{
		
		/// <summary>
		/// The list of alternates for the core recognition result. In case of handwriting related recognition units, this list includes other words that are close possibilities to the results provided as 'recognizedText'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternates")]
		public AlternatePatternElement[] Alternates { get; set; }
		
		/// <summary>
		/// The bounding rectangle of the recognition unit represented by the coordinates of the top left corner (topX,topY) along with width and height of the rectangle. Note that this rectangle is not rotated. So for  rotated objects such as slanted handwriting, it will cover the entire object. The unit will be matched to the one specified in the original request (mm by default.) 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingRectangle")]
		public AnalysisResponseRecognitionUnitsBoundingRectangle BoundingRectangle { get; set; }
		
		/// <summary>
		/// The category of a recognition unit represents the type of content for that unit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public AnalysisResponseRecognitionUnitsCategory Category { get; set; }
		
		/// <summary>
		/// This holds all the properties of one point
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="center")]
		public PointDetailsPattern Center { get; set; }
		
		/// <summary>
		/// An array of integers representing the identifier of each child of the current recognition unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childIds")]
		public int[] ChildIds { get; set; }
		
		/// <summary>
		/// The class represents the type of the recognition unit. A recognition unit can be a leaf node or a container node. Container nodes typically have leaf nodes as children.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="class")]
		public AnalysisResponseRecognitionUnitsClass Class { get; set; }
		
		/// <summary>
		/// A number between 0 and 1 which indicates the confidence level in the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// The identifier of the recognition unit. This id is used to indicate parent/child relationship between different recognition units.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// The id of the parent node in the tree structure of the recognition results. parent = 0 indicates that there is no dedicated parent node for this unit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public int ParentId { get; set; }
		
		/// <summary>
		/// Array of point objects that represent points that are relevant to the type of recognition unit. For example, for a leaf node of inkDrawing category that represents a triangle, points would include the x, y coordinates of the vertices of the recognized triangle. The points represent the coordinates used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		public PointDetailsPattern[] Points { get; set; }
		
		/// <summary>
		/// The category should be used to determines the field to read the recognition result. Recognized Object represents the shape that was recognized for the node with category as inkDrawing. For handwriting related nodes, recognizedText contains the actual recognition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recognizedObject")]
		public System.Nullable<AnalysisResponseRecognitionUnitsRecognizedObject> RecognizedObject { get; set; }
		
		/// <summary>
		/// The string contains the text that was recognized. It can be an empty string if the recognizer cannot determine the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recognizedText")]
		public string RecognizedText { get; set; }
		
		/// <summary>
		/// This is the rotated bounding rectangle that covers the entire recognized object along the angle of rotation of the object. Note that this is NOT the same as rotating the boundingRectangle by the rotation angle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotatedBoundingRectangle")]
		public PointDetailsPattern[] RotatedBoundingRectangle { get; set; }
		
		/// <summary>
		/// This is the angle at which the unit is rotated in degrees with respect to the positive X axis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotationAngle")]
		public System.Nullable<System.Double> RotationAngle { get; set; }
		
		/// <summary>
		/// This is an array of integers representing the list of stroke Identifiers from the input request body that belong to this recognition unit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="strokeIds")]
		public int[] StrokeIds { get; set; }
	}
	
	public class AnalysisResponseRecognitionUnitsBoundingRectangle
	{
		
		/// <summary>
		/// The is the height of the bounding rectangle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// This is the top left x coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topX")]
		public System.Nullable<System.Double> TopX { get; set; }
		
		/// <summary>
		/// This is the top left y coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topY")]
		public System.Nullable<System.Double> TopY { get; set; }
		
		/// <summary>
		/// This is width of the bounding rectangle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisResponseRecognitionUnitsCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		root = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writingRegion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paragraph = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkBullet = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkDrawing = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkWord = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisResponseRecognitionUnitsClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		container = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		leaf = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisResponseRecognitionUnitsRecognizedObject
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drawing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		square = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rectangle = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		circle = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ellipse = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		triangle = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isoscelesTriangle = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		equilateralTriangle = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rightTriangle = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quadrilateral = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		diamond = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trapezoid = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		parallelogram = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pentagon = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hexagon = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blockArrow = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heart = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starSimple = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starCrossed = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cloud = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		curve = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		polyLine = 22,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum AnalysisResponseUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cm = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in")]
		_in = 2,
	}
	
	/// <summary>
	/// The category of a recognition unit represents the type of content for that unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum CategoryPattern
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		root = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writingRegion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paragraph = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkBullet = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkDrawing = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkWord = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 7,
	}
	
	/// <summary>
	/// The class represents the type of the recognition unit. A recognition unit can be a leaf node or a container node. Container nodes typically have leaf nodes as children.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ClassPattern
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		container = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		leaf = 1,
	}
	
	/// <summary>
	/// The category of recognition units that represent types that have children recognition units.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ContainerCategoryPattern
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		root = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		writingRegion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paragraph = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class ErrorModel
	{
		
		/// <summary>
		/// This represents the error code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// This gives details of the reason(s) for the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorModelDetails[] ErrorModelDetails { get; set; }
		
		/// <summary>
		/// This represents the error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// This represents the target of the error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	public class ErrorModelDetails
	{
		
		/// <summary>
		/// This represents the error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// This represents the error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// This represents the target of the error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The category of recognition units that represent types that don't have children recognition units.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum LeafCategoryPattern
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkDrawing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkBullet = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inkWord = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 3,
	}
	
	/// <summary>
	/// This identifies the recognized entity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public class RecognitionUnitElement
	{
		
		/// <summary>
		/// The list of alternates for the core recognition result. In case of handwriting related recognition units, this list includes other words that are close possibilities to the results provided as 'recognizedText'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternates")]
		public AlternatePatternElement[] Alternates { get; set; }
		
		/// <summary>
		/// The bounding rectangle of the recognition unit represented by the coordinates of the top left corner (topX,topY) along with width and height of the rectangle. Note that this rectangle is not rotated. So for  rotated objects such as slanted handwriting, it will cover the entire object. The unit will be matched to the one specified in the original request (mm by default.) 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingRectangle")]
		public RecognitionUnitElementBoundingRectangle BoundingRectangle { get; set; }
		
		/// <summary>
		/// The category of a recognition unit represents the type of content for that unit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public AnalysisResponseRecognitionUnitsCategory Category { get; set; }
		
		/// <summary>
		/// This holds all the properties of one point
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="center")]
		public PointDetailsPattern Center { get; set; }
		
		/// <summary>
		/// An array of integers representing the identifier of each child of the current recognition unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childIds")]
		public int[] ChildIds { get; set; }
		
		/// <summary>
		/// The class represents the type of the recognition unit. A recognition unit can be a leaf node or a container node. Container nodes typically have leaf nodes as children.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="class")]
		public AnalysisResponseRecognitionUnitsClass Class { get; set; }
		
		/// <summary>
		/// A number between 0 and 1 which indicates the confidence level in the result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// The identifier of the recognition unit. This id is used to indicate parent/child relationship between different recognition units.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// The id of the parent node in the tree structure of the recognition results. parent = 0 indicates that there is no dedicated parent node for this unit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public int ParentId { get; set; }
		
		/// <summary>
		/// Array of point objects that represent points that are relevant to the type of recognition unit. For example, for a leaf node of inkDrawing category that represents a triangle, points would include the x, y coordinates of the vertices of the recognized triangle. The points represent the coordinates used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		public PointDetailsPattern[] Points { get; set; }
		
		/// <summary>
		/// The category should be used to determines the field to read the recognition result. Recognized Object represents the shape that was recognized for the node with category as inkDrawing. For handwriting related nodes, recognizedText contains the actual recognition result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recognizedObject")]
		public AnalysisResponseRecognitionUnitsRecognizedObject RecognizedObject { get; set; }
		
		/// <summary>
		/// The string contains the text that was recognized. It can be an empty string if the recognizer cannot determine the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recognizedText")]
		public string RecognizedText { get; set; }
		
		/// <summary>
		/// This is the rotated bounding rectangle that covers the entire recognized object along the angle of rotation of the object. Note that this is NOT the same as rotating the boundingRectangle by the rotation angle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotatedBoundingRectangle")]
		public PointDetailsPattern[] RotatedBoundingRectangle { get; set; }
		
		/// <summary>
		/// This is the angle at which the unit is rotated in degrees with respect to the positive X axis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotationAngle")]
		public System.Nullable<System.Double> RotationAngle { get; set; }
		
		/// <summary>
		/// This is an array of integers representing the list of stroke Identifiers from the input request body that belong to this recognition unit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="strokeIds")]
		public int[] StrokeIds { get; set; }
	}
	
	public class RecognitionUnitElementBoundingRectangle
	{
		
		/// <summary>
		/// The is the height of the bounding rectangle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		/// <summary>
		/// This is the top left x coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topX")]
		public System.Nullable<System.Double> TopX { get; set; }
		
		/// <summary>
		/// This is the top left y coordinate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topY")]
		public System.Nullable<System.Double> TopY { get; set; }
		
		/// <summary>
		/// This is width of the bounding rectangle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	/// <summary>
	/// The category should be used to determines the field to read the recognition result. Recognized Object represents the shape that was recognized for the node with category as inkDrawing. For handwriting related nodes, recognizedText contains the actual recognition result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/01")]
	public enum ShapePattern
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drawing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		square = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rectangle = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		circle = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ellipse = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		triangle = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isoscelesTriangle = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		equilateralTriangle = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rightTriangle = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quadrilateral = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		diamond = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trapezoid = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		parallelogram = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pentagon = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hexagon = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blockArrow = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heart = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starSimple = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starCrossed = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cloud = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		curve = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		polyLine = 22,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Ink Recognition operation is used to perform ink layout and recognition of written words and shapes. It allows passing the ink strokes to the service to get the recognition results in the response.
		/// InkRecognizer_Recognize recognize
		/// </summary>
		/// <param name="requestBody">The collection of stroke objects to send for analysis</param>
		/// <returns>The results were processed successfully.</returns>
		public async Task<AnalysisResponse> InkRecognizer_RecognizeAsync(AnalysisRequest requestBody)
		{
			var requestUri = "recognize";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AnalysisResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
