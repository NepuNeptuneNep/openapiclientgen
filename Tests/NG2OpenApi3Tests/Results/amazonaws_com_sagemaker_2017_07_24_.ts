import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {
	export interface AddAssociationResponse {
		SourceArn?: string;
		DestinationArn?: string;
	}
	export interface AddAssociationResponseFormProperties {
		SourceArn: FormControl<string | null | undefined>,
		DestinationArn: FormControl<string | null | undefined>,
	}
	export function CreateAddAssociationResponseFormGroup() {
		return new FormGroup<AddAssociationResponseFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined),
			DestinationArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AddAssociationRequest {

		/** Required */
		SourceArn: string;

		/** Required */
		DestinationArn: string;
		AssociationType?: AssociationEdgeType;
	}
	export interface AddAssociationRequestFormProperties {

		/** Required */
		SourceArn: FormControl<string | null | undefined>,

		/** Required */
		DestinationArn: FormControl<string | null | undefined>,
		AssociationType: FormControl<AssociationEdgeType | null | undefined>,
	}
	export function CreateAddAssociationRequestFormGroup() {
		return new FormGroup<AddAssociationRequestFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DestinationArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssociationType: new FormControl<AssociationEdgeType | null | undefined>(undefined),
		});

	}

	export enum AssociationEdgeType { ContributedTo = 'ContributedTo', AssociatedWith = 'AssociatedWith', DerivedFrom = 'DerivedFrom', Produced = 'Produced' }

	export interface ResourceNotFound {
	}
	export interface ResourceNotFoundFormProperties {
	}
	export function CreateResourceNotFoundFormGroup() {
		return new FormGroup<ResourceNotFoundFormProperties>({
		});

	}

	export interface ResourceLimitExceeded {
	}
	export interface ResourceLimitExceededFormProperties {
	}
	export function CreateResourceLimitExceededFormGroup() {
		return new FormGroup<ResourceLimitExceededFormProperties>({
		});

	}

	export interface AddTagsOutput {
		Tags?: Array<Tag>;
	}
	export interface AddTagsOutputFormProperties {
	}
	export function CreateAddTagsOutputFormGroup() {
		return new FormGroup<AddTagsOutputFormProperties>({
		});

	}


	/** <p>A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources.</p> <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a>.</p> <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>. For advice on best practices for managing Amazon Web Services resources with tagging, see <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p> */
	export interface Tag {

		/** Required */
		Key: string;

		/** Required */
		Value: string;
	}

	/** <p>A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources.</p> <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a>.</p> <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>. For advice on best practices for managing Amazon Web Services resources with tagging, see <a href="https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf">Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p> */
	export interface TagFormProperties {

		/** Required */
		Key: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateTagFormGroup() {
		return new FormGroup<TagFormProperties>({
			Key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AddTagsInput {

		/** Required */
		ResourceArn: string;

		/** Required */
		Tags: Array<Tag>;
	}
	export interface AddTagsInputFormProperties {

		/** Required */
		ResourceArn: FormControl<string | null | undefined>,
	}
	export function CreateAddTagsInputFormGroup() {
		return new FormGroup<AddTagsInputFormProperties>({
			ResourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface AssociateTrialComponentResponse {
		TrialComponentArn?: string;
		TrialArn?: string;
	}
	export interface AssociateTrialComponentResponseFormProperties {
		TrialComponentArn: FormControl<string | null | undefined>,
		TrialArn: FormControl<string | null | undefined>,
	}
	export function CreateAssociateTrialComponentResponseFormGroup() {
		return new FormGroup<AssociateTrialComponentResponseFormProperties>({
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
			TrialArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface AssociateTrialComponentRequest {

		/** Required */
		TrialComponentName: string;

		/** Required */
		TrialName: string;
	}
	export interface AssociateTrialComponentRequestFormProperties {

		/** Required */
		TrialComponentName: FormControl<string | null | undefined>,

		/** Required */
		TrialName: FormControl<string | null | undefined>,
	}
	export function CreateAssociateTrialComponentRequestFormGroup() {
		return new FormGroup<AssociateTrialComponentRequestFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TrialName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface BatchDescribeModelPackageOutput {
		ModelPackageSummaries?: ModelPackageSummaries;
		BatchDescribeModelPackageErrorMap?: BatchDescribeModelPackageErrorMap;
	}
	export interface BatchDescribeModelPackageOutputFormProperties {
	}
	export function CreateBatchDescribeModelPackageOutputFormGroup() {
		return new FormGroup<BatchDescribeModelPackageOutputFormProperties>({
		});

	}

	export interface ModelPackageSummaries {
	}
	export interface ModelPackageSummariesFormProperties {
	}
	export function CreateModelPackageSummariesFormGroup() {
		return new FormGroup<ModelPackageSummariesFormProperties>({
		});

	}

	export interface BatchDescribeModelPackageErrorMap {
	}
	export interface BatchDescribeModelPackageErrorMapFormProperties {
	}
	export function CreateBatchDescribeModelPackageErrorMapFormGroup() {
		return new FormGroup<BatchDescribeModelPackageErrorMapFormProperties>({
		});

	}

	export interface BatchDescribeModelPackageInput {

		/** Required */
		ModelPackageArnList: Array<string>;
	}
	export interface BatchDescribeModelPackageInputFormProperties {
	}
	export function CreateBatchDescribeModelPackageInputFormGroup() {
		return new FormGroup<BatchDescribeModelPackageInputFormProperties>({
		});

	}

	export interface CreateActionResponse {
		ActionArn?: string;
	}
	export interface CreateActionResponseFormProperties {
		ActionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateActionResponseFormGroup() {
		return new FormGroup<CreateActionResponseFormProperties>({
			ActionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateActionRequest {

		/** Required */
		ActionName: string;

		/** Required */
		Source: ActionSource;

		/** Required */
		ActionType: string;
		Description?: string;
		Status?: ActionStatus;
		Properties?: LineageEntityParameters;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		Tags?: Array<Tag>;
	}
	export interface CreateActionRequestFormProperties {

		/** Required */
		ActionName: FormControl<string | null | undefined>,

		/** Required */
		ActionType: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		Status: FormControl<ActionStatus | null | undefined>,
	}
	export function CreateCreateActionRequestFormGroup() {
		return new FormGroup<CreateActionRequestFormProperties>({
			ActionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ActionType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<ActionStatus | null | undefined>(undefined),
		});

	}


	/** A structure describing the source of an action. */
	export interface ActionSource {

		/** Required */
		SourceUri: string;
		SourceType?: string;
		SourceId?: string;
	}

	/** A structure describing the source of an action. */
	export interface ActionSourceFormProperties {

		/** Required */
		SourceUri: FormControl<string | null | undefined>,
		SourceType: FormControl<string | null | undefined>,
		SourceId: FormControl<string | null | undefined>,
	}
	export function CreateActionSourceFormGroup() {
		return new FormGroup<ActionSourceFormProperties>({
			SourceUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceType: new FormControl<string | null | undefined>(undefined),
			SourceId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ActionStatus { Unknown = 'Unknown', InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Stopping = 'Stopping', Stopped = 'Stopped' }

	export interface LineageEntityParameters {
	}
	export interface LineageEntityParametersFormProperties {
	}
	export function CreateLineageEntityParametersFormGroup() {
		return new FormGroup<LineageEntityParametersFormProperties>({
		});

	}


	/** Metadata properties of the tracking entity, trial, or trial component. */
	export interface MetadataProperties {
		CommitId?: string;
		Repository?: string;
		GeneratedBy?: string;
		ProjectId?: string;
	}

	/** Metadata properties of the tracking entity, trial, or trial component. */
	export interface MetadataPropertiesFormProperties {
		CommitId: FormControl<string | null | undefined>,
		Repository: FormControl<string | null | undefined>,
		GeneratedBy: FormControl<string | null | undefined>,
		ProjectId: FormControl<string | null | undefined>,
	}
	export function CreateMetadataPropertiesFormGroup() {
		return new FormGroup<MetadataPropertiesFormProperties>({
			CommitId: new FormControl<string | null | undefined>(undefined),
			Repository: new FormControl<string | null | undefined>(undefined),
			GeneratedBy: new FormControl<string | null | undefined>(undefined),
			ProjectId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAlgorithmOutput {

		/** Required */
		AlgorithmArn: string;
	}
	export interface CreateAlgorithmOutputFormProperties {

		/** Required */
		AlgorithmArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAlgorithmOutputFormGroup() {
		return new FormGroup<CreateAlgorithmOutputFormProperties>({
			AlgorithmArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateAlgorithmInput {

		/** Required */
		AlgorithmName: string;
		AlgorithmDescription?: string;

		/** Required */
		TrainingSpecification: TrainingSpecification;
		InferenceSpecification?: InferenceSpecification;
		ValidationSpecification?: AlgorithmValidationSpecification;
		CertifyForMarketplace?: boolean | null;
		Tags?: Array<Tag>;
	}
	export interface CreateAlgorithmInputFormProperties {

		/** Required */
		AlgorithmName: FormControl<string | null | undefined>,
		AlgorithmDescription: FormControl<string | null | undefined>,
		CertifyForMarketplace: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateAlgorithmInputFormGroup() {
		return new FormGroup<CreateAlgorithmInputFormProperties>({
			AlgorithmName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AlgorithmDescription: new FormControl<string | null | undefined>(undefined),
			CertifyForMarketplace: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Defines how the algorithm is used for a training job. */
	export interface TrainingSpecification {

		/** Required */
		TrainingImage: string;
		TrainingImageDigest?: string;
		SupportedHyperParameters?: Array<HyperParameterSpecification>;

		/** Required */
		SupportedTrainingInstanceTypes: Array<TrainingInstanceType>;
		SupportsDistributedTraining?: boolean | null;
		MetricDefinitions?: Array<MetricDefinition>;

		/** Required */
		TrainingChannels: Array<ChannelSpecification>;
		SupportedTuningJobObjectiveMetrics?: Array<HyperParameterTuningJobObjective>;
	}

	/** Defines how the algorithm is used for a training job. */
	export interface TrainingSpecificationFormProperties {

		/** Required */
		TrainingImage: FormControl<string | null | undefined>,
		TrainingImageDigest: FormControl<string | null | undefined>,
		SupportsDistributedTraining: FormControl<boolean | null | undefined>,
	}
	export function CreateTrainingSpecificationFormGroup() {
		return new FormGroup<TrainingSpecificationFormProperties>({
			TrainingImage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TrainingImageDigest: new FormControl<string | null | undefined>(undefined),
			SupportsDistributedTraining: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Defines a hyperparameter to be used by an algorithm. */
	export interface HyperParameterSpecification {

		/** Required */
		Name: string;
		Description?: string;

		/** Required */
		Type: ParameterType;
		Range?: ParameterRange;
		IsTunable?: boolean | null;
		IsRequired?: boolean | null;
		DefaultValue?: string;
	}

	/** Defines a hyperparameter to be used by an algorithm. */
	export interface HyperParameterSpecificationFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<ParameterType | null | undefined>,
		IsTunable: FormControl<boolean | null | undefined>,
		IsRequired: FormControl<boolean | null | undefined>,
		DefaultValue: FormControl<string | null | undefined>,
	}
	export function CreateHyperParameterSpecificationFormGroup() {
		return new FormGroup<HyperParameterSpecificationFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<ParameterType | null | undefined>(undefined, [Validators.required]),
			IsTunable: new FormControl<boolean | null | undefined>(undefined),
			IsRequired: new FormControl<boolean | null | undefined>(undefined),
			DefaultValue: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ParameterType { Integer = 'Integer', Continuous = 'Continuous', Categorical = 'Categorical', FreeText = 'FreeText' }


	/** Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm. */
	export interface ParameterRange {
		IntegerParameterRangeSpecification?: IntegerParameterRangeSpecification;
		ContinuousParameterRangeSpecification?: ContinuousParameterRangeSpecification;
		CategoricalParameterRangeSpecification?: CategoricalParameterRangeSpecification;
	}

	/** Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm. */
	export interface ParameterRangeFormProperties {
	}
	export function CreateParameterRangeFormGroup() {
		return new FormGroup<ParameterRangeFormProperties>({
		});

	}


	/** Defines the possible values for an integer hyperparameter. */
	export interface IntegerParameterRangeSpecification {

		/** Required */
		MinValue: string;

		/** Required */
		MaxValue: string;
	}

	/** Defines the possible values for an integer hyperparameter. */
	export interface IntegerParameterRangeSpecificationFormProperties {

		/** Required */
		MinValue: FormControl<string | null | undefined>,

		/** Required */
		MaxValue: FormControl<string | null | undefined>,
	}
	export function CreateIntegerParameterRangeSpecificationFormGroup() {
		return new FormGroup<IntegerParameterRangeSpecificationFormProperties>({
			MinValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the possible values for a continuous hyperparameter. */
	export interface ContinuousParameterRangeSpecification {

		/** Required */
		MinValue: string;

		/** Required */
		MaxValue: string;
	}

	/** Defines the possible values for a continuous hyperparameter. */
	export interface ContinuousParameterRangeSpecificationFormProperties {

		/** Required */
		MinValue: FormControl<string | null | undefined>,

		/** Required */
		MaxValue: FormControl<string | null | undefined>,
	}
	export function CreateContinuousParameterRangeSpecificationFormGroup() {
		return new FormGroup<ContinuousParameterRangeSpecificationFormProperties>({
			MinValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the possible values for a categorical hyperparameter. */
	export interface CategoricalParameterRangeSpecification {

		/** Required */
		Values: Array<string>;
	}

	/** Defines the possible values for a categorical hyperparameter. */
	export interface CategoricalParameterRangeSpecificationFormProperties {
	}
	export function CreateCategoricalParameterRangeSpecificationFormGroup() {
		return new FormGroup<CategoricalParameterRangeSpecificationFormProperties>({
		});

	}

	export enum TrainingInstanceType { 'ml.m4.xlarge' = 'ml.m4.xlarge', 'ml.m4.2xlarge' = 'ml.m4.2xlarge', 'ml.m4.4xlarge' = 'ml.m4.4xlarge', 'ml.m4.10xlarge' = 'ml.m4.10xlarge', 'ml.m4.16xlarge' = 'ml.m4.16xlarge', 'ml.g4dn.xlarge' = 'ml.g4dn.xlarge', 'ml.g4dn.2xlarge' = 'ml.g4dn.2xlarge', 'ml.g4dn.4xlarge' = 'ml.g4dn.4xlarge', 'ml.g4dn.8xlarge' = 'ml.g4dn.8xlarge', 'ml.g4dn.12xlarge' = 'ml.g4dn.12xlarge', 'ml.g4dn.16xlarge' = 'ml.g4dn.16xlarge', 'ml.m5.large' = 'ml.m5.large', 'ml.m5.xlarge' = 'ml.m5.xlarge', 'ml.m5.2xlarge' = 'ml.m5.2xlarge', 'ml.m5.4xlarge' = 'ml.m5.4xlarge', 'ml.m5.12xlarge' = 'ml.m5.12xlarge', 'ml.m5.24xlarge' = 'ml.m5.24xlarge', 'ml.c4.xlarge' = 'ml.c4.xlarge', 'ml.c4.2xlarge' = 'ml.c4.2xlarge', 'ml.c4.4xlarge' = 'ml.c4.4xlarge', 'ml.c4.8xlarge' = 'ml.c4.8xlarge', 'ml.p2.xlarge' = 'ml.p2.xlarge', 'ml.p2.8xlarge' = 'ml.p2.8xlarge', 'ml.p2.16xlarge' = 'ml.p2.16xlarge', 'ml.p3.2xlarge' = 'ml.p3.2xlarge', 'ml.p3.8xlarge' = 'ml.p3.8xlarge', 'ml.p3.16xlarge' = 'ml.p3.16xlarge', 'ml.p3dn.24xlarge' = 'ml.p3dn.24xlarge', 'ml.p4d.24xlarge' = 'ml.p4d.24xlarge', 'ml.c5.xlarge' = 'ml.c5.xlarge', 'ml.c5.2xlarge' = 'ml.c5.2xlarge', 'ml.c5.4xlarge' = 'ml.c5.4xlarge', 'ml.c5.9xlarge' = 'ml.c5.9xlarge', 'ml.c5.18xlarge' = 'ml.c5.18xlarge', 'ml.c5n.xlarge' = 'ml.c5n.xlarge', 'ml.c5n.2xlarge' = 'ml.c5n.2xlarge', 'ml.c5n.4xlarge' = 'ml.c5n.4xlarge', 'ml.c5n.9xlarge' = 'ml.c5n.9xlarge', 'ml.c5n.18xlarge' = 'ml.c5n.18xlarge', 'ml.g5.xlarge' = 'ml.g5.xlarge', 'ml.g5.2xlarge' = 'ml.g5.2xlarge', 'ml.g5.4xlarge' = 'ml.g5.4xlarge', 'ml.g5.8xlarge' = 'ml.g5.8xlarge', 'ml.g5.16xlarge' = 'ml.g5.16xlarge', 'ml.g5.12xlarge' = 'ml.g5.12xlarge', 'ml.g5.24xlarge' = 'ml.g5.24xlarge', 'ml.g5.48xlarge' = 'ml.g5.48xlarge', 'ml.trn1.2xlarge' = 'ml.trn1.2xlarge', 'ml.trn1.32xlarge' = 'ml.trn1.32xlarge', 'ml.trn1n.32xlarge' = 'ml.trn1n.32xlarge', 'ml.p5.48xlarge' = 'ml.p5.48xlarge' }


	/** Specifies a metric that the training algorithm writes to <code>stderr</code> or <code>stdout</code>. You can view these logs to understand how your training job performs and check for any errors encountered during training. SageMaker hyperparameter tuning captures all defined metrics. Specify one of the defined metrics to use as an objective metric using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-TuningObjective">TuningObjective</a> parameter in the <code>HyperParameterTrainingJobDefinition</code> API to evaluate job performance during hyperparameter tuning. */
	export interface MetricDefinition {

		/** Required */
		Name: string;

		/** Required */
		Regex: string;
	}

	/** Specifies a metric that the training algorithm writes to <code>stderr</code> or <code>stdout</code>. You can view these logs to understand how your training job performs and check for any errors encountered during training. SageMaker hyperparameter tuning captures all defined metrics. Specify one of the defined metrics to use as an objective metric using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-TuningObjective">TuningObjective</a> parameter in the <code>HyperParameterTrainingJobDefinition</code> API to evaluate job performance during hyperparameter tuning. */
	export interface MetricDefinitionFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Regex: FormControl<string | null | undefined>,
	}
	export function CreateMetricDefinitionFormGroup() {
		return new FormGroup<MetricDefinitionFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Regex: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines a named input source, called a channel, to be used by an algorithm. */
	export interface ChannelSpecification {

		/** Required */
		Name: string;
		Description?: string;
		IsRequired?: boolean | null;

		/** Required */
		SupportedContentTypes: Array<string>;
		SupportedCompressionTypes?: Array<CompressionType>;

		/** Required */
		SupportedInputModes: Array<TrainingInputMode>;
	}

	/** Defines a named input source, called a channel, to be used by an algorithm. */
	export interface ChannelSpecificationFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		IsRequired: FormControl<boolean | null | undefined>,
	}
	export function CreateChannelSpecificationFormGroup() {
		return new FormGroup<ChannelSpecificationFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			IsRequired: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum CompressionType { None = 'None', Gzip = 'Gzip' }


	/** <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p> */
	export enum TrainingInputMode { Pipe = 'Pipe', File = 'File', FastFile = 'FastFile' }


	/** Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the <code>Type</code> parameter. */
	export interface HyperParameterTuningJobObjective {

		/** Required */
		Type: HyperParameterTuningJobObjectiveType;

		/** Required */
		MetricName: string;
	}

	/** Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the <code>Type</code> parameter. */
	export interface HyperParameterTuningJobObjectiveFormProperties {

		/** Required */
		Type: FormControl<HyperParameterTuningJobObjectiveType | null | undefined>,

		/** Required */
		MetricName: FormControl<string | null | undefined>,
	}
	export function CreateHyperParameterTuningJobObjectiveFormGroup() {
		return new FormGroup<HyperParameterTuningJobObjectiveFormProperties>({
			Type: new FormControl<HyperParameterTuningJobObjectiveType | null | undefined>(undefined, [Validators.required]),
			MetricName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum HyperParameterTuningJobObjectiveType { Maximize = 'Maximize', Minimize = 'Minimize' }


	/** Defines how to perform inference generation after a training job is run. */
	export interface InferenceSpecification {

		/** Required */
		Containers: Array<ModelPackageContainerDefinition>;
		SupportedTransformInstanceTypes?: Array<TransformInstanceType>;
		SupportedRealtimeInferenceInstanceTypes?: Array<ProductionVariantInstanceType>;

		/** Required */
		SupportedContentTypes: Array<string>;

		/** Required */
		SupportedResponseMIMETypes: Array<string>;
	}

	/** Defines how to perform inference generation after a training job is run. */
	export interface InferenceSpecificationFormProperties {
	}
	export function CreateInferenceSpecificationFormGroup() {
		return new FormGroup<InferenceSpecificationFormProperties>({
		});

	}


	/** Describes the Docker container for the model package. */
	export interface ModelPackageContainerDefinition {
		ContainerHostname?: string;

		/** Required */
		Image: string;
		ImageDigest?: string;
		ModelDataUrl?: string;
		ProductId?: string;
		Environment?: EnvironmentMap;
		ModelInput?: ModelInput;
		Framework?: string;
		FrameworkVersion?: string;
		NearestModelName?: string;
	}

	/** Describes the Docker container for the model package. */
	export interface ModelPackageContainerDefinitionFormProperties {
		ContainerHostname: FormControl<string | null | undefined>,

		/** Required */
		Image: FormControl<string | null | undefined>,
		ImageDigest: FormControl<string | null | undefined>,
		ModelDataUrl: FormControl<string | null | undefined>,
		ProductId: FormControl<string | null | undefined>,
		Framework: FormControl<string | null | undefined>,
		FrameworkVersion: FormControl<string | null | undefined>,
		NearestModelName: FormControl<string | null | undefined>,
	}
	export function CreateModelPackageContainerDefinitionFormGroup() {
		return new FormGroup<ModelPackageContainerDefinitionFormProperties>({
			ContainerHostname: new FormControl<string | null | undefined>(undefined),
			Image: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImageDigest: new FormControl<string | null | undefined>(undefined),
			ModelDataUrl: new FormControl<string | null | undefined>(undefined),
			ProductId: new FormControl<string | null | undefined>(undefined),
			Framework: new FormControl<string | null | undefined>(undefined),
			FrameworkVersion: new FormControl<string | null | undefined>(undefined),
			NearestModelName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface EnvironmentMap {
	}
	export interface EnvironmentMapFormProperties {
	}
	export function CreateEnvironmentMapFormGroup() {
		return new FormGroup<EnvironmentMapFormProperties>({
		});

	}


	/** Input object for the model. */
	export interface ModelInput {

		/** Required */
		DataInputConfig: string;
	}

	/** Input object for the model. */
	export interface ModelInputFormProperties {

		/** Required */
		DataInputConfig: FormControl<string | null | undefined>,
	}
	export function CreateModelInputFormGroup() {
		return new FormGroup<ModelInputFormProperties>({
			DataInputConfig: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TransformInstanceType { 'ml.m4.xlarge' = 'ml.m4.xlarge', 'ml.m4.2xlarge' = 'ml.m4.2xlarge', 'ml.m4.4xlarge' = 'ml.m4.4xlarge', 'ml.m4.10xlarge' = 'ml.m4.10xlarge', 'ml.m4.16xlarge' = 'ml.m4.16xlarge', 'ml.c4.xlarge' = 'ml.c4.xlarge', 'ml.c4.2xlarge' = 'ml.c4.2xlarge', 'ml.c4.4xlarge' = 'ml.c4.4xlarge', 'ml.c4.8xlarge' = 'ml.c4.8xlarge', 'ml.p2.xlarge' = 'ml.p2.xlarge', 'ml.p2.8xlarge' = 'ml.p2.8xlarge', 'ml.p2.16xlarge' = 'ml.p2.16xlarge', 'ml.p3.2xlarge' = 'ml.p3.2xlarge', 'ml.p3.8xlarge' = 'ml.p3.8xlarge', 'ml.p3.16xlarge' = 'ml.p3.16xlarge', 'ml.c5.xlarge' = 'ml.c5.xlarge', 'ml.c5.2xlarge' = 'ml.c5.2xlarge', 'ml.c5.4xlarge' = 'ml.c5.4xlarge', 'ml.c5.9xlarge' = 'ml.c5.9xlarge', 'ml.c5.18xlarge' = 'ml.c5.18xlarge', 'ml.m5.large' = 'ml.m5.large', 'ml.m5.xlarge' = 'ml.m5.xlarge', 'ml.m5.2xlarge' = 'ml.m5.2xlarge', 'ml.m5.4xlarge' = 'ml.m5.4xlarge', 'ml.m5.12xlarge' = 'ml.m5.12xlarge', 'ml.m5.24xlarge' = 'ml.m5.24xlarge', 'ml.g4dn.xlarge' = 'ml.g4dn.xlarge', 'ml.g4dn.2xlarge' = 'ml.g4dn.2xlarge', 'ml.g4dn.4xlarge' = 'ml.g4dn.4xlarge', 'ml.g4dn.8xlarge' = 'ml.g4dn.8xlarge', 'ml.g4dn.12xlarge' = 'ml.g4dn.12xlarge', 'ml.g4dn.16xlarge' = 'ml.g4dn.16xlarge' }

	export enum ProductionVariantInstanceType { 'ml.t2.medium' = 'ml.t2.medium', 'ml.t2.large' = 'ml.t2.large', 'ml.t2.xlarge' = 'ml.t2.xlarge', 'ml.t2.2xlarge' = 'ml.t2.2xlarge', 'ml.m4.xlarge' = 'ml.m4.xlarge', 'ml.m4.2xlarge' = 'ml.m4.2xlarge', 'ml.m4.4xlarge' = 'ml.m4.4xlarge', 'ml.m4.10xlarge' = 'ml.m4.10xlarge', 'ml.m4.16xlarge' = 'ml.m4.16xlarge', 'ml.m5.large' = 'ml.m5.large', 'ml.m5.xlarge' = 'ml.m5.xlarge', 'ml.m5.2xlarge' = 'ml.m5.2xlarge', 'ml.m5.4xlarge' = 'ml.m5.4xlarge', 'ml.m5.12xlarge' = 'ml.m5.12xlarge', 'ml.m5.24xlarge' = 'ml.m5.24xlarge', 'ml.m5d.large' = 'ml.m5d.large', 'ml.m5d.xlarge' = 'ml.m5d.xlarge', 'ml.m5d.2xlarge' = 'ml.m5d.2xlarge', 'ml.m5d.4xlarge' = 'ml.m5d.4xlarge', 'ml.m5d.12xlarge' = 'ml.m5d.12xlarge', 'ml.m5d.24xlarge' = 'ml.m5d.24xlarge', 'ml.c4.large' = 'ml.c4.large', 'ml.c4.xlarge' = 'ml.c4.xlarge', 'ml.c4.2xlarge' = 'ml.c4.2xlarge', 'ml.c4.4xlarge' = 'ml.c4.4xlarge', 'ml.c4.8xlarge' = 'ml.c4.8xlarge', 'ml.p2.xlarge' = 'ml.p2.xlarge', 'ml.p2.8xlarge' = 'ml.p2.8xlarge', 'ml.p2.16xlarge' = 'ml.p2.16xlarge', 'ml.p3.2xlarge' = 'ml.p3.2xlarge', 'ml.p3.8xlarge' = 'ml.p3.8xlarge', 'ml.p3.16xlarge' = 'ml.p3.16xlarge', 'ml.c5.large' = 'ml.c5.large', 'ml.c5.xlarge' = 'ml.c5.xlarge', 'ml.c5.2xlarge' = 'ml.c5.2xlarge', 'ml.c5.4xlarge' = 'ml.c5.4xlarge', 'ml.c5.9xlarge' = 'ml.c5.9xlarge', 'ml.c5.18xlarge' = 'ml.c5.18xlarge', 'ml.c5d.large' = 'ml.c5d.large', 'ml.c5d.xlarge' = 'ml.c5d.xlarge', 'ml.c5d.2xlarge' = 'ml.c5d.2xlarge', 'ml.c5d.4xlarge' = 'ml.c5d.4xlarge', 'ml.c5d.9xlarge' = 'ml.c5d.9xlarge', 'ml.c5d.18xlarge' = 'ml.c5d.18xlarge', 'ml.g4dn.xlarge' = 'ml.g4dn.xlarge', 'ml.g4dn.2xlarge' = 'ml.g4dn.2xlarge', 'ml.g4dn.4xlarge' = 'ml.g4dn.4xlarge', 'ml.g4dn.8xlarge' = 'ml.g4dn.8xlarge', 'ml.g4dn.12xlarge' = 'ml.g4dn.12xlarge', 'ml.g4dn.16xlarge' = 'ml.g4dn.16xlarge', 'ml.r5.large' = 'ml.r5.large', 'ml.r5.xlarge' = 'ml.r5.xlarge', 'ml.r5.2xlarge' = 'ml.r5.2xlarge', 'ml.r5.4xlarge' = 'ml.r5.4xlarge', 'ml.r5.12xlarge' = 'ml.r5.12xlarge', 'ml.r5.24xlarge' = 'ml.r5.24xlarge', 'ml.r5d.large' = 'ml.r5d.large', 'ml.r5d.xlarge' = 'ml.r5d.xlarge', 'ml.r5d.2xlarge' = 'ml.r5d.2xlarge', 'ml.r5d.4xlarge' = 'ml.r5d.4xlarge', 'ml.r5d.12xlarge' = 'ml.r5d.12xlarge', 'ml.r5d.24xlarge' = 'ml.r5d.24xlarge', 'ml.inf1.xlarge' = 'ml.inf1.xlarge', 'ml.inf1.2xlarge' = 'ml.inf1.2xlarge', 'ml.inf1.6xlarge' = 'ml.inf1.6xlarge', 'ml.inf1.24xlarge' = 'ml.inf1.24xlarge', 'ml.c6i.large' = 'ml.c6i.large', 'ml.c6i.xlarge' = 'ml.c6i.xlarge', 'ml.c6i.2xlarge' = 'ml.c6i.2xlarge', 'ml.c6i.4xlarge' = 'ml.c6i.4xlarge', 'ml.c6i.8xlarge' = 'ml.c6i.8xlarge', 'ml.c6i.12xlarge' = 'ml.c6i.12xlarge', 'ml.c6i.16xlarge' = 'ml.c6i.16xlarge', 'ml.c6i.24xlarge' = 'ml.c6i.24xlarge', 'ml.c6i.32xlarge' = 'ml.c6i.32xlarge', 'ml.g5.xlarge' = 'ml.g5.xlarge', 'ml.g5.2xlarge' = 'ml.g5.2xlarge', 'ml.g5.4xlarge' = 'ml.g5.4xlarge', 'ml.g5.8xlarge' = 'ml.g5.8xlarge', 'ml.g5.12xlarge' = 'ml.g5.12xlarge', 'ml.g5.16xlarge' = 'ml.g5.16xlarge', 'ml.g5.24xlarge' = 'ml.g5.24xlarge', 'ml.g5.48xlarge' = 'ml.g5.48xlarge', 'ml.p4d.24xlarge' = 'ml.p4d.24xlarge', 'ml.c7g.large' = 'ml.c7g.large', 'ml.c7g.xlarge' = 'ml.c7g.xlarge', 'ml.c7g.2xlarge' = 'ml.c7g.2xlarge', 'ml.c7g.4xlarge' = 'ml.c7g.4xlarge', 'ml.c7g.8xlarge' = 'ml.c7g.8xlarge', 'ml.c7g.12xlarge' = 'ml.c7g.12xlarge', 'ml.c7g.16xlarge' = 'ml.c7g.16xlarge', 'ml.m6g.large' = 'ml.m6g.large', 'ml.m6g.xlarge' = 'ml.m6g.xlarge', 'ml.m6g.2xlarge' = 'ml.m6g.2xlarge', 'ml.m6g.4xlarge' = 'ml.m6g.4xlarge', 'ml.m6g.8xlarge' = 'ml.m6g.8xlarge', 'ml.m6g.12xlarge' = 'ml.m6g.12xlarge', 'ml.m6g.16xlarge' = 'ml.m6g.16xlarge', 'ml.m6gd.large' = 'ml.m6gd.large', 'ml.m6gd.xlarge' = 'ml.m6gd.xlarge', 'ml.m6gd.2xlarge' = 'ml.m6gd.2xlarge', 'ml.m6gd.4xlarge' = 'ml.m6gd.4xlarge', 'ml.m6gd.8xlarge' = 'ml.m6gd.8xlarge', 'ml.m6gd.12xlarge' = 'ml.m6gd.12xlarge', 'ml.m6gd.16xlarge' = 'ml.m6gd.16xlarge', 'ml.c6g.large' = 'ml.c6g.large', 'ml.c6g.xlarge' = 'ml.c6g.xlarge', 'ml.c6g.2xlarge' = 'ml.c6g.2xlarge', 'ml.c6g.4xlarge' = 'ml.c6g.4xlarge', 'ml.c6g.8xlarge' = 'ml.c6g.8xlarge', 'ml.c6g.12xlarge' = 'ml.c6g.12xlarge', 'ml.c6g.16xlarge' = 'ml.c6g.16xlarge', 'ml.c6gd.large' = 'ml.c6gd.large', 'ml.c6gd.xlarge' = 'ml.c6gd.xlarge', 'ml.c6gd.2xlarge' = 'ml.c6gd.2xlarge', 'ml.c6gd.4xlarge' = 'ml.c6gd.4xlarge', 'ml.c6gd.8xlarge' = 'ml.c6gd.8xlarge', 'ml.c6gd.12xlarge' = 'ml.c6gd.12xlarge', 'ml.c6gd.16xlarge' = 'ml.c6gd.16xlarge', 'ml.c6gn.large' = 'ml.c6gn.large', 'ml.c6gn.xlarge' = 'ml.c6gn.xlarge', 'ml.c6gn.2xlarge' = 'ml.c6gn.2xlarge', 'ml.c6gn.4xlarge' = 'ml.c6gn.4xlarge', 'ml.c6gn.8xlarge' = 'ml.c6gn.8xlarge', 'ml.c6gn.12xlarge' = 'ml.c6gn.12xlarge', 'ml.c6gn.16xlarge' = 'ml.c6gn.16xlarge', 'ml.r6g.large' = 'ml.r6g.large', 'ml.r6g.xlarge' = 'ml.r6g.xlarge', 'ml.r6g.2xlarge' = 'ml.r6g.2xlarge', 'ml.r6g.4xlarge' = 'ml.r6g.4xlarge', 'ml.r6g.8xlarge' = 'ml.r6g.8xlarge', 'ml.r6g.12xlarge' = 'ml.r6g.12xlarge', 'ml.r6g.16xlarge' = 'ml.r6g.16xlarge', 'ml.r6gd.large' = 'ml.r6gd.large', 'ml.r6gd.xlarge' = 'ml.r6gd.xlarge', 'ml.r6gd.2xlarge' = 'ml.r6gd.2xlarge', 'ml.r6gd.4xlarge' = 'ml.r6gd.4xlarge', 'ml.r6gd.8xlarge' = 'ml.r6gd.8xlarge', 'ml.r6gd.12xlarge' = 'ml.r6gd.12xlarge', 'ml.r6gd.16xlarge' = 'ml.r6gd.16xlarge', 'ml.p4de.24xlarge' = 'ml.p4de.24xlarge', 'ml.trn1.2xlarge' = 'ml.trn1.2xlarge', 'ml.trn1.32xlarge' = 'ml.trn1.32xlarge', 'ml.inf2.xlarge' = 'ml.inf2.xlarge', 'ml.inf2.8xlarge' = 'ml.inf2.8xlarge', 'ml.inf2.24xlarge' = 'ml.inf2.24xlarge', 'ml.inf2.48xlarge' = 'ml.inf2.48xlarge' }


	/** Specifies configurations for one or more training jobs that SageMaker runs to test the algorithm. */
	export interface AlgorithmValidationSpecification {

		/** Required */
		ValidationRole: string;

		/** Required */
		ValidationProfiles: Array<AlgorithmValidationProfile>;
	}

	/** Specifies configurations for one or more training jobs that SageMaker runs to test the algorithm. */
	export interface AlgorithmValidationSpecificationFormProperties {

		/** Required */
		ValidationRole: FormControl<string | null | undefined>,
	}
	export function CreateAlgorithmValidationSpecificationFormGroup() {
		return new FormGroup<AlgorithmValidationSpecificationFormProperties>({
			ValidationRole: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>Defines a training job and a batch transform job that SageMaker runs to validate your algorithm.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p> */
	export interface AlgorithmValidationProfile {

		/** Required */
		ProfileName: string;

		/** Required */
		TrainingJobDefinition: TrainingJobDefinition;
		TransformJobDefinition?: TransformJobDefinition;
	}

	/** <p>Defines a training job and a batch transform job that SageMaker runs to validate your algorithm.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p> */
	export interface AlgorithmValidationProfileFormProperties {

		/** Required */
		ProfileName: FormControl<string | null | undefined>,
	}
	export function CreateAlgorithmValidationProfileFormGroup() {
		return new FormGroup<AlgorithmValidationProfileFormProperties>({
			ProfileName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the input needed to run a training job using the algorithm. */
	export interface TrainingJobDefinition {

		/**
		 * <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		 * Required
		 */
		TrainingInputMode: TrainingInputMode;
		HyperParameters?: HyperParameters;

		/** Required */
		InputDataConfig: Array<Channel>;

		/** Required */
		OutputDataConfig: OutputDataConfig;

		/** Required */
		ResourceConfig: ResourceConfig;

		/** Required */
		StoppingCondition: StoppingCondition;
	}

	/** Defines the input needed to run a training job using the algorithm. */
	export interface TrainingJobDefinitionFormProperties {

		/**
		 * <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		 * Required
		 */
		TrainingInputMode: FormControl<TrainingInputMode | null | undefined>,
	}
	export function CreateTrainingJobDefinitionFormGroup() {
		return new FormGroup<TrainingJobDefinitionFormProperties>({
			TrainingInputMode: new FormControl<TrainingInputMode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface HyperParameters {
	}
	export interface HyperParametersFormProperties {
	}
	export function CreateHyperParametersFormGroup() {
		return new FormGroup<HyperParametersFormProperties>({
		});

	}


	/** A channel is a named input source that training algorithms can consume.  */
	export interface Channel {

		/** Required */
		ChannelName: string;

		/** Required */
		DataSource: DataSource;
		ContentType?: string;
		CompressionType?: CompressionType;
		RecordWrapperType?: RecordWrapper;
		InputMode?: TrainingInputMode;
		ShuffleConfig?: ShuffleConfig;
	}

	/** A channel is a named input source that training algorithms can consume.  */
	export interface ChannelFormProperties {

		/** Required */
		ChannelName: FormControl<string | null | undefined>,
		ContentType: FormControl<string | null | undefined>,
		CompressionType: FormControl<CompressionType | null | undefined>,
		RecordWrapperType: FormControl<RecordWrapper | null | undefined>,
		InputMode: FormControl<TrainingInputMode | null | undefined>,
	}
	export function CreateChannelFormGroup() {
		return new FormGroup<ChannelFormProperties>({
			ChannelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ContentType: new FormControl<string | null | undefined>(undefined),
			CompressionType: new FormControl<CompressionType | null | undefined>(undefined),
			RecordWrapperType: new FormControl<RecordWrapper | null | undefined>(undefined),
			InputMode: new FormControl<TrainingInputMode | null | undefined>(undefined),
		});

	}


	/** Describes the location of the channel data. */
	export interface DataSource {
		S3DataSource?: S3DataSource;
		FileSystemDataSource?: FileSystemDataSource;
	}

	/** Describes the location of the channel data. */
	export interface DataSourceFormProperties {
	}
	export function CreateDataSourceFormGroup() {
		return new FormGroup<DataSourceFormProperties>({
		});

	}


	/** <p>Describes the S3 data source.</p> <p>Your input bucket must be in the same Amazon Web Services region as your training job.</p> */
	export interface S3DataSource {

		/** Required */
		S3DataType: S3DataType;

		/** Required */
		S3Uri: string;
		S3DataDistributionType?: S3DataDistribution;
		AttributeNames?: Array<string>;
		InstanceGroupNames?: Array<string>;
	}

	/** <p>Describes the S3 data source.</p> <p>Your input bucket must be in the same Amazon Web Services region as your training job.</p> */
	export interface S3DataSourceFormProperties {

		/** Required */
		S3DataType: FormControl<S3DataType | null | undefined>,

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
		S3DataDistributionType: FormControl<S3DataDistribution | null | undefined>,
	}
	export function CreateS3DataSourceFormGroup() {
		return new FormGroup<S3DataSourceFormProperties>({
			S3DataType: new FormControl<S3DataType | null | undefined>(undefined, [Validators.required]),
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			S3DataDistributionType: new FormControl<S3DataDistribution | null | undefined>(undefined),
		});

	}

	export enum S3DataType { ManifestFile = 'ManifestFile', S3Prefix = 'S3Prefix', AugmentedManifestFile = 'AugmentedManifestFile' }

	export enum S3DataDistribution { FullyReplicated = 'FullyReplicated', ShardedByS3Key = 'ShardedByS3Key' }


	/** Specifies a file system data source for a channel. */
	export interface FileSystemDataSource {

		/** Required */
		FileSystemId: string;

		/** Required */
		FileSystemAccessMode: FileSystemAccessMode;

		/** Required */
		FileSystemType: FileSystemType;

		/** Required */
		DirectoryPath: string;
	}

	/** Specifies a file system data source for a channel. */
	export interface FileSystemDataSourceFormProperties {

		/** Required */
		FileSystemId: FormControl<string | null | undefined>,

		/** Required */
		FileSystemAccessMode: FormControl<FileSystemAccessMode | null | undefined>,

		/** Required */
		FileSystemType: FormControl<FileSystemType | null | undefined>,

		/** Required */
		DirectoryPath: FormControl<string | null | undefined>,
	}
	export function CreateFileSystemDataSourceFormGroup() {
		return new FormGroup<FileSystemDataSourceFormProperties>({
			FileSystemId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FileSystemAccessMode: new FormControl<FileSystemAccessMode | null | undefined>(undefined, [Validators.required]),
			FileSystemType: new FormControl<FileSystemType | null | undefined>(undefined, [Validators.required]),
			DirectoryPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum FileSystemAccessMode { rw = 'rw', ro = 'ro' }

	export enum FileSystemType { EFS = 'EFS', FSxLustre = 'FSxLustre' }

	export enum RecordWrapper { None = 'None', RecordIO = 'RecordIO' }


	/** <p>A configuration for a shuffle option for input data in a channel. If you use <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key prefix matches are shuffled. If you use <code>ManifestFile</code>, the order of the S3 object references in the <code>ManifestFile</code> is shuffled. If you use <code>AugmentedManifestFile</code>, the order of the JSON lines in the <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined using the <code>Seed</code> value.</p> <p>For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when <code>ShuffleConfig</code> is combined with <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.</p> */
	export interface ShuffleConfig {

		/** Required */
		Seed: number;
	}

	/** <p>A configuration for a shuffle option for input data in a channel. If you use <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key prefix matches are shuffled. If you use <code>ManifestFile</code>, the order of the S3 object references in the <code>ManifestFile</code> is shuffled. If you use <code>AugmentedManifestFile</code>, the order of the JSON lines in the <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined using the <code>Seed</code> value.</p> <p>For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when <code>ShuffleConfig</code> is combined with <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.</p> */
	export interface ShuffleConfigFormProperties {

		/** Required */
		Seed: FormControl<number | null | undefined>,
	}
	export function CreateShuffleConfigFormGroup() {
		return new FormGroup<ShuffleConfigFormProperties>({
			Seed: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Provides information about how to store model training results (model artifacts). */
	export interface OutputDataConfig {
		KmsKeyId?: string;

		/** Required */
		S3OutputPath: string;
		CompressionType?: OutputCompressionType;
	}

	/** Provides information about how to store model training results (model artifacts). */
	export interface OutputDataConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
		CompressionType: FormControl<OutputCompressionType | null | undefined>,
	}
	export function CreateOutputDataConfigFormGroup() {
		return new FormGroup<OutputDataConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CompressionType: new FormControl<OutputCompressionType | null | undefined>(undefined),
		});

	}

	export enum OutputCompressionType { GZIP = 'GZIP', NONE = 'NONE' }


	/** Describes the resources, including machine learning (ML) compute instances and ML storage volumes, to use for model training.  */
	export interface ResourceConfig {
		InstanceType?: TrainingInstanceType;
		InstanceCount?: number | null;

		/** Required */
		VolumeSizeInGB: number;
		VolumeKmsKeyId?: string;
		InstanceGroups?: Array<InstanceGroup>;
		KeepAlivePeriodInSeconds?: number | null;
	}

	/** Describes the resources, including machine learning (ML) compute instances and ML storage volumes, to use for model training.  */
	export interface ResourceConfigFormProperties {
		InstanceType: FormControl<TrainingInstanceType | null | undefined>,
		InstanceCount: FormControl<number | null | undefined>,

		/** Required */
		VolumeSizeInGB: FormControl<number | null | undefined>,
		VolumeKmsKeyId: FormControl<string | null | undefined>,
		KeepAlivePeriodInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateResourceConfigFormGroup() {
		return new FormGroup<ResourceConfigFormProperties>({
			InstanceType: new FormControl<TrainingInstanceType | null | undefined>(undefined),
			InstanceCount: new FormControl<number | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
			KeepAlivePeriodInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Defines an instance group for heterogeneous cluster training. When requesting a training job using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> API, you can configure multiple instance groups . */
	export interface InstanceGroup {

		/** Required */
		InstanceType: TrainingInstanceType;

		/** Required */
		InstanceCount: number;

		/** Required */
		InstanceGroupName: string;
	}

	/** Defines an instance group for heterogeneous cluster training. When requesting a training job using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> API, you can configure multiple instance groups . */
	export interface InstanceGroupFormProperties {

		/** Required */
		InstanceType: FormControl<TrainingInstanceType | null | undefined>,

		/** Required */
		InstanceCount: FormControl<number | null | undefined>,

		/** Required */
		InstanceGroupName: FormControl<string | null | undefined>,
	}
	export function CreateInstanceGroupFormGroup() {
		return new FormGroup<InstanceGroupFormProperties>({
			InstanceType: new FormControl<TrainingInstanceType | null | undefined>(undefined, [Validators.required]),
			InstanceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			InstanceGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.</p> <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. </p> <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p> <note> <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p> </note> */
	export interface StoppingCondition {
		MaxRuntimeInSeconds?: number | null;
		MaxWaitTimeInSeconds?: number | null;
	}

	/** <p>Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.</p> <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. </p> <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p> <note> <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p> </note> */
	export interface StoppingConditionFormProperties {
		MaxRuntimeInSeconds: FormControl<number | null | undefined>,
		MaxWaitTimeInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateStoppingConditionFormGroup() {
		return new FormGroup<StoppingConditionFormProperties>({
			MaxRuntimeInSeconds: new FormControl<number | null | undefined>(undefined),
			MaxWaitTimeInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Defines the input needed to run a transform job using the inference specification specified in the algorithm. */
	export interface TransformJobDefinition {
		MaxConcurrentTransforms?: number | null;
		MaxPayloadInMB?: number | null;
		BatchStrategy?: BatchStrategy;
		Environment?: TransformEnvironmentMap;

		/** Required */
		TransformInput: TransformInput;

		/** Required */
		TransformOutput: TransformOutput;

		/** Required */
		TransformResources: TransformResources;
	}

	/** Defines the input needed to run a transform job using the inference specification specified in the algorithm. */
	export interface TransformJobDefinitionFormProperties {
		MaxConcurrentTransforms: FormControl<number | null | undefined>,
		MaxPayloadInMB: FormControl<number | null | undefined>,
		BatchStrategy: FormControl<BatchStrategy | null | undefined>,
	}
	export function CreateTransformJobDefinitionFormGroup() {
		return new FormGroup<TransformJobDefinitionFormProperties>({
			MaxConcurrentTransforms: new FormControl<number | null | undefined>(undefined),
			MaxPayloadInMB: new FormControl<number | null | undefined>(undefined),
			BatchStrategy: new FormControl<BatchStrategy | null | undefined>(undefined),
		});

	}

	export enum BatchStrategy { MultiRecord = 'MultiRecord', SingleRecord = 'SingleRecord' }

	export interface TransformEnvironmentMap {
	}
	export interface TransformEnvironmentMapFormProperties {
	}
	export function CreateTransformEnvironmentMapFormGroup() {
		return new FormGroup<TransformEnvironmentMapFormProperties>({
		});

	}


	/** Describes the input source of a transform job and the way the transform job consumes it. */
	export interface TransformInput {

		/** Required */
		DataSource: TransformDataSource;
		ContentType?: string;
		CompressionType?: CompressionType;
		SplitType?: SplitType;
	}

	/** Describes the input source of a transform job and the way the transform job consumes it. */
	export interface TransformInputFormProperties {
		ContentType: FormControl<string | null | undefined>,
		CompressionType: FormControl<CompressionType | null | undefined>,
		SplitType: FormControl<SplitType | null | undefined>,
	}
	export function CreateTransformInputFormGroup() {
		return new FormGroup<TransformInputFormProperties>({
			ContentType: new FormControl<string | null | undefined>(undefined),
			CompressionType: new FormControl<CompressionType | null | undefined>(undefined),
			SplitType: new FormControl<SplitType | null | undefined>(undefined),
		});

	}


	/** Describes the location of the channel data. */
	export interface TransformDataSource {

		/** Required */
		S3DataSource: TransformS3DataSource;
	}

	/** Describes the location of the channel data. */
	export interface TransformDataSourceFormProperties {
	}
	export function CreateTransformDataSourceFormGroup() {
		return new FormGroup<TransformDataSourceFormProperties>({
		});

	}


	/** Describes the S3 data source. */
	export interface TransformS3DataSource {

		/** Required */
		S3DataType: S3DataType;

		/** Required */
		S3Uri: string;
	}

	/** Describes the S3 data source. */
	export interface TransformS3DataSourceFormProperties {

		/** Required */
		S3DataType: FormControl<S3DataType | null | undefined>,

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateTransformS3DataSourceFormGroup() {
		return new FormGroup<TransformS3DataSourceFormProperties>({
			S3DataType: new FormControl<S3DataType | null | undefined>(undefined, [Validators.required]),
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SplitType { None = 'None', Line = 'Line', RecordIO = 'RecordIO', TFRecord = 'TFRecord' }


	/** Describes the results of a transform job. */
	export interface TransformOutput {

		/** Required */
		S3OutputPath: string;
		Accept?: string;
		AssembleWith?: AssemblyType;
		KmsKeyId?: string;
	}

	/** Describes the results of a transform job. */
	export interface TransformOutputFormProperties {

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
		Accept: FormControl<string | null | undefined>,
		AssembleWith: FormControl<AssemblyType | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateTransformOutputFormGroup() {
		return new FormGroup<TransformOutputFormProperties>({
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Accept: new FormControl<string | null | undefined>(undefined),
			AssembleWith: new FormControl<AssemblyType | null | undefined>(undefined),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssemblyType { None = 'None', Line = 'Line' }


	/** Describes the resources, including ML instance types and ML instance count, to use for transform job. */
	export interface TransformResources {

		/** Required */
		InstanceType: TransformInstanceType;

		/** Required */
		InstanceCount: number;
		VolumeKmsKeyId?: string;
	}

	/** Describes the resources, including ML instance types and ML instance count, to use for transform job. */
	export interface TransformResourcesFormProperties {

		/** Required */
		InstanceType: FormControl<TransformInstanceType | null | undefined>,

		/** Required */
		InstanceCount: FormControl<number | null | undefined>,
		VolumeKmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateTransformResourcesFormGroup() {
		return new FormGroup<TransformResourcesFormProperties>({
			InstanceType: new FormControl<TransformInstanceType | null | undefined>(undefined, [Validators.required]),
			InstanceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAppResponse {
		AppArn?: string;
	}
	export interface CreateAppResponseFormProperties {
		AppArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAppResponseFormGroup() {
		return new FormGroup<CreateAppResponseFormProperties>({
			AppArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAppRequest {

		/** Required */
		DomainId: string;
		UserProfileName?: string;

		/** Required */
		AppType: AppType;

		/** Required */
		AppName: string;
		Tags?: Array<Tag>;
		ResourceSpec?: ResourceSpec;
		SpaceName?: string;
	}
	export interface CreateAppRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,

		/** Required */
		AppType: FormControl<AppType | null | undefined>,

		/** Required */
		AppName: FormControl<string | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateCreateAppRequestFormGroup() {
		return new FormGroup<CreateAppRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			AppType: new FormControl<AppType | null | undefined>(undefined, [Validators.required]),
			AppName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpaceName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AppType { JupyterServer = 'JupyterServer', KernelGateway = 'KernelGateway', TensorBoard = 'TensorBoard', RStudioServerPro = 'RStudioServerPro', RSessionGateway = 'RSessionGateway' }


	/** Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on. */
	export interface ResourceSpec {
		SageMakerImageArn?: string;
		SageMakerImageVersionArn?: string;
		InstanceType?: AppInstanceType;
		LifecycleConfigArn?: string;
	}

	/** Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on. */
	export interface ResourceSpecFormProperties {
		SageMakerImageArn: FormControl<string | null | undefined>,
		SageMakerImageVersionArn: FormControl<string | null | undefined>,
		InstanceType: FormControl<AppInstanceType | null | undefined>,
		LifecycleConfigArn: FormControl<string | null | undefined>,
	}
	export function CreateResourceSpecFormGroup() {
		return new FormGroup<ResourceSpecFormProperties>({
			SageMakerImageArn: new FormControl<string | null | undefined>(undefined),
			SageMakerImageVersionArn: new FormControl<string | null | undefined>(undefined),
			InstanceType: new FormControl<AppInstanceType | null | undefined>(undefined),
			LifecycleConfigArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AppInstanceType { system = 'system', 'ml.t3.micro' = 'ml.t3.micro', 'ml.t3.small' = 'ml.t3.small', 'ml.t3.medium' = 'ml.t3.medium', 'ml.t3.large' = 'ml.t3.large', 'ml.t3.xlarge' = 'ml.t3.xlarge', 'ml.t3.2xlarge' = 'ml.t3.2xlarge', 'ml.m5.large' = 'ml.m5.large', 'ml.m5.xlarge' = 'ml.m5.xlarge', 'ml.m5.2xlarge' = 'ml.m5.2xlarge', 'ml.m5.4xlarge' = 'ml.m5.4xlarge', 'ml.m5.8xlarge' = 'ml.m5.8xlarge', 'ml.m5.12xlarge' = 'ml.m5.12xlarge', 'ml.m5.16xlarge' = 'ml.m5.16xlarge', 'ml.m5.24xlarge' = 'ml.m5.24xlarge', 'ml.m5d.large' = 'ml.m5d.large', 'ml.m5d.xlarge' = 'ml.m5d.xlarge', 'ml.m5d.2xlarge' = 'ml.m5d.2xlarge', 'ml.m5d.4xlarge' = 'ml.m5d.4xlarge', 'ml.m5d.8xlarge' = 'ml.m5d.8xlarge', 'ml.m5d.12xlarge' = 'ml.m5d.12xlarge', 'ml.m5d.16xlarge' = 'ml.m5d.16xlarge', 'ml.m5d.24xlarge' = 'ml.m5d.24xlarge', 'ml.c5.large' = 'ml.c5.large', 'ml.c5.xlarge' = 'ml.c5.xlarge', 'ml.c5.2xlarge' = 'ml.c5.2xlarge', 'ml.c5.4xlarge' = 'ml.c5.4xlarge', 'ml.c5.9xlarge' = 'ml.c5.9xlarge', 'ml.c5.12xlarge' = 'ml.c5.12xlarge', 'ml.c5.18xlarge' = 'ml.c5.18xlarge', 'ml.c5.24xlarge' = 'ml.c5.24xlarge', 'ml.p3.2xlarge' = 'ml.p3.2xlarge', 'ml.p3.8xlarge' = 'ml.p3.8xlarge', 'ml.p3.16xlarge' = 'ml.p3.16xlarge', 'ml.p3dn.24xlarge' = 'ml.p3dn.24xlarge', 'ml.g4dn.xlarge' = 'ml.g4dn.xlarge', 'ml.g4dn.2xlarge' = 'ml.g4dn.2xlarge', 'ml.g4dn.4xlarge' = 'ml.g4dn.4xlarge', 'ml.g4dn.8xlarge' = 'ml.g4dn.8xlarge', 'ml.g4dn.12xlarge' = 'ml.g4dn.12xlarge', 'ml.g4dn.16xlarge' = 'ml.g4dn.16xlarge', 'ml.r5.large' = 'ml.r5.large', 'ml.r5.xlarge' = 'ml.r5.xlarge', 'ml.r5.2xlarge' = 'ml.r5.2xlarge', 'ml.r5.4xlarge' = 'ml.r5.4xlarge', 'ml.r5.8xlarge' = 'ml.r5.8xlarge', 'ml.r5.12xlarge' = 'ml.r5.12xlarge', 'ml.r5.16xlarge' = 'ml.r5.16xlarge', 'ml.r5.24xlarge' = 'ml.r5.24xlarge', 'ml.g5.xlarge' = 'ml.g5.xlarge', 'ml.g5.2xlarge' = 'ml.g5.2xlarge', 'ml.g5.4xlarge' = 'ml.g5.4xlarge', 'ml.g5.8xlarge' = 'ml.g5.8xlarge', 'ml.g5.16xlarge' = 'ml.g5.16xlarge', 'ml.g5.12xlarge' = 'ml.g5.12xlarge', 'ml.g5.24xlarge' = 'ml.g5.24xlarge', 'ml.g5.48xlarge' = 'ml.g5.48xlarge', 'ml.geospatial.interactive' = 'ml.geospatial.interactive', 'ml.p4d.24xlarge' = 'ml.p4d.24xlarge', 'ml.p4de.24xlarge' = 'ml.p4de.24xlarge' }

	export interface ResourceInUse {
	}
	export interface ResourceInUseFormProperties {
	}
	export function CreateResourceInUseFormGroup() {
		return new FormGroup<ResourceInUseFormProperties>({
		});

	}

	export interface CreateAppImageConfigResponse {
		AppImageConfigArn?: string;
	}
	export interface CreateAppImageConfigResponseFormProperties {
		AppImageConfigArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAppImageConfigResponseFormGroup() {
		return new FormGroup<CreateAppImageConfigResponseFormProperties>({
			AppImageConfigArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAppImageConfigRequest {

		/** Required */
		AppImageConfigName: string;
		Tags?: Array<Tag>;
		KernelGatewayImageConfig?: KernelGatewayImageConfig;
	}
	export interface CreateAppImageConfigRequestFormProperties {

		/** Required */
		AppImageConfigName: FormControl<string | null | undefined>,
	}
	export function CreateCreateAppImageConfigRequestFormGroup() {
		return new FormGroup<CreateAppImageConfigRequestFormProperties>({
			AppImageConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. */
	export interface KernelGatewayImageConfig {

		/** Required */
		KernelSpecs: Array<KernelSpec>;
		FileSystemConfig?: FileSystemConfig;
	}

	/** The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app. */
	export interface KernelGatewayImageConfigFormProperties {
	}
	export function CreateKernelGatewayImageConfigFormGroup() {
		return new FormGroup<KernelGatewayImageConfigFormProperties>({
		});

	}


	/** The specification of a Jupyter kernel. */
	export interface KernelSpec {

		/** Required */
		Name: string;
		DisplayName?: string;
	}

	/** The specification of a Jupyter kernel. */
	export interface KernelSpecFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
	}
	export function CreateKernelSpecFormGroup() {
		return new FormGroup<KernelSpecFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DisplayName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Amazon Elastic File System (EFS) storage configuration for a SageMaker image. */
	export interface FileSystemConfig {
		MountPath?: string;
		DefaultUid?: number | null;
		DefaultGid?: number | null;
	}

	/** The Amazon Elastic File System (EFS) storage configuration for a SageMaker image. */
	export interface FileSystemConfigFormProperties {
		MountPath: FormControl<string | null | undefined>,
		DefaultUid: FormControl<number | null | undefined>,
		DefaultGid: FormControl<number | null | undefined>,
	}
	export function CreateFileSystemConfigFormGroup() {
		return new FormGroup<FileSystemConfigFormProperties>({
			MountPath: new FormControl<string | null | undefined>(undefined),
			DefaultUid: new FormControl<number | null | undefined>(undefined),
			DefaultGid: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CreateArtifactResponse {
		ArtifactArn?: string;
	}
	export interface CreateArtifactResponseFormProperties {
		ArtifactArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateArtifactResponseFormGroup() {
		return new FormGroup<CreateArtifactResponseFormProperties>({
			ArtifactArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateArtifactRequest {
		ArtifactName?: string;

		/** Required */
		Source: ArtifactSource;

		/** Required */
		ArtifactType: string;
		Properties?: LineageEntityParameters;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		Tags?: Array<Tag>;
	}
	export interface CreateArtifactRequestFormProperties {
		ArtifactName: FormControl<string | null | undefined>,

		/** Required */
		ArtifactType: FormControl<string | null | undefined>,
	}
	export function CreateCreateArtifactRequestFormGroup() {
		return new FormGroup<CreateArtifactRequestFormProperties>({
			ArtifactName: new FormControl<string | null | undefined>(undefined),
			ArtifactType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A structure describing the source of an artifact. */
	export interface ArtifactSource {

		/** Required */
		SourceUri: string;
		SourceTypes?: Array<ArtifactSourceType>;
	}

	/** A structure describing the source of an artifact. */
	export interface ArtifactSourceFormProperties {

		/** Required */
		SourceUri: FormControl<string | null | undefined>,
	}
	export function CreateArtifactSourceFormGroup() {
		return new FormGroup<ArtifactSourceFormProperties>({
			SourceUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The ID and ID type of an artifact source. */
	export interface ArtifactSourceType {

		/** Required */
		SourceIdType: ArtifactSourceIdType;

		/** Required */
		Value: string;
	}

	/** The ID and ID type of an artifact source. */
	export interface ArtifactSourceTypeFormProperties {

		/** Required */
		SourceIdType: FormControl<ArtifactSourceIdType | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateArtifactSourceTypeFormGroup() {
		return new FormGroup<ArtifactSourceTypeFormProperties>({
			SourceIdType: new FormControl<ArtifactSourceIdType | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ArtifactSourceIdType { MD5Hash = 'MD5Hash', S3ETag = 'S3ETag', S3Version = 'S3Version', Custom = 'Custom' }

	export interface CreateAutoMLJobResponse {

		/** Required */
		AutoMLJobArn: string;
	}
	export interface CreateAutoMLJobResponseFormProperties {

		/** Required */
		AutoMLJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAutoMLJobResponseFormGroup() {
		return new FormGroup<CreateAutoMLJobResponseFormProperties>({
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateAutoMLJobRequest {

		/** Required */
		AutoMLJobName: string;

		/** Required */
		InputDataConfig: Array<AutoMLChannel>;

		/** Required */
		OutputDataConfig: AutoMLOutputDataConfig;
		ProblemType?: ProblemType;
		AutoMLJobObjective?: AutoMLJobObjective;
		AutoMLJobConfig?: AutoMLJobConfig;

		/** Required */
		RoleArn: string;
		GenerateCandidateDefinitionsOnly?: boolean | null;
		Tags?: Array<Tag>;
		ModelDeployConfig?: ModelDeployConfig;
	}
	export interface CreateAutoMLJobRequestFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,
		ProblemType: FormControl<ProblemType | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		GenerateCandidateDefinitionsOnly: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateAutoMLJobRequestFormGroup() {
		return new FormGroup<CreateAutoMLJobRequestFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProblemType: new FormControl<ProblemType | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			GenerateCandidateDefinitionsOnly: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** <p>A channel is a named input source that training algorithms can consume. The validation dataset size is limited to less than 2 GB. The training dataset size must be less than 100 GB. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html"> Channel</a>.</p> <note> <p>A validation dataset must contain the same headers as the training dataset.</p> </note> <p/> */
	export interface AutoMLChannel {

		/** Required */
		DataSource: AutoMLDataSource;
		CompressionType?: CompressionType;

		/** Required */
		TargetAttributeName: string;
		ContentType?: string;
		ChannelType?: AutoMLChannelType;
		SampleWeightAttributeName?: string;
	}

	/** <p>A channel is a named input source that training algorithms can consume. The validation dataset size is limited to less than 2 GB. The training dataset size must be less than 100 GB. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html"> Channel</a>.</p> <note> <p>A validation dataset must contain the same headers as the training dataset.</p> </note> <p/> */
	export interface AutoMLChannelFormProperties {
		CompressionType: FormControl<CompressionType | null | undefined>,

		/** Required */
		TargetAttributeName: FormControl<string | null | undefined>,
		ContentType: FormControl<string | null | undefined>,
		ChannelType: FormControl<AutoMLChannelType | null | undefined>,
		SampleWeightAttributeName: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLChannelFormGroup() {
		return new FormGroup<AutoMLChannelFormProperties>({
			CompressionType: new FormControl<CompressionType | null | undefined>(undefined),
			TargetAttributeName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ContentType: new FormControl<string | null | undefined>(undefined),
			ChannelType: new FormControl<AutoMLChannelType | null | undefined>(undefined),
			SampleWeightAttributeName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The data source for the Autopilot job. */
	export interface AutoMLDataSource {

		/** Required */
		S3DataSource: AutoMLS3DataSource;
	}

	/** The data source for the Autopilot job. */
	export interface AutoMLDataSourceFormProperties {
	}
	export function CreateAutoMLDataSourceFormGroup() {
		return new FormGroup<AutoMLDataSourceFormProperties>({
		});

	}


	/** Describes the Amazon S3 data source. */
	export interface AutoMLS3DataSource {

		/** Required */
		S3DataType: S3DataType;

		/** Required */
		S3Uri: string;
	}

	/** Describes the Amazon S3 data source. */
	export interface AutoMLS3DataSourceFormProperties {

		/** Required */
		S3DataType: FormControl<S3DataType | null | undefined>,

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLS3DataSourceFormGroup() {
		return new FormGroup<AutoMLS3DataSourceFormProperties>({
			S3DataType: new FormControl<S3DataType | null | undefined>(undefined, [Validators.required]),
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AutoMLChannelType { training = 'training', validation = 'validation' }


	/** The output data configuration. */
	export interface AutoMLOutputDataConfig {
		KmsKeyId?: string;

		/** Required */
		S3OutputPath: string;
	}

	/** The output data configuration. */
	export interface AutoMLOutputDataConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLOutputDataConfigFormGroup() {
		return new FormGroup<AutoMLOutputDataConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ProblemType { BinaryClassification = 'BinaryClassification', MulticlassClassification = 'MulticlassClassification', Regression = 'Regression' }


	/** Specifies a metric to minimize or maximize as the objective of a job. */
	export interface AutoMLJobObjective {

		/** Required */
		MetricName: AutoMLMetricEnum;
	}

	/** Specifies a metric to minimize or maximize as the objective of a job. */
	export interface AutoMLJobObjectiveFormProperties {

		/** Required */
		MetricName: FormControl<AutoMLMetricEnum | null | undefined>,
	}
	export function CreateAutoMLJobObjectiveFormGroup() {
		return new FormGroup<AutoMLJobObjectiveFormProperties>({
			MetricName: new FormControl<AutoMLMetricEnum | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AutoMLMetricEnum { Accuracy = 'Accuracy', MSE = 'MSE', F1 = 'F1', F1macro = 'F1macro', AUC = 'AUC', RMSE = 'RMSE', MAE = 'MAE', R2 = 'R2', BalancedAccuracy = 'BalancedAccuracy', Precision = 'Precision', PrecisionMacro = 'PrecisionMacro', Recall = 'Recall', RecallMacro = 'RecallMacro', MAPE = 'MAPE', MASE = 'MASE', WAPE = 'WAPE', AverageWeightedQuantileLoss = 'AverageWeightedQuantileLoss' }


	/** A collection of settings used for an AutoML job. */
	export interface AutoMLJobConfig {
		CompletionCriteria?: AutoMLJobCompletionCriteria;
		SecurityConfig?: AutoMLSecurityConfig;
		DataSplitConfig?: AutoMLDataSplitConfig;
		CandidateGenerationConfig?: AutoMLCandidateGenerationConfig;
		Mode?: AutoMLMode;
	}

	/** A collection of settings used for an AutoML job. */
	export interface AutoMLJobConfigFormProperties {
		Mode: FormControl<AutoMLMode | null | undefined>,
	}
	export function CreateAutoMLJobConfigFormGroup() {
		return new FormGroup<AutoMLJobConfigFormProperties>({
			Mode: new FormControl<AutoMLMode | null | undefined>(undefined),
		});

	}


	/** How long a job is allowed to run, or how many candidates a job is allowed to generate. */
	export interface AutoMLJobCompletionCriteria {
		MaxCandidates?: number | null;
		MaxRuntimePerTrainingJobInSeconds?: number | null;
		MaxAutoMLJobRuntimeInSeconds?: number | null;
	}

	/** How long a job is allowed to run, or how many candidates a job is allowed to generate. */
	export interface AutoMLJobCompletionCriteriaFormProperties {
		MaxCandidates: FormControl<number | null | undefined>,
		MaxRuntimePerTrainingJobInSeconds: FormControl<number | null | undefined>,
		MaxAutoMLJobRuntimeInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateAutoMLJobCompletionCriteriaFormGroup() {
		return new FormGroup<AutoMLJobCompletionCriteriaFormProperties>({
			MaxCandidates: new FormControl<number | null | undefined>(undefined),
			MaxRuntimePerTrainingJobInSeconds: new FormControl<number | null | undefined>(undefined),
			MaxAutoMLJobRuntimeInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Security options. */
	export interface AutoMLSecurityConfig {
		VolumeKmsKeyId?: string;
		EnableInterContainerTrafficEncryption?: boolean | null;
		VpcConfig?: VpcConfig;
	}

	/** Security options. */
	export interface AutoMLSecurityConfigFormProperties {
		VolumeKmsKeyId: FormControl<string | null | undefined>,
		EnableInterContainerTrafficEncryption: FormControl<boolean | null | undefined>,
	}
	export function CreateAutoMLSecurityConfigFormGroup() {
		return new FormGroup<AutoMLSecurityConfigFormProperties>({
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
			EnableInterContainerTrafficEncryption: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>.  */
	export interface VpcConfig {

		/** Required */
		SecurityGroupIds: Array<string>;

		/** Required */
		Subnets: Array<string>;
	}

	/** Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>.  */
	export interface VpcConfigFormProperties {
	}
	export function CreateVpcConfigFormGroup() {
		return new FormGroup<VpcConfigFormProperties>({
		});

	}


	/** <p>This structure specifies how to split the data into train and validation datasets.</p> <p>The validation and training datasets must contain the same headers. For jobs created by calling <code>CreateAutoMLJob</code>, the validation dataset must be less than 2 GB in size.</p> */
	export interface AutoMLDataSplitConfig {
		ValidationFraction?: number;
	}

	/** <p>This structure specifies how to split the data into train and validation datasets.</p> <p>The validation and training datasets must contain the same headers. For jobs created by calling <code>CreateAutoMLJob</code>, the validation dataset must be less than 2 GB in size.</p> */
	export interface AutoMLDataSplitConfigFormProperties {
		ValidationFraction: FormControl<number | null | undefined>,
	}
	export function CreateAutoMLDataSplitConfigFormGroup() {
		return new FormGroup<AutoMLDataSplitConfigFormProperties>({
			ValidationFraction: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Stores the configuration information for how a candidate is generated (optional). */
	export interface AutoMLCandidateGenerationConfig {
		FeatureSpecificationS3Uri?: string;
		AlgorithmsConfig?: Array<AutoMLAlgorithmConfig>;
	}

	/** Stores the configuration information for how a candidate is generated (optional). */
	export interface AutoMLCandidateGenerationConfigFormProperties {
		FeatureSpecificationS3Uri: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLCandidateGenerationConfigFormGroup() {
		return new FormGroup<AutoMLCandidateGenerationConfigFormProperties>({
			FeatureSpecificationS3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The collection of algorithms run on a dataset for training the model candidates of an Autopilot job. */
	export interface AutoMLAlgorithmConfig {

		/** Required */
		AutoMLAlgorithms: Array<AutoMLAlgorithm>;
	}

	/** The collection of algorithms run on a dataset for training the model candidates of an Autopilot job. */
	export interface AutoMLAlgorithmConfigFormProperties {
	}
	export function CreateAutoMLAlgorithmConfigFormGroup() {
		return new FormGroup<AutoMLAlgorithmConfigFormProperties>({
		});

	}

	export enum AutoMLAlgorithm { xgboost = 'xgboost', 'linear-learner' = 'linear-learner', mlp = 'mlp', lightgbm = 'lightgbm', catboost = 'catboost', randomforest = 'randomforest', 'extra-trees' = 'extra-trees', 'nn-torch' = 'nn-torch', fastai = 'fastai' }

	export enum AutoMLMode { AUTO = 'AUTO', ENSEMBLING = 'ENSEMBLING', HYPERPARAMETER_TUNING = 'HYPERPARAMETER_TUNING' }


	/** Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment. */
	export interface ModelDeployConfig {
		AutoGenerateEndpointName?: boolean | null;
		EndpointName?: string;
	}

	/** Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment. */
	export interface ModelDeployConfigFormProperties {
		AutoGenerateEndpointName: FormControl<boolean | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateModelDeployConfigFormGroup() {
		return new FormGroup<ModelDeployConfigFormProperties>({
			AutoGenerateEndpointName: new FormControl<boolean | null | undefined>(undefined),
			EndpointName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAutoMLJobV2Response {

		/** Required */
		AutoMLJobArn: string;
	}
	export interface CreateAutoMLJobV2ResponseFormProperties {

		/** Required */
		AutoMLJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAutoMLJobV2ResponseFormGroup() {
		return new FormGroup<CreateAutoMLJobV2ResponseFormProperties>({
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateAutoMLJobV2Request {

		/** Required */
		AutoMLJobName: string;

		/** Required */
		AutoMLJobInputDataConfig: Array<AutoMLJobChannel>;

		/** Required */
		OutputDataConfig: AutoMLOutputDataConfig;

		/** Required */
		AutoMLProblemTypeConfig: AutoMLProblemTypeConfig;

		/** Required */
		RoleArn: string;
		Tags?: Array<Tag>;
		SecurityConfig?: AutoMLSecurityConfig;
		AutoMLJobObjective?: AutoMLJobObjective;
		ModelDeployConfig?: ModelDeployConfig;
		DataSplitConfig?: AutoMLDataSplitConfig;
	}
	export interface CreateAutoMLJobV2RequestFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAutoMLJobV2RequestFormGroup() {
		return new FormGroup<CreateAutoMLJobV2RequestFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A channel is a named input source that training algorithms can consume. This channel is used for AutoML jobs V2 (jobs created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>). */
	export interface AutoMLJobChannel {
		ChannelType?: AutoMLChannelType;
		ContentType?: string;
		CompressionType?: CompressionType;
		DataSource?: AutoMLDataSource;
	}

	/** A channel is a named input source that training algorithms can consume. This channel is used for AutoML jobs V2 (jobs created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a>). */
	export interface AutoMLJobChannelFormProperties {
		ChannelType: FormControl<AutoMLChannelType | null | undefined>,
		ContentType: FormControl<string | null | undefined>,
		CompressionType: FormControl<CompressionType | null | undefined>,
	}
	export function CreateAutoMLJobChannelFormGroup() {
		return new FormGroup<AutoMLJobChannelFormProperties>({
			ChannelType: new FormControl<AutoMLChannelType | null | undefined>(undefined),
			ContentType: new FormControl<string | null | undefined>(undefined),
			CompressionType: new FormControl<CompressionType | null | undefined>(undefined),
		});

	}


	/** A collection of settings specific to the problem type used to configure an AutoML job V2. There must be one and only one config of the following type. */
	export interface AutoMLProblemTypeConfig {
		ImageClassificationJobConfig?: ImageClassificationJobConfig;
		TextClassificationJobConfig?: TextClassificationJobConfig;
		TabularJobConfig?: TabularJobConfig;
		TimeSeriesForecastingJobConfig?: TimeSeriesForecastingJobConfig;
	}

	/** A collection of settings specific to the problem type used to configure an AutoML job V2. There must be one and only one config of the following type. */
	export interface AutoMLProblemTypeConfigFormProperties {
	}
	export function CreateAutoMLProblemTypeConfigFormGroup() {
		return new FormGroup<AutoMLProblemTypeConfigFormProperties>({
		});

	}


	/** Stores the configuration information for the image classification problem of an AutoML job V2. */
	export interface ImageClassificationJobConfig {
		CompletionCriteria?: AutoMLJobCompletionCriteria;
	}

	/** Stores the configuration information for the image classification problem of an AutoML job V2. */
	export interface ImageClassificationJobConfigFormProperties {
	}
	export function CreateImageClassificationJobConfigFormGroup() {
		return new FormGroup<ImageClassificationJobConfigFormProperties>({
		});

	}


	/** Stores the configuration information for the text classification problem of an AutoML job V2. */
	export interface TextClassificationJobConfig {
		CompletionCriteria?: AutoMLJobCompletionCriteria;

		/** Required */
		ContentColumn: string;

		/** Required */
		TargetLabelColumn: string;
	}

	/** Stores the configuration information for the text classification problem of an AutoML job V2. */
	export interface TextClassificationJobConfigFormProperties {

		/** Required */
		ContentColumn: FormControl<string | null | undefined>,

		/** Required */
		TargetLabelColumn: FormControl<string | null | undefined>,
	}
	export function CreateTextClassificationJobConfigFormGroup() {
		return new FormGroup<TextClassificationJobConfigFormProperties>({
			ContentColumn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TargetLabelColumn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The collection of settings used by an AutoML job V2 for the <code>TABULAR</code> problem type. */
	export interface TabularJobConfig {
		CandidateGenerationConfig?: CandidateGenerationConfig;

		/** How long a job is allowed to run, or how many candidates a job is allowed to generate. */
		CompletionCriteria?: AutoMLJobCompletionCriteria;
		FeatureSpecificationS3Uri?: string;
		Mode?: AutoMLMode;
		GenerateCandidateDefinitionsOnly?: boolean | null;
		ProblemType?: ProblemType;

		/** Required */
		TargetAttributeName: string;
		SampleWeightAttributeName?: string;
	}

	/** The collection of settings used by an AutoML job V2 for the <code>TABULAR</code> problem type. */
	export interface TabularJobConfigFormProperties {
		FeatureSpecificationS3Uri: FormControl<string | null | undefined>,
		Mode: FormControl<AutoMLMode | null | undefined>,
		GenerateCandidateDefinitionsOnly: FormControl<boolean | null | undefined>,
		ProblemType: FormControl<ProblemType | null | undefined>,

		/** Required */
		TargetAttributeName: FormControl<string | null | undefined>,
		SampleWeightAttributeName: FormControl<string | null | undefined>,
	}
	export function CreateTabularJobConfigFormGroup() {
		return new FormGroup<TabularJobConfigFormProperties>({
			FeatureSpecificationS3Uri: new FormControl<string | null | undefined>(undefined),
			Mode: new FormControl<AutoMLMode | null | undefined>(undefined),
			GenerateCandidateDefinitionsOnly: new FormControl<boolean | null | undefined>(undefined),
			ProblemType: new FormControl<ProblemType | null | undefined>(undefined),
			TargetAttributeName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SampleWeightAttributeName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Stores the configuration information for how model candidates are generated using an AutoML job V2. */
	export interface CandidateGenerationConfig {
		AlgorithmsConfig?: Array<AutoMLAlgorithmConfig>;
	}

	/** Stores the configuration information for how model candidates are generated using an AutoML job V2. */
	export interface CandidateGenerationConfigFormProperties {
	}
	export function CreateCandidateGenerationConfigFormGroup() {
		return new FormGroup<CandidateGenerationConfigFormProperties>({
		});

	}


	/** <p>The collection of settings used by an AutoML job V2 for the time-series forecasting problem type.</p> <note> <p>The <code>TimeSeriesForecastingJobConfig</code> problem type is only available in private beta. Contact Amazon Web Services Support or your account manager to learn more about access privileges.</p> </note> */
	export interface TimeSeriesForecastingJobConfig {
		FeatureSpecificationS3Uri?: string;

		/** How long a job is allowed to run, or how many candidates a job is allowed to generate. */
		CompletionCriteria?: AutoMLJobCompletionCriteria;

		/** Required */
		ForecastFrequency: string;

		/** Required */
		ForecastHorizon: number;
		ForecastQuantiles?: Array<string>;
		Transformations?: TimeSeriesTransformations;

		/** Required */
		TimeSeriesConfig: TimeSeriesConfig;
	}

	/** <p>The collection of settings used by an AutoML job V2 for the time-series forecasting problem type.</p> <note> <p>The <code>TimeSeriesForecastingJobConfig</code> problem type is only available in private beta. Contact Amazon Web Services Support or your account manager to learn more about access privileges.</p> </note> */
	export interface TimeSeriesForecastingJobConfigFormProperties {
		FeatureSpecificationS3Uri: FormControl<string | null | undefined>,

		/** Required */
		ForecastFrequency: FormControl<string | null | undefined>,

		/** Required */
		ForecastHorizon: FormControl<number | null | undefined>,
	}
	export function CreateTimeSeriesForecastingJobConfigFormGroup() {
		return new FormGroup<TimeSeriesForecastingJobConfigFormProperties>({
			FeatureSpecificationS3Uri: new FormControl<string | null | undefined>(undefined),
			ForecastFrequency: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ForecastHorizon: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Transformations allowed on the dataset. Supported transformations are <code>Filling</code> and <code>Aggregation</code>. <code>Filling</code> specifies how to add values to missing values in the dataset. <code>Aggregation</code> defines how to aggregate data that does not align with forecast frequency. */
	export interface TimeSeriesTransformations {
		Filling?: FillingTransformations;
		Aggregation?: AggregationTransformations;
	}

	/** Transformations allowed on the dataset. Supported transformations are <code>Filling</code> and <code>Aggregation</code>. <code>Filling</code> specifies how to add values to missing values in the dataset. <code>Aggregation</code> defines how to aggregate data that does not align with forecast frequency. */
	export interface TimeSeriesTransformationsFormProperties {
	}
	export function CreateTimeSeriesTransformationsFormGroup() {
		return new FormGroup<TimeSeriesTransformationsFormProperties>({
		});

	}

	export interface FillingTransformations {
	}
	export interface FillingTransformationsFormProperties {
	}
	export function CreateFillingTransformationsFormGroup() {
		return new FormGroup<FillingTransformationsFormProperties>({
		});

	}

	export interface AggregationTransformations {
	}
	export interface AggregationTransformationsFormProperties {
	}
	export function CreateAggregationTransformationsFormGroup() {
		return new FormGroup<AggregationTransformationsFormProperties>({
		});

	}


	/** The collection of components that defines the time-series. */
	export interface TimeSeriesConfig {

		/** Required */
		TargetAttributeName: string;

		/** Required */
		TimestampAttributeName: string;

		/** Required */
		ItemIdentifierAttributeName: string;
		GroupingAttributeNames?: Array<string>;
	}

	/** The collection of components that defines the time-series. */
	export interface TimeSeriesConfigFormProperties {

		/** Required */
		TargetAttributeName: FormControl<string | null | undefined>,

		/** Required */
		TimestampAttributeName: FormControl<string | null | undefined>,

		/** Required */
		ItemIdentifierAttributeName: FormControl<string | null | undefined>,
	}
	export function CreateTimeSeriesConfigFormGroup() {
		return new FormGroup<TimeSeriesConfigFormProperties>({
			TargetAttributeName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TimestampAttributeName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ItemIdentifierAttributeName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateCodeRepositoryOutput {

		/** Required */
		CodeRepositoryArn: string;
	}
	export interface CreateCodeRepositoryOutputFormProperties {

		/** Required */
		CodeRepositoryArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateCodeRepositoryOutputFormGroup() {
		return new FormGroup<CreateCodeRepositoryOutputFormProperties>({
			CodeRepositoryArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateCodeRepositoryInput {

		/** Required */
		CodeRepositoryName: string;

		/** Required */
		GitConfig: GitConfig;
		Tags?: Array<Tag>;
	}
	export interface CreateCodeRepositoryInputFormProperties {

		/** Required */
		CodeRepositoryName: FormControl<string | null | undefined>,
	}
	export function CreateCreateCodeRepositoryInputFormGroup() {
		return new FormGroup<CreateCodeRepositoryInputFormProperties>({
			CodeRepositoryName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specifies configuration details for a Git repository in your Amazon Web Services account. */
	export interface GitConfig {

		/** Required */
		RepositoryUrl: string;
		Branch?: string;
		SecretArn?: string;
	}

	/** Specifies configuration details for a Git repository in your Amazon Web Services account. */
	export interface GitConfigFormProperties {

		/** Required */
		RepositoryUrl: FormControl<string | null | undefined>,
		Branch: FormControl<string | null | undefined>,
		SecretArn: FormControl<string | null | undefined>,
	}
	export function CreateGitConfigFormGroup() {
		return new FormGroup<GitConfigFormProperties>({
			RepositoryUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Branch: new FormControl<string | null | undefined>(undefined),
			SecretArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateCompilationJobResponse {

		/** Required */
		CompilationJobArn: string;
	}
	export interface CreateCompilationJobResponseFormProperties {

		/** Required */
		CompilationJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateCompilationJobResponseFormGroup() {
		return new FormGroup<CreateCompilationJobResponseFormProperties>({
			CompilationJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateCompilationJobRequest {

		/** Required */
		CompilationJobName: string;

		/** Required */
		RoleArn: string;
		ModelPackageVersionArn?: string;
		InputConfig?: InputConfig;

		/** Required */
		OutputConfig: OutputConfig;
		VpcConfig?: NeoVpcConfig;

		/** Required */
		StoppingCondition: StoppingCondition;
		Tags?: Array<Tag>;
	}
	export interface CreateCompilationJobRequestFormProperties {

		/** Required */
		CompilationJobName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		ModelPackageVersionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateCompilationJobRequestFormGroup() {
		return new FormGroup<CreateCompilationJobRequestFormProperties>({
			CompilationJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageVersionArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained. */
	export interface InputConfig {

		/** Required */
		S3Uri: string;

		/** Required */
		DataInputConfig: string;

		/** Required */
		Framework: Framework;
		FrameworkVersion?: string;
	}

	/** Contains information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained. */
	export interface InputConfigFormProperties {

		/** Required */
		S3Uri: FormControl<string | null | undefined>,

		/** Required */
		DataInputConfig: FormControl<string | null | undefined>,

		/** Required */
		Framework: FormControl<Framework | null | undefined>,
		FrameworkVersion: FormControl<string | null | undefined>,
	}
	export function CreateInputConfigFormGroup() {
		return new FormGroup<InputConfigFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DataInputConfig: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Framework: new FormControl<Framework | null | undefined>(undefined, [Validators.required]),
			FrameworkVersion: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Framework { TENSORFLOW = 'TENSORFLOW', KERAS = 'KERAS', MXNET = 'MXNET', ONNX = 'ONNX', PYTORCH = 'PYTORCH', XGBOOST = 'XGBOOST', TFLITE = 'TFLITE', DARKNET = 'DARKNET', SKLEARN = 'SKLEARN' }


	/** Contains information about the output location for the compiled model and the target device that the model runs on. <code>TargetDevice</code> and <code>TargetPlatform</code> are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the <code>TargetDevice</code> list, use <code>TargetPlatform</code> to describe the platform of your edge device and <code>CompilerOptions</code> if there are specific settings that are required or recommended to use for particular TargetPlatform. */
	export interface OutputConfig {

		/** Required */
		S3OutputLocation: string;
		TargetDevice?: TargetDevice;
		TargetPlatform?: TargetPlatform;
		CompilerOptions?: string;
		KmsKeyId?: string;
	}

	/** Contains information about the output location for the compiled model and the target device that the model runs on. <code>TargetDevice</code> and <code>TargetPlatform</code> are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the <code>TargetDevice</code> list, use <code>TargetPlatform</code> to describe the platform of your edge device and <code>CompilerOptions</code> if there are specific settings that are required or recommended to use for particular TargetPlatform. */
	export interface OutputConfigFormProperties {

		/** Required */
		S3OutputLocation: FormControl<string | null | undefined>,
		TargetDevice: FormControl<TargetDevice | null | undefined>,
		CompilerOptions: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateOutputConfigFormGroup() {
		return new FormGroup<OutputConfigFormProperties>({
			S3OutputLocation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TargetDevice: new FormControl<TargetDevice | null | undefined>(undefined),
			CompilerOptions: new FormControl<string | null | undefined>(undefined),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TargetDevice { lambda = 'lambda', ml_m4 = 'ml_m4', ml_m5 = 'ml_m5', ml_c4 = 'ml_c4', ml_c5 = 'ml_c5', ml_p2 = 'ml_p2', ml_p3 = 'ml_p3', ml_g4dn = 'ml_g4dn', ml_inf1 = 'ml_inf1', ml_inf2 = 'ml_inf2', ml_trn1 = 'ml_trn1', ml_eia2 = 'ml_eia2', jetson_tx1 = 'jetson_tx1', jetson_tx2 = 'jetson_tx2', jetson_nano = 'jetson_nano', jetson_xavier = 'jetson_xavier', rasp3b = 'rasp3b', imx8qm = 'imx8qm', deeplens = 'deeplens', rk3399 = 'rk3399', rk3288 = 'rk3288', aisage = 'aisage', sbe_c = 'sbe_c', qcs605 = 'qcs605', qcs603 = 'qcs603', sitara_am57x = 'sitara_am57x', amba_cv2 = 'amba_cv2', amba_cv22 = 'amba_cv22', amba_cv25 = 'amba_cv25', x86_win32 = 'x86_win32', x86_win64 = 'x86_win64', coreml = 'coreml', jacinto_tda4vm = 'jacinto_tda4vm', imx8mplus = 'imx8mplus' }


	/** Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of <code>TargetDevice</code>. */
	export interface TargetPlatform {

		/** Required */
		Os: TargetPlatformOs;

		/** Required */
		Arch: TargetPlatformArch;
		Accelerator?: TargetPlatformAccelerator;
	}

	/** Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of <code>TargetDevice</code>. */
	export interface TargetPlatformFormProperties {

		/** Required */
		Os: FormControl<TargetPlatformOs | null | undefined>,

		/** Required */
		Arch: FormControl<TargetPlatformArch | null | undefined>,
		Accelerator: FormControl<TargetPlatformAccelerator | null | undefined>,
	}
	export function CreateTargetPlatformFormGroup() {
		return new FormGroup<TargetPlatformFormProperties>({
			Os: new FormControl<TargetPlatformOs | null | undefined>(undefined, [Validators.required]),
			Arch: new FormControl<TargetPlatformArch | null | undefined>(undefined, [Validators.required]),
			Accelerator: new FormControl<TargetPlatformAccelerator | null | undefined>(undefined),
		});

	}

	export enum TargetPlatformOs { ANDROID = 'ANDROID', LINUX = 'LINUX' }

	export enum TargetPlatformArch { X86_64 = 'X86_64', X86 = 'X86', ARM64 = 'ARM64', ARM_EABI = 'ARM_EABI', ARM_EABIHF = 'ARM_EABIHF' }

	export enum TargetPlatformAccelerator { INTEL_GRAPHICS = 'INTEL_GRAPHICS', MALI = 'MALI', NVIDIA = 'NVIDIA', NNA = 'NNA' }


	/** The <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a> configuration object that specifies the VPC that you want the compilation jobs to connect to. For more information on controlling access to your Amazon S3 buckets used for compilation job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC</a>. */
	export interface NeoVpcConfig {

		/** Required */
		SecurityGroupIds: Array<string>;

		/** Required */
		Subnets: Array<string>;
	}

	/** The <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html">VpcConfig</a> configuration object that specifies the VPC that you want the compilation jobs to connect to. For more information on controlling access to your Amazon S3 buckets used for compilation job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html">Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC</a>. */
	export interface NeoVpcConfigFormProperties {
	}
	export function CreateNeoVpcConfigFormGroup() {
		return new FormGroup<NeoVpcConfigFormProperties>({
		});

	}

	export interface CreateContextResponse {
		ContextArn?: string;
	}
	export interface CreateContextResponseFormProperties {
		ContextArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateContextResponseFormGroup() {
		return new FormGroup<CreateContextResponseFormProperties>({
			ContextArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateContextRequest {

		/** Required */
		ContextName: string;

		/** Required */
		Source: ContextSource;

		/** Required */
		ContextType: string;
		Description?: string;
		Properties?: LineageEntityParameters;
		Tags?: Array<Tag>;
	}
	export interface CreateContextRequestFormProperties {

		/** Required */
		ContextName: FormControl<string | null | undefined>,

		/** Required */
		ContextType: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateCreateContextRequestFormGroup() {
		return new FormGroup<CreateContextRequestFormProperties>({
			ContextName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ContextType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure describing the source of a context. */
	export interface ContextSource {

		/** Required */
		SourceUri: string;
		SourceType?: string;
		SourceId?: string;
	}

	/** A structure describing the source of a context. */
	export interface ContextSourceFormProperties {

		/** Required */
		SourceUri: FormControl<string | null | undefined>,
		SourceType: FormControl<string | null | undefined>,
		SourceId: FormControl<string | null | undefined>,
	}
	export function CreateContextSourceFormGroup() {
		return new FormGroup<ContextSourceFormProperties>({
			SourceUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceType: new FormControl<string | null | undefined>(undefined),
			SourceId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDataQualityJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;
	}
	export interface CreateDataQualityJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateDataQualityJobDefinitionResponseFormGroup() {
		return new FormGroup<CreateDataQualityJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateDataQualityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
		DataQualityBaselineConfig?: DataQualityBaselineConfig;

		/** Required */
		DataQualityAppSpecification: DataQualityAppSpecification;

		/** Required */
		DataQualityJobInput: DataQualityJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		DataQualityJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
		Tags?: Array<Tag>;
	}
	export interface CreateDataQualityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateDataQualityJobDefinitionRequestFormGroup() {
		return new FormGroup<CreateDataQualityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically. */
	export interface DataQualityBaselineConfig {
		BaseliningJobName?: string;

		/** The constraints resource for a monitoring job. */
		ConstraintsResource?: MonitoringConstraintsResource;

		/** The statistics resource for a monitoring job. */
		StatisticsResource?: MonitoringStatisticsResource;
	}

	/** Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically. */
	export interface DataQualityBaselineConfigFormProperties {
		BaseliningJobName: FormControl<string | null | undefined>,
	}
	export function CreateDataQualityBaselineConfigFormGroup() {
		return new FormGroup<DataQualityBaselineConfigFormProperties>({
			BaseliningJobName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The constraints resource for a monitoring job. */
	export interface MonitoringConstraintsResource {
		S3Uri?: string;
	}

	/** The constraints resource for a monitoring job. */
	export interface MonitoringConstraintsResourceFormProperties {
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringConstraintsResourceFormGroup() {
		return new FormGroup<MonitoringConstraintsResourceFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The statistics resource for a monitoring job. */
	export interface MonitoringStatisticsResource {
		S3Uri?: string;
	}

	/** The statistics resource for a monitoring job. */
	export interface MonitoringStatisticsResourceFormProperties {
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringStatisticsResourceFormGroup() {
		return new FormGroup<MonitoringStatisticsResourceFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about the container that a data quality monitoring job runs. */
	export interface DataQualityAppSpecification {

		/** Required */
		ImageUri: string;
		ContainerEntrypoint?: Array<string>;
		ContainerArguments?: Array<string>;
		RecordPreprocessorSourceUri?: string;
		PostAnalyticsProcessorSourceUri?: string;
		Environment?: MonitoringEnvironmentMap;
	}

	/** Information about the container that a data quality monitoring job runs. */
	export interface DataQualityAppSpecificationFormProperties {

		/** Required */
		ImageUri: FormControl<string | null | undefined>,
		RecordPreprocessorSourceUri: FormControl<string | null | undefined>,
		PostAnalyticsProcessorSourceUri: FormControl<string | null | undefined>,
	}
	export function CreateDataQualityAppSpecificationFormGroup() {
		return new FormGroup<DataQualityAppSpecificationFormProperties>({
			ImageUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RecordPreprocessorSourceUri: new FormControl<string | null | undefined>(undefined),
			PostAnalyticsProcessorSourceUri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface MonitoringEnvironmentMap {
	}
	export interface MonitoringEnvironmentMapFormProperties {
	}
	export function CreateMonitoringEnvironmentMapFormGroup() {
		return new FormGroup<MonitoringEnvironmentMapFormProperties>({
		});

	}


	/** The input for the data quality monitoring job. Currently endpoints are supported for input. */
	export interface DataQualityJobInput {

		/** Input object for the endpoint */
		EndpointInput?: EndpointInput;
		BatchTransformInput?: BatchTransformInput;
	}

	/** The input for the data quality monitoring job. Currently endpoints are supported for input. */
	export interface DataQualityJobInputFormProperties {
	}
	export function CreateDataQualityJobInputFormGroup() {
		return new FormGroup<DataQualityJobInputFormProperties>({
		});

	}


	/** Input object for the endpoint */
	export interface EndpointInput {

		/** Required */
		EndpointName: string;

		/** Required */
		LocalPath: string;
		S3InputMode?: ProcessingS3InputMode;
		S3DataDistributionType?: S3DataDistribution;
		FeaturesAttribute?: string;
		InferenceAttribute?: string;
		ProbabilityAttribute?: string;
		ProbabilityThresholdAttribute?: number | null;
		StartTimeOffset?: string;
		EndTimeOffset?: string;
	}

	/** Input object for the endpoint */
	export interface EndpointInputFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		LocalPath: FormControl<string | null | undefined>,
		S3InputMode: FormControl<ProcessingS3InputMode | null | undefined>,
		S3DataDistributionType: FormControl<S3DataDistribution | null | undefined>,
		FeaturesAttribute: FormControl<string | null | undefined>,
		InferenceAttribute: FormControl<string | null | undefined>,
		ProbabilityAttribute: FormControl<string | null | undefined>,
		ProbabilityThresholdAttribute: FormControl<number | null | undefined>,
		StartTimeOffset: FormControl<string | null | undefined>,
		EndTimeOffset: FormControl<string | null | undefined>,
	}
	export function CreateEndpointInputFormGroup() {
		return new FormGroup<EndpointInputFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			S3InputMode: new FormControl<ProcessingS3InputMode | null | undefined>(undefined),
			S3DataDistributionType: new FormControl<S3DataDistribution | null | undefined>(undefined),
			FeaturesAttribute: new FormControl<string | null | undefined>(undefined),
			InferenceAttribute: new FormControl<string | null | undefined>(undefined),
			ProbabilityAttribute: new FormControl<string | null | undefined>(undefined),
			ProbabilityThresholdAttribute: new FormControl<number | null | undefined>(undefined),
			StartTimeOffset: new FormControl<string | null | undefined>(undefined),
			EndTimeOffset: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ProcessingS3InputMode { Pipe = 'Pipe', File = 'File' }


	/** Input object for the batch transform job. */
	export interface BatchTransformInput {

		/** Required */
		DataCapturedDestinationS3Uri: string;

		/** Required */
		DatasetFormat: MonitoringDatasetFormat;

		/** Required */
		LocalPath: string;
		S3InputMode?: ProcessingS3InputMode;
		S3DataDistributionType?: S3DataDistribution;
		FeaturesAttribute?: string;
		InferenceAttribute?: string;
		ProbabilityAttribute?: string;
		ProbabilityThresholdAttribute?: number | null;
		StartTimeOffset?: string;
		EndTimeOffset?: string;
	}

	/** Input object for the batch transform job. */
	export interface BatchTransformInputFormProperties {

		/** Required */
		DataCapturedDestinationS3Uri: FormControl<string | null | undefined>,

		/** Required */
		LocalPath: FormControl<string | null | undefined>,
		S3InputMode: FormControl<ProcessingS3InputMode | null | undefined>,
		S3DataDistributionType: FormControl<S3DataDistribution | null | undefined>,
		FeaturesAttribute: FormControl<string | null | undefined>,
		InferenceAttribute: FormControl<string | null | undefined>,
		ProbabilityAttribute: FormControl<string | null | undefined>,
		ProbabilityThresholdAttribute: FormControl<number | null | undefined>,
		StartTimeOffset: FormControl<string | null | undefined>,
		EndTimeOffset: FormControl<string | null | undefined>,
	}
	export function CreateBatchTransformInputFormGroup() {
		return new FormGroup<BatchTransformInputFormProperties>({
			DataCapturedDestinationS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			S3InputMode: new FormControl<ProcessingS3InputMode | null | undefined>(undefined),
			S3DataDistributionType: new FormControl<S3DataDistribution | null | undefined>(undefined),
			FeaturesAttribute: new FormControl<string | null | undefined>(undefined),
			InferenceAttribute: new FormControl<string | null | undefined>(undefined),
			ProbabilityAttribute: new FormControl<string | null | undefined>(undefined),
			ProbabilityThresholdAttribute: new FormControl<number | null | undefined>(undefined),
			StartTimeOffset: new FormControl<string | null | undefined>(undefined),
			EndTimeOffset: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents the dataset format used when running a monitoring job. */
	export interface MonitoringDatasetFormat {
		Csv?: MonitoringCsvDatasetFormat;
		Json?: MonitoringJsonDatasetFormat;
		Parquet?: MonitoringParquetDatasetFormat;
	}

	/** Represents the dataset format used when running a monitoring job. */
	export interface MonitoringDatasetFormatFormProperties {
	}
	export function CreateMonitoringDatasetFormatFormGroup() {
		return new FormGroup<MonitoringDatasetFormatFormProperties>({
		});

	}


	/** Represents the CSV dataset format used when running a monitoring job. */
	export interface MonitoringCsvDatasetFormat {
		Header?: boolean | null;
	}

	/** Represents the CSV dataset format used when running a monitoring job. */
	export interface MonitoringCsvDatasetFormatFormProperties {
		Header: FormControl<boolean | null | undefined>,
	}
	export function CreateMonitoringCsvDatasetFormatFormGroup() {
		return new FormGroup<MonitoringCsvDatasetFormatFormProperties>({
			Header: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents the JSON dataset format used when running a monitoring job. */
	export interface MonitoringJsonDatasetFormat {
		Line?: boolean | null;
	}

	/** Represents the JSON dataset format used when running a monitoring job. */
	export interface MonitoringJsonDatasetFormatFormProperties {
		Line: FormControl<boolean | null | undefined>,
	}
	export function CreateMonitoringJsonDatasetFormatFormGroup() {
		return new FormGroup<MonitoringJsonDatasetFormatFormProperties>({
			Line: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Represents the Parquet dataset format used when running a monitoring job. */
	export interface MonitoringParquetDatasetFormat {
	}

	/** Represents the Parquet dataset format used when running a monitoring job. */
	export interface MonitoringParquetDatasetFormatFormProperties {
	}
	export function CreateMonitoringParquetDatasetFormatFormGroup() {
		return new FormGroup<MonitoringParquetDatasetFormatFormProperties>({
		});

	}


	/** The output configuration for monitoring jobs. */
	export interface MonitoringOutputConfig {

		/** Required */
		MonitoringOutputs: Array<MonitoringOutput>;
		KmsKeyId?: string;
	}

	/** The output configuration for monitoring jobs. */
	export interface MonitoringOutputConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringOutputConfigFormGroup() {
		return new FormGroup<MonitoringOutputConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The output object for a monitoring job. */
	export interface MonitoringOutput {

		/** Required */
		S3Output: MonitoringS3Output;
	}

	/** The output object for a monitoring job. */
	export interface MonitoringOutputFormProperties {
	}
	export function CreateMonitoringOutputFormGroup() {
		return new FormGroup<MonitoringOutputFormProperties>({
		});

	}


	/** Information about where and how you want to store the results of a monitoring job. */
	export interface MonitoringS3Output {

		/** Required */
		S3Uri: string;

		/** Required */
		LocalPath: string;
		S3UploadMode?: ProcessingS3UploadMode;
	}

	/** Information about where and how you want to store the results of a monitoring job. */
	export interface MonitoringS3OutputFormProperties {

		/** Required */
		S3Uri: FormControl<string | null | undefined>,

		/** Required */
		LocalPath: FormControl<string | null | undefined>,
		S3UploadMode: FormControl<ProcessingS3UploadMode | null | undefined>,
	}
	export function CreateMonitoringS3OutputFormGroup() {
		return new FormGroup<MonitoringS3OutputFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			S3UploadMode: new FormControl<ProcessingS3UploadMode | null | undefined>(undefined),
		});

	}

	export enum ProcessingS3UploadMode { Continuous = 'Continuous', EndOfJob = 'EndOfJob' }


	/** Identifies the resources to deploy for a monitoring job. */
	export interface MonitoringResources {

		/** Required */
		ClusterConfig: MonitoringClusterConfig;
	}

	/** Identifies the resources to deploy for a monitoring job. */
	export interface MonitoringResourcesFormProperties {
	}
	export function CreateMonitoringResourcesFormGroup() {
		return new FormGroup<MonitoringResourcesFormProperties>({
		});

	}


	/** Configuration for the cluster used to run model monitoring jobs. */
	export interface MonitoringClusterConfig {

		/** Required */
		InstanceCount: number;

		/** Required */
		InstanceType: ProcessingInstanceType;

		/** Required */
		VolumeSizeInGB: number;
		VolumeKmsKeyId?: string;
	}

	/** Configuration for the cluster used to run model monitoring jobs. */
	export interface MonitoringClusterConfigFormProperties {

		/** Required */
		InstanceCount: FormControl<number | null | undefined>,

		/** Required */
		InstanceType: FormControl<ProcessingInstanceType | null | undefined>,

		/** Required */
		VolumeSizeInGB: FormControl<number | null | undefined>,
		VolumeKmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringClusterConfigFormGroup() {
		return new FormGroup<MonitoringClusterConfigFormProperties>({
			InstanceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<ProcessingInstanceType | null | undefined>(undefined, [Validators.required]),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ProcessingInstanceType { 'ml.t3.medium' = 'ml.t3.medium', 'ml.t3.large' = 'ml.t3.large', 'ml.t3.xlarge' = 'ml.t3.xlarge', 'ml.t3.2xlarge' = 'ml.t3.2xlarge', 'ml.m4.xlarge' = 'ml.m4.xlarge', 'ml.m4.2xlarge' = 'ml.m4.2xlarge', 'ml.m4.4xlarge' = 'ml.m4.4xlarge', 'ml.m4.10xlarge' = 'ml.m4.10xlarge', 'ml.m4.16xlarge' = 'ml.m4.16xlarge', 'ml.c4.xlarge' = 'ml.c4.xlarge', 'ml.c4.2xlarge' = 'ml.c4.2xlarge', 'ml.c4.4xlarge' = 'ml.c4.4xlarge', 'ml.c4.8xlarge' = 'ml.c4.8xlarge', 'ml.p2.xlarge' = 'ml.p2.xlarge', 'ml.p2.8xlarge' = 'ml.p2.8xlarge', 'ml.p2.16xlarge' = 'ml.p2.16xlarge', 'ml.p3.2xlarge' = 'ml.p3.2xlarge', 'ml.p3.8xlarge' = 'ml.p3.8xlarge', 'ml.p3.16xlarge' = 'ml.p3.16xlarge', 'ml.c5.xlarge' = 'ml.c5.xlarge', 'ml.c5.2xlarge' = 'ml.c5.2xlarge', 'ml.c5.4xlarge' = 'ml.c5.4xlarge', 'ml.c5.9xlarge' = 'ml.c5.9xlarge', 'ml.c5.18xlarge' = 'ml.c5.18xlarge', 'ml.m5.large' = 'ml.m5.large', 'ml.m5.xlarge' = 'ml.m5.xlarge', 'ml.m5.2xlarge' = 'ml.m5.2xlarge', 'ml.m5.4xlarge' = 'ml.m5.4xlarge', 'ml.m5.12xlarge' = 'ml.m5.12xlarge', 'ml.m5.24xlarge' = 'ml.m5.24xlarge', 'ml.r5.large' = 'ml.r5.large', 'ml.r5.xlarge' = 'ml.r5.xlarge', 'ml.r5.2xlarge' = 'ml.r5.2xlarge', 'ml.r5.4xlarge' = 'ml.r5.4xlarge', 'ml.r5.8xlarge' = 'ml.r5.8xlarge', 'ml.r5.12xlarge' = 'ml.r5.12xlarge', 'ml.r5.16xlarge' = 'ml.r5.16xlarge', 'ml.r5.24xlarge' = 'ml.r5.24xlarge', 'ml.g4dn.xlarge' = 'ml.g4dn.xlarge', 'ml.g4dn.2xlarge' = 'ml.g4dn.2xlarge', 'ml.g4dn.4xlarge' = 'ml.g4dn.4xlarge', 'ml.g4dn.8xlarge' = 'ml.g4dn.8xlarge', 'ml.g4dn.12xlarge' = 'ml.g4dn.12xlarge', 'ml.g4dn.16xlarge' = 'ml.g4dn.16xlarge' }


	/** The networking configuration for the monitoring job. */
	export interface MonitoringNetworkConfig {
		EnableInterContainerTrafficEncryption?: boolean | null;
		EnableNetworkIsolation?: boolean | null;

		/** Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. */
		VpcConfig?: VpcConfig;
	}

	/** The networking configuration for the monitoring job. */
	export interface MonitoringNetworkConfigFormProperties {
		EnableInterContainerTrafficEncryption: FormControl<boolean | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
	}
	export function CreateMonitoringNetworkConfigFormGroup() {
		return new FormGroup<MonitoringNetworkConfigFormProperties>({
			EnableInterContainerTrafficEncryption: new FormControl<boolean | null | undefined>(undefined),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A time limit for how long the monitoring job is allowed to run before stopping. */
	export interface MonitoringStoppingCondition {

		/** Required */
		MaxRuntimeInSeconds: number;
	}

	/** A time limit for how long the monitoring job is allowed to run before stopping. */
	export interface MonitoringStoppingConditionFormProperties {

		/** Required */
		MaxRuntimeInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateMonitoringStoppingConditionFormGroup() {
		return new FormGroup<MonitoringStoppingConditionFormProperties>({
			MaxRuntimeInSeconds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateDeviceFleetRequest {

		/** Required */
		DeviceFleetName: string;
		RoleArn?: string;
		Description?: string;

		/** Required */
		OutputConfig: EdgeOutputConfig;
		Tags?: Array<Tag>;
		EnableIotRoleAlias?: boolean | null;
	}
	export interface CreateDeviceFleetRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		EnableIotRoleAlias: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateDeviceFleetRequestFormGroup() {
		return new FormGroup<CreateDeviceFleetRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			EnableIotRoleAlias: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The output configuration. */
	export interface EdgeOutputConfig {

		/** Required */
		S3OutputLocation: string;
		KmsKeyId?: string;
		PresetDeploymentType?: EdgePresetDeploymentType;
		PresetDeploymentConfig?: string;
	}

	/** The output configuration. */
	export interface EdgeOutputConfigFormProperties {

		/** Required */
		S3OutputLocation: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		PresetDeploymentType: FormControl<EdgePresetDeploymentType | null | undefined>,
		PresetDeploymentConfig: FormControl<string | null | undefined>,
	}
	export function CreateEdgeOutputConfigFormGroup() {
		return new FormGroup<EdgeOutputConfigFormProperties>({
			S3OutputLocation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			PresetDeploymentType: new FormControl<EdgePresetDeploymentType | null | undefined>(undefined),
			PresetDeploymentConfig: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum EdgePresetDeploymentType { GreengrassV2Component = 'GreengrassV2Component' }

	export interface CreateDomainResponse {
		DomainArn?: string;
		Url?: string;
	}
	export interface CreateDomainResponseFormProperties {
		DomainArn: FormControl<string | null | undefined>,
		Url: FormControl<string | null | undefined>,
	}
	export function CreateCreateDomainResponseFormGroup() {
		return new FormGroup<CreateDomainResponseFormProperties>({
			DomainArn: new FormControl<string | null | undefined>(undefined),
			Url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDomainRequest {

		/** Required */
		DomainName: string;

		/** Required */
		AuthMode: AuthMode;

		/** Required */
		DefaultUserSettings: UserSettings;

		/** Required */
		SubnetIds: Array<string>;

		/** Required */
		VpcId: string;
		Tags?: Array<Tag>;
		AppNetworkAccessType?: AppNetworkAccessType;
		HomeEfsFileSystemKmsKeyId?: string;
		KmsKeyId?: string;
		AppSecurityGroupManagement?: AppSecurityGroupManagement;
		DomainSettings?: DomainSettings;
		DefaultSpaceSettings?: DefaultSpaceSettings;
	}
	export interface CreateDomainRequestFormProperties {

		/** Required */
		DomainName: FormControl<string | null | undefined>,

		/** Required */
		AuthMode: FormControl<AuthMode | null | undefined>,

		/** Required */
		VpcId: FormControl<string | null | undefined>,
		AppNetworkAccessType: FormControl<AppNetworkAccessType | null | undefined>,
		HomeEfsFileSystemKmsKeyId: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		AppSecurityGroupManagement: FormControl<AppSecurityGroupManagement | null | undefined>,
	}
	export function CreateCreateDomainRequestFormGroup() {
		return new FormGroup<CreateDomainRequestFormProperties>({
			DomainName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AuthMode: new FormControl<AuthMode | null | undefined>(undefined, [Validators.required]),
			VpcId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AppNetworkAccessType: new FormControl<AppNetworkAccessType | null | undefined>(undefined),
			HomeEfsFileSystemKmsKeyId: new FormControl<string | null | undefined>(undefined),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			AppSecurityGroupManagement: new FormControl<AppSecurityGroupManagement | null | undefined>(undefined),
		});

	}

	export enum AuthMode { SSO = 'SSO', IAM = 'IAM' }


	/** <p>A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the <code>CreateUserProfile</code> API is called, and as <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is called.</p> <p> <code>SecurityGroups</code> is aggregated when specified in both calls. For all other settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code> take precedence over those specified in <code>CreateDomain</code>.</p> */
	export interface UserSettings {
		ExecutionRole?: string;
		SecurityGroups?: Array<string>;
		SharingSettings?: SharingSettings;
		JupyterServerAppSettings?: JupyterServerAppSettings;
		KernelGatewayAppSettings?: KernelGatewayAppSettings;
		TensorBoardAppSettings?: TensorBoardAppSettings;
		RStudioServerProAppSettings?: RStudioServerProAppSettings;
		RSessionAppSettings?: RSessionAppSettings;
		CanvasAppSettings?: CanvasAppSettings;
	}

	/** <p>A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the <code>CreateUserProfile</code> API is called, and as <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is called.</p> <p> <code>SecurityGroups</code> is aggregated when specified in both calls. For all other settings in <code>UserSettings</code>, the values specified in <code>CreateUserProfile</code> take precedence over those specified in <code>CreateDomain</code>.</p> */
	export interface UserSettingsFormProperties {
		ExecutionRole: FormControl<string | null | undefined>,
	}
	export function CreateUserSettingsFormGroup() {
		return new FormGroup<UserSettingsFormProperties>({
			ExecutionRole: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies options for sharing SageMaker Studio notebooks. These settings are specified as part of <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is called, and as part of <code>UserSettings</code> when the <code>CreateUserProfile</code> API is called. When <code>SharingSettings</code> is not specified, notebook sharing isn't allowed. */
	export interface SharingSettings {
		NotebookOutputOption?: NotebookOutputOption;
		S3OutputPath?: string;
		S3KmsKeyId?: string;
	}

	/** Specifies options for sharing SageMaker Studio notebooks. These settings are specified as part of <code>DefaultUserSettings</code> when the <code>CreateDomain</code> API is called, and as part of <code>UserSettings</code> when the <code>CreateUserProfile</code> API is called. When <code>SharingSettings</code> is not specified, notebook sharing isn't allowed. */
	export interface SharingSettingsFormProperties {
		NotebookOutputOption: FormControl<NotebookOutputOption | null | undefined>,
		S3OutputPath: FormControl<string | null | undefined>,
		S3KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateSharingSettingsFormGroup() {
		return new FormGroup<SharingSettingsFormProperties>({
			NotebookOutputOption: new FormControl<NotebookOutputOption | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined),
			S3KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NotebookOutputOption { Allowed = 'Allowed', Disabled = 'Disabled' }


	/** The JupyterServer app settings. */
	export interface JupyterServerAppSettings {
		DefaultResourceSpec?: ResourceSpec;
		LifecycleConfigArns?: Array<string>;
		CodeRepositories?: Array<CodeRepository>;
	}

	/** The JupyterServer app settings. */
	export interface JupyterServerAppSettingsFormProperties {
	}
	export function CreateJupyterServerAppSettingsFormGroup() {
		return new FormGroup<JupyterServerAppSettingsFormProperties>({
		});

	}


	/** A Git repository that SageMaker automatically displays to users for cloning in the JupyterServer application. */
	export interface CodeRepository {

		/** Required */
		RepositoryUrl: string;
	}

	/** A Git repository that SageMaker automatically displays to users for cloning in the JupyterServer application. */
	export interface CodeRepositoryFormProperties {

		/** Required */
		RepositoryUrl: FormControl<string | null | undefined>,
	}
	export function CreateCodeRepositoryFormGroup() {
		return new FormGroup<CodeRepositoryFormProperties>({
			RepositoryUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The KernelGateway app settings. */
	export interface KernelGatewayAppSettings {
		DefaultResourceSpec?: ResourceSpec;
		CustomImages?: Array<CustomImage>;
		LifecycleConfigArns?: Array<string>;
	}

	/** The KernelGateway app settings. */
	export interface KernelGatewayAppSettingsFormProperties {
	}
	export function CreateKernelGatewayAppSettingsFormGroup() {
		return new FormGroup<KernelGatewayAppSettingsFormProperties>({
		});

	}


	/** A custom SageMaker image. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>. */
	export interface CustomImage {

		/** Required */
		ImageName: string;
		ImageVersionNumber?: number | null;

		/** Required */
		AppImageConfigName: string;
	}

	/** A custom SageMaker image. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>. */
	export interface CustomImageFormProperties {

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		ImageVersionNumber: FormControl<number | null | undefined>,

		/** Required */
		AppImageConfigName: FormControl<string | null | undefined>,
	}
	export function CreateCustomImageFormGroup() {
		return new FormGroup<CustomImageFormProperties>({
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImageVersionNumber: new FormControl<number | null | undefined>(undefined),
			AppImageConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The TensorBoard app settings. */
	export interface TensorBoardAppSettings {
		DefaultResourceSpec?: ResourceSpec;
	}

	/** The TensorBoard app settings. */
	export interface TensorBoardAppSettingsFormProperties {
	}
	export function CreateTensorBoardAppSettingsFormGroup() {
		return new FormGroup<TensorBoardAppSettingsFormProperties>({
		});

	}


	/** A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app. */
	export interface RStudioServerProAppSettings {
		AccessStatus?: RStudioServerProAccessStatus;
		UserGroup?: RStudioServerProUserGroup;
	}

	/** A collection of settings that configure user interaction with the <code>RStudioServerPro</code> app. */
	export interface RStudioServerProAppSettingsFormProperties {
		AccessStatus: FormControl<RStudioServerProAccessStatus | null | undefined>,
		UserGroup: FormControl<RStudioServerProUserGroup | null | undefined>,
	}
	export function CreateRStudioServerProAppSettingsFormGroup() {
		return new FormGroup<RStudioServerProAppSettingsFormProperties>({
			AccessStatus: new FormControl<RStudioServerProAccessStatus | null | undefined>(undefined),
			UserGroup: new FormControl<RStudioServerProUserGroup | null | undefined>(undefined),
		});

	}

	export enum RStudioServerProAccessStatus { ENABLED = 'ENABLED', DISABLED = 'DISABLED' }

	export enum RStudioServerProUserGroup { R_STUDIO_ADMIN = 'R_STUDIO_ADMIN', R_STUDIO_USER = 'R_STUDIO_USER' }


	/** A collection of settings that apply to an <code>RSessionGateway</code> app. */
	export interface RSessionAppSettings {

		/** Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on. */
		DefaultResourceSpec?: ResourceSpec;
		CustomImages?: Array<CustomImage>;
	}

	/** A collection of settings that apply to an <code>RSessionGateway</code> app. */
	export interface RSessionAppSettingsFormProperties {
	}
	export function CreateRSessionAppSettingsFormGroup() {
		return new FormGroup<RSessionAppSettingsFormProperties>({
		});

	}


	/** The SageMaker Canvas application settings. */
	export interface CanvasAppSettings {
		TimeSeriesForecastingSettings?: TimeSeriesForecastingSettings;
		ModelRegisterSettings?: ModelRegisterSettings;
		WorkspaceSettings?: WorkspaceSettings;
	}

	/** The SageMaker Canvas application settings. */
	export interface CanvasAppSettingsFormProperties {
	}
	export function CreateCanvasAppSettingsFormGroup() {
		return new FormGroup<CanvasAppSettingsFormProperties>({
		});

	}


	/** Time series forecast settings for the SageMaker Canvas application. */
	export interface TimeSeriesForecastingSettings {
		Status?: RStudioServerProAccessStatus;
		AmazonForecastRoleArn?: string;
	}

	/** Time series forecast settings for the SageMaker Canvas application. */
	export interface TimeSeriesForecastingSettingsFormProperties {
		Status: FormControl<RStudioServerProAccessStatus | null | undefined>,
		AmazonForecastRoleArn: FormControl<string | null | undefined>,
	}
	export function CreateTimeSeriesForecastingSettingsFormGroup() {
		return new FormGroup<TimeSeriesForecastingSettingsFormProperties>({
			Status: new FormControl<RStudioServerProAccessStatus | null | undefined>(undefined),
			AmazonForecastRoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The model registry settings for the SageMaker Canvas application. */
	export interface ModelRegisterSettings {
		Status?: RStudioServerProAccessStatus;
		CrossAccountModelRegisterRoleArn?: string;
	}

	/** The model registry settings for the SageMaker Canvas application. */
	export interface ModelRegisterSettingsFormProperties {
		Status: FormControl<RStudioServerProAccessStatus | null | undefined>,
		CrossAccountModelRegisterRoleArn: FormControl<string | null | undefined>,
	}
	export function CreateModelRegisterSettingsFormGroup() {
		return new FormGroup<ModelRegisterSettingsFormProperties>({
			Status: new FormControl<RStudioServerProAccessStatus | null | undefined>(undefined),
			CrossAccountModelRegisterRoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The workspace settings for the SageMaker Canvas application. */
	export interface WorkspaceSettings {
		S3ArtifactPath?: string;
		S3KmsKeyId?: string;
	}

	/** The workspace settings for the SageMaker Canvas application. */
	export interface WorkspaceSettingsFormProperties {
		S3ArtifactPath: FormControl<string | null | undefined>,
		S3KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateWorkspaceSettingsFormGroup() {
		return new FormGroup<WorkspaceSettingsFormProperties>({
			S3ArtifactPath: new FormControl<string | null | undefined>(undefined),
			S3KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AppNetworkAccessType { PublicInternetOnly = 'PublicInternetOnly', VpcOnly = 'VpcOnly' }

	export enum AppSecurityGroupManagement { Service = 'Service', Customer = 'Customer' }


	/** A collection of settings that apply to the <code>SageMaker Domain</code>. These settings are specified through the <code>CreateDomain</code> API call. */
	export interface DomainSettings {
		SecurityGroupIds?: Array<string>;
		RStudioServerProDomainSettings?: RStudioServerProDomainSettings;
		ExecutionRoleIdentityConfig?: ExecutionRoleIdentityConfig;
	}

	/** A collection of settings that apply to the <code>SageMaker Domain</code>. These settings are specified through the <code>CreateDomain</code> API call. */
	export interface DomainSettingsFormProperties {
		ExecutionRoleIdentityConfig: FormControl<ExecutionRoleIdentityConfig | null | undefined>,
	}
	export function CreateDomainSettingsFormGroup() {
		return new FormGroup<DomainSettingsFormProperties>({
			ExecutionRoleIdentityConfig: new FormControl<ExecutionRoleIdentityConfig | null | undefined>(undefined),
		});

	}


	/** A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app. */
	export interface RStudioServerProDomainSettings {

		/** Required */
		DomainExecutionRoleArn: string;
		RStudioConnectUrl?: string;
		RStudioPackageManagerUrl?: string;

		/** Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on. */
		DefaultResourceSpec?: ResourceSpec;
	}

	/** A collection of settings that configure the <code>RStudioServerPro</code> Domain-level app. */
	export interface RStudioServerProDomainSettingsFormProperties {

		/** Required */
		DomainExecutionRoleArn: FormControl<string | null | undefined>,
		RStudioConnectUrl: FormControl<string | null | undefined>,
		RStudioPackageManagerUrl: FormControl<string | null | undefined>,
	}
	export function CreateRStudioServerProDomainSettingsFormGroup() {
		return new FormGroup<RStudioServerProDomainSettingsFormProperties>({
			DomainExecutionRoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RStudioConnectUrl: new FormControl<string | null | undefined>(undefined),
			RStudioPackageManagerUrl: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ExecutionRoleIdentityConfig { USER_PROFILE_NAME = 'USER_PROFILE_NAME', DISABLED = 'DISABLED' }


	/** A collection of settings that apply to spaces created in the Domain. */
	export interface DefaultSpaceSettings {
		ExecutionRole?: string;
		SecurityGroups?: Array<string>;

		/** The JupyterServer app settings. */
		JupyterServerAppSettings?: JupyterServerAppSettings;

		/** The KernelGateway app settings. */
		KernelGatewayAppSettings?: KernelGatewayAppSettings;
	}

	/** A collection of settings that apply to spaces created in the Domain. */
	export interface DefaultSpaceSettingsFormProperties {
		ExecutionRole: FormControl<string | null | undefined>,
	}
	export function CreateDefaultSpaceSettingsFormGroup() {
		return new FormGroup<DefaultSpaceSettingsFormProperties>({
			ExecutionRole: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateEdgeDeploymentPlanResponse {

		/** Required */
		EdgeDeploymentPlanArn: string;
	}
	export interface CreateEdgeDeploymentPlanResponseFormProperties {

		/** Required */
		EdgeDeploymentPlanArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateEdgeDeploymentPlanResponseFormGroup() {
		return new FormGroup<CreateEdgeDeploymentPlanResponseFormProperties>({
			EdgeDeploymentPlanArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateEdgeDeploymentPlanRequest {

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		ModelConfigs: Array<EdgeDeploymentModelConfig>;

		/** Required */
		DeviceFleetName: string;
		Stages?: Array<DeploymentStage>;
		Tags?: Array<Tag>;
	}
	export interface CreateEdgeDeploymentPlanRequestFormProperties {

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateCreateEdgeDeploymentPlanRequestFormGroup() {
		return new FormGroup<CreateEdgeDeploymentPlanRequestFormProperties>({
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Contains information about the configuration of a model in a deployment. */
	export interface EdgeDeploymentModelConfig {

		/** Required */
		ModelHandle: string;

		/** Required */
		EdgePackagingJobName: string;
	}

	/** Contains information about the configuration of a model in a deployment. */
	export interface EdgeDeploymentModelConfigFormProperties {

		/** Required */
		ModelHandle: FormControl<string | null | undefined>,

		/** Required */
		EdgePackagingJobName: FormControl<string | null | undefined>,
	}
	export function CreateEdgeDeploymentModelConfigFormGroup() {
		return new FormGroup<EdgeDeploymentModelConfigFormProperties>({
			ModelHandle: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgePackagingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Contains information about a stage in an edge deployment plan. */
	export interface DeploymentStage {

		/** Required */
		StageName: string;

		/** Required */
		DeviceSelectionConfig: DeviceSelectionConfig;
		DeploymentConfig?: EdgeDeploymentConfig;
	}

	/** Contains information about a stage in an edge deployment plan. */
	export interface DeploymentStageFormProperties {

		/** Required */
		StageName: FormControl<string | null | undefined>,
	}
	export function CreateDeploymentStageFormGroup() {
		return new FormGroup<DeploymentStageFormProperties>({
			StageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Contains information about the configurations of selected devices. */
	export interface DeviceSelectionConfig {

		/** Required */
		DeviceSubsetType: DeviceSubsetType;
		Percentage?: number | null;
		DeviceNames?: Array<string>;
		DeviceNameContains?: string;
	}

	/** Contains information about the configurations of selected devices. */
	export interface DeviceSelectionConfigFormProperties {

		/** Required */
		DeviceSubsetType: FormControl<DeviceSubsetType | null | undefined>,
		Percentage: FormControl<number | null | undefined>,
		DeviceNameContains: FormControl<string | null | undefined>,
	}
	export function CreateDeviceSelectionConfigFormGroup() {
		return new FormGroup<DeviceSelectionConfigFormProperties>({
			DeviceSubsetType: new FormControl<DeviceSubsetType | null | undefined>(undefined, [Validators.required]),
			Percentage: new FormControl<number | null | undefined>(undefined),
			DeviceNameContains: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DeviceSubsetType { PERCENTAGE = 'PERCENTAGE', SELECTION = 'SELECTION', NAMECONTAINS = 'NAMECONTAINS' }


	/** Contains information about the configuration of a deployment. */
	export interface EdgeDeploymentConfig {

		/** Required */
		FailureHandlingPolicy: FailureHandlingPolicy;
	}

	/** Contains information about the configuration of a deployment. */
	export interface EdgeDeploymentConfigFormProperties {

		/** Required */
		FailureHandlingPolicy: FormControl<FailureHandlingPolicy | null | undefined>,
	}
	export function CreateEdgeDeploymentConfigFormGroup() {
		return new FormGroup<EdgeDeploymentConfigFormProperties>({
			FailureHandlingPolicy: new FormControl<FailureHandlingPolicy | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum FailureHandlingPolicy { ROLLBACK_ON_FAILURE = 'ROLLBACK_ON_FAILURE', DO_NOTHING = 'DO_NOTHING' }

	export interface CreateEdgeDeploymentStageRequest {

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		Stages: Array<DeploymentStage>;
	}
	export interface CreateEdgeDeploymentStageRequestFormProperties {

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,
	}
	export function CreateCreateEdgeDeploymentStageRequestFormGroup() {
		return new FormGroup<CreateEdgeDeploymentStageRequestFormProperties>({
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateEdgePackagingJobRequest {

		/** Required */
		EdgePackagingJobName: string;

		/** Required */
		CompilationJobName: string;

		/** Required */
		ModelName: string;

		/** Required */
		ModelVersion: string;

		/** Required */
		RoleArn: string;

		/** Required */
		OutputConfig: EdgeOutputConfig;
		ResourceKey?: string;
		Tags?: Array<Tag>;
	}
	export interface CreateEdgePackagingJobRequestFormProperties {

		/** Required */
		EdgePackagingJobName: FormControl<string | null | undefined>,

		/** Required */
		CompilationJobName: FormControl<string | null | undefined>,

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		ModelVersion: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		ResourceKey: FormControl<string | null | undefined>,
	}
	export function CreateCreateEdgePackagingJobRequestFormGroup() {
		return new FormGroup<CreateEdgePackagingJobRequestFormProperties>({
			EdgePackagingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CompilationJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ResourceKey: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateEndpointOutput {

		/** Required */
		EndpointArn: string;
	}
	export interface CreateEndpointOutputFormProperties {

		/** Required */
		EndpointArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateEndpointOutputFormGroup() {
		return new FormGroup<CreateEndpointOutputFormProperties>({
			EndpointArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateEndpointInput {

		/** Required */
		EndpointName: string;

		/** Required */
		EndpointConfigName: string;

		/** The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. */
		DeploymentConfig?: DeploymentConfig;
		Tags?: Array<Tag>;
	}
	export interface CreateEndpointInputFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,
	}
	export function CreateCreateEndpointInputFormGroup() {
		return new FormGroup<CreateEndpointInputFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. */
	export interface DeploymentConfig {
		BlueGreenUpdatePolicy?: BlueGreenUpdatePolicy;
		AutoRollbackConfiguration?: AutoRollbackConfig;
		RollingUpdatePolicy?: RollingUpdatePolicy;
	}

	/** The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations. */
	export interface DeploymentConfigFormProperties {
	}
	export function CreateDeploymentConfigFormGroup() {
		return new FormGroup<DeploymentConfigFormProperties>({
		});

	}


	/** Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. */
	export interface BlueGreenUpdatePolicy {

		/** Required */
		TrafficRoutingConfiguration: TrafficRoutingConfig;
		TerminationWaitInSeconds?: number | null;
		MaximumExecutionTimeoutInSeconds?: number | null;
	}

	/** Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default. */
	export interface BlueGreenUpdatePolicyFormProperties {
		TerminationWaitInSeconds: FormControl<number | null | undefined>,
		MaximumExecutionTimeoutInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateBlueGreenUpdatePolicyFormGroup() {
		return new FormGroup<BlueGreenUpdatePolicyFormProperties>({
			TerminationWaitInSeconds: new FormControl<number | null | undefined>(undefined),
			MaximumExecutionTimeoutInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Defines the traffic routing strategy during an endpoint deployment to shift traffic from the old fleet to the new fleet. */
	export interface TrafficRoutingConfig {

		/** Required */
		Type: TrafficRoutingConfigType;

		/** Required */
		WaitIntervalInSeconds: number;
		CanarySize?: CapacitySize;
		LinearStepSize?: CapacitySize;
	}

	/** Defines the traffic routing strategy during an endpoint deployment to shift traffic from the old fleet to the new fleet. */
	export interface TrafficRoutingConfigFormProperties {

		/** Required */
		Type: FormControl<TrafficRoutingConfigType | null | undefined>,

		/** Required */
		WaitIntervalInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateTrafficRoutingConfigFormGroup() {
		return new FormGroup<TrafficRoutingConfigFormProperties>({
			Type: new FormControl<TrafficRoutingConfigType | null | undefined>(undefined, [Validators.required]),
			WaitIntervalInSeconds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TrafficRoutingConfigType { ALL_AT_ONCE = 'ALL_AT_ONCE', CANARY = 'CANARY', LINEAR = 'LINEAR' }


	/** <p>Specifies the type and size of the endpoint capacity to activate for a blue/green deployment, a rolling deployment, or a rollback strategy. You can specify your batches as either instance count or the overall percentage or your fleet.</p> <p>For a rollback strategy, if you don't specify the fields in this object, or if you set the <code>Value</code> to 100%, then SageMaker uses a blue/green rollback strategy and rolls all traffic back to the blue fleet.</p> */
	export interface CapacitySize {

		/** Required */
		Type: CapacitySizeType;

		/** Required */
		Value: number;
	}

	/** <p>Specifies the type and size of the endpoint capacity to activate for a blue/green deployment, a rolling deployment, or a rollback strategy. You can specify your batches as either instance count or the overall percentage or your fleet.</p> <p>For a rollback strategy, if you don't specify the fields in this object, or if you set the <code>Value</code> to 100%, then SageMaker uses a blue/green rollback strategy and rolls all traffic back to the blue fleet.</p> */
	export interface CapacitySizeFormProperties {

		/** Required */
		Type: FormControl<CapacitySizeType | null | undefined>,

		/** Required */
		Value: FormControl<number | null | undefined>,
	}
	export function CreateCapacitySizeFormGroup() {
		return new FormGroup<CapacitySizeFormProperties>({
			Type: new FormControl<CapacitySizeType | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CapacitySizeType { INSTANCE_COUNT = 'INSTANCE_COUNT', CAPACITY_PERCENT = 'CAPACITY_PERCENT' }


	/** Automatic rollback configuration for handling endpoint deployment failures and recovery. */
	export interface AutoRollbackConfig {
		Alarms?: Array<Alarm>;
	}

	/** Automatic rollback configuration for handling endpoint deployment failures and recovery. */
	export interface AutoRollbackConfigFormProperties {
	}
	export function CreateAutoRollbackConfigFormGroup() {
		return new FormGroup<AutoRollbackConfigFormProperties>({
		});

	}


	/** An Amazon CloudWatch alarm configured to monitor metrics on an endpoint. */
	export interface Alarm {
		AlarmName?: string;
	}

	/** An Amazon CloudWatch alarm configured to monitor metrics on an endpoint. */
	export interface AlarmFormProperties {
		AlarmName: FormControl<string | null | undefined>,
	}
	export function CreateAlarmFormGroup() {
		return new FormGroup<AlarmFormProperties>({
			AlarmName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies a rolling deployment strategy for updating a SageMaker endpoint. */
	export interface RollingUpdatePolicy {

		/** Required */
		MaximumBatchSize: CapacitySize;

		/** Required */
		WaitIntervalInSeconds: number;
		MaximumExecutionTimeoutInSeconds?: number | null;
		RollbackMaximumBatchSize?: CapacitySize;
	}

	/** Specifies a rolling deployment strategy for updating a SageMaker endpoint. */
	export interface RollingUpdatePolicyFormProperties {

		/** Required */
		WaitIntervalInSeconds: FormControl<number | null | undefined>,
		MaximumExecutionTimeoutInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateRollingUpdatePolicyFormGroup() {
		return new FormGroup<RollingUpdatePolicyFormProperties>({
			WaitIntervalInSeconds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			MaximumExecutionTimeoutInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CreateEndpointConfigOutput {

		/** Required */
		EndpointConfigArn: string;
	}
	export interface CreateEndpointConfigOutputFormProperties {

		/** Required */
		EndpointConfigArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateEndpointConfigOutputFormGroup() {
		return new FormGroup<CreateEndpointConfigOutputFormProperties>({
			EndpointConfigArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateEndpointConfigInput {

		/** Required */
		EndpointConfigName: string;

		/** Required */
		ProductionVariants: Array<ProductionVariant>;

		/** Configuration to control how SageMaker captures inference data. */
		DataCaptureConfig?: DataCaptureConfig;
		Tags?: Array<Tag>;
		KmsKeyId?: string;
		AsyncInferenceConfig?: AsyncInferenceConfig;
		ExplainerConfig?: ExplainerConfig;
		ShadowProductionVariants?: Array<ProductionVariant>;
	}
	export interface CreateEndpointConfigInputFormProperties {

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateCreateEndpointConfigInputFormGroup() {
		return new FormGroup<CreateEndpointConfigInputFormProperties>({
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**  Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html"> Production variants</a>.  */
	export interface ProductionVariant {

		/** Required */
		VariantName: string;

		/** Required */
		ModelName: string;
		InitialInstanceCount?: number | null;
		InstanceType?: ProductionVariantInstanceType;
		InitialVariantWeight?: number;
		AcceleratorType?: ProductionVariantAcceleratorType;
		CoreDumpConfig?: ProductionVariantCoreDumpConfig;
		ServerlessConfig?: ProductionVariantServerlessConfig;
		VolumeSizeInGB?: number | null;
		ModelDataDownloadTimeoutInSeconds?: number | null;
		ContainerStartupHealthCheckTimeoutInSeconds?: number | null;
		EnableSSMAccess?: boolean | null;
	}

	/**  Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html"> Production variants</a>.  */
	export interface ProductionVariantFormProperties {

		/** Required */
		VariantName: FormControl<string | null | undefined>,

		/** Required */
		ModelName: FormControl<string | null | undefined>,
		InitialInstanceCount: FormControl<number | null | undefined>,
		InstanceType: FormControl<ProductionVariantInstanceType | null | undefined>,
		InitialVariantWeight: FormControl<number | null | undefined>,
		AcceleratorType: FormControl<ProductionVariantAcceleratorType | null | undefined>,
		VolumeSizeInGB: FormControl<number | null | undefined>,
		ModelDataDownloadTimeoutInSeconds: FormControl<number | null | undefined>,
		ContainerStartupHealthCheckTimeoutInSeconds: FormControl<number | null | undefined>,
		EnableSSMAccess: FormControl<boolean | null | undefined>,
	}
	export function CreateProductionVariantFormGroup() {
		return new FormGroup<ProductionVariantFormProperties>({
			VariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InitialInstanceCount: new FormControl<number | null | undefined>(undefined),
			InstanceType: new FormControl<ProductionVariantInstanceType | null | undefined>(undefined),
			InitialVariantWeight: new FormControl<number | null | undefined>(undefined),
			AcceleratorType: new FormControl<ProductionVariantAcceleratorType | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined),
			ModelDataDownloadTimeoutInSeconds: new FormControl<number | null | undefined>(undefined),
			ContainerStartupHealthCheckTimeoutInSeconds: new FormControl<number | null | undefined>(undefined),
			EnableSSMAccess: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum ProductionVariantAcceleratorType { 'ml.eia1.medium' = 'ml.eia1.medium', 'ml.eia1.large' = 'ml.eia1.large', 'ml.eia1.xlarge' = 'ml.eia1.xlarge', 'ml.eia2.medium' = 'ml.eia2.medium', 'ml.eia2.large' = 'ml.eia2.large', 'ml.eia2.xlarge' = 'ml.eia2.xlarge' }


	/** Specifies configuration for a core dump from the model container when the process crashes. */
	export interface ProductionVariantCoreDumpConfig {

		/** Required */
		DestinationS3Uri: string;
		KmsKeyId?: string;
	}

	/** Specifies configuration for a core dump from the model container when the process crashes. */
	export interface ProductionVariantCoreDumpConfigFormProperties {

		/** Required */
		DestinationS3Uri: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateProductionVariantCoreDumpConfigFormGroup() {
		return new FormGroup<ProductionVariantCoreDumpConfigFormProperties>({
			DestinationS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies the serverless configuration for an endpoint variant. */
	export interface ProductionVariantServerlessConfig {

		/** Required */
		MemorySizeInMB: number;

		/** Required */
		MaxConcurrency: number;
		ProvisionedConcurrency?: number | null;
	}

	/** Specifies the serverless configuration for an endpoint variant. */
	export interface ProductionVariantServerlessConfigFormProperties {

		/** Required */
		MemorySizeInMB: FormControl<number | null | undefined>,

		/** Required */
		MaxConcurrency: FormControl<number | null | undefined>,
		ProvisionedConcurrency: FormControl<number | null | undefined>,
	}
	export function CreateProductionVariantServerlessConfigFormGroup() {
		return new FormGroup<ProductionVariantServerlessConfigFormProperties>({
			MemorySizeInMB: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			MaxConcurrency: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ProvisionedConcurrency: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Configuration to control how SageMaker captures inference data. */
	export interface DataCaptureConfig {
		EnableCapture?: boolean | null;

		/** Required */
		InitialSamplingPercentage: number;

		/** Required */
		DestinationS3Uri: string;
		KmsKeyId?: string;

		/** Required */
		CaptureOptions: Array<CaptureOption>;
		CaptureContentTypeHeader?: CaptureContentTypeHeader;
	}

	/** Configuration to control how SageMaker captures inference data. */
	export interface DataCaptureConfigFormProperties {
		EnableCapture: FormControl<boolean | null | undefined>,

		/** Required */
		InitialSamplingPercentage: FormControl<number | null | undefined>,

		/** Required */
		DestinationS3Uri: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateDataCaptureConfigFormGroup() {
		return new FormGroup<DataCaptureConfigFormProperties>({
			EnableCapture: new FormControl<boolean | null | undefined>(undefined),
			InitialSamplingPercentage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			DestinationS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies data Model Monitor will capture. */
	export interface CaptureOption {

		/** Required */
		CaptureMode: CaptureMode;
	}

	/** Specifies data Model Monitor will capture. */
	export interface CaptureOptionFormProperties {

		/** Required */
		CaptureMode: FormControl<CaptureMode | null | undefined>,
	}
	export function CreateCaptureOptionFormGroup() {
		return new FormGroup<CaptureOptionFormProperties>({
			CaptureMode: new FormControl<CaptureMode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CaptureMode { Input = 'Input', Output = 'Output' }


	/** Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data. */
	export interface CaptureContentTypeHeader {
		CsvContentTypes?: Array<string>;
		JsonContentTypes?: Array<string>;
	}

	/** Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data. */
	export interface CaptureContentTypeHeaderFormProperties {
	}
	export function CreateCaptureContentTypeHeaderFormGroup() {
		return new FormGroup<CaptureContentTypeHeaderFormProperties>({
		});

	}


	/** Specifies configuration for how an endpoint performs asynchronous inference. */
	export interface AsyncInferenceConfig {
		ClientConfig?: AsyncInferenceClientConfig;

		/** Required */
		OutputConfig: AsyncInferenceOutputConfig;
	}

	/** Specifies configuration for how an endpoint performs asynchronous inference. */
	export interface AsyncInferenceConfigFormProperties {
	}
	export function CreateAsyncInferenceConfigFormGroup() {
		return new FormGroup<AsyncInferenceConfigFormProperties>({
		});

	}


	/** Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference. */
	export interface AsyncInferenceClientConfig {
		MaxConcurrentInvocationsPerInstance?: number | null;
	}

	/** Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference. */
	export interface AsyncInferenceClientConfigFormProperties {
		MaxConcurrentInvocationsPerInstance: FormControl<number | null | undefined>,
	}
	export function CreateAsyncInferenceClientConfigFormGroup() {
		return new FormGroup<AsyncInferenceClientConfigFormProperties>({
			MaxConcurrentInvocationsPerInstance: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Specifies the configuration for asynchronous inference invocation outputs. */
	export interface AsyncInferenceOutputConfig {
		KmsKeyId?: string;
		S3OutputPath?: string;
		NotificationConfig?: AsyncInferenceNotificationConfig;
		S3FailurePath?: string;
	}

	/** Specifies the configuration for asynchronous inference invocation outputs. */
	export interface AsyncInferenceOutputConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,
		S3OutputPath: FormControl<string | null | undefined>,
		S3FailurePath: FormControl<string | null | undefined>,
	}
	export function CreateAsyncInferenceOutputConfigFormGroup() {
		return new FormGroup<AsyncInferenceOutputConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined),
			S3FailurePath: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies the configuration for notifications of inference results for asynchronous inference. */
	export interface AsyncInferenceNotificationConfig {
		SuccessTopic?: string;
		ErrorTopic?: string;
		IncludeInferenceResponseIn?: Array<AsyncNotificationTopicTypes>;
	}

	/** Specifies the configuration for notifications of inference results for asynchronous inference. */
	export interface AsyncInferenceNotificationConfigFormProperties {
		SuccessTopic: FormControl<string | null | undefined>,
		ErrorTopic: FormControl<string | null | undefined>,
	}
	export function CreateAsyncInferenceNotificationConfigFormGroup() {
		return new FormGroup<AsyncInferenceNotificationConfigFormProperties>({
			SuccessTopic: new FormControl<string | null | undefined>(undefined),
			ErrorTopic: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AsyncNotificationTopicTypes { SUCCESS_NOTIFICATION_TOPIC = 'SUCCESS_NOTIFICATION_TOPIC', ERROR_NOTIFICATION_TOPIC = 'ERROR_NOTIFICATION_TOPIC' }


	/** A parameter to activate explainers. */
	export interface ExplainerConfig {
		ClarifyExplainerConfig?: ClarifyExplainerConfig;
	}

	/** A parameter to activate explainers. */
	export interface ExplainerConfigFormProperties {
	}
	export function CreateExplainerConfigFormGroup() {
		return new FormGroup<ExplainerConfigFormProperties>({
		});

	}


	/** The configuration parameters for the SageMaker Clarify explainer. */
	export interface ClarifyExplainerConfig {
		EnableExplanations?: string;
		InferenceConfig?: ClarifyInferenceConfig;

		/** Required */
		ShapConfig: ClarifyShapConfig;
	}

	/** The configuration parameters for the SageMaker Clarify explainer. */
	export interface ClarifyExplainerConfigFormProperties {
		EnableExplanations: FormControl<string | null | undefined>,
	}
	export function CreateClarifyExplainerConfigFormGroup() {
		return new FormGroup<ClarifyExplainerConfigFormProperties>({
			EnableExplanations: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The inference configuration parameter for the model container. */
	export interface ClarifyInferenceConfig {
		FeaturesAttribute?: string;
		ContentTemplate?: string;
		MaxRecordCount?: number | null;
		MaxPayloadInMB?: number | null;
		ProbabilityIndex?: number | null;
		LabelIndex?: number | null;
		ProbabilityAttribute?: string;
		LabelAttribute?: string;
		LabelHeaders?: Array<string>;
		FeatureHeaders?: Array<string>;
		FeatureTypes?: Array<ClarifyFeatureType>;
	}

	/** The inference configuration parameter for the model container. */
	export interface ClarifyInferenceConfigFormProperties {
		FeaturesAttribute: FormControl<string | null | undefined>,
		ContentTemplate: FormControl<string | null | undefined>,
		MaxRecordCount: FormControl<number | null | undefined>,
		MaxPayloadInMB: FormControl<number | null | undefined>,
		ProbabilityIndex: FormControl<number | null | undefined>,
		LabelIndex: FormControl<number | null | undefined>,
		ProbabilityAttribute: FormControl<string | null | undefined>,
		LabelAttribute: FormControl<string | null | undefined>,
	}
	export function CreateClarifyInferenceConfigFormGroup() {
		return new FormGroup<ClarifyInferenceConfigFormProperties>({
			FeaturesAttribute: new FormControl<string | null | undefined>(undefined),
			ContentTemplate: new FormControl<string | null | undefined>(undefined),
			MaxRecordCount: new FormControl<number | null | undefined>(undefined),
			MaxPayloadInMB: new FormControl<number | null | undefined>(undefined),
			ProbabilityIndex: new FormControl<number | null | undefined>(undefined),
			LabelIndex: new FormControl<number | null | undefined>(undefined),
			ProbabilityAttribute: new FormControl<string | null | undefined>(undefined),
			LabelAttribute: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ClarifyFeatureType { numerical = 'numerical', categorical = 'categorical', text = 'text' }


	/** The configuration for SHAP analysis using SageMaker Clarify Explainer. */
	export interface ClarifyShapConfig {

		/** Required */
		ShapBaselineConfig: ClarifyShapBaselineConfig;
		NumberOfSamples?: number | null;
		UseLogit?: boolean | null;
		Seed?: number | null;
		TextConfig?: ClarifyTextConfig;
	}

	/** The configuration for SHAP analysis using SageMaker Clarify Explainer. */
	export interface ClarifyShapConfigFormProperties {
		NumberOfSamples: FormControl<number | null | undefined>,
		UseLogit: FormControl<boolean | null | undefined>,
		Seed: FormControl<number | null | undefined>,
	}
	export function CreateClarifyShapConfigFormGroup() {
		return new FormGroup<ClarifyShapConfigFormProperties>({
			NumberOfSamples: new FormControl<number | null | undefined>(undefined),
			UseLogit: new FormControl<boolean | null | undefined>(undefined),
			Seed: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>The configuration for the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html">SHAP baseline</a> (also called the background or reference dataset) of the Kernal SHAP algorithm.</p> <note> <ul> <li> <p>The number of records in the baseline data determines the size of the synthetic dataset, which has an impact on latency of explainability requests. For more information, see the <b>Synthetic data</b> of <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html">Configure and create an endpoint</a>.</p> </li> <li> <p> <code>ShapBaseline</code> and <code>ShapBaselineUri</code> are mutually exclusive parameters. One or the either is required to configure a SHAP baseline. </p> </li> </ul> </note> */
	export interface ClarifyShapBaselineConfig {
		MimeType?: string;
		ShapBaseline?: string;
		ShapBaselineUri?: string;
	}

	/** <p>The configuration for the <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html">SHAP baseline</a> (also called the background or reference dataset) of the Kernal SHAP algorithm.</p> <note> <ul> <li> <p>The number of records in the baseline data determines the size of the synthetic dataset, which has an impact on latency of explainability requests. For more information, see the <b>Synthetic data</b> of <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html">Configure and create an endpoint</a>.</p> </li> <li> <p> <code>ShapBaseline</code> and <code>ShapBaselineUri</code> are mutually exclusive parameters. One or the either is required to configure a SHAP baseline. </p> </li> </ul> </note> */
	export interface ClarifyShapBaselineConfigFormProperties {
		MimeType: FormControl<string | null | undefined>,
		ShapBaseline: FormControl<string | null | undefined>,
		ShapBaselineUri: FormControl<string | null | undefined>,
	}
	export function CreateClarifyShapBaselineConfigFormGroup() {
		return new FormGroup<ClarifyShapBaselineConfigFormProperties>({
			MimeType: new FormControl<string | null | undefined>(undefined),
			ShapBaseline: new FormControl<string | null | undefined>(undefined),
			ShapBaselineUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A parameter used to configure the SageMaker Clarify explainer to treat text features as text so that explanations are provided for individual units of text. Required only for natural language processing (NLP) explainability.  */
	export interface ClarifyTextConfig {

		/** Required */
		Language: ClarifyTextLanguage;

		/** Required */
		Granularity: ClarifyTextGranularity;
	}

	/** A parameter used to configure the SageMaker Clarify explainer to treat text features as text so that explanations are provided for individual units of text. Required only for natural language processing (NLP) explainability.  */
	export interface ClarifyTextConfigFormProperties {

		/** Required */
		Language: FormControl<ClarifyTextLanguage | null | undefined>,

		/** Required */
		Granularity: FormControl<ClarifyTextGranularity | null | undefined>,
	}
	export function CreateClarifyTextConfigFormGroup() {
		return new FormGroup<ClarifyTextConfigFormProperties>({
			Language: new FormControl<ClarifyTextLanguage | null | undefined>(undefined, [Validators.required]),
			Granularity: new FormControl<ClarifyTextGranularity | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ClarifyTextLanguage { af = 'af', sq = 'sq', ar = 'ar', hy = 'hy', eu = 'eu', bn = 'bn', bg = 'bg', ca = 'ca', zh = 'zh', hr = 'hr', cs = 'cs', da = 'da', nl = 'nl', en = 'en', et = 'et', fi = 'fi', fr = 'fr', de = 'de', el = 'el', gu = 'gu', he = 'he', hi = 'hi', hu = 'hu', is = 'is', id = 'id', ga = 'ga', it = 'it', kn = 'kn', ky = 'ky', lv = 'lv', lt = 'lt', lb = 'lb', mk = 'mk', ml = 'ml', mr = 'mr', ne = 'ne', nb = 'nb', fa = 'fa', pl = 'pl', pt = 'pt', ro = 'ro', ru = 'ru', sa = 'sa', sr = 'sr', tn = 'tn', si = 'si', sk = 'sk', sl = 'sl', es = 'es', sv = 'sv', tl = 'tl', ta = 'ta', tt = 'tt', te = 'te', tr = 'tr', uk = 'uk', ur = 'ur', yo = 'yo', lij = 'lij', xx = 'xx' }

	export enum ClarifyTextGranularity { token = 'token', sentence = 'sentence', paragraph = 'paragraph' }

	export interface CreateExperimentResponse {
		ExperimentArn?: string;
	}
	export interface CreateExperimentResponseFormProperties {
		ExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateExperimentResponseFormGroup() {
		return new FormGroup<CreateExperimentResponseFormProperties>({
			ExperimentArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateExperimentRequest {

		/** Required */
		ExperimentName: string;
		DisplayName?: string;
		Description?: string;
		Tags?: Array<Tag>;
	}
	export interface CreateExperimentRequestFormProperties {

		/** Required */
		ExperimentName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateCreateExperimentRequestFormGroup() {
		return new FormGroup<CreateExperimentRequestFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateFeatureGroupResponse {

		/** Required */
		FeatureGroupArn: string;
	}
	export interface CreateFeatureGroupResponseFormProperties {

		/** Required */
		FeatureGroupArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateFeatureGroupResponseFormGroup() {
		return new FormGroup<CreateFeatureGroupResponseFormProperties>({
			FeatureGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateFeatureGroupRequest {

		/** Required */
		FeatureGroupName: string;

		/** Required */
		RecordIdentifierFeatureName: string;

		/** Required */
		EventTimeFeatureName: string;

		/** Required */
		FeatureDefinitions: Array<FeatureDefinition>;
		OnlineStoreConfig?: OnlineStoreConfig;
		OfflineStoreConfig?: OfflineStoreConfig;
		RoleArn?: string;
		Description?: string;
		Tags?: Array<Tag>;
	}
	export interface CreateFeatureGroupRequestFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,

		/** Required */
		RecordIdentifierFeatureName: FormControl<string | null | undefined>,

		/** Required */
		EventTimeFeatureName: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateCreateFeatureGroupRequestFormGroup() {
		return new FormGroup<CreateFeatureGroupRequestFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RecordIdentifierFeatureName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EventTimeFeatureName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of features. You must include <code>FeatureName</code> and <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and <code>String</code>.  */
	export interface FeatureDefinition {
		FeatureName?: string;
		FeatureType?: FeatureType;
	}

	/** A list of features. You must include <code>FeatureName</code> and <code>FeatureType</code>. Valid feature <code>FeatureType</code>s are <code>Integral</code>, <code>Fractional</code> and <code>String</code>.  */
	export interface FeatureDefinitionFormProperties {
		FeatureName: FormControl<string | null | undefined>,
		FeatureType: FormControl<FeatureType | null | undefined>,
	}
	export function CreateFeatureDefinitionFormGroup() {
		return new FormGroup<FeatureDefinitionFormProperties>({
			FeatureName: new FormControl<string | null | undefined>(undefined),
			FeatureType: new FormControl<FeatureType | null | undefined>(undefined),
		});

	}

	export enum FeatureType { Integral = 'Integral', Fractional = 'Fractional', String = 'String' }


	/** <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag at General Assembly.</p> <p>The default value is <code>False</code>.</p> */
	export interface OnlineStoreConfig {
		SecurityConfig?: OnlineStoreSecurityConfig;
		EnableOnlineStore?: boolean | null;
		TtlDuration?: TtlDuration;
	}

	/** <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag at General Assembly.</p> <p>The default value is <code>False</code>.</p> */
	export interface OnlineStoreConfigFormProperties {
		EnableOnlineStore: FormControl<boolean | null | undefined>,
	}
	export function CreateOnlineStoreConfigFormGroup() {
		return new FormGroup<OnlineStoreConfigFormProperties>({
			EnableOnlineStore: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The security configuration for <code>OnlineStore</code>. */
	export interface OnlineStoreSecurityConfig {
		KmsKeyId?: string;
	}

	/** The security configuration for <code>OnlineStore</code>. */
	export interface OnlineStoreSecurityConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateOnlineStoreSecurityConfigFormGroup() {
		return new FormGroup<OnlineStoreSecurityConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide. */
	export interface TtlDuration {
		Unit?: TtlDurationUnit;
		Value?: number | null;
	}

	/** Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide. */
	export interface TtlDurationFormProperties {
		Unit: FormControl<TtlDurationUnit | null | undefined>,
		Value: FormControl<number | null | undefined>,
	}
	export function CreateTtlDurationFormGroup() {
		return new FormGroup<TtlDurationFormProperties>({
			Unit: new FormControl<TtlDurationUnit | null | undefined>(undefined),
			Value: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum TtlDurationUnit { Seconds = 'Seconds', Minutes = 'Minutes', Hours = 'Hours', Days = 'Days', Weeks = 'Weeks' }


	/** <p>The configuration of an <code>OfflineStore</code>.</p> <p>Provide an <code>OfflineStoreConfig</code> in a request to <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p> <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or <code>KMSKeyId</code>, in <code>S3StorageConfig</code>.</p> */
	export interface OfflineStoreConfig {

		/** Required */
		S3StorageConfig: S3StorageConfig;
		DisableGlueTableCreation?: boolean | null;
		DataCatalogConfig?: DataCatalogConfig;
		TableFormat?: TableFormat;
	}

	/** <p>The configuration of an <code>OfflineStore</code>.</p> <p>Provide an <code>OfflineStoreConfig</code> in a request to <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p> <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or <code>KMSKeyId</code>, in <code>S3StorageConfig</code>.</p> */
	export interface OfflineStoreConfigFormProperties {
		DisableGlueTableCreation: FormControl<boolean | null | undefined>,
		TableFormat: FormControl<TableFormat | null | undefined>,
	}
	export function CreateOfflineStoreConfigFormGroup() {
		return new FormGroup<OfflineStoreConfigFormProperties>({
			DisableGlueTableCreation: new FormControl<boolean | null | undefined>(undefined),
			TableFormat: new FormControl<TableFormat | null | undefined>(undefined),
		});

	}


	/** The Amazon Simple Storage (Amazon S3) location and and security configuration for <code>OfflineStore</code>. */
	export interface S3StorageConfig {

		/** Required */
		S3Uri: string;
		KmsKeyId?: string;
		ResolvedOutputS3Uri?: string;
	}

	/** The Amazon Simple Storage (Amazon S3) location and and security configuration for <code>OfflineStore</code>. */
	export interface S3StorageConfigFormProperties {

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		ResolvedOutputS3Uri: FormControl<string | null | undefined>,
	}
	export function CreateS3StorageConfigFormGroup() {
		return new FormGroup<S3StorageConfigFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			ResolvedOutputS3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The meta data of the Glue table which serves as data catalog for the <code>OfflineStore</code>.  */
	export interface DataCatalogConfig {

		/** Required */
		TableName: string;

		/** Required */
		Catalog: string;

		/** Required */
		Database: string;
	}

	/** The meta data of the Glue table which serves as data catalog for the <code>OfflineStore</code>.  */
	export interface DataCatalogConfigFormProperties {

		/** Required */
		TableName: FormControl<string | null | undefined>,

		/** Required */
		Catalog: FormControl<string | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateDataCatalogConfigFormGroup() {
		return new FormGroup<DataCatalogConfigFormProperties>({
			TableName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Catalog: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TableFormat { Glue = 'Glue', Iceberg = 'Iceberg' }

	export interface CreateFlowDefinitionResponse {

		/** Required */
		FlowDefinitionArn: string;
	}
	export interface CreateFlowDefinitionResponseFormProperties {

		/** Required */
		FlowDefinitionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateFlowDefinitionResponseFormGroup() {
		return new FormGroup<CreateFlowDefinitionResponseFormProperties>({
			FlowDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateFlowDefinitionRequest {

		/** Required */
		FlowDefinitionName: string;
		HumanLoopRequestSource?: HumanLoopRequestSource;
		HumanLoopActivationConfig?: HumanLoopActivationConfig;

		/** Required */
		HumanLoopConfig: HumanLoopConfig;

		/** Required */
		OutputConfig: FlowDefinitionOutputConfig;

		/** Required */
		RoleArn: string;
		Tags?: Array<Tag>;
	}
	export interface CreateFlowDefinitionRequestFormProperties {

		/** Required */
		FlowDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateFlowDefinitionRequestFormGroup() {
		return new FormGroup<CreateFlowDefinitionRequestFormProperties>({
			FlowDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Container for configuring the source of human task requests. */
	export interface HumanLoopRequestSource {

		/** Required */
		AwsManagedHumanLoopRequestSource: AwsManagedHumanLoopRequestSource;
	}

	/** Container for configuring the source of human task requests. */
	export interface HumanLoopRequestSourceFormProperties {

		/** Required */
		AwsManagedHumanLoopRequestSource: FormControl<AwsManagedHumanLoopRequestSource | null | undefined>,
	}
	export function CreateHumanLoopRequestSourceFormGroup() {
		return new FormGroup<HumanLoopRequestSourceFormProperties>({
			AwsManagedHumanLoopRequestSource: new FormControl<AwsManagedHumanLoopRequestSource | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AwsManagedHumanLoopRequestSource { 'AWS/Rekognition/DetectModerationLabels/Image/V3' = 'AWS/Rekognition/DetectModerationLabels/Image/V3', 'AWS/Textract/AnalyzeDocument/Forms/V1' = 'AWS/Textract/AnalyzeDocument/Forms/V1' }


	/** Provides information about how and under what conditions SageMaker creates a human loop. If <code>HumanLoopActivationConfig</code> is not given, then all requests go to humans. */
	export interface HumanLoopActivationConfig {

		/** Required */
		HumanLoopActivationConditionsConfig: HumanLoopActivationConditionsConfig;
	}

	/** Provides information about how and under what conditions SageMaker creates a human loop. If <code>HumanLoopActivationConfig</code> is not given, then all requests go to humans. */
	export interface HumanLoopActivationConfigFormProperties {
	}
	export function CreateHumanLoopActivationConfigFormGroup() {
		return new FormGroup<HumanLoopActivationConfigFormProperties>({
		});

	}


	/** Defines under what conditions SageMaker creates a human loop. Used within <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFlowDefinition.html">CreateFlowDefinition</a>. See <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HumanLoopActivationConditionsConfig.html">HumanLoopActivationConditionsConfig</a> for the required format of activation conditions. */
	export interface HumanLoopActivationConditionsConfig {

		/** Required */
		HumanLoopActivationConditions: string;
	}

	/** Defines under what conditions SageMaker creates a human loop. Used within <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFlowDefinition.html">CreateFlowDefinition</a>. See <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HumanLoopActivationConditionsConfig.html">HumanLoopActivationConditionsConfig</a> for the required format of activation conditions. */
	export interface HumanLoopActivationConditionsConfigFormProperties {

		/** Required */
		HumanLoopActivationConditions: FormControl<string | null | undefined>,
	}
	export function CreateHumanLoopActivationConditionsConfigFormGroup() {
		return new FormGroup<HumanLoopActivationConditionsConfigFormProperties>({
			HumanLoopActivationConditions: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Describes the work to be performed by human workers. */
	export interface HumanLoopConfig {

		/** Required */
		WorkteamArn: string;

		/** Required */
		HumanTaskUiArn: string;

		/** Required */
		TaskTitle: string;

		/** Required */
		TaskDescription: string;

		/** Required */
		TaskCount: number;
		TaskAvailabilityLifetimeInSeconds?: number | null;
		TaskTimeLimitInSeconds?: number | null;
		TaskKeywords?: Array<string>;

		/** <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p> <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.</p> <ul> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.</p> <ul> <li> <p>0.012</p> </li> <li> <p>0.024</p> </li> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.</p> <ul> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>2.400 </p> </li> <li> <p>2.280 </p> </li> <li> <p>2.160 </p> </li> <li> <p>2.040 </p> </li> <li> <p>1.920 </p> </li> <li> <p>1.800 </p> </li> <li> <p>1.680 </p> </li> <li> <p>1.560 </p> </li> <li> <p>1.440 </p> </li> <li> <p>1.320 </p> </li> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> */
		PublicWorkforceTaskPrice?: PublicWorkforceTaskPrice;
	}

	/** Describes the work to be performed by human workers. */
	export interface HumanLoopConfigFormProperties {

		/** Required */
		WorkteamArn: FormControl<string | null | undefined>,

		/** Required */
		HumanTaskUiArn: FormControl<string | null | undefined>,

		/** Required */
		TaskTitle: FormControl<string | null | undefined>,

		/** Required */
		TaskDescription: FormControl<string | null | undefined>,

		/** Required */
		TaskCount: FormControl<number | null | undefined>,
		TaskAvailabilityLifetimeInSeconds: FormControl<number | null | undefined>,
		TaskTimeLimitInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateHumanLoopConfigFormGroup() {
		return new FormGroup<HumanLoopConfigFormProperties>({
			WorkteamArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HumanTaskUiArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TaskTitle: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TaskDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TaskCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			TaskAvailabilityLifetimeInSeconds: new FormControl<number | null | undefined>(undefined),
			TaskTimeLimitInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p> <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.</p> <ul> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.</p> <ul> <li> <p>0.012</p> </li> <li> <p>0.024</p> </li> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.</p> <ul> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>2.400 </p> </li> <li> <p>2.280 </p> </li> <li> <p>2.160 </p> </li> <li> <p>2.040 </p> </li> <li> <p>1.920 </p> </li> <li> <p>1.800 </p> </li> <li> <p>1.680 </p> </li> <li> <p>1.560 </p> </li> <li> <p>1.440 </p> </li> <li> <p>1.320 </p> </li> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> */
	export interface PublicWorkforceTaskPrice {
		AmountInUsd?: USD;
	}

	/** <p>Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. </p> <p>Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.</p> <ul> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.</p> <ul> <li> <p>0.012</p> </li> <li> <p>0.024</p> </li> <li> <p>0.036</p> </li> <li> <p>0.048</p> </li> <li> <p>0.060</p> </li> <li> <p>0.072</p> </li> <li> <p>0.120</p> </li> <li> <p>0.240</p> </li> <li> <p>0.360</p> </li> <li> <p>0.480</p> </li> <li> <p>0.600</p> </li> <li> <p>0.720</p> </li> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.</p> <ul> <li> <p>0.840</p> </li> <li> <p>0.960</p> </li> <li> <p>1.080</p> </li> <li> <p>1.200</p> </li> </ul> <p>Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>2.400 </p> </li> <li> <p>2.280 </p> </li> <li> <p>2.160 </p> </li> <li> <p>2.040 </p> </li> <li> <p>1.920 </p> </li> <li> <p>1.800 </p> </li> <li> <p>1.680 </p> </li> <li> <p>1.560 </p> </li> <li> <p>1.440 </p> </li> <li> <p>1.320 </p> </li> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> <p>Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.</p> <ul> <li> <p>1.200 </p> </li> <li> <p>1.080 </p> </li> <li> <p>0.960 </p> </li> <li> <p>0.840 </p> </li> <li> <p>0.720 </p> </li> <li> <p>0.600 </p> </li> <li> <p>0.480 </p> </li> <li> <p>0.360 </p> </li> <li> <p>0.240 </p> </li> <li> <p>0.120 </p> </li> <li> <p>0.072 </p> </li> <li> <p>0.060 </p> </li> <li> <p>0.048 </p> </li> <li> <p>0.036 </p> </li> <li> <p>0.024 </p> </li> <li> <p>0.012 </p> </li> </ul> */
	export interface PublicWorkforceTaskPriceFormProperties {
	}
	export function CreatePublicWorkforceTaskPriceFormGroup() {
		return new FormGroup<PublicWorkforceTaskPriceFormProperties>({
		});

	}


	/** Represents an amount of money in United States dollars. */
	export interface USD {
		Dollars?: number | null;
		Cents?: number | null;
		TenthFractionsOfACent?: number | null;
	}

	/** Represents an amount of money in United States dollars. */
	export interface USDFormProperties {
		Dollars: FormControl<number | null | undefined>,
		Cents: FormControl<number | null | undefined>,
		TenthFractionsOfACent: FormControl<number | null | undefined>,
	}
	export function CreateUSDFormGroup() {
		return new FormGroup<USDFormProperties>({
			Dollars: new FormControl<number | null | undefined>(undefined),
			Cents: new FormControl<number | null | undefined>(undefined),
			TenthFractionsOfACent: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Contains information about where human output will be stored. */
	export interface FlowDefinitionOutputConfig {

		/** Required */
		S3OutputPath: string;
		KmsKeyId?: string;
	}

	/** Contains information about where human output will be stored. */
	export interface FlowDefinitionOutputConfigFormProperties {

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateFlowDefinitionOutputConfigFormGroup() {
		return new FormGroup<FlowDefinitionOutputConfigFormProperties>({
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateHubResponse {

		/** Required */
		HubArn: string;
	}
	export interface CreateHubResponseFormProperties {

		/** Required */
		HubArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateHubResponseFormGroup() {
		return new FormGroup<CreateHubResponseFormProperties>({
			HubArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateHubRequest {

		/** Required */
		HubName: string;

		/** Required */
		HubDescription: string;
		HubDisplayName?: string;
		HubSearchKeywords?: Array<string>;
		S3StorageConfig?: HubS3StorageConfig;
		Tags?: Array<Tag>;
	}
	export interface CreateHubRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubDescription: FormControl<string | null | undefined>,
		HubDisplayName: FormControl<string | null | undefined>,
	}
	export function CreateCreateHubRequestFormGroup() {
		return new FormGroup<CreateHubRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubDisplayName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Amazon S3 storage configuration of a hub. */
	export interface HubS3StorageConfig {
		S3OutputPath?: string;
	}

	/** The Amazon S3 storage configuration of a hub. */
	export interface HubS3StorageConfigFormProperties {
		S3OutputPath: FormControl<string | null | undefined>,
	}
	export function CreateHubS3StorageConfigFormGroup() {
		return new FormGroup<HubS3StorageConfigFormProperties>({
			S3OutputPath: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateHumanTaskUiResponse {

		/** Required */
		HumanTaskUiArn: string;
	}
	export interface CreateHumanTaskUiResponseFormProperties {

		/** Required */
		HumanTaskUiArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateHumanTaskUiResponseFormGroup() {
		return new FormGroup<CreateHumanTaskUiResponseFormProperties>({
			HumanTaskUiArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateHumanTaskUiRequest {

		/** Required */
		HumanTaskUiName: string;

		/**
		 * The Liquid template for the worker user interface.
		 * Required
		 */
		UiTemplate: UiTemplate;
		Tags?: Array<Tag>;
	}
	export interface CreateHumanTaskUiRequestFormProperties {

		/** Required */
		HumanTaskUiName: FormControl<string | null | undefined>,
	}
	export function CreateCreateHumanTaskUiRequestFormGroup() {
		return new FormGroup<CreateHumanTaskUiRequestFormProperties>({
			HumanTaskUiName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The Liquid template for the worker user interface. */
	export interface UiTemplate {

		/** Required */
		Content: string;
	}

	/** The Liquid template for the worker user interface. */
	export interface UiTemplateFormProperties {

		/** Required */
		Content: FormControl<string | null | undefined>,
	}
	export function CreateUiTemplateFormGroup() {
		return new FormGroup<UiTemplateFormProperties>({
			Content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateHyperParameterTuningJobResponse {

		/** Required */
		HyperParameterTuningJobArn: string;
	}
	export interface CreateHyperParameterTuningJobResponseFormProperties {

		/** Required */
		HyperParameterTuningJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateHyperParameterTuningJobResponseFormGroup() {
		return new FormGroup<CreateHyperParameterTuningJobResponseFormProperties>({
			HyperParameterTuningJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateHyperParameterTuningJobRequest {

		/** Required */
		HyperParameterTuningJobName: string;

		/** Required */
		HyperParameterTuningJobConfig: HyperParameterTuningJobConfig;
		TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
		TrainingJobDefinitions?: Array<HyperParameterTrainingJobDefinition>;
		WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
		Tags?: Array<Tag>;
		Autotune?: Autotune;
	}
	export interface CreateHyperParameterTuningJobRequestFormProperties {

		/** Required */
		HyperParameterTuningJobName: FormControl<string | null | undefined>,
	}
	export function CreateCreateHyperParameterTuningJobRequestFormGroup() {
		return new FormGroup<CreateHyperParameterTuningJobRequestFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configures a hyperparameter tuning job. */
	export interface HyperParameterTuningJobConfig {

		/** Required */
		Strategy: HyperParameterTuningJobStrategyType;
		StrategyConfig?: HyperParameterTuningJobStrategyConfig;
		HyperParameterTuningJobObjective?: HyperParameterTuningJobObjective;

		/** Required */
		ResourceLimits: ResourceLimits;
		ParameterRanges?: ParameterRanges;
		TrainingJobEarlyStoppingType?: TrainingJobEarlyStoppingType;
		TuningJobCompletionCriteria?: TuningJobCompletionCriteria;
		RandomSeed?: number | null;
	}

	/** Configures a hyperparameter tuning job. */
	export interface HyperParameterTuningJobConfigFormProperties {

		/** Required */
		Strategy: FormControl<HyperParameterTuningJobStrategyType | null | undefined>,
		TrainingJobEarlyStoppingType: FormControl<TrainingJobEarlyStoppingType | null | undefined>,
		RandomSeed: FormControl<number | null | undefined>,
	}
	export function CreateHyperParameterTuningJobConfigFormGroup() {
		return new FormGroup<HyperParameterTuningJobConfigFormProperties>({
			Strategy: new FormControl<HyperParameterTuningJobStrategyType | null | undefined>(undefined, [Validators.required]),
			TrainingJobEarlyStoppingType: new FormControl<TrainingJobEarlyStoppingType | null | undefined>(undefined),
			RandomSeed: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The strategy hyperparameter tuning uses to find the best combination of hyperparameters for your model.  */
	export enum HyperParameterTuningJobStrategyType { Bayesian = 'Bayesian', Random = 'Random', Hyperband = 'Hyperband', Grid = 'Grid' }


	/** The configuration for a training job launched by a hyperparameter tuning job. Choose <code>Bayesian</code> for Bayesian optimization, and <code>Random</code> for random search optimization. For more advanced use cases, use <code>Hyperband</code>, which evaluates objective metrics for training jobs after every epoch. For more information about strategies, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How Hyperparameter Tuning Works</a>. */
	export interface HyperParameterTuningJobStrategyConfig {
		HyperbandStrategyConfig?: HyperbandStrategyConfig;
	}

	/** The configuration for a training job launched by a hyperparameter tuning job. Choose <code>Bayesian</code> for Bayesian optimization, and <code>Random</code> for random search optimization. For more advanced use cases, use <code>Hyperband</code>, which evaluates objective metrics for training jobs after every epoch. For more information about strategies, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html">How Hyperparameter Tuning Works</a>. */
	export interface HyperParameterTuningJobStrategyConfigFormProperties {
	}
	export function CreateHyperParameterTuningJobStrategyConfigFormGroup() {
		return new FormGroup<HyperParameterTuningJobStrategyConfigFormProperties>({
		});

	}


	/** The configuration for <code>Hyperband</code>, a multi-fidelity based hyperparameter tuning strategy. <code>Hyperband</code> uses the final and intermediate results of a training job to dynamically allocate resources to utilized hyperparameter configurations while automatically stopping under-performing configurations. This parameter should be provided only if <code>Hyperband</code> is selected as the <code>StrategyConfig</code> under the <code>HyperParameterTuningJobConfig</code> API. */
	export interface HyperbandStrategyConfig {
		MinResource?: number | null;
		MaxResource?: number | null;
	}

	/** The configuration for <code>Hyperband</code>, a multi-fidelity based hyperparameter tuning strategy. <code>Hyperband</code> uses the final and intermediate results of a training job to dynamically allocate resources to utilized hyperparameter configurations while automatically stopping under-performing configurations. This parameter should be provided only if <code>Hyperband</code> is selected as the <code>StrategyConfig</code> under the <code>HyperParameterTuningJobConfig</code> API. */
	export interface HyperbandStrategyConfigFormProperties {
		MinResource: FormControl<number | null | undefined>,
		MaxResource: FormControl<number | null | undefined>,
	}
	export function CreateHyperbandStrategyConfigFormGroup() {
		return new FormGroup<HyperbandStrategyConfigFormProperties>({
			MinResource: new FormControl<number | null | undefined>(undefined),
			MaxResource: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Specifies the maximum number of training jobs and parallel training jobs that a hyperparameter tuning job can launch. */
	export interface ResourceLimits {
		MaxNumberOfTrainingJobs?: number | null;

		/** Required */
		MaxParallelTrainingJobs: number;
		MaxRuntimeInSeconds?: number | null;
	}

	/** Specifies the maximum number of training jobs and parallel training jobs that a hyperparameter tuning job can launch. */
	export interface ResourceLimitsFormProperties {
		MaxNumberOfTrainingJobs: FormControl<number | null | undefined>,

		/** Required */
		MaxParallelTrainingJobs: FormControl<number | null | undefined>,
		MaxRuntimeInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateResourceLimitsFormGroup() {
		return new FormGroup<ResourceLimitsFormProperties>({
			MaxNumberOfTrainingJobs: new FormControl<number | null | undefined>(undefined),
			MaxParallelTrainingJobs: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			MaxRuntimeInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note> */
	export interface ParameterRanges {
		IntegerParameterRanges?: Array<IntegerParameterRange>;
		ContinuousParameterRanges?: Array<ContinuousParameterRange>;
		CategoricalParameterRanges?: Array<CategoricalParameterRange>;
		AutoParameters?: Array<AutoParameter>;
	}

	/** <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note> */
	export interface ParameterRangesFormProperties {
	}
	export function CreateParameterRangesFormGroup() {
		return new FormGroup<ParameterRangesFormProperties>({
		});

	}


	/** For a hyperparameter of the integer type, specifies the range that a hyperparameter tuning job searches. */
	export interface IntegerParameterRange {

		/** Required */
		Name: string;

		/** Required */
		MinValue: string;

		/** Required */
		MaxValue: string;
		ScalingType?: HyperParameterScalingType;
	}

	/** For a hyperparameter of the integer type, specifies the range that a hyperparameter tuning job searches. */
	export interface IntegerParameterRangeFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		MinValue: FormControl<string | null | undefined>,

		/** Required */
		MaxValue: FormControl<string | null | undefined>,
		ScalingType: FormControl<HyperParameterScalingType | null | undefined>,
	}
	export function CreateIntegerParameterRangeFormGroup() {
		return new FormGroup<IntegerParameterRangeFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MinValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ScalingType: new FormControl<HyperParameterScalingType | null | undefined>(undefined),
		});

	}

	export enum HyperParameterScalingType { Auto = 'Auto', Linear = 'Linear', Logarithmic = 'Logarithmic', ReverseLogarithmic = 'ReverseLogarithmic' }


	/** A list of continuous hyperparameters to tune. */
	export interface ContinuousParameterRange {

		/** Required */
		Name: string;

		/** Required */
		MinValue: string;

		/** Required */
		MaxValue: string;
		ScalingType?: HyperParameterScalingType;
	}

	/** A list of continuous hyperparameters to tune. */
	export interface ContinuousParameterRangeFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		MinValue: FormControl<string | null | undefined>,

		/** Required */
		MaxValue: FormControl<string | null | undefined>,
		ScalingType: FormControl<HyperParameterScalingType | null | undefined>,
	}
	export function CreateContinuousParameterRangeFormGroup() {
		return new FormGroup<ContinuousParameterRangeFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MinValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ScalingType: new FormControl<HyperParameterScalingType | null | undefined>(undefined),
		});

	}


	/** A list of categorical hyperparameters to tune. */
	export interface CategoricalParameterRange {

		/** Required */
		Name: string;

		/** Required */
		Values: Array<string>;
	}

	/** A list of categorical hyperparameters to tune. */
	export interface CategoricalParameterRangeFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateCategoricalParameterRangeFormGroup() {
		return new FormGroup<CategoricalParameterRangeFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The name and an example value of the hyperparameter that you want to use in Autotune. If Automatic model tuning (AMT) determines that your hyperparameter is eligible for Autotune, an optimal hyperparameter range is selected for you. */
	export interface AutoParameter {

		/** Required */
		Name: string;

		/** Required */
		ValueHint: string;
	}

	/** The name and an example value of the hyperparameter that you want to use in Autotune. If Automatic model tuning (AMT) determines that your hyperparameter is eligible for Autotune, an optimal hyperparameter range is selected for you. */
	export interface AutoParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		ValueHint: FormControl<string | null | undefined>,
	}
	export function CreateAutoParameterFormGroup() {
		return new FormGroup<AutoParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ValueHint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TrainingJobEarlyStoppingType { Off = 'Off', Auto = 'Auto' }


	/** The job completion criteria. */
	export interface TuningJobCompletionCriteria {
		TargetObjectiveMetricValue?: number;
		BestObjectiveNotImproving?: BestObjectiveNotImproving;
		ConvergenceDetected?: ConvergenceDetected;
	}

	/** The job completion criteria. */
	export interface TuningJobCompletionCriteriaFormProperties {
		TargetObjectiveMetricValue: FormControl<number | null | undefined>,
	}
	export function CreateTuningJobCompletionCriteriaFormGroup() {
		return new FormGroup<TuningJobCompletionCriteriaFormProperties>({
			TargetObjectiveMetricValue: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A structure that keeps track of which training jobs launched by your hyperparameter tuning job are not improving model performance as evaluated against an objective function. */
	export interface BestObjectiveNotImproving {
		MaxNumberOfTrainingJobsNotImproving?: number | null;
	}

	/** A structure that keeps track of which training jobs launched by your hyperparameter tuning job are not improving model performance as evaluated against an objective function. */
	export interface BestObjectiveNotImprovingFormProperties {
		MaxNumberOfTrainingJobsNotImproving: FormControl<number | null | undefined>,
	}
	export function CreateBestObjectiveNotImprovingFormGroup() {
		return new FormGroup<BestObjectiveNotImprovingFormProperties>({
			MaxNumberOfTrainingJobsNotImproving: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A flag to indicating that automatic model tuning (AMT) has detected model convergence, defined as a lack of significant improvement (1% or less) against an objective metric. */
	export interface ConvergenceDetected {
		CompleteOnConvergence?: CompleteOnConvergence;
	}

	/** A flag to indicating that automatic model tuning (AMT) has detected model convergence, defined as a lack of significant improvement (1% or less) against an objective metric. */
	export interface ConvergenceDetectedFormProperties {
		CompleteOnConvergence: FormControl<CompleteOnConvergence | null | undefined>,
	}
	export function CreateConvergenceDetectedFormGroup() {
		return new FormGroup<ConvergenceDetectedFormProperties>({
			CompleteOnConvergence: new FormControl<CompleteOnConvergence | null | undefined>(undefined),
		});

	}

	export enum CompleteOnConvergence { Disabled = 'Disabled', Enabled = 'Enabled' }


	/** Defines the training jobs launched by a hyperparameter tuning job. */
	export interface HyperParameterTrainingJobDefinition {
		DefinitionName?: string;

		/** Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the <code>Type</code> parameter. */
		TuningObjective?: HyperParameterTuningJobObjective;

		/** <p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note> */
		HyperParameterRanges?: ParameterRanges;
		StaticHyperParameters?: HyperParameters;

		/** Required */
		AlgorithmSpecification: HyperParameterAlgorithmSpecification;

		/** Required */
		RoleArn: string;
		InputDataConfig?: Array<Channel>;
		VpcConfig?: VpcConfig;

		/** Required */
		OutputDataConfig: OutputDataConfig;
		ResourceConfig?: ResourceConfig;

		/** Required */
		StoppingCondition: StoppingCondition;
		EnableNetworkIsolation?: boolean | null;
		EnableInterContainerTrafficEncryption?: boolean | null;
		EnableManagedSpotTraining?: boolean | null;

		/** Contains information about the output location for managed spot training checkpoint data. */
		CheckpointConfig?: CheckpointConfig;
		RetryStrategy?: RetryStrategy;
		HyperParameterTuningResourceConfig?: HyperParameterTuningResourceConfig;
		Environment?: HyperParameterTrainingJobEnvironmentMap;
	}

	/** Defines the training jobs launched by a hyperparameter tuning job. */
	export interface HyperParameterTrainingJobDefinitionFormProperties {
		DefinitionName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
		EnableInterContainerTrafficEncryption: FormControl<boolean | null | undefined>,
		EnableManagedSpotTraining: FormControl<boolean | null | undefined>,
	}
	export function CreateHyperParameterTrainingJobDefinitionFormGroup() {
		return new FormGroup<HyperParameterTrainingJobDefinitionFormProperties>({
			DefinitionName: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
			EnableInterContainerTrafficEncryption: new FormControl<boolean | null | undefined>(undefined),
			EnableManagedSpotTraining: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Specifies which training algorithm to use for training jobs that a hyperparameter tuning job launches and the metrics to monitor. */
	export interface HyperParameterAlgorithmSpecification {
		TrainingImage?: string;

		/**
		 * <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		 * Required
		 */
		TrainingInputMode: TrainingInputMode;
		AlgorithmName?: string;
		MetricDefinitions?: Array<MetricDefinition>;
	}

	/** Specifies which training algorithm to use for training jobs that a hyperparameter tuning job launches and the metrics to monitor. */
	export interface HyperParameterAlgorithmSpecificationFormProperties {
		TrainingImage: FormControl<string | null | undefined>,

		/**
		 * <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		 * Required
		 */
		TrainingInputMode: FormControl<TrainingInputMode | null | undefined>,
		AlgorithmName: FormControl<string | null | undefined>,
	}
	export function CreateHyperParameterAlgorithmSpecificationFormGroup() {
		return new FormGroup<HyperParameterAlgorithmSpecificationFormProperties>({
			TrainingImage: new FormControl<string | null | undefined>(undefined),
			TrainingInputMode: new FormControl<TrainingInputMode | null | undefined>(undefined, [Validators.required]),
			AlgorithmName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains information about the output location for managed spot training checkpoint data.  */
	export interface CheckpointConfig {

		/** Required */
		S3Uri: string;
		LocalPath?: string;
	}

	/** Contains information about the output location for managed spot training checkpoint data.  */
	export interface CheckpointConfigFormProperties {

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
		LocalPath: FormControl<string | null | undefined>,
	}
	export function CreateCheckpointConfigFormGroup() {
		return new FormGroup<CheckpointConfigFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The retry strategy to use when a training job fails due to an <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as part of the <code>CreateTrainingJob</code> and <code>CreateHyperParameterTuningJob</code> requests. You can add the <code>StoppingCondition</code> parameter to the request to limit the training time for the complete job. */
	export interface RetryStrategy {

		/** Required */
		MaximumRetryAttempts: number;
	}

	/** The retry strategy to use when a training job fails due to an <code>InternalServerError</code>. <code>RetryStrategy</code> is specified as part of the <code>CreateTrainingJob</code> and <code>CreateHyperParameterTuningJob</code> requests. You can add the <code>StoppingCondition</code> parameter to the request to limit the training time for the complete job. */
	export interface RetryStrategyFormProperties {

		/** Required */
		MaximumRetryAttempts: FormControl<number | null | undefined>,
	}
	export function CreateRetryStrategyFormGroup() {
		return new FormGroup<RetryStrategyFormProperties>({
			MaximumRetryAttempts: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The configuration of resources, including compute instances and storage volumes for use in training jobs launched by hyperparameter tuning jobs. <code>HyperParameterTuningResourceConfig</code> is similar to <code>ResourceConfig</code>, but has the additional <code>InstanceConfigs</code> and <code>AllocationStrategy</code> fields to allow for flexible instance management. Specify one or more instance types, count, and the allocation strategy for instance selection.</p> <note> <p> <code>HyperParameterTuningResourceConfig</code> supports the capabilities of <code>ResourceConfig</code> with the exception of <code>KeepAlivePeriodInSeconds</code>. Hyperparameter tuning jobs use warm pools by default, which reuse clusters between training jobs.</p> </note> */
	export interface HyperParameterTuningResourceConfig {
		InstanceType?: TrainingInstanceType;
		InstanceCount?: number | null;
		VolumeSizeInGB?: number | null;
		VolumeKmsKeyId?: string;
		AllocationStrategy?: HyperParameterTuningAllocationStrategy;
		InstanceConfigs?: Array<HyperParameterTuningInstanceConfig>;
	}

	/** <p>The configuration of resources, including compute instances and storage volumes for use in training jobs launched by hyperparameter tuning jobs. <code>HyperParameterTuningResourceConfig</code> is similar to <code>ResourceConfig</code>, but has the additional <code>InstanceConfigs</code> and <code>AllocationStrategy</code> fields to allow for flexible instance management. Specify one or more instance types, count, and the allocation strategy for instance selection.</p> <note> <p> <code>HyperParameterTuningResourceConfig</code> supports the capabilities of <code>ResourceConfig</code> with the exception of <code>KeepAlivePeriodInSeconds</code>. Hyperparameter tuning jobs use warm pools by default, which reuse clusters between training jobs.</p> </note> */
	export interface HyperParameterTuningResourceConfigFormProperties {
		InstanceType: FormControl<TrainingInstanceType | null | undefined>,
		InstanceCount: FormControl<number | null | undefined>,
		VolumeSizeInGB: FormControl<number | null | undefined>,
		VolumeKmsKeyId: FormControl<string | null | undefined>,
		AllocationStrategy: FormControl<HyperParameterTuningAllocationStrategy | null | undefined>,
	}
	export function CreateHyperParameterTuningResourceConfigFormGroup() {
		return new FormGroup<HyperParameterTuningResourceConfigFormProperties>({
			InstanceType: new FormControl<TrainingInstanceType | null | undefined>(undefined),
			InstanceCount: new FormControl<number | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined),
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
			AllocationStrategy: new FormControl<HyperParameterTuningAllocationStrategy | null | undefined>(undefined),
		});

	}

	export enum HyperParameterTuningAllocationStrategy { Prioritized = 'Prioritized' }


	/** The configuration for hyperparameter tuning resources for use in training jobs launched by the tuning job. These resources include compute instances and storage volumes. Specify one or more compute instance configurations and allocation strategies to select resources (optional). */
	export interface HyperParameterTuningInstanceConfig {

		/** Required */
		InstanceType: TrainingInstanceType;

		/** Required */
		InstanceCount: number;

		/** Required */
		VolumeSizeInGB: number;
	}

	/** The configuration for hyperparameter tuning resources for use in training jobs launched by the tuning job. These resources include compute instances and storage volumes. Specify one or more compute instance configurations and allocation strategies to select resources (optional). */
	export interface HyperParameterTuningInstanceConfigFormProperties {

		/** Required */
		InstanceType: FormControl<TrainingInstanceType | null | undefined>,

		/** Required */
		InstanceCount: FormControl<number | null | undefined>,

		/** Required */
		VolumeSizeInGB: FormControl<number | null | undefined>,
	}
	export function CreateHyperParameterTuningInstanceConfigFormGroup() {
		return new FormGroup<HyperParameterTuningInstanceConfigFormProperties>({
			InstanceType: new FormControl<TrainingInstanceType | null | undefined>(undefined, [Validators.required]),
			InstanceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface HyperParameterTrainingJobEnvironmentMap {
	}
	export interface HyperParameterTrainingJobEnvironmentMapFormProperties {
	}
	export function CreateHyperParameterTrainingJobEnvironmentMapFormGroup() {
		return new FormGroup<HyperParameterTrainingJobEnvironmentMapFormProperties>({
		});

	}


	/** <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p> <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note> <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p> </note> */
	export interface HyperParameterTuningJobWarmStartConfig {

		/** Required */
		ParentHyperParameterTuningJobs: Array<ParentHyperParameterTuningJob>;

		/** Required */
		WarmStartType: HyperParameterTuningJobWarmStartType;
	}

	/** <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p> <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note> <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p> </note> */
	export interface HyperParameterTuningJobWarmStartConfigFormProperties {

		/** Required */
		WarmStartType: FormControl<HyperParameterTuningJobWarmStartType | null | undefined>,
	}
	export function CreateHyperParameterTuningJobWarmStartConfigFormGroup() {
		return new FormGroup<HyperParameterTuningJobWarmStartConfigFormProperties>({
			WarmStartType: new FormControl<HyperParameterTuningJobWarmStartType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A previously completed or stopped hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job. */
	export interface ParentHyperParameterTuningJob {
		HyperParameterTuningJobName?: string;
	}

	/** A previously completed or stopped hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job. */
	export interface ParentHyperParameterTuningJobFormProperties {
		HyperParameterTuningJobName: FormControl<string | null | undefined>,
	}
	export function CreateParentHyperParameterTuningJobFormGroup() {
		return new FormGroup<ParentHyperParameterTuningJobFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum HyperParameterTuningJobWarmStartType { IdenticalDataAndAlgorithm = 'IdenticalDataAndAlgorithm', TransferLearning = 'TransferLearning' }


	/** <p>A flag to indicate if you want to use Autotune to automatically find optimal values for the following fields:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges">ParameterRanges</a>: The names and ranges of parameters that a hyperparameter tuning job can optimize.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html">ResourceLimits</a>: The maximum resources that can be used for a training job. These resources include the maximum number of training jobs, the maximum runtime of a tuning job, and the maximum number of training jobs to run at the same time.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType">TrainingJobEarlyStoppingType</a>: A flag that specifies whether or not to use early stopping for training jobs launched by a hyperparameter tuning job.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy">RetryStrategy</a>: The number of times to retry a training job.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">Strategy</a>: Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training jobs that it launches.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html">ConvergenceDetected</a>: A flag to indicate that Automatic model tuning (AMT) has detected model convergence.</p> </li> </ul> */
	export interface Autotune {

		/** Required */
		Mode: AutotuneMode;
	}

	/** <p>A flag to indicate if you want to use Autotune to automatically find optimal values for the following fields:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges">ParameterRanges</a>: The names and ranges of parameters that a hyperparameter tuning job can optimize.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html">ResourceLimits</a>: The maximum resources that can be used for a training job. These resources include the maximum number of training jobs, the maximum runtime of a tuning job, and the maximum number of training jobs to run at the same time.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType">TrainingJobEarlyStoppingType</a>: A flag that specifies whether or not to use early stopping for training jobs launched by a hyperparameter tuning job.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy">RetryStrategy</a>: The number of times to retry a training job.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">Strategy</a>: Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training jobs that it launches.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html">ConvergenceDetected</a>: A flag to indicate that Automatic model tuning (AMT) has detected model convergence.</p> </li> </ul> */
	export interface AutotuneFormProperties {

		/** Required */
		Mode: FormControl<AutotuneMode | null | undefined>,
	}
	export function CreateAutotuneFormGroup() {
		return new FormGroup<AutotuneFormProperties>({
			Mode: new FormControl<AutotuneMode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum AutotuneMode { Enabled = 'Enabled' }

	export interface CreateImageResponse {
		ImageArn?: string;
	}
	export interface CreateImageResponseFormProperties {
		ImageArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateImageResponseFormGroup() {
		return new FormGroup<CreateImageResponseFormProperties>({
			ImageArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateImageRequest {
		Description?: string;
		DisplayName?: string;

		/** Required */
		ImageName: string;

		/** Required */
		RoleArn: string;
		Tags?: Array<Tag>;
	}
	export interface CreateImageRequestFormProperties {
		Description: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,

		/** Required */
		ImageName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateImageRequestFormGroup() {
		return new FormGroup<CreateImageRequestFormProperties>({
			Description: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateImageVersionResponse {
		ImageVersionArn?: string;
	}
	export interface CreateImageVersionResponseFormProperties {
		ImageVersionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateImageVersionResponseFormGroup() {
		return new FormGroup<CreateImageVersionResponseFormProperties>({
			ImageVersionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateImageVersionRequest {

		/** Required */
		BaseImage: string;

		/** Required */
		ClientToken: string;

		/** Required */
		ImageName: string;
		Aliases?: Array<string>;
		VendorGuidance?: VendorGuidance;
		JobType?: JobType;
		MLFramework?: string;
		ProgrammingLang?: string;
		Processor?: Processor;
		Horovod?: boolean | null;
		ReleaseNotes?: string;
	}
	export interface CreateImageVersionRequestFormProperties {

		/** Required */
		BaseImage: FormControl<string | null | undefined>,

		/** Required */
		ClientToken: FormControl<string | null | undefined>,

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		VendorGuidance: FormControl<VendorGuidance | null | undefined>,
		JobType: FormControl<JobType | null | undefined>,
		MLFramework: FormControl<string | null | undefined>,
		ProgrammingLang: FormControl<string | null | undefined>,
		Processor: FormControl<Processor | null | undefined>,
		Horovod: FormControl<boolean | null | undefined>,
		ReleaseNotes: FormControl<string | null | undefined>,
	}
	export function CreateCreateImageVersionRequestFormGroup() {
		return new FormGroup<CreateImageVersionRequestFormProperties>({
			BaseImage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VendorGuidance: new FormControl<VendorGuidance | null | undefined>(undefined),
			JobType: new FormControl<JobType | null | undefined>(undefined),
			MLFramework: new FormControl<string | null | undefined>(undefined),
			ProgrammingLang: new FormControl<string | null | undefined>(undefined),
			Processor: new FormControl<Processor | null | undefined>(undefined),
			Horovod: new FormControl<boolean | null | undefined>(undefined),
			ReleaseNotes: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum VendorGuidance { NOT_PROVIDED = 'NOT_PROVIDED', STABLE = 'STABLE', TO_BE_ARCHIVED = 'TO_BE_ARCHIVED', ARCHIVED = 'ARCHIVED' }

	export enum JobType { TRAINING = 'TRAINING', INFERENCE = 'INFERENCE', NOTEBOOK_KERNEL = 'NOTEBOOK_KERNEL' }

	export enum Processor { CPU = 'CPU', GPU = 'GPU' }

	export interface CreateInferenceExperimentResponse {

		/** Required */
		InferenceExperimentArn: string;
	}
	export interface CreateInferenceExperimentResponseFormProperties {

		/** Required */
		InferenceExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateInferenceExperimentResponseFormGroup() {
		return new FormGroup<CreateInferenceExperimentResponseFormProperties>({
			InferenceExperimentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateInferenceExperimentRequest {

		/** Required */
		Name: string;

		/** Required */
		Type: InferenceExperimentType;
		Schedule?: InferenceExperimentSchedule;
		Description?: string;

		/** Required */
		RoleArn: string;

		/** Required */
		EndpointName: string;

		/** Required */
		ModelVariants: Array<ModelVariantConfig>;
		DataStorageConfig?: InferenceExperimentDataStorageConfig;

		/** Required */
		ShadowModeConfig: ShadowModeConfig;
		KmsKey?: string;
		Tags?: Array<Tag>;
	}
	export interface CreateInferenceExperimentRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<InferenceExperimentType | null | undefined>,
		Description: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,

		/** Required */
		EndpointName: FormControl<string | null | undefined>,
		KmsKey: FormControl<string | null | undefined>,
	}
	export function CreateCreateInferenceExperimentRequestFormGroup() {
		return new FormGroup<CreateInferenceExperimentRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<InferenceExperimentType | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKey: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum InferenceExperimentType { ShadowMode = 'ShadowMode' }


	/** <p>The start and end times of an inference experiment.</p> <p>The maximum duration that you can set for an inference experiment is 30 days.</p> */
	export interface InferenceExperimentSchedule {
		StartTime?: Date;
		EndTime?: Date;
	}

	/** <p>The start and end times of an inference experiment.</p> <p>The maximum duration that you can set for an inference experiment is 30 days.</p> */
	export interface InferenceExperimentScheduleFormProperties {
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
	}
	export function CreateInferenceExperimentScheduleFormGroup() {
		return new FormGroup<InferenceExperimentScheduleFormProperties>({
			StartTime: new FormControl<Date | null | undefined>(undefined),
			EndTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Contains information about the deployment options of a model. */
	export interface ModelVariantConfig {

		/** Required */
		ModelName: string;

		/** Required */
		VariantName: string;

		/** Required */
		InfrastructureConfig: ModelInfrastructureConfig;
	}

	/** Contains information about the deployment options of a model. */
	export interface ModelVariantConfigFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		VariantName: FormControl<string | null | undefined>,
	}
	export function CreateModelVariantConfigFormGroup() {
		return new FormGroup<ModelVariantConfigFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for the infrastructure that the model will be deployed to. */
	export interface ModelInfrastructureConfig {

		/** Required */
		InfrastructureType: ModelInfrastructureType;

		/** Required */
		RealTimeInferenceConfig: RealTimeInferenceConfig;
	}

	/** The configuration for the infrastructure that the model will be deployed to. */
	export interface ModelInfrastructureConfigFormProperties {

		/** Required */
		InfrastructureType: FormControl<ModelInfrastructureType | null | undefined>,
	}
	export function CreateModelInfrastructureConfigFormGroup() {
		return new FormGroup<ModelInfrastructureConfigFormProperties>({
			InfrastructureType: new FormControl<ModelInfrastructureType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ModelInfrastructureType { RealTimeInference = 'RealTimeInference' }


	/** The infrastructure configuration for deploying the model to a real-time inference endpoint. */
	export interface RealTimeInferenceConfig {

		/** Required */
		InstanceType: InstanceType;

		/** Required */
		InstanceCount: number;
	}

	/** The infrastructure configuration for deploying the model to a real-time inference endpoint. */
	export interface RealTimeInferenceConfigFormProperties {

		/** Required */
		InstanceType: FormControl<InstanceType | null | undefined>,

		/** Required */
		InstanceCount: FormControl<number | null | undefined>,
	}
	export function CreateRealTimeInferenceConfigFormGroup() {
		return new FormGroup<RealTimeInferenceConfigFormProperties>({
			InstanceType: new FormControl<InstanceType | null | undefined>(undefined, [Validators.required]),
			InstanceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum InstanceType { 'ml.t2.medium' = 'ml.t2.medium', 'ml.t2.large' = 'ml.t2.large', 'ml.t2.xlarge' = 'ml.t2.xlarge', 'ml.t2.2xlarge' = 'ml.t2.2xlarge', 'ml.t3.medium' = 'ml.t3.medium', 'ml.t3.large' = 'ml.t3.large', 'ml.t3.xlarge' = 'ml.t3.xlarge', 'ml.t3.2xlarge' = 'ml.t3.2xlarge', 'ml.m4.xlarge' = 'ml.m4.xlarge', 'ml.m4.2xlarge' = 'ml.m4.2xlarge', 'ml.m4.4xlarge' = 'ml.m4.4xlarge', 'ml.m4.10xlarge' = 'ml.m4.10xlarge', 'ml.m4.16xlarge' = 'ml.m4.16xlarge', 'ml.m5.xlarge' = 'ml.m5.xlarge', 'ml.m5.2xlarge' = 'ml.m5.2xlarge', 'ml.m5.4xlarge' = 'ml.m5.4xlarge', 'ml.m5.12xlarge' = 'ml.m5.12xlarge', 'ml.m5.24xlarge' = 'ml.m5.24xlarge', 'ml.m5d.large' = 'ml.m5d.large', 'ml.m5d.xlarge' = 'ml.m5d.xlarge', 'ml.m5d.2xlarge' = 'ml.m5d.2xlarge', 'ml.m5d.4xlarge' = 'ml.m5d.4xlarge', 'ml.m5d.8xlarge' = 'ml.m5d.8xlarge', 'ml.m5d.12xlarge' = 'ml.m5d.12xlarge', 'ml.m5d.16xlarge' = 'ml.m5d.16xlarge', 'ml.m5d.24xlarge' = 'ml.m5d.24xlarge', 'ml.c4.xlarge' = 'ml.c4.xlarge', 'ml.c4.2xlarge' = 'ml.c4.2xlarge', 'ml.c4.4xlarge' = 'ml.c4.4xlarge', 'ml.c4.8xlarge' = 'ml.c4.8xlarge', 'ml.c5.xlarge' = 'ml.c5.xlarge', 'ml.c5.2xlarge' = 'ml.c5.2xlarge', 'ml.c5.4xlarge' = 'ml.c5.4xlarge', 'ml.c5.9xlarge' = 'ml.c5.9xlarge', 'ml.c5.18xlarge' = 'ml.c5.18xlarge', 'ml.c5d.xlarge' = 'ml.c5d.xlarge', 'ml.c5d.2xlarge' = 'ml.c5d.2xlarge', 'ml.c5d.4xlarge' = 'ml.c5d.4xlarge', 'ml.c5d.9xlarge' = 'ml.c5d.9xlarge', 'ml.c5d.18xlarge' = 'ml.c5d.18xlarge', 'ml.p2.xlarge' = 'ml.p2.xlarge', 'ml.p2.8xlarge' = 'ml.p2.8xlarge', 'ml.p2.16xlarge' = 'ml.p2.16xlarge', 'ml.p3.2xlarge' = 'ml.p3.2xlarge', 'ml.p3.8xlarge' = 'ml.p3.8xlarge', 'ml.p3.16xlarge' = 'ml.p3.16xlarge', 'ml.p3dn.24xlarge' = 'ml.p3dn.24xlarge', 'ml.g4dn.xlarge' = 'ml.g4dn.xlarge', 'ml.g4dn.2xlarge' = 'ml.g4dn.2xlarge', 'ml.g4dn.4xlarge' = 'ml.g4dn.4xlarge', 'ml.g4dn.8xlarge' = 'ml.g4dn.8xlarge', 'ml.g4dn.12xlarge' = 'ml.g4dn.12xlarge', 'ml.g4dn.16xlarge' = 'ml.g4dn.16xlarge', 'ml.r5.large' = 'ml.r5.large', 'ml.r5.xlarge' = 'ml.r5.xlarge', 'ml.r5.2xlarge' = 'ml.r5.2xlarge', 'ml.r5.4xlarge' = 'ml.r5.4xlarge', 'ml.r5.8xlarge' = 'ml.r5.8xlarge', 'ml.r5.12xlarge' = 'ml.r5.12xlarge', 'ml.r5.16xlarge' = 'ml.r5.16xlarge', 'ml.r5.24xlarge' = 'ml.r5.24xlarge', 'ml.g5.xlarge' = 'ml.g5.xlarge', 'ml.g5.2xlarge' = 'ml.g5.2xlarge', 'ml.g5.4xlarge' = 'ml.g5.4xlarge', 'ml.g5.8xlarge' = 'ml.g5.8xlarge', 'ml.g5.16xlarge' = 'ml.g5.16xlarge', 'ml.g5.12xlarge' = 'ml.g5.12xlarge', 'ml.g5.24xlarge' = 'ml.g5.24xlarge', 'ml.g5.48xlarge' = 'ml.g5.48xlarge', 'ml.inf1.xlarge' = 'ml.inf1.xlarge', 'ml.inf1.2xlarge' = 'ml.inf1.2xlarge', 'ml.inf1.6xlarge' = 'ml.inf1.6xlarge', 'ml.inf1.24xlarge' = 'ml.inf1.24xlarge', 'ml.p4d.24xlarge' = 'ml.p4d.24xlarge', 'ml.p4de.24xlarge' = 'ml.p4de.24xlarge' }


	/** The Amazon S3 location and configuration for storing inference request and response data. */
	export interface InferenceExperimentDataStorageConfig {

		/** Required */
		Destination: string;
		KmsKey?: string;

		/** Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data. */
		ContentType?: CaptureContentTypeHeader;
	}

	/** The Amazon S3 location and configuration for storing inference request and response data. */
	export interface InferenceExperimentDataStorageConfigFormProperties {

		/** Required */
		Destination: FormControl<string | null | undefined>,
		KmsKey: FormControl<string | null | undefined>,
	}
	export function CreateInferenceExperimentDataStorageConfigFormGroup() {
		return new FormGroup<InferenceExperimentDataStorageConfigFormProperties>({
			Destination: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKey: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**  The configuration of <code>ShadowMode</code> inference experiment type, which specifies a production variant to take all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also specifies the percentage of requests that Amazon SageMaker replicates.  */
	export interface ShadowModeConfig {

		/** Required */
		SourceModelVariantName: string;

		/** Required */
		ShadowModelVariants: Array<ShadowModelVariantConfig>;
	}

	/**  The configuration of <code>ShadowMode</code> inference experiment type, which specifies a production variant to take all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also specifies the percentage of requests that Amazon SageMaker replicates.  */
	export interface ShadowModeConfigFormProperties {

		/** Required */
		SourceModelVariantName: FormControl<string | null | undefined>,
	}
	export function CreateShadowModeConfigFormGroup() {
		return new FormGroup<ShadowModeConfigFormProperties>({
			SourceModelVariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The name and sampling percentage of a shadow variant. */
	export interface ShadowModelVariantConfig {

		/** Required */
		ShadowModelVariantName: string;

		/** Required */
		SamplingPercentage: number;
	}

	/** The name and sampling percentage of a shadow variant. */
	export interface ShadowModelVariantConfigFormProperties {

		/** Required */
		ShadowModelVariantName: FormControl<string | null | undefined>,

		/** Required */
		SamplingPercentage: FormControl<number | null | undefined>,
	}
	export function CreateShadowModelVariantConfigFormGroup() {
		return new FormGroup<ShadowModelVariantConfigFormProperties>({
			ShadowModelVariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SamplingPercentage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateInferenceRecommendationsJobResponse {

		/** Required */
		JobArn: string;
	}
	export interface CreateInferenceRecommendationsJobResponseFormProperties {

		/** Required */
		JobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateInferenceRecommendationsJobResponseFormGroup() {
		return new FormGroup<CreateInferenceRecommendationsJobResponseFormProperties>({
			JobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateInferenceRecommendationsJobRequest {

		/** Required */
		JobName: string;

		/** Required */
		JobType: RecommendationJobType;

		/** Required */
		RoleArn: string;

		/** Required */
		InputConfig: RecommendationJobInputConfig;
		JobDescription?: string;
		StoppingConditions?: RecommendationJobStoppingConditions;
		OutputConfig?: RecommendationJobOutputConfig;
		Tags?: Array<Tag>;
	}
	export interface CreateInferenceRecommendationsJobRequestFormProperties {

		/** Required */
		JobName: FormControl<string | null | undefined>,

		/** Required */
		JobType: FormControl<RecommendationJobType | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		JobDescription: FormControl<string | null | undefined>,
	}
	export function CreateCreateInferenceRecommendationsJobRequestFormGroup() {
		return new FormGroup<CreateInferenceRecommendationsJobRequestFormProperties>({
			JobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobType: new FormControl<RecommendationJobType | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobDescription: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RecommendationJobType { Default = 'Default', Advanced = 'Advanced' }


	/** The input configuration of the recommendation job. */
	export interface RecommendationJobInputConfig {
		ModelPackageVersionArn?: string;
		JobDurationInSeconds?: number | null;
		TrafficPattern?: TrafficPattern;
		ResourceLimit?: RecommendationJobResourceLimit;
		EndpointConfigurations?: Array<EndpointInputConfiguration>;
		VolumeKmsKeyId?: string;
		ContainerConfig?: RecommendationJobContainerConfig;
		Endpoints?: Array<EndpointInfo>;
		VpcConfig?: RecommendationJobVpcConfig;
		ModelName?: string;
	}

	/** The input configuration of the recommendation job. */
	export interface RecommendationJobInputConfigFormProperties {
		ModelPackageVersionArn: FormControl<string | null | undefined>,
		JobDurationInSeconds: FormControl<number | null | undefined>,
		VolumeKmsKeyId: FormControl<string | null | undefined>,
		ModelName: FormControl<string | null | undefined>,
	}
	export function CreateRecommendationJobInputConfigFormGroup() {
		return new FormGroup<RecommendationJobInputConfigFormProperties>({
			ModelPackageVersionArn: new FormControl<string | null | undefined>(undefined),
			JobDurationInSeconds: new FormControl<number | null | undefined>(undefined),
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
			ModelName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Defines the traffic pattern of the load test. */
	export interface TrafficPattern {
		TrafficType?: TrafficType;
		Phases?: Array<Phase>;
		Stairs?: Stairs;
	}

	/** Defines the traffic pattern of the load test. */
	export interface TrafficPatternFormProperties {
		TrafficType: FormControl<TrafficType | null | undefined>,
	}
	export function CreateTrafficPatternFormGroup() {
		return new FormGroup<TrafficPatternFormProperties>({
			TrafficType: new FormControl<TrafficType | null | undefined>(undefined),
		});

	}

	export enum TrafficType { PHASES = 'PHASES', STAIRS = 'STAIRS' }


	/** Defines the traffic pattern. */
	export interface Phase {
		InitialNumberOfUsers?: number | null;
		SpawnRate?: number | null;
		DurationInSeconds?: number | null;
	}

	/** Defines the traffic pattern. */
	export interface PhaseFormProperties {
		InitialNumberOfUsers: FormControl<number | null | undefined>,
		SpawnRate: FormControl<number | null | undefined>,
		DurationInSeconds: FormControl<number | null | undefined>,
	}
	export function CreatePhaseFormGroup() {
		return new FormGroup<PhaseFormProperties>({
			InitialNumberOfUsers: new FormControl<number | null | undefined>(undefined),
			SpawnRate: new FormControl<number | null | undefined>(undefined),
			DurationInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>Defines the stairs traffic pattern for an Inference Recommender load test. This pattern type consists of multiple steps where the number of users increases at each step.</p> <p>Specify either the stairs or phases traffic pattern.</p> */
	export interface Stairs {
		DurationInSeconds?: number | null;
		NumberOfSteps?: number | null;
		UsersPerStep?: number | null;
	}

	/** <p>Defines the stairs traffic pattern for an Inference Recommender load test. This pattern type consists of multiple steps where the number of users increases at each step.</p> <p>Specify either the stairs or phases traffic pattern.</p> */
	export interface StairsFormProperties {
		DurationInSeconds: FormControl<number | null | undefined>,
		NumberOfSteps: FormControl<number | null | undefined>,
		UsersPerStep: FormControl<number | null | undefined>,
	}
	export function CreateStairsFormGroup() {
		return new FormGroup<StairsFormProperties>({
			DurationInSeconds: new FormControl<number | null | undefined>(undefined),
			NumberOfSteps: new FormControl<number | null | undefined>(undefined),
			UsersPerStep: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Specifies the maximum number of jobs that can run in parallel and the maximum number of jobs that can run. */
	export interface RecommendationJobResourceLimit {
		MaxNumberOfTests?: number | null;
		MaxParallelOfTests?: number | null;
	}

	/** Specifies the maximum number of jobs that can run in parallel and the maximum number of jobs that can run. */
	export interface RecommendationJobResourceLimitFormProperties {
		MaxNumberOfTests: FormControl<number | null | undefined>,
		MaxParallelOfTests: FormControl<number | null | undefined>,
	}
	export function CreateRecommendationJobResourceLimitFormGroup() {
		return new FormGroup<RecommendationJobResourceLimitFormProperties>({
			MaxNumberOfTests: new FormControl<number | null | undefined>(undefined),
			MaxParallelOfTests: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The endpoint configuration for the load test. */
	export interface EndpointInputConfiguration {
		InstanceType?: ProductionVariantInstanceType;
		InferenceSpecificationName?: string;
		EnvironmentParameterRanges?: EnvironmentParameterRanges;

		/** Specifies the serverless configuration for an endpoint variant. */
		ServerlessConfig?: ProductionVariantServerlessConfig;
	}

	/** The endpoint configuration for the load test. */
	export interface EndpointInputConfigurationFormProperties {
		InstanceType: FormControl<ProductionVariantInstanceType | null | undefined>,
		InferenceSpecificationName: FormControl<string | null | undefined>,
	}
	export function CreateEndpointInputConfigurationFormGroup() {
		return new FormGroup<EndpointInputConfigurationFormProperties>({
			InstanceType: new FormControl<ProductionVariantInstanceType | null | undefined>(undefined),
			InferenceSpecificationName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies the range of environment parameters */
	export interface EnvironmentParameterRanges {
		CategoricalParameterRanges?: Array<CategoricalParameter>;
	}

	/** Specifies the range of environment parameters */
	export interface EnvironmentParameterRangesFormProperties {
	}
	export function CreateEnvironmentParameterRangesFormGroup() {
		return new FormGroup<EnvironmentParameterRangesFormProperties>({
		});

	}


	/** Environment parameters you want to benchmark your load test against. */
	export interface CategoricalParameter {

		/** Required */
		Name: string;

		/** Required */
		Value: Array<string>;
	}

	/** Environment parameters you want to benchmark your load test against. */
	export interface CategoricalParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateCategoricalParameterFormGroup() {
		return new FormGroup<CategoricalParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specifies mandatory fields for running an Inference Recommender job directly in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a> API. The fields specified in <code>ContainerConfig</code> override the corresponding fields in the model package. Use <code>ContainerConfig</code> if you want to specify these fields for the recommendation job but don't want to edit them in your model package. */
	export interface RecommendationJobContainerConfig {
		Domain?: string;
		Task?: string;
		Framework?: string;
		FrameworkVersion?: string;
		PayloadConfig?: RecommendationJobPayloadConfig;
		NearestModelName?: string;
		SupportedInstanceTypes?: Array<string>;
		DataInputConfig?: string;
		SupportedEndpointType?: RecommendationJobSupportedEndpointType;
	}

	/** Specifies mandatory fields for running an Inference Recommender job directly in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a> API. The fields specified in <code>ContainerConfig</code> override the corresponding fields in the model package. Use <code>ContainerConfig</code> if you want to specify these fields for the recommendation job but don't want to edit them in your model package. */
	export interface RecommendationJobContainerConfigFormProperties {
		Domain: FormControl<string | null | undefined>,
		Task: FormControl<string | null | undefined>,
		Framework: FormControl<string | null | undefined>,
		FrameworkVersion: FormControl<string | null | undefined>,
		NearestModelName: FormControl<string | null | undefined>,
		DataInputConfig: FormControl<string | null | undefined>,
		SupportedEndpointType: FormControl<RecommendationJobSupportedEndpointType | null | undefined>,
	}
	export function CreateRecommendationJobContainerConfigFormGroup() {
		return new FormGroup<RecommendationJobContainerConfigFormProperties>({
			Domain: new FormControl<string | null | undefined>(undefined),
			Task: new FormControl<string | null | undefined>(undefined),
			Framework: new FormControl<string | null | undefined>(undefined),
			FrameworkVersion: new FormControl<string | null | undefined>(undefined),
			NearestModelName: new FormControl<string | null | undefined>(undefined),
			DataInputConfig: new FormControl<string | null | undefined>(undefined),
			SupportedEndpointType: new FormControl<RecommendationJobSupportedEndpointType | null | undefined>(undefined),
		});

	}


	/** The configuration for the payload for a recommendation job. */
	export interface RecommendationJobPayloadConfig {
		SamplePayloadUrl?: string;
		SupportedContentTypes?: Array<string>;
	}

	/** The configuration for the payload for a recommendation job. */
	export interface RecommendationJobPayloadConfigFormProperties {
		SamplePayloadUrl: FormControl<string | null | undefined>,
	}
	export function CreateRecommendationJobPayloadConfigFormGroup() {
		return new FormGroup<RecommendationJobPayloadConfigFormProperties>({
			SamplePayloadUrl: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RecommendationJobSupportedEndpointType { RealTime = 'RealTime', Serverless = 'Serverless' }


	/** Details about a customer endpoint that was compared in an Inference Recommender job. */
	export interface EndpointInfo {

		/** Required */
		EndpointName: string;
	}

	/** Details about a customer endpoint that was compared in an Inference Recommender job. */
	export interface EndpointInfoFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateEndpointInfoFormGroup() {
		return new FormGroup<EndpointInfoFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Inference Recommender provisions SageMaker endpoints with access to VPC in the inference recommendation job. */
	export interface RecommendationJobVpcConfig {

		/** Required */
		SecurityGroupIds: Array<string>;

		/** Required */
		Subnets: Array<string>;
	}

	/** Inference Recommender provisions SageMaker endpoints with access to VPC in the inference recommendation job. */
	export interface RecommendationJobVpcConfigFormProperties {
	}
	export function CreateRecommendationJobVpcConfigFormGroup() {
		return new FormGroup<RecommendationJobVpcConfigFormProperties>({
		});

	}


	/** Specifies conditions for stopping a job. When a job reaches a stopping condition limit, SageMaker ends the job. */
	export interface RecommendationJobStoppingConditions {
		MaxInvocations?: number | null;
		ModelLatencyThresholds?: Array<ModelLatencyThreshold>;
		FlatInvocations?: FlatInvocations;
	}

	/** Specifies conditions for stopping a job. When a job reaches a stopping condition limit, SageMaker ends the job. */
	export interface RecommendationJobStoppingConditionsFormProperties {
		MaxInvocations: FormControl<number | null | undefined>,
		FlatInvocations: FormControl<FlatInvocations | null | undefined>,
	}
	export function CreateRecommendationJobStoppingConditionsFormGroup() {
		return new FormGroup<RecommendationJobStoppingConditionsFormProperties>({
			MaxInvocations: new FormControl<number | null | undefined>(undefined),
			FlatInvocations: new FormControl<FlatInvocations | null | undefined>(undefined),
		});

	}


	/** The model latency threshold. */
	export interface ModelLatencyThreshold {
		Percentile?: string;
		ValueInMilliseconds?: number | null;
	}

	/** The model latency threshold. */
	export interface ModelLatencyThresholdFormProperties {
		Percentile: FormControl<string | null | undefined>,
		ValueInMilliseconds: FormControl<number | null | undefined>,
	}
	export function CreateModelLatencyThresholdFormGroup() {
		return new FormGroup<ModelLatencyThresholdFormProperties>({
			Percentile: new FormControl<string | null | undefined>(undefined),
			ValueInMilliseconds: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum FlatInvocations { Continue = 'Continue', Stop = 'Stop' }


	/** Provides information about the output configuration for the compiled model. */
	export interface RecommendationJobOutputConfig {
		KmsKeyId?: string;
		CompiledOutputConfig?: RecommendationJobCompiledOutputConfig;
	}

	/** Provides information about the output configuration for the compiled model. */
	export interface RecommendationJobOutputConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateRecommendationJobOutputConfigFormGroup() {
		return new FormGroup<RecommendationJobOutputConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides information about the output configuration for the compiled model. */
	export interface RecommendationJobCompiledOutputConfig {
		S3OutputUri?: string;
	}

	/** Provides information about the output configuration for the compiled model. */
	export interface RecommendationJobCompiledOutputConfigFormProperties {
		S3OutputUri: FormControl<string | null | undefined>,
	}
	export function CreateRecommendationJobCompiledOutputConfigFormGroup() {
		return new FormGroup<RecommendationJobCompiledOutputConfigFormProperties>({
			S3OutputUri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateLabelingJobResponse {

		/** Required */
		LabelingJobArn: string;
	}
	export interface CreateLabelingJobResponseFormProperties {

		/** Required */
		LabelingJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateLabelingJobResponseFormGroup() {
		return new FormGroup<CreateLabelingJobResponseFormProperties>({
			LabelingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateLabelingJobRequest {

		/** Required */
		LabelingJobName: string;

		/** Required */
		LabelAttributeName: string;

		/** Required */
		InputConfig: LabelingJobInputConfig;

		/** Required */
		OutputConfig: LabelingJobOutputConfig;

		/** Required */
		RoleArn: string;
		LabelCategoryConfigS3Uri?: string;
		StoppingConditions?: LabelingJobStoppingConditions;
		LabelingJobAlgorithmsConfig?: LabelingJobAlgorithmsConfig;

		/** Required */
		HumanTaskConfig: HumanTaskConfig;
		Tags?: Array<Tag>;
	}
	export interface CreateLabelingJobRequestFormProperties {

		/** Required */
		LabelingJobName: FormControl<string | null | undefined>,

		/** Required */
		LabelAttributeName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		LabelCategoryConfigS3Uri: FormControl<string | null | undefined>,
	}
	export function CreateCreateLabelingJobRequestFormGroup() {
		return new FormGroup<CreateLabelingJobRequestFormProperties>({
			LabelingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LabelAttributeName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LabelCategoryConfigS3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Input configuration information for a labeling job. */
	export interface LabelingJobInputConfig {

		/** Required */
		DataSource: LabelingJobDataSource;
		DataAttributes?: LabelingJobDataAttributes;
	}

	/** Input configuration information for a labeling job. */
	export interface LabelingJobInputConfigFormProperties {
	}
	export function CreateLabelingJobInputConfigFormGroup() {
		return new FormGroup<LabelingJobInputConfigFormProperties>({
		});

	}


	/** <p>Provides information about the location of input data.</p> <p>You must specify at least one of the following: <code>S3DataSource</code> or <code>SnsDataSource</code>.</p> <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job.</p> <p>Use <code>S3DataSource</code> to specify an input manifest file for both streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is optional if you use <code>SnsDataSource</code> to create a streaming labeling job.</p> */
	export interface LabelingJobDataSource {
		S3DataSource?: LabelingJobS3DataSource;
		SnsDataSource?: LabelingJobSnsDataSource;
	}

	/** <p>Provides information about the location of input data.</p> <p>You must specify at least one of the following: <code>S3DataSource</code> or <code>SnsDataSource</code>.</p> <p>Use <code>SnsDataSource</code> to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job.</p> <p>Use <code>S3DataSource</code> to specify an input manifest file for both streaming and one-time labeling jobs. Adding an <code>S3DataSource</code> is optional if you use <code>SnsDataSource</code> to create a streaming labeling job.</p> */
	export interface LabelingJobDataSourceFormProperties {
	}
	export function CreateLabelingJobDataSourceFormGroup() {
		return new FormGroup<LabelingJobDataSourceFormProperties>({
		});

	}


	/** The Amazon S3 location of the input data objects. */
	export interface LabelingJobS3DataSource {

		/** Required */
		ManifestS3Uri: string;
	}

	/** The Amazon S3 location of the input data objects. */
	export interface LabelingJobS3DataSourceFormProperties {

		/** Required */
		ManifestS3Uri: FormControl<string | null | undefined>,
	}
	export function CreateLabelingJobS3DataSourceFormGroup() {
		return new FormGroup<LabelingJobS3DataSourceFormProperties>({
			ManifestS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An Amazon SNS data source used for streaming labeling jobs. */
	export interface LabelingJobSnsDataSource {

		/** Required */
		SnsTopicArn: string;
	}

	/** An Amazon SNS data source used for streaming labeling jobs. */
	export interface LabelingJobSnsDataSourceFormProperties {

		/** Required */
		SnsTopicArn: FormControl<string | null | undefined>,
	}
	export function CreateLabelingJobSnsDataSourceFormGroup() {
		return new FormGroup<LabelingJobSnsDataSourceFormProperties>({
			SnsTopicArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Attributes of the data specified by the customer. Use these to describe the data to be labeled. */
	export interface LabelingJobDataAttributes {
		ContentClassifiers?: Array<ContentClassifier>;
	}

	/** Attributes of the data specified by the customer. Use these to describe the data to be labeled. */
	export interface LabelingJobDataAttributesFormProperties {
	}
	export function CreateLabelingJobDataAttributesFormGroup() {
		return new FormGroup<LabelingJobDataAttributesFormProperties>({
		});

	}

	export enum ContentClassifier { FreeOfPersonallyIdentifiableInformation = 'FreeOfPersonallyIdentifiableInformation', FreeOfAdultContent = 'FreeOfAdultContent' }


	/** Output configuration information for a labeling job. */
	export interface LabelingJobOutputConfig {

		/** Required */
		S3OutputPath: string;
		KmsKeyId?: string;
		SnsTopicArn?: string;
	}

	/** Output configuration information for a labeling job. */
	export interface LabelingJobOutputConfigFormProperties {

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		SnsTopicArn: FormControl<string | null | undefined>,
	}
	export function CreateLabelingJobOutputConfigFormGroup() {
		return new FormGroup<LabelingJobOutputConfigFormProperties>({
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			SnsTopicArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.</p> <note> <p>Labeling jobs fail after 30 days with an appropriate client error message.</p> </note> */
	export interface LabelingJobStoppingConditions {
		MaxHumanLabeledObjectCount?: number | null;
		MaxPercentageOfInputDatasetLabeled?: number | null;
	}

	/** <p>A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.</p> <note> <p>Labeling jobs fail after 30 days with an appropriate client error message.</p> </note> */
	export interface LabelingJobStoppingConditionsFormProperties {
		MaxHumanLabeledObjectCount: FormControl<number | null | undefined>,
		MaxPercentageOfInputDatasetLabeled: FormControl<number | null | undefined>,
	}
	export function CreateLabelingJobStoppingConditionsFormGroup() {
		return new FormGroup<LabelingJobStoppingConditionsFormProperties>({
			MaxHumanLabeledObjectCount: new FormControl<number | null | undefined>(undefined),
			MaxPercentageOfInputDatasetLabeled: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Provides configuration information for auto-labeling of your data objects. A <code>LabelingJobAlgorithmsConfig</code> object must be supplied in order to use auto-labeling. */
	export interface LabelingJobAlgorithmsConfig {

		/** Required */
		LabelingJobAlgorithmSpecificationArn: string;
		InitialActiveLearningModelArn?: string;
		LabelingJobResourceConfig?: LabelingJobResourceConfig;
	}

	/** Provides configuration information for auto-labeling of your data objects. A <code>LabelingJobAlgorithmsConfig</code> object must be supplied in order to use auto-labeling. */
	export interface LabelingJobAlgorithmsConfigFormProperties {

		/** Required */
		LabelingJobAlgorithmSpecificationArn: FormControl<string | null | undefined>,
		InitialActiveLearningModelArn: FormControl<string | null | undefined>,
	}
	export function CreateLabelingJobAlgorithmsConfigFormGroup() {
		return new FormGroup<LabelingJobAlgorithmsConfigFormProperties>({
			LabelingJobAlgorithmSpecificationArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InitialActiveLearningModelArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configure encryption on the storage volume attached to the ML compute instance used to run automated data labeling model training and inference.  */
	export interface LabelingJobResourceConfig {
		VolumeKmsKeyId?: string;

		/** Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. */
		VpcConfig?: VpcConfig;
	}

	/** Configure encryption on the storage volume attached to the ML compute instance used to run automated data labeling model training and inference.  */
	export interface LabelingJobResourceConfigFormProperties {
		VolumeKmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateLabelingJobResourceConfigFormGroup() {
		return new FormGroup<LabelingJobResourceConfigFormProperties>({
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information required for human workers to complete a labeling task. */
	export interface HumanTaskConfig {

		/** Required */
		WorkteamArn: string;

		/** Required */
		UiConfig: UiConfig;

		/** Required */
		PreHumanTaskLambdaArn: string;
		TaskKeywords?: Array<string>;

		/** Required */
		TaskTitle: string;

		/** Required */
		TaskDescription: string;

		/** Required */
		NumberOfHumanWorkersPerDataObject: number;

		/** Required */
		TaskTimeLimitInSeconds: number;
		TaskAvailabilityLifetimeInSeconds?: number | null;
		MaxConcurrentTaskCount?: number | null;

		/** Required */
		AnnotationConsolidationConfig: AnnotationConsolidationConfig;
		PublicWorkforceTaskPrice?: PublicWorkforceTaskPrice;
	}

	/** Information required for human workers to complete a labeling task. */
	export interface HumanTaskConfigFormProperties {

		/** Required */
		WorkteamArn: FormControl<string | null | undefined>,

		/** Required */
		PreHumanTaskLambdaArn: FormControl<string | null | undefined>,

		/** Required */
		TaskTitle: FormControl<string | null | undefined>,

		/** Required */
		TaskDescription: FormControl<string | null | undefined>,

		/** Required */
		NumberOfHumanWorkersPerDataObject: FormControl<number | null | undefined>,

		/** Required */
		TaskTimeLimitInSeconds: FormControl<number | null | undefined>,
		TaskAvailabilityLifetimeInSeconds: FormControl<number | null | undefined>,
		MaxConcurrentTaskCount: FormControl<number | null | undefined>,
	}
	export function CreateHumanTaskConfigFormGroup() {
		return new FormGroup<HumanTaskConfigFormProperties>({
			WorkteamArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PreHumanTaskLambdaArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TaskTitle: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TaskDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NumberOfHumanWorkersPerDataObject: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			TaskTimeLimitInSeconds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			TaskAvailabilityLifetimeInSeconds: new FormControl<number | null | undefined>(undefined),
			MaxConcurrentTaskCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>Provided configuration information for the worker UI for a labeling job. Provide either <code>HumanTaskUiArn</code> or <code>UiTemplateS3Uri</code>.</p> <p>For named entity recognition, 3D point cloud and video frame labeling jobs, use <code>HumanTaskUiArn</code>.</p> <p>For all other Ground Truth built-in task types and custom task types, use <code>UiTemplateS3Uri</code> to specify the location of a worker task template in Amazon S3.</p> */
	export interface UiConfig {
		UiTemplateS3Uri?: string;
		HumanTaskUiArn?: string;
	}

	/** <p>Provided configuration information for the worker UI for a labeling job. Provide either <code>HumanTaskUiArn</code> or <code>UiTemplateS3Uri</code>.</p> <p>For named entity recognition, 3D point cloud and video frame labeling jobs, use <code>HumanTaskUiArn</code>.</p> <p>For all other Ground Truth built-in task types and custom task types, use <code>UiTemplateS3Uri</code> to specify the location of a worker task template in Amazon S3.</p> */
	export interface UiConfigFormProperties {
		UiTemplateS3Uri: FormControl<string | null | undefined>,
		HumanTaskUiArn: FormControl<string | null | undefined>,
	}
	export function CreateUiConfigFormGroup() {
		return new FormGroup<UiConfigFormProperties>({
			UiTemplateS3Uri: new FormControl<string | null | undefined>(undefined),
			HumanTaskUiArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configures how labels are consolidated across human workers and processes output data.  */
	export interface AnnotationConsolidationConfig {

		/** Required */
		AnnotationConsolidationLambdaArn: string;
	}

	/** Configures how labels are consolidated across human workers and processes output data.  */
	export interface AnnotationConsolidationConfigFormProperties {

		/** Required */
		AnnotationConsolidationLambdaArn: FormControl<string | null | undefined>,
	}
	export function CreateAnnotationConsolidationConfigFormGroup() {
		return new FormGroup<AnnotationConsolidationConfigFormProperties>({
			AnnotationConsolidationLambdaArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelOutput {

		/** Required */
		ModelArn: string;
	}
	export interface CreateModelOutputFormProperties {

		/** Required */
		ModelArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelOutputFormGroup() {
		return new FormGroup<CreateModelOutputFormProperties>({
			ModelArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelInput {

		/** Required */
		ModelName: string;
		PrimaryContainer?: ContainerDefinition;
		Containers?: Array<ContainerDefinition>;
		InferenceExecutionConfig?: InferenceExecutionConfig;

		/** Required */
		ExecutionRoleArn: string;
		Tags?: Array<Tag>;
		VpcConfig?: VpcConfig;
		EnableNetworkIsolation?: boolean | null;
	}
	export interface CreateModelInputFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		ExecutionRoleArn: FormControl<string | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateModelInputFormGroup() {
		return new FormGroup<CreateModelInputFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ExecutionRoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Describes the container, as part of model definition. */
	export interface ContainerDefinition {
		ContainerHostname?: string;
		Image?: string;
		ImageConfig?: ImageConfig;
		Mode?: ContainerMode;
		ModelDataUrl?: string;
		Environment?: EnvironmentMap;
		ModelPackageName?: string;
		InferenceSpecificationName?: string;
		MultiModelConfig?: MultiModelConfig;
		ModelDataSource?: ModelDataSource;
	}

	/** Describes the container, as part of model definition. */
	export interface ContainerDefinitionFormProperties {
		ContainerHostname: FormControl<string | null | undefined>,
		Image: FormControl<string | null | undefined>,
		Mode: FormControl<ContainerMode | null | undefined>,
		ModelDataUrl: FormControl<string | null | undefined>,
		ModelPackageName: FormControl<string | null | undefined>,
		InferenceSpecificationName: FormControl<string | null | undefined>,
	}
	export function CreateContainerDefinitionFormGroup() {
		return new FormGroup<ContainerDefinitionFormProperties>({
			ContainerHostname: new FormControl<string | null | undefined>(undefined),
			Image: new FormControl<string | null | undefined>(undefined),
			Mode: new FormControl<ContainerMode | null | undefined>(undefined),
			ModelDataUrl: new FormControl<string | null | undefined>(undefined),
			ModelPackageName: new FormControl<string | null | undefined>(undefined),
			InferenceSpecificationName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). */
	export interface ImageConfig {

		/** Required */
		RepositoryAccessMode: RepositoryAccessMode;
		RepositoryAuthConfig?: RepositoryAuthConfig;
	}

	/** Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). */
	export interface ImageConfigFormProperties {

		/** Required */
		RepositoryAccessMode: FormControl<RepositoryAccessMode | null | undefined>,
	}
	export function CreateImageConfigFormGroup() {
		return new FormGroup<ImageConfigFormProperties>({
			RepositoryAccessMode: new FormControl<RepositoryAccessMode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RepositoryAccessMode { Platform = 'Platform', Vpc = 'Vpc' }


	/** Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified <code>Vpc</code> as the value for the <code>RepositoryAccessMode</code> field of the <code>ImageConfig</code> object that you passed to a call to <code>CreateModel</code> and the private Docker registry where the model image is hosted requires authentication. */
	export interface RepositoryAuthConfig {

		/** Required */
		RepositoryCredentialsProviderArn: string;
	}

	/** Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified <code>Vpc</code> as the value for the <code>RepositoryAccessMode</code> field of the <code>ImageConfig</code> object that you passed to a call to <code>CreateModel</code> and the private Docker registry where the model image is hosted requires authentication. */
	export interface RepositoryAuthConfigFormProperties {

		/** Required */
		RepositoryCredentialsProviderArn: FormControl<string | null | undefined>,
	}
	export function CreateRepositoryAuthConfigFormGroup() {
		return new FormGroup<RepositoryAuthConfigFormProperties>({
			RepositoryCredentialsProviderArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ContainerMode { SingleModel = 'SingleModel', MultiModel = 'MultiModel' }


	/** Specifies additional configuration for hosting multi-model endpoints. */
	export interface MultiModelConfig {
		ModelCacheSetting?: ModelCacheSetting;
	}

	/** Specifies additional configuration for hosting multi-model endpoints. */
	export interface MultiModelConfigFormProperties {
		ModelCacheSetting: FormControl<ModelCacheSetting | null | undefined>,
	}
	export function CreateMultiModelConfigFormGroup() {
		return new FormGroup<MultiModelConfigFormProperties>({
			ModelCacheSetting: new FormControl<ModelCacheSetting | null | undefined>(undefined),
		});

	}

	export enum ModelCacheSetting { Enabled = 'Enabled', Disabled = 'Disabled' }


	/** Specifies the location of ML model data to deploy. If specified, you must specify one and only one of the available data sources. */
	export interface ModelDataSource {

		/** Required */
		S3DataSource: S3ModelDataSource;
	}

	/** Specifies the location of ML model data to deploy. If specified, you must specify one and only one of the available data sources. */
	export interface ModelDataSourceFormProperties {
	}
	export function CreateModelDataSourceFormGroup() {
		return new FormGroup<ModelDataSourceFormProperties>({
		});

	}


	/** Specifies the S3 location of ML model data to deploy. */
	export interface S3ModelDataSource {

		/** Required */
		S3Uri: string;

		/** Required */
		S3DataType: S3ModelDataType;

		/** Required */
		CompressionType: CompressionType;
	}

	/** Specifies the S3 location of ML model data to deploy. */
	export interface S3ModelDataSourceFormProperties {

		/** Required */
		S3Uri: FormControl<string | null | undefined>,

		/** Required */
		S3DataType: FormControl<S3ModelDataType | null | undefined>,

		/** Required */
		CompressionType: FormControl<CompressionType | null | undefined>,
	}
	export function CreateS3ModelDataSourceFormGroup() {
		return new FormGroup<S3ModelDataSourceFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			S3DataType: new FormControl<S3ModelDataType | null | undefined>(undefined, [Validators.required]),
			CompressionType: new FormControl<CompressionType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum S3ModelDataType { S3Prefix = 'S3Prefix', S3Object = 'S3Object' }


	/** Specifies details about how containers in a multi-container endpoint are run. */
	export interface InferenceExecutionConfig {

		/** Required */
		Mode: InferenceExecutionMode;
	}

	/** Specifies details about how containers in a multi-container endpoint are run. */
	export interface InferenceExecutionConfigFormProperties {

		/** Required */
		Mode: FormControl<InferenceExecutionMode | null | undefined>,
	}
	export function CreateInferenceExecutionConfigFormGroup() {
		return new FormGroup<InferenceExecutionConfigFormProperties>({
			Mode: new FormControl<InferenceExecutionMode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum InferenceExecutionMode { Serial = 'Serial', Direct = 'Direct' }

	export interface CreateModelBiasJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;
	}
	export interface CreateModelBiasJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelBiasJobDefinitionResponseFormGroup() {
		return new FormGroup<CreateModelBiasJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelBiasJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
		ModelBiasBaselineConfig?: ModelBiasBaselineConfig;

		/** Required */
		ModelBiasAppSpecification: ModelBiasAppSpecification;

		/** Required */
		ModelBiasJobInput: ModelBiasJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		ModelBiasJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
		Tags?: Array<Tag>;
	}
	export interface CreateModelBiasJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelBiasJobDefinitionRequestFormGroup() {
		return new FormGroup<CreateModelBiasJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for a baseline model bias job. */
	export interface ModelBiasBaselineConfig {
		BaseliningJobName?: string;

		/** The constraints resource for a monitoring job. */
		ConstraintsResource?: MonitoringConstraintsResource;
	}

	/** The configuration for a baseline model bias job. */
	export interface ModelBiasBaselineConfigFormProperties {
		BaseliningJobName: FormControl<string | null | undefined>,
	}
	export function CreateModelBiasBaselineConfigFormGroup() {
		return new FormGroup<ModelBiasBaselineConfigFormProperties>({
			BaseliningJobName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Docker container image configuration object for the model bias job. */
	export interface ModelBiasAppSpecification {

		/** Required */
		ImageUri: string;

		/** Required */
		ConfigUri: string;
		Environment?: MonitoringEnvironmentMap;
	}

	/** Docker container image configuration object for the model bias job. */
	export interface ModelBiasAppSpecificationFormProperties {

		/** Required */
		ImageUri: FormControl<string | null | undefined>,

		/** Required */
		ConfigUri: FormControl<string | null | undefined>,
	}
	export function CreateModelBiasAppSpecificationFormGroup() {
		return new FormGroup<ModelBiasAppSpecificationFormProperties>({
			ImageUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ConfigUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Inputs for the model bias job. */
	export interface ModelBiasJobInput {

		/** Input object for the endpoint */
		EndpointInput?: EndpointInput;
		BatchTransformInput?: BatchTransformInput;

		/** Required */
		GroundTruthS3Input: MonitoringGroundTruthS3Input;
	}

	/** Inputs for the model bias job. */
	export interface ModelBiasJobInputFormProperties {
	}
	export function CreateModelBiasJobInputFormGroup() {
		return new FormGroup<ModelBiasJobInputFormProperties>({
		});

	}


	/** The ground truth labels for the dataset used for the monitoring job. */
	export interface MonitoringGroundTruthS3Input {
		S3Uri?: string;
	}

	/** The ground truth labels for the dataset used for the monitoring job. */
	export interface MonitoringGroundTruthS3InputFormProperties {
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringGroundTruthS3InputFormGroup() {
		return new FormGroup<MonitoringGroundTruthS3InputFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateModelCardResponse {

		/** Required */
		ModelCardArn: string;
	}
	export interface CreateModelCardResponseFormProperties {

		/** Required */
		ModelCardArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelCardResponseFormGroup() {
		return new FormGroup<CreateModelCardResponseFormProperties>({
			ModelCardArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelCardRequest {

		/** Required */
		ModelCardName: string;
		SecurityConfig?: ModelCardSecurityConfig;

		/** Required */
		Content: string;

		/** Required */
		ModelCardStatus: ModelCardStatus;
		Tags?: Array<Tag>;
	}
	export interface CreateModelCardRequestFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,

		/** Required */
		Content: FormControl<string | null | undefined>,

		/** Required */
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,
	}
	export function CreateCreateModelCardRequestFormGroup() {
		return new FormGroup<CreateModelCardRequestFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configure the security settings to protect model card data. */
	export interface ModelCardSecurityConfig {
		KmsKeyId?: string;
	}

	/** Configure the security settings to protect model card data. */
	export interface ModelCardSecurityConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateModelCardSecurityConfigFormGroup() {
		return new FormGroup<ModelCardSecurityConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ModelCardStatus { Draft = 'Draft', PendingReview = 'PendingReview', Approved = 'Approved', Archived = 'Archived' }

	export interface ConflictException {
	}
	export interface ConflictExceptionFormProperties {
	}
	export function CreateConflictExceptionFormGroup() {
		return new FormGroup<ConflictExceptionFormProperties>({
		});

	}

	export interface CreateModelCardExportJobResponse {

		/** Required */
		ModelCardExportJobArn: string;
	}
	export interface CreateModelCardExportJobResponseFormProperties {

		/** Required */
		ModelCardExportJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelCardExportJobResponseFormGroup() {
		return new FormGroup<CreateModelCardExportJobResponseFormProperties>({
			ModelCardExportJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelCardExportJobRequest {

		/** Required */
		ModelCardName: string;
		ModelCardVersion?: number | null;

		/** Required */
		ModelCardExportJobName: string;

		/** Required */
		OutputConfig: ModelCardExportOutputConfig;
	}
	export interface CreateModelCardExportJobRequestFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,
		ModelCardVersion: FormControl<number | null | undefined>,

		/** Required */
		ModelCardExportJobName: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelCardExportJobRequestFormGroup() {
		return new FormGroup<CreateModelCardExportJobRequestFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined),
			ModelCardExportJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configure the export output details for an Amazon SageMaker Model Card. */
	export interface ModelCardExportOutputConfig {

		/** Required */
		S3OutputPath: string;
	}

	/** Configure the export output details for an Amazon SageMaker Model Card. */
	export interface ModelCardExportOutputConfigFormProperties {

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
	}
	export function CreateModelCardExportOutputConfigFormGroup() {
		return new FormGroup<ModelCardExportOutputConfigFormProperties>({
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelExplainabilityJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;
	}
	export interface CreateModelExplainabilityJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelExplainabilityJobDefinitionResponseFormGroup() {
		return new FormGroup<CreateModelExplainabilityJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelExplainabilityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
		ModelExplainabilityBaselineConfig?: ModelExplainabilityBaselineConfig;

		/** Required */
		ModelExplainabilityAppSpecification: ModelExplainabilityAppSpecification;

		/** Required */
		ModelExplainabilityJobInput: ModelExplainabilityJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		ModelExplainabilityJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
		Tags?: Array<Tag>;
	}
	export interface CreateModelExplainabilityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelExplainabilityJobDefinitionRequestFormGroup() {
		return new FormGroup<CreateModelExplainabilityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for a baseline model explainability job. */
	export interface ModelExplainabilityBaselineConfig {
		BaseliningJobName?: string;

		/** The constraints resource for a monitoring job. */
		ConstraintsResource?: MonitoringConstraintsResource;
	}

	/** The configuration for a baseline model explainability job. */
	export interface ModelExplainabilityBaselineConfigFormProperties {
		BaseliningJobName: FormControl<string | null | undefined>,
	}
	export function CreateModelExplainabilityBaselineConfigFormGroup() {
		return new FormGroup<ModelExplainabilityBaselineConfigFormProperties>({
			BaseliningJobName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Docker container image configuration object for the model explainability job. */
	export interface ModelExplainabilityAppSpecification {

		/** Required */
		ImageUri: string;

		/** Required */
		ConfigUri: string;
		Environment?: MonitoringEnvironmentMap;
	}

	/** Docker container image configuration object for the model explainability job. */
	export interface ModelExplainabilityAppSpecificationFormProperties {

		/** Required */
		ImageUri: FormControl<string | null | undefined>,

		/** Required */
		ConfigUri: FormControl<string | null | undefined>,
	}
	export function CreateModelExplainabilityAppSpecificationFormGroup() {
		return new FormGroup<ModelExplainabilityAppSpecificationFormProperties>({
			ImageUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ConfigUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Inputs for the model explainability job. */
	export interface ModelExplainabilityJobInput {

		/** Input object for the endpoint */
		EndpointInput?: EndpointInput;
		BatchTransformInput?: BatchTransformInput;
	}

	/** Inputs for the model explainability job. */
	export interface ModelExplainabilityJobInputFormProperties {
	}
	export function CreateModelExplainabilityJobInputFormGroup() {
		return new FormGroup<ModelExplainabilityJobInputFormProperties>({
		});

	}

	export interface CreateModelPackageOutput {

		/** Required */
		ModelPackageArn: string;
	}
	export interface CreateModelPackageOutputFormProperties {

		/** Required */
		ModelPackageArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelPackageOutputFormGroup() {
		return new FormGroup<CreateModelPackageOutputFormProperties>({
			ModelPackageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelPackageInput {
		ModelPackageName?: string;
		ModelPackageGroupName?: string;
		ModelPackageDescription?: string;
		InferenceSpecification?: InferenceSpecification;
		ValidationSpecification?: ModelPackageValidationSpecification;
		SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
		CertifyForMarketplace?: boolean | null;
		Tags?: Array<Tag>;
		ModelApprovalStatus?: ModelApprovalStatus;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		ModelMetrics?: ModelMetrics;
		ClientToken?: string;
		CustomerMetadataProperties?: CustomerMetadataMap;
		DriftCheckBaselines?: DriftCheckBaselines;
		Domain?: string;
		Task?: string;
		SamplePayloadUrl?: string;
		AdditionalInferenceSpecifications?: Array<AdditionalInferenceSpecificationDefinition>;
	}
	export interface CreateModelPackageInputFormProperties {
		ModelPackageName: FormControl<string | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageDescription: FormControl<string | null | undefined>,
		CertifyForMarketplace: FormControl<boolean | null | undefined>,
		ModelApprovalStatus: FormControl<ModelApprovalStatus | null | undefined>,
		ClientToken: FormControl<string | null | undefined>,
		Domain: FormControl<string | null | undefined>,
		Task: FormControl<string | null | undefined>,
		SamplePayloadUrl: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelPackageInputFormGroup() {
		return new FormGroup<CreateModelPackageInputFormProperties>({
			ModelPackageName: new FormControl<string | null | undefined>(undefined),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ModelPackageDescription: new FormControl<string | null | undefined>(undefined),
			CertifyForMarketplace: new FormControl<boolean | null | undefined>(undefined),
			ModelApprovalStatus: new FormControl<ModelApprovalStatus | null | undefined>(undefined),
			ClientToken: new FormControl<string | null | undefined>(undefined),
			Domain: new FormControl<string | null | undefined>(undefined),
			Task: new FormControl<string | null | undefined>(undefined),
			SamplePayloadUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies batch transform jobs that SageMaker runs to validate your model package. */
	export interface ModelPackageValidationSpecification {

		/** Required */
		ValidationRole: string;

		/** Required */
		ValidationProfiles: Array<ModelPackageValidationProfile>;
	}

	/** Specifies batch transform jobs that SageMaker runs to validate your model package. */
	export interface ModelPackageValidationSpecificationFormProperties {

		/** Required */
		ValidationRole: FormControl<string | null | undefined>,
	}
	export function CreateModelPackageValidationSpecificationFormGroup() {
		return new FormGroup<ModelPackageValidationSpecificationFormProperties>({
			ValidationRole: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p> */
	export interface ModelPackageValidationProfile {

		/** Required */
		ProfileName: string;

		/** Required */
		TransformJobDefinition: TransformJobDefinition;
	}

	/** <p>Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p> */
	export interface ModelPackageValidationProfileFormProperties {

		/** Required */
		ProfileName: FormControl<string | null | undefined>,
	}
	export function CreateModelPackageValidationProfileFormGroup() {
		return new FormGroup<ModelPackageValidationProfileFormProperties>({
			ProfileName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of algorithms that were used to create a model package. */
	export interface SourceAlgorithmSpecification {

		/** Required */
		SourceAlgorithms: Array<SourceAlgorithm>;
	}

	/** A list of algorithms that were used to create a model package. */
	export interface SourceAlgorithmSpecificationFormProperties {
	}
	export function CreateSourceAlgorithmSpecificationFormGroup() {
		return new FormGroup<SourceAlgorithmSpecificationFormProperties>({
		});

	}


	/** Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to. */
	export interface SourceAlgorithm {
		ModelDataUrl?: string;

		/** Required */
		AlgorithmName: string;
	}

	/** Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to. */
	export interface SourceAlgorithmFormProperties {
		ModelDataUrl: FormControl<string | null | undefined>,

		/** Required */
		AlgorithmName: FormControl<string | null | undefined>,
	}
	export function CreateSourceAlgorithmFormGroup() {
		return new FormGroup<SourceAlgorithmFormProperties>({
			ModelDataUrl: new FormControl<string | null | undefined>(undefined),
			AlgorithmName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ModelApprovalStatus { Approved = 'Approved', Rejected = 'Rejected', PendingManualApproval = 'PendingManualApproval' }


	/** Contains metrics captured from a model. */
	export interface ModelMetrics {
		ModelQuality?: ModelQuality;
		ModelDataQuality?: ModelDataQuality;
		Bias?: Bias;
		Explainability?: Explainability;
	}

	/** Contains metrics captured from a model. */
	export interface ModelMetricsFormProperties {
	}
	export function CreateModelMetricsFormGroup() {
		return new FormGroup<ModelMetricsFormProperties>({
		});

	}


	/** Model quality statistics and constraints. */
	export interface ModelQuality {
		Statistics?: MetricsSource;
		Constraints?: MetricsSource;
	}

	/** Model quality statistics and constraints. */
	export interface ModelQualityFormProperties {
	}
	export function CreateModelQualityFormGroup() {
		return new FormGroup<ModelQualityFormProperties>({
		});

	}


	/** Details about the metrics source. */
	export interface MetricsSource {

		/** Required */
		ContentType: string;
		ContentDigest?: string;

		/** Required */
		S3Uri: string;
	}

	/** Details about the metrics source. */
	export interface MetricsSourceFormProperties {

		/** Required */
		ContentType: FormControl<string | null | undefined>,
		ContentDigest: FormControl<string | null | undefined>,

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateMetricsSourceFormGroup() {
		return new FormGroup<MetricsSourceFormProperties>({
			ContentType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ContentDigest: new FormControl<string | null | undefined>(undefined),
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data quality constraints and statistics for a model. */
	export interface ModelDataQuality {
		Statistics?: MetricsSource;
		Constraints?: MetricsSource;
	}

	/** Data quality constraints and statistics for a model. */
	export interface ModelDataQualityFormProperties {
	}
	export function CreateModelDataQualityFormGroup() {
		return new FormGroup<ModelDataQualityFormProperties>({
		});

	}


	/** Contains bias metrics for a model. */
	export interface Bias {
		Report?: MetricsSource;
		PreTrainingReport?: MetricsSource;
		PostTrainingReport?: MetricsSource;
	}

	/** Contains bias metrics for a model. */
	export interface BiasFormProperties {
	}
	export function CreateBiasFormGroup() {
		return new FormGroup<BiasFormProperties>({
		});

	}


	/** Contains explainability metrics for a model. */
	export interface Explainability {
		Report?: MetricsSource;
	}

	/** Contains explainability metrics for a model. */
	export interface ExplainabilityFormProperties {
	}
	export function CreateExplainabilityFormGroup() {
		return new FormGroup<ExplainabilityFormProperties>({
		});

	}

	export interface CustomerMetadataMap {
	}
	export interface CustomerMetadataMapFormProperties {
	}
	export function CreateCustomerMetadataMapFormGroup() {
		return new FormGroup<CustomerMetadataMapFormProperties>({
		});

	}


	/** Represents the drift check baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckBaselines {
		Bias?: DriftCheckBias;
		Explainability?: DriftCheckExplainability;
		ModelQuality?: DriftCheckModelQuality;
		ModelDataQuality?: DriftCheckModelDataQuality;
	}

	/** Represents the drift check baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckBaselinesFormProperties {
	}
	export function CreateDriftCheckBaselinesFormGroup() {
		return new FormGroup<DriftCheckBaselinesFormProperties>({
		});

	}


	/** Represents the drift check bias baselines that can be used when the model monitor is set using the model package. */
	export interface DriftCheckBias {
		ConfigFile?: FileSource;
		PreTrainingConstraints?: MetricsSource;
		PostTrainingConstraints?: MetricsSource;
	}

	/** Represents the drift check bias baselines that can be used when the model monitor is set using the model package. */
	export interface DriftCheckBiasFormProperties {
	}
	export function CreateDriftCheckBiasFormGroup() {
		return new FormGroup<DriftCheckBiasFormProperties>({
		});

	}


	/** Contains details regarding the file source. */
	export interface FileSource {
		ContentType?: string;
		ContentDigest?: string;

		/** Required */
		S3Uri: string;
	}

	/** Contains details regarding the file source. */
	export interface FileSourceFormProperties {
		ContentType: FormControl<string | null | undefined>,
		ContentDigest: FormControl<string | null | undefined>,

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateFileSourceFormGroup() {
		return new FormGroup<FileSourceFormProperties>({
			ContentType: new FormControl<string | null | undefined>(undefined),
			ContentDigest: new FormControl<string | null | undefined>(undefined),
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckExplainability {
		Constraints?: MetricsSource;
		ConfigFile?: FileSource;
	}

	/** Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckExplainabilityFormProperties {
	}
	export function CreateDriftCheckExplainabilityFormGroup() {
		return new FormGroup<DriftCheckExplainabilityFormProperties>({
		});

	}


	/** Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckModelQuality {
		Statistics?: MetricsSource;
		Constraints?: MetricsSource;
	}

	/** Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckModelQualityFormProperties {
	}
	export function CreateDriftCheckModelQualityFormGroup() {
		return new FormGroup<DriftCheckModelQualityFormProperties>({
		});

	}


	/** Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckModelDataQuality {
		Statistics?: MetricsSource;
		Constraints?: MetricsSource;
	}

	/** Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.  */
	export interface DriftCheckModelDataQualityFormProperties {
	}
	export function CreateDriftCheckModelDataQualityFormGroup() {
		return new FormGroup<DriftCheckModelDataQualityFormProperties>({
		});

	}


	/** A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package */
	export interface AdditionalInferenceSpecificationDefinition {

		/** Required */
		Name: string;
		Description?: string;

		/** Required */
		Containers: Array<ModelPackageContainerDefinition>;
		SupportedTransformInstanceTypes?: Array<TransformInstanceType>;
		SupportedRealtimeInferenceInstanceTypes?: Array<ProductionVariantInstanceType>;
		SupportedContentTypes?: Array<string>;
		SupportedResponseMIMETypes?: Array<string>;
	}

	/** A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package */
	export interface AdditionalInferenceSpecificationDefinitionFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateAdditionalInferenceSpecificationDefinitionFormGroup() {
		return new FormGroup<AdditionalInferenceSpecificationDefinitionFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateModelPackageGroupOutput {

		/** Required */
		ModelPackageGroupArn: string;
	}
	export interface CreateModelPackageGroupOutputFormProperties {

		/** Required */
		ModelPackageGroupArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelPackageGroupOutputFormGroup() {
		return new FormGroup<CreateModelPackageGroupOutputFormProperties>({
			ModelPackageGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelPackageGroupInput {

		/** Required */
		ModelPackageGroupName: string;
		ModelPackageGroupDescription?: string;
		Tags?: Array<Tag>;
	}
	export interface CreateModelPackageGroupInputFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageGroupDescription: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelPackageGroupInputFormGroup() {
		return new FormGroup<CreateModelPackageGroupInputFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupDescription: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateModelQualityJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;
	}
	export interface CreateModelQualityJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelQualityJobDefinitionResponseFormGroup() {
		return new FormGroup<CreateModelQualityJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateModelQualityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
		ModelQualityBaselineConfig?: ModelQualityBaselineConfig;

		/** Required */
		ModelQualityAppSpecification: ModelQualityAppSpecification;

		/** Required */
		ModelQualityJobInput: ModelQualityJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		ModelQualityJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
		Tags?: Array<Tag>;
	}
	export interface CreateModelQualityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateModelQualityJobDefinitionRequestFormGroup() {
		return new FormGroup<CreateModelQualityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically. */
	export interface ModelQualityBaselineConfig {
		BaseliningJobName?: string;

		/** The constraints resource for a monitoring job. */
		ConstraintsResource?: MonitoringConstraintsResource;
	}

	/** Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically. */
	export interface ModelQualityBaselineConfigFormProperties {
		BaseliningJobName: FormControl<string | null | undefined>,
	}
	export function CreateModelQualityBaselineConfigFormGroup() {
		return new FormGroup<ModelQualityBaselineConfigFormProperties>({
			BaseliningJobName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Container image configuration object for the monitoring job. */
	export interface ModelQualityAppSpecification {

		/** Required */
		ImageUri: string;
		ContainerEntrypoint?: Array<string>;
		ContainerArguments?: Array<string>;
		RecordPreprocessorSourceUri?: string;
		PostAnalyticsProcessorSourceUri?: string;
		ProblemType?: ProblemType;
		Environment?: MonitoringEnvironmentMap;
	}

	/** Container image configuration object for the monitoring job. */
	export interface ModelQualityAppSpecificationFormProperties {

		/** Required */
		ImageUri: FormControl<string | null | undefined>,
		RecordPreprocessorSourceUri: FormControl<string | null | undefined>,
		PostAnalyticsProcessorSourceUri: FormControl<string | null | undefined>,
		ProblemType: FormControl<ProblemType | null | undefined>,
	}
	export function CreateModelQualityAppSpecificationFormGroup() {
		return new FormGroup<ModelQualityAppSpecificationFormProperties>({
			ImageUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RecordPreprocessorSourceUri: new FormControl<string | null | undefined>(undefined),
			PostAnalyticsProcessorSourceUri: new FormControl<string | null | undefined>(undefined),
			ProblemType: new FormControl<ProblemType | null | undefined>(undefined),
		});

	}


	/** The input for the model quality monitoring job. Currently endponts are supported for input for model quality monitoring jobs. */
	export interface ModelQualityJobInput {

		/** Input object for the endpoint */
		EndpointInput?: EndpointInput;
		BatchTransformInput?: BatchTransformInput;

		/** Required */
		GroundTruthS3Input: MonitoringGroundTruthS3Input;
	}

	/** The input for the model quality monitoring job. Currently endponts are supported for input for model quality monitoring jobs. */
	export interface ModelQualityJobInputFormProperties {
	}
	export function CreateModelQualityJobInputFormGroup() {
		return new FormGroup<ModelQualityJobInputFormProperties>({
		});

	}

	export interface CreateMonitoringScheduleResponse {

		/** Required */
		MonitoringScheduleArn: string;
	}
	export interface CreateMonitoringScheduleResponseFormProperties {

		/** Required */
		MonitoringScheduleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateMonitoringScheduleResponseFormGroup() {
		return new FormGroup<CreateMonitoringScheduleResponseFormProperties>({
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateMonitoringScheduleRequest {

		/** Required */
		MonitoringScheduleName: string;

		/** Required */
		MonitoringScheduleConfig: MonitoringScheduleConfig;
		Tags?: Array<Tag>;
	}
	export interface CreateMonitoringScheduleRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,
	}
	export function CreateCreateMonitoringScheduleRequestFormGroup() {
		return new FormGroup<CreateMonitoringScheduleRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configures the monitoring schedule and defines the monitoring job. */
	export interface MonitoringScheduleConfig {
		ScheduleConfig?: ScheduleConfig;
		MonitoringJobDefinition?: MonitoringJobDefinition;
		MonitoringJobDefinitionName?: string;
		MonitoringType?: MonitoringType;
	}

	/** Configures the monitoring schedule and defines the monitoring job. */
	export interface MonitoringScheduleConfigFormProperties {
		MonitoringJobDefinitionName: FormControl<string | null | undefined>,
		MonitoringType: FormControl<MonitoringType | null | undefined>,
	}
	export function CreateMonitoringScheduleConfigFormGroup() {
		return new FormGroup<MonitoringScheduleConfigFormProperties>({
			MonitoringJobDefinitionName: new FormControl<string | null | undefined>(undefined),
			MonitoringType: new FormControl<MonitoringType | null | undefined>(undefined),
		});

	}


	/** Configuration details about the monitoring schedule. */
	export interface ScheduleConfig {

		/** Required */
		ScheduleExpression: string;
	}

	/** Configuration details about the monitoring schedule. */
	export interface ScheduleConfigFormProperties {

		/** Required */
		ScheduleExpression: FormControl<string | null | undefined>,
	}
	export function CreateScheduleConfigFormGroup() {
		return new FormGroup<ScheduleConfigFormProperties>({
			ScheduleExpression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines the monitoring job. */
	export interface MonitoringJobDefinition {
		BaselineConfig?: MonitoringBaselineConfig;

		/** Required */
		MonitoringInputs: Array<MonitoringInput>;

		/** Required */
		MonitoringOutputConfig: MonitoringOutputConfig;

		/** Required */
		MonitoringResources: MonitoringResources;

		/** Required */
		MonitoringAppSpecification: MonitoringAppSpecification;
		StoppingCondition?: MonitoringStoppingCondition;
		Environment?: MonitoringEnvironmentMap;
		NetworkConfig?: NetworkConfig;

		/** Required */
		RoleArn: string;
	}

	/** Defines the monitoring job. */
	export interface MonitoringJobDefinitionFormProperties {

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringJobDefinitionFormGroup() {
		return new FormGroup<MonitoringJobDefinitionFormProperties>({
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically. */
	export interface MonitoringBaselineConfig {
		BaseliningJobName?: string;
		ConstraintsResource?: MonitoringConstraintsResource;
		StatisticsResource?: MonitoringStatisticsResource;
	}

	/** Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically. */
	export interface MonitoringBaselineConfigFormProperties {
		BaseliningJobName: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringBaselineConfigFormGroup() {
		return new FormGroup<MonitoringBaselineConfigFormProperties>({
			BaseliningJobName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The inputs for a monitoring job. */
	export interface MonitoringInput {
		EndpointInput?: EndpointInput;
		BatchTransformInput?: BatchTransformInput;
	}

	/** The inputs for a monitoring job. */
	export interface MonitoringInputFormProperties {
	}
	export function CreateMonitoringInputFormGroup() {
		return new FormGroup<MonitoringInputFormProperties>({
		});

	}


	/** Container image configuration object for the monitoring job. */
	export interface MonitoringAppSpecification {

		/** Required */
		ImageUri: string;
		ContainerEntrypoint?: Array<string>;
		ContainerArguments?: Array<string>;
		RecordPreprocessorSourceUri?: string;
		PostAnalyticsProcessorSourceUri?: string;
	}

	/** Container image configuration object for the monitoring job. */
	export interface MonitoringAppSpecificationFormProperties {

		/** Required */
		ImageUri: FormControl<string | null | undefined>,
		RecordPreprocessorSourceUri: FormControl<string | null | undefined>,
		PostAnalyticsProcessorSourceUri: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringAppSpecificationFormGroup() {
		return new FormGroup<MonitoringAppSpecificationFormProperties>({
			ImageUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RecordPreprocessorSourceUri: new FormControl<string | null | undefined>(undefined),
			PostAnalyticsProcessorSourceUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs. */
	export interface NetworkConfig {
		EnableInterContainerTrafficEncryption?: boolean | null;
		EnableNetworkIsolation?: boolean | null;

		/** Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. */
		VpcConfig?: VpcConfig;
	}

	/** Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs. */
	export interface NetworkConfigFormProperties {
		EnableInterContainerTrafficEncryption: FormControl<boolean | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
	}
	export function CreateNetworkConfigFormGroup() {
		return new FormGroup<NetworkConfigFormProperties>({
			EnableInterContainerTrafficEncryption: new FormControl<boolean | null | undefined>(undefined),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum MonitoringType { DataQuality = 'DataQuality', ModelQuality = 'ModelQuality', ModelBias = 'ModelBias', ModelExplainability = 'ModelExplainability' }

	export interface CreateNotebookInstanceOutput {
		NotebookInstanceArn?: string;
	}
	export interface CreateNotebookInstanceOutputFormProperties {
		NotebookInstanceArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateNotebookInstanceOutputFormGroup() {
		return new FormGroup<CreateNotebookInstanceOutputFormProperties>({
			NotebookInstanceArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateNotebookInstanceInput {

		/** Required */
		NotebookInstanceName: string;

		/** Required */
		InstanceType: InstanceType;
		SubnetId?: string;
		SecurityGroupIds?: Array<string>;

		/** Required */
		RoleArn: string;
		KmsKeyId?: string;
		Tags?: Array<Tag>;
		LifecycleConfigName?: string;
		DirectInternetAccess?: ModelCacheSetting;
		VolumeSizeInGB?: number | null;
		AcceleratorTypes?: Array<NotebookInstanceAcceleratorType>;
		DefaultCodeRepository?: string;
		AdditionalCodeRepositories?: Array<string>;
		RootAccess?: ModelCacheSetting;
		PlatformIdentifier?: string;
		InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
	}
	export interface CreateNotebookInstanceInputFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,

		/** Required */
		InstanceType: FormControl<InstanceType | null | undefined>,
		SubnetId: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		LifecycleConfigName: FormControl<string | null | undefined>,
		DirectInternetAccess: FormControl<ModelCacheSetting | null | undefined>,
		VolumeSizeInGB: FormControl<number | null | undefined>,
		DefaultCodeRepository: FormControl<string | null | undefined>,
		RootAccess: FormControl<ModelCacheSetting | null | undefined>,
		PlatformIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateCreateNotebookInstanceInputFormGroup() {
		return new FormGroup<CreateNotebookInstanceInputFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<InstanceType | null | undefined>(undefined, [Validators.required]),
			SubnetId: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			LifecycleConfigName: new FormControl<string | null | undefined>(undefined),
			DirectInternetAccess: new FormControl<ModelCacheSetting | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined),
			DefaultCodeRepository: new FormControl<string | null | undefined>(undefined),
			RootAccess: new FormControl<ModelCacheSetting | null | undefined>(undefined),
			PlatformIdentifier: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NotebookInstanceAcceleratorType { 'ml.eia1.medium' = 'ml.eia1.medium', 'ml.eia1.large' = 'ml.eia1.large', 'ml.eia1.xlarge' = 'ml.eia1.xlarge', 'ml.eia2.medium' = 'ml.eia2.medium', 'ml.eia2.large' = 'ml.eia2.large', 'ml.eia2.xlarge' = 'ml.eia2.xlarge' }


	/** Information on the IMDS configuration of the notebook instance */
	export interface InstanceMetadataServiceConfiguration {

		/** Required */
		MinimumInstanceMetadataServiceVersion: string;
	}

	/** Information on the IMDS configuration of the notebook instance */
	export interface InstanceMetadataServiceConfigurationFormProperties {

		/** Required */
		MinimumInstanceMetadataServiceVersion: FormControl<string | null | undefined>,
	}
	export function CreateInstanceMetadataServiceConfigurationFormGroup() {
		return new FormGroup<InstanceMetadataServiceConfigurationFormProperties>({
			MinimumInstanceMetadataServiceVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateNotebookInstanceLifecycleConfigOutput {
		NotebookInstanceLifecycleConfigArn?: string;
	}
	export interface CreateNotebookInstanceLifecycleConfigOutputFormProperties {
		NotebookInstanceLifecycleConfigArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateNotebookInstanceLifecycleConfigOutputFormGroup() {
		return new FormGroup<CreateNotebookInstanceLifecycleConfigOutputFormProperties>({
			NotebookInstanceLifecycleConfigArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateNotebookInstanceLifecycleConfigInput {

		/** Required */
		NotebookInstanceLifecycleConfigName: string;
		OnCreate?: Array<NotebookInstanceLifecycleHook>;
		OnStart?: Array<NotebookInstanceLifecycleHook>;
	}
	export interface CreateNotebookInstanceLifecycleConfigInputFormProperties {

		/** Required */
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,
	}
	export function CreateCreateNotebookInstanceLifecycleConfigInputFormGroup() {
		return new FormGroup<CreateNotebookInstanceLifecycleConfigInputFormProperties>({
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>Contains the notebook instance lifecycle configuration script.</p> <p>Each lifecycle configuration script has a limit of 16384 characters.</p> <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p> <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p> <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p> */
	export interface NotebookInstanceLifecycleHook {
		Content?: string;
	}

	/** <p>Contains the notebook instance lifecycle configuration script.</p> <p>Each lifecycle configuration script has a limit of 16384 characters.</p> <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p> <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p> <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p> */
	export interface NotebookInstanceLifecycleHookFormProperties {
		Content: FormControl<string | null | undefined>,
	}
	export function CreateNotebookInstanceLifecycleHookFormGroup() {
		return new FormGroup<NotebookInstanceLifecycleHookFormProperties>({
			Content: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreatePipelineResponse {
		PipelineArn?: string;
	}
	export interface CreatePipelineResponseFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
	}
	export function CreateCreatePipelineResponseFormGroup() {
		return new FormGroup<CreatePipelineResponseFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreatePipelineRequest {

		/** Required */
		PipelineName: string;
		PipelineDisplayName?: string;
		PipelineDefinition?: string;
		PipelineDefinitionS3Location?: PipelineDefinitionS3Location;
		PipelineDescription?: string;

		/** Required */
		ClientRequestToken: string;

		/** Required */
		RoleArn: string;
		Tags?: Array<Tag>;
		ParallelismConfiguration?: ParallelismConfiguration;
	}
	export interface CreatePipelineRequestFormProperties {

		/** Required */
		PipelineName: FormControl<string | null | undefined>,
		PipelineDisplayName: FormControl<string | null | undefined>,
		PipelineDefinition: FormControl<string | null | undefined>,
		PipelineDescription: FormControl<string | null | undefined>,

		/** Required */
		ClientRequestToken: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreatePipelineRequestFormGroup() {
		return new FormGroup<CreatePipelineRequestFormProperties>({
			PipelineName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PipelineDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineDefinition: new FormControl<string | null | undefined>(undefined),
			PipelineDescription: new FormControl<string | null | undefined>(undefined),
			ClientRequestToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The location of the pipeline definition stored in Amazon S3. */
	export interface PipelineDefinitionS3Location {

		/** Required */
		Bucket: string;

		/** Required */
		ObjectKey: string;
		VersionId?: string;
	}

	/** The location of the pipeline definition stored in Amazon S3. */
	export interface PipelineDefinitionS3LocationFormProperties {

		/** Required */
		Bucket: FormControl<string | null | undefined>,

		/** Required */
		ObjectKey: FormControl<string | null | undefined>,
		VersionId: FormControl<string | null | undefined>,
	}
	export function CreatePipelineDefinitionS3LocationFormGroup() {
		return new FormGroup<PipelineDefinitionS3LocationFormProperties>({
			Bucket: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ObjectKey: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VersionId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configuration that controls the parallelism of the pipeline. By default, the parallelism configuration specified applies to all executions of the pipeline unless overridden. */
	export interface ParallelismConfiguration {

		/** Required */
		MaxParallelExecutionSteps: number;
	}

	/** Configuration that controls the parallelism of the pipeline. By default, the parallelism configuration specified applies to all executions of the pipeline unless overridden. */
	export interface ParallelismConfigurationFormProperties {

		/** Required */
		MaxParallelExecutionSteps: FormControl<number | null | undefined>,
	}
	export function CreateParallelismConfigurationFormGroup() {
		return new FormGroup<ParallelismConfigurationFormProperties>({
			MaxParallelExecutionSteps: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreatePresignedDomainUrlResponse {
		AuthorizedUrl?: string;
	}
	export interface CreatePresignedDomainUrlResponseFormProperties {
		AuthorizedUrl: FormControl<string | null | undefined>,
	}
	export function CreateCreatePresignedDomainUrlResponseFormGroup() {
		return new FormGroup<CreatePresignedDomainUrlResponseFormProperties>({
			AuthorizedUrl: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreatePresignedDomainUrlRequest {

		/** Required */
		DomainId: string;

		/** Required */
		UserProfileName: string;
		SessionExpirationDurationInSeconds?: number | null;
		ExpiresInSeconds?: number | null;
		SpaceName?: string;
	}
	export interface CreatePresignedDomainUrlRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		UserProfileName: FormControl<string | null | undefined>,
		SessionExpirationDurationInSeconds: FormControl<number | null | undefined>,
		ExpiresInSeconds: FormControl<number | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateCreatePresignedDomainUrlRequestFormGroup() {
		return new FormGroup<CreatePresignedDomainUrlRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SessionExpirationDurationInSeconds: new FormControl<number | null | undefined>(undefined),
			ExpiresInSeconds: new FormControl<number | null | undefined>(undefined),
			SpaceName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreatePresignedNotebookInstanceUrlOutput {
		AuthorizedUrl?: string;
	}
	export interface CreatePresignedNotebookInstanceUrlOutputFormProperties {
		AuthorizedUrl: FormControl<string | null | undefined>,
	}
	export function CreateCreatePresignedNotebookInstanceUrlOutputFormGroup() {
		return new FormGroup<CreatePresignedNotebookInstanceUrlOutputFormProperties>({
			AuthorizedUrl: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreatePresignedNotebookInstanceUrlInput {

		/** Required */
		NotebookInstanceName: string;
		SessionExpirationDurationInSeconds?: number | null;
	}
	export interface CreatePresignedNotebookInstanceUrlInputFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,
		SessionExpirationDurationInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateCreatePresignedNotebookInstanceUrlInputFormGroup() {
		return new FormGroup<CreatePresignedNotebookInstanceUrlInputFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SessionExpirationDurationInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CreateProcessingJobResponse {

		/** Required */
		ProcessingJobArn: string;
	}
	export interface CreateProcessingJobResponseFormProperties {

		/** Required */
		ProcessingJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateProcessingJobResponseFormGroup() {
		return new FormGroup<CreateProcessingJobResponseFormProperties>({
			ProcessingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateProcessingJobRequest {
		ProcessingInputs?: Array<ProcessingInput>;
		ProcessingOutputConfig?: ProcessingOutputConfig;

		/** Required */
		ProcessingJobName: string;

		/** Required */
		ProcessingResources: ProcessingResources;
		StoppingCondition?: ProcessingStoppingCondition;

		/** Required */
		AppSpecification: AppSpecification;
		Environment?: ProcessingEnvironmentMap;
		NetworkConfig?: NetworkConfig;

		/** Required */
		RoleArn: string;
		Tags?: Array<Tag>;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;
	}
	export interface CreateProcessingJobRequestFormProperties {

		/** Required */
		ProcessingJobName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateProcessingJobRequestFormGroup() {
		return new FormGroup<CreateProcessingJobRequestFormProperties>({
			ProcessingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The inputs for a processing job. The processing input must specify exactly one of either <code>S3Input</code> or <code>DatasetDefinition</code> types. */
	export interface ProcessingInput {

		/** Required */
		InputName: string;
		AppManaged?: boolean | null;
		S3Input?: ProcessingS3Input;
		DatasetDefinition?: DatasetDefinition;
	}

	/** The inputs for a processing job. The processing input must specify exactly one of either <code>S3Input</code> or <code>DatasetDefinition</code> types. */
	export interface ProcessingInputFormProperties {

		/** Required */
		InputName: FormControl<string | null | undefined>,
		AppManaged: FormControl<boolean | null | undefined>,
	}
	export function CreateProcessingInputFormGroup() {
		return new FormGroup<ProcessingInputFormProperties>({
			InputName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AppManaged: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration for downloading input data from Amazon S3 into the processing container. */
	export interface ProcessingS3Input {

		/** Required */
		S3Uri: string;
		LocalPath?: string;

		/** Required */
		S3DataType: ProcessingS3DataType;
		S3InputMode?: ProcessingS3InputMode;
		S3DataDistributionType?: S3DataDistribution;
		S3CompressionType?: CompressionType;
	}

	/** Configuration for downloading input data from Amazon S3 into the processing container. */
	export interface ProcessingS3InputFormProperties {

		/** Required */
		S3Uri: FormControl<string | null | undefined>,
		LocalPath: FormControl<string | null | undefined>,

		/** Required */
		S3DataType: FormControl<ProcessingS3DataType | null | undefined>,
		S3InputMode: FormControl<ProcessingS3InputMode | null | undefined>,
		S3DataDistributionType: FormControl<S3DataDistribution | null | undefined>,
		S3CompressionType: FormControl<CompressionType | null | undefined>,
	}
	export function CreateProcessingS3InputFormGroup() {
		return new FormGroup<ProcessingS3InputFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined),
			S3DataType: new FormControl<ProcessingS3DataType | null | undefined>(undefined, [Validators.required]),
			S3InputMode: new FormControl<ProcessingS3InputMode | null | undefined>(undefined),
			S3DataDistributionType: new FormControl<S3DataDistribution | null | undefined>(undefined),
			S3CompressionType: new FormControl<CompressionType | null | undefined>(undefined),
		});

	}

	export enum ProcessingS3DataType { ManifestFile = 'ManifestFile', S3Prefix = 'S3Prefix' }


	/** Configuration for Dataset Definition inputs. The Dataset Definition input must specify exactly one of either <code>AthenaDatasetDefinition</code> or <code>RedshiftDatasetDefinition</code> types. */
	export interface DatasetDefinition {

		/** Configuration for Athena Dataset Definition input. */
		AthenaDatasetDefinition?: AthenaDatasetDefinition;

		/** Configuration for Redshift Dataset Definition input. */
		RedshiftDatasetDefinition?: RedshiftDatasetDefinition;
		LocalPath?: string;
		DataDistributionType?: S3DataDistribution;
		InputMode?: ProcessingS3InputMode;
	}

	/** Configuration for Dataset Definition inputs. The Dataset Definition input must specify exactly one of either <code>AthenaDatasetDefinition</code> or <code>RedshiftDatasetDefinition</code> types. */
	export interface DatasetDefinitionFormProperties {
		LocalPath: FormControl<string | null | undefined>,
		DataDistributionType: FormControl<S3DataDistribution | null | undefined>,
		InputMode: FormControl<ProcessingS3InputMode | null | undefined>,
	}
	export function CreateDatasetDefinitionFormGroup() {
		return new FormGroup<DatasetDefinitionFormProperties>({
			LocalPath: new FormControl<string | null | undefined>(undefined),
			DataDistributionType: new FormControl<S3DataDistribution | null | undefined>(undefined),
			InputMode: new FormControl<ProcessingS3InputMode | null | undefined>(undefined),
		});

	}


	/** Configuration for Athena Dataset Definition input. */
	export interface AthenaDatasetDefinition {

		/**
		 * The name of the data catalog used in Athena query execution.
		 * Required
		 * Min length: 1
		 * Max length: 256
		 */
		Catalog: string;

		/**
		 * The name of the database used in the Athena query execution.
		 * Required
		 * Min length: 1
		 * Max length: 255
		 */
		Database: string;

		/**
		 * The SQL query statements, to be executed.
		 * Required
		 * Min length: 1
		 * Max length: 4096
		 */
		QueryString: string;

		/**
		 * The name of the workgroup in which the Athena query is being started.
		 * Min length: 1
		 * Max length: 128
		 */
		WorkGroup?: string | null;

		/** Required */
		OutputS3Uri: string;
		KmsKeyId?: string;

		/**
		 * The data storage format for Athena query results.
		 * Required
		 */
		OutputFormat: AthenaDatasetDefinitionOutputFormat;

		/** The compression used for Athena query results. */
		OutputCompression?: AthenaDatasetDefinitionOutputCompression | null;
	}

	/** Configuration for Athena Dataset Definition input. */
	export interface AthenaDatasetDefinitionFormProperties {

		/**
		 * The name of the data catalog used in Athena query execution.
		 * Required
		 * Min length: 1
		 * Max length: 256
		 */
		Catalog: FormControl<string | null | undefined>,

		/**
		 * The name of the database used in the Athena query execution.
		 * Required
		 * Min length: 1
		 * Max length: 255
		 */
		Database: FormControl<string | null | undefined>,

		/**
		 * The SQL query statements, to be executed.
		 * Required
		 * Min length: 1
		 * Max length: 4096
		 */
		QueryString: FormControl<string | null | undefined>,

		/**
		 * The name of the workgroup in which the Athena query is being started.
		 * Min length: 1
		 * Max length: 128
		 */
		WorkGroup: FormControl<string | null | undefined>,

		/** Required */
		OutputS3Uri: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,

		/**
		 * The data storage format for Athena query results.
		 * Required
		 */
		OutputFormat: FormControl<AthenaDatasetDefinitionOutputFormat | null | undefined>,

		/** The compression used for Athena query results. */
		OutputCompression: FormControl<AthenaDatasetDefinitionOutputCompression | null | undefined>,
	}
	export function CreateAthenaDatasetDefinitionFormGroup() {
		return new FormGroup<AthenaDatasetDefinitionFormProperties>({
			Catalog: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(256)]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(255), Validators.pattern('.*')]),
			QueryString: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4096), Validators.pattern('[\s\S]+')]),
			WorkGroup: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(128), Validators.pattern('[a-zA-Z0-9._-]+')]),
			OutputS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			OutputFormat: new FormControl<AthenaDatasetDefinitionOutputFormat | null | undefined>(undefined, [Validators.required]),
			OutputCompression: new FormControl<AthenaDatasetDefinitionOutputCompression | null | undefined>(undefined),
		});

	}

	export enum AthenaDatasetDefinitionOutputFormat { PARQUET = 'PARQUET', ORC = 'ORC', AVRO = 'AVRO', JSON = 'JSON', TEXTFILE = 'TEXTFILE' }

	export enum AthenaDatasetDefinitionOutputCompression { GZIP = 'GZIP', SNAPPY = 'SNAPPY', ZLIB = 'ZLIB' }


	/** Configuration for Redshift Dataset Definition input. */
	export interface RedshiftDatasetDefinition {

		/**
		 * The Redshift cluster Identifier.
		 * Required
		 * Min length: 1
		 * Max length: 63
		 */
		ClusterId: string;

		/**
		 * The name of the Redshift database used in Redshift query execution.
		 * Required
		 * Min length: 1
		 * Max length: 64
		 */
		Database: string;

		/**
		 * The database user name used in Redshift query execution.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		DbUser: string;

		/**
		 * The SQL query statements to be executed.
		 * Required
		 * Min length: 1
		 * Max length: 4096
		 */
		QueryString: string;

		/** Required */
		ClusterRoleArn: string;

		/** Required */
		OutputS3Uri: string;
		KmsKeyId?: string;

		/**
		 * The data storage format for Redshift query results.
		 * Required
		 */
		OutputFormat: RedshiftDatasetDefinitionOutputFormat;

		/** The compression used for Redshift query results. */
		OutputCompression?: RedshiftDatasetDefinitionOutputCompression | null;
	}

	/** Configuration for Redshift Dataset Definition input. */
	export interface RedshiftDatasetDefinitionFormProperties {

		/**
		 * The Redshift cluster Identifier.
		 * Required
		 * Min length: 1
		 * Max length: 63
		 */
		ClusterId: FormControl<string | null | undefined>,

		/**
		 * The name of the Redshift database used in Redshift query execution.
		 * Required
		 * Min length: 1
		 * Max length: 64
		 */
		Database: FormControl<string | null | undefined>,

		/**
		 * The database user name used in Redshift query execution.
		 * Required
		 * Min length: 1
		 * Max length: 128
		 */
		DbUser: FormControl<string | null | undefined>,

		/**
		 * The SQL query statements to be executed.
		 * Required
		 * Min length: 1
		 * Max length: 4096
		 */
		QueryString: FormControl<string | null | undefined>,

		/** Required */
		ClusterRoleArn: FormControl<string | null | undefined>,

		/** Required */
		OutputS3Uri: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,

		/**
		 * The data storage format for Redshift query results.
		 * Required
		 */
		OutputFormat: FormControl<RedshiftDatasetDefinitionOutputFormat | null | undefined>,

		/** The compression used for Redshift query results. */
		OutputCompression: FormControl<RedshiftDatasetDefinitionOutputCompression | null | undefined>,
	}
	export function CreateRedshiftDatasetDefinitionFormGroup() {
		return new FormGroup<RedshiftDatasetDefinitionFormProperties>({
			ClusterId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(63), Validators.pattern('.*')]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(64), Validators.pattern('.*')]),
			DbUser: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128), Validators.pattern('.*')]),
			QueryString: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(4096), Validators.pattern('[\s\S]+')]),
			ClusterRoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			OutputS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			OutputFormat: new FormControl<RedshiftDatasetDefinitionOutputFormat | null | undefined>(undefined, [Validators.required]),
			OutputCompression: new FormControl<RedshiftDatasetDefinitionOutputCompression | null | undefined>(undefined),
		});

	}

	export enum RedshiftDatasetDefinitionOutputFormat { PARQUET = 'PARQUET', CSV = 'CSV' }

	export enum RedshiftDatasetDefinitionOutputCompression { None = 'None', GZIP = 'GZIP', BZIP2 = 'BZIP2', ZSTD = 'ZSTD', SNAPPY = 'SNAPPY' }


	/** Configuration for uploading output from the processing container. */
	export interface ProcessingOutputConfig {

		/** Required */
		Outputs: Array<ProcessingOutput>;
		KmsKeyId?: string;
	}

	/** Configuration for uploading output from the processing container. */
	export interface ProcessingOutputConfigFormProperties {
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateProcessingOutputConfigFormGroup() {
		return new FormGroup<ProcessingOutputConfigFormProperties>({
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Describes the results of a processing job. The processing output must specify exactly one of either <code>S3Output</code> or <code>FeatureStoreOutput</code> types. */
	export interface ProcessingOutput {

		/** Required */
		OutputName: string;
		S3Output?: ProcessingS3Output;
		FeatureStoreOutput?: ProcessingFeatureStoreOutput;
		AppManaged?: boolean | null;
	}

	/** Describes the results of a processing job. The processing output must specify exactly one of either <code>S3Output</code> or <code>FeatureStoreOutput</code> types. */
	export interface ProcessingOutputFormProperties {

		/** Required */
		OutputName: FormControl<string | null | undefined>,
		AppManaged: FormControl<boolean | null | undefined>,
	}
	export function CreateProcessingOutputFormGroup() {
		return new FormGroup<ProcessingOutputFormProperties>({
			OutputName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AppManaged: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Configuration for uploading output data to Amazon S3 from the processing container. */
	export interface ProcessingS3Output {

		/** Required */
		S3Uri: string;

		/** Required */
		LocalPath: string;

		/** Required */
		S3UploadMode: ProcessingS3UploadMode;
	}

	/** Configuration for uploading output data to Amazon S3 from the processing container. */
	export interface ProcessingS3OutputFormProperties {

		/** Required */
		S3Uri: FormControl<string | null | undefined>,

		/** Required */
		LocalPath: FormControl<string | null | undefined>,

		/** Required */
		S3UploadMode: FormControl<ProcessingS3UploadMode | null | undefined>,
	}
	export function CreateProcessingS3OutputFormGroup() {
		return new FormGroup<ProcessingS3OutputFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			S3UploadMode: new FormControl<ProcessingS3UploadMode | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration for processing job outputs in Amazon SageMaker Feature Store. */
	export interface ProcessingFeatureStoreOutput {

		/** Required */
		FeatureGroupName: string;
	}

	/** Configuration for processing job outputs in Amazon SageMaker Feature Store. */
	export interface ProcessingFeatureStoreOutputFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,
	}
	export function CreateProcessingFeatureStoreOutputFormGroup() {
		return new FormGroup<ProcessingFeatureStoreOutputFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance. */
	export interface ProcessingResources {

		/** Required */
		ClusterConfig: ProcessingClusterConfig;
	}

	/** Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance. */
	export interface ProcessingResourcesFormProperties {
	}
	export function CreateProcessingResourcesFormGroup() {
		return new FormGroup<ProcessingResourcesFormProperties>({
		});

	}


	/** Configuration for the cluster used to run a processing job. */
	export interface ProcessingClusterConfig {

		/** Required */
		InstanceCount: number;

		/** Required */
		InstanceType: ProcessingInstanceType;

		/** Required */
		VolumeSizeInGB: number;
		VolumeKmsKeyId?: string;
	}

	/** Configuration for the cluster used to run a processing job. */
	export interface ProcessingClusterConfigFormProperties {

		/** Required */
		InstanceCount: FormControl<number | null | undefined>,

		/** Required */
		InstanceType: FormControl<ProcessingInstanceType | null | undefined>,

		/** Required */
		VolumeSizeInGB: FormControl<number | null | undefined>,
		VolumeKmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateProcessingClusterConfigFormGroup() {
		return new FormGroup<ProcessingClusterConfigFormProperties>({
			InstanceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<ProcessingInstanceType | null | undefined>(undefined, [Validators.required]),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			VolumeKmsKeyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped. */
	export interface ProcessingStoppingCondition {

		/** Required */
		MaxRuntimeInSeconds: number;
	}

	/** Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped. */
	export interface ProcessingStoppingConditionFormProperties {

		/** Required */
		MaxRuntimeInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateProcessingStoppingConditionFormGroup() {
		return new FormGroup<ProcessingStoppingConditionFormProperties>({
			MaxRuntimeInSeconds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration to run a processing job in a specified container image. */
	export interface AppSpecification {

		/** Required */
		ImageUri: string;
		ContainerEntrypoint?: Array<string>;
		ContainerArguments?: Array<string>;
	}

	/** Configuration to run a processing job in a specified container image. */
	export interface AppSpecificationFormProperties {

		/** Required */
		ImageUri: FormControl<string | null | undefined>,
	}
	export function CreateAppSpecificationFormGroup() {
		return new FormGroup<AppSpecificationFormProperties>({
			ImageUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ProcessingEnvironmentMap {
	}
	export interface ProcessingEnvironmentMapFormProperties {
	}
	export function CreateProcessingEnvironmentMapFormGroup() {
		return new FormGroup<ProcessingEnvironmentMapFormProperties>({
		});

	}


	/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
	export interface ExperimentConfig {
		ExperimentName?: string;
		TrialName?: string;
		TrialComponentDisplayName?: string;
		RunName?: string;
	}

	/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
	export interface ExperimentConfigFormProperties {
		ExperimentName: FormControl<string | null | undefined>,
		TrialName: FormControl<string | null | undefined>,
		TrialComponentDisplayName: FormControl<string | null | undefined>,
		RunName: FormControl<string | null | undefined>,
	}
	export function CreateExperimentConfigFormGroup() {
		return new FormGroup<ExperimentConfigFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			TrialName: new FormControl<string | null | undefined>(undefined),
			TrialComponentDisplayName: new FormControl<string | null | undefined>(undefined),
			RunName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateProjectOutput {

		/** Required */
		ProjectArn: string;

		/** Required */
		ProjectId: string;
	}
	export interface CreateProjectOutputFormProperties {

		/** Required */
		ProjectArn: FormControl<string | null | undefined>,

		/** Required */
		ProjectId: FormControl<string | null | undefined>,
	}
	export function CreateCreateProjectOutputFormGroup() {
		return new FormGroup<CreateProjectOutputFormProperties>({
			ProjectArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateProjectInput {

		/** Required */
		ProjectName: string;
		ProjectDescription?: string;

		/** Required */
		ServiceCatalogProvisioningDetails: ServiceCatalogProvisioningDetails;
		Tags?: Array<Tag>;
	}
	export interface CreateProjectInputFormProperties {

		/** Required */
		ProjectName: FormControl<string | null | undefined>,
		ProjectDescription: FormControl<string | null | undefined>,
	}
	export function CreateCreateProjectInputFormGroup() {
		return new FormGroup<CreateProjectInputFormProperties>({
			ProjectName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectDescription: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
	export interface ServiceCatalogProvisioningDetails {

		/** Required */
		ProductId: string;
		ProvisioningArtifactId?: string;
		PathId?: string;
		ProvisioningParameters?: Array<ProvisioningParameter>;
	}

	/** Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
	export interface ServiceCatalogProvisioningDetailsFormProperties {

		/** Required */
		ProductId: FormControl<string | null | undefined>,
		ProvisioningArtifactId: FormControl<string | null | undefined>,
		PathId: FormControl<string | null | undefined>,
	}
	export function CreateServiceCatalogProvisioningDetailsFormGroup() {
		return new FormGroup<ServiceCatalogProvisioningDetailsFormProperties>({
			ProductId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProvisioningArtifactId: new FormControl<string | null | undefined>(undefined),
			PathId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A key value pair used when you provision a project as a service catalog product. For information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
	export interface ProvisioningParameter {
		Key?: string;
		Value?: string;
	}

	/** A key value pair used when you provision a project as a service catalog product. For information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
	export interface ProvisioningParameterFormProperties {
		Key: FormControl<string | null | undefined>,
		Value: FormControl<string | null | undefined>,
	}
	export function CreateProvisioningParameterFormGroup() {
		return new FormGroup<ProvisioningParameterFormProperties>({
			Key: new FormControl<string | null | undefined>(undefined),
			Value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateSpaceResponse {
		SpaceArn?: string;
	}
	export interface CreateSpaceResponseFormProperties {
		SpaceArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateSpaceResponseFormGroup() {
		return new FormGroup<CreateSpaceResponseFormProperties>({
			SpaceArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateSpaceRequest {

		/** Required */
		DomainId: string;

		/** Required */
		SpaceName: string;
		Tags?: Array<Tag>;
		SpaceSettings?: SpaceSettings;
	}
	export interface CreateSpaceRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateCreateSpaceRequestFormGroup() {
		return new FormGroup<CreateSpaceRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpaceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A collection of space settings. */
	export interface SpaceSettings {

		/** The JupyterServer app settings. */
		JupyterServerAppSettings?: JupyterServerAppSettings;

		/** The KernelGateway app settings. */
		KernelGatewayAppSettings?: KernelGatewayAppSettings;
	}

	/** A collection of space settings. */
	export interface SpaceSettingsFormProperties {
	}
	export function CreateSpaceSettingsFormGroup() {
		return new FormGroup<SpaceSettingsFormProperties>({
		});

	}

	export interface CreateStudioLifecycleConfigResponse {
		StudioLifecycleConfigArn?: string;
	}
	export interface CreateStudioLifecycleConfigResponseFormProperties {
		StudioLifecycleConfigArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateStudioLifecycleConfigResponseFormGroup() {
		return new FormGroup<CreateStudioLifecycleConfigResponseFormProperties>({
			StudioLifecycleConfigArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateStudioLifecycleConfigRequest {

		/** Required */
		StudioLifecycleConfigName: string;

		/** Required */
		StudioLifecycleConfigContent: string;

		/** Required */
		StudioLifecycleConfigAppType: StudioLifecycleConfigAppType;
		Tags?: Array<Tag>;
	}
	export interface CreateStudioLifecycleConfigRequestFormProperties {

		/** Required */
		StudioLifecycleConfigName: FormControl<string | null | undefined>,

		/** Required */
		StudioLifecycleConfigContent: FormControl<string | null | undefined>,

		/** Required */
		StudioLifecycleConfigAppType: FormControl<StudioLifecycleConfigAppType | null | undefined>,
	}
	export function CreateCreateStudioLifecycleConfigRequestFormGroup() {
		return new FormGroup<CreateStudioLifecycleConfigRequestFormProperties>({
			StudioLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StudioLifecycleConfigContent: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StudioLifecycleConfigAppType: new FormControl<StudioLifecycleConfigAppType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum StudioLifecycleConfigAppType { JupyterServer = 'JupyterServer', KernelGateway = 'KernelGateway' }

	export interface CreateTrainingJobResponse {

		/** Required */
		TrainingJobArn: string;
	}
	export interface CreateTrainingJobResponseFormProperties {

		/** Required */
		TrainingJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateTrainingJobResponseFormGroup() {
		return new FormGroup<CreateTrainingJobResponseFormProperties>({
			TrainingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateTrainingJobRequest {

		/** Required */
		TrainingJobName: string;
		HyperParameters?: HyperParameters;

		/** Required */
		AlgorithmSpecification: AlgorithmSpecification;

		/** Required */
		RoleArn: string;
		InputDataConfig?: Array<Channel>;

		/** Required */
		OutputDataConfig: OutputDataConfig;

		/** Required */
		ResourceConfig: ResourceConfig;
		VpcConfig?: VpcConfig;

		/** Required */
		StoppingCondition: StoppingCondition;
		Tags?: Array<Tag>;
		EnableNetworkIsolation?: boolean | null;
		EnableInterContainerTrafficEncryption?: boolean | null;
		EnableManagedSpotTraining?: boolean | null;
		CheckpointConfig?: CheckpointConfig;

		/** Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. */
		DebugHookConfig?: DebugHookConfig;
		DebugRuleConfigurations?: Array<DebugRuleConfiguration>;

		/** Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data. */
		TensorBoardOutputConfig?: TensorBoardOutputConfig;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;

		/** Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths. */
		ProfilerConfig?: ProfilerConfig;
		ProfilerRuleConfigurations?: Array<ProfilerRuleConfiguration>;
		Environment?: TrainingEnvironmentMap;
		RetryStrategy?: RetryStrategy;
	}
	export interface CreateTrainingJobRequestFormProperties {

		/** Required */
		TrainingJobName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
		EnableInterContainerTrafficEncryption: FormControl<boolean | null | undefined>,
		EnableManagedSpotTraining: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateTrainingJobRequestFormGroup() {
		return new FormGroup<CreateTrainingJobRequestFormProperties>({
			TrainingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
			EnableInterContainerTrafficEncryption: new FormControl<boolean | null | undefined>(undefined),
			EnableManagedSpotTraining: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** <p>Specifies the training algorithm to use in a <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> request.</p> <p>For more information about algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For information about using your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon SageMaker</a>. </p> */
	export interface AlgorithmSpecification {
		TrainingImage?: string;
		AlgorithmName?: string;

		/**
		 * <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		 * Required
		 */
		TrainingInputMode: TrainingInputMode;
		MetricDefinitions?: Array<MetricDefinition>;
		EnableSageMakerMetricsTimeSeries?: boolean | null;
		ContainerEntrypoint?: Array<string>;
		ContainerArguments?: Array<string>;
		TrainingImageConfig?: TrainingImageConfig;
	}

	/** <p>Specifies the training algorithm to use in a <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> request.</p> <p>For more information about algorithms provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. For information about using your own algorithms, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html">Using Your Own Algorithms with Amazon SageMaker</a>. </p> */
	export interface AlgorithmSpecificationFormProperties {
		TrainingImage: FormControl<string | null | undefined>,
		AlgorithmName: FormControl<string | null | undefined>,

		/**
		 * <p>The training input mode that the algorithm supports. For more information about input modes, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>
		 * Required
		 */
		TrainingInputMode: FormControl<TrainingInputMode | null | undefined>,
		EnableSageMakerMetricsTimeSeries: FormControl<boolean | null | undefined>,
	}
	export function CreateAlgorithmSpecificationFormGroup() {
		return new FormGroup<AlgorithmSpecificationFormProperties>({
			TrainingImage: new FormControl<string | null | undefined>(undefined),
			AlgorithmName: new FormControl<string | null | undefined>(undefined),
			TrainingInputMode: new FormControl<TrainingInputMode | null | undefined>(undefined, [Validators.required]),
			EnableSageMakerMetricsTimeSeries: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The configuration to use an image from a private Docker registry for a training job. */
	export interface TrainingImageConfig {

		/** Required */
		TrainingRepositoryAccessMode: RepositoryAccessMode;
		TrainingRepositoryAuthConfig?: TrainingRepositoryAuthConfig;
	}

	/** The configuration to use an image from a private Docker registry for a training job. */
	export interface TrainingImageConfigFormProperties {

		/** Required */
		TrainingRepositoryAccessMode: FormControl<RepositoryAccessMode | null | undefined>,
	}
	export function CreateTrainingImageConfigFormGroup() {
		return new FormGroup<TrainingImageConfigFormProperties>({
			TrainingRepositoryAccessMode: new FormControl<RepositoryAccessMode | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An object containing authentication information for a private Docker registry. */
	export interface TrainingRepositoryAuthConfig {

		/** Required */
		TrainingRepositoryCredentialsProviderArn: string;
	}

	/** An object containing authentication information for a private Docker registry. */
	export interface TrainingRepositoryAuthConfigFormProperties {

		/** Required */
		TrainingRepositoryCredentialsProviderArn: FormControl<string | null | undefined>,
	}
	export function CreateTrainingRepositoryAuthConfigFormGroup() {
		return new FormGroup<TrainingRepositoryAuthConfigFormProperties>({
			TrainingRepositoryCredentialsProviderArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. */
	export interface DebugHookConfig {
		LocalPath?: string;

		/** Required */
		S3OutputPath: string;
		HookParameters?: HookParameters;
		CollectionConfigurations?: Array<CollectionConfiguration>;
	}

	/** Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. */
	export interface DebugHookConfigFormProperties {
		LocalPath: FormControl<string | null | undefined>,

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
	}
	export function CreateDebugHookConfigFormGroup() {
		return new FormGroup<DebugHookConfigFormProperties>({
			LocalPath: new FormControl<string | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface HookParameters {
	}
	export interface HookParametersFormProperties {
	}
	export function CreateHookParametersFormGroup() {
		return new FormGroup<HookParametersFormProperties>({
		});

	}


	/** Configuration information for the Amazon SageMaker Debugger output tensor collections. */
	export interface CollectionConfiguration {
		CollectionName?: string;
		CollectionParameters?: CollectionParameters;
	}

	/** Configuration information for the Amazon SageMaker Debugger output tensor collections. */
	export interface CollectionConfigurationFormProperties {
		CollectionName: FormControl<string | null | undefined>,
	}
	export function CreateCollectionConfigurationFormGroup() {
		return new FormGroup<CollectionConfigurationFormProperties>({
			CollectionName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CollectionParameters {
	}
	export interface CollectionParametersFormProperties {
	}
	export function CreateCollectionParametersFormGroup() {
		return new FormGroup<CollectionParametersFormProperties>({
		});

	}


	/** Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the <code>DebugRuleConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. */
	export interface DebugRuleConfiguration {

		/** Required */
		RuleConfigurationName: string;
		LocalPath?: string;
		S3OutputPath?: string;

		/** Required */
		RuleEvaluatorImage: string;
		InstanceType?: ProcessingInstanceType;
		VolumeSizeInGB?: number | null;
		RuleParameters?: RuleParameters;
	}

	/** Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the <code>DebugRuleConfiguration</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. */
	export interface DebugRuleConfigurationFormProperties {

		/** Required */
		RuleConfigurationName: FormControl<string | null | undefined>,
		LocalPath: FormControl<string | null | undefined>,
		S3OutputPath: FormControl<string | null | undefined>,

		/** Required */
		RuleEvaluatorImage: FormControl<string | null | undefined>,
		InstanceType: FormControl<ProcessingInstanceType | null | undefined>,
		VolumeSizeInGB: FormControl<number | null | undefined>,
	}
	export function CreateDebugRuleConfigurationFormGroup() {
		return new FormGroup<DebugRuleConfigurationFormProperties>({
			RuleConfigurationName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined),
			RuleEvaluatorImage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<ProcessingInstanceType | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface RuleParameters {
	}
	export interface RuleParametersFormProperties {
	}
	export function CreateRuleParametersFormGroup() {
		return new FormGroup<RuleParametersFormProperties>({
		});

	}


	/** Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data. */
	export interface TensorBoardOutputConfig {
		LocalPath?: string;

		/** Required */
		S3OutputPath: string;
	}

	/** Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data. */
	export interface TensorBoardOutputConfigFormProperties {
		LocalPath: FormControl<string | null | undefined>,

		/** Required */
		S3OutputPath: FormControl<string | null | undefined>,
	}
	export function CreateTensorBoardOutputConfigFormGroup() {
		return new FormGroup<TensorBoardOutputConfigFormProperties>({
			LocalPath: new FormControl<string | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths. */
	export interface ProfilerConfig {
		S3OutputPath?: string;
		ProfilingIntervalInMilliseconds?: number | null;
		ProfilingParameters?: ProfilingParameters;
		DisableProfiler?: boolean | null;
	}

	/** Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths. */
	export interface ProfilerConfigFormProperties {
		S3OutputPath: FormControl<string | null | undefined>,
		ProfilingIntervalInMilliseconds: FormControl<number | null | undefined>,
		DisableProfiler: FormControl<boolean | null | undefined>,
	}
	export function CreateProfilerConfigFormGroup() {
		return new FormGroup<ProfilerConfigFormProperties>({
			S3OutputPath: new FormControl<string | null | undefined>(undefined),
			ProfilingIntervalInMilliseconds: new FormControl<number | null | undefined>(undefined),
			DisableProfiler: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ProfilingParameters {
	}
	export interface ProfilingParametersFormProperties {
	}
	export function CreateProfilingParametersFormGroup() {
		return new FormGroup<ProfilingParametersFormProperties>({
		});

	}


	/** Configuration information for profiling rules. */
	export interface ProfilerRuleConfiguration {

		/** Required */
		RuleConfigurationName: string;
		LocalPath?: string;
		S3OutputPath?: string;

		/** Required */
		RuleEvaluatorImage: string;
		InstanceType?: ProcessingInstanceType;
		VolumeSizeInGB?: number | null;
		RuleParameters?: RuleParameters;
	}

	/** Configuration information for profiling rules. */
	export interface ProfilerRuleConfigurationFormProperties {

		/** Required */
		RuleConfigurationName: FormControl<string | null | undefined>,
		LocalPath: FormControl<string | null | undefined>,
		S3OutputPath: FormControl<string | null | undefined>,

		/** Required */
		RuleEvaluatorImage: FormControl<string | null | undefined>,
		InstanceType: FormControl<ProcessingInstanceType | null | undefined>,
		VolumeSizeInGB: FormControl<number | null | undefined>,
	}
	export function CreateProfilerRuleConfigurationFormGroup() {
		return new FormGroup<ProfilerRuleConfigurationFormProperties>({
			RuleConfigurationName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LocalPath: new FormControl<string | null | undefined>(undefined),
			S3OutputPath: new FormControl<string | null | undefined>(undefined),
			RuleEvaluatorImage: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<ProcessingInstanceType | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface TrainingEnvironmentMap {
	}
	export interface TrainingEnvironmentMapFormProperties {
	}
	export function CreateTrainingEnvironmentMapFormGroup() {
		return new FormGroup<TrainingEnvironmentMapFormProperties>({
		});

	}

	export interface CreateTransformJobResponse {

		/** Required */
		TransformJobArn: string;
	}
	export interface CreateTransformJobResponseFormProperties {

		/** Required */
		TransformJobArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateTransformJobResponseFormGroup() {
		return new FormGroup<CreateTransformJobResponseFormProperties>({
			TransformJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateTransformJobRequest {

		/** Required */
		TransformJobName: string;

		/** Required */
		ModelName: string;
		MaxConcurrentTransforms?: number | null;
		ModelClientConfig?: ModelClientConfig;
		MaxPayloadInMB?: number | null;
		BatchStrategy?: BatchStrategy;
		Environment?: TransformEnvironmentMap;

		/** Required */
		TransformInput: TransformInput;

		/** Required */
		TransformOutput: TransformOutput;
		DataCaptureConfig?: BatchDataCaptureConfig;

		/** Required */
		TransformResources: TransformResources;
		DataProcessing?: DataProcessing;
		Tags?: Array<Tag>;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;
	}
	export interface CreateTransformJobRequestFormProperties {

		/** Required */
		TransformJobName: FormControl<string | null | undefined>,

		/** Required */
		ModelName: FormControl<string | null | undefined>,
		MaxConcurrentTransforms: FormControl<number | null | undefined>,
		MaxPayloadInMB: FormControl<number | null | undefined>,
		BatchStrategy: FormControl<BatchStrategy | null | undefined>,
	}
	export function CreateCreateTransformJobRequestFormGroup() {
		return new FormGroup<CreateTransformJobRequestFormProperties>({
			TransformJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxConcurrentTransforms: new FormControl<number | null | undefined>(undefined),
			MaxPayloadInMB: new FormControl<number | null | undefined>(undefined),
			BatchStrategy: new FormControl<BatchStrategy | null | undefined>(undefined),
		});

	}


	/** Configures the timeout and maximum number of retries for processing a transform job invocation. */
	export interface ModelClientConfig {
		InvocationsTimeoutInSeconds?: number | null;
		InvocationsMaxRetries?: number | null;
	}

	/** Configures the timeout and maximum number of retries for processing a transform job invocation. */
	export interface ModelClientConfigFormProperties {
		InvocationsTimeoutInSeconds: FormControl<number | null | undefined>,
		InvocationsMaxRetries: FormControl<number | null | undefined>,
	}
	export function CreateModelClientConfigFormGroup() {
		return new FormGroup<ModelClientConfigFormProperties>({
			InvocationsTimeoutInSeconds: new FormControl<number | null | undefined>(undefined),
			InvocationsMaxRetries: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Configuration to control how SageMaker captures inference data for batch transform jobs. */
	export interface BatchDataCaptureConfig {

		/** Required */
		DestinationS3Uri: string;
		KmsKeyId?: string;
		GenerateInferenceId?: boolean | null;
	}

	/** Configuration to control how SageMaker captures inference data for batch transform jobs. */
	export interface BatchDataCaptureConfigFormProperties {

		/** Required */
		DestinationS3Uri: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		GenerateInferenceId: FormControl<boolean | null | undefined>,
	}
	export function CreateBatchDataCaptureConfigFormGroup() {
		return new FormGroup<BatchDataCaptureConfigFormProperties>({
			DestinationS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			GenerateInferenceId: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>. */
	export interface DataProcessing {
		InputFilter?: string;
		OutputFilter?: string;
		JoinSource?: JoinSource;
	}

	/** The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>. */
	export interface DataProcessingFormProperties {
		InputFilter: FormControl<string | null | undefined>,
		OutputFilter: FormControl<string | null | undefined>,
		JoinSource: FormControl<JoinSource | null | undefined>,
	}
	export function CreateDataProcessingFormGroup() {
		return new FormGroup<DataProcessingFormProperties>({
			InputFilter: new FormControl<string | null | undefined>(undefined),
			OutputFilter: new FormControl<string | null | undefined>(undefined),
			JoinSource: new FormControl<JoinSource | null | undefined>(undefined),
		});

	}

	export enum JoinSource { Input = 'Input', None = 'None' }

	export interface CreateTrialResponse {
		TrialArn?: string;
	}
	export interface CreateTrialResponseFormProperties {
		TrialArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateTrialResponseFormGroup() {
		return new FormGroup<CreateTrialResponseFormProperties>({
			TrialArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTrialRequest {

		/** Required */
		TrialName: string;
		DisplayName?: string;

		/** Required */
		ExperimentName: string;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		Tags?: Array<Tag>;
	}
	export interface CreateTrialRequestFormProperties {

		/** Required */
		TrialName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,

		/** Required */
		ExperimentName: FormControl<string | null | undefined>,
	}
	export function CreateCreateTrialRequestFormGroup() {
		return new FormGroup<CreateTrialRequestFormProperties>({
			TrialName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			ExperimentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateTrialComponentResponse {
		TrialComponentArn?: string;
	}
	export interface CreateTrialComponentResponseFormProperties {
		TrialComponentArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateTrialComponentResponseFormGroup() {
		return new FormGroup<CreateTrialComponentResponseFormProperties>({
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTrialComponentRequest {

		/** Required */
		TrialComponentName: string;
		DisplayName?: string;
		Status?: TrialComponentStatus;
		StartTime?: Date;
		EndTime?: Date;
		Parameters?: TrialComponentParameters;
		InputArtifacts?: TrialComponentArtifacts;
		OutputArtifacts?: TrialComponentArtifacts;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		Tags?: Array<Tag>;
	}
	export interface CreateTrialComponentRequestFormProperties {

		/** Required */
		TrialComponentName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
	}
	export function CreateCreateTrialComponentRequestFormGroup() {
		return new FormGroup<CreateTrialComponentRequestFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
			EndTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The status of the trial component. */
	export interface TrialComponentStatus {
		PrimaryStatus?: TrialComponentPrimaryStatus;
		Message?: string;
	}

	/** The status of the trial component. */
	export interface TrialComponentStatusFormProperties {
		PrimaryStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateTrialComponentStatusFormGroup() {
		return new FormGroup<TrialComponentStatusFormProperties>({
			PrimaryStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TrialComponentPrimaryStatus { InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Stopping = 'Stopping', Stopped = 'Stopped' }

	export interface TrialComponentParameters {
	}
	export interface TrialComponentParametersFormProperties {
	}
	export function CreateTrialComponentParametersFormGroup() {
		return new FormGroup<TrialComponentParametersFormProperties>({
		});

	}

	export interface TrialComponentArtifacts {
	}
	export interface TrialComponentArtifactsFormProperties {
	}
	export function CreateTrialComponentArtifactsFormGroup() {
		return new FormGroup<TrialComponentArtifactsFormProperties>({
		});

	}

	export interface CreateUserProfileResponse {
		UserProfileArn?: string;
	}
	export interface CreateUserProfileResponseFormProperties {
		UserProfileArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateUserProfileResponseFormGroup() {
		return new FormGroup<CreateUserProfileResponseFormProperties>({
			UserProfileArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateUserProfileRequest {

		/** Required */
		DomainId: string;

		/** Required */
		UserProfileName: string;
		SingleSignOnUserIdentifier?: string;
		SingleSignOnUserValue?: string;
		Tags?: Array<Tag>;
		UserSettings?: UserSettings;
	}
	export interface CreateUserProfileRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		UserProfileName: FormControl<string | null | undefined>,
		SingleSignOnUserIdentifier: FormControl<string | null | undefined>,
		SingleSignOnUserValue: FormControl<string | null | undefined>,
	}
	export function CreateCreateUserProfileRequestFormGroup() {
		return new FormGroup<CreateUserProfileRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SingleSignOnUserIdentifier: new FormControl<string | null | undefined>(undefined),
			SingleSignOnUserValue: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateWorkforceResponse {

		/** Required */
		WorkforceArn: string;
	}
	export interface CreateWorkforceResponseFormProperties {

		/** Required */
		WorkforceArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateWorkforceResponseFormGroup() {
		return new FormGroup<CreateWorkforceResponseFormProperties>({
			WorkforceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateWorkforceRequest {
		CognitoConfig?: CognitoConfig;
		OidcConfig?: OidcConfig;

		/** A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses. */
		SourceIpConfig?: SourceIpConfig;

		/** Required */
		WorkforceName: string;
		Tags?: Array<Tag>;
		WorkforceVpcConfig?: WorkforceVpcConfigRequest;
	}
	export interface CreateWorkforceRequestFormProperties {

		/** Required */
		WorkforceName: FormControl<string | null | undefined>,
	}
	export function CreateCreateWorkforceRequestFormGroup() {
		return new FormGroup<CreateWorkforceRequestFormProperties>({
			WorkforceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Use this parameter to configure your Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> Amazon Cognito user pool</a>. */
	export interface CognitoConfig {

		/** Required */
		UserPool: string;

		/** Required */
		ClientId: string;
	}

	/** Use this parameter to configure your Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html"> Amazon Cognito user pool</a>. */
	export interface CognitoConfigFormProperties {

		/** Required */
		UserPool: FormControl<string | null | undefined>,

		/** Required */
		ClientId: FormControl<string | null | undefined>,
	}
	export function CreateCognitoConfigFormGroup() {
		return new FormGroup<CognitoConfigFormProperties>({
			UserPool: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Use this parameter to configure your OIDC Identity Provider (IdP). */
	export interface OidcConfig {

		/** Required */
		ClientId: string;

		/** Required */
		ClientSecret: string;

		/** Required */
		Issuer: string;

		/** Required */
		AuthorizationEndpoint: string;

		/** Required */
		TokenEndpoint: string;

		/** Required */
		UserInfoEndpoint: string;

		/** Required */
		LogoutEndpoint: string;

		/** Required */
		JwksUri: string;
	}

	/** Use this parameter to configure your OIDC Identity Provider (IdP). */
	export interface OidcConfigFormProperties {

		/** Required */
		ClientId: FormControl<string | null | undefined>,

		/** Required */
		ClientSecret: FormControl<string | null | undefined>,

		/** Required */
		Issuer: FormControl<string | null | undefined>,

		/** Required */
		AuthorizationEndpoint: FormControl<string | null | undefined>,

		/** Required */
		TokenEndpoint: FormControl<string | null | undefined>,

		/** Required */
		UserInfoEndpoint: FormControl<string | null | undefined>,

		/** Required */
		LogoutEndpoint: FormControl<string | null | undefined>,

		/** Required */
		JwksUri: FormControl<string | null | undefined>,
	}
	export function CreateOidcConfigFormGroup() {
		return new FormGroup<OidcConfigFormProperties>({
			ClientId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientSecret: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Issuer: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AuthorizationEndpoint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TokenEndpoint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserInfoEndpoint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LogoutEndpoint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JwksUri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses. */
	export interface SourceIpConfig {

		/** Required */
		Cidrs: Array<string>;
	}

	/** A list of IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to login to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses. */
	export interface SourceIpConfigFormProperties {
	}
	export function CreateSourceIpConfigFormGroup() {
		return new FormGroup<SourceIpConfigFormProperties>({
		});

	}


	/** The VPC object you use to create or update a workforce. */
	export interface WorkforceVpcConfigRequest {
		VpcId?: string;
		SecurityGroupIds?: Array<string>;
		Subnets?: Array<string>;
	}

	/** The VPC object you use to create or update a workforce. */
	export interface WorkforceVpcConfigRequestFormProperties {
		VpcId: FormControl<string | null | undefined>,
	}
	export function CreateWorkforceVpcConfigRequestFormGroup() {
		return new FormGroup<WorkforceVpcConfigRequestFormProperties>({
			VpcId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateWorkteamResponse {
		WorkteamArn?: string;
	}
	export interface CreateWorkteamResponseFormProperties {
		WorkteamArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateWorkteamResponseFormGroup() {
		return new FormGroup<CreateWorkteamResponseFormProperties>({
			WorkteamArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateWorkteamRequest {

		/** Required */
		WorkteamName: string;
		WorkforceName?: string;

		/** Required */
		MemberDefinitions: Array<MemberDefinition>;

		/** Required */
		Description: string;
		NotificationConfiguration?: NotificationConfiguration;
		Tags?: Array<Tag>;
	}
	export interface CreateWorkteamRequestFormProperties {

		/** Required */
		WorkteamName: FormControl<string | null | undefined>,
		WorkforceName: FormControl<string | null | undefined>,

		/** Required */
		Description: FormControl<string | null | undefined>,
	}
	export function CreateCreateWorkteamRequestFormGroup() {
		return new FormGroup<CreateWorkteamRequestFormProperties>({
			WorkteamName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			WorkforceName: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team. */
	export interface MemberDefinition {
		CognitoMemberDefinition?: CognitoMemberDefinition;
		OidcMemberDefinition?: OidcMemberDefinition;
	}

	/** Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team. */
	export interface MemberDefinitionFormProperties {
	}
	export function CreateMemberDefinitionFormGroup() {
		return new FormGroup<MemberDefinitionFormProperties>({
		});

	}


	/** Identifies a Amazon Cognito user group. A user group can be used in on or more work teams. */
	export interface CognitoMemberDefinition {

		/** Required */
		UserPool: string;

		/** Required */
		UserGroup: string;

		/** Required */
		ClientId: string;
	}

	/** Identifies a Amazon Cognito user group. A user group can be used in on or more work teams. */
	export interface CognitoMemberDefinitionFormProperties {

		/** Required */
		UserPool: FormControl<string | null | undefined>,

		/** Required */
		UserGroup: FormControl<string | null | undefined>,

		/** Required */
		ClientId: FormControl<string | null | undefined>,
	}
	export function CreateCognitoMemberDefinitionFormGroup() {
		return new FormGroup<CognitoMemberDefinitionFormProperties>({
			UserPool: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserGroup: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team. */
	export interface OidcMemberDefinition {

		/** Required */
		Groups: Array<string>;
	}

	/** A list of user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of <code>Groups</code>, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team. */
	export interface OidcMemberDefinitionFormProperties {
	}
	export function CreateOidcMemberDefinitionFormGroup() {
		return new FormGroup<OidcMemberDefinitionFormProperties>({
		});

	}


	/** Configures Amazon SNS notifications of available or expiring work items for work teams. */
	export interface NotificationConfiguration {
		NotificationTopicArn?: string;
	}

	/** Configures Amazon SNS notifications of available or expiring work items for work teams. */
	export interface NotificationConfigurationFormProperties {
		NotificationTopicArn: FormControl<string | null | undefined>,
	}
	export function CreateNotificationConfigurationFormGroup() {
		return new FormGroup<NotificationConfigurationFormProperties>({
			NotificationTopicArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteActionResponse {
		ActionArn?: string;
	}
	export interface DeleteActionResponseFormProperties {
		ActionArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteActionResponseFormGroup() {
		return new FormGroup<DeleteActionResponseFormProperties>({
			ActionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteActionRequest {

		/** Required */
		ActionName: string;
	}
	export interface DeleteActionRequestFormProperties {

		/** Required */
		ActionName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteActionRequestFormGroup() {
		return new FormGroup<DeleteActionRequestFormProperties>({
			ActionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteAlgorithmInput {

		/** Required */
		AlgorithmName: string;
	}
	export interface DeleteAlgorithmInputFormProperties {

		/** Required */
		AlgorithmName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteAlgorithmInputFormGroup() {
		return new FormGroup<DeleteAlgorithmInputFormProperties>({
			AlgorithmName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteAppRequest {

		/** Required */
		DomainId: string;
		UserProfileName?: string;

		/** Required */
		AppType: AppType;

		/** Required */
		AppName: string;
		SpaceName?: string;
	}
	export interface DeleteAppRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,

		/** Required */
		AppType: FormControl<AppType | null | undefined>,

		/** Required */
		AppName: FormControl<string | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteAppRequestFormGroup() {
		return new FormGroup<DeleteAppRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			AppType: new FormControl<AppType | null | undefined>(undefined, [Validators.required]),
			AppName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpaceName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteAppImageConfigRequest {

		/** Required */
		AppImageConfigName: string;
	}
	export interface DeleteAppImageConfigRequestFormProperties {

		/** Required */
		AppImageConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteAppImageConfigRequestFormGroup() {
		return new FormGroup<DeleteAppImageConfigRequestFormProperties>({
			AppImageConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteArtifactResponse {
		ArtifactArn?: string;
	}
	export interface DeleteArtifactResponseFormProperties {
		ArtifactArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteArtifactResponseFormGroup() {
		return new FormGroup<DeleteArtifactResponseFormProperties>({
			ArtifactArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteArtifactRequest {
		ArtifactArn?: string;
		Source?: ArtifactSource;
	}
	export interface DeleteArtifactRequestFormProperties {
		ArtifactArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteArtifactRequestFormGroup() {
		return new FormGroup<DeleteArtifactRequestFormProperties>({
			ArtifactArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteAssociationResponse {
		SourceArn?: string;
		DestinationArn?: string;
	}
	export interface DeleteAssociationResponseFormProperties {
		SourceArn: FormControl<string | null | undefined>,
		DestinationArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteAssociationResponseFormGroup() {
		return new FormGroup<DeleteAssociationResponseFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined),
			DestinationArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteAssociationRequest {

		/** Required */
		SourceArn: string;

		/** Required */
		DestinationArn: string;
	}
	export interface DeleteAssociationRequestFormProperties {

		/** Required */
		SourceArn: FormControl<string | null | undefined>,

		/** Required */
		DestinationArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteAssociationRequestFormGroup() {
		return new FormGroup<DeleteAssociationRequestFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DestinationArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteCodeRepositoryInput {

		/** Required */
		CodeRepositoryName: string;
	}
	export interface DeleteCodeRepositoryInputFormProperties {

		/** Required */
		CodeRepositoryName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteCodeRepositoryInputFormGroup() {
		return new FormGroup<DeleteCodeRepositoryInputFormProperties>({
			CodeRepositoryName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteContextResponse {
		ContextArn?: string;
	}
	export interface DeleteContextResponseFormProperties {
		ContextArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteContextResponseFormGroup() {
		return new FormGroup<DeleteContextResponseFormProperties>({
			ContextArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteContextRequest {

		/** Required */
		ContextName: string;
	}
	export interface DeleteContextRequestFormProperties {

		/** Required */
		ContextName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteContextRequestFormGroup() {
		return new FormGroup<DeleteContextRequestFormProperties>({
			ContextName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteDataQualityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DeleteDataQualityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteDataQualityJobDefinitionRequestFormGroup() {
		return new FormGroup<DeleteDataQualityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteDeviceFleetRequest {

		/** Required */
		DeviceFleetName: string;
	}
	export interface DeleteDeviceFleetRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteDeviceFleetRequestFormGroup() {
		return new FormGroup<DeleteDeviceFleetRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteDomainRequest {

		/** Required */
		DomainId: string;
		RetentionPolicy?: RetentionPolicy;
	}
	export interface DeleteDomainRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteDomainRequestFormGroup() {
		return new FormGroup<DeleteDomainRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The retention policy for data stored on an Amazon Elastic File System (EFS) volume. */
	export interface RetentionPolicy {
		HomeEfsFileSystem?: RetentionType;
	}

	/** The retention policy for data stored on an Amazon Elastic File System (EFS) volume. */
	export interface RetentionPolicyFormProperties {
		HomeEfsFileSystem: FormControl<RetentionType | null | undefined>,
	}
	export function CreateRetentionPolicyFormGroup() {
		return new FormGroup<RetentionPolicyFormProperties>({
			HomeEfsFileSystem: new FormControl<RetentionType | null | undefined>(undefined),
		});

	}

	export enum RetentionType { Retain = 'Retain', Delete = 'Delete' }

	export interface DeleteEdgeDeploymentPlanRequest {

		/** Required */
		EdgeDeploymentPlanName: string;
	}
	export interface DeleteEdgeDeploymentPlanRequestFormProperties {

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteEdgeDeploymentPlanRequestFormGroup() {
		return new FormGroup<DeleteEdgeDeploymentPlanRequestFormProperties>({
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteEdgeDeploymentStageRequest {

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		StageName: string;
	}
	export interface DeleteEdgeDeploymentStageRequestFormProperties {

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,

		/** Required */
		StageName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteEdgeDeploymentStageRequestFormGroup() {
		return new FormGroup<DeleteEdgeDeploymentStageRequestFormProperties>({
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteEndpointInput {

		/** Required */
		EndpointName: string;
	}
	export interface DeleteEndpointInputFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteEndpointInputFormGroup() {
		return new FormGroup<DeleteEndpointInputFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteEndpointConfigInput {

		/** Required */
		EndpointConfigName: string;
	}
	export interface DeleteEndpointConfigInputFormProperties {

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteEndpointConfigInputFormGroup() {
		return new FormGroup<DeleteEndpointConfigInputFormProperties>({
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteExperimentResponse {
		ExperimentArn?: string;
	}
	export interface DeleteExperimentResponseFormProperties {
		ExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteExperimentResponseFormGroup() {
		return new FormGroup<DeleteExperimentResponseFormProperties>({
			ExperimentArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteExperimentRequest {

		/** Required */
		ExperimentName: string;
	}
	export interface DeleteExperimentRequestFormProperties {

		/** Required */
		ExperimentName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteExperimentRequestFormGroup() {
		return new FormGroup<DeleteExperimentRequestFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteFeatureGroupRequest {

		/** Required */
		FeatureGroupName: string;
	}
	export interface DeleteFeatureGroupRequestFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteFeatureGroupRequestFormGroup() {
		return new FormGroup<DeleteFeatureGroupRequestFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteFlowDefinitionResponse {
	}
	export interface DeleteFlowDefinitionResponseFormProperties {
	}
	export function CreateDeleteFlowDefinitionResponseFormGroup() {
		return new FormGroup<DeleteFlowDefinitionResponseFormProperties>({
		});

	}

	export interface DeleteFlowDefinitionRequest {

		/** Required */
		FlowDefinitionName: string;
	}
	export interface DeleteFlowDefinitionRequestFormProperties {

		/** Required */
		FlowDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteFlowDefinitionRequestFormGroup() {
		return new FormGroup<DeleteFlowDefinitionRequestFormProperties>({
			FlowDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteHubRequest {

		/** Required */
		HubName: string;
	}
	export interface DeleteHubRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteHubRequestFormGroup() {
		return new FormGroup<DeleteHubRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteHubContentRequest {

		/** Required */
		HubName: string;

		/** Required */
		HubContentType: HubContentType;

		/** Required */
		HubContentName: string;

		/** Required */
		HubContentVersion: string;
	}
	export interface DeleteHubContentRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubContentType: FormControl<HubContentType | null | undefined>,

		/** Required */
		HubContentName: FormControl<string | null | undefined>,

		/** Required */
		HubContentVersion: FormControl<string | null | undefined>,
	}
	export function CreateDeleteHubContentRequestFormGroup() {
		return new FormGroup<DeleteHubContentRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentType: new FormControl<HubContentType | null | undefined>(undefined, [Validators.required]),
			HubContentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum HubContentType { Model = 'Model', Notebook = 'Notebook' }

	export interface DeleteHumanTaskUiResponse {
	}
	export interface DeleteHumanTaskUiResponseFormProperties {
	}
	export function CreateDeleteHumanTaskUiResponseFormGroup() {
		return new FormGroup<DeleteHumanTaskUiResponseFormProperties>({
		});

	}

	export interface DeleteHumanTaskUiRequest {

		/** Required */
		HumanTaskUiName: string;
	}
	export interface DeleteHumanTaskUiRequestFormProperties {

		/** Required */
		HumanTaskUiName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteHumanTaskUiRequestFormGroup() {
		return new FormGroup<DeleteHumanTaskUiRequestFormProperties>({
			HumanTaskUiName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteImageResponse {
	}
	export interface DeleteImageResponseFormProperties {
	}
	export function CreateDeleteImageResponseFormGroup() {
		return new FormGroup<DeleteImageResponseFormProperties>({
		});

	}

	export interface DeleteImageRequest {

		/** Required */
		ImageName: string;
	}
	export interface DeleteImageRequestFormProperties {

		/** Required */
		ImageName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteImageRequestFormGroup() {
		return new FormGroup<DeleteImageRequestFormProperties>({
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteImageVersionResponse {
	}
	export interface DeleteImageVersionResponseFormProperties {
	}
	export function CreateDeleteImageVersionResponseFormGroup() {
		return new FormGroup<DeleteImageVersionResponseFormProperties>({
		});

	}

	export interface DeleteImageVersionRequest {

		/** Required */
		ImageName: string;
		Version?: number | null;
		Alias?: string;
	}
	export interface DeleteImageVersionRequestFormProperties {

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		Version: FormControl<number | null | undefined>,
		Alias: FormControl<string | null | undefined>,
	}
	export function CreateDeleteImageVersionRequestFormGroup() {
		return new FormGroup<DeleteImageVersionRequestFormProperties>({
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Version: new FormControl<number | null | undefined>(undefined),
			Alias: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteInferenceExperimentResponse {

		/** Required */
		InferenceExperimentArn: string;
	}
	export interface DeleteInferenceExperimentResponseFormProperties {

		/** Required */
		InferenceExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteInferenceExperimentResponseFormGroup() {
		return new FormGroup<DeleteInferenceExperimentResponseFormProperties>({
			InferenceExperimentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteInferenceExperimentRequest {

		/** Required */
		Name: string;
	}
	export interface DeleteInferenceExperimentRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateDeleteInferenceExperimentRequestFormGroup() {
		return new FormGroup<DeleteInferenceExperimentRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelInput {

		/** Required */
		ModelName: string;
	}
	export interface DeleteModelInputFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelInputFormGroup() {
		return new FormGroup<DeleteModelInputFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelBiasJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DeleteModelBiasJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelBiasJobDefinitionRequestFormGroup() {
		return new FormGroup<DeleteModelBiasJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelCardRequest {

		/** Required */
		ModelCardName: string;
	}
	export interface DeleteModelCardRequestFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelCardRequestFormGroup() {
		return new FormGroup<DeleteModelCardRequestFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelExplainabilityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DeleteModelExplainabilityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelExplainabilityJobDefinitionRequestFormGroup() {
		return new FormGroup<DeleteModelExplainabilityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelPackageInput {

		/** Required */
		ModelPackageName: string;
	}
	export interface DeleteModelPackageInputFormProperties {

		/** Required */
		ModelPackageName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelPackageInputFormGroup() {
		return new FormGroup<DeleteModelPackageInputFormProperties>({
			ModelPackageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelPackageGroupInput {

		/** Required */
		ModelPackageGroupName: string;
	}
	export interface DeleteModelPackageGroupInputFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelPackageGroupInputFormGroup() {
		return new FormGroup<DeleteModelPackageGroupInputFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelPackageGroupPolicyInput {

		/** Required */
		ModelPackageGroupName: string;
	}
	export interface DeleteModelPackageGroupPolicyInputFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelPackageGroupPolicyInputFormGroup() {
		return new FormGroup<DeleteModelPackageGroupPolicyInputFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteModelQualityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DeleteModelQualityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteModelQualityJobDefinitionRequestFormGroup() {
		return new FormGroup<DeleteModelQualityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteMonitoringScheduleRequest {

		/** Required */
		MonitoringScheduleName: string;
	}
	export interface DeleteMonitoringScheduleRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteMonitoringScheduleRequestFormGroup() {
		return new FormGroup<DeleteMonitoringScheduleRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteNotebookInstanceInput {

		/** Required */
		NotebookInstanceName: string;
	}
	export interface DeleteNotebookInstanceInputFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteNotebookInstanceInputFormGroup() {
		return new FormGroup<DeleteNotebookInstanceInputFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteNotebookInstanceLifecycleConfigInput {

		/** Required */
		NotebookInstanceLifecycleConfigName: string;
	}
	export interface DeleteNotebookInstanceLifecycleConfigInputFormProperties {

		/** Required */
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteNotebookInstanceLifecycleConfigInputFormGroup() {
		return new FormGroup<DeleteNotebookInstanceLifecycleConfigInputFormProperties>({
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeletePipelineResponse {
		PipelineArn?: string;
	}
	export interface DeletePipelineResponseFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
	}
	export function CreateDeletePipelineResponseFormGroup() {
		return new FormGroup<DeletePipelineResponseFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeletePipelineRequest {

		/** Required */
		PipelineName: string;

		/** Required */
		ClientRequestToken: string;
	}
	export interface DeletePipelineRequestFormProperties {

		/** Required */
		PipelineName: FormControl<string | null | undefined>,

		/** Required */
		ClientRequestToken: FormControl<string | null | undefined>,
	}
	export function CreateDeletePipelineRequestFormGroup() {
		return new FormGroup<DeletePipelineRequestFormProperties>({
			PipelineName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientRequestToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteProjectInput {

		/** Required */
		ProjectName: string;
	}
	export interface DeleteProjectInputFormProperties {

		/** Required */
		ProjectName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteProjectInputFormGroup() {
		return new FormGroup<DeleteProjectInputFormProperties>({
			ProjectName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteSpaceRequest {

		/** Required */
		DomainId: string;

		/** Required */
		SpaceName: string;
	}
	export interface DeleteSpaceRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteSpaceRequestFormGroup() {
		return new FormGroup<DeleteSpaceRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpaceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteStudioLifecycleConfigRequest {

		/** Required */
		StudioLifecycleConfigName: string;
	}
	export interface DeleteStudioLifecycleConfigRequestFormProperties {

		/** Required */
		StudioLifecycleConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteStudioLifecycleConfigRequestFormGroup() {
		return new FormGroup<DeleteStudioLifecycleConfigRequestFormProperties>({
			StudioLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteTagsOutput {
	}
	export interface DeleteTagsOutputFormProperties {
	}
	export function CreateDeleteTagsOutputFormGroup() {
		return new FormGroup<DeleteTagsOutputFormProperties>({
		});

	}

	export interface DeleteTagsInput {

		/** Required */
		ResourceArn: string;

		/** Required */
		TagKeys: Array<string>;
	}
	export interface DeleteTagsInputFormProperties {

		/** Required */
		ResourceArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteTagsInputFormGroup() {
		return new FormGroup<DeleteTagsInputFormProperties>({
			ResourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteTrialResponse {
		TrialArn?: string;
	}
	export interface DeleteTrialResponseFormProperties {
		TrialArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteTrialResponseFormGroup() {
		return new FormGroup<DeleteTrialResponseFormProperties>({
			TrialArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteTrialRequest {

		/** Required */
		TrialName: string;
	}
	export interface DeleteTrialRequestFormProperties {

		/** Required */
		TrialName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteTrialRequestFormGroup() {
		return new FormGroup<DeleteTrialRequestFormProperties>({
			TrialName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteTrialComponentResponse {
		TrialComponentArn?: string;
	}
	export interface DeleteTrialComponentResponseFormProperties {
		TrialComponentArn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteTrialComponentResponseFormGroup() {
		return new FormGroup<DeleteTrialComponentResponseFormProperties>({
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteTrialComponentRequest {

		/** Required */
		TrialComponentName: string;
	}
	export interface DeleteTrialComponentRequestFormProperties {

		/** Required */
		TrialComponentName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteTrialComponentRequestFormGroup() {
		return new FormGroup<DeleteTrialComponentRequestFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteUserProfileRequest {

		/** Required */
		DomainId: string;

		/** Required */
		UserProfileName: string;
	}
	export interface DeleteUserProfileRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		UserProfileName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteUserProfileRequestFormGroup() {
		return new FormGroup<DeleteUserProfileRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteWorkforceResponse {
	}
	export interface DeleteWorkforceResponseFormProperties {
	}
	export function CreateDeleteWorkforceResponseFormGroup() {
		return new FormGroup<DeleteWorkforceResponseFormProperties>({
		});

	}

	export interface DeleteWorkforceRequest {

		/** Required */
		WorkforceName: string;
	}
	export interface DeleteWorkforceRequestFormProperties {

		/** Required */
		WorkforceName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteWorkforceRequestFormGroup() {
		return new FormGroup<DeleteWorkforceRequestFormProperties>({
			WorkforceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteWorkteamResponse {

		/** Required */
		Success: boolean;
	}
	export interface DeleteWorkteamResponseFormProperties {

		/** Required */
		Success: FormControl<boolean | null | undefined>,
	}
	export function CreateDeleteWorkteamResponseFormGroup() {
		return new FormGroup<DeleteWorkteamResponseFormProperties>({
			Success: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeleteWorkteamRequest {

		/** Required */
		WorkteamName: string;
	}
	export interface DeleteWorkteamRequestFormProperties {

		/** Required */
		WorkteamName: FormControl<string | null | undefined>,
	}
	export function CreateDeleteWorkteamRequestFormGroup() {
		return new FormGroup<DeleteWorkteamRequestFormProperties>({
			WorkteamName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DeregisterDevicesRequest {

		/** Required */
		DeviceFleetName: string;

		/** Required */
		DeviceNames: Array<string>;
	}
	export interface DeregisterDevicesRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateDeregisterDevicesRequestFormGroup() {
		return new FormGroup<DeregisterDevicesRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeActionResponse {
		ActionName?: string;
		ActionArn?: string;
		Source?: ActionSource;
		ActionType?: string;
		Description?: string;
		Status?: ActionStatus;
		Properties?: LineageEntityParameters;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		LineageGroupArn?: string;
	}
	export interface DescribeActionResponseFormProperties {
		ActionName: FormControl<string | null | undefined>,
		ActionArn: FormControl<string | null | undefined>,
		ActionType: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		Status: FormControl<ActionStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LineageGroupArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeActionResponseFormGroup() {
		return new FormGroup<DescribeActionResponseFormProperties>({
			ActionName: new FormControl<string | null | undefined>(undefined),
			ActionArn: new FormControl<string | null | undefined>(undefined),
			ActionType: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<ActionStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
	export interface UserContext {
		UserProfileArn?: string;
		UserProfileName?: string;
		DomainId?: string;
		IamIdentity?: IamIdentity;
	}

	/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
	export interface UserContextFormProperties {
		UserProfileArn: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,
		DomainId: FormControl<string | null | undefined>,
	}
	export function CreateUserContextFormGroup() {
		return new FormGroup<UserContextFormProperties>({
			UserProfileArn: new FormControl<string | null | undefined>(undefined),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			DomainId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The IAM Identity details associated with the user. These details are associated with model package groups, model packages and project entities only. */
	export interface IamIdentity {
		Arn?: string;
		PrincipalId?: string;
		SourceIdentity?: string;
	}

	/** The IAM Identity details associated with the user. These details are associated with model package groups, model packages and project entities only. */
	export interface IamIdentityFormProperties {
		Arn: FormControl<string | null | undefined>,
		PrincipalId: FormControl<string | null | undefined>,
		SourceIdentity: FormControl<string | null | undefined>,
	}
	export function CreateIamIdentityFormGroup() {
		return new FormGroup<IamIdentityFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			PrincipalId: new FormControl<string | null | undefined>(undefined),
			SourceIdentity: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeActionRequest {

		/** Required */
		ActionName: string;
	}
	export interface DescribeActionRequestFormProperties {

		/** Required */
		ActionName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeActionRequestFormGroup() {
		return new FormGroup<DescribeActionRequestFormProperties>({
			ActionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeAlgorithmOutput {

		/** Required */
		AlgorithmName: string;

		/** Required */
		AlgorithmArn: string;
		AlgorithmDescription?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		TrainingSpecification: TrainingSpecification;
		InferenceSpecification?: InferenceSpecification;
		ValidationSpecification?: AlgorithmValidationSpecification;

		/** Required */
		AlgorithmStatus: AlgorithmStatus;

		/** Required */
		AlgorithmStatusDetails: AlgorithmStatusDetails;
		ProductId?: string;
		CertifyForMarketplace?: boolean | null;
	}
	export interface DescribeAlgorithmOutputFormProperties {

		/** Required */
		AlgorithmName: FormControl<string | null | undefined>,

		/** Required */
		AlgorithmArn: FormControl<string | null | undefined>,
		AlgorithmDescription: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		AlgorithmStatus: FormControl<AlgorithmStatus | null | undefined>,
		ProductId: FormControl<string | null | undefined>,
		CertifyForMarketplace: FormControl<boolean | null | undefined>,
	}
	export function CreateDescribeAlgorithmOutputFormGroup() {
		return new FormGroup<DescribeAlgorithmOutputFormProperties>({
			AlgorithmName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AlgorithmArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AlgorithmDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AlgorithmStatus: new FormControl<AlgorithmStatus | null | undefined>(undefined, [Validators.required]),
			ProductId: new FormControl<string | null | undefined>(undefined),
			CertifyForMarketplace: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum AlgorithmStatus { Pending = 'Pending', InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Deleting = 'Deleting' }


	/** Specifies the validation and image scan statuses of the algorithm. */
	export interface AlgorithmStatusDetails {
		ValidationStatuses?: Array<AlgorithmStatusItem>;
		ImageScanStatuses?: Array<AlgorithmStatusItem>;
	}

	/** Specifies the validation and image scan statuses of the algorithm. */
	export interface AlgorithmStatusDetailsFormProperties {
	}
	export function CreateAlgorithmStatusDetailsFormGroup() {
		return new FormGroup<AlgorithmStatusDetailsFormProperties>({
		});

	}


	/** Represents the overall status of an algorithm. */
	export interface AlgorithmStatusItem {

		/** Required */
		Name: string;

		/** Required */
		Status: DetailedAlgorithmStatus;
		FailureReason?: string;
	}

	/** Represents the overall status of an algorithm. */
	export interface AlgorithmStatusItemFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<DetailedAlgorithmStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateAlgorithmStatusItemFormGroup() {
		return new FormGroup<AlgorithmStatusItemFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<DetailedAlgorithmStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DetailedAlgorithmStatus { NotStarted = 'NotStarted', InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed' }

	export interface DescribeAlgorithmInput {

		/** Required */
		AlgorithmName: string;
	}
	export interface DescribeAlgorithmInputFormProperties {

		/** Required */
		AlgorithmName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAlgorithmInputFormGroup() {
		return new FormGroup<DescribeAlgorithmInputFormProperties>({
			AlgorithmName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeAppResponse {
		AppArn?: string;
		AppType?: AppType;
		AppName?: string;
		DomainId?: string;
		UserProfileName?: string;
		Status?: AppStatus;
		LastHealthCheckTimestamp?: Date;
		LastUserActivityTimestamp?: Date;
		CreationTime?: Date;
		FailureReason?: string;
		ResourceSpec?: ResourceSpec;
		SpaceName?: string;
	}
	export interface DescribeAppResponseFormProperties {
		AppArn: FormControl<string | null | undefined>,
		AppType: FormControl<AppType | null | undefined>,
		AppName: FormControl<string | null | undefined>,
		DomainId: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,
		Status: FormControl<AppStatus | null | undefined>,
		LastHealthCheckTimestamp: FormControl<Date | null | undefined>,
		LastUserActivityTimestamp: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAppResponseFormGroup() {
		return new FormGroup<DescribeAppResponseFormProperties>({
			AppArn: new FormControl<string | null | undefined>(undefined),
			AppType: new FormControl<AppType | null | undefined>(undefined),
			AppName: new FormControl<string | null | undefined>(undefined),
			DomainId: new FormControl<string | null | undefined>(undefined),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<AppStatus | null | undefined>(undefined),
			LastHealthCheckTimestamp: new FormControl<Date | null | undefined>(undefined),
			LastUserActivityTimestamp: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			SpaceName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AppStatus { Deleted = 'Deleted', Deleting = 'Deleting', Failed = 'Failed', InService = 'InService', Pending = 'Pending' }

	export interface DescribeAppRequest {

		/** Required */
		DomainId: string;
		UserProfileName?: string;

		/** Required */
		AppType: AppType;

		/** Required */
		AppName: string;
		SpaceName?: string;
	}
	export interface DescribeAppRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,

		/** Required */
		AppType: FormControl<AppType | null | undefined>,

		/** Required */
		AppName: FormControl<string | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAppRequestFormGroup() {
		return new FormGroup<DescribeAppRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			AppType: new FormControl<AppType | null | undefined>(undefined, [Validators.required]),
			AppName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpaceName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeAppImageConfigResponse {
		AppImageConfigArn?: string;
		AppImageConfigName?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		KernelGatewayImageConfig?: KernelGatewayImageConfig;
	}
	export interface DescribeAppImageConfigResponseFormProperties {
		AppImageConfigArn: FormControl<string | null | undefined>,
		AppImageConfigName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeAppImageConfigResponseFormGroup() {
		return new FormGroup<DescribeAppImageConfigResponseFormProperties>({
			AppImageConfigArn: new FormControl<string | null | undefined>(undefined),
			AppImageConfigName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface DescribeAppImageConfigRequest {

		/** Required */
		AppImageConfigName: string;
	}
	export interface DescribeAppImageConfigRequestFormProperties {

		/** Required */
		AppImageConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAppImageConfigRequestFormGroup() {
		return new FormGroup<DescribeAppImageConfigRequestFormProperties>({
			AppImageConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeArtifactResponse {
		ArtifactName?: string;
		ArtifactArn?: string;
		Source?: ArtifactSource;
		ArtifactType?: string;
		Properties?: LineageEntityParameters;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		LineageGroupArn?: string;
	}
	export interface DescribeArtifactResponseFormProperties {
		ArtifactName: FormControl<string | null | undefined>,
		ArtifactArn: FormControl<string | null | undefined>,
		ArtifactType: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LineageGroupArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeArtifactResponseFormGroup() {
		return new FormGroup<DescribeArtifactResponseFormProperties>({
			ArtifactName: new FormControl<string | null | undefined>(undefined),
			ArtifactArn: new FormControl<string | null | undefined>(undefined),
			ArtifactType: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeArtifactRequest {

		/** Required */
		ArtifactArn: string;
	}
	export interface DescribeArtifactRequestFormProperties {

		/** Required */
		ArtifactArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeArtifactRequestFormGroup() {
		return new FormGroup<DescribeArtifactRequestFormProperties>({
			ArtifactArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeAutoMLJobResponse {

		/** Required */
		AutoMLJobName: string;

		/** Required */
		AutoMLJobArn: string;

		/** Required */
		InputDataConfig: Array<AutoMLChannel>;

		/** Required */
		OutputDataConfig: AutoMLOutputDataConfig;

		/** Required */
		RoleArn: string;
		AutoMLJobObjective?: AutoMLJobObjective;
		ProblemType?: ProblemType;
		AutoMLJobConfig?: AutoMLJobConfig;

		/** Required */
		CreationTime: Date;
		EndTime?: Date;

		/** Required */
		LastModifiedTime: Date;
		FailureReason?: string;
		PartialFailureReasons?: Array<AutoMLPartialFailureReason>;
		BestCandidate?: AutoMLCandidate;

		/** Required */
		AutoMLJobStatus: CandidateStatus;

		/** Required */
		AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus;
		GenerateCandidateDefinitionsOnly?: boolean | null;
		AutoMLJobArtifacts?: AutoMLJobArtifacts;
		ResolvedAttributes?: ResolvedAttributes;
		ModelDeployConfig?: ModelDeployConfig;
		ModelDeployResult?: ModelDeployResult;
	}
	export interface DescribeAutoMLJobResponseFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,

		/** Required */
		AutoMLJobArn: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		ProblemType: FormControl<ProblemType | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		AutoMLJobStatus: FormControl<CandidateStatus | null | undefined>,

		/** Required */
		AutoMLJobSecondaryStatus: FormControl<AutoMLJobSecondaryStatus | null | undefined>,
		GenerateCandidateDefinitionsOnly: FormControl<boolean | null | undefined>,
	}
	export function CreateDescribeAutoMLJobResponseFormGroup() {
		return new FormGroup<DescribeAutoMLJobResponseFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProblemType: new FormControl<ProblemType | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			AutoMLJobStatus: new FormControl<CandidateStatus | null | undefined>(undefined, [Validators.required]),
			AutoMLJobSecondaryStatus: new FormControl<AutoMLJobSecondaryStatus | null | undefined>(undefined, [Validators.required]),
			GenerateCandidateDefinitionsOnly: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The reason for a partial failure of an AutoML job. */
	export interface AutoMLPartialFailureReason {
		PartialFailureMessage?: string;
	}

	/** The reason for a partial failure of an AutoML job. */
	export interface AutoMLPartialFailureReasonFormProperties {
		PartialFailureMessage: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLPartialFailureReasonFormGroup() {
		return new FormGroup<AutoMLPartialFailureReasonFormProperties>({
			PartialFailureMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about a candidate produced by an AutoML training job, including its status, steps, and other properties. */
	export interface AutoMLCandidate {

		/** Required */
		CandidateName: string;

		/** The best candidate result from an AutoML training job. */
		FinalAutoMLJobObjectiveMetric?: FinalAutoMLJobObjectiveMetric;

		/** Required */
		ObjectiveStatus: ObjectiveStatus;

		/** Required */
		CandidateSteps: Array<AutoMLCandidateStep>;

		/** Required */
		CandidateStatus: CandidateStatus;
		InferenceContainers?: Array<AutoMLContainerDefinition>;

		/** Required */
		CreationTime: Date;
		EndTime?: Date;

		/** Required */
		LastModifiedTime: Date;
		FailureReason?: string;
		CandidateProperties?: CandidateProperties;
		InferenceContainerDefinitions?: AutoMLInferenceContainerDefinitions;
	}

	/** Information about a candidate produced by an AutoML training job, including its status, steps, and other properties. */
	export interface AutoMLCandidateFormProperties {

		/** Required */
		CandidateName: FormControl<string | null | undefined>,

		/** Required */
		ObjectiveStatus: FormControl<ObjectiveStatus | null | undefined>,

		/** Required */
		CandidateStatus: FormControl<CandidateStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLCandidateFormGroup() {
		return new FormGroup<AutoMLCandidateFormProperties>({
			CandidateName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ObjectiveStatus: new FormControl<ObjectiveStatus | null | undefined>(undefined, [Validators.required]),
			CandidateStatus: new FormControl<CandidateStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The best candidate result from an AutoML training job. */
	export interface FinalAutoMLJobObjectiveMetric {
		Type?: HyperParameterTuningJobObjectiveType;

		/** Required */
		MetricName: AutoMLMetricEnum;

		/** Required */
		Value: number;
		StandardMetricName?: AutoMLMetricEnum;
	}

	/** The best candidate result from an AutoML training job. */
	export interface FinalAutoMLJobObjectiveMetricFormProperties {
		Type: FormControl<HyperParameterTuningJobObjectiveType | null | undefined>,

		/** Required */
		MetricName: FormControl<AutoMLMetricEnum | null | undefined>,

		/** Required */
		Value: FormControl<number | null | undefined>,
		StandardMetricName: FormControl<AutoMLMetricEnum | null | undefined>,
	}
	export function CreateFinalAutoMLJobObjectiveMetricFormGroup() {
		return new FormGroup<FinalAutoMLJobObjectiveMetricFormProperties>({
			Type: new FormControl<HyperParameterTuningJobObjectiveType | null | undefined>(undefined),
			MetricName: new FormControl<AutoMLMetricEnum | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			StandardMetricName: new FormControl<AutoMLMetricEnum | null | undefined>(undefined),
		});

	}

	export enum ObjectiveStatus { Succeeded = 'Succeeded', Pending = 'Pending', Failed = 'Failed' }


	/** Information about the steps for a candidate and what step it is working on. */
	export interface AutoMLCandidateStep {

		/** Required */
		CandidateStepType: CandidateStepType;

		/** Required */
		CandidateStepArn: string;

		/** Required */
		CandidateStepName: string;
	}

	/** Information about the steps for a candidate and what step it is working on. */
	export interface AutoMLCandidateStepFormProperties {

		/** Required */
		CandidateStepType: FormControl<CandidateStepType | null | undefined>,

		/** Required */
		CandidateStepArn: FormControl<string | null | undefined>,

		/** Required */
		CandidateStepName: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLCandidateStepFormGroup() {
		return new FormGroup<AutoMLCandidateStepFormProperties>({
			CandidateStepType: new FormControl<CandidateStepType | null | undefined>(undefined, [Validators.required]),
			CandidateStepArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CandidateStepName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CandidateStepType { 'AWS::SageMaker::TrainingJob' = 'AWS::SageMaker::TrainingJob', 'AWS::SageMaker::TransformJob' = 'AWS::SageMaker::TransformJob', 'AWS::SageMaker::ProcessingJob' = 'AWS::SageMaker::ProcessingJob' }

	export enum CandidateStatus { Completed = 'Completed', InProgress = 'InProgress', Failed = 'Failed', Stopped = 'Stopped', Stopping = 'Stopping' }


	/** A list of container definitions that describe the different containers that make up an AutoML candidate. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html"> ContainerDefinition</a>. */
	export interface AutoMLContainerDefinition {

		/** Required */
		Image: string;

		/** Required */
		ModelDataUrl: string;
		Environment?: EnvironmentMap;
	}

	/** A list of container definitions that describe the different containers that make up an AutoML candidate. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html"> ContainerDefinition</a>. */
	export interface AutoMLContainerDefinitionFormProperties {

		/** Required */
		Image: FormControl<string | null | undefined>,

		/** Required */
		ModelDataUrl: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLContainerDefinitionFormGroup() {
		return new FormGroup<AutoMLContainerDefinitionFormProperties>({
			Image: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelDataUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The properties of an AutoML candidate job. */
	export interface CandidateProperties {
		CandidateArtifactLocations?: CandidateArtifactLocations;
		CandidateMetrics?: Array<MetricDatum>;
	}

	/** The properties of an AutoML candidate job. */
	export interface CandidatePropertiesFormProperties {
	}
	export function CreateCandidatePropertiesFormGroup() {
		return new FormGroup<CandidatePropertiesFormProperties>({
		});

	}


	/** The location of artifacts for an AutoML candidate job. */
	export interface CandidateArtifactLocations {

		/** Required */
		Explainability: string;
		ModelInsights?: string;
		BacktestResults?: string;
	}

	/** The location of artifacts for an AutoML candidate job. */
	export interface CandidateArtifactLocationsFormProperties {

		/** Required */
		Explainability: FormControl<string | null | undefined>,
		ModelInsights: FormControl<string | null | undefined>,
		BacktestResults: FormControl<string | null | undefined>,
	}
	export function CreateCandidateArtifactLocationsFormGroup() {
		return new FormGroup<CandidateArtifactLocationsFormProperties>({
			Explainability: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelInsights: new FormControl<string | null | undefined>(undefined),
			BacktestResults: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about the metric for a candidate produced by an AutoML job. */
	export interface MetricDatum {
		MetricName?: AutoMLMetricEnum;
		Value?: number;
		Set?: MetricSetSource;
		StandardMetricName?: AutoMLMetricExtendedEnum;
	}

	/** Information about the metric for a candidate produced by an AutoML job. */
	export interface MetricDatumFormProperties {
		MetricName: FormControl<AutoMLMetricEnum | null | undefined>,
		Value: FormControl<number | null | undefined>,
		Set: FormControl<MetricSetSource | null | undefined>,
		StandardMetricName: FormControl<AutoMLMetricExtendedEnum | null | undefined>,
	}
	export function CreateMetricDatumFormGroup() {
		return new FormGroup<MetricDatumFormProperties>({
			MetricName: new FormControl<AutoMLMetricEnum | null | undefined>(undefined),
			Value: new FormControl<number | null | undefined>(undefined),
			Set: new FormControl<MetricSetSource | null | undefined>(undefined),
			StandardMetricName: new FormControl<AutoMLMetricExtendedEnum | null | undefined>(undefined),
		});

	}

	export enum MetricSetSource { Train = 'Train', Validation = 'Validation', Test = 'Test' }

	export enum AutoMLMetricExtendedEnum { Accuracy = 'Accuracy', MSE = 'MSE', F1 = 'F1', F1macro = 'F1macro', AUC = 'AUC', RMSE = 'RMSE', MAE = 'MAE', R2 = 'R2', BalancedAccuracy = 'BalancedAccuracy', Precision = 'Precision', PrecisionMacro = 'PrecisionMacro', Recall = 'Recall', RecallMacro = 'RecallMacro', LogLoss = 'LogLoss', InferenceLatency = 'InferenceLatency', MAPE = 'MAPE', MASE = 'MASE', WAPE = 'WAPE', AverageWeightedQuantileLoss = 'AverageWeightedQuantileLoss' }


	/** The mapping of all supported processing unit (CPU, GPU, etc...) to inference container definitions for the candidate. This field is populated for the V2 API only (for example, for jobs created by calling <code>CreateAutoMLJobV2</code>). */
	export interface AutoMLInferenceContainerDefinitions {
	}

	/** The mapping of all supported processing unit (CPU, GPU, etc...) to inference container definitions for the candidate. This field is populated for the V2 API only (for example, for jobs created by calling <code>CreateAutoMLJobV2</code>). */
	export interface AutoMLInferenceContainerDefinitionsFormProperties {
	}
	export function CreateAutoMLInferenceContainerDefinitionsFormGroup() {
		return new FormGroup<AutoMLInferenceContainerDefinitionsFormProperties>({
		});

	}

	export enum AutoMLJobSecondaryStatus { Starting = 'Starting', AnalyzingData = 'AnalyzingData', FeatureEngineering = 'FeatureEngineering', ModelTuning = 'ModelTuning', MaxCandidatesReached = 'MaxCandidatesReached', Failed = 'Failed', Stopped = 'Stopped', MaxAutoMLJobRuntimeReached = 'MaxAutoMLJobRuntimeReached', Stopping = 'Stopping', CandidateDefinitionsGenerated = 'CandidateDefinitionsGenerated', GeneratingExplainabilityReport = 'GeneratingExplainabilityReport', Completed = 'Completed', ExplainabilityError = 'ExplainabilityError', DeployingModel = 'DeployingModel', ModelDeploymentError = 'ModelDeploymentError', GeneratingModelInsightsReport = 'GeneratingModelInsightsReport', ModelInsightsError = 'ModelInsightsError', TrainingModels = 'TrainingModels', PreTraining = 'PreTraining' }


	/** The artifacts that are generated during an AutoML job. */
	export interface AutoMLJobArtifacts {
		CandidateDefinitionNotebookLocation?: string;
		DataExplorationNotebookLocation?: string;
	}

	/** The artifacts that are generated during an AutoML job. */
	export interface AutoMLJobArtifactsFormProperties {
		CandidateDefinitionNotebookLocation: FormControl<string | null | undefined>,
		DataExplorationNotebookLocation: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLJobArtifactsFormGroup() {
		return new FormGroup<AutoMLJobArtifactsFormProperties>({
			CandidateDefinitionNotebookLocation: new FormControl<string | null | undefined>(undefined),
			DataExplorationNotebookLocation: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The resolved attributes. */
	export interface ResolvedAttributes {

		/** Specifies a metric to minimize or maximize as the objective of a job. */
		AutoMLJobObjective?: AutoMLJobObjective;
		ProblemType?: ProblemType;

		/** How long a job is allowed to run, or how many candidates a job is allowed to generate. */
		CompletionCriteria?: AutoMLJobCompletionCriteria;
	}

	/** The resolved attributes. */
	export interface ResolvedAttributesFormProperties {
		ProblemType: FormControl<ProblemType | null | undefined>,
	}
	export function CreateResolvedAttributesFormGroup() {
		return new FormGroup<ResolvedAttributesFormProperties>({
			ProblemType: new FormControl<ProblemType | null | undefined>(undefined),
		});

	}


	/** Provides information about the endpoint of the model deployment. */
	export interface ModelDeployResult {
		EndpointName?: string;
	}

	/** Provides information about the endpoint of the model deployment. */
	export interface ModelDeployResultFormProperties {
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateModelDeployResultFormGroup() {
		return new FormGroup<ModelDeployResultFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeAutoMLJobRequest {

		/** Required */
		AutoMLJobName: string;
	}
	export interface DescribeAutoMLJobRequestFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAutoMLJobRequestFormGroup() {
		return new FormGroup<DescribeAutoMLJobRequestFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeAutoMLJobV2Response {

		/** Required */
		AutoMLJobName: string;

		/** Required */
		AutoMLJobArn: string;

		/** Required */
		AutoMLJobInputDataConfig: Array<AutoMLJobChannel>;

		/** Required */
		OutputDataConfig: AutoMLOutputDataConfig;

		/** Required */
		RoleArn: string;
		AutoMLJobObjective?: AutoMLJobObjective;
		AutoMLProblemTypeConfig?: AutoMLProblemTypeConfig;

		/** Required */
		CreationTime: Date;
		EndTime?: Date;

		/** Required */
		LastModifiedTime: Date;
		FailureReason?: string;
		PartialFailureReasons?: Array<AutoMLPartialFailureReason>;
		BestCandidate?: AutoMLCandidate;

		/** Required */
		AutoMLJobStatus: CandidateStatus;

		/** Required */
		AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus;
		ModelDeployConfig?: ModelDeployConfig;
		ModelDeployResult?: ModelDeployResult;
		DataSplitConfig?: AutoMLDataSplitConfig;
		SecurityConfig?: AutoMLSecurityConfig;

		/** The artifacts that are generated during an AutoML job. */
		AutoMLJobArtifacts?: AutoMLJobArtifacts;
		ResolvedAttributes?: AutoMLResolvedAttributes;
		AutoMLProblemTypeConfigName?: AutoMLProblemTypeConfigName;
	}
	export interface DescribeAutoMLJobV2ResponseFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,

		/** Required */
		AutoMLJobArn: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		AutoMLJobStatus: FormControl<CandidateStatus | null | undefined>,

		/** Required */
		AutoMLJobSecondaryStatus: FormControl<AutoMLJobSecondaryStatus | null | undefined>,
		AutoMLProblemTypeConfigName: FormControl<AutoMLProblemTypeConfigName | null | undefined>,
	}
	export function CreateDescribeAutoMLJobV2ResponseFormGroup() {
		return new FormGroup<DescribeAutoMLJobV2ResponseFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			AutoMLJobStatus: new FormControl<CandidateStatus | null | undefined>(undefined, [Validators.required]),
			AutoMLJobSecondaryStatus: new FormControl<AutoMLJobSecondaryStatus | null | undefined>(undefined, [Validators.required]),
			AutoMLProblemTypeConfigName: new FormControl<AutoMLProblemTypeConfigName | null | undefined>(undefined),
		});

	}


	/** The resolved attributes used to configure an AutoML job V2. */
	export interface AutoMLResolvedAttributes {

		/** Specifies a metric to minimize or maximize as the objective of a job. */
		AutoMLJobObjective?: AutoMLJobObjective;

		/** How long a job is allowed to run, or how many candidates a job is allowed to generate. */
		CompletionCriteria?: AutoMLJobCompletionCriteria;
		AutoMLProblemTypeResolvedAttributes?: AutoMLProblemTypeResolvedAttributes;
	}

	/** The resolved attributes used to configure an AutoML job V2. */
	export interface AutoMLResolvedAttributesFormProperties {
	}
	export function CreateAutoMLResolvedAttributesFormGroup() {
		return new FormGroup<AutoMLResolvedAttributesFormProperties>({
		});

	}


	/** The resolved attributes specific to the problem type of an AutoML job V2. */
	export interface AutoMLProblemTypeResolvedAttributes {
		TabularResolvedAttributes?: TabularResolvedAttributes;
	}

	/** The resolved attributes specific to the problem type of an AutoML job V2. */
	export interface AutoMLProblemTypeResolvedAttributesFormProperties {
	}
	export function CreateAutoMLProblemTypeResolvedAttributesFormGroup() {
		return new FormGroup<AutoMLProblemTypeResolvedAttributesFormProperties>({
		});

	}


	/** The resolved attributes specific to the <code>TABULAR</code> problem type. */
	export interface TabularResolvedAttributes {
		ProblemType?: ProblemType;
	}

	/** The resolved attributes specific to the <code>TABULAR</code> problem type. */
	export interface TabularResolvedAttributesFormProperties {
		ProblemType: FormControl<ProblemType | null | undefined>,
	}
	export function CreateTabularResolvedAttributesFormGroup() {
		return new FormGroup<TabularResolvedAttributesFormProperties>({
			ProblemType: new FormControl<ProblemType | null | undefined>(undefined),
		});

	}

	export enum AutoMLProblemTypeConfigName { ImageClassification = 'ImageClassification', TextClassification = 'TextClassification', Tabular = 'Tabular', TimeSeriesForecasting = 'TimeSeriesForecasting' }

	export interface DescribeAutoMLJobV2Request {

		/** Required */
		AutoMLJobName: string;
	}
	export interface DescribeAutoMLJobV2RequestFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAutoMLJobV2RequestFormGroup() {
		return new FormGroup<DescribeAutoMLJobV2RequestFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeCodeRepositoryOutput {

		/** Required */
		CodeRepositoryName: string;

		/** Required */
		CodeRepositoryArn: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
		GitConfig?: GitConfig;
	}
	export interface DescribeCodeRepositoryOutputFormProperties {

		/** Required */
		CodeRepositoryName: FormControl<string | null | undefined>,

		/** Required */
		CodeRepositoryArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeCodeRepositoryOutputFormGroup() {
		return new FormGroup<DescribeCodeRepositoryOutputFormProperties>({
			CodeRepositoryName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CodeRepositoryArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeCodeRepositoryInput {

		/** Required */
		CodeRepositoryName: string;
	}
	export interface DescribeCodeRepositoryInputFormProperties {

		/** Required */
		CodeRepositoryName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeCodeRepositoryInputFormGroup() {
		return new FormGroup<DescribeCodeRepositoryInputFormProperties>({
			CodeRepositoryName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeCompilationJobResponse {

		/** Required */
		CompilationJobName: string;

		/** Required */
		CompilationJobArn: string;

		/** Required */
		CompilationJobStatus: CompilationJobStatus;
		CompilationStartTime?: Date;
		CompilationEndTime?: Date;

		/** Required */
		StoppingCondition: StoppingCondition;
		InferenceImage?: string;
		ModelPackageVersionArn?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		FailureReason: string;

		/** Required */
		ModelArtifacts: ModelArtifacts;
		ModelDigests?: ModelDigests;

		/** Required */
		RoleArn: string;

		/** Required */
		InputConfig: InputConfig;

		/** Required */
		OutputConfig: OutputConfig;
		VpcConfig?: NeoVpcConfig;
	}
	export interface DescribeCompilationJobResponseFormProperties {

		/** Required */
		CompilationJobName: FormControl<string | null | undefined>,

		/** Required */
		CompilationJobArn: FormControl<string | null | undefined>,

		/** Required */
		CompilationJobStatus: FormControl<CompilationJobStatus | null | undefined>,
		CompilationStartTime: FormControl<Date | null | undefined>,
		CompilationEndTime: FormControl<Date | null | undefined>,
		InferenceImage: FormControl<string | null | undefined>,
		ModelPackageVersionArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeCompilationJobResponseFormGroup() {
		return new FormGroup<DescribeCompilationJobResponseFormProperties>({
			CompilationJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CompilationJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CompilationJobStatus: new FormControl<CompilationJobStatus | null | undefined>(undefined, [Validators.required]),
			CompilationStartTime: new FormControl<Date | null | undefined>(undefined),
			CompilationEndTime: new FormControl<Date | null | undefined>(undefined),
			InferenceImage: new FormControl<string | null | undefined>(undefined),
			ModelPackageVersionArn: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CompilationJobStatus { INPROGRESS = 'INPROGRESS', COMPLETED = 'COMPLETED', FAILED = 'FAILED', STARTING = 'STARTING', STOPPING = 'STOPPING', STOPPED = 'STOPPED' }


	/** <p>Provides information about the location that is configured for storing model artifacts. </p> <p>Model artifacts are the output that results from training a model, and typically consist of trained parameters, a model definition that describes how to compute inferences, and other metadata.</p> */
	export interface ModelArtifacts {

		/** Required */
		S3ModelArtifacts: string;
	}

	/** <p>Provides information about the location that is configured for storing model artifacts. </p> <p>Model artifacts are the output that results from training a model, and typically consist of trained parameters, a model definition that describes how to compute inferences, and other metadata.</p> */
	export interface ModelArtifactsFormProperties {

		/** Required */
		S3ModelArtifacts: FormControl<string | null | undefined>,
	}
	export function CreateModelArtifactsFormGroup() {
		return new FormGroup<ModelArtifactsFormProperties>({
			S3ModelArtifacts: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Provides information to verify the integrity of stored model artifacts.  */
	export interface ModelDigests {
		ArtifactDigest?: string;
	}

	/** Provides information to verify the integrity of stored model artifacts.  */
	export interface ModelDigestsFormProperties {
		ArtifactDigest: FormControl<string | null | undefined>,
	}
	export function CreateModelDigestsFormGroup() {
		return new FormGroup<ModelDigestsFormProperties>({
			ArtifactDigest: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeCompilationJobRequest {

		/** Required */
		CompilationJobName: string;
	}
	export interface DescribeCompilationJobRequestFormProperties {

		/** Required */
		CompilationJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeCompilationJobRequestFormGroup() {
		return new FormGroup<DescribeCompilationJobRequestFormProperties>({
			CompilationJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeContextResponse {
		ContextName?: string;
		ContextArn?: string;
		Source?: ContextSource;
		ContextType?: string;
		Description?: string;
		Properties?: LineageEntityParameters;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		LineageGroupArn?: string;
	}
	export interface DescribeContextResponseFormProperties {
		ContextName: FormControl<string | null | undefined>,
		ContextArn: FormControl<string | null | undefined>,
		ContextType: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LineageGroupArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeContextResponseFormGroup() {
		return new FormGroup<DescribeContextResponseFormProperties>({
			ContextName: new FormControl<string | null | undefined>(undefined),
			ContextArn: new FormControl<string | null | undefined>(undefined),
			ContextType: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeContextRequest {

		/** Required */
		ContextName: string;
	}
	export interface DescribeContextRequestFormProperties {

		/** Required */
		ContextName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeContextRequestFormGroup() {
		return new FormGroup<DescribeContextRequestFormProperties>({
			ContextName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeDataQualityJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;

		/** Required */
		JobDefinitionName: string;

		/** Required */
		CreationTime: Date;
		DataQualityBaselineConfig?: DataQualityBaselineConfig;

		/** Required */
		DataQualityAppSpecification: DataQualityAppSpecification;

		/** Required */
		DataQualityJobInput: DataQualityJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		DataQualityJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
	}
	export interface DescribeDataQualityJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDataQualityJobDefinitionResponseFormGroup() {
		return new FormGroup<DescribeDataQualityJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeDataQualityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DescribeDataQualityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDataQualityJobDefinitionRequestFormGroup() {
		return new FormGroup<DescribeDataQualityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeDeviceResponse {
		DeviceArn?: string;

		/** Required */
		DeviceName: string;
		Description?: string;

		/** Required */
		DeviceFleetName: string;
		IotThingName?: string;

		/** Required */
		RegistrationTime: Date;
		LatestHeartbeat?: Date;
		Models?: Array<EdgeModel>;
		MaxModels?: number | null;
		NextToken?: string;
		AgentVersion?: string;
	}
	export interface DescribeDeviceResponseFormProperties {
		DeviceArn: FormControl<string | null | undefined>,

		/** Required */
		DeviceName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
		IotThingName: FormControl<string | null | undefined>,

		/** Required */
		RegistrationTime: FormControl<Date | null | undefined>,
		LatestHeartbeat: FormControl<Date | null | undefined>,
		MaxModels: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		AgentVersion: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDeviceResponseFormGroup() {
		return new FormGroup<DescribeDeviceResponseFormProperties>({
			DeviceArn: new FormControl<string | null | undefined>(undefined),
			DeviceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IotThingName: new FormControl<string | null | undefined>(undefined),
			RegistrationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LatestHeartbeat: new FormControl<Date | null | undefined>(undefined),
			MaxModels: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			AgentVersion: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The model on the edge device. */
	export interface EdgeModel {

		/** Required */
		ModelName: string;

		/** Required */
		ModelVersion: string;
		LatestSampleTime?: Date;
		LatestInference?: Date;
	}

	/** The model on the edge device. */
	export interface EdgeModelFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		ModelVersion: FormControl<string | null | undefined>,
		LatestSampleTime: FormControl<Date | null | undefined>,
		LatestInference: FormControl<Date | null | undefined>,
	}
	export function CreateEdgeModelFormGroup() {
		return new FormGroup<EdgeModelFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LatestSampleTime: new FormControl<Date | null | undefined>(undefined),
			LatestInference: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface DescribeDeviceRequest {
		NextToken?: string;

		/** Required */
		DeviceName: string;

		/** Required */
		DeviceFleetName: string;
	}
	export interface DescribeDeviceRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,

		/** Required */
		DeviceName: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDeviceRequestFormGroup() {
		return new FormGroup<DescribeDeviceRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			DeviceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeDeviceFleetResponse {

		/** Required */
		DeviceFleetName: string;

		/** Required */
		DeviceFleetArn: string;

		/** Required */
		OutputConfig: EdgeOutputConfig;
		Description?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
		RoleArn?: string;
		IotRoleAlias?: string;
	}
	export interface DescribeDeviceFleetResponseFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetArn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		IotRoleAlias: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDeviceFleetResponseFormGroup() {
		return new FormGroup<DescribeDeviceFleetResponseFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceFleetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			IotRoleAlias: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeDeviceFleetRequest {

		/** Required */
		DeviceFleetName: string;
	}
	export interface DescribeDeviceFleetRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDeviceFleetRequestFormGroup() {
		return new FormGroup<DescribeDeviceFleetRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeDomainResponse {
		DomainArn?: string;
		DomainId?: string;
		DomainName?: string;
		HomeEfsFileSystemId?: string;
		SingleSignOnManagedApplicationInstanceId?: string;
		Status?: DomainStatus;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		FailureReason?: string;
		AuthMode?: AuthMode;
		DefaultUserSettings?: UserSettings;
		AppNetworkAccessType?: AppNetworkAccessType;
		HomeEfsFileSystemKmsKeyId?: string;
		SubnetIds?: Array<string>;
		Url?: string;
		VpcId?: string;
		KmsKeyId?: string;
		DomainSettings?: DomainSettings;
		AppSecurityGroupManagement?: AppSecurityGroupManagement;
		SecurityGroupIdForDomainBoundary?: string;
		DefaultSpaceSettings?: DefaultSpaceSettings;
	}
	export interface DescribeDomainResponseFormProperties {
		DomainArn: FormControl<string | null | undefined>,
		DomainId: FormControl<string | null | undefined>,
		DomainName: FormControl<string | null | undefined>,
		HomeEfsFileSystemId: FormControl<string | null | undefined>,
		SingleSignOnManagedApplicationInstanceId: FormControl<string | null | undefined>,
		Status: FormControl<DomainStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		AuthMode: FormControl<AuthMode | null | undefined>,
		AppNetworkAccessType: FormControl<AppNetworkAccessType | null | undefined>,
		HomeEfsFileSystemKmsKeyId: FormControl<string | null | undefined>,
		Url: FormControl<string | null | undefined>,
		VpcId: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		AppSecurityGroupManagement: FormControl<AppSecurityGroupManagement | null | undefined>,
		SecurityGroupIdForDomainBoundary: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDomainResponseFormGroup() {
		return new FormGroup<DescribeDomainResponseFormProperties>({
			DomainArn: new FormControl<string | null | undefined>(undefined),
			DomainId: new FormControl<string | null | undefined>(undefined),
			DomainName: new FormControl<string | null | undefined>(undefined),
			HomeEfsFileSystemId: new FormControl<string | null | undefined>(undefined),
			SingleSignOnManagedApplicationInstanceId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<DomainStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			AuthMode: new FormControl<AuthMode | null | undefined>(undefined),
			AppNetworkAccessType: new FormControl<AppNetworkAccessType | null | undefined>(undefined),
			HomeEfsFileSystemKmsKeyId: new FormControl<string | null | undefined>(undefined),
			Url: new FormControl<string | null | undefined>(undefined),
			VpcId: new FormControl<string | null | undefined>(undefined),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			AppSecurityGroupManagement: new FormControl<AppSecurityGroupManagement | null | undefined>(undefined),
			SecurityGroupIdForDomainBoundary: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DomainStatus { Deleting = 'Deleting', Failed = 'Failed', InService = 'InService', Pending = 'Pending', Updating = 'Updating', Update_Failed = 'Update_Failed', Delete_Failed = 'Delete_Failed' }

	export interface DescribeDomainRequest {

		/** Required */
		DomainId: string;
	}
	export interface DescribeDomainRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDomainRequestFormGroup() {
		return new FormGroup<DescribeDomainRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeEdgeDeploymentPlanResponse {

		/** Required */
		EdgeDeploymentPlanArn: string;

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		ModelConfigs: Array<EdgeDeploymentModelConfig>;

		/** Required */
		DeviceFleetName: string;
		EdgeDeploymentSuccess?: number | null;
		EdgeDeploymentPending?: number | null;
		EdgeDeploymentFailed?: number | null;

		/** Required */
		Stages: Array<DeploymentStageStatusSummary>;
		NextToken?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}
	export interface DescribeEdgeDeploymentPlanResponseFormProperties {

		/** Required */
		EdgeDeploymentPlanArn: FormControl<string | null | undefined>,

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
		EdgeDeploymentSuccess: FormControl<number | null | undefined>,
		EdgeDeploymentPending: FormControl<number | null | undefined>,
		EdgeDeploymentFailed: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeEdgeDeploymentPlanResponseFormGroup() {
		return new FormGroup<DescribeEdgeDeploymentPlanResponseFormProperties>({
			EdgeDeploymentPlanArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentSuccess: new FormControl<number | null | undefined>(undefined),
			EdgeDeploymentPending: new FormControl<number | null | undefined>(undefined),
			EdgeDeploymentFailed: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Contains information summarizing the deployment stage results. */
	export interface DeploymentStageStatusSummary {

		/** Required */
		StageName: string;

		/** Required */
		DeviceSelectionConfig: DeviceSelectionConfig;

		/** Required */
		DeploymentConfig: EdgeDeploymentConfig;

		/** Required */
		DeploymentStatus: EdgeDeploymentStatus;
	}

	/** Contains information summarizing the deployment stage results. */
	export interface DeploymentStageStatusSummaryFormProperties {

		/** Required */
		StageName: FormControl<string | null | undefined>,
	}
	export function CreateDeploymentStageStatusSummaryFormGroup() {
		return new FormGroup<DeploymentStageStatusSummaryFormProperties>({
			StageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Contains information summarizing the deployment stage results. */
	export interface EdgeDeploymentStatus {

		/** Required */
		StageStatus: StageStatus;

		/** Required */
		EdgeDeploymentSuccessInStage: number;

		/** Required */
		EdgeDeploymentPendingInStage: number;

		/** Required */
		EdgeDeploymentFailedInStage: number;
		EdgeDeploymentStatusMessage?: string;
		EdgeDeploymentStageStartTime?: Date;
	}

	/** Contains information summarizing the deployment stage results. */
	export interface EdgeDeploymentStatusFormProperties {

		/** Required */
		StageStatus: FormControl<StageStatus | null | undefined>,

		/** Required */
		EdgeDeploymentSuccessInStage: FormControl<number | null | undefined>,

		/** Required */
		EdgeDeploymentPendingInStage: FormControl<number | null | undefined>,

		/** Required */
		EdgeDeploymentFailedInStage: FormControl<number | null | undefined>,
		EdgeDeploymentStatusMessage: FormControl<string | null | undefined>,
		EdgeDeploymentStageStartTime: FormControl<Date | null | undefined>,
	}
	export function CreateEdgeDeploymentStatusFormGroup() {
		return new FormGroup<EdgeDeploymentStatusFormProperties>({
			StageStatus: new FormControl<StageStatus | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentSuccessInStage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentPendingInStage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentFailedInStage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentStatusMessage: new FormControl<string | null | undefined>(undefined),
			EdgeDeploymentStageStartTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum StageStatus { CREATING = 'CREATING', READYTODEPLOY = 'READYTODEPLOY', STARTING = 'STARTING', INPROGRESS = 'INPROGRESS', DEPLOYED = 'DEPLOYED', FAILED = 'FAILED', STOPPING = 'STOPPING', STOPPED = 'STOPPED' }

	export interface DescribeEdgeDeploymentPlanRequest {

		/** Required */
		EdgeDeploymentPlanName: string;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface DescribeEdgeDeploymentPlanRequestFormProperties {

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateDescribeEdgeDeploymentPlanRequestFormGroup() {
		return new FormGroup<DescribeEdgeDeploymentPlanRequestFormProperties>({
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeEdgePackagingJobResponse {

		/** Required */
		EdgePackagingJobArn: string;

		/** Required */
		EdgePackagingJobName: string;
		CompilationJobName?: string;
		ModelName?: string;
		ModelVersion?: string;
		RoleArn?: string;
		OutputConfig?: EdgeOutputConfig;
		ResourceKey?: string;

		/** Required */
		EdgePackagingJobStatus: EdgePackagingJobStatus;
		EdgePackagingJobStatusMessage?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		ModelArtifact?: string;
		ModelSignature?: string;
		PresetDeploymentOutput?: EdgePresetDeploymentOutput;
	}
	export interface DescribeEdgePackagingJobResponseFormProperties {

		/** Required */
		EdgePackagingJobArn: FormControl<string | null | undefined>,

		/** Required */
		EdgePackagingJobName: FormControl<string | null | undefined>,
		CompilationJobName: FormControl<string | null | undefined>,
		ModelName: FormControl<string | null | undefined>,
		ModelVersion: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		ResourceKey: FormControl<string | null | undefined>,

		/** Required */
		EdgePackagingJobStatus: FormControl<EdgePackagingJobStatus | null | undefined>,
		EdgePackagingJobStatusMessage: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		ModelArtifact: FormControl<string | null | undefined>,
		ModelSignature: FormControl<string | null | undefined>,
	}
	export function CreateDescribeEdgePackagingJobResponseFormGroup() {
		return new FormGroup<DescribeEdgePackagingJobResponseFormProperties>({
			EdgePackagingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgePackagingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CompilationJobName: new FormControl<string | null | undefined>(undefined),
			ModelName: new FormControl<string | null | undefined>(undefined),
			ModelVersion: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			ResourceKey: new FormControl<string | null | undefined>(undefined),
			EdgePackagingJobStatus: new FormControl<EdgePackagingJobStatus | null | undefined>(undefined, [Validators.required]),
			EdgePackagingJobStatusMessage: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			ModelArtifact: new FormControl<string | null | undefined>(undefined),
			ModelSignature: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum EdgePackagingJobStatus { STARTING = 'STARTING', INPROGRESS = 'INPROGRESS', COMPLETED = 'COMPLETED', FAILED = 'FAILED', STOPPING = 'STOPPING', STOPPED = 'STOPPED' }


	/** The output of a SageMaker Edge Manager deployable resource. */
	export interface EdgePresetDeploymentOutput {

		/** Required */
		Type: EdgePresetDeploymentType;
		Artifact?: string;
		Status?: EdgePresetDeploymentStatus;
		StatusMessage?: string;
	}

	/** The output of a SageMaker Edge Manager deployable resource. */
	export interface EdgePresetDeploymentOutputFormProperties {

		/** Required */
		Type: FormControl<EdgePresetDeploymentType | null | undefined>,
		Artifact: FormControl<string | null | undefined>,
		Status: FormControl<EdgePresetDeploymentStatus | null | undefined>,
		StatusMessage: FormControl<string | null | undefined>,
	}
	export function CreateEdgePresetDeploymentOutputFormGroup() {
		return new FormGroup<EdgePresetDeploymentOutputFormProperties>({
			Type: new FormControl<EdgePresetDeploymentType | null | undefined>(undefined, [Validators.required]),
			Artifact: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<EdgePresetDeploymentStatus | null | undefined>(undefined),
			StatusMessage: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum EdgePresetDeploymentStatus { COMPLETED = 'COMPLETED', FAILED = 'FAILED' }

	export interface DescribeEdgePackagingJobRequest {

		/** Required */
		EdgePackagingJobName: string;
	}
	export interface DescribeEdgePackagingJobRequestFormProperties {

		/** Required */
		EdgePackagingJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeEdgePackagingJobRequestFormGroup() {
		return new FormGroup<DescribeEdgePackagingJobRequestFormProperties>({
			EdgePackagingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeEndpointOutput {

		/** Required */
		EndpointName: string;

		/** Required */
		EndpointArn: string;

		/** Required */
		EndpointConfigName: string;
		ProductionVariants?: Array<ProductionVariantSummary>;

		/** The currently active data capture configuration used by your Endpoint. */
		DataCaptureConfig?: DataCaptureConfigSummary;

		/** Required */
		EndpointStatus: EndpointStatus;
		FailureReason?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
		LastDeploymentConfig?: DeploymentConfig;
		AsyncInferenceConfig?: AsyncInferenceConfig;
		PendingDeploymentSummary?: PendingDeploymentSummary;
		ExplainerConfig?: ExplainerConfig;
		ShadowProductionVariants?: Array<ProductionVariantSummary>;
	}
	export interface DescribeEndpointOutputFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		EndpointArn: FormControl<string | null | undefined>,

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,

		/** Required */
		EndpointStatus: FormControl<EndpointStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeEndpointOutputFormGroup() {
		return new FormGroup<DescribeEndpointOutputFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointStatus: new FormControl<EndpointStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Describes weight and capacities for a production variant associated with an endpoint. If you sent a request to the <code>UpdateEndpointWeightsAndCapacities</code> API and the endpoint status is <code>Updating</code>, you get different desired and current values.  */
	export interface ProductionVariantSummary {

		/** Required */
		VariantName: string;
		DeployedImages?: Array<DeployedImage>;
		CurrentWeight?: number;
		DesiredWeight?: number;
		CurrentInstanceCount?: number | null;
		DesiredInstanceCount?: number | null;
		VariantStatus?: Array<ProductionVariantStatus>;
		CurrentServerlessConfig?: ProductionVariantServerlessConfig;
		DesiredServerlessConfig?: ProductionVariantServerlessConfig;
	}

	/** Describes weight and capacities for a production variant associated with an endpoint. If you sent a request to the <code>UpdateEndpointWeightsAndCapacities</code> API and the endpoint status is <code>Updating</code>, you get different desired and current values.  */
	export interface ProductionVariantSummaryFormProperties {

		/** Required */
		VariantName: FormControl<string | null | undefined>,
		CurrentWeight: FormControl<number | null | undefined>,
		DesiredWeight: FormControl<number | null | undefined>,
		CurrentInstanceCount: FormControl<number | null | undefined>,
		DesiredInstanceCount: FormControl<number | null | undefined>,
	}
	export function CreateProductionVariantSummaryFormGroup() {
		return new FormGroup<ProductionVariantSummaryFormProperties>({
			VariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CurrentWeight: new FormControl<number | null | undefined>(undefined),
			DesiredWeight: new FormControl<number | null | undefined>(undefined),
			CurrentInstanceCount: new FormControl<number | null | undefined>(undefined),
			DesiredInstanceCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html">ProductionVariant</a>.</p> <p>If you used the <code>registry/repository[:tag]</code> form to specify the image path of the primary container when you created the model hosted in this <code>ProductionVariant</code>, the path resolves to a path of the form <code>registry/repository[@digest]</code>. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html">Pulling an Image</a> in the <i>Amazon ECR User Guide</i>.</p> */
	export interface DeployedImage {
		SpecifiedImage?: string;
		ResolvedImage?: string;
		ResolutionTime?: Date;
	}

	/** <p>Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html">ProductionVariant</a>.</p> <p>If you used the <code>registry/repository[:tag]</code> form to specify the image path of the primary container when you created the model hosted in this <code>ProductionVariant</code>, the path resolves to a path of the form <code>registry/repository[@digest]</code>. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html">Pulling an Image</a> in the <i>Amazon ECR User Guide</i>.</p> */
	export interface DeployedImageFormProperties {
		SpecifiedImage: FormControl<string | null | undefined>,
		ResolvedImage: FormControl<string | null | undefined>,
		ResolutionTime: FormControl<Date | null | undefined>,
	}
	export function CreateDeployedImageFormGroup() {
		return new FormGroup<DeployedImageFormProperties>({
			SpecifiedImage: new FormControl<string | null | undefined>(undefined),
			ResolvedImage: new FormControl<string | null | undefined>(undefined),
			ResolutionTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Describes the status of the production variant. */
	export interface ProductionVariantStatus {

		/** Required */
		Status: VariantStatus;
		StatusMessage?: string;
		StartTime?: Date;
	}

	/** Describes the status of the production variant. */
	export interface ProductionVariantStatusFormProperties {

		/** Required */
		Status: FormControl<VariantStatus | null | undefined>,
		StatusMessage: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
	}
	export function CreateProductionVariantStatusFormGroup() {
		return new FormGroup<ProductionVariantStatusFormProperties>({
			Status: new FormControl<VariantStatus | null | undefined>(undefined, [Validators.required]),
			StatusMessage: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum VariantStatus { Creating = 'Creating', Updating = 'Updating', Deleting = 'Deleting', ActivatingTraffic = 'ActivatingTraffic', Baking = 'Baking' }


	/** The currently active data capture configuration used by your Endpoint. */
	export interface DataCaptureConfigSummary {

		/** Required */
		EnableCapture: boolean;

		/** Required */
		CaptureStatus: CaptureStatus;

		/** Required */
		CurrentSamplingPercentage: number;

		/** Required */
		DestinationS3Uri: string;

		/** Required */
		KmsKeyId: string;
	}

	/** The currently active data capture configuration used by your Endpoint. */
	export interface DataCaptureConfigSummaryFormProperties {

		/** Required */
		EnableCapture: FormControl<boolean | null | undefined>,

		/** Required */
		CaptureStatus: FormControl<CaptureStatus | null | undefined>,

		/** Required */
		CurrentSamplingPercentage: FormControl<number | null | undefined>,

		/** Required */
		DestinationS3Uri: FormControl<string | null | undefined>,

		/** Required */
		KmsKeyId: FormControl<string | null | undefined>,
	}
	export function CreateDataCaptureConfigSummaryFormGroup() {
		return new FormGroup<DataCaptureConfigSummaryFormProperties>({
			EnableCapture: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			CaptureStatus: new FormControl<CaptureStatus | null | undefined>(undefined, [Validators.required]),
			CurrentSamplingPercentage: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			DestinationS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum CaptureStatus { Started = 'Started', Stopped = 'Stopped' }

	export enum EndpointStatus { OutOfService = 'OutOfService', Creating = 'Creating', Updating = 'Updating', SystemUpdating = 'SystemUpdating', RollingBack = 'RollingBack', InService = 'InService', Deleting = 'Deleting', Failed = 'Failed', UpdateRollbackFailed = 'UpdateRollbackFailed' }


	/** The summary of an in-progress deployment when an endpoint is creating or updating with a new endpoint configuration. */
	export interface PendingDeploymentSummary {

		/** Required */
		EndpointConfigName: string;
		ProductionVariants?: Array<PendingProductionVariantSummary>;
		StartTime?: Date;
		ShadowProductionVariants?: Array<PendingProductionVariantSummary>;
	}

	/** The summary of an in-progress deployment when an endpoint is creating or updating with a new endpoint configuration. */
	export interface PendingDeploymentSummaryFormProperties {

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
	}
	export function CreatePendingDeploymentSummaryFormGroup() {
		return new FormGroup<PendingDeploymentSummaryFormProperties>({
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StartTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The production variant summary for a deployment when an endpoint is creating or updating with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpoint</a> operations. Describes the <code>VariantStatus </code>, weight and capacity for a production variant associated with an endpoint.  */
	export interface PendingProductionVariantSummary {

		/** Required */
		VariantName: string;
		DeployedImages?: Array<DeployedImage>;
		CurrentWeight?: number;
		DesiredWeight?: number;
		CurrentInstanceCount?: number | null;
		DesiredInstanceCount?: number | null;
		InstanceType?: ProductionVariantInstanceType;
		AcceleratorType?: ProductionVariantAcceleratorType;
		VariantStatus?: Array<ProductionVariantStatus>;
		CurrentServerlessConfig?: ProductionVariantServerlessConfig;
		DesiredServerlessConfig?: ProductionVariantServerlessConfig;
	}

	/** The production variant summary for a deployment when an endpoint is creating or updating with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpoint</a> operations. Describes the <code>VariantStatus </code>, weight and capacity for a production variant associated with an endpoint.  */
	export interface PendingProductionVariantSummaryFormProperties {

		/** Required */
		VariantName: FormControl<string | null | undefined>,
		CurrentWeight: FormControl<number | null | undefined>,
		DesiredWeight: FormControl<number | null | undefined>,
		CurrentInstanceCount: FormControl<number | null | undefined>,
		DesiredInstanceCount: FormControl<number | null | undefined>,
		InstanceType: FormControl<ProductionVariantInstanceType | null | undefined>,
		AcceleratorType: FormControl<ProductionVariantAcceleratorType | null | undefined>,
	}
	export function CreatePendingProductionVariantSummaryFormGroup() {
		return new FormGroup<PendingProductionVariantSummaryFormProperties>({
			VariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CurrentWeight: new FormControl<number | null | undefined>(undefined),
			DesiredWeight: new FormControl<number | null | undefined>(undefined),
			CurrentInstanceCount: new FormControl<number | null | undefined>(undefined),
			DesiredInstanceCount: new FormControl<number | null | undefined>(undefined),
			InstanceType: new FormControl<ProductionVariantInstanceType | null | undefined>(undefined),
			AcceleratorType: new FormControl<ProductionVariantAcceleratorType | null | undefined>(undefined),
		});

	}

	export interface DescribeEndpointInput {

		/** Required */
		EndpointName: string;
	}
	export interface DescribeEndpointInputFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeEndpointInputFormGroup() {
		return new FormGroup<DescribeEndpointInputFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeEndpointConfigOutput {

		/** Required */
		EndpointConfigName: string;

		/** Required */
		EndpointConfigArn: string;

		/** Required */
		ProductionVariants: Array<ProductionVariant>;

		/** Configuration to control how SageMaker captures inference data. */
		DataCaptureConfig?: DataCaptureConfig;
		KmsKeyId?: string;

		/** Required */
		CreationTime: Date;
		AsyncInferenceConfig?: AsyncInferenceConfig;
		ExplainerConfig?: ExplainerConfig;
		ShadowProductionVariants?: Array<ProductionVariant>;
	}
	export interface DescribeEndpointConfigOutputFormProperties {

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,

		/** Required */
		EndpointConfigArn: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeEndpointConfigOutputFormGroup() {
		return new FormGroup<DescribeEndpointConfigOutputFormProperties>({
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointConfigArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeEndpointConfigInput {

		/** Required */
		EndpointConfigName: string;
	}
	export interface DescribeEndpointConfigInputFormProperties {

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeEndpointConfigInputFormGroup() {
		return new FormGroup<DescribeEndpointConfigInputFormProperties>({
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeExperimentResponse {
		ExperimentName?: string;
		ExperimentArn?: string;
		DisplayName?: string;
		Source?: ExperimentSource;
		Description?: string;
		CreationTime?: Date;
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;
		LastModifiedBy?: UserContext;
	}
	export interface DescribeExperimentResponseFormProperties {
		ExperimentName: FormControl<string | null | undefined>,
		ExperimentArn: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeExperimentResponseFormGroup() {
		return new FormGroup<DescribeExperimentResponseFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			ExperimentArn: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The source of the experiment. */
	export interface ExperimentSource {

		/** Required */
		SourceArn: string;
		SourceType?: string;
	}

	/** The source of the experiment. */
	export interface ExperimentSourceFormProperties {

		/** Required */
		SourceArn: FormControl<string | null | undefined>,
		SourceType: FormControl<string | null | undefined>,
	}
	export function CreateExperimentSourceFormGroup() {
		return new FormGroup<ExperimentSourceFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceType: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeExperimentRequest {

		/** Required */
		ExperimentName: string;
	}
	export interface DescribeExperimentRequestFormProperties {

		/** Required */
		ExperimentName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeExperimentRequestFormGroup() {
		return new FormGroup<DescribeExperimentRequestFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeFeatureGroupResponse {

		/** Required */
		FeatureGroupArn: string;

		/** Required */
		FeatureGroupName: string;

		/** Required */
		RecordIdentifierFeatureName: string;

		/** Required */
		EventTimeFeatureName: string;

		/** Required */
		FeatureDefinitions: Array<FeatureDefinition>;

		/** Required */
		CreationTime: Date;
		LastModifiedTime?: Date;
		OnlineStoreConfig?: OnlineStoreConfig;
		OfflineStoreConfig?: OfflineStoreConfig;
		RoleArn?: string;
		FeatureGroupStatus?: FeatureGroupStatus;
		OfflineStoreStatus?: OfflineStoreStatus;
		LastUpdateStatus?: LastUpdateStatus;
		FailureReason?: string;
		Description?: string;

		/** Required */
		NextToken: string;
		OnlineStoreTotalSizeBytes?: number | null;
	}
	export interface DescribeFeatureGroupResponseFormProperties {

		/** Required */
		FeatureGroupArn: FormControl<string | null | undefined>,

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,

		/** Required */
		RecordIdentifierFeatureName: FormControl<string | null | undefined>,

		/** Required */
		EventTimeFeatureName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		FeatureGroupStatus: FormControl<FeatureGroupStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,

		/** Required */
		NextToken: FormControl<string | null | undefined>,
		OnlineStoreTotalSizeBytes: FormControl<number | null | undefined>,
	}
	export function CreateDescribeFeatureGroupResponseFormGroup() {
		return new FormGroup<DescribeFeatureGroupResponseFormProperties>({
			FeatureGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RecordIdentifierFeatureName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EventTimeFeatureName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			FeatureGroupStatus: new FormControl<FeatureGroupStatus | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			OnlineStoreTotalSizeBytes: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum FeatureGroupStatus { Creating = 'Creating', Created = 'Created', CreateFailed = 'CreateFailed', Deleting = 'Deleting', DeleteFailed = 'DeleteFailed' }


	/** The status of <code>OfflineStore</code>. */
	export interface OfflineStoreStatus {

		/** Required */
		Status: OfflineStoreStatusValue;
		BlockedReason?: string;
	}

	/** The status of <code>OfflineStore</code>. */
	export interface OfflineStoreStatusFormProperties {

		/** Required */
		Status: FormControl<OfflineStoreStatusValue | null | undefined>,
		BlockedReason: FormControl<string | null | undefined>,
	}
	export function CreateOfflineStoreStatusFormGroup() {
		return new FormGroup<OfflineStoreStatusFormProperties>({
			Status: new FormControl<OfflineStoreStatusValue | null | undefined>(undefined, [Validators.required]),
			BlockedReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum OfflineStoreStatusValue { Active = 'Active', Blocked = 'Blocked', Disabled = 'Disabled' }


	/** A value that indicates whether the update was successful. */
	export interface LastUpdateStatus {

		/** Required */
		Status: LastUpdateStatusValue;
		FailureReason?: string;
	}

	/** A value that indicates whether the update was successful. */
	export interface LastUpdateStatusFormProperties {

		/** Required */
		Status: FormControl<LastUpdateStatusValue | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateLastUpdateStatusFormGroup() {
		return new FormGroup<LastUpdateStatusFormProperties>({
			Status: new FormControl<LastUpdateStatusValue | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum LastUpdateStatusValue { Successful = 'Successful', Failed = 'Failed', InProgress = 'InProgress' }

	export interface DescribeFeatureGroupRequest {

		/** Required */
		FeatureGroupName: string;
		NextToken?: string;
	}
	export interface DescribeFeatureGroupRequestFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFeatureGroupRequestFormGroup() {
		return new FormGroup<DescribeFeatureGroupRequestFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeFeatureMetadataResponse {

		/** Required */
		FeatureGroupArn: string;

		/** Required */
		FeatureGroupName: string;

		/** Required */
		FeatureName: string;

		/** Required */
		FeatureType: FeatureType;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
		Description?: string;
		Parameters?: Array<FeatureParameter>;
	}
	export interface DescribeFeatureMetadataResponseFormProperties {

		/** Required */
		FeatureGroupArn: FormControl<string | null | undefined>,

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,

		/** Required */
		FeatureName: FormControl<string | null | undefined>,

		/** Required */
		FeatureType: FormControl<FeatureType | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFeatureMetadataResponseFormGroup() {
		return new FormGroup<DescribeFeatureMetadataResponseFormProperties>({
			FeatureGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FeatureName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FeatureType: new FormControl<FeatureType | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A key-value pair that you specify to describe the feature. */
	export interface FeatureParameter {
		Key?: string;
		Value?: string;
	}

	/** A key-value pair that you specify to describe the feature. */
	export interface FeatureParameterFormProperties {
		Key: FormControl<string | null | undefined>,
		Value: FormControl<string | null | undefined>,
	}
	export function CreateFeatureParameterFormGroup() {
		return new FormGroup<FeatureParameterFormProperties>({
			Key: new FormControl<string | null | undefined>(undefined),
			Value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeFeatureMetadataRequest {

		/** Required */
		FeatureGroupName: string;

		/** Required */
		FeatureName: string;
	}
	export interface DescribeFeatureMetadataRequestFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,

		/** Required */
		FeatureName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFeatureMetadataRequestFormGroup() {
		return new FormGroup<DescribeFeatureMetadataRequestFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FeatureName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeFlowDefinitionResponse {

		/** Required */
		FlowDefinitionArn: string;

		/** Required */
		FlowDefinitionName: string;

		/** Required */
		FlowDefinitionStatus: FlowDefinitionStatus;

		/** Required */
		CreationTime: Date;
		HumanLoopRequestSource?: HumanLoopRequestSource;
		HumanLoopActivationConfig?: HumanLoopActivationConfig;

		/** Required */
		HumanLoopConfig: HumanLoopConfig;

		/** Required */
		OutputConfig: FlowDefinitionOutputConfig;

		/** Required */
		RoleArn: string;
		FailureReason?: string;
	}
	export interface DescribeFlowDefinitionResponseFormProperties {

		/** Required */
		FlowDefinitionArn: FormControl<string | null | undefined>,

		/** Required */
		FlowDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		FlowDefinitionStatus: FormControl<FlowDefinitionStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFlowDefinitionResponseFormGroup() {
		return new FormGroup<DescribeFlowDefinitionResponseFormProperties>({
			FlowDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FlowDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FlowDefinitionStatus: new FormControl<FlowDefinitionStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum FlowDefinitionStatus { Initializing = 'Initializing', Active = 'Active', Failed = 'Failed', Deleting = 'Deleting' }

	export interface DescribeFlowDefinitionRequest {

		/** Required */
		FlowDefinitionName: string;
	}
	export interface DescribeFlowDefinitionRequestFormProperties {

		/** Required */
		FlowDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFlowDefinitionRequestFormGroup() {
		return new FormGroup<DescribeFlowDefinitionRequestFormProperties>({
			FlowDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeHubResponse {

		/** Required */
		HubName: string;

		/** Required */
		HubArn: string;
		HubDisplayName?: string;
		HubDescription?: string;
		HubSearchKeywords?: Array<string>;
		S3StorageConfig?: HubS3StorageConfig;

		/** Required */
		HubStatus: HubStatus;
		FailureReason?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
	}
	export interface DescribeHubResponseFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubArn: FormControl<string | null | undefined>,
		HubDisplayName: FormControl<string | null | undefined>,
		HubDescription: FormControl<string | null | undefined>,

		/** Required */
		HubStatus: FormControl<HubStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeHubResponseFormGroup() {
		return new FormGroup<DescribeHubResponseFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubDisplayName: new FormControl<string | null | undefined>(undefined),
			HubDescription: new FormControl<string | null | undefined>(undefined),
			HubStatus: new FormControl<HubStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum HubStatus { InService = 'InService', Creating = 'Creating', Updating = 'Updating', Deleting = 'Deleting', CreateFailed = 'CreateFailed', UpdateFailed = 'UpdateFailed', DeleteFailed = 'DeleteFailed' }

	export interface DescribeHubRequest {

		/** Required */
		HubName: string;
	}
	export interface DescribeHubRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeHubRequestFormGroup() {
		return new FormGroup<DescribeHubRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeHubContentResponse {

		/** Required */
		HubContentName: string;

		/** Required */
		HubContentArn: string;

		/** Required */
		HubContentVersion: string;

		/** Required */
		HubContentType: HubContentType;

		/** Required */
		DocumentSchemaVersion: string;

		/** Required */
		HubName: string;

		/** Required */
		HubArn: string;
		HubContentDisplayName?: string;
		HubContentDescription?: string;
		HubContentMarkdown?: string;

		/** Required */
		HubContentDocument: string;
		HubContentSearchKeywords?: Array<string>;
		HubContentDependencies?: Array<HubContentDependency>;

		/** Required */
		HubContentStatus: HubContentStatus;
		FailureReason?: string;

		/** Required */
		CreationTime: Date;
	}
	export interface DescribeHubContentResponseFormProperties {

		/** Required */
		HubContentName: FormControl<string | null | undefined>,

		/** Required */
		HubContentArn: FormControl<string | null | undefined>,

		/** Required */
		HubContentVersion: FormControl<string | null | undefined>,

		/** Required */
		HubContentType: FormControl<HubContentType | null | undefined>,

		/** Required */
		DocumentSchemaVersion: FormControl<string | null | undefined>,

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubArn: FormControl<string | null | undefined>,
		HubContentDisplayName: FormControl<string | null | undefined>,
		HubContentDescription: FormControl<string | null | undefined>,
		HubContentMarkdown: FormControl<string | null | undefined>,

		/** Required */
		HubContentDocument: FormControl<string | null | undefined>,

		/** Required */
		HubContentStatus: FormControl<HubContentStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeHubContentResponseFormGroup() {
		return new FormGroup<DescribeHubContentResponseFormProperties>({
			HubContentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentType: new FormControl<HubContentType | null | undefined>(undefined, [Validators.required]),
			DocumentSchemaVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentDisplayName: new FormControl<string | null | undefined>(undefined),
			HubContentDescription: new FormControl<string | null | undefined>(undefined),
			HubContentMarkdown: new FormControl<string | null | undefined>(undefined),
			HubContentDocument: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentStatus: new FormControl<HubContentStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Any dependencies related to hub content, such as scripts, model artifacts, datasets, or notebooks. */
	export interface HubContentDependency {
		DependencyOriginPath?: string;
		DependencyCopyPath?: string;
	}

	/** Any dependencies related to hub content, such as scripts, model artifacts, datasets, or notebooks. */
	export interface HubContentDependencyFormProperties {
		DependencyOriginPath: FormControl<string | null | undefined>,
		DependencyCopyPath: FormControl<string | null | undefined>,
	}
	export function CreateHubContentDependencyFormGroup() {
		return new FormGroup<HubContentDependencyFormProperties>({
			DependencyOriginPath: new FormControl<string | null | undefined>(undefined),
			DependencyCopyPath: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum HubContentStatus { Available = 'Available', Importing = 'Importing', Deleting = 'Deleting', ImportFailed = 'ImportFailed', DeleteFailed = 'DeleteFailed' }

	export interface DescribeHubContentRequest {

		/** Required */
		HubName: string;

		/** Required */
		HubContentType: HubContentType;

		/** Required */
		HubContentName: string;
		HubContentVersion?: string;
	}
	export interface DescribeHubContentRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubContentType: FormControl<HubContentType | null | undefined>,

		/** Required */
		HubContentName: FormControl<string | null | undefined>,
		HubContentVersion: FormControl<string | null | undefined>,
	}
	export function CreateDescribeHubContentRequestFormGroup() {
		return new FormGroup<DescribeHubContentRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentType: new FormControl<HubContentType | null | undefined>(undefined, [Validators.required]),
			HubContentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentVersion: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeHumanTaskUiResponse {

		/** Required */
		HumanTaskUiArn: string;

		/** Required */
		HumanTaskUiName: string;
		HumanTaskUiStatus?: HumanTaskUiStatus;

		/** Required */
		CreationTime: Date;

		/**
		 * Container for user interface template information.
		 * Required
		 */
		UiTemplate: UiTemplateInfo;
	}
	export interface DescribeHumanTaskUiResponseFormProperties {

		/** Required */
		HumanTaskUiArn: FormControl<string | null | undefined>,

		/** Required */
		HumanTaskUiName: FormControl<string | null | undefined>,
		HumanTaskUiStatus: FormControl<HumanTaskUiStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeHumanTaskUiResponseFormGroup() {
		return new FormGroup<DescribeHumanTaskUiResponseFormProperties>({
			HumanTaskUiArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HumanTaskUiName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HumanTaskUiStatus: new FormControl<HumanTaskUiStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum HumanTaskUiStatus { Active = 'Active', Deleting = 'Deleting' }


	/** Container for user interface template information. */
	export interface UiTemplateInfo {
		Url?: string;
		ContentSha256?: string;
	}

	/** Container for user interface template information. */
	export interface UiTemplateInfoFormProperties {
		Url: FormControl<string | null | undefined>,
		ContentSha256: FormControl<string | null | undefined>,
	}
	export function CreateUiTemplateInfoFormGroup() {
		return new FormGroup<UiTemplateInfoFormProperties>({
			Url: new FormControl<string | null | undefined>(undefined),
			ContentSha256: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeHumanTaskUiRequest {

		/** Required */
		HumanTaskUiName: string;
	}
	export interface DescribeHumanTaskUiRequestFormProperties {

		/** Required */
		HumanTaskUiName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeHumanTaskUiRequestFormGroup() {
		return new FormGroup<DescribeHumanTaskUiRequestFormProperties>({
			HumanTaskUiName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeHyperParameterTuningJobResponse {

		/** Required */
		HyperParameterTuningJobName: string;

		/** Required */
		HyperParameterTuningJobArn: string;

		/** Required */
		HyperParameterTuningJobConfig: HyperParameterTuningJobConfig;
		TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
		TrainingJobDefinitions?: Array<HyperParameterTrainingJobDefinition>;

		/** Required */
		HyperParameterTuningJobStatus: CandidateStatus;

		/** Required */
		CreationTime: Date;
		HyperParameterTuningEndTime?: Date;
		LastModifiedTime?: Date;

		/** Required */
		TrainingJobStatusCounters: TrainingJobStatusCounters;

		/** Required */
		ObjectiveStatusCounters: ObjectiveStatusCounters;
		BestTrainingJob?: HyperParameterTrainingJobSummary;
		OverallBestTrainingJob?: HyperParameterTrainingJobSummary;
		WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
		FailureReason?: string;
		TuningJobCompletionDetails?: HyperParameterTuningJobCompletionDetails;

		/** The total resources consumed by your hyperparameter tuning job. */
		ConsumedResources?: HyperParameterTuningJobConsumedResources;
		Autotune?: Autotune;
	}
	export interface DescribeHyperParameterTuningJobResponseFormProperties {

		/** Required */
		HyperParameterTuningJobName: FormControl<string | null | undefined>,

		/** Required */
		HyperParameterTuningJobArn: FormControl<string | null | undefined>,

		/** Required */
		HyperParameterTuningJobStatus: FormControl<CandidateStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		HyperParameterTuningEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateDescribeHyperParameterTuningJobResponseFormGroup() {
		return new FormGroup<DescribeHyperParameterTuningJobResponseFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HyperParameterTuningJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HyperParameterTuningJobStatus: new FormControl<CandidateStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			HyperParameterTuningEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The numbers of training jobs launched by a hyperparameter tuning job, categorized by status. */
	export interface TrainingJobStatusCounters {
		Completed?: number | null;
		InProgress?: number | null;
		RetryableError?: number | null;
		NonRetryableError?: number | null;
		Stopped?: number | null;
	}

	/** The numbers of training jobs launched by a hyperparameter tuning job, categorized by status. */
	export interface TrainingJobStatusCountersFormProperties {
		Completed: FormControl<number | null | undefined>,
		InProgress: FormControl<number | null | undefined>,
		RetryableError: FormControl<number | null | undefined>,
		NonRetryableError: FormControl<number | null | undefined>,
		Stopped: FormControl<number | null | undefined>,
	}
	export function CreateTrainingJobStatusCountersFormGroup() {
		return new FormGroup<TrainingJobStatusCountersFormProperties>({
			Completed: new FormControl<number | null | undefined>(undefined),
			InProgress: new FormControl<number | null | undefined>(undefined),
			RetryableError: new FormControl<number | null | undefined>(undefined),
			NonRetryableError: new FormControl<number | null | undefined>(undefined),
			Stopped: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process. */
	export interface ObjectiveStatusCounters {
		Succeeded?: number | null;
		Pending?: number | null;
		Failed?: number | null;
	}

	/** Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process. */
	export interface ObjectiveStatusCountersFormProperties {
		Succeeded: FormControl<number | null | undefined>,
		Pending: FormControl<number | null | undefined>,
		Failed: FormControl<number | null | undefined>,
	}
	export function CreateObjectiveStatusCountersFormGroup() {
		return new FormGroup<ObjectiveStatusCountersFormProperties>({
			Succeeded: new FormControl<number | null | undefined>(undefined),
			Pending: new FormControl<number | null | undefined>(undefined),
			Failed: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The container for the summary information about a training job. */
	export interface HyperParameterTrainingJobSummary {
		TrainingJobDefinitionName?: string;

		/** Required */
		TrainingJobName: string;

		/** Required */
		TrainingJobArn: string;
		TuningJobName?: string;

		/** Required */
		CreationTime: Date;
		TrainingStartTime?: Date;
		TrainingEndTime?: Date;

		/** Required */
		TrainingJobStatus: TrialComponentPrimaryStatus;

		/** Required */
		TunedHyperParameters: HyperParameters;
		FailureReason?: string;
		FinalHyperParameterTuningJobObjectiveMetric?: FinalHyperParameterTuningJobObjectiveMetric;
		ObjectiveStatus?: ObjectiveStatus;
	}

	/** The container for the summary information about a training job. */
	export interface HyperParameterTrainingJobSummaryFormProperties {
		TrainingJobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		TrainingJobName: FormControl<string | null | undefined>,

		/** Required */
		TrainingJobArn: FormControl<string | null | undefined>,
		TuningJobName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		TrainingStartTime: FormControl<Date | null | undefined>,
		TrainingEndTime: FormControl<Date | null | undefined>,

		/** Required */
		TrainingJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ObjectiveStatus: FormControl<ObjectiveStatus | null | undefined>,
	}
	export function CreateHyperParameterTrainingJobSummaryFormGroup() {
		return new FormGroup<HyperParameterTrainingJobSummaryFormProperties>({
			TrainingJobDefinitionName: new FormControl<string | null | undefined>(undefined),
			TrainingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TrainingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TuningJobName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			TrainingStartTime: new FormControl<Date | null | undefined>(undefined),
			TrainingEndTime: new FormControl<Date | null | undefined>(undefined),
			TrainingJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ObjectiveStatus: new FormControl<ObjectiveStatus | null | undefined>(undefined),
		});

	}


	/** Shows the latest objective metric emitted by a training job that was launched by a hyperparameter tuning job. You define the objective metric in the <code>HyperParameterTuningJobObjective</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">HyperParameterTuningJobConfig</a>. */
	export interface FinalHyperParameterTuningJobObjectiveMetric {
		Type?: HyperParameterTuningJobObjectiveType;

		/** Required */
		MetricName: string;

		/** Required */
		Value: number;
	}

	/** Shows the latest objective metric emitted by a training job that was launched by a hyperparameter tuning job. You define the objective metric in the <code>HyperParameterTuningJobObjective</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html">HyperParameterTuningJobConfig</a>. */
	export interface FinalHyperParameterTuningJobObjectiveMetricFormProperties {
		Type: FormControl<HyperParameterTuningJobObjectiveType | null | undefined>,

		/** Required */
		MetricName: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<number | null | undefined>,
	}
	export function CreateFinalHyperParameterTuningJobObjectiveMetricFormGroup() {
		return new FormGroup<FinalHyperParameterTuningJobObjectiveMetricFormProperties>({
			Type: new FormControl<HyperParameterTuningJobObjectiveType | null | undefined>(undefined),
			MetricName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A structure that contains runtime information about both current and completed hyperparameter tuning jobs. */
	export interface HyperParameterTuningJobCompletionDetails {
		NumberOfTrainingJobsObjectiveNotImproving?: number | null;
		ConvergenceDetectedTime?: Date;
	}

	/** A structure that contains runtime information about both current and completed hyperparameter tuning jobs. */
	export interface HyperParameterTuningJobCompletionDetailsFormProperties {
		NumberOfTrainingJobsObjectiveNotImproving: FormControl<number | null | undefined>,
		ConvergenceDetectedTime: FormControl<Date | null | undefined>,
	}
	export function CreateHyperParameterTuningJobCompletionDetailsFormGroup() {
		return new FormGroup<HyperParameterTuningJobCompletionDetailsFormProperties>({
			NumberOfTrainingJobsObjectiveNotImproving: new FormControl<number | null | undefined>(undefined),
			ConvergenceDetectedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The total resources consumed by your hyperparameter tuning job. */
	export interface HyperParameterTuningJobConsumedResources {
		RuntimeInSeconds?: number | null;
	}

	/** The total resources consumed by your hyperparameter tuning job. */
	export interface HyperParameterTuningJobConsumedResourcesFormProperties {
		RuntimeInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateHyperParameterTuningJobConsumedResourcesFormGroup() {
		return new FormGroup<HyperParameterTuningJobConsumedResourcesFormProperties>({
			RuntimeInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeHyperParameterTuningJobRequest {

		/** Required */
		HyperParameterTuningJobName: string;
	}
	export interface DescribeHyperParameterTuningJobRequestFormProperties {

		/** Required */
		HyperParameterTuningJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeHyperParameterTuningJobRequestFormGroup() {
		return new FormGroup<DescribeHyperParameterTuningJobRequestFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeImageResponse {
		CreationTime?: Date;
		Description?: string;
		DisplayName?: string;
		FailureReason?: string;
		ImageArn?: string;
		ImageName?: string;
		ImageStatus?: ImageStatus;
		LastModifiedTime?: Date;
		RoleArn?: string;
	}
	export interface DescribeImageResponseFormProperties {
		CreationTime: FormControl<Date | null | undefined>,
		Description: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ImageArn: FormControl<string | null | undefined>,
		ImageName: FormControl<string | null | undefined>,
		ImageStatus: FormControl<ImageStatus | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeImageResponseFormGroup() {
		return new FormGroup<DescribeImageResponseFormProperties>({
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ImageArn: new FormControl<string | null | undefined>(undefined),
			ImageName: new FormControl<string | null | undefined>(undefined),
			ImageStatus: new FormControl<ImageStatus | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ImageStatus { CREATING = 'CREATING', CREATED = 'CREATED', CREATE_FAILED = 'CREATE_FAILED', UPDATING = 'UPDATING', UPDATE_FAILED = 'UPDATE_FAILED', DELETING = 'DELETING', DELETE_FAILED = 'DELETE_FAILED' }

	export interface DescribeImageRequest {

		/** Required */
		ImageName: string;
	}
	export interface DescribeImageRequestFormProperties {

		/** Required */
		ImageName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeImageRequestFormGroup() {
		return new FormGroup<DescribeImageRequestFormProperties>({
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeImageVersionResponse {
		BaseImage?: string;
		ContainerImage?: string;
		CreationTime?: Date;
		FailureReason?: string;
		ImageArn?: string;
		ImageVersionArn?: string;
		ImageVersionStatus?: ImageVersionStatus;
		LastModifiedTime?: Date;
		Version?: number | null;
		VendorGuidance?: VendorGuidance;
		JobType?: JobType;
		MLFramework?: string;
		ProgrammingLang?: string;
		Processor?: Processor;
		Horovod?: boolean | null;
		ReleaseNotes?: string;
	}
	export interface DescribeImageVersionResponseFormProperties {
		BaseImage: FormControl<string | null | undefined>,
		ContainerImage: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ImageArn: FormControl<string | null | undefined>,
		ImageVersionArn: FormControl<string | null | undefined>,
		ImageVersionStatus: FormControl<ImageVersionStatus | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		Version: FormControl<number | null | undefined>,
		VendorGuidance: FormControl<VendorGuidance | null | undefined>,
		JobType: FormControl<JobType | null | undefined>,
		MLFramework: FormControl<string | null | undefined>,
		ProgrammingLang: FormControl<string | null | undefined>,
		Processor: FormControl<Processor | null | undefined>,
		Horovod: FormControl<boolean | null | undefined>,
		ReleaseNotes: FormControl<string | null | undefined>,
	}
	export function CreateDescribeImageVersionResponseFormGroup() {
		return new FormGroup<DescribeImageVersionResponseFormProperties>({
			BaseImage: new FormControl<string | null | undefined>(undefined),
			ContainerImage: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ImageArn: new FormControl<string | null | undefined>(undefined),
			ImageVersionArn: new FormControl<string | null | undefined>(undefined),
			ImageVersionStatus: new FormControl<ImageVersionStatus | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			Version: new FormControl<number | null | undefined>(undefined),
			VendorGuidance: new FormControl<VendorGuidance | null | undefined>(undefined),
			JobType: new FormControl<JobType | null | undefined>(undefined),
			MLFramework: new FormControl<string | null | undefined>(undefined),
			ProgrammingLang: new FormControl<string | null | undefined>(undefined),
			Processor: new FormControl<Processor | null | undefined>(undefined),
			Horovod: new FormControl<boolean | null | undefined>(undefined),
			ReleaseNotes: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ImageVersionStatus { CREATING = 'CREATING', CREATED = 'CREATED', CREATE_FAILED = 'CREATE_FAILED', DELETING = 'DELETING', DELETE_FAILED = 'DELETE_FAILED' }

	export interface DescribeImageVersionRequest {

		/** Required */
		ImageName: string;
		Version?: number | null;
		Alias?: string;
	}
	export interface DescribeImageVersionRequestFormProperties {

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		Version: FormControl<number | null | undefined>,
		Alias: FormControl<string | null | undefined>,
	}
	export function CreateDescribeImageVersionRequestFormGroup() {
		return new FormGroup<DescribeImageVersionRequestFormProperties>({
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Version: new FormControl<number | null | undefined>(undefined),
			Alias: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeInferenceExperimentResponse {

		/** Required */
		Arn: string;

		/** Required */
		Name: string;

		/** Required */
		Type: InferenceExperimentType;
		Schedule?: InferenceExperimentSchedule;

		/** Required */
		Status: InferenceExperimentStatus;
		StatusReason?: string;
		Description?: string;
		CreationTime?: Date;
		CompletionTime?: Date;
		LastModifiedTime?: Date;
		RoleArn?: string;

		/** Required */
		EndpointMetadata: EndpointMetadata;

		/** Required */
		ModelVariants: Array<ModelVariantConfigSummary>;
		DataStorageConfig?: InferenceExperimentDataStorageConfig;
		ShadowModeConfig?: ShadowModeConfig;
		KmsKey?: string;
	}
	export interface DescribeInferenceExperimentResponseFormProperties {

		/** Required */
		Arn: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<InferenceExperimentType | null | undefined>,

		/** Required */
		Status: FormControl<InferenceExperimentStatus | null | undefined>,
		StatusReason: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		CompletionTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		KmsKey: FormControl<string | null | undefined>,
	}
	export function CreateDescribeInferenceExperimentResponseFormGroup() {
		return new FormGroup<DescribeInferenceExperimentResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<InferenceExperimentType | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<InferenceExperimentStatus | null | undefined>(undefined, [Validators.required]),
			StatusReason: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			CompletionTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			KmsKey: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum InferenceExperimentStatus { Creating = 'Creating', Created = 'Created', Updating = 'Updating', Running = 'Running', Starting = 'Starting', Stopping = 'Stopping', Completed = 'Completed', Cancelled = 'Cancelled' }


	/** The metadata of the endpoint. */
	export interface EndpointMetadata {

		/** Required */
		EndpointName: string;
		EndpointConfigName?: string;
		EndpointStatus?: EndpointStatus;
		FailureReason?: string;
	}

	/** The metadata of the endpoint. */
	export interface EndpointMetadataFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,
		EndpointConfigName: FormControl<string | null | undefined>,
		EndpointStatus: FormControl<EndpointStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateEndpointMetadataFormGroup() {
		return new FormGroup<EndpointMetadataFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointConfigName: new FormControl<string | null | undefined>(undefined),
			EndpointStatus: new FormControl<EndpointStatus | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary of the deployment configuration of a model. */
	export interface ModelVariantConfigSummary {

		/** Required */
		ModelName: string;

		/** Required */
		VariantName: string;

		/** Required */
		InfrastructureConfig: ModelInfrastructureConfig;

		/** Required */
		Status: ModelVariantStatus;
	}

	/** Summary of the deployment configuration of a model. */
	export interface ModelVariantConfigSummaryFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		VariantName: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<ModelVariantStatus | null | undefined>,
	}
	export function CreateModelVariantConfigSummaryFormGroup() {
		return new FormGroup<ModelVariantConfigSummaryFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<ModelVariantStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ModelVariantStatus { Creating = 'Creating', Updating = 'Updating', InService = 'InService', Deleting = 'Deleting', Deleted = 'Deleted' }

	export interface DescribeInferenceExperimentRequest {

		/** Required */
		Name: string;
	}
	export interface DescribeInferenceExperimentRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateDescribeInferenceExperimentRequestFormGroup() {
		return new FormGroup<DescribeInferenceExperimentRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeInferenceRecommendationsJobResponse {

		/** Required */
		JobName: string;
		JobDescription?: string;

		/** Required */
		JobType: RecommendationJobType;

		/** Required */
		JobArn: string;

		/** Required */
		RoleArn: string;

		/** Required */
		Status: RecommendationJobStatus;

		/** Required */
		CreationTime: Date;
		CompletionTime?: Date;

		/** Required */
		LastModifiedTime: Date;
		FailureReason?: string;

		/** Required */
		InputConfig: RecommendationJobInputConfig;
		StoppingConditions?: RecommendationJobStoppingConditions;
		InferenceRecommendations?: Array<InferenceRecommendation>;
		EndpointPerformances?: Array<EndpointPerformance>;
	}
	export interface DescribeInferenceRecommendationsJobResponseFormProperties {

		/** Required */
		JobName: FormControl<string | null | undefined>,
		JobDescription: FormControl<string | null | undefined>,

		/** Required */
		JobType: FormControl<RecommendationJobType | null | undefined>,

		/** Required */
		JobArn: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<RecommendationJobStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		CompletionTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateDescribeInferenceRecommendationsJobResponseFormGroup() {
		return new FormGroup<DescribeInferenceRecommendationsJobResponseFormProperties>({
			JobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobDescription: new FormControl<string | null | undefined>(undefined),
			JobType: new FormControl<RecommendationJobType | null | undefined>(undefined, [Validators.required]),
			JobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<RecommendationJobStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			CompletionTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RecommendationJobStatus { PENDING = 'PENDING', IN_PROGRESS = 'IN_PROGRESS', COMPLETED = 'COMPLETED', FAILED = 'FAILED', STOPPING = 'STOPPING', STOPPED = 'STOPPED' }


	/** A list of recommendations made by Amazon SageMaker Inference Recommender. */
	export interface InferenceRecommendation {

		/** Required */
		Metrics: RecommendationMetrics;

		/** Required */
		EndpointConfiguration: EndpointOutputConfiguration;

		/** Required */
		ModelConfiguration: ModelConfiguration;
		RecommendationId?: string;
		InvocationEndTime?: Date;
		InvocationStartTime?: Date;
	}

	/** A list of recommendations made by Amazon SageMaker Inference Recommender. */
	export interface InferenceRecommendationFormProperties {
		RecommendationId: FormControl<string | null | undefined>,
		InvocationEndTime: FormControl<Date | null | undefined>,
		InvocationStartTime: FormControl<Date | null | undefined>,
	}
	export function CreateInferenceRecommendationFormGroup() {
		return new FormGroup<InferenceRecommendationFormProperties>({
			RecommendationId: new FormControl<string | null | undefined>(undefined),
			InvocationEndTime: new FormControl<Date | null | undefined>(undefined),
			InvocationStartTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The metrics of recommendations. */
	export interface RecommendationMetrics {

		/** Required */
		CostPerHour: number;

		/** Required */
		CostPerInference: number;

		/** Required */
		MaxInvocations: number;

		/** Required */
		ModelLatency: number;
		CpuUtilization?: number;
		MemoryUtilization?: number;
		ModelSetupTime?: number | null;
	}

	/** The metrics of recommendations. */
	export interface RecommendationMetricsFormProperties {

		/** Required */
		CostPerHour: FormControl<number | null | undefined>,

		/** Required */
		CostPerInference: FormControl<number | null | undefined>,

		/** Required */
		MaxInvocations: FormControl<number | null | undefined>,

		/** Required */
		ModelLatency: FormControl<number | null | undefined>,
		CpuUtilization: FormControl<number | null | undefined>,
		MemoryUtilization: FormControl<number | null | undefined>,
		ModelSetupTime: FormControl<number | null | undefined>,
	}
	export function CreateRecommendationMetricsFormGroup() {
		return new FormGroup<RecommendationMetricsFormProperties>({
			CostPerHour: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			CostPerInference: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			MaxInvocations: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ModelLatency: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			CpuUtilization: new FormControl<number | null | undefined>(undefined),
			MemoryUtilization: new FormControl<number | null | undefined>(undefined),
			ModelSetupTime: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The endpoint configuration made by Inference Recommender during a recommendation job. */
	export interface EndpointOutputConfiguration {

		/** Required */
		EndpointName: string;

		/** Required */
		VariantName: string;
		InstanceType?: ProductionVariantInstanceType;
		InitialInstanceCount?: number | null;

		/** Specifies the serverless configuration for an endpoint variant. */
		ServerlessConfig?: ProductionVariantServerlessConfig;
	}

	/** The endpoint configuration made by Inference Recommender during a recommendation job. */
	export interface EndpointOutputConfigurationFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		VariantName: FormControl<string | null | undefined>,
		InstanceType: FormControl<ProductionVariantInstanceType | null | undefined>,
		InitialInstanceCount: FormControl<number | null | undefined>,
	}
	export function CreateEndpointOutputConfigurationFormGroup() {
		return new FormGroup<EndpointOutputConfigurationFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<ProductionVariantInstanceType | null | undefined>(undefined),
			InitialInstanceCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Defines the model configuration. Includes the specification name and environment parameters. */
	export interface ModelConfiguration {
		InferenceSpecificationName?: string;
		EnvironmentParameters?: Array<EnvironmentParameter>;
		CompilationJobName?: string;
	}

	/** Defines the model configuration. Includes the specification name and environment parameters. */
	export interface ModelConfigurationFormProperties {
		InferenceSpecificationName: FormControl<string | null | undefined>,
		CompilationJobName: FormControl<string | null | undefined>,
	}
	export function CreateModelConfigurationFormGroup() {
		return new FormGroup<ModelConfigurationFormProperties>({
			InferenceSpecificationName: new FormControl<string | null | undefined>(undefined),
			CompilationJobName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of environment parameters suggested by the Amazon SageMaker Inference Recommender. */
	export interface EnvironmentParameter {

		/** Required */
		Key: string;

		/** Required */
		ValueType: string;

		/** Required */
		Value: string;
	}

	/** A list of environment parameters suggested by the Amazon SageMaker Inference Recommender. */
	export interface EnvironmentParameterFormProperties {

		/** Required */
		Key: FormControl<string | null | undefined>,

		/** Required */
		ValueType: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateEnvironmentParameterFormGroup() {
		return new FormGroup<EnvironmentParameterFormProperties>({
			Key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ValueType: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The performance results from running an Inference Recommender job on an existing endpoint. */
	export interface EndpointPerformance {

		/** Required */
		Metrics: InferenceMetrics;

		/**
		 * Details about a customer endpoint that was compared in an Inference Recommender job.
		 * Required
		 */
		EndpointInfo: EndpointInfo;
	}

	/** The performance results from running an Inference Recommender job on an existing endpoint. */
	export interface EndpointPerformanceFormProperties {
	}
	export function CreateEndpointPerformanceFormGroup() {
		return new FormGroup<EndpointPerformanceFormProperties>({
		});

	}


	/** The metrics for an existing endpoint compared in an Inference Recommender job. */
	export interface InferenceMetrics {

		/** Required */
		MaxInvocations: number;

		/** Required */
		ModelLatency: number;
	}

	/** The metrics for an existing endpoint compared in an Inference Recommender job. */
	export interface InferenceMetricsFormProperties {

		/** Required */
		MaxInvocations: FormControl<number | null | undefined>,

		/** Required */
		ModelLatency: FormControl<number | null | undefined>,
	}
	export function CreateInferenceMetricsFormGroup() {
		return new FormGroup<InferenceMetricsFormProperties>({
			MaxInvocations: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ModelLatency: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeInferenceRecommendationsJobRequest {

		/** Required */
		JobName: string;
	}
	export interface DescribeInferenceRecommendationsJobRequestFormProperties {

		/** Required */
		JobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeInferenceRecommendationsJobRequestFormGroup() {
		return new FormGroup<DescribeInferenceRecommendationsJobRequestFormProperties>({
			JobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeLabelingJobResponse {

		/** Required */
		LabelingJobStatus: LabelingJobStatus;

		/** Required */
		LabelCounters: LabelCounters;
		FailureReason?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		JobReferenceCode: string;

		/** Required */
		LabelingJobName: string;

		/** Required */
		LabelingJobArn: string;
		LabelAttributeName?: string;

		/** Required */
		InputConfig: LabelingJobInputConfig;

		/** Required */
		OutputConfig: LabelingJobOutputConfig;

		/** Required */
		RoleArn: string;
		LabelCategoryConfigS3Uri?: string;
		StoppingConditions?: LabelingJobStoppingConditions;
		LabelingJobAlgorithmsConfig?: LabelingJobAlgorithmsConfig;

		/** Required */
		HumanTaskConfig: HumanTaskConfig;
		Tags?: Array<Tag>;
		LabelingJobOutput?: LabelingJobOutput;
	}
	export interface DescribeLabelingJobResponseFormProperties {

		/** Required */
		LabelingJobStatus: FormControl<LabelingJobStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		JobReferenceCode: FormControl<string | null | undefined>,

		/** Required */
		LabelingJobName: FormControl<string | null | undefined>,

		/** Required */
		LabelingJobArn: FormControl<string | null | undefined>,
		LabelAttributeName: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		LabelCategoryConfigS3Uri: FormControl<string | null | undefined>,
	}
	export function CreateDescribeLabelingJobResponseFormGroup() {
		return new FormGroup<DescribeLabelingJobResponseFormProperties>({
			LabelingJobStatus: new FormControl<LabelingJobStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			JobReferenceCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LabelingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LabelingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LabelAttributeName: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LabelCategoryConfigS3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum LabelingJobStatus { Initializing = 'Initializing', InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Stopping = 'Stopping', Stopped = 'Stopped' }


	/** Provides a breakdown of the number of objects labeled. */
	export interface LabelCounters {
		TotalLabeled?: number | null;
		HumanLabeled?: number | null;
		MachineLabeled?: number | null;
		FailedNonRetryableError?: number | null;
		Unlabeled?: number | null;
	}

	/** Provides a breakdown of the number of objects labeled. */
	export interface LabelCountersFormProperties {
		TotalLabeled: FormControl<number | null | undefined>,
		HumanLabeled: FormControl<number | null | undefined>,
		MachineLabeled: FormControl<number | null | undefined>,
		FailedNonRetryableError: FormControl<number | null | undefined>,
		Unlabeled: FormControl<number | null | undefined>,
	}
	export function CreateLabelCountersFormGroup() {
		return new FormGroup<LabelCountersFormProperties>({
			TotalLabeled: new FormControl<number | null | undefined>(undefined),
			HumanLabeled: new FormControl<number | null | undefined>(undefined),
			MachineLabeled: new FormControl<number | null | undefined>(undefined),
			FailedNonRetryableError: new FormControl<number | null | undefined>(undefined),
			Unlabeled: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Specifies the location of the output produced by the labeling job.  */
	export interface LabelingJobOutput {

		/** Required */
		OutputDatasetS3Uri: string;
		FinalActiveLearningModelArn?: string;
	}

	/** Specifies the location of the output produced by the labeling job.  */
	export interface LabelingJobOutputFormProperties {

		/** Required */
		OutputDatasetS3Uri: FormControl<string | null | undefined>,
		FinalActiveLearningModelArn: FormControl<string | null | undefined>,
	}
	export function CreateLabelingJobOutputFormGroup() {
		return new FormGroup<LabelingJobOutputFormProperties>({
			OutputDatasetS3Uri: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FinalActiveLearningModelArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeLabelingJobRequest {

		/** Required */
		LabelingJobName: string;
	}
	export interface DescribeLabelingJobRequestFormProperties {

		/** Required */
		LabelingJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeLabelingJobRequestFormGroup() {
		return new FormGroup<DescribeLabelingJobRequestFormProperties>({
			LabelingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeLineageGroupResponse {
		LineageGroupName?: string;
		LineageGroupArn?: string;
		DisplayName?: string;
		Description?: string;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
	}
	export interface DescribeLineageGroupResponseFormProperties {
		LineageGroupName: FormControl<string | null | undefined>,
		LineageGroupArn: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeLineageGroupResponseFormGroup() {
		return new FormGroup<DescribeLineageGroupResponseFormProperties>({
			LineageGroupName: new FormControl<string | null | undefined>(undefined),
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface DescribeLineageGroupRequest {

		/** Required */
		LineageGroupName: string;
	}
	export interface DescribeLineageGroupRequestFormProperties {

		/** Required */
		LineageGroupName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeLineageGroupRequestFormGroup() {
		return new FormGroup<DescribeLineageGroupRequestFormProperties>({
			LineageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelOutput {

		/** Required */
		ModelName: string;
		PrimaryContainer?: ContainerDefinition;
		Containers?: Array<ContainerDefinition>;
		InferenceExecutionConfig?: InferenceExecutionConfig;

		/** Required */
		ExecutionRoleArn: string;
		VpcConfig?: VpcConfig;

		/** Required */
		CreationTime: Date;

		/** Required */
		ModelArn: string;
		EnableNetworkIsolation?: boolean | null;
		DeploymentRecommendation?: DeploymentRecommendation;
	}
	export interface DescribeModelOutputFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		ExecutionRoleArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		ModelArn: FormControl<string | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
	}
	export function CreateDescribeModelOutputFormGroup() {
		return new FormGroup<DescribeModelOutputFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ExecutionRoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ModelArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A set of recommended deployment configurations for the model. To get more advanced recommendations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a> to create an inference recommendation job. */
	export interface DeploymentRecommendation {

		/** Required */
		RecommendationStatus: RecommendationStatus;
		RealTimeInferenceRecommendations?: Array<RealTimeInferenceRecommendation>;
	}

	/** A set of recommended deployment configurations for the model. To get more advanced recommendations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html">CreateInferenceRecommendationsJob</a> to create an inference recommendation job. */
	export interface DeploymentRecommendationFormProperties {

		/** Required */
		RecommendationStatus: FormControl<RecommendationStatus | null | undefined>,
	}
	export function CreateDeploymentRecommendationFormGroup() {
		return new FormGroup<DeploymentRecommendationFormProperties>({
			RecommendationStatus: new FormControl<RecommendationStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RecommendationStatus { IN_PROGRESS = 'IN_PROGRESS', COMPLETED = 'COMPLETED', FAILED = 'FAILED', NOT_APPLICABLE = 'NOT_APPLICABLE' }


	/** The recommended configuration to use for Real-Time Inference. */
	export interface RealTimeInferenceRecommendation {

		/** Required */
		RecommendationId: string;

		/** Required */
		InstanceType: ProductionVariantInstanceType;
		Environment?: EnvironmentMap;
	}

	/** The recommended configuration to use for Real-Time Inference. */
	export interface RealTimeInferenceRecommendationFormProperties {

		/** Required */
		RecommendationId: FormControl<string | null | undefined>,

		/** Required */
		InstanceType: FormControl<ProductionVariantInstanceType | null | undefined>,
	}
	export function CreateRealTimeInferenceRecommendationFormGroup() {
		return new FormGroup<RealTimeInferenceRecommendationFormProperties>({
			RecommendationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<ProductionVariantInstanceType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelInput {

		/** Required */
		ModelName: string;
	}
	export interface DescribeModelInputFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelInputFormGroup() {
		return new FormGroup<DescribeModelInputFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelBiasJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;

		/** Required */
		JobDefinitionName: string;

		/** Required */
		CreationTime: Date;
		ModelBiasBaselineConfig?: ModelBiasBaselineConfig;

		/** Required */
		ModelBiasAppSpecification: ModelBiasAppSpecification;

		/** Required */
		ModelBiasJobInput: ModelBiasJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		ModelBiasJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
	}
	export interface DescribeModelBiasJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelBiasJobDefinitionResponseFormGroup() {
		return new FormGroup<DescribeModelBiasJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelBiasJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DescribeModelBiasJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelBiasJobDefinitionRequestFormGroup() {
		return new FormGroup<DescribeModelBiasJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelCardResponse {

		/** Required */
		ModelCardArn: string;

		/** Required */
		ModelCardName: string;

		/** Required */
		ModelCardVersion: number;

		/** Required */
		Content: string;

		/** Required */
		ModelCardStatus: ModelCardStatus;
		SecurityConfig?: ModelCardSecurityConfig;

		/** Required */
		CreationTime: Date;

		/**
		 * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		 * Required
		 */
		CreatedBy: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		ModelCardProcessingStatus?: ModelCardProcessingStatus;
	}
	export interface DescribeModelCardResponseFormProperties {

		/** Required */
		ModelCardArn: FormControl<string | null | undefined>,

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,

		/** Required */
		ModelCardVersion: FormControl<number | null | undefined>,

		/** Required */
		Content: FormControl<string | null | undefined>,

		/** Required */
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		ModelCardProcessingStatus: FormControl<ModelCardProcessingStatus | null | undefined>,
	}
	export function CreateDescribeModelCardResponseFormGroup() {
		return new FormGroup<DescribeModelCardResponseFormProperties>({
			ModelCardArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Content: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			ModelCardProcessingStatus: new FormControl<ModelCardProcessingStatus | null | undefined>(undefined),
		});

	}

	export enum ModelCardProcessingStatus { DeleteInProgress = 'DeleteInProgress', DeletePending = 'DeletePending', ContentDeleted = 'ContentDeleted', ExportJobsDeleted = 'ExportJobsDeleted', DeleteCompleted = 'DeleteCompleted', DeleteFailed = 'DeleteFailed' }

	export interface DescribeModelCardRequest {

		/** Required */
		ModelCardName: string;
		ModelCardVersion?: number | null;
	}
	export interface DescribeModelCardRequestFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,
		ModelCardVersion: FormControl<number | null | undefined>,
	}
	export function CreateDescribeModelCardRequestFormGroup() {
		return new FormGroup<DescribeModelCardRequestFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeModelCardExportJobResponse {

		/** Required */
		ModelCardExportJobName: string;

		/** Required */
		ModelCardExportJobArn: string;

		/** Required */
		Status: ModelCardExportJobStatus;

		/** Required */
		ModelCardName: string;

		/** Required */
		ModelCardVersion: number;

		/** Required */
		OutputConfig: ModelCardExportOutputConfig;

		/** Required */
		CreatedAt: Date;

		/** Required */
		LastModifiedAt: Date;
		FailureReason?: string;
		ExportArtifacts?: ModelCardExportArtifacts;
	}
	export interface DescribeModelCardExportJobResponseFormProperties {

		/** Required */
		ModelCardExportJobName: FormControl<string | null | undefined>,

		/** Required */
		ModelCardExportJobArn: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<ModelCardExportJobStatus | null | undefined>,

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,

		/** Required */
		ModelCardVersion: FormControl<number | null | undefined>,

		/** Required */
		CreatedAt: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedAt: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelCardExportJobResponseFormGroup() {
		return new FormGroup<DescribeModelCardExportJobResponseFormProperties>({
			ModelCardExportJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardExportJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<ModelCardExportJobStatus | null | undefined>(undefined, [Validators.required]),
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			CreatedAt: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedAt: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ModelCardExportJobStatus { InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed' }


	/** The artifacts of the model card export job. */
	export interface ModelCardExportArtifacts {

		/** Required */
		S3ExportArtifacts: string;
	}

	/** The artifacts of the model card export job. */
	export interface ModelCardExportArtifactsFormProperties {

		/** Required */
		S3ExportArtifacts: FormControl<string | null | undefined>,
	}
	export function CreateModelCardExportArtifactsFormGroup() {
		return new FormGroup<ModelCardExportArtifactsFormProperties>({
			S3ExportArtifacts: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelCardExportJobRequest {

		/** Required */
		ModelCardExportJobArn: string;
	}
	export interface DescribeModelCardExportJobRequestFormProperties {

		/** Required */
		ModelCardExportJobArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelCardExportJobRequestFormGroup() {
		return new FormGroup<DescribeModelCardExportJobRequestFormProperties>({
			ModelCardExportJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelExplainabilityJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;

		/** Required */
		JobDefinitionName: string;

		/** Required */
		CreationTime: Date;
		ModelExplainabilityBaselineConfig?: ModelExplainabilityBaselineConfig;

		/** Required */
		ModelExplainabilityAppSpecification: ModelExplainabilityAppSpecification;

		/** Required */
		ModelExplainabilityJobInput: ModelExplainabilityJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		ModelExplainabilityJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
	}
	export interface DescribeModelExplainabilityJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelExplainabilityJobDefinitionResponseFormGroup() {
		return new FormGroup<DescribeModelExplainabilityJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelExplainabilityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DescribeModelExplainabilityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelExplainabilityJobDefinitionRequestFormGroup() {
		return new FormGroup<DescribeModelExplainabilityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelPackageOutput {

		/** Required */
		ModelPackageName: string;
		ModelPackageGroupName?: string;
		ModelPackageVersion?: number | null;

		/** Required */
		ModelPackageArn: string;
		ModelPackageDescription?: string;

		/** Required */
		CreationTime: Date;
		InferenceSpecification?: InferenceSpecification;
		SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
		ValidationSpecification?: ModelPackageValidationSpecification;

		/** Required */
		ModelPackageStatus: AlgorithmStatus;

		/** Required */
		ModelPackageStatusDetails: ModelPackageStatusDetails;
		CertifyForMarketplace?: boolean | null;
		ModelApprovalStatus?: ModelApprovalStatus;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		ModelMetrics?: ModelMetrics;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		ApprovalDescription?: string;
		CustomerMetadataProperties?: CustomerMetadataMap;
		DriftCheckBaselines?: DriftCheckBaselines;
		Domain?: string;
		Task?: string;
		SamplePayloadUrl?: string;
		AdditionalInferenceSpecifications?: Array<AdditionalInferenceSpecificationDefinition>;
	}
	export interface DescribeModelPackageOutputFormProperties {

		/** Required */
		ModelPackageName: FormControl<string | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageVersion: FormControl<number | null | undefined>,

		/** Required */
		ModelPackageArn: FormControl<string | null | undefined>,
		ModelPackageDescription: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		ModelPackageStatus: FormControl<AlgorithmStatus | null | undefined>,
		CertifyForMarketplace: FormControl<boolean | null | undefined>,
		ModelApprovalStatus: FormControl<ModelApprovalStatus | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		ApprovalDescription: FormControl<string | null | undefined>,
		Domain: FormControl<string | null | undefined>,
		Task: FormControl<string | null | undefined>,
		SamplePayloadUrl: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelPackageOutputFormGroup() {
		return new FormGroup<DescribeModelPackageOutputFormProperties>({
			ModelPackageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ModelPackageVersion: new FormControl<number | null | undefined>(undefined),
			ModelPackageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ModelPackageStatus: new FormControl<AlgorithmStatus | null | undefined>(undefined, [Validators.required]),
			CertifyForMarketplace: new FormControl<boolean | null | undefined>(undefined),
			ModelApprovalStatus: new FormControl<ModelApprovalStatus | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			ApprovalDescription: new FormControl<string | null | undefined>(undefined),
			Domain: new FormControl<string | null | undefined>(undefined),
			Task: new FormControl<string | null | undefined>(undefined),
			SamplePayloadUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies the validation and image scan statuses of the model package. */
	export interface ModelPackageStatusDetails {

		/** Required */
		ValidationStatuses: Array<ModelPackageStatusItem>;
		ImageScanStatuses?: Array<ModelPackageStatusItem>;
	}

	/** Specifies the validation and image scan statuses of the model package. */
	export interface ModelPackageStatusDetailsFormProperties {
	}
	export function CreateModelPackageStatusDetailsFormGroup() {
		return new FormGroup<ModelPackageStatusDetailsFormProperties>({
		});

	}


	/** Represents the overall status of a model package. */
	export interface ModelPackageStatusItem {

		/** Required */
		Name: string;

		/** Required */
		Status: DetailedAlgorithmStatus;
		FailureReason?: string;
	}

	/** Represents the overall status of a model package. */
	export interface ModelPackageStatusItemFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<DetailedAlgorithmStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateModelPackageStatusItemFormGroup() {
		return new FormGroup<ModelPackageStatusItemFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<DetailedAlgorithmStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeModelPackageInput {

		/** Required */
		ModelPackageName: string;
	}
	export interface DescribeModelPackageInputFormProperties {

		/** Required */
		ModelPackageName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelPackageInputFormGroup() {
		return new FormGroup<DescribeModelPackageInputFormProperties>({
			ModelPackageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelPackageGroupOutput {

		/** Required */
		ModelPackageGroupName: string;

		/** Required */
		ModelPackageGroupArn: string;
		ModelPackageGroupDescription?: string;

		/** Required */
		CreationTime: Date;

		/**
		 * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
		 * Required
		 */
		CreatedBy: UserContext;

		/** Required */
		ModelPackageGroupStatus: ModelPackageGroupStatus;
	}
	export interface DescribeModelPackageGroupOutputFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,

		/** Required */
		ModelPackageGroupArn: FormControl<string | null | undefined>,
		ModelPackageGroupDescription: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		ModelPackageGroupStatus: FormControl<ModelPackageGroupStatus | null | undefined>,
	}
	export function CreateDescribeModelPackageGroupOutputFormGroup() {
		return new FormGroup<DescribeModelPackageGroupOutputFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupStatus: new FormControl<ModelPackageGroupStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ModelPackageGroupStatus { Pending = 'Pending', InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Deleting = 'Deleting', DeleteFailed = 'DeleteFailed' }

	export interface DescribeModelPackageGroupInput {

		/** Required */
		ModelPackageGroupName: string;
	}
	export interface DescribeModelPackageGroupInputFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelPackageGroupInputFormGroup() {
		return new FormGroup<DescribeModelPackageGroupInputFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelQualityJobDefinitionResponse {

		/** Required */
		JobDefinitionArn: string;

		/** Required */
		JobDefinitionName: string;

		/** Required */
		CreationTime: Date;
		ModelQualityBaselineConfig?: ModelQualityBaselineConfig;

		/** Required */
		ModelQualityAppSpecification: ModelQualityAppSpecification;

		/** Required */
		ModelQualityJobInput: ModelQualityJobInput;

		/**
		 * The output configuration for monitoring jobs.
		 * Required
		 */
		ModelQualityJobOutputConfig: MonitoringOutputConfig;

		/**
		 * Identifies the resources to deploy for a monitoring job.
		 * Required
		 */
		JobResources: MonitoringResources;
		NetworkConfig?: MonitoringNetworkConfig;

		/** Required */
		RoleArn: string;

		/** A time limit for how long the monitoring job is allowed to run before stopping. */
		StoppingCondition?: MonitoringStoppingCondition;
	}
	export interface DescribeModelQualityJobDefinitionResponseFormProperties {

		/** Required */
		JobDefinitionArn: FormControl<string | null | undefined>,

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelQualityJobDefinitionResponseFormGroup() {
		return new FormGroup<DescribeModelQualityJobDefinitionResponseFormProperties>({
			JobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeModelQualityJobDefinitionRequest {

		/** Required */
		JobDefinitionName: string;
	}
	export interface DescribeModelQualityJobDefinitionRequestFormProperties {

		/** Required */
		JobDefinitionName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeModelQualityJobDefinitionRequestFormGroup() {
		return new FormGroup<DescribeModelQualityJobDefinitionRequestFormProperties>({
			JobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeMonitoringScheduleResponse {

		/** Required */
		MonitoringScheduleArn: string;

		/** Required */
		MonitoringScheduleName: string;

		/** Required */
		MonitoringScheduleStatus: ScheduleStatus;
		MonitoringType?: MonitoringType;
		FailureReason?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		MonitoringScheduleConfig: MonitoringScheduleConfig;
		EndpointName?: string;
		LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
	}
	export interface DescribeMonitoringScheduleResponseFormProperties {

		/** Required */
		MonitoringScheduleArn: FormControl<string | null | undefined>,

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,

		/** Required */
		MonitoringScheduleStatus: FormControl<ScheduleStatus | null | undefined>,
		MonitoringType: FormControl<MonitoringType | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeMonitoringScheduleResponseFormGroup() {
		return new FormGroup<DescribeMonitoringScheduleResponseFormProperties>({
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MonitoringScheduleStatus: new FormControl<ScheduleStatus | null | undefined>(undefined, [Validators.required]),
			MonitoringType: new FormControl<MonitoringType | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndpointName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ScheduleStatus { Pending = 'Pending', Failed = 'Failed', Scheduled = 'Scheduled', Stopped = 'Stopped' }


	/** Summary of information about the last monitoring job to run. */
	export interface MonitoringExecutionSummary {

		/** Required */
		MonitoringScheduleName: string;

		/** Required */
		ScheduledTime: Date;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		MonitoringExecutionStatus: ExecutionStatus;
		ProcessingJobArn?: string;
		EndpointName?: string;
		FailureReason?: string;
		MonitoringJobDefinitionName?: string;
		MonitoringType?: MonitoringType;
	}

	/** Summary of information about the last monitoring job to run. */
	export interface MonitoringExecutionSummaryFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,

		/** Required */
		ScheduledTime: FormControl<Date | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		MonitoringExecutionStatus: FormControl<ExecutionStatus | null | undefined>,
		ProcessingJobArn: FormControl<string | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		MonitoringJobDefinitionName: FormControl<string | null | undefined>,
		MonitoringType: FormControl<MonitoringType | null | undefined>,
	}
	export function CreateMonitoringExecutionSummaryFormGroup() {
		return new FormGroup<MonitoringExecutionSummaryFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ScheduledTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			MonitoringExecutionStatus: new FormControl<ExecutionStatus | null | undefined>(undefined, [Validators.required]),
			ProcessingJobArn: new FormControl<string | null | undefined>(undefined),
			EndpointName: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			MonitoringJobDefinitionName: new FormControl<string | null | undefined>(undefined),
			MonitoringType: new FormControl<MonitoringType | null | undefined>(undefined),
		});

	}

	export enum ExecutionStatus { Pending = 'Pending', Completed = 'Completed', CompletedWithViolations = 'CompletedWithViolations', InProgress = 'InProgress', Failed = 'Failed', Stopping = 'Stopping', Stopped = 'Stopped' }

	export interface DescribeMonitoringScheduleRequest {

		/** Required */
		MonitoringScheduleName: string;
	}
	export interface DescribeMonitoringScheduleRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeMonitoringScheduleRequestFormGroup() {
		return new FormGroup<DescribeMonitoringScheduleRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeNotebookInstanceOutput {
		NotebookInstanceArn?: string;
		NotebookInstanceName?: string;
		NotebookInstanceStatus?: NotebookInstanceStatus;
		FailureReason?: string;
		Url?: string;
		InstanceType?: InstanceType;
		SubnetId?: string;
		SecurityGroups?: Array<string>;
		RoleArn?: string;
		KmsKeyId?: string;
		NetworkInterfaceId?: string;
		LastModifiedTime?: Date;
		CreationTime?: Date;
		NotebookInstanceLifecycleConfigName?: string;
		DirectInternetAccess?: ModelCacheSetting;
		VolumeSizeInGB?: number | null;
		AcceleratorTypes?: Array<NotebookInstanceAcceleratorType>;
		DefaultCodeRepository?: string;
		AdditionalCodeRepositories?: Array<string>;
		RootAccess?: ModelCacheSetting;
		PlatformIdentifier?: string;
		InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
	}
	export interface DescribeNotebookInstanceOutputFormProperties {
		NotebookInstanceArn: FormControl<string | null | undefined>,
		NotebookInstanceName: FormControl<string | null | undefined>,
		NotebookInstanceStatus: FormControl<NotebookInstanceStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		Url: FormControl<string | null | undefined>,
		InstanceType: FormControl<InstanceType | null | undefined>,
		SubnetId: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		KmsKeyId: FormControl<string | null | undefined>,
		NetworkInterfaceId: FormControl<string | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,
		DirectInternetAccess: FormControl<ModelCacheSetting | null | undefined>,
		VolumeSizeInGB: FormControl<number | null | undefined>,
		DefaultCodeRepository: FormControl<string | null | undefined>,
		RootAccess: FormControl<ModelCacheSetting | null | undefined>,
		PlatformIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateDescribeNotebookInstanceOutputFormGroup() {
		return new FormGroup<DescribeNotebookInstanceOutputFormProperties>({
			NotebookInstanceArn: new FormControl<string | null | undefined>(undefined),
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined),
			NotebookInstanceStatus: new FormControl<NotebookInstanceStatus | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			Url: new FormControl<string | null | undefined>(undefined),
			InstanceType: new FormControl<InstanceType | null | undefined>(undefined),
			SubnetId: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			KmsKeyId: new FormControl<string | null | undefined>(undefined),
			NetworkInterfaceId: new FormControl<string | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined),
			DirectInternetAccess: new FormControl<ModelCacheSetting | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined),
			DefaultCodeRepository: new FormControl<string | null | undefined>(undefined),
			RootAccess: new FormControl<ModelCacheSetting | null | undefined>(undefined),
			PlatformIdentifier: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NotebookInstanceStatus { Pending = 'Pending', InService = 'InService', Stopping = 'Stopping', Stopped = 'Stopped', Failed = 'Failed', Deleting = 'Deleting', Updating = 'Updating' }

	export interface DescribeNotebookInstanceInput {

		/** Required */
		NotebookInstanceName: string;
	}
	export interface DescribeNotebookInstanceInputFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeNotebookInstanceInputFormGroup() {
		return new FormGroup<DescribeNotebookInstanceInputFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeNotebookInstanceLifecycleConfigOutput {
		NotebookInstanceLifecycleConfigArn?: string;
		NotebookInstanceLifecycleConfigName?: string;
		OnCreate?: Array<NotebookInstanceLifecycleHook>;
		OnStart?: Array<NotebookInstanceLifecycleHook>;
		LastModifiedTime?: Date;
		CreationTime?: Date;
	}
	export interface DescribeNotebookInstanceLifecycleConfigOutputFormProperties {
		NotebookInstanceLifecycleConfigArn: FormControl<string | null | undefined>,
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeNotebookInstanceLifecycleConfigOutputFormGroup() {
		return new FormGroup<DescribeNotebookInstanceLifecycleConfigOutputFormProperties>({
			NotebookInstanceLifecycleConfigArn: new FormControl<string | null | undefined>(undefined),
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface DescribeNotebookInstanceLifecycleConfigInput {

		/** Required */
		NotebookInstanceLifecycleConfigName: string;
	}
	export interface DescribeNotebookInstanceLifecycleConfigInputFormProperties {

		/** Required */
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeNotebookInstanceLifecycleConfigInputFormGroup() {
		return new FormGroup<DescribeNotebookInstanceLifecycleConfigInputFormProperties>({
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribePipelineResponse {
		PipelineArn?: string;
		PipelineName?: string;
		PipelineDisplayName?: string;
		PipelineDefinition?: string;
		PipelineDescription?: string;
		RoleArn?: string;
		PipelineStatus?: PipelineStatus;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		LastRunTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		ParallelismConfiguration?: ParallelismConfiguration;
	}
	export interface DescribePipelineResponseFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
		PipelineName: FormControl<string | null | undefined>,
		PipelineDisplayName: FormControl<string | null | undefined>,
		PipelineDefinition: FormControl<string | null | undefined>,
		PipelineDescription: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		PipelineStatus: FormControl<PipelineStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LastRunTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribePipelineResponseFormGroup() {
		return new FormGroup<DescribePipelineResponseFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
			PipelineName: new FormControl<string | null | undefined>(undefined),
			PipelineDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineDefinition: new FormControl<string | null | undefined>(undefined),
			PipelineDescription: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			PipelineStatus: new FormControl<PipelineStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LastRunTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum PipelineStatus { Active = 'Active' }

	export interface DescribePipelineRequest {

		/** Required */
		PipelineName: string;
	}
	export interface DescribePipelineRequestFormProperties {

		/** Required */
		PipelineName: FormControl<string | null | undefined>,
	}
	export function CreateDescribePipelineRequestFormGroup() {
		return new FormGroup<DescribePipelineRequestFormProperties>({
			PipelineName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribePipelineDefinitionForExecutionResponse {
		PipelineDefinition?: string;
		CreationTime?: Date;
	}
	export interface DescribePipelineDefinitionForExecutionResponseFormProperties {
		PipelineDefinition: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribePipelineDefinitionForExecutionResponseFormGroup() {
		return new FormGroup<DescribePipelineDefinitionForExecutionResponseFormProperties>({
			PipelineDefinition: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface DescribePipelineDefinitionForExecutionRequest {

		/** Required */
		PipelineExecutionArn: string;
	}
	export interface DescribePipelineDefinitionForExecutionRequestFormProperties {

		/** Required */
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribePipelineDefinitionForExecutionRequestFormGroup() {
		return new FormGroup<DescribePipelineDefinitionForExecutionRequestFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribePipelineExecutionResponse {
		PipelineArn?: string;
		PipelineExecutionArn?: string;
		PipelineExecutionDisplayName?: string;
		PipelineExecutionStatus?: PipelineExecutionStatus;
		PipelineExecutionDescription?: string;

		/** Specifies the names of the experiment and trial created by a pipeline. */
		PipelineExperimentConfig?: PipelineExperimentConfig;
		FailureReason?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		ParallelismConfiguration?: ParallelismConfiguration;
		SelectiveExecutionConfig?: SelectiveExecutionConfig;
	}
	export interface DescribePipelineExecutionResponseFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
		PipelineExecutionArn: FormControl<string | null | undefined>,
		PipelineExecutionDisplayName: FormControl<string | null | undefined>,
		PipelineExecutionStatus: FormControl<PipelineExecutionStatus | null | undefined>,
		PipelineExecutionDescription: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribePipelineExecutionResponseFormGroup() {
		return new FormGroup<DescribePipelineExecutionResponseFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionStatus: new FormControl<PipelineExecutionStatus | null | undefined>(undefined),
			PipelineExecutionDescription: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum PipelineExecutionStatus { Executing = 'Executing', Stopping = 'Stopping', Stopped = 'Stopped', Failed = 'Failed', Succeeded = 'Succeeded' }


	/** Specifies the names of the experiment and trial created by a pipeline. */
	export interface PipelineExperimentConfig {
		ExperimentName?: string;
		TrialName?: string;
	}

	/** Specifies the names of the experiment and trial created by a pipeline. */
	export interface PipelineExperimentConfigFormProperties {
		ExperimentName: FormControl<string | null | undefined>,
		TrialName: FormControl<string | null | undefined>,
	}
	export function CreatePipelineExperimentConfigFormGroup() {
		return new FormGroup<PipelineExperimentConfigFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			TrialName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The selective execution configuration applied to the pipeline run. */
	export interface SelectiveExecutionConfig {

		/** Required */
		SourcePipelineExecutionArn: string;

		/** Required */
		SelectedSteps: Array<SelectedStep>;
	}

	/** The selective execution configuration applied to the pipeline run. */
	export interface SelectiveExecutionConfigFormProperties {

		/** Required */
		SourcePipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateSelectiveExecutionConfigFormGroup() {
		return new FormGroup<SelectiveExecutionConfigFormProperties>({
			SourcePipelineExecutionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A step selected to run in selective execution mode. */
	export interface SelectedStep {

		/** Required */
		StepName: string;
	}

	/** A step selected to run in selective execution mode. */
	export interface SelectedStepFormProperties {

		/** Required */
		StepName: FormControl<string | null | undefined>,
	}
	export function CreateSelectedStepFormGroup() {
		return new FormGroup<SelectedStepFormProperties>({
			StepName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribePipelineExecutionRequest {

		/** Required */
		PipelineExecutionArn: string;
	}
	export interface DescribePipelineExecutionRequestFormProperties {

		/** Required */
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribePipelineExecutionRequestFormGroup() {
		return new FormGroup<DescribePipelineExecutionRequestFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeProcessingJobResponse {
		ProcessingInputs?: Array<ProcessingInput>;
		ProcessingOutputConfig?: ProcessingOutputConfig;

		/** Required */
		ProcessingJobName: string;

		/** Required */
		ProcessingResources: ProcessingResources;
		StoppingCondition?: ProcessingStoppingCondition;

		/** Required */
		AppSpecification: AppSpecification;
		Environment?: ProcessingEnvironmentMap;
		NetworkConfig?: NetworkConfig;
		RoleArn?: string;
		ExperimentConfig?: ExperimentConfig;

		/** Required */
		ProcessingJobArn: string;

		/** Required */
		ProcessingJobStatus: TrialComponentPrimaryStatus;
		ExitMessage?: string;
		FailureReason?: string;
		ProcessingEndTime?: Date;
		ProcessingStartTime?: Date;
		LastModifiedTime?: Date;

		/** Required */
		CreationTime: Date;
		MonitoringScheduleArn?: string;
		AutoMLJobArn?: string;
		TrainingJobArn?: string;
	}
	export interface DescribeProcessingJobResponseFormProperties {

		/** Required */
		ProcessingJobName: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,

		/** Required */
		ProcessingJobArn: FormControl<string | null | undefined>,

		/** Required */
		ProcessingJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		ExitMessage: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ProcessingEndTime: FormControl<Date | null | undefined>,
		ProcessingStartTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		MonitoringScheduleArn: FormControl<string | null | undefined>,
		AutoMLJobArn: FormControl<string | null | undefined>,
		TrainingJobArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeProcessingJobResponseFormGroup() {
		return new FormGroup<DescribeProcessingJobResponseFormProperties>({
			ProcessingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			ProcessingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProcessingJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined, [Validators.required]),
			ExitMessage: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ProcessingEndTime: new FormControl<Date | null | undefined>(undefined),
			ProcessingStartTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined),
			TrainingJobArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeProcessingJobRequest {

		/** Required */
		ProcessingJobName: string;
	}
	export interface DescribeProcessingJobRequestFormProperties {

		/** Required */
		ProcessingJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeProcessingJobRequestFormGroup() {
		return new FormGroup<DescribeProcessingJobRequestFormProperties>({
			ProcessingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeProjectOutput {

		/** Required */
		ProjectArn: string;

		/** Required */
		ProjectName: string;

		/** Required */
		ProjectId: string;
		ProjectDescription?: string;

		/** Required */
		ServiceCatalogProvisioningDetails: ServiceCatalogProvisioningDetails;
		ServiceCatalogProvisionedProductDetails?: ServiceCatalogProvisionedProductDetails;

		/** Required */
		ProjectStatus: ProjectStatus;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;

		/** Required */
		CreationTime: Date;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
	}
	export interface DescribeProjectOutputFormProperties {

		/** Required */
		ProjectArn: FormControl<string | null | undefined>,

		/** Required */
		ProjectName: FormControl<string | null | undefined>,

		/** Required */
		ProjectId: FormControl<string | null | undefined>,
		ProjectDescription: FormControl<string | null | undefined>,

		/** Required */
		ProjectStatus: FormControl<ProjectStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeProjectOutputFormGroup() {
		return new FormGroup<DescribeProjectOutputFormProperties>({
			ProjectArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectDescription: new FormControl<string | null | undefined>(undefined),
			ProjectStatus: new FormControl<ProjectStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Details of a provisioned service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
	export interface ServiceCatalogProvisionedProductDetails {
		ProvisionedProductId?: string;
		ProvisionedProductStatusMessage?: string;
	}

	/** Details of a provisioned service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
	export interface ServiceCatalogProvisionedProductDetailsFormProperties {
		ProvisionedProductId: FormControl<string | null | undefined>,
		ProvisionedProductStatusMessage: FormControl<string | null | undefined>,
	}
	export function CreateServiceCatalogProvisionedProductDetailsFormGroup() {
		return new FormGroup<ServiceCatalogProvisionedProductDetailsFormProperties>({
			ProvisionedProductId: new FormControl<string | null | undefined>(undefined),
			ProvisionedProductStatusMessage: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ProjectStatus { Pending = 'Pending', CreateInProgress = 'CreateInProgress', CreateCompleted = 'CreateCompleted', CreateFailed = 'CreateFailed', DeleteInProgress = 'DeleteInProgress', DeleteFailed = 'DeleteFailed', DeleteCompleted = 'DeleteCompleted', UpdateInProgress = 'UpdateInProgress', UpdateCompleted = 'UpdateCompleted', UpdateFailed = 'UpdateFailed' }

	export interface DescribeProjectInput {

		/** Required */
		ProjectName: string;
	}
	export interface DescribeProjectInputFormProperties {

		/** Required */
		ProjectName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeProjectInputFormGroup() {
		return new FormGroup<DescribeProjectInputFormProperties>({
			ProjectName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeSpaceResponse {
		DomainId?: string;
		SpaceArn?: string;
		SpaceName?: string;
		HomeEfsFileSystemUid?: string;
		Status?: DomainStatus;
		LastModifiedTime?: Date;
		CreationTime?: Date;
		FailureReason?: string;
		SpaceSettings?: SpaceSettings;
	}
	export interface DescribeSpaceResponseFormProperties {
		DomainId: FormControl<string | null | undefined>,
		SpaceArn: FormControl<string | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
		HomeEfsFileSystemUid: FormControl<string | null | undefined>,
		Status: FormControl<DomainStatus | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateDescribeSpaceResponseFormGroup() {
		return new FormGroup<DescribeSpaceResponseFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined),
			SpaceArn: new FormControl<string | null | undefined>(undefined),
			SpaceName: new FormControl<string | null | undefined>(undefined),
			HomeEfsFileSystemUid: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<DomainStatus | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeSpaceRequest {

		/** Required */
		DomainId: string;

		/** Required */
		SpaceName: string;
	}
	export interface DescribeSpaceRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeSpaceRequestFormGroup() {
		return new FormGroup<DescribeSpaceRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpaceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeStudioLifecycleConfigResponse {
		StudioLifecycleConfigArn?: string;
		StudioLifecycleConfigName?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		StudioLifecycleConfigContent?: string;
		StudioLifecycleConfigAppType?: StudioLifecycleConfigAppType;
	}
	export interface DescribeStudioLifecycleConfigResponseFormProperties {
		StudioLifecycleConfigArn: FormControl<string | null | undefined>,
		StudioLifecycleConfigName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		StudioLifecycleConfigContent: FormControl<string | null | undefined>,
		StudioLifecycleConfigAppType: FormControl<StudioLifecycleConfigAppType | null | undefined>,
	}
	export function CreateDescribeStudioLifecycleConfigResponseFormGroup() {
		return new FormGroup<DescribeStudioLifecycleConfigResponseFormProperties>({
			StudioLifecycleConfigArn: new FormControl<string | null | undefined>(undefined),
			StudioLifecycleConfigName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			StudioLifecycleConfigContent: new FormControl<string | null | undefined>(undefined),
			StudioLifecycleConfigAppType: new FormControl<StudioLifecycleConfigAppType | null | undefined>(undefined),
		});

	}

	export interface DescribeStudioLifecycleConfigRequest {

		/** Required */
		StudioLifecycleConfigName: string;
	}
	export interface DescribeStudioLifecycleConfigRequestFormProperties {

		/** Required */
		StudioLifecycleConfigName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeStudioLifecycleConfigRequestFormGroup() {
		return new FormGroup<DescribeStudioLifecycleConfigRequestFormProperties>({
			StudioLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeSubscribedWorkteamResponse {

		/** Required */
		SubscribedWorkteam: SubscribedWorkteam;
	}
	export interface DescribeSubscribedWorkteamResponseFormProperties {
	}
	export function CreateDescribeSubscribedWorkteamResponseFormGroup() {
		return new FormGroup<DescribeSubscribedWorkteamResponseFormProperties>({
		});

	}


	/** Describes a work team of a vendor that does the a labelling job. */
	export interface SubscribedWorkteam {

		/** Required */
		WorkteamArn: string;
		MarketplaceTitle?: string;
		SellerName?: string;
		MarketplaceDescription?: string;
		ListingId?: string;
	}

	/** Describes a work team of a vendor that does the a labelling job. */
	export interface SubscribedWorkteamFormProperties {

		/** Required */
		WorkteamArn: FormControl<string | null | undefined>,
		MarketplaceTitle: FormControl<string | null | undefined>,
		SellerName: FormControl<string | null | undefined>,
		MarketplaceDescription: FormControl<string | null | undefined>,
		ListingId: FormControl<string | null | undefined>,
	}
	export function CreateSubscribedWorkteamFormGroup() {
		return new FormGroup<SubscribedWorkteamFormProperties>({
			WorkteamArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MarketplaceTitle: new FormControl<string | null | undefined>(undefined),
			SellerName: new FormControl<string | null | undefined>(undefined),
			MarketplaceDescription: new FormControl<string | null | undefined>(undefined),
			ListingId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeSubscribedWorkteamRequest {

		/** Required */
		WorkteamArn: string;
	}
	export interface DescribeSubscribedWorkteamRequestFormProperties {

		/** Required */
		WorkteamArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeSubscribedWorkteamRequestFormGroup() {
		return new FormGroup<DescribeSubscribedWorkteamRequestFormProperties>({
			WorkteamArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeTrainingJobResponse {

		/** Required */
		TrainingJobName: string;

		/** Required */
		TrainingJobArn: string;
		TuningJobArn?: string;
		LabelingJobArn?: string;
		AutoMLJobArn?: string;

		/** Required */
		ModelArtifacts: ModelArtifacts;

		/** Required */
		TrainingJobStatus: TrialComponentPrimaryStatus;

		/** Required */
		SecondaryStatus: SecondaryStatus;
		FailureReason?: string;
		HyperParameters?: HyperParameters;

		/** Required */
		AlgorithmSpecification: AlgorithmSpecification;
		RoleArn?: string;
		InputDataConfig?: Array<Channel>;
		OutputDataConfig?: OutputDataConfig;

		/** Required */
		ResourceConfig: ResourceConfig;
		VpcConfig?: VpcConfig;

		/** Required */
		StoppingCondition: StoppingCondition;

		/** Required */
		CreationTime: Date;
		TrainingStartTime?: Date;
		TrainingEndTime?: Date;
		LastModifiedTime?: Date;
		SecondaryStatusTransitions?: Array<SecondaryStatusTransition>;
		FinalMetricDataList?: Array<MetricData>;
		EnableNetworkIsolation?: boolean | null;
		EnableInterContainerTrafficEncryption?: boolean | null;
		EnableManagedSpotTraining?: boolean | null;

		/** Contains information about the output location for managed spot training checkpoint data. */
		CheckpointConfig?: CheckpointConfig;
		TrainingTimeInSeconds?: number | null;
		BillableTimeInSeconds?: number | null;

		/** Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. */
		DebugHookConfig?: DebugHookConfig;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;
		DebugRuleConfigurations?: Array<DebugRuleConfiguration>;

		/** Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data. */
		TensorBoardOutputConfig?: TensorBoardOutputConfig;
		DebugRuleEvaluationStatuses?: Array<DebugRuleEvaluationStatus>;

		/** Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths. */
		ProfilerConfig?: ProfilerConfig;
		ProfilerRuleConfigurations?: Array<ProfilerRuleConfiguration>;
		ProfilerRuleEvaluationStatuses?: Array<ProfilerRuleEvaluationStatus>;
		ProfilingStatus?: ModelCacheSetting;
		RetryStrategy?: RetryStrategy;
		Environment?: TrainingEnvironmentMap;
		WarmPoolStatus?: WarmPoolStatus;
	}
	export interface DescribeTrainingJobResponseFormProperties {

		/** Required */
		TrainingJobName: FormControl<string | null | undefined>,

		/** Required */
		TrainingJobArn: FormControl<string | null | undefined>,
		TuningJobArn: FormControl<string | null | undefined>,
		LabelingJobArn: FormControl<string | null | undefined>,
		AutoMLJobArn: FormControl<string | null | undefined>,

		/** Required */
		TrainingJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,

		/** Required */
		SecondaryStatus: FormControl<SecondaryStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		TrainingStartTime: FormControl<Date | null | undefined>,
		TrainingEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
		EnableInterContainerTrafficEncryption: FormControl<boolean | null | undefined>,
		EnableManagedSpotTraining: FormControl<boolean | null | undefined>,
		TrainingTimeInSeconds: FormControl<number | null | undefined>,
		BillableTimeInSeconds: FormControl<number | null | undefined>,
		ProfilingStatus: FormControl<ModelCacheSetting | null | undefined>,
	}
	export function CreateDescribeTrainingJobResponseFormGroup() {
		return new FormGroup<DescribeTrainingJobResponseFormProperties>({
			TrainingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TrainingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TuningJobArn: new FormControl<string | null | undefined>(undefined),
			LabelingJobArn: new FormControl<string | null | undefined>(undefined),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined),
			TrainingJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined, [Validators.required]),
			SecondaryStatus: new FormControl<SecondaryStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			TrainingStartTime: new FormControl<Date | null | undefined>(undefined),
			TrainingEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
			EnableInterContainerTrafficEncryption: new FormControl<boolean | null | undefined>(undefined),
			EnableManagedSpotTraining: new FormControl<boolean | null | undefined>(undefined),
			TrainingTimeInSeconds: new FormControl<number | null | undefined>(undefined),
			BillableTimeInSeconds: new FormControl<number | null | undefined>(undefined),
			ProfilingStatus: new FormControl<ModelCacheSetting | null | undefined>(undefined),
		});

	}

	export enum SecondaryStatus { Starting = 'Starting', LaunchingMLInstances = 'LaunchingMLInstances', PreparingTrainingStack = 'PreparingTrainingStack', Downloading = 'Downloading', DownloadingTrainingImage = 'DownloadingTrainingImage', Training = 'Training', Uploading = 'Uploading', Stopping = 'Stopping', Stopped = 'Stopped', MaxRuntimeExceeded = 'MaxRuntimeExceeded', Completed = 'Completed', Failed = 'Failed', Interrupted = 'Interrupted', MaxWaitTimeExceeded = 'MaxWaitTimeExceeded', Updating = 'Updating', Restarting = 'Restarting' }


	/** <p>An array element of <code>SecondaryStatusTransitions</code> for <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html">DescribeTrainingJob</a>. It provides additional details about a status that the training job has transitioned through. A training job can be in one of several states, for example, starting, downloading, training, or uploading. Within each state, there are a number of intermediate states. For example, within the starting state, SageMaker could be starting the training job or launching the ML instances. These transitional states are referred to as the job's secondary status. </p> <p/> */
	export interface SecondaryStatusTransition {

		/** Required */
		Status: SecondaryStatus;

		/** Required */
		StartTime: Date;
		EndTime?: Date;
		StatusMessage?: string;
	}

	/** <p>An array element of <code>SecondaryStatusTransitions</code> for <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html">DescribeTrainingJob</a>. It provides additional details about a status that the training job has transitioned through. A training job can be in one of several states, for example, starting, downloading, training, or uploading. Within each state, there are a number of intermediate states. For example, within the starting state, SageMaker could be starting the training job or launching the ML instances. These transitional states are referred to as the job's secondary status. </p> <p/> */
	export interface SecondaryStatusTransitionFormProperties {

		/** Required */
		Status: FormControl<SecondaryStatus | null | undefined>,

		/** Required */
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
		StatusMessage: FormControl<string | null | undefined>,
	}
	export function CreateSecondaryStatusTransitionFormGroup() {
		return new FormGroup<SecondaryStatusTransitionFormProperties>({
			Status: new FormControl<SecondaryStatus | null | undefined>(undefined, [Validators.required]),
			StartTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			StatusMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The name, value, and date and time of a metric that was emitted to Amazon CloudWatch. */
	export interface MetricData {
		MetricName?: string;
		Value?: number;
		Timestamp?: Date;
	}

	/** The name, value, and date and time of a metric that was emitted to Amazon CloudWatch. */
	export interface MetricDataFormProperties {
		MetricName: FormControl<string | null | undefined>,
		Value: FormControl<number | null | undefined>,
		Timestamp: FormControl<Date | null | undefined>,
	}
	export function CreateMetricDataFormGroup() {
		return new FormGroup<MetricDataFormProperties>({
			MetricName: new FormControl<string | null | undefined>(undefined),
			Value: new FormControl<number | null | undefined>(undefined),
			Timestamp: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Information about the status of the rule evaluation. */
	export interface DebugRuleEvaluationStatus {
		RuleConfigurationName?: string;
		RuleEvaluationJobArn?: string;
		RuleEvaluationStatus?: RuleEvaluationStatus;
		StatusDetails?: string;
		LastModifiedTime?: Date;
	}

	/** Information about the status of the rule evaluation. */
	export interface DebugRuleEvaluationStatusFormProperties {
		RuleConfigurationName: FormControl<string | null | undefined>,
		RuleEvaluationJobArn: FormControl<string | null | undefined>,
		RuleEvaluationStatus: FormControl<RuleEvaluationStatus | null | undefined>,
		StatusDetails: FormControl<string | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDebugRuleEvaluationStatusFormGroup() {
		return new FormGroup<DebugRuleEvaluationStatusFormProperties>({
			RuleConfigurationName: new FormControl<string | null | undefined>(undefined),
			RuleEvaluationJobArn: new FormControl<string | null | undefined>(undefined),
			RuleEvaluationStatus: new FormControl<RuleEvaluationStatus | null | undefined>(undefined),
			StatusDetails: new FormControl<string | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum RuleEvaluationStatus { InProgress = 'InProgress', NoIssuesFound = 'NoIssuesFound', IssuesFound = 'IssuesFound', Error = 'Error', Stopping = 'Stopping', Stopped = 'Stopped' }


	/** Information about the status of the rule evaluation. */
	export interface ProfilerRuleEvaluationStatus {
		RuleConfigurationName?: string;
		RuleEvaluationJobArn?: string;
		RuleEvaluationStatus?: RuleEvaluationStatus;
		StatusDetails?: string;
		LastModifiedTime?: Date;
	}

	/** Information about the status of the rule evaluation. */
	export interface ProfilerRuleEvaluationStatusFormProperties {
		RuleConfigurationName: FormControl<string | null | undefined>,
		RuleEvaluationJobArn: FormControl<string | null | undefined>,
		RuleEvaluationStatus: FormControl<RuleEvaluationStatus | null | undefined>,
		StatusDetails: FormControl<string | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateProfilerRuleEvaluationStatusFormGroup() {
		return new FormGroup<ProfilerRuleEvaluationStatusFormProperties>({
			RuleConfigurationName: new FormControl<string | null | undefined>(undefined),
			RuleEvaluationJobArn: new FormControl<string | null | undefined>(undefined),
			RuleEvaluationStatus: new FormControl<RuleEvaluationStatus | null | undefined>(undefined),
			StatusDetails: new FormControl<string | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Status and billing information about the warm pool. */
	export interface WarmPoolStatus {

		/** Required */
		Status: WarmPoolResourceStatus;
		ResourceRetainedBillableTimeInSeconds?: number | null;
		ReusedByJob?: string;
	}

	/** Status and billing information about the warm pool. */
	export interface WarmPoolStatusFormProperties {

		/** Required */
		Status: FormControl<WarmPoolResourceStatus | null | undefined>,
		ResourceRetainedBillableTimeInSeconds: FormControl<number | null | undefined>,
		ReusedByJob: FormControl<string | null | undefined>,
	}
	export function CreateWarmPoolStatusFormGroup() {
		return new FormGroup<WarmPoolStatusFormProperties>({
			Status: new FormControl<WarmPoolResourceStatus | null | undefined>(undefined, [Validators.required]),
			ResourceRetainedBillableTimeInSeconds: new FormControl<number | null | undefined>(undefined),
			ReusedByJob: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum WarmPoolResourceStatus { Available = 'Available', Terminated = 'Terminated', Reused = 'Reused', InUse = 'InUse' }

	export interface DescribeTrainingJobRequest {

		/** Required */
		TrainingJobName: string;
	}
	export interface DescribeTrainingJobRequestFormProperties {

		/** Required */
		TrainingJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTrainingJobRequestFormGroup() {
		return new FormGroup<DescribeTrainingJobRequestFormProperties>({
			TrainingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeTransformJobResponse {

		/** Required */
		TransformJobName: string;

		/** Required */
		TransformJobArn: string;

		/** Required */
		TransformJobStatus: TrialComponentPrimaryStatus;
		FailureReason?: string;

		/** Required */
		ModelName: string;
		MaxConcurrentTransforms?: number | null;
		ModelClientConfig?: ModelClientConfig;
		MaxPayloadInMB?: number | null;
		BatchStrategy?: BatchStrategy;
		Environment?: TransformEnvironmentMap;

		/** Required */
		TransformInput: TransformInput;
		TransformOutput?: TransformOutput;
		DataCaptureConfig?: BatchDataCaptureConfig;

		/** Required */
		TransformResources: TransformResources;

		/** Required */
		CreationTime: Date;
		TransformStartTime?: Date;
		TransformEndTime?: Date;
		LabelingJobArn?: string;
		AutoMLJobArn?: string;

		/** The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>. */
		DataProcessing?: DataProcessing;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;
	}
	export interface DescribeTransformJobResponseFormProperties {

		/** Required */
		TransformJobName: FormControl<string | null | undefined>,

		/** Required */
		TransformJobArn: FormControl<string | null | undefined>,

		/** Required */
		TransformJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		ModelName: FormControl<string | null | undefined>,
		MaxConcurrentTransforms: FormControl<number | null | undefined>,
		MaxPayloadInMB: FormControl<number | null | undefined>,
		BatchStrategy: FormControl<BatchStrategy | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		TransformStartTime: FormControl<Date | null | undefined>,
		TransformEndTime: FormControl<Date | null | undefined>,
		LabelingJobArn: FormControl<string | null | undefined>,
		AutoMLJobArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTransformJobResponseFormGroup() {
		return new FormGroup<DescribeTransformJobResponseFormProperties>({
			TransformJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TransformJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TransformJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxConcurrentTransforms: new FormControl<number | null | undefined>(undefined),
			MaxPayloadInMB: new FormControl<number | null | undefined>(undefined),
			BatchStrategy: new FormControl<BatchStrategy | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			TransformStartTime: new FormControl<Date | null | undefined>(undefined),
			TransformEndTime: new FormControl<Date | null | undefined>(undefined),
			LabelingJobArn: new FormControl<string | null | undefined>(undefined),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeTransformJobRequest {

		/** Required */
		TransformJobName: string;
	}
	export interface DescribeTransformJobRequestFormProperties {

		/** Required */
		TransformJobName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTransformJobRequestFormGroup() {
		return new FormGroup<DescribeTransformJobRequestFormProperties>({
			TransformJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeTrialResponse {
		TrialName?: string;
		TrialArn?: string;
		DisplayName?: string;
		ExperimentName?: string;
		Source?: TrialSource;
		CreationTime?: Date;
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;
		LastModifiedBy?: UserContext;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
	}
	export interface DescribeTrialResponseFormProperties {
		TrialName: FormControl<string | null | undefined>,
		TrialArn: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		ExperimentName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDescribeTrialResponseFormGroup() {
		return new FormGroup<DescribeTrialResponseFormProperties>({
			TrialName: new FormControl<string | null | undefined>(undefined),
			TrialArn: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The source of the trial. */
	export interface TrialSource {

		/** Required */
		SourceArn: string;
		SourceType?: string;
	}

	/** The source of the trial. */
	export interface TrialSourceFormProperties {

		/** Required */
		SourceArn: FormControl<string | null | undefined>,
		SourceType: FormControl<string | null | undefined>,
	}
	export function CreateTrialSourceFormGroup() {
		return new FormGroup<TrialSourceFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceType: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeTrialRequest {

		/** Required */
		TrialName: string;
	}
	export interface DescribeTrialRequestFormProperties {

		/** Required */
		TrialName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTrialRequestFormGroup() {
		return new FormGroup<DescribeTrialRequestFormProperties>({
			TrialName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeTrialComponentResponse {
		TrialComponentName?: string;
		TrialComponentArn?: string;
		DisplayName?: string;
		Source?: TrialComponentSource;
		Status?: TrialComponentStatus;
		StartTime?: Date;
		EndTime?: Date;
		CreationTime?: Date;
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;
		LastModifiedBy?: UserContext;
		Parameters?: TrialComponentParameters;
		InputArtifacts?: TrialComponentArtifacts;
		OutputArtifacts?: TrialComponentArtifacts;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		Metrics?: Array<TrialComponentMetricSummary>;
		LineageGroupArn?: string;
		Sources?: Array<TrialComponentSource>;
	}
	export interface DescribeTrialComponentResponseFormProperties {
		TrialComponentName: FormControl<string | null | undefined>,
		TrialComponentArn: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LineageGroupArn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTrialComponentResponseFormGroup() {
		return new FormGroup<DescribeTrialComponentResponseFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined),
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The Amazon Resource Name (ARN) and job type of the source of a trial component. */
	export interface TrialComponentSource {

		/** Required */
		SourceArn: string;
		SourceType?: string;
	}

	/** The Amazon Resource Name (ARN) and job type of the source of a trial component. */
	export interface TrialComponentSourceFormProperties {

		/** Required */
		SourceArn: FormControl<string | null | undefined>,
		SourceType: FormControl<string | null | undefined>,
	}
	export function CreateTrialComponentSourceFormGroup() {
		return new FormGroup<TrialComponentSourceFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceType: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of the metrics of a trial component. */
	export interface TrialComponentMetricSummary {
		MetricName?: string;
		SourceArn?: string;
		TimeStamp?: Date;
		Max?: number | null;
		Min?: number | null;
		Last?: number | null;
		Count?: number | null;
		Avg?: number | null;
		StdDev?: number | null;
	}

	/** A summary of the metrics of a trial component. */
	export interface TrialComponentMetricSummaryFormProperties {
		MetricName: FormControl<string | null | undefined>,
		SourceArn: FormControl<string | null | undefined>,
		TimeStamp: FormControl<Date | null | undefined>,
		Max: FormControl<number | null | undefined>,
		Min: FormControl<number | null | undefined>,
		Last: FormControl<number | null | undefined>,
		Count: FormControl<number | null | undefined>,
		Avg: FormControl<number | null | undefined>,
		StdDev: FormControl<number | null | undefined>,
	}
	export function CreateTrialComponentMetricSummaryFormGroup() {
		return new FormGroup<TrialComponentMetricSummaryFormProperties>({
			MetricName: new FormControl<string | null | undefined>(undefined),
			SourceArn: new FormControl<string | null | undefined>(undefined),
			TimeStamp: new FormControl<Date | null | undefined>(undefined),
			Max: new FormControl<number | null | undefined>(undefined),
			Min: new FormControl<number | null | undefined>(undefined),
			Last: new FormControl<number | null | undefined>(undefined),
			Count: new FormControl<number | null | undefined>(undefined),
			Avg: new FormControl<number | null | undefined>(undefined),
			StdDev: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeTrialComponentRequest {

		/** Required */
		TrialComponentName: string;
	}
	export interface DescribeTrialComponentRequestFormProperties {

		/** Required */
		TrialComponentName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTrialComponentRequestFormGroup() {
		return new FormGroup<DescribeTrialComponentRequestFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeUserProfileResponse {
		DomainId?: string;
		UserProfileArn?: string;
		UserProfileName?: string;
		HomeEfsFileSystemUid?: string;
		Status?: DomainStatus;
		LastModifiedTime?: Date;
		CreationTime?: Date;
		FailureReason?: string;
		SingleSignOnUserIdentifier?: string;
		SingleSignOnUserValue?: string;
		UserSettings?: UserSettings;
	}
	export interface DescribeUserProfileResponseFormProperties {
		DomainId: FormControl<string | null | undefined>,
		UserProfileArn: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,
		HomeEfsFileSystemUid: FormControl<string | null | undefined>,
		Status: FormControl<DomainStatus | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		SingleSignOnUserIdentifier: FormControl<string | null | undefined>,
		SingleSignOnUserValue: FormControl<string | null | undefined>,
	}
	export function CreateDescribeUserProfileResponseFormGroup() {
		return new FormGroup<DescribeUserProfileResponseFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined),
			UserProfileArn: new FormControl<string | null | undefined>(undefined),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			HomeEfsFileSystemUid: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<DomainStatus | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			SingleSignOnUserIdentifier: new FormControl<string | null | undefined>(undefined),
			SingleSignOnUserValue: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeUserProfileRequest {

		/** Required */
		DomainId: string;

		/** Required */
		UserProfileName: string;
	}
	export interface DescribeUserProfileRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		UserProfileName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeUserProfileRequestFormGroup() {
		return new FormGroup<DescribeUserProfileRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeWorkforceResponse {

		/** Required */
		Workforce: Workforce;
	}
	export interface DescribeWorkforceResponseFormProperties {
	}
	export function CreateDescribeWorkforceResponseFormGroup() {
		return new FormGroup<DescribeWorkforceResponseFormProperties>({
		});

	}


	/** A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create a Private Workforce</a>. */
	export interface Workforce {

		/** Required */
		WorkforceName: string;

		/** Required */
		WorkforceArn: string;
		LastUpdatedDate?: Date;
		SourceIpConfig?: SourceIpConfig;
		SubDomain?: string;
		CognitoConfig?: CognitoConfig;
		OidcConfig?: OidcConfigForResponse;
		CreateDate?: Date;
		WorkforceVpcConfig?: WorkforceVpcConfigResponse;
		Status?: WorkforceStatus;
		FailureReason?: string;
	}

	/** A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html">Create a Private Workforce</a>. */
	export interface WorkforceFormProperties {

		/** Required */
		WorkforceName: FormControl<string | null | undefined>,

		/** Required */
		WorkforceArn: FormControl<string | null | undefined>,
		LastUpdatedDate: FormControl<Date | null | undefined>,
		SubDomain: FormControl<string | null | undefined>,
		CreateDate: FormControl<Date | null | undefined>,
		Status: FormControl<WorkforceStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateWorkforceFormGroup() {
		return new FormGroup<WorkforceFormProperties>({
			WorkforceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			WorkforceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LastUpdatedDate: new FormControl<Date | null | undefined>(undefined),
			SubDomain: new FormControl<string | null | undefined>(undefined),
			CreateDate: new FormControl<Date | null | undefined>(undefined),
			Status: new FormControl<WorkforceStatus | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Your OIDC IdP workforce configuration. */
	export interface OidcConfigForResponse {
		ClientId?: string;
		Issuer?: string;
		AuthorizationEndpoint?: string;
		TokenEndpoint?: string;
		UserInfoEndpoint?: string;
		LogoutEndpoint?: string;
		JwksUri?: string;
	}

	/** Your OIDC IdP workforce configuration. */
	export interface OidcConfigForResponseFormProperties {
		ClientId: FormControl<string | null | undefined>,
		Issuer: FormControl<string | null | undefined>,
		AuthorizationEndpoint: FormControl<string | null | undefined>,
		TokenEndpoint: FormControl<string | null | undefined>,
		UserInfoEndpoint: FormControl<string | null | undefined>,
		LogoutEndpoint: FormControl<string | null | undefined>,
		JwksUri: FormControl<string | null | undefined>,
	}
	export function CreateOidcConfigForResponseFormGroup() {
		return new FormGroup<OidcConfigForResponseFormProperties>({
			ClientId: new FormControl<string | null | undefined>(undefined),
			Issuer: new FormControl<string | null | undefined>(undefined),
			AuthorizationEndpoint: new FormControl<string | null | undefined>(undefined),
			TokenEndpoint: new FormControl<string | null | undefined>(undefined),
			UserInfoEndpoint: new FormControl<string | null | undefined>(undefined),
			LogoutEndpoint: new FormControl<string | null | undefined>(undefined),
			JwksUri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A VpcConfig object that specifies the VPC that you want your workforce to connect to. */
	export interface WorkforceVpcConfigResponse {

		/** Required */
		VpcId: string;

		/** Required */
		SecurityGroupIds: Array<string>;

		/** Required */
		Subnets: Array<string>;
		VpcEndpointId?: string;
	}

	/** A VpcConfig object that specifies the VPC that you want your workforce to connect to. */
	export interface WorkforceVpcConfigResponseFormProperties {

		/** Required */
		VpcId: FormControl<string | null | undefined>,
		VpcEndpointId: FormControl<string | null | undefined>,
	}
	export function CreateWorkforceVpcConfigResponseFormGroup() {
		return new FormGroup<WorkforceVpcConfigResponseFormProperties>({
			VpcId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VpcEndpointId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum WorkforceStatus { Initializing = 'Initializing', Updating = 'Updating', Deleting = 'Deleting', Failed = 'Failed', Active = 'Active' }

	export interface DescribeWorkforceRequest {

		/** Required */
		WorkforceName: string;
	}
	export interface DescribeWorkforceRequestFormProperties {

		/** Required */
		WorkforceName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeWorkforceRequestFormGroup() {
		return new FormGroup<DescribeWorkforceRequestFormProperties>({
			WorkforceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DescribeWorkteamResponse {

		/** Required */
		Workteam: Workteam;
	}
	export interface DescribeWorkteamResponseFormProperties {
	}
	export function CreateDescribeWorkteamResponseFormGroup() {
		return new FormGroup<DescribeWorkteamResponseFormProperties>({
		});

	}


	/** Provides details about a labeling work team. */
	export interface Workteam {

		/** Required */
		WorkteamName: string;

		/** Required */
		MemberDefinitions: Array<MemberDefinition>;

		/** Required */
		WorkteamArn: string;
		WorkforceArn?: string;
		ProductListingIds?: Array<string>;

		/** Required */
		Description: string;
		SubDomain?: string;
		CreateDate?: Date;
		LastUpdatedDate?: Date;
		NotificationConfiguration?: NotificationConfiguration;
	}

	/** Provides details about a labeling work team. */
	export interface WorkteamFormProperties {

		/** Required */
		WorkteamName: FormControl<string | null | undefined>,

		/** Required */
		WorkteamArn: FormControl<string | null | undefined>,
		WorkforceArn: FormControl<string | null | undefined>,

		/** Required */
		Description: FormControl<string | null | undefined>,
		SubDomain: FormControl<string | null | undefined>,
		CreateDate: FormControl<Date | null | undefined>,
		LastUpdatedDate: FormControl<Date | null | undefined>,
	}
	export function CreateWorkteamFormGroup() {
		return new FormGroup<WorkteamFormProperties>({
			WorkteamName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			WorkteamArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			WorkforceArn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SubDomain: new FormControl<string | null | undefined>(undefined),
			CreateDate: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedDate: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface DescribeWorkteamRequest {

		/** Required */
		WorkteamName: string;
	}
	export interface DescribeWorkteamRequestFormProperties {

		/** Required */
		WorkteamName: FormControl<string | null | undefined>,
	}
	export function CreateDescribeWorkteamRequestFormGroup() {
		return new FormGroup<DescribeWorkteamRequestFormProperties>({
			WorkteamName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface DisableSagemakerServicecatalogPortfolioOutput {
	}
	export interface DisableSagemakerServicecatalogPortfolioOutputFormProperties {
	}
	export function CreateDisableSagemakerServicecatalogPortfolioOutputFormGroup() {
		return new FormGroup<DisableSagemakerServicecatalogPortfolioOutputFormProperties>({
		});

	}

	export interface DisableSagemakerServicecatalogPortfolioInput {
	}
	export interface DisableSagemakerServicecatalogPortfolioInputFormProperties {
	}
	export function CreateDisableSagemakerServicecatalogPortfolioInputFormGroup() {
		return new FormGroup<DisableSagemakerServicecatalogPortfolioInputFormProperties>({
		});

	}

	export interface DisassociateTrialComponentResponse {
		TrialComponentArn?: string;
		TrialArn?: string;
	}
	export interface DisassociateTrialComponentResponseFormProperties {
		TrialComponentArn: FormControl<string | null | undefined>,
		TrialArn: FormControl<string | null | undefined>,
	}
	export function CreateDisassociateTrialComponentResponseFormGroup() {
		return new FormGroup<DisassociateTrialComponentResponseFormProperties>({
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
			TrialArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DisassociateTrialComponentRequest {

		/** Required */
		TrialComponentName: string;

		/** Required */
		TrialName: string;
	}
	export interface DisassociateTrialComponentRequestFormProperties {

		/** Required */
		TrialComponentName: FormControl<string | null | undefined>,

		/** Required */
		TrialName: FormControl<string | null | undefined>,
	}
	export function CreateDisassociateTrialComponentRequestFormGroup() {
		return new FormGroup<DisassociateTrialComponentRequestFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TrialName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface EnableSagemakerServicecatalogPortfolioOutput {
	}
	export interface EnableSagemakerServicecatalogPortfolioOutputFormProperties {
	}
	export function CreateEnableSagemakerServicecatalogPortfolioOutputFormGroup() {
		return new FormGroup<EnableSagemakerServicecatalogPortfolioOutputFormProperties>({
		});

	}

	export interface EnableSagemakerServicecatalogPortfolioInput {
	}
	export interface EnableSagemakerServicecatalogPortfolioInputFormProperties {
	}
	export function CreateEnableSagemakerServicecatalogPortfolioInputFormGroup() {
		return new FormGroup<EnableSagemakerServicecatalogPortfolioInputFormProperties>({
		});

	}

	export interface GetDeviceFleetReportResponse {

		/** Required */
		DeviceFleetArn: string;

		/** Required */
		DeviceFleetName: string;
		OutputConfig?: EdgeOutputConfig;
		Description?: string;
		ReportGenerated?: Date;
		DeviceStats?: DeviceStats;
		AgentVersions?: Array<AgentVersion>;
		ModelStats?: Array<EdgeModelStat>;
	}
	export interface GetDeviceFleetReportResponseFormProperties {

		/** Required */
		DeviceFleetArn: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		ReportGenerated: FormControl<Date | null | undefined>,
	}
	export function CreateGetDeviceFleetReportResponseFormGroup() {
		return new FormGroup<GetDeviceFleetReportResponseFormProperties>({
			DeviceFleetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			ReportGenerated: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Status of devices. */
	export interface DeviceStats {

		/** Required */
		ConnectedDeviceCount: number;

		/** Required */
		RegisteredDeviceCount: number;
	}

	/** Status of devices. */
	export interface DeviceStatsFormProperties {

		/** Required */
		ConnectedDeviceCount: FormControl<number | null | undefined>,

		/** Required */
		RegisteredDeviceCount: FormControl<number | null | undefined>,
	}
	export function CreateDeviceStatsFormGroup() {
		return new FormGroup<DeviceStatsFormProperties>({
			ConnectedDeviceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			RegisteredDeviceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Edge Manager agent version. */
	export interface AgentVersion {

		/** Required */
		Version: string;

		/** Required */
		AgentCount: number;
	}

	/** Edge Manager agent version. */
	export interface AgentVersionFormProperties {

		/** Required */
		Version: FormControl<string | null | undefined>,

		/** Required */
		AgentCount: FormControl<number | null | undefined>,
	}
	export function CreateAgentVersionFormGroup() {
		return new FormGroup<AgentVersionFormProperties>({
			Version: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AgentCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Status of edge devices with this model. */
	export interface EdgeModelStat {

		/** Required */
		ModelName: string;

		/** Required */
		ModelVersion: string;

		/** Required */
		OfflineDeviceCount: number;

		/** Required */
		ConnectedDeviceCount: number;

		/** Required */
		ActiveDeviceCount: number;

		/** Required */
		SamplingDeviceCount: number;
	}

	/** Status of edge devices with this model. */
	export interface EdgeModelStatFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		ModelVersion: FormControl<string | null | undefined>,

		/** Required */
		OfflineDeviceCount: FormControl<number | null | undefined>,

		/** Required */
		ConnectedDeviceCount: FormControl<number | null | undefined>,

		/** Required */
		ActiveDeviceCount: FormControl<number | null | undefined>,

		/** Required */
		SamplingDeviceCount: FormControl<number | null | undefined>,
	}
	export function CreateEdgeModelStatFormGroup() {
		return new FormGroup<EdgeModelStatFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			OfflineDeviceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ConnectedDeviceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			ActiveDeviceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			SamplingDeviceCount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetDeviceFleetReportRequest {

		/** Required */
		DeviceFleetName: string;
	}
	export interface GetDeviceFleetReportRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateGetDeviceFleetReportRequestFormGroup() {
		return new FormGroup<GetDeviceFleetReportRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetLineageGroupPolicyResponse {
		LineageGroupArn?: string;
		ResourcePolicy?: string;
	}
	export interface GetLineageGroupPolicyResponseFormProperties {
		LineageGroupArn: FormControl<string | null | undefined>,
		ResourcePolicy: FormControl<string | null | undefined>,
	}
	export function CreateGetLineageGroupPolicyResponseFormGroup() {
		return new FormGroup<GetLineageGroupPolicyResponseFormProperties>({
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
			ResourcePolicy: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetLineageGroupPolicyRequest {

		/** Required */
		LineageGroupName: string;
	}
	export interface GetLineageGroupPolicyRequestFormProperties {

		/** Required */
		LineageGroupName: FormControl<string | null | undefined>,
	}
	export function CreateGetLineageGroupPolicyRequestFormGroup() {
		return new FormGroup<GetLineageGroupPolicyRequestFormProperties>({
			LineageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetModelPackageGroupPolicyOutput {

		/** Required */
		ResourcePolicy: string;
	}
	export interface GetModelPackageGroupPolicyOutputFormProperties {

		/** Required */
		ResourcePolicy: FormControl<string | null | undefined>,
	}
	export function CreateGetModelPackageGroupPolicyOutputFormGroup() {
		return new FormGroup<GetModelPackageGroupPolicyOutputFormProperties>({
			ResourcePolicy: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetModelPackageGroupPolicyInput {

		/** Required */
		ModelPackageGroupName: string;
	}
	export interface GetModelPackageGroupPolicyInputFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,
	}
	export function CreateGetModelPackageGroupPolicyInputFormGroup() {
		return new FormGroup<GetModelPackageGroupPolicyInputFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetSagemakerServicecatalogPortfolioStatusOutput {
		Status?: ModelCacheSetting;
	}
	export interface GetSagemakerServicecatalogPortfolioStatusOutputFormProperties {
		Status: FormControl<ModelCacheSetting | null | undefined>,
	}
	export function CreateGetSagemakerServicecatalogPortfolioStatusOutputFormGroup() {
		return new FormGroup<GetSagemakerServicecatalogPortfolioStatusOutputFormProperties>({
			Status: new FormControl<ModelCacheSetting | null | undefined>(undefined),
		});

	}

	export interface GetSagemakerServicecatalogPortfolioStatusInput {
	}
	export interface GetSagemakerServicecatalogPortfolioStatusInputFormProperties {
	}
	export function CreateGetSagemakerServicecatalogPortfolioStatusInputFormGroup() {
		return new FormGroup<GetSagemakerServicecatalogPortfolioStatusInputFormProperties>({
		});

	}

	export interface GetScalingConfigurationRecommendationResponse {
		InferenceRecommendationsJobName?: string;
		RecommendationId?: string;
		EndpointName?: string;
		TargetCpuUtilizationPerCore?: number | null;
		ScalingPolicyObjective?: ScalingPolicyObjective;
		Metric?: ScalingPolicyMetric;
		DynamicScalingConfiguration?: DynamicScalingConfiguration;
	}
	export interface GetScalingConfigurationRecommendationResponseFormProperties {
		InferenceRecommendationsJobName: FormControl<string | null | undefined>,
		RecommendationId: FormControl<string | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
		TargetCpuUtilizationPerCore: FormControl<number | null | undefined>,
	}
	export function CreateGetScalingConfigurationRecommendationResponseFormGroup() {
		return new FormGroup<GetScalingConfigurationRecommendationResponseFormProperties>({
			InferenceRecommendationsJobName: new FormControl<string | null | undefined>(undefined),
			RecommendationId: new FormControl<string | null | undefined>(undefined),
			EndpointName: new FormControl<string | null | undefined>(undefined),
			TargetCpuUtilizationPerCore: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An object where you specify the anticipated traffic pattern for an endpoint. */
	export interface ScalingPolicyObjective {
		MinInvocationsPerMinute?: number | null;
		MaxInvocationsPerMinute?: number | null;
	}

	/** An object where you specify the anticipated traffic pattern for an endpoint. */
	export interface ScalingPolicyObjectiveFormProperties {
		MinInvocationsPerMinute: FormControl<number | null | undefined>,
		MaxInvocationsPerMinute: FormControl<number | null | undefined>,
	}
	export function CreateScalingPolicyObjectiveFormGroup() {
		return new FormGroup<ScalingPolicyObjectiveFormProperties>({
			MinInvocationsPerMinute: new FormControl<number | null | undefined>(undefined),
			MaxInvocationsPerMinute: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The metric for a scaling policy. */
	export interface ScalingPolicyMetric {
		InvocationsPerInstance?: number | null;
		ModelLatency?: number | null;
	}

	/** The metric for a scaling policy. */
	export interface ScalingPolicyMetricFormProperties {
		InvocationsPerInstance: FormControl<number | null | undefined>,
		ModelLatency: FormControl<number | null | undefined>,
	}
	export function CreateScalingPolicyMetricFormGroup() {
		return new FormGroup<ScalingPolicyMetricFormProperties>({
			InvocationsPerInstance: new FormControl<number | null | undefined>(undefined),
			ModelLatency: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An object with the recommended values for you to specify when creating an autoscaling policy. */
	export interface DynamicScalingConfiguration {
		MinCapacity?: number | null;
		MaxCapacity?: number | null;
		ScaleInCooldown?: number | null;
		ScaleOutCooldown?: number | null;
		ScalingPolicies?: Array<ScalingPolicy>;
	}

	/** An object with the recommended values for you to specify when creating an autoscaling policy. */
	export interface DynamicScalingConfigurationFormProperties {
		MinCapacity: FormControl<number | null | undefined>,
		MaxCapacity: FormControl<number | null | undefined>,
		ScaleInCooldown: FormControl<number | null | undefined>,
		ScaleOutCooldown: FormControl<number | null | undefined>,
	}
	export function CreateDynamicScalingConfigurationFormGroup() {
		return new FormGroup<DynamicScalingConfigurationFormProperties>({
			MinCapacity: new FormControl<number | null | undefined>(undefined),
			MaxCapacity: new FormControl<number | null | undefined>(undefined),
			ScaleInCooldown: new FormControl<number | null | undefined>(undefined),
			ScaleOutCooldown: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An object containing a recommended scaling policy. */
	export interface ScalingPolicy {
		TargetTracking?: TargetTrackingScalingPolicyConfiguration;
	}

	/** An object containing a recommended scaling policy. */
	export interface ScalingPolicyFormProperties {
	}
	export function CreateScalingPolicyFormGroup() {
		return new FormGroup<ScalingPolicyFormProperties>({
		});

	}


	/** <p>A target tracking scaling policy. Includes support for predefined or customized metrics.</p> <p>When using the <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PutScalingPolicy.html">PutScalingPolicy</a> API, this parameter is required when you are creating a policy with the policy type <code>TargetTrackingScaling</code>.</p> */
	export interface TargetTrackingScalingPolicyConfiguration {
		MetricSpecification?: MetricSpecification;
		TargetValue?: number | null;
	}

	/** <p>A target tracking scaling policy. Includes support for predefined or customized metrics.</p> <p>When using the <a href="https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PutScalingPolicy.html">PutScalingPolicy</a> API, this parameter is required when you are creating a policy with the policy type <code>TargetTrackingScaling</code>.</p> */
	export interface TargetTrackingScalingPolicyConfigurationFormProperties {
		TargetValue: FormControl<number | null | undefined>,
	}
	export function CreateTargetTrackingScalingPolicyConfigurationFormGroup() {
		return new FormGroup<TargetTrackingScalingPolicyConfigurationFormProperties>({
			TargetValue: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An object containing information about a metric. */
	export interface MetricSpecification {
		Predefined?: PredefinedMetricSpecification;
		Customized?: CustomizedMetricSpecification;
	}

	/** An object containing information about a metric. */
	export interface MetricSpecificationFormProperties {
	}
	export function CreateMetricSpecificationFormGroup() {
		return new FormGroup<MetricSpecificationFormProperties>({
		});

	}


	/** A specification for a predefined metric. */
	export interface PredefinedMetricSpecification {
		PredefinedMetricType?: string;
	}

	/** A specification for a predefined metric. */
	export interface PredefinedMetricSpecificationFormProperties {
		PredefinedMetricType: FormControl<string | null | undefined>,
	}
	export function CreatePredefinedMetricSpecificationFormGroup() {
		return new FormGroup<PredefinedMetricSpecificationFormProperties>({
			PredefinedMetricType: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A customized metric. */
	export interface CustomizedMetricSpecification {
		MetricName?: string;
		Namespace?: string;
		Statistic?: Statistic;
	}

	/** A customized metric. */
	export interface CustomizedMetricSpecificationFormProperties {
		MetricName: FormControl<string | null | undefined>,
		Namespace: FormControl<string | null | undefined>,
		Statistic: FormControl<Statistic | null | undefined>,
	}
	export function CreateCustomizedMetricSpecificationFormGroup() {
		return new FormGroup<CustomizedMetricSpecificationFormProperties>({
			MetricName: new FormControl<string | null | undefined>(undefined),
			Namespace: new FormControl<string | null | undefined>(undefined),
			Statistic: new FormControl<Statistic | null | undefined>(undefined),
		});

	}

	export enum Statistic { Average = 'Average', Minimum = 'Minimum', Maximum = 'Maximum', SampleCount = 'SampleCount', Sum = 'Sum' }

	export interface GetScalingConfigurationRecommendationRequest {

		/** Required */
		InferenceRecommendationsJobName: string;
		RecommendationId?: string;
		EndpointName?: string;
		TargetCpuUtilizationPerCore?: number | null;
		ScalingPolicyObjective?: ScalingPolicyObjective;
	}
	export interface GetScalingConfigurationRecommendationRequestFormProperties {

		/** Required */
		InferenceRecommendationsJobName: FormControl<string | null | undefined>,
		RecommendationId: FormControl<string | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
		TargetCpuUtilizationPerCore: FormControl<number | null | undefined>,
	}
	export function CreateGetScalingConfigurationRecommendationRequestFormGroup() {
		return new FormGroup<GetScalingConfigurationRecommendationRequestFormProperties>({
			InferenceRecommendationsJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RecommendationId: new FormControl<string | null | undefined>(undefined),
			EndpointName: new FormControl<string | null | undefined>(undefined),
			TargetCpuUtilizationPerCore: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface GetSearchSuggestionsResponse {
		PropertyNameSuggestions?: Array<PropertyNameSuggestion>;
	}
	export interface GetSearchSuggestionsResponseFormProperties {
	}
	export function CreateGetSearchSuggestionsResponseFormGroup() {
		return new FormGroup<GetSearchSuggestionsResponseFormProperties>({
		});

	}


	/** A property name returned from a <code>GetSearchSuggestions</code> call that specifies a value in the <code>PropertyNameQuery</code> field. */
	export interface PropertyNameSuggestion {
		PropertyName?: string;
	}

	/** A property name returned from a <code>GetSearchSuggestions</code> call that specifies a value in the <code>PropertyNameQuery</code> field. */
	export interface PropertyNameSuggestionFormProperties {
		PropertyName: FormControl<string | null | undefined>,
	}
	export function CreatePropertyNameSuggestionFormGroup() {
		return new FormGroup<PropertyNameSuggestionFormProperties>({
			PropertyName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface GetSearchSuggestionsRequest {

		/** Required */
		Resource: ResourceType;
		SuggestionQuery?: SuggestionQuery;
	}
	export interface GetSearchSuggestionsRequestFormProperties {

		/** Required */
		Resource: FormControl<ResourceType | null | undefined>,
	}
	export function CreateGetSearchSuggestionsRequestFormGroup() {
		return new FormGroup<GetSearchSuggestionsRequestFormProperties>({
			Resource: new FormControl<ResourceType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ResourceType { TrainingJob = 'TrainingJob', Experiment = 'Experiment', ExperimentTrial = 'ExperimentTrial', ExperimentTrialComponent = 'ExperimentTrialComponent', Endpoint = 'Endpoint', ModelPackage = 'ModelPackage', ModelPackageGroup = 'ModelPackageGroup', Pipeline = 'Pipeline', PipelineExecution = 'PipelineExecution', FeatureGroup = 'FeatureGroup', Project = 'Project', FeatureMetadata = 'FeatureMetadata', HyperParameterTuningJob = 'HyperParameterTuningJob', ModelCard = 'ModelCard', Model = 'Model' }


	/** Specified in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_GetSearchSuggestions.html">GetSearchSuggestions</a> request. Limits the property names that are included in the response. */
	export interface SuggestionQuery {
		PropertyNameQuery?: PropertyNameQuery;
	}

	/** Specified in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_GetSearchSuggestions.html">GetSearchSuggestions</a> request. Limits the property names that are included in the response. */
	export interface SuggestionQueryFormProperties {
	}
	export function CreateSuggestionQueryFormGroup() {
		return new FormGroup<SuggestionQueryFormProperties>({
		});

	}


	/** Part of the <code>SuggestionQuery</code> type. Specifies a hint for retrieving property names that begin with the specified text. */
	export interface PropertyNameQuery {

		/** Required */
		PropertyNameHint: string;
	}

	/** Part of the <code>SuggestionQuery</code> type. Specifies a hint for retrieving property names that begin with the specified text. */
	export interface PropertyNameQueryFormProperties {

		/** Required */
		PropertyNameHint: FormControl<string | null | undefined>,
	}
	export function CreatePropertyNameQueryFormGroup() {
		return new FormGroup<PropertyNameQueryFormProperties>({
			PropertyNameHint: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ImportHubContentResponse {

		/** Required */
		HubArn: string;

		/** Required */
		HubContentArn: string;
	}
	export interface ImportHubContentResponseFormProperties {

		/** Required */
		HubArn: FormControl<string | null | undefined>,

		/** Required */
		HubContentArn: FormControl<string | null | undefined>,
	}
	export function CreateImportHubContentResponseFormGroup() {
		return new FormGroup<ImportHubContentResponseFormProperties>({
			HubArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ImportHubContentRequest {

		/** Required */
		HubContentName: string;
		HubContentVersion?: string;

		/** Required */
		HubContentType: HubContentType;

		/** Required */
		DocumentSchemaVersion: string;

		/** Required */
		HubName: string;
		HubContentDisplayName?: string;
		HubContentDescription?: string;
		HubContentMarkdown?: string;

		/** Required */
		HubContentDocument: string;
		HubContentSearchKeywords?: Array<string>;
		Tags?: Array<Tag>;
	}
	export interface ImportHubContentRequestFormProperties {

		/** Required */
		HubContentName: FormControl<string | null | undefined>,
		HubContentVersion: FormControl<string | null | undefined>,

		/** Required */
		HubContentType: FormControl<HubContentType | null | undefined>,

		/** Required */
		DocumentSchemaVersion: FormControl<string | null | undefined>,

		/** Required */
		HubName: FormControl<string | null | undefined>,
		HubContentDisplayName: FormControl<string | null | undefined>,
		HubContentDescription: FormControl<string | null | undefined>,
		HubContentMarkdown: FormControl<string | null | undefined>,

		/** Required */
		HubContentDocument: FormControl<string | null | undefined>,
	}
	export function CreateImportHubContentRequestFormGroup() {
		return new FormGroup<ImportHubContentRequestFormProperties>({
			HubContentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentVersion: new FormControl<string | null | undefined>(undefined),
			HubContentType: new FormControl<HubContentType | null | undefined>(undefined, [Validators.required]),
			DocumentSchemaVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentDisplayName: new FormControl<string | null | undefined>(undefined),
			HubContentDescription: new FormControl<string | null | undefined>(undefined),
			HubContentMarkdown: new FormControl<string | null | undefined>(undefined),
			HubContentDocument: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListActionsResponse {
		ActionSummaries?: Array<ActionSummary>;
		NextToken?: string;
	}
	export interface ListActionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListActionsResponseFormGroup() {
		return new FormGroup<ListActionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Lists the properties of an <i>action</i>. An action represents an action or activity. Some examples are a workflow step and a model deployment. Generally, an action involves at least one input artifact or output artifact. */
	export interface ActionSummary {
		ActionArn?: string;
		ActionName?: string;
		Source?: ActionSource;
		ActionType?: string;
		Status?: ActionStatus;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Lists the properties of an <i>action</i>. An action represents an action or activity. Some examples are a workflow step and a model deployment. Generally, an action involves at least one input artifact or output artifact. */
	export interface ActionSummaryFormProperties {
		ActionArn: FormControl<string | null | undefined>,
		ActionName: FormControl<string | null | undefined>,
		ActionType: FormControl<string | null | undefined>,
		Status: FormControl<ActionStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateActionSummaryFormGroup() {
		return new FormGroup<ActionSummaryFormProperties>({
			ActionArn: new FormControl<string | null | undefined>(undefined),
			ActionName: new FormControl<string | null | undefined>(undefined),
			ActionType: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<ActionStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListActionsRequest {
		SourceUri?: string;
		ActionType?: string;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListActionsRequestFormProperties {
		SourceUri: FormControl<string | null | undefined>,
		ActionType: FormControl<string | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListActionsRequestFormGroup() {
		return new FormGroup<ListActionsRequestFormProperties>({
			SourceUri: new FormControl<string | null | undefined>(undefined),
			ActionType: new FormControl<string | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum SortActionsBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum SortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export interface ListAlgorithmsOutput {

		/** Required */
		AlgorithmSummaryList: Array<AlgorithmSummary>;
		NextToken?: string;
	}
	export interface ListAlgorithmsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAlgorithmsOutputFormGroup() {
		return new FormGroup<ListAlgorithmsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information about an algorithm. */
	export interface AlgorithmSummary {

		/** Required */
		AlgorithmName: string;

		/** Required */
		AlgorithmArn: string;
		AlgorithmDescription?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		AlgorithmStatus: AlgorithmStatus;
	}

	/** Provides summary information about an algorithm. */
	export interface AlgorithmSummaryFormProperties {

		/** Required */
		AlgorithmName: FormControl<string | null | undefined>,

		/** Required */
		AlgorithmArn: FormControl<string | null | undefined>,
		AlgorithmDescription: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		AlgorithmStatus: FormControl<AlgorithmStatus | null | undefined>,
	}
	export function CreateAlgorithmSummaryFormGroup() {
		return new FormGroup<AlgorithmSummaryFormProperties>({
			AlgorithmName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AlgorithmArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AlgorithmDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AlgorithmStatus: new FormControl<AlgorithmStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListAlgorithmsInput {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		MaxResults?: number | null;
		NameContains?: string;
		NextToken?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
	}
	export interface ListAlgorithmsInputFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListAlgorithmsInputFormGroup() {
		return new FormGroup<ListAlgorithmsInputFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListAliasesResponse {
		SageMakerImageVersionAliases?: Array<string>;
		NextToken?: string;
	}
	export interface ListAliasesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAliasesResponseFormGroup() {
		return new FormGroup<ListAliasesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListAliasesRequest {

		/** Required */
		ImageName: string;
		Alias?: string;
		Version?: number | null;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListAliasesRequestFormProperties {

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		Alias: FormControl<string | null | undefined>,
		Version: FormControl<number | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAliasesRequestFormGroup() {
		return new FormGroup<ListAliasesRequestFormProperties>({
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Alias: new FormControl<string | null | undefined>(undefined),
			Version: new FormControl<number | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListAppImageConfigsResponse {
		NextToken?: string;
		AppImageConfigs?: Array<AppImageConfigDetails>;
	}
	export interface ListAppImageConfigsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAppImageConfigsResponseFormGroup() {
		return new FormGroup<ListAppImageConfigsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration for running a SageMaker image as a KernelGateway app. */
	export interface AppImageConfigDetails {
		AppImageConfigArn?: string;
		AppImageConfigName?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		KernelGatewayImageConfig?: KernelGatewayImageConfig;
	}

	/** The configuration for running a SageMaker image as a KernelGateway app. */
	export interface AppImageConfigDetailsFormProperties {
		AppImageConfigArn: FormControl<string | null | undefined>,
		AppImageConfigName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateAppImageConfigDetailsFormGroup() {
		return new FormGroup<AppImageConfigDetailsFormProperties>({
			AppImageConfigArn: new FormControl<string | null | undefined>(undefined),
			AppImageConfigName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListAppImageConfigsRequest {
		MaxResults?: number | null;
		NextToken?: string;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		ModifiedTimeBefore?: Date;
		ModifiedTimeAfter?: Date;
		SortBy?: AppImageConfigSortKey;
		SortOrder?: SortOrder;
	}
	export interface ListAppImageConfigsRequestFormProperties {
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		ModifiedTimeBefore: FormControl<Date | null | undefined>,
		ModifiedTimeAfter: FormControl<Date | null | undefined>,
		SortBy: FormControl<AppImageConfigSortKey | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListAppImageConfigsRequestFormGroup() {
		return new FormGroup<ListAppImageConfigsRequestFormProperties>({
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			ModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			ModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<AppImageConfigSortKey | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum AppImageConfigSortKey { CreationTime = 'CreationTime', LastModifiedTime = 'LastModifiedTime', Name = 'Name' }

	export interface ListAppsResponse {
		Apps?: Array<AppDetails>;
		NextToken?: string;
	}
	export interface ListAppsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAppsResponseFormGroup() {
		return new FormGroup<ListAppsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details about an Amazon SageMaker app. */
	export interface AppDetails {
		DomainId?: string;
		UserProfileName?: string;
		AppType?: AppType;
		AppName?: string;
		Status?: AppStatus;
		CreationTime?: Date;
		SpaceName?: string;
	}

	/** Details about an Amazon SageMaker app. */
	export interface AppDetailsFormProperties {
		DomainId: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,
		AppType: FormControl<AppType | null | undefined>,
		AppName: FormControl<string | null | undefined>,
		Status: FormControl<AppStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateAppDetailsFormGroup() {
		return new FormGroup<AppDetailsFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			AppType: new FormControl<AppType | null | undefined>(undefined),
			AppName: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<AppStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			SpaceName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListAppsRequest {
		NextToken?: string;
		MaxResults?: number | null;
		SortOrder?: SortOrder;
		SortBy?: AppSortKey;
		DomainIdEquals?: string;
		UserProfileNameEquals?: string;
		SpaceNameEquals?: string;
	}
	export interface ListAppsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		SortBy: FormControl<AppSortKey | null | undefined>,
		DomainIdEquals: FormControl<string | null | undefined>,
		UserProfileNameEquals: FormControl<string | null | undefined>,
		SpaceNameEquals: FormControl<string | null | undefined>,
	}
	export function CreateListAppsRequestFormGroup() {
		return new FormGroup<ListAppsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			SortBy: new FormControl<AppSortKey | null | undefined>(undefined),
			DomainIdEquals: new FormControl<string | null | undefined>(undefined),
			UserProfileNameEquals: new FormControl<string | null | undefined>(undefined),
			SpaceNameEquals: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AppSortKey { CreationTime = 'CreationTime' }

	export interface ListArtifactsResponse {
		ArtifactSummaries?: Array<ArtifactSummary>;
		NextToken?: string;
	}
	export interface ListArtifactsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListArtifactsResponseFormGroup() {
		return new FormGroup<ListArtifactsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Lists a summary of the properties of an artifact. An artifact represents a URI addressable object or data. Some examples are a dataset and a model. */
	export interface ArtifactSummary {
		ArtifactArn?: string;
		ArtifactName?: string;
		Source?: ArtifactSource;
		ArtifactType?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Lists a summary of the properties of an artifact. An artifact represents a URI addressable object or data. Some examples are a dataset and a model. */
	export interface ArtifactSummaryFormProperties {
		ArtifactArn: FormControl<string | null | undefined>,
		ArtifactName: FormControl<string | null | undefined>,
		ArtifactType: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateArtifactSummaryFormGroup() {
		return new FormGroup<ArtifactSummaryFormProperties>({
			ArtifactArn: new FormControl<string | null | undefined>(undefined),
			ArtifactName: new FormControl<string | null | undefined>(undefined),
			ArtifactType: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListArtifactsRequest {
		SourceUri?: string;
		ArtifactType?: string;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: AppSortKey;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListArtifactsRequestFormProperties {
		SourceUri: FormControl<string | null | undefined>,
		ArtifactType: FormControl<string | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<AppSortKey | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListArtifactsRequestFormGroup() {
		return new FormGroup<ListArtifactsRequestFormProperties>({
			SourceUri: new FormControl<string | null | undefined>(undefined),
			ArtifactType: new FormControl<string | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<AppSortKey | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListAssociationsResponse {
		AssociationSummaries?: Array<AssociationSummary>;
		NextToken?: string;
	}
	export interface ListAssociationsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAssociationsResponseFormGroup() {
		return new FormGroup<ListAssociationsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Lists a summary of the properties of an association. An association is an entity that links other lineage or experiment entities. An example would be an association between a training job and a model. */
	export interface AssociationSummary {
		SourceArn?: string;
		DestinationArn?: string;
		SourceType?: string;
		DestinationType?: string;
		AssociationType?: AssociationEdgeType;
		SourceName?: string;
		DestinationName?: string;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
	}

	/** Lists a summary of the properties of an association. An association is an entity that links other lineage or experiment entities. An example would be an association between a training job and a model. */
	export interface AssociationSummaryFormProperties {
		SourceArn: FormControl<string | null | undefined>,
		DestinationArn: FormControl<string | null | undefined>,
		SourceType: FormControl<string | null | undefined>,
		DestinationType: FormControl<string | null | undefined>,
		AssociationType: FormControl<AssociationEdgeType | null | undefined>,
		SourceName: FormControl<string | null | undefined>,
		DestinationName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateAssociationSummaryFormGroup() {
		return new FormGroup<AssociationSummaryFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined),
			DestinationArn: new FormControl<string | null | undefined>(undefined),
			SourceType: new FormControl<string | null | undefined>(undefined),
			DestinationType: new FormControl<string | null | undefined>(undefined),
			AssociationType: new FormControl<AssociationEdgeType | null | undefined>(undefined),
			SourceName: new FormControl<string | null | undefined>(undefined),
			DestinationName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListAssociationsRequest {
		SourceArn?: string;
		DestinationArn?: string;
		SourceType?: string;
		DestinationType?: string;
		AssociationType?: AssociationEdgeType;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortAssociationsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListAssociationsRequestFormProperties {
		SourceArn: FormControl<string | null | undefined>,
		DestinationArn: FormControl<string | null | undefined>,
		SourceType: FormControl<string | null | undefined>,
		DestinationType: FormControl<string | null | undefined>,
		AssociationType: FormControl<AssociationEdgeType | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortAssociationsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListAssociationsRequestFormGroup() {
		return new FormGroup<ListAssociationsRequestFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined),
			DestinationArn: new FormControl<string | null | undefined>(undefined),
			SourceType: new FormControl<string | null | undefined>(undefined),
			DestinationType: new FormControl<string | null | undefined>(undefined),
			AssociationType: new FormControl<AssociationEdgeType | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortAssociationsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum SortAssociationsBy { SourceArn = 'SourceArn', DestinationArn = 'DestinationArn', SourceType = 'SourceType', DestinationType = 'DestinationType', CreationTime = 'CreationTime' }

	export interface ListAutoMLJobsResponse {

		/** Required */
		AutoMLJobSummaries: Array<AutoMLJobSummary>;
		NextToken?: string;
	}
	export interface ListAutoMLJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAutoMLJobsResponseFormGroup() {
		return new FormGroup<ListAutoMLJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides a summary about an AutoML job. */
	export interface AutoMLJobSummary {

		/** Required */
		AutoMLJobName: string;

		/** Required */
		AutoMLJobArn: string;

		/** Required */
		AutoMLJobStatus: CandidateStatus;

		/** Required */
		AutoMLJobSecondaryStatus: AutoMLJobSecondaryStatus;

		/** Required */
		CreationTime: Date;
		EndTime?: Date;

		/** Required */
		LastModifiedTime: Date;
		FailureReason?: string;
		PartialFailureReasons?: Array<AutoMLPartialFailureReason>;
	}

	/** Provides a summary about an AutoML job. */
	export interface AutoMLJobSummaryFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,

		/** Required */
		AutoMLJobArn: FormControl<string | null | undefined>,

		/** Required */
		AutoMLJobStatus: FormControl<CandidateStatus | null | undefined>,

		/** Required */
		AutoMLJobSecondaryStatus: FormControl<AutoMLJobSecondaryStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLJobSummaryFormGroup() {
		return new FormGroup<AutoMLJobSummaryFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AutoMLJobStatus: new FormControl<CandidateStatus | null | undefined>(undefined, [Validators.required]),
			AutoMLJobSecondaryStatus: new FormControl<AutoMLJobSecondaryStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListAutoMLJobsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		StatusEquals?: CandidateStatus;
		SortOrder?: SortOrder;
		SortBy?: AutoMLSortBy;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListAutoMLJobsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<CandidateStatus | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListAutoMLJobsRequestFormGroup() {
		return new FormGroup<ListAutoMLJobsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<CandidateStatus | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AutoMLSortBy { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export interface ListCandidatesForAutoMLJobResponse {

		/** Required */
		Candidates: Array<AutoMLCandidate>;
		NextToken?: string;
	}
	export interface ListCandidatesForAutoMLJobResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListCandidatesForAutoMLJobResponseFormGroup() {
		return new FormGroup<ListCandidatesForAutoMLJobResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListCandidatesForAutoMLJobRequest {

		/** Required */
		AutoMLJobName: string;
		StatusEquals?: CandidateStatus;
		CandidateNameEquals?: string;
		SortOrder?: SortOrder;
		SortBy?: CandidateSortBy;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListCandidatesForAutoMLJobRequestFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,
		StatusEquals: FormControl<CandidateStatus | null | undefined>,
		CandidateNameEquals: FormControl<string | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		SortBy: FormControl<CandidateSortBy | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListCandidatesForAutoMLJobRequestFormGroup() {
		return new FormGroup<ListCandidatesForAutoMLJobRequestFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StatusEquals: new FormControl<CandidateStatus | null | undefined>(undefined),
			CandidateNameEquals: new FormControl<string | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			SortBy: new FormControl<CandidateSortBy | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum CandidateSortBy { CreationTime = 'CreationTime', Status = 'Status', FinalObjectiveMetricValue = 'FinalObjectiveMetricValue' }

	export interface ListCodeRepositoriesOutput {

		/** Required */
		CodeRepositorySummaryList: Array<CodeRepositorySummary>;
		NextToken?: string;
	}
	export interface ListCodeRepositoriesOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListCodeRepositoriesOutputFormGroup() {
		return new FormGroup<ListCodeRepositoriesOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies summary information about a Git repository. */
	export interface CodeRepositorySummary {

		/** Required */
		CodeRepositoryName: string;

		/** Required */
		CodeRepositoryArn: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
		GitConfig?: GitConfig;
	}

	/** Specifies summary information about a Git repository. */
	export interface CodeRepositorySummaryFormProperties {

		/** Required */
		CodeRepositoryName: FormControl<string | null | undefined>,

		/** Required */
		CodeRepositoryArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateCodeRepositorySummaryFormGroup() {
		return new FormGroup<CodeRepositorySummaryFormProperties>({
			CodeRepositoryName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CodeRepositoryArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListCodeRepositoriesInput {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		MaxResults?: number | null;
		NameContains?: string;
		NextToken?: string;
		SortBy?: CodeRepositorySortBy;
		SortOrder?: SortOrder;
	}
	export interface ListCodeRepositoriesInputFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<CodeRepositorySortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListCodeRepositoriesInputFormGroup() {
		return new FormGroup<ListCodeRepositoriesInputFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<CodeRepositorySortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum CodeRepositorySortBy { Name = 'Name', CreationTime = 'CreationTime', LastModifiedTime = 'LastModifiedTime' }

	export interface ListCompilationJobsResponse {

		/** Required */
		CompilationJobSummaries: Array<CompilationJobSummary>;
		NextToken?: string;
	}
	export interface ListCompilationJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListCompilationJobsResponseFormGroup() {
		return new FormGroup<ListCompilationJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of a model compilation job. */
	export interface CompilationJobSummary {

		/** Required */
		CompilationJobName: string;

		/** Required */
		CompilationJobArn: string;

		/** Required */
		CreationTime: Date;
		CompilationStartTime?: Date;
		CompilationEndTime?: Date;
		CompilationTargetDevice?: TargetDevice;
		CompilationTargetPlatformOs?: TargetPlatformOs;
		CompilationTargetPlatformArch?: TargetPlatformArch;
		CompilationTargetPlatformAccelerator?: TargetPlatformAccelerator;
		LastModifiedTime?: Date;

		/** Required */
		CompilationJobStatus: CompilationJobStatus;
	}

	/** A summary of a model compilation job. */
	export interface CompilationJobSummaryFormProperties {

		/** Required */
		CompilationJobName: FormControl<string | null | undefined>,

		/** Required */
		CompilationJobArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		CompilationStartTime: FormControl<Date | null | undefined>,
		CompilationEndTime: FormControl<Date | null | undefined>,
		CompilationTargetDevice: FormControl<TargetDevice | null | undefined>,
		CompilationTargetPlatformOs: FormControl<TargetPlatformOs | null | undefined>,
		CompilationTargetPlatformArch: FormControl<TargetPlatformArch | null | undefined>,
		CompilationTargetPlatformAccelerator: FormControl<TargetPlatformAccelerator | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		CompilationJobStatus: FormControl<CompilationJobStatus | null | undefined>,
	}
	export function CreateCompilationJobSummaryFormGroup() {
		return new FormGroup<CompilationJobSummaryFormProperties>({
			CompilationJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CompilationJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			CompilationStartTime: new FormControl<Date | null | undefined>(undefined),
			CompilationEndTime: new FormControl<Date | null | undefined>(undefined),
			CompilationTargetDevice: new FormControl<TargetDevice | null | undefined>(undefined),
			CompilationTargetPlatformOs: new FormControl<TargetPlatformOs | null | undefined>(undefined),
			CompilationTargetPlatformArch: new FormControl<TargetPlatformArch | null | undefined>(undefined),
			CompilationTargetPlatformAccelerator: new FormControl<TargetPlatformAccelerator | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			CompilationJobStatus: new FormControl<CompilationJobStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListCompilationJobsRequest {
		NextToken?: string;
		MaxResults?: number | null;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		StatusEquals?: CompilationJobStatus;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
	}
	export interface ListCompilationJobsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<CompilationJobStatus | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListCompilationJobsRequestFormGroup() {
		return new FormGroup<ListCompilationJobsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<CompilationJobStatus | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListContextsResponse {
		ContextSummaries?: Array<ContextSummary>;
		NextToken?: string;
	}
	export interface ListContextsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListContextsResponseFormGroup() {
		return new FormGroup<ListContextsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Lists a summary of the properties of a context. A context provides a logical grouping of other entities. */
	export interface ContextSummary {
		ContextArn?: string;
		ContextName?: string;
		Source?: ContextSource;
		ContextType?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Lists a summary of the properties of a context. A context provides a logical grouping of other entities. */
	export interface ContextSummaryFormProperties {
		ContextArn: FormControl<string | null | undefined>,
		ContextName: FormControl<string | null | undefined>,
		ContextType: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateContextSummaryFormGroup() {
		return new FormGroup<ContextSummaryFormProperties>({
			ContextArn: new FormControl<string | null | undefined>(undefined),
			ContextName: new FormControl<string | null | undefined>(undefined),
			ContextType: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListContextsRequest {
		SourceUri?: string;
		ContextType?: string;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListContextsRequestFormProperties {
		SourceUri: FormControl<string | null | undefined>,
		ContextType: FormControl<string | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListContextsRequestFormGroup() {
		return new FormGroup<ListContextsRequestFormProperties>({
			SourceUri: new FormControl<string | null | undefined>(undefined),
			ContextType: new FormControl<string | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListDataQualityJobDefinitionsResponse {

		/** Required */
		JobDefinitionSummaries: Array<MonitoringJobDefinitionSummary>;
		NextToken?: string;
	}
	export interface ListDataQualityJobDefinitionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListDataQualityJobDefinitionsResponseFormGroup() {
		return new FormGroup<ListDataQualityJobDefinitionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary information about a monitoring job. */
	export interface MonitoringJobDefinitionSummary {

		/** Required */
		MonitoringJobDefinitionName: string;

		/** Required */
		MonitoringJobDefinitionArn: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		EndpointName: string;
	}

	/** Summary information about a monitoring job. */
	export interface MonitoringJobDefinitionSummaryFormProperties {

		/** Required */
		MonitoringJobDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		MonitoringJobDefinitionArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringJobDefinitionSummaryFormGroup() {
		return new FormGroup<MonitoringJobDefinitionSummaryFormProperties>({
			MonitoringJobDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MonitoringJobDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListDataQualityJobDefinitionsRequest {
		EndpointName?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
	}
	export interface ListDataQualityJobDefinitionsRequestFormProperties {
		EndpointName: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
	}
	export function CreateListDataQualityJobDefinitionsRequestFormGroup() {
		return new FormGroup<ListDataQualityJobDefinitionsRequestFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListDeviceFleetsResponse {

		/** Required */
		DeviceFleetSummaries: Array<DeviceFleetSummary>;
		NextToken?: string;
	}
	export interface ListDeviceFleetsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListDeviceFleetsResponseFormGroup() {
		return new FormGroup<ListDeviceFleetsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary of the device fleet. */
	export interface DeviceFleetSummary {

		/** Required */
		DeviceFleetArn: string;

		/** Required */
		DeviceFleetName: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Summary of the device fleet. */
	export interface DeviceFleetSummaryFormProperties {

		/** Required */
		DeviceFleetArn: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDeviceFleetSummaryFormGroup() {
		return new FormGroup<DeviceFleetSummaryFormProperties>({
			DeviceFleetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListDeviceFleetsRequest {
		NextToken?: string;
		MaxResults?: number | null;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		SortBy?: ListDeviceFleetsSortBy;
		SortOrder?: SortOrder;
	}
	export interface ListDeviceFleetsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		SortBy: FormControl<ListDeviceFleetsSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListDeviceFleetsRequestFormGroup() {
		return new FormGroup<ListDeviceFleetsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<ListDeviceFleetsSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum ListDeviceFleetsSortBy { NAME = 'NAME', CREATION_TIME = 'CREATION_TIME', LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME' }

	export interface ListDevicesResponse {

		/** Required */
		DeviceSummaries: Array<DeviceSummary>;
		NextToken?: string;
	}
	export interface ListDevicesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListDevicesResponseFormGroup() {
		return new FormGroup<ListDevicesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary of the device. */
	export interface DeviceSummary {

		/** Required */
		DeviceName: string;

		/** Required */
		DeviceArn: string;
		Description?: string;
		DeviceFleetName?: string;
		IotThingName?: string;
		RegistrationTime?: Date;
		LatestHeartbeat?: Date;
		Models?: Array<EdgeModelSummary>;
		AgentVersion?: string;
	}

	/** Summary of the device. */
	export interface DeviceSummaryFormProperties {

		/** Required */
		DeviceName: FormControl<string | null | undefined>,

		/** Required */
		DeviceArn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		DeviceFleetName: FormControl<string | null | undefined>,
		IotThingName: FormControl<string | null | undefined>,
		RegistrationTime: FormControl<Date | null | undefined>,
		LatestHeartbeat: FormControl<Date | null | undefined>,
		AgentVersion: FormControl<string | null | undefined>,
	}
	export function CreateDeviceSummaryFormGroup() {
		return new FormGroup<DeviceSummaryFormProperties>({
			DeviceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined),
			IotThingName: new FormControl<string | null | undefined>(undefined),
			RegistrationTime: new FormControl<Date | null | undefined>(undefined),
			LatestHeartbeat: new FormControl<Date | null | undefined>(undefined),
			AgentVersion: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary of model on edge device. */
	export interface EdgeModelSummary {

		/** Required */
		ModelName: string;

		/** Required */
		ModelVersion: string;
	}

	/** Summary of model on edge device. */
	export interface EdgeModelSummaryFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		ModelVersion: FormControl<string | null | undefined>,
	}
	export function CreateEdgeModelSummaryFormGroup() {
		return new FormGroup<EdgeModelSummaryFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListDevicesRequest {
		NextToken?: string;
		MaxResults?: number | null;
		LatestHeartbeatAfter?: Date;
		ModelName?: string;
		DeviceFleetName?: string;
	}
	export interface ListDevicesRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		LatestHeartbeatAfter: FormControl<Date | null | undefined>,
		ModelName: FormControl<string | null | undefined>,
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateListDevicesRequestFormGroup() {
		return new FormGroup<ListDevicesRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			LatestHeartbeatAfter: new FormControl<Date | null | undefined>(undefined),
			ModelName: new FormControl<string | null | undefined>(undefined),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListDomainsResponse {
		Domains?: Array<DomainDetails>;
		NextToken?: string;
	}
	export interface ListDomainsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListDomainsResponseFormGroup() {
		return new FormGroup<ListDomainsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The domain's details. */
	export interface DomainDetails {
		DomainArn?: string;
		DomainId?: string;
		DomainName?: string;
		Status?: DomainStatus;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		Url?: string;
	}

	/** The domain's details. */
	export interface DomainDetailsFormProperties {
		DomainArn: FormControl<string | null | undefined>,
		DomainId: FormControl<string | null | undefined>,
		DomainName: FormControl<string | null | undefined>,
		Status: FormControl<DomainStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		Url: FormControl<string | null | undefined>,
	}
	export function CreateDomainDetailsFormGroup() {
		return new FormGroup<DomainDetailsFormProperties>({
			DomainArn: new FormControl<string | null | undefined>(undefined),
			DomainId: new FormControl<string | null | undefined>(undefined),
			DomainName: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<DomainStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			Url: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListDomainsRequest {
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListDomainsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListDomainsRequestFormGroup() {
		return new FormGroup<ListDomainsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListEdgeDeploymentPlansResponse {

		/** Required */
		EdgeDeploymentPlanSummaries: Array<EdgeDeploymentPlanSummary>;
		NextToken?: string;
	}
	export interface ListEdgeDeploymentPlansResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListEdgeDeploymentPlansResponseFormGroup() {
		return new FormGroup<ListEdgeDeploymentPlansResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains information summarizing an edge deployment plan. */
	export interface EdgeDeploymentPlanSummary {

		/** Required */
		EdgeDeploymentPlanArn: string;

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		DeviceFleetName: string;

		/** Required */
		EdgeDeploymentSuccess: number;

		/** Required */
		EdgeDeploymentPending: number;

		/** Required */
		EdgeDeploymentFailed: number;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Contains information summarizing an edge deployment plan. */
	export interface EdgeDeploymentPlanSummaryFormProperties {

		/** Required */
		EdgeDeploymentPlanArn: FormControl<string | null | undefined>,

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,

		/** Required */
		EdgeDeploymentSuccess: FormControl<number | null | undefined>,

		/** Required */
		EdgeDeploymentPending: FormControl<number | null | undefined>,

		/** Required */
		EdgeDeploymentFailed: FormControl<number | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateEdgeDeploymentPlanSummaryFormGroup() {
		return new FormGroup<EdgeDeploymentPlanSummaryFormProperties>({
			EdgeDeploymentPlanArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentSuccess: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentPending: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentFailed: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListEdgeDeploymentPlansRequest {
		NextToken?: string;
		MaxResults?: number | null;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		DeviceFleetNameContains?: string;
		SortBy?: ListEdgeDeploymentPlansSortBy;
		SortOrder?: SortOrder;
	}
	export interface ListEdgeDeploymentPlansRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		DeviceFleetNameContains: FormControl<string | null | undefined>,
		SortBy: FormControl<ListEdgeDeploymentPlansSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListEdgeDeploymentPlansRequestFormGroup() {
		return new FormGroup<ListEdgeDeploymentPlansRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			DeviceFleetNameContains: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<ListEdgeDeploymentPlansSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum ListEdgeDeploymentPlansSortBy { NAME = 'NAME', DEVICE_FLEET_NAME = 'DEVICE_FLEET_NAME', CREATION_TIME = 'CREATION_TIME', LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME' }

	export interface ListEdgePackagingJobsResponse {

		/** Required */
		EdgePackagingJobSummaries: Array<EdgePackagingJobSummary>;
		NextToken?: string;
	}
	export interface ListEdgePackagingJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListEdgePackagingJobsResponseFormGroup() {
		return new FormGroup<ListEdgePackagingJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary of edge packaging job. */
	export interface EdgePackagingJobSummary {

		/** Required */
		EdgePackagingJobArn: string;

		/** Required */
		EdgePackagingJobName: string;

		/** Required */
		EdgePackagingJobStatus: EdgePackagingJobStatus;
		CompilationJobName?: string;
		ModelName?: string;
		ModelVersion?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Summary of edge packaging job. */
	export interface EdgePackagingJobSummaryFormProperties {

		/** Required */
		EdgePackagingJobArn: FormControl<string | null | undefined>,

		/** Required */
		EdgePackagingJobName: FormControl<string | null | undefined>,

		/** Required */
		EdgePackagingJobStatus: FormControl<EdgePackagingJobStatus | null | undefined>,
		CompilationJobName: FormControl<string | null | undefined>,
		ModelName: FormControl<string | null | undefined>,
		ModelVersion: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateEdgePackagingJobSummaryFormGroup() {
		return new FormGroup<EdgePackagingJobSummaryFormProperties>({
			EdgePackagingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgePackagingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgePackagingJobStatus: new FormControl<EdgePackagingJobStatus | null | undefined>(undefined, [Validators.required]),
			CompilationJobName: new FormControl<string | null | undefined>(undefined),
			ModelName: new FormControl<string | null | undefined>(undefined),
			ModelVersion: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListEdgePackagingJobsRequest {
		NextToken?: string;
		MaxResults?: number | null;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		ModelNameContains?: string;
		StatusEquals?: EdgePackagingJobStatus;
		SortBy?: ListEdgePackagingJobsSortBy;
		SortOrder?: SortOrder;
	}
	export interface ListEdgePackagingJobsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		ModelNameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<EdgePackagingJobStatus | null | undefined>,
		SortBy: FormControl<ListEdgePackagingJobsSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListEdgePackagingJobsRequestFormGroup() {
		return new FormGroup<ListEdgePackagingJobsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			ModelNameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<EdgePackagingJobStatus | null | undefined>(undefined),
			SortBy: new FormControl<ListEdgePackagingJobsSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum ListEdgePackagingJobsSortBy { NAME = 'NAME', MODEL_NAME = 'MODEL_NAME', CREATION_TIME = 'CREATION_TIME', LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME', STATUS = 'STATUS' }

	export interface ListEndpointConfigsOutput {

		/** Required */
		EndpointConfigs: Array<EndpointConfigSummary>;
		NextToken?: string;
	}
	export interface ListEndpointConfigsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListEndpointConfigsOutputFormGroup() {
		return new FormGroup<ListEndpointConfigsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information for an endpoint configuration. */
	export interface EndpointConfigSummary {

		/** Required */
		EndpointConfigName: string;

		/** Required */
		EndpointConfigArn: string;

		/** Required */
		CreationTime: Date;
	}

	/** Provides summary information for an endpoint configuration. */
	export interface EndpointConfigSummaryFormProperties {

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,

		/** Required */
		EndpointConfigArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateEndpointConfigSummaryFormGroup() {
		return new FormGroup<EndpointConfigSummaryFormProperties>({
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointConfigArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListEndpointConfigsInput {
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
	}
	export interface ListEndpointConfigsInputFormProperties {
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
	}
	export function CreateListEndpointConfigsInputFormGroup() {
		return new FormGroup<ListEndpointConfigsInputFormProperties>({
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListEndpointsOutput {

		/** Required */
		Endpoints: Array<EndpointSummary>;
		NextToken?: string;
	}
	export interface ListEndpointsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListEndpointsOutputFormGroup() {
		return new FormGroup<ListEndpointsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information for an endpoint. */
	export interface EndpointSummary {

		/** Required */
		EndpointName: string;

		/** Required */
		EndpointArn: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		EndpointStatus: EndpointStatus;
	}

	/** Provides summary information for an endpoint. */
	export interface EndpointSummaryFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		EndpointArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		EndpointStatus: FormControl<EndpointStatus | null | undefined>,
	}
	export function CreateEndpointSummaryFormGroup() {
		return new FormGroup<EndpointSummaryFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndpointStatus: new FormControl<EndpointStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListEndpointsInput {
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		StatusEquals?: EndpointStatus;
	}
	export interface ListEndpointsInputFormProperties {
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		StatusEquals: FormControl<EndpointStatus | null | undefined>,
	}
	export function CreateListEndpointsInputFormGroup() {
		return new FormGroup<ListEndpointsInputFormProperties>({
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			StatusEquals: new FormControl<EndpointStatus | null | undefined>(undefined),
		});

	}

	export interface ListExperimentsResponse {
		ExperimentSummaries?: Array<ExperimentSummary>;
		NextToken?: string;
	}
	export interface ListExperimentsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListExperimentsResponseFormGroup() {
		return new FormGroup<ListExperimentsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of the properties of an experiment. To get the complete set of properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a> API and provide the <code>ExperimentName</code>. */
	export interface ExperimentSummary {
		ExperimentArn?: string;
		ExperimentName?: string;
		DisplayName?: string;

		/** The source of the experiment. */
		ExperimentSource?: ExperimentSource;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** A summary of the properties of an experiment. To get the complete set of properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a> API and provide the <code>ExperimentName</code>. */
	export interface ExperimentSummaryFormProperties {
		ExperimentArn: FormControl<string | null | undefined>,
		ExperimentName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateExperimentSummaryFormGroup() {
		return new FormGroup<ExperimentSummaryFormProperties>({
			ExperimentArn: new FormControl<string | null | undefined>(undefined),
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListExperimentsRequest {
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListExperimentsRequestFormProperties {
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListExperimentsRequestFormGroup() {
		return new FormGroup<ListExperimentsRequestFormProperties>({
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListFeatureGroupsResponse {

		/** Required */
		FeatureGroupSummaries: Array<FeatureGroupSummary>;

		/** Required */
		NextToken: string;
	}
	export interface ListFeatureGroupsResponseFormProperties {

		/** Required */
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListFeatureGroupsResponseFormGroup() {
		return new FormGroup<ListFeatureGroupsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The name, ARN, <code>CreationTime</code>, <code>FeatureGroup</code> values, <code>LastUpdatedTime</code> and <code>EnableOnlineStorage</code> status of a <code>FeatureGroup</code>. */
	export interface FeatureGroupSummary {

		/** Required */
		FeatureGroupName: string;

		/** Required */
		FeatureGroupArn: string;

		/** Required */
		CreationTime: Date;
		FeatureGroupStatus?: FeatureGroupStatus;
		OfflineStoreStatus?: OfflineStoreStatus;
	}

	/** The name, ARN, <code>CreationTime</code>, <code>FeatureGroup</code> values, <code>LastUpdatedTime</code> and <code>EnableOnlineStorage</code> status of a <code>FeatureGroup</code>. */
	export interface FeatureGroupSummaryFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,

		/** Required */
		FeatureGroupArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		FeatureGroupStatus: FormControl<FeatureGroupStatus | null | undefined>,
	}
	export function CreateFeatureGroupSummaryFormGroup() {
		return new FormGroup<FeatureGroupSummaryFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FeatureGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FeatureGroupStatus: new FormControl<FeatureGroupStatus | null | undefined>(undefined),
		});

	}

	export interface ListFeatureGroupsRequest {
		NameContains?: string;
		FeatureGroupStatusEquals?: FeatureGroupStatus;
		OfflineStoreStatusEquals?: OfflineStoreStatusValue;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		SortOrder?: SortOrder;
		SortBy?: FeatureGroupSortBy;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListFeatureGroupsRequestFormProperties {
		NameContains: FormControl<string | null | undefined>,
		FeatureGroupStatusEquals: FormControl<FeatureGroupStatus | null | undefined>,
		OfflineStoreStatusEquals: FormControl<OfflineStoreStatusValue | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		SortBy: FormControl<FeatureGroupSortBy | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListFeatureGroupsRequestFormGroup() {
		return new FormGroup<ListFeatureGroupsRequestFormProperties>({
			NameContains: new FormControl<string | null | undefined>(undefined),
			FeatureGroupStatusEquals: new FormControl<FeatureGroupStatus | null | undefined>(undefined),
			OfflineStoreStatusEquals: new FormControl<OfflineStoreStatusValue | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			SortBy: new FormControl<FeatureGroupSortBy | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum FeatureGroupSortBy { Name = 'Name', FeatureGroupStatus = 'FeatureGroupStatus', OfflineStoreStatus = 'OfflineStoreStatus', CreationTime = 'CreationTime' }

	export interface ListFlowDefinitionsResponse {

		/** Required */
		FlowDefinitionSummaries: Array<FlowDefinitionSummary>;
		NextToken?: string;
	}
	export interface ListFlowDefinitionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListFlowDefinitionsResponseFormGroup() {
		return new FormGroup<ListFlowDefinitionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains summary information about the flow definition. */
	export interface FlowDefinitionSummary {

		/** Required */
		FlowDefinitionName: string;

		/** Required */
		FlowDefinitionArn: string;

		/** Required */
		FlowDefinitionStatus: FlowDefinitionStatus;

		/** Required */
		CreationTime: Date;
		FailureReason?: string;
	}

	/** Contains summary information about the flow definition. */
	export interface FlowDefinitionSummaryFormProperties {

		/** Required */
		FlowDefinitionName: FormControl<string | null | undefined>,

		/** Required */
		FlowDefinitionArn: FormControl<string | null | undefined>,

		/** Required */
		FlowDefinitionStatus: FormControl<FlowDefinitionStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateFlowDefinitionSummaryFormGroup() {
		return new FormGroup<FlowDefinitionSummaryFormProperties>({
			FlowDefinitionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FlowDefinitionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FlowDefinitionStatus: new FormControl<FlowDefinitionStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListFlowDefinitionsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListFlowDefinitionsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListFlowDefinitionsRequestFormGroup() {
		return new FormGroup<ListFlowDefinitionsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListHubContentVersionsResponse {

		/** Required */
		HubContentSummaries: Array<HubContentInfo>;
		NextToken?: string;
	}
	export interface ListHubContentVersionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHubContentVersionsResponseFormGroup() {
		return new FormGroup<ListHubContentVersionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about hub content. */
	export interface HubContentInfo {

		/** Required */
		HubContentName: string;

		/** Required */
		HubContentArn: string;

		/** Required */
		HubContentVersion: string;

		/** Required */
		HubContentType: HubContentType;

		/** Required */
		DocumentSchemaVersion: string;
		HubContentDisplayName?: string;
		HubContentDescription?: string;
		HubContentSearchKeywords?: Array<string>;

		/** Required */
		HubContentStatus: HubContentStatus;

		/** Required */
		CreationTime: Date;
	}

	/** Information about hub content. */
	export interface HubContentInfoFormProperties {

		/** Required */
		HubContentName: FormControl<string | null | undefined>,

		/** Required */
		HubContentArn: FormControl<string | null | undefined>,

		/** Required */
		HubContentVersion: FormControl<string | null | undefined>,

		/** Required */
		HubContentType: FormControl<HubContentType | null | undefined>,

		/** Required */
		DocumentSchemaVersion: FormControl<string | null | undefined>,
		HubContentDisplayName: FormControl<string | null | undefined>,
		HubContentDescription: FormControl<string | null | undefined>,

		/** Required */
		HubContentStatus: FormControl<HubContentStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateHubContentInfoFormGroup() {
		return new FormGroup<HubContentInfoFormProperties>({
			HubContentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentType: new FormControl<HubContentType | null | undefined>(undefined, [Validators.required]),
			DocumentSchemaVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentDisplayName: new FormControl<string | null | undefined>(undefined),
			HubContentDescription: new FormControl<string | null | undefined>(undefined),
			HubContentStatus: new FormControl<HubContentStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListHubContentVersionsRequest {

		/** Required */
		HubName: string;

		/** Required */
		HubContentType: HubContentType;

		/** Required */
		HubContentName: string;
		MinVersion?: string;
		MaxSchemaVersion?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		SortBy?: HubContentSortBy;
		SortOrder?: SortOrder;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListHubContentVersionsRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubContentType: FormControl<HubContentType | null | undefined>,

		/** Required */
		HubContentName: FormControl<string | null | undefined>,
		MinVersion: FormControl<string | null | undefined>,
		MaxSchemaVersion: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		SortBy: FormControl<HubContentSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHubContentVersionsRequestFormGroup() {
		return new FormGroup<ListHubContentVersionsRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentType: new FormControl<HubContentType | null | undefined>(undefined, [Validators.required]),
			HubContentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MinVersion: new FormControl<string | null | undefined>(undefined),
			MaxSchemaVersion: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<HubContentSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum HubContentSortBy { HubContentName = 'HubContentName', CreationTime = 'CreationTime', HubContentStatus = 'HubContentStatus' }

	export interface ListHubContentsResponse {

		/** Required */
		HubContentSummaries: Array<HubContentInfo>;
		NextToken?: string;
	}
	export interface ListHubContentsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHubContentsResponseFormGroup() {
		return new FormGroup<ListHubContentsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListHubContentsRequest {

		/** Required */
		HubName: string;

		/** Required */
		HubContentType: HubContentType;
		NameContains?: string;
		MaxSchemaVersion?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		SortBy?: HubContentSortBy;
		SortOrder?: SortOrder;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListHubContentsRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubContentType: FormControl<HubContentType | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		MaxSchemaVersion: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		SortBy: FormControl<HubContentSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHubContentsRequestFormGroup() {
		return new FormGroup<ListHubContentsRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubContentType: new FormControl<HubContentType | null | undefined>(undefined, [Validators.required]),
			NameContains: new FormControl<string | null | undefined>(undefined),
			MaxSchemaVersion: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<HubContentSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListHubsResponse {

		/** Required */
		HubSummaries: Array<HubInfo>;
		NextToken?: string;
	}
	export interface ListHubsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHubsResponseFormGroup() {
		return new FormGroup<ListHubsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about a hub. */
	export interface HubInfo {

		/** Required */
		HubName: string;

		/** Required */
		HubArn: string;
		HubDisplayName?: string;
		HubDescription?: string;
		HubSearchKeywords?: Array<string>;

		/** Required */
		HubStatus: HubStatus;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
	}

	/** Information about a hub. */
	export interface HubInfoFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,

		/** Required */
		HubArn: FormControl<string | null | undefined>,
		HubDisplayName: FormControl<string | null | undefined>,
		HubDescription: FormControl<string | null | undefined>,

		/** Required */
		HubStatus: FormControl<HubStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateHubInfoFormGroup() {
		return new FormGroup<HubInfoFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubDisplayName: new FormControl<string | null | undefined>(undefined),
			HubDescription: new FormControl<string | null | undefined>(undefined),
			HubStatus: new FormControl<HubStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListHubsRequest {
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		SortBy?: HubSortBy;
		SortOrder?: SortOrder;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListHubsRequestFormProperties {
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		SortBy: FormControl<HubSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHubsRequestFormGroup() {
		return new FormGroup<ListHubsRequestFormProperties>({
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<HubSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum HubSortBy { HubName = 'HubName', CreationTime = 'CreationTime', HubStatus = 'HubStatus', AccountIdOwner = 'AccountIdOwner' }

	export interface ListHumanTaskUisResponse {

		/** Required */
		HumanTaskUiSummaries: Array<HumanTaskUiSummary>;
		NextToken?: string;
	}
	export interface ListHumanTaskUisResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHumanTaskUisResponseFormGroup() {
		return new FormGroup<ListHumanTaskUisResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Container for human task user interface information. */
	export interface HumanTaskUiSummary {

		/** Required */
		HumanTaskUiName: string;

		/** Required */
		HumanTaskUiArn: string;

		/** Required */
		CreationTime: Date;
	}

	/** Container for human task user interface information. */
	export interface HumanTaskUiSummaryFormProperties {

		/** Required */
		HumanTaskUiName: FormControl<string | null | undefined>,

		/** Required */
		HumanTaskUiArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateHumanTaskUiSummaryFormGroup() {
		return new FormGroup<HumanTaskUiSummaryFormProperties>({
			HumanTaskUiName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HumanTaskUiArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListHumanTaskUisRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListHumanTaskUisRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListHumanTaskUisRequestFormGroup() {
		return new FormGroup<ListHumanTaskUisRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListHyperParameterTuningJobsResponse {

		/** Required */
		HyperParameterTuningJobSummaries: Array<HyperParameterTuningJobSummary>;
		NextToken?: string;
	}
	export interface ListHyperParameterTuningJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListHyperParameterTuningJobsResponseFormGroup() {
		return new FormGroup<ListHyperParameterTuningJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information about a hyperparameter tuning job. */
	export interface HyperParameterTuningJobSummary {

		/** Required */
		HyperParameterTuningJobName: string;

		/** Required */
		HyperParameterTuningJobArn: string;

		/** Required */
		HyperParameterTuningJobStatus: CandidateStatus;

		/** Required */
		Strategy: HyperParameterTuningJobStrategyType;

		/** Required */
		CreationTime: Date;
		HyperParameterTuningEndTime?: Date;
		LastModifiedTime?: Date;

		/** Required */
		TrainingJobStatusCounters: TrainingJobStatusCounters;

		/** Required */
		ObjectiveStatusCounters: ObjectiveStatusCounters;
		ResourceLimits?: ResourceLimits;
	}

	/** Provides summary information about a hyperparameter tuning job. */
	export interface HyperParameterTuningJobSummaryFormProperties {

		/** Required */
		HyperParameterTuningJobName: FormControl<string | null | undefined>,

		/** Required */
		HyperParameterTuningJobArn: FormControl<string | null | undefined>,

		/** Required */
		HyperParameterTuningJobStatus: FormControl<CandidateStatus | null | undefined>,

		/** Required */
		Strategy: FormControl<HyperParameterTuningJobStrategyType | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		HyperParameterTuningEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateHyperParameterTuningJobSummaryFormGroup() {
		return new FormGroup<HyperParameterTuningJobSummaryFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HyperParameterTuningJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HyperParameterTuningJobStatus: new FormControl<CandidateStatus | null | undefined>(undefined, [Validators.required]),
			Strategy: new FormControl<HyperParameterTuningJobStrategyType | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			HyperParameterTuningEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListHyperParameterTuningJobsRequest {
		NextToken?: string;
		MaxResults?: number | null;
		SortBy?: HyperParameterTuningJobSortByOptions;
		SortOrder?: SortOrder;
		NameContains?: string;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		StatusEquals?: CandidateStatus;
	}
	export interface ListHyperParameterTuningJobsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		SortBy: FormControl<HyperParameterTuningJobSortByOptions | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		StatusEquals: FormControl<CandidateStatus | null | undefined>,
	}
	export function CreateListHyperParameterTuningJobsRequestFormGroup() {
		return new FormGroup<ListHyperParameterTuningJobsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			SortBy: new FormControl<HyperParameterTuningJobSortByOptions | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			StatusEquals: new FormControl<CandidateStatus | null | undefined>(undefined),
		});

	}

	export enum HyperParameterTuningJobSortByOptions { Name = 'Name', Status = 'Status', CreationTime = 'CreationTime' }

	export interface ListImageVersionsResponse {
		ImageVersions?: Array<ImageVersion>;
		NextToken?: string;
	}
	export interface ListImageVersionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListImageVersionsResponseFormGroup() {
		return new FormGroup<ListImageVersionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A version of a SageMaker <code>Image</code>. A version represents an existing container image. */
	export interface ImageVersion {

		/** Required */
		CreationTime: Date;
		FailureReason?: string;

		/** Required */
		ImageArn: string;

		/** Required */
		ImageVersionArn: string;

		/** Required */
		ImageVersionStatus: ImageVersionStatus;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		Version: number;
	}

	/** A version of a SageMaker <code>Image</code>. A version represents an existing container image. */
	export interface ImageVersionFormProperties {

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		ImageArn: FormControl<string | null | undefined>,

		/** Required */
		ImageVersionArn: FormControl<string | null | undefined>,

		/** Required */
		ImageVersionStatus: FormControl<ImageVersionStatus | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		Version: FormControl<number | null | undefined>,
	}
	export function CreateImageVersionFormGroup() {
		return new FormGroup<ImageVersionFormProperties>({
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ImageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImageVersionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImageVersionStatus: new FormControl<ImageVersionStatus | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			Version: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListImageVersionsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;

		/** Required */
		ImageName: string;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		MaxResults?: number | null;
		NextToken?: string;
		SortBy?: ImageVersionSortBy;
		SortOrder?: ImageVersionSortOrder;
	}
	export interface ListImageVersionsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<ImageVersionSortBy | null | undefined>,
		SortOrder: FormControl<ImageVersionSortOrder | null | undefined>,
	}
	export function CreateListImageVersionsRequestFormGroup() {
		return new FormGroup<ListImageVersionsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<ImageVersionSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<ImageVersionSortOrder | null | undefined>(undefined),
		});

	}

	export enum ImageVersionSortBy { CREATION_TIME = 'CREATION_TIME', LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME', VERSION = 'VERSION' }

	export enum ImageVersionSortOrder { ASCENDING = 'ASCENDING', DESCENDING = 'DESCENDING' }

	export interface ListImagesResponse {
		Images?: Array<Image>;
		NextToken?: string;
	}
	export interface ListImagesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListImagesResponseFormGroup() {
		return new FormGroup<ListImagesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A SageMaker image. A SageMaker image represents a set of container images that are derived from a common base container image. Each of these container images is represented by a SageMaker <code>ImageVersion</code>. */
	export interface Image {

		/** Required */
		CreationTime: Date;
		Description?: string;
		DisplayName?: string;
		FailureReason?: string;

		/** Required */
		ImageArn: string;

		/** Required */
		ImageName: string;

		/** Required */
		ImageStatus: ImageStatus;

		/** Required */
		LastModifiedTime: Date;
	}

	/** A SageMaker image. A SageMaker image represents a set of container images that are derived from a common base container image. Each of these container images is represented by a SageMaker <code>ImageVersion</code>. */
	export interface ImageFormProperties {

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		Description: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		ImageArn: FormControl<string | null | undefined>,

		/** Required */
		ImageName: FormControl<string | null | undefined>,

		/** Required */
		ImageStatus: FormControl<ImageStatus | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateImageFormGroup() {
		return new FormGroup<ImageFormProperties>({
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ImageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImageStatus: new FormControl<ImageStatus | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListImagesRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		MaxResults?: number | null;
		NameContains?: string;
		NextToken?: string;
		SortBy?: ImageSortBy;
		SortOrder?: ImageVersionSortOrder;
	}
	export interface ListImagesRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<ImageSortBy | null | undefined>,
		SortOrder: FormControl<ImageVersionSortOrder | null | undefined>,
	}
	export function CreateListImagesRequestFormGroup() {
		return new FormGroup<ListImagesRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<ImageSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<ImageVersionSortOrder | null | undefined>(undefined),
		});

	}

	export enum ImageSortBy { CREATION_TIME = 'CREATION_TIME', LAST_MODIFIED_TIME = 'LAST_MODIFIED_TIME', IMAGE_NAME = 'IMAGE_NAME' }

	export interface ListInferenceExperimentsResponse {
		InferenceExperiments?: Array<InferenceExperimentSummary>;
		NextToken?: string;
	}
	export interface ListInferenceExperimentsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListInferenceExperimentsResponseFormGroup() {
		return new FormGroup<ListInferenceExperimentsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Lists a summary of properties of an inference experiment. */
	export interface InferenceExperimentSummary {

		/** Required */
		Name: string;

		/** Required */
		Type: InferenceExperimentType;
		Schedule?: InferenceExperimentSchedule;

		/** Required */
		Status: InferenceExperimentStatus;
		StatusReason?: string;
		Description?: string;

		/** Required */
		CreationTime: Date;
		CompletionTime?: Date;

		/** Required */
		LastModifiedTime: Date;
		RoleArn?: string;
	}

	/** Lists a summary of properties of an inference experiment. */
	export interface InferenceExperimentSummaryFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<InferenceExperimentType | null | undefined>,

		/** Required */
		Status: FormControl<InferenceExperimentStatus | null | undefined>,
		StatusReason: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		CompletionTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateInferenceExperimentSummaryFormGroup() {
		return new FormGroup<InferenceExperimentSummaryFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<InferenceExperimentType | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<InferenceExperimentStatus | null | undefined>(undefined, [Validators.required]),
			StatusReason: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			CompletionTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListInferenceExperimentsRequest {
		NameContains?: string;
		Type?: InferenceExperimentType;
		StatusEquals?: InferenceExperimentStatus;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListInferenceExperimentsRequestFormProperties {
		NameContains: FormControl<string | null | undefined>,
		Type: FormControl<InferenceExperimentType | null | undefined>,
		StatusEquals: FormControl<InferenceExperimentStatus | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListInferenceExperimentsRequestFormGroup() {
		return new FormGroup<ListInferenceExperimentsRequestFormProperties>({
			NameContains: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<InferenceExperimentType | null | undefined>(undefined),
			StatusEquals: new FormControl<InferenceExperimentStatus | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListInferenceRecommendationsJobStepsResponse {
		Steps?: Array<InferenceRecommendationsJobStep>;
		NextToken?: string;
	}
	export interface ListInferenceRecommendationsJobStepsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListInferenceRecommendationsJobStepsResponseFormGroup() {
		return new FormGroup<ListInferenceRecommendationsJobStepsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A returned array object for the <code>Steps</code> response field in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListInferenceRecommendationsJobSteps.html">ListInferenceRecommendationsJobSteps</a> API command. */
	export interface InferenceRecommendationsJobStep {

		/** Required */
		StepType: RecommendationStepType;

		/** Required */
		JobName: string;

		/** Required */
		Status: RecommendationJobStatus;
		InferenceBenchmark?: RecommendationJobInferenceBenchmark;
	}

	/** A returned array object for the <code>Steps</code> response field in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListInferenceRecommendationsJobSteps.html">ListInferenceRecommendationsJobSteps</a> API command. */
	export interface InferenceRecommendationsJobStepFormProperties {

		/** Required */
		StepType: FormControl<RecommendationStepType | null | undefined>,

		/** Required */
		JobName: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<RecommendationJobStatus | null | undefined>,
	}
	export function CreateInferenceRecommendationsJobStepFormGroup() {
		return new FormGroup<InferenceRecommendationsJobStepFormProperties>({
			StepType: new FormControl<RecommendationStepType | null | undefined>(undefined, [Validators.required]),
			JobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<RecommendationJobStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum RecommendationStepType { BENCHMARK = 'BENCHMARK' }


	/** The details for a specific benchmark from an Inference Recommender job. */
	export interface RecommendationJobInferenceBenchmark {

		/** The metrics of recommendations. */
		Metrics?: RecommendationMetrics;

		/** The endpoint configuration made by Inference Recommender during a recommendation job. */
		EndpointConfiguration?: EndpointOutputConfiguration;

		/**
		 * Defines the model configuration. Includes the specification name and environment parameters.
		 * Required
		 */
		ModelConfiguration: ModelConfiguration;
		FailureReason?: string;

		/** The metrics for an existing endpoint compared in an Inference Recommender job. */
		EndpointMetrics?: InferenceMetrics;
		InvocationEndTime?: Date;
		InvocationStartTime?: Date;
	}

	/** The details for a specific benchmark from an Inference Recommender job. */
	export interface RecommendationJobInferenceBenchmarkFormProperties {
		FailureReason: FormControl<string | null | undefined>,
		InvocationEndTime: FormControl<Date | null | undefined>,
		InvocationStartTime: FormControl<Date | null | undefined>,
	}
	export function CreateRecommendationJobInferenceBenchmarkFormGroup() {
		return new FormGroup<RecommendationJobInferenceBenchmarkFormProperties>({
			FailureReason: new FormControl<string | null | undefined>(undefined),
			InvocationEndTime: new FormControl<Date | null | undefined>(undefined),
			InvocationStartTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListInferenceRecommendationsJobStepsRequest {

		/** Required */
		JobName: string;
		Status?: RecommendationJobStatus;
		StepType?: RecommendationStepType;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListInferenceRecommendationsJobStepsRequestFormProperties {

		/** Required */
		JobName: FormControl<string | null | undefined>,
		Status: FormControl<RecommendationJobStatus | null | undefined>,
		StepType: FormControl<RecommendationStepType | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListInferenceRecommendationsJobStepsRequestFormGroup() {
		return new FormGroup<ListInferenceRecommendationsJobStepsRequestFormProperties>({
			JobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<RecommendationJobStatus | null | undefined>(undefined),
			StepType: new FormControl<RecommendationStepType | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListInferenceRecommendationsJobsResponse {

		/** Required */
		InferenceRecommendationsJobs: Array<InferenceRecommendationsJob>;
		NextToken?: string;
	}
	export interface ListInferenceRecommendationsJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListInferenceRecommendationsJobsResponseFormGroup() {
		return new FormGroup<ListInferenceRecommendationsJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that contains a list of recommendation jobs. */
	export interface InferenceRecommendationsJob {

		/** Required */
		JobName: string;

		/** Required */
		JobDescription: string;

		/** Required */
		JobType: RecommendationJobType;

		/** Required */
		JobArn: string;

		/** Required */
		Status: RecommendationJobStatus;

		/** Required */
		CreationTime: Date;
		CompletionTime?: Date;

		/** Required */
		RoleArn: string;

		/** Required */
		LastModifiedTime: Date;
		FailureReason?: string;
		ModelName?: string;
		SamplePayloadUrl?: string;
		ModelPackageVersionArn?: string;
	}

	/** A structure that contains a list of recommendation jobs. */
	export interface InferenceRecommendationsJobFormProperties {

		/** Required */
		JobName: FormControl<string | null | undefined>,

		/** Required */
		JobDescription: FormControl<string | null | undefined>,

		/** Required */
		JobType: FormControl<RecommendationJobType | null | undefined>,

		/** Required */
		JobArn: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<RecommendationJobStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		CompletionTime: FormControl<Date | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ModelName: FormControl<string | null | undefined>,
		SamplePayloadUrl: FormControl<string | null | undefined>,
		ModelPackageVersionArn: FormControl<string | null | undefined>,
	}
	export function CreateInferenceRecommendationsJobFormGroup() {
		return new FormGroup<InferenceRecommendationsJobFormProperties>({
			JobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobDescription: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			JobType: new FormControl<RecommendationJobType | null | undefined>(undefined, [Validators.required]),
			JobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<RecommendationJobStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			CompletionTime: new FormControl<Date | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ModelName: new FormControl<string | null | undefined>(undefined),
			SamplePayloadUrl: new FormControl<string | null | undefined>(undefined),
			ModelPackageVersionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListInferenceRecommendationsJobsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		StatusEquals?: RecommendationJobStatus;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		ModelNameEquals?: string;
		ModelPackageVersionArnEquals?: string;
	}
	export interface ListInferenceRecommendationsJobsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<RecommendationJobStatus | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		ModelNameEquals: FormControl<string | null | undefined>,
		ModelPackageVersionArnEquals: FormControl<string | null | undefined>,
	}
	export function CreateListInferenceRecommendationsJobsRequestFormGroup() {
		return new FormGroup<ListInferenceRecommendationsJobsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<RecommendationJobStatus | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			ModelNameEquals: new FormControl<string | null | undefined>(undefined),
			ModelPackageVersionArnEquals: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListLabelingJobsResponse {
		LabelingJobSummaryList?: Array<LabelingJobSummary>;
		NextToken?: string;
	}
	export interface ListLabelingJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListLabelingJobsResponseFormGroup() {
		return new FormGroup<ListLabelingJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information about a labeling job. */
	export interface LabelingJobSummary {

		/** Required */
		LabelingJobName: string;

		/** Required */
		LabelingJobArn: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		LabelingJobStatus: LabelingJobStatus;

		/** Required */
		LabelCounters: LabelCounters;

		/** Required */
		WorkteamArn: string;

		/** Required */
		PreHumanTaskLambdaArn: string;
		AnnotationConsolidationLambdaArn?: string;
		FailureReason?: string;
		LabelingJobOutput?: LabelingJobOutput;
		InputConfig?: LabelingJobInputConfig;
	}

	/** Provides summary information about a labeling job. */
	export interface LabelingJobSummaryFormProperties {

		/** Required */
		LabelingJobName: FormControl<string | null | undefined>,

		/** Required */
		LabelingJobArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		LabelingJobStatus: FormControl<LabelingJobStatus | null | undefined>,

		/** Required */
		WorkteamArn: FormControl<string | null | undefined>,

		/** Required */
		PreHumanTaskLambdaArn: FormControl<string | null | undefined>,
		AnnotationConsolidationLambdaArn: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateLabelingJobSummaryFormGroup() {
		return new FormGroup<LabelingJobSummaryFormProperties>({
			LabelingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			LabelingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LabelingJobStatus: new FormControl<LabelingJobStatus | null | undefined>(undefined, [Validators.required]),
			WorkteamArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PreHumanTaskLambdaArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AnnotationConsolidationLambdaArn: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListLabelingJobsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		MaxResults?: number | null;
		NextToken?: string;
		NameContains?: string;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		StatusEquals?: LabelingJobStatus;
	}
	export interface ListLabelingJobsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		StatusEquals: FormControl<LabelingJobStatus | null | undefined>,
	}
	export function CreateListLabelingJobsRequestFormGroup() {
		return new FormGroup<ListLabelingJobsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			StatusEquals: new FormControl<LabelingJobStatus | null | undefined>(undefined),
		});

	}

	export interface ListLabelingJobsForWorkteamResponse {

		/** Required */
		LabelingJobSummaryList: Array<LabelingJobForWorkteamSummary>;
		NextToken?: string;
	}
	export interface ListLabelingJobsForWorkteamResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListLabelingJobsForWorkteamResponseFormGroup() {
		return new FormGroup<ListLabelingJobsForWorkteamResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information for a work team. */
	export interface LabelingJobForWorkteamSummary {
		LabelingJobName?: string;

		/** Required */
		JobReferenceCode: string;

		/** Required */
		WorkRequesterAccountId: string;

		/** Required */
		CreationTime: Date;
		LabelCounters?: LabelCountersForWorkteam;
		NumberOfHumanWorkersPerDataObject?: number | null;
	}

	/** Provides summary information for a work team. */
	export interface LabelingJobForWorkteamSummaryFormProperties {
		LabelingJobName: FormControl<string | null | undefined>,

		/** Required */
		JobReferenceCode: FormControl<string | null | undefined>,

		/** Required */
		WorkRequesterAccountId: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		NumberOfHumanWorkersPerDataObject: FormControl<number | null | undefined>,
	}
	export function CreateLabelingJobForWorkteamSummaryFormGroup() {
		return new FormGroup<LabelingJobForWorkteamSummaryFormProperties>({
			LabelingJobName: new FormControl<string | null | undefined>(undefined),
			JobReferenceCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			WorkRequesterAccountId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			NumberOfHumanWorkersPerDataObject: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Provides counts for human-labeled tasks in the labeling job. */
	export interface LabelCountersForWorkteam {
		HumanLabeled?: number | null;
		PendingHuman?: number | null;
		Total?: number | null;
	}

	/** Provides counts for human-labeled tasks in the labeling job. */
	export interface LabelCountersForWorkteamFormProperties {
		HumanLabeled: FormControl<number | null | undefined>,
		PendingHuman: FormControl<number | null | undefined>,
		Total: FormControl<number | null | undefined>,
	}
	export function CreateLabelCountersForWorkteamFormGroup() {
		return new FormGroup<LabelCountersForWorkteamFormProperties>({
			HumanLabeled: new FormControl<number | null | undefined>(undefined),
			PendingHuman: new FormControl<number | null | undefined>(undefined),
			Total: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListLabelingJobsForWorkteamRequest {

		/** Required */
		WorkteamArn: string;
		MaxResults?: number | null;
		NextToken?: string;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		JobReferenceCodeContains?: string;
		SortBy?: AppSortKey;
		SortOrder?: SortOrder;
	}
	export interface ListLabelingJobsForWorkteamRequestFormProperties {

		/** Required */
		WorkteamArn: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		JobReferenceCodeContains: FormControl<string | null | undefined>,
		SortBy: FormControl<AppSortKey | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListLabelingJobsForWorkteamRequestFormGroup() {
		return new FormGroup<ListLabelingJobsForWorkteamRequestFormProperties>({
			WorkteamArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			JobReferenceCodeContains: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<AppSortKey | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListLineageGroupsResponse {
		LineageGroupSummaries?: Array<LineageGroupSummary>;
		NextToken?: string;
	}
	export interface ListLineageGroupsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListLineageGroupsResponseFormGroup() {
		return new FormGroup<ListLineageGroupsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Lists a summary of the properties of a lineage group. A lineage group provides a group of shareable lineage entity resources. */
	export interface LineageGroupSummary {
		LineageGroupArn?: string;
		LineageGroupName?: string;
		DisplayName?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Lists a summary of the properties of a lineage group. A lineage group provides a group of shareable lineage entity resources. */
	export interface LineageGroupSummaryFormProperties {
		LineageGroupArn: FormControl<string | null | undefined>,
		LineageGroupName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateLineageGroupSummaryFormGroup() {
		return new FormGroup<LineageGroupSummaryFormProperties>({
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
			LineageGroupName: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListLineageGroupsRequest {
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListLineageGroupsRequestFormProperties {
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListLineageGroupsRequestFormGroup() {
		return new FormGroup<ListLineageGroupsRequestFormProperties>({
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListModelBiasJobDefinitionsResponse {

		/** Required */
		JobDefinitionSummaries: Array<MonitoringJobDefinitionSummary>;
		NextToken?: string;
	}
	export interface ListModelBiasJobDefinitionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelBiasJobDefinitionsResponseFormGroup() {
		return new FormGroup<ListModelBiasJobDefinitionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListModelBiasJobDefinitionsRequest {
		EndpointName?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
	}
	export interface ListModelBiasJobDefinitionsRequestFormProperties {
		EndpointName: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
	}
	export function CreateListModelBiasJobDefinitionsRequestFormGroup() {
		return new FormGroup<ListModelBiasJobDefinitionsRequestFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListModelCardExportJobsResponse {

		/** Required */
		ModelCardExportJobSummaries: Array<ModelCardExportJobSummary>;
		NextToken?: string;
	}
	export interface ListModelCardExportJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelCardExportJobsResponseFormGroup() {
		return new FormGroup<ListModelCardExportJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The summary of the Amazon SageMaker Model Card export job. */
	export interface ModelCardExportJobSummary {

		/** Required */
		ModelCardExportJobName: string;

		/** Required */
		ModelCardExportJobArn: string;

		/** Required */
		Status: ModelCardExportJobStatus;

		/** Required */
		ModelCardName: string;

		/** Required */
		ModelCardVersion: number;

		/** Required */
		CreatedAt: Date;

		/** Required */
		LastModifiedAt: Date;
	}

	/** The summary of the Amazon SageMaker Model Card export job. */
	export interface ModelCardExportJobSummaryFormProperties {

		/** Required */
		ModelCardExportJobName: FormControl<string | null | undefined>,

		/** Required */
		ModelCardExportJobArn: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<ModelCardExportJobStatus | null | undefined>,

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,

		/** Required */
		ModelCardVersion: FormControl<number | null | undefined>,

		/** Required */
		CreatedAt: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedAt: FormControl<Date | null | undefined>,
	}
	export function CreateModelCardExportJobSummaryFormGroup() {
		return new FormGroup<ModelCardExportJobSummaryFormProperties>({
			ModelCardExportJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardExportJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<ModelCardExportJobStatus | null | undefined>(undefined, [Validators.required]),
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			CreatedAt: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedAt: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListModelCardExportJobsRequest {

		/** Required */
		ModelCardName: string;
		ModelCardVersion?: number | null;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		ModelCardExportJobNameContains?: string;
		StatusEquals?: ModelCardExportJobStatus;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListModelCardExportJobsRequestFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,
		ModelCardVersion: FormControl<number | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		ModelCardExportJobNameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<ModelCardExportJobStatus | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListModelCardExportJobsRequestFormGroup() {
		return new FormGroup<ListModelCardExportJobsRequestFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			ModelCardExportJobNameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<ModelCardExportJobStatus | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListModelCardVersionsResponse {

		/** Required */
		ModelCardVersionSummaryList: Array<ModelCardVersionSummary>;
		NextToken?: string;
	}
	export interface ListModelCardVersionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelCardVersionsResponseFormGroup() {
		return new FormGroup<ListModelCardVersionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of a specific version of the model card. */
	export interface ModelCardVersionSummary {

		/** Required */
		ModelCardName: string;

		/** Required */
		ModelCardArn: string;

		/** Required */
		ModelCardStatus: ModelCardStatus;

		/** Required */
		ModelCardVersion: number;

		/** Required */
		CreationTime: Date;
		LastModifiedTime?: Date;
	}

	/** A summary of a specific version of the model card. */
	export interface ModelCardVersionSummaryFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,

		/** Required */
		ModelCardArn: FormControl<string | null | undefined>,

		/** Required */
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,

		/** Required */
		ModelCardVersion: FormControl<number | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateModelCardVersionSummaryFormGroup() {
		return new FormGroup<ModelCardVersionSummaryFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined, [Validators.required]),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListModelCardVersionsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		MaxResults?: number | null;

		/** Required */
		ModelCardName: string;
		ModelCardStatus?: ModelCardStatus;
		NextToken?: string;
		SortBy?: ModelCardVersionSortBy;
		SortOrder?: SortOrder;
	}
	export interface ListModelCardVersionsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<ModelCardVersionSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListModelCardVersionsRequestFormGroup() {
		return new FormGroup<ListModelCardVersionsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<ModelCardVersionSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum ModelCardVersionSortBy { Version = 'Version' }

	export interface ListModelCardsResponse {

		/** Required */
		ModelCardSummaries: Array<ModelCardSummary>;
		NextToken?: string;
	}
	export interface ListModelCardsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelCardsResponseFormGroup() {
		return new FormGroup<ListModelCardsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of the model card. */
	export interface ModelCardSummary {

		/** Required */
		ModelCardName: string;

		/** Required */
		ModelCardArn: string;

		/** Required */
		ModelCardStatus: ModelCardStatus;

		/** Required */
		CreationTime: Date;
		LastModifiedTime?: Date;
	}

	/** A summary of the model card. */
	export interface ModelCardSummaryFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,

		/** Required */
		ModelCardArn: FormControl<string | null | undefined>,

		/** Required */
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateModelCardSummaryFormGroup() {
		return new FormGroup<ModelCardSummaryFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListModelCardsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		MaxResults?: number | null;
		NameContains?: string;
		ModelCardStatus?: ModelCardStatus;
		NextToken?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
	}
	export interface ListModelCardsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListModelCardsRequestFormGroup() {
		return new FormGroup<ListModelCardsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListModelExplainabilityJobDefinitionsResponse {

		/** Required */
		JobDefinitionSummaries: Array<MonitoringJobDefinitionSummary>;
		NextToken?: string;
	}
	export interface ListModelExplainabilityJobDefinitionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelExplainabilityJobDefinitionsResponseFormGroup() {
		return new FormGroup<ListModelExplainabilityJobDefinitionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListModelExplainabilityJobDefinitionsRequest {
		EndpointName?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
	}
	export interface ListModelExplainabilityJobDefinitionsRequestFormProperties {
		EndpointName: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
	}
	export function CreateListModelExplainabilityJobDefinitionsRequestFormGroup() {
		return new FormGroup<ListModelExplainabilityJobDefinitionsRequestFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListModelMetadataResponse {

		/** Required */
		ModelMetadataSummaries: Array<ModelMetadataSummary>;
		NextToken?: string;
	}
	export interface ListModelMetadataResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelMetadataResponseFormGroup() {
		return new FormGroup<ListModelMetadataResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of the model metadata. */
	export interface ModelMetadataSummary {

		/** Required */
		Domain: string;

		/** Required */
		Framework: string;

		/** Required */
		Task: string;

		/** Required */
		Model: string;

		/** Required */
		FrameworkVersion: string;
	}

	/** A summary of the model metadata. */
	export interface ModelMetadataSummaryFormProperties {

		/** Required */
		Domain: FormControl<string | null | undefined>,

		/** Required */
		Framework: FormControl<string | null | undefined>,

		/** Required */
		Task: FormControl<string | null | undefined>,

		/** Required */
		Model: FormControl<string | null | undefined>,

		/** Required */
		FrameworkVersion: FormControl<string | null | undefined>,
	}
	export function CreateModelMetadataSummaryFormGroup() {
		return new FormGroup<ModelMetadataSummaryFormProperties>({
			Domain: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Framework: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Task: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Model: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FrameworkVersion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListModelMetadataRequest {
		SearchExpression?: ModelMetadataSearchExpression;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListModelMetadataRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListModelMetadataRequestFormGroup() {
		return new FormGroup<ListModelMetadataRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results */
	export interface ModelMetadataSearchExpression {
		Filters?: Array<ModelMetadataFilter>;
	}

	/** One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results */
	export interface ModelMetadataSearchExpressionFormProperties {
	}
	export function CreateModelMetadataSearchExpressionFormGroup() {
		return new FormGroup<ModelMetadataSearchExpressionFormProperties>({
		});

	}


	/** Part of the search expression. You can specify the name and value (domain, task, framework, framework version, task, and model). */
	export interface ModelMetadataFilter {

		/** Required */
		Name: ModelMetadataFilterType;

		/** Required */
		Value: string;
	}

	/** Part of the search expression. You can specify the name and value (domain, task, framework, framework version, task, and model). */
	export interface ModelMetadataFilterFormProperties {

		/** Required */
		Name: FormControl<ModelMetadataFilterType | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateModelMetadataFilterFormGroup() {
		return new FormGroup<ModelMetadataFilterFormProperties>({
			Name: new FormControl<ModelMetadataFilterType | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ModelMetadataFilterType { Domain = 'Domain', Framework = 'Framework', Task = 'Task', FrameworkVersion = 'FrameworkVersion' }

	export interface ListModelPackageGroupsOutput {

		/** Required */
		ModelPackageGroupSummaryList: Array<ModelPackageGroupSummary>;
		NextToken?: string;
	}
	export interface ListModelPackageGroupsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelPackageGroupsOutputFormGroup() {
		return new FormGroup<ListModelPackageGroupsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary information about a model group. */
	export interface ModelPackageGroupSummary {

		/** Required */
		ModelPackageGroupName: string;

		/** Required */
		ModelPackageGroupArn: string;
		ModelPackageGroupDescription?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		ModelPackageGroupStatus: ModelPackageGroupStatus;
	}

	/** Summary information about a model group. */
	export interface ModelPackageGroupSummaryFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,

		/** Required */
		ModelPackageGroupArn: FormControl<string | null | undefined>,
		ModelPackageGroupDescription: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		ModelPackageGroupStatus: FormControl<ModelPackageGroupStatus | null | undefined>,
	}
	export function CreateModelPackageGroupSummaryFormGroup() {
		return new FormGroup<ModelPackageGroupSummaryFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupStatus: new FormControl<ModelPackageGroupStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListModelPackageGroupsInput {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		MaxResults?: number | null;
		NameContains?: string;
		NextToken?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
	}
	export interface ListModelPackageGroupsInputFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListModelPackageGroupsInputFormGroup() {
		return new FormGroup<ListModelPackageGroupsInputFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListModelPackagesOutput {

		/** Required */
		ModelPackageSummaryList: Array<ModelPackageSummary>;
		NextToken?: string;
	}
	export interface ListModelPackagesOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelPackagesOutputFormGroup() {
		return new FormGroup<ListModelPackagesOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information about a model package. */
	export interface ModelPackageSummary {

		/** Required */
		ModelPackageName: string;
		ModelPackageGroupName?: string;
		ModelPackageVersion?: number | null;

		/** Required */
		ModelPackageArn: string;
		ModelPackageDescription?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		ModelPackageStatus: AlgorithmStatus;
		ModelApprovalStatus?: ModelApprovalStatus;
	}

	/** Provides summary information about a model package. */
	export interface ModelPackageSummaryFormProperties {

		/** Required */
		ModelPackageName: FormControl<string | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageVersion: FormControl<number | null | undefined>,

		/** Required */
		ModelPackageArn: FormControl<string | null | undefined>,
		ModelPackageDescription: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		ModelPackageStatus: FormControl<AlgorithmStatus | null | undefined>,
		ModelApprovalStatus: FormControl<ModelApprovalStatus | null | undefined>,
	}
	export function CreateModelPackageSummaryFormGroup() {
		return new FormGroup<ModelPackageSummaryFormProperties>({
			ModelPackageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ModelPackageVersion: new FormControl<number | null | undefined>(undefined),
			ModelPackageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ModelPackageStatus: new FormControl<AlgorithmStatus | null | undefined>(undefined, [Validators.required]),
			ModelApprovalStatus: new FormControl<ModelApprovalStatus | null | undefined>(undefined),
		});

	}

	export interface ListModelPackagesInput {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		MaxResults?: number | null;
		NameContains?: string;
		ModelApprovalStatus?: ModelApprovalStatus;
		ModelPackageGroupName?: string;
		ModelPackageType?: ModelPackageType;
		NextToken?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
	}
	export interface ListModelPackagesInputFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		ModelApprovalStatus: FormControl<ModelApprovalStatus | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageType: FormControl<ModelPackageType | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListModelPackagesInputFormGroup() {
		return new FormGroup<ListModelPackagesInputFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			ModelApprovalStatus: new FormControl<ModelApprovalStatus | null | undefined>(undefined),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ModelPackageType: new FormControl<ModelPackageType | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum ModelPackageType { Versioned = 'Versioned', Unversioned = 'Unversioned', Both = 'Both' }

	export interface ListModelQualityJobDefinitionsResponse {

		/** Required */
		JobDefinitionSummaries: Array<MonitoringJobDefinitionSummary>;
		NextToken?: string;
	}
	export interface ListModelQualityJobDefinitionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelQualityJobDefinitionsResponseFormGroup() {
		return new FormGroup<ListModelQualityJobDefinitionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListModelQualityJobDefinitionsRequest {
		EndpointName?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
	}
	export interface ListModelQualityJobDefinitionsRequestFormProperties {
		EndpointName: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
	}
	export function CreateListModelQualityJobDefinitionsRequestFormGroup() {
		return new FormGroup<ListModelQualityJobDefinitionsRequestFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListModelsOutput {

		/** Required */
		Models: Array<ModelSummary>;
		NextToken?: string;
	}
	export interface ListModelsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListModelsOutputFormGroup() {
		return new FormGroup<ListModelsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information about a model. */
	export interface ModelSummary {

		/** Required */
		ModelName: string;

		/** Required */
		ModelArn: string;

		/** Required */
		CreationTime: Date;
	}

	/** Provides summary information about a model. */
	export interface ModelSummaryFormProperties {

		/** Required */
		ModelName: FormControl<string | null | undefined>,

		/** Required */
		ModelArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateModelSummaryFormGroup() {
		return new FormGroup<ModelSummaryFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListModelsInput {
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
	}
	export interface ListModelsInputFormProperties {
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
	}
	export function CreateListModelsInputFormGroup() {
		return new FormGroup<ListModelsInputFormProperties>({
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListMonitoringAlertHistoryResponse {
		MonitoringAlertHistory?: Array<MonitoringAlertHistorySummary>;
		NextToken?: string;
	}
	export interface ListMonitoringAlertHistoryResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListMonitoringAlertHistoryResponseFormGroup() {
		return new FormGroup<ListMonitoringAlertHistoryResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information of an alert's history. */
	export interface MonitoringAlertHistorySummary {

		/** Required */
		MonitoringScheduleName: string;

		/** Required */
		MonitoringAlertName: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		AlertStatus: MonitoringAlertStatus;
	}

	/** Provides summary information of an alert's history. */
	export interface MonitoringAlertHistorySummaryFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,

		/** Required */
		MonitoringAlertName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		AlertStatus: FormControl<MonitoringAlertStatus | null | undefined>,
	}
	export function CreateMonitoringAlertHistorySummaryFormGroup() {
		return new FormGroup<MonitoringAlertHistorySummaryFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MonitoringAlertName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AlertStatus: new FormControl<MonitoringAlertStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum MonitoringAlertStatus { InAlert = 'InAlert', OK = 'OK' }

	export interface ListMonitoringAlertHistoryRequest {
		MonitoringScheduleName?: string;
		MonitoringAlertName?: string;
		SortBy?: MonitoringAlertHistorySortKey;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		StatusEquals?: MonitoringAlertStatus;
	}
	export interface ListMonitoringAlertHistoryRequestFormProperties {
		MonitoringScheduleName: FormControl<string | null | undefined>,
		MonitoringAlertName: FormControl<string | null | undefined>,
		SortBy: FormControl<MonitoringAlertHistorySortKey | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		StatusEquals: FormControl<MonitoringAlertStatus | null | undefined>,
	}
	export function CreateListMonitoringAlertHistoryRequestFormGroup() {
		return new FormGroup<ListMonitoringAlertHistoryRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined),
			MonitoringAlertName: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<MonitoringAlertHistorySortKey | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			StatusEquals: new FormControl<MonitoringAlertStatus | null | undefined>(undefined),
		});

	}

	export enum MonitoringAlertHistorySortKey { CreationTime = 'CreationTime', Status = 'Status' }

	export interface ListMonitoringAlertsResponse {
		MonitoringAlertSummaries?: Array<MonitoringAlertSummary>;
		NextToken?: string;
	}
	export interface ListMonitoringAlertsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListMonitoringAlertsResponseFormGroup() {
		return new FormGroup<ListMonitoringAlertsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information about a monitor alert. */
	export interface MonitoringAlertSummary {

		/** Required */
		MonitoringAlertName: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		AlertStatus: MonitoringAlertStatus;

		/** Required */
		DatapointsToAlert: number;

		/** Required */
		EvaluationPeriod: number;

		/** Required */
		Actions: MonitoringAlertActions;
	}

	/** Provides summary information about a monitor alert. */
	export interface MonitoringAlertSummaryFormProperties {

		/** Required */
		MonitoringAlertName: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		AlertStatus: FormControl<MonitoringAlertStatus | null | undefined>,

		/** Required */
		DatapointsToAlert: FormControl<number | null | undefined>,

		/** Required */
		EvaluationPeriod: FormControl<number | null | undefined>,
	}
	export function CreateMonitoringAlertSummaryFormGroup() {
		return new FormGroup<MonitoringAlertSummaryFormProperties>({
			MonitoringAlertName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			AlertStatus: new FormControl<MonitoringAlertStatus | null | undefined>(undefined, [Validators.required]),
			DatapointsToAlert: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			EvaluationPeriod: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of alert actions taken in response to an alert going into <code>InAlert</code> status. */
	export interface MonitoringAlertActions {
		ModelDashboardIndicator?: ModelDashboardIndicatorAction;
	}

	/** A list of alert actions taken in response to an alert going into <code>InAlert</code> status. */
	export interface MonitoringAlertActionsFormProperties {
	}
	export function CreateMonitoringAlertActionsFormGroup() {
		return new FormGroup<MonitoringAlertActionsFormProperties>({
		});

	}


	/** An alert action taken to light up an icon on the Amazon SageMaker Model Dashboard when an alert goes into <code>InAlert</code> status. */
	export interface ModelDashboardIndicatorAction {
		Enabled?: boolean | null;
	}

	/** An alert action taken to light up an icon on the Amazon SageMaker Model Dashboard when an alert goes into <code>InAlert</code> status. */
	export interface ModelDashboardIndicatorActionFormProperties {
		Enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateModelDashboardIndicatorActionFormGroup() {
		return new FormGroup<ModelDashboardIndicatorActionFormProperties>({
			Enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ListMonitoringAlertsRequest {

		/** Required */
		MonitoringScheduleName: string;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListMonitoringAlertsRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListMonitoringAlertsRequestFormGroup() {
		return new FormGroup<ListMonitoringAlertsRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListMonitoringExecutionsResponse {

		/** Required */
		MonitoringExecutionSummaries: Array<MonitoringExecutionSummary>;
		NextToken?: string;
	}
	export interface ListMonitoringExecutionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListMonitoringExecutionsResponseFormGroup() {
		return new FormGroup<ListMonitoringExecutionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListMonitoringExecutionsRequest {
		MonitoringScheduleName?: string;
		EndpointName?: string;
		SortBy?: MonitoringExecutionSortKey;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		ScheduledTimeBefore?: Date;
		ScheduledTimeAfter?: Date;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		StatusEquals?: ExecutionStatus;
		MonitoringJobDefinitionName?: string;
		MonitoringTypeEquals?: MonitoringType;
	}
	export interface ListMonitoringExecutionsRequestFormProperties {
		MonitoringScheduleName: FormControl<string | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
		SortBy: FormControl<MonitoringExecutionSortKey | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		ScheduledTimeBefore: FormControl<Date | null | undefined>,
		ScheduledTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		StatusEquals: FormControl<ExecutionStatus | null | undefined>,
		MonitoringJobDefinitionName: FormControl<string | null | undefined>,
		MonitoringTypeEquals: FormControl<MonitoringType | null | undefined>,
	}
	export function CreateListMonitoringExecutionsRequestFormGroup() {
		return new FormGroup<ListMonitoringExecutionsRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined),
			EndpointName: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<MonitoringExecutionSortKey | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			ScheduledTimeBefore: new FormControl<Date | null | undefined>(undefined),
			ScheduledTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			StatusEquals: new FormControl<ExecutionStatus | null | undefined>(undefined),
			MonitoringJobDefinitionName: new FormControl<string | null | undefined>(undefined),
			MonitoringTypeEquals: new FormControl<MonitoringType | null | undefined>(undefined),
		});

	}

	export enum MonitoringExecutionSortKey { CreationTime = 'CreationTime', ScheduledTime = 'ScheduledTime', Status = 'Status' }

	export interface ListMonitoringSchedulesResponse {

		/** Required */
		MonitoringScheduleSummaries: Array<MonitoringScheduleSummary>;
		NextToken?: string;
	}
	export interface ListMonitoringSchedulesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListMonitoringSchedulesResponseFormGroup() {
		return new FormGroup<ListMonitoringSchedulesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summarizes the monitoring schedule. */
	export interface MonitoringScheduleSummary {

		/** Required */
		MonitoringScheduleName: string;

		/** Required */
		MonitoringScheduleArn: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		MonitoringScheduleStatus: ScheduleStatus;
		EndpointName?: string;
		MonitoringJobDefinitionName?: string;
		MonitoringType?: MonitoringType;
	}

	/** Summarizes the monitoring schedule. */
	export interface MonitoringScheduleSummaryFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,

		/** Required */
		MonitoringScheduleArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		MonitoringScheduleStatus: FormControl<ScheduleStatus | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
		MonitoringJobDefinitionName: FormControl<string | null | undefined>,
		MonitoringType: FormControl<MonitoringType | null | undefined>,
	}
	export function CreateMonitoringScheduleSummaryFormGroup() {
		return new FormGroup<MonitoringScheduleSummaryFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			MonitoringScheduleStatus: new FormControl<ScheduleStatus | null | undefined>(undefined, [Validators.required]),
			EndpointName: new FormControl<string | null | undefined>(undefined),
			MonitoringJobDefinitionName: new FormControl<string | null | undefined>(undefined),
			MonitoringType: new FormControl<MonitoringType | null | undefined>(undefined),
		});

	}

	export interface ListMonitoringSchedulesRequest {
		EndpointName?: string;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		StatusEquals?: ScheduleStatus;
		MonitoringJobDefinitionName?: string;
		MonitoringTypeEquals?: MonitoringType;
	}
	export interface ListMonitoringSchedulesRequestFormProperties {
		EndpointName: FormControl<string | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		StatusEquals: FormControl<ScheduleStatus | null | undefined>,
		MonitoringJobDefinitionName: FormControl<string | null | undefined>,
		MonitoringTypeEquals: FormControl<MonitoringType | null | undefined>,
	}
	export function CreateListMonitoringSchedulesRequestFormGroup() {
		return new FormGroup<ListMonitoringSchedulesRequestFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			StatusEquals: new FormControl<ScheduleStatus | null | undefined>(undefined),
			MonitoringJobDefinitionName: new FormControl<string | null | undefined>(undefined),
			MonitoringTypeEquals: new FormControl<MonitoringType | null | undefined>(undefined),
		});

	}

	export interface ListNotebookInstanceLifecycleConfigsOutput {
		NextToken?: string;
		NotebookInstanceLifecycleConfigs?: Array<NotebookInstanceLifecycleConfigSummary>;
	}
	export interface ListNotebookInstanceLifecycleConfigsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListNotebookInstanceLifecycleConfigsOutputFormGroup() {
		return new FormGroup<ListNotebookInstanceLifecycleConfigsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides a summary of a notebook instance lifecycle configuration. */
	export interface NotebookInstanceLifecycleConfigSummary {

		/** Required */
		NotebookInstanceLifecycleConfigName: string;

		/** Required */
		NotebookInstanceLifecycleConfigArn: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** Provides a summary of a notebook instance lifecycle configuration. */
	export interface NotebookInstanceLifecycleConfigSummaryFormProperties {

		/** Required */
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,

		/** Required */
		NotebookInstanceLifecycleConfigArn: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateNotebookInstanceLifecycleConfigSummaryFormGroup() {
		return new FormGroup<NotebookInstanceLifecycleConfigSummaryFormProperties>({
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NotebookInstanceLifecycleConfigArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListNotebookInstanceLifecycleConfigsInput {
		NextToken?: string;
		MaxResults?: number | null;
		SortBy?: CodeRepositorySortBy;
		SortOrder?: SortOrder;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
	}
	export interface ListNotebookInstanceLifecycleConfigsInputFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		SortBy: FormControl<CodeRepositorySortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
	}
	export function CreateListNotebookInstanceLifecycleConfigsInputFormGroup() {
		return new FormGroup<ListNotebookInstanceLifecycleConfigsInputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			SortBy: new FormControl<CodeRepositorySortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListNotebookInstancesOutput {
		NextToken?: string;
		NotebookInstances?: Array<NotebookInstanceSummary>;
	}
	export interface ListNotebookInstancesOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListNotebookInstancesOutputFormGroup() {
		return new FormGroup<ListNotebookInstancesOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information for an SageMaker notebook instance. */
	export interface NotebookInstanceSummary {

		/** Required */
		NotebookInstanceName: string;

		/** Required */
		NotebookInstanceArn: string;
		NotebookInstanceStatus?: NotebookInstanceStatus;
		Url?: string;
		InstanceType?: InstanceType;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		NotebookInstanceLifecycleConfigName?: string;
		DefaultCodeRepository?: string;
		AdditionalCodeRepositories?: Array<string>;
	}

	/** Provides summary information for an SageMaker notebook instance. */
	export interface NotebookInstanceSummaryFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,

		/** Required */
		NotebookInstanceArn: FormControl<string | null | undefined>,
		NotebookInstanceStatus: FormControl<NotebookInstanceStatus | null | undefined>,
		Url: FormControl<string | null | undefined>,
		InstanceType: FormControl<InstanceType | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,
		DefaultCodeRepository: FormControl<string | null | undefined>,
	}
	export function CreateNotebookInstanceSummaryFormGroup() {
		return new FormGroup<NotebookInstanceSummaryFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NotebookInstanceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NotebookInstanceStatus: new FormControl<NotebookInstanceStatus | null | undefined>(undefined),
			Url: new FormControl<string | null | undefined>(undefined),
			InstanceType: new FormControl<InstanceType | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined),
			DefaultCodeRepository: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListNotebookInstancesInput {
		NextToken?: string;
		MaxResults?: number | null;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NameContains?: string;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		StatusEquals?: NotebookInstanceStatus;
		NotebookInstanceLifecycleConfigNameContains?: string;
		DefaultCodeRepositoryContains?: string;
		AdditionalCodeRepositoryEquals?: string;
	}
	export interface ListNotebookInstancesInputFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		StatusEquals: FormControl<NotebookInstanceStatus | null | undefined>,
		NotebookInstanceLifecycleConfigNameContains: FormControl<string | null | undefined>,
		DefaultCodeRepositoryContains: FormControl<string | null | undefined>,
		AdditionalCodeRepositoryEquals: FormControl<string | null | undefined>,
	}
	export function CreateListNotebookInstancesInputFormGroup() {
		return new FormGroup<ListNotebookInstancesInputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			StatusEquals: new FormControl<NotebookInstanceStatus | null | undefined>(undefined),
			NotebookInstanceLifecycleConfigNameContains: new FormControl<string | null | undefined>(undefined),
			DefaultCodeRepositoryContains: new FormControl<string | null | undefined>(undefined),
			AdditionalCodeRepositoryEquals: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListPipelineExecutionStepsResponse {
		PipelineExecutionSteps?: Array<PipelineExecutionStep>;
		NextToken?: string;
	}
	export interface ListPipelineExecutionStepsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListPipelineExecutionStepsResponseFormGroup() {
		return new FormGroup<ListPipelineExecutionStepsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An execution of a step in a pipeline. */
	export interface PipelineExecutionStep {
		StepName?: string;
		StepDisplayName?: string;
		StepDescription?: string;
		StartTime?: Date;
		EndTime?: Date;
		StepStatus?: StepStatus;
		CacheHitResult?: CacheHitResult;
		AttemptCount?: number | null;
		FailureReason?: string;
		Metadata?: PipelineExecutionStepMetadata;
		SelectiveExecutionResult?: SelectiveExecutionResult;
	}

	/** An execution of a step in a pipeline. */
	export interface PipelineExecutionStepFormProperties {
		StepName: FormControl<string | null | undefined>,
		StepDisplayName: FormControl<string | null | undefined>,
		StepDescription: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
		StepStatus: FormControl<StepStatus | null | undefined>,
		AttemptCount: FormControl<number | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreatePipelineExecutionStepFormGroup() {
		return new FormGroup<PipelineExecutionStepFormProperties>({
			StepName: new FormControl<string | null | undefined>(undefined),
			StepDisplayName: new FormControl<string | null | undefined>(undefined),
			StepDescription: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			StepStatus: new FormControl<StepStatus | null | undefined>(undefined),
			AttemptCount: new FormControl<number | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum StepStatus { Starting = 'Starting', Executing = 'Executing', Stopping = 'Stopping', Stopped = 'Stopped', Failed = 'Failed', Succeeded = 'Succeeded' }


	/** Details on the cache hit of a pipeline execution step. */
	export interface CacheHitResult {
		SourcePipelineExecutionArn?: string;
	}

	/** Details on the cache hit of a pipeline execution step. */
	export interface CacheHitResultFormProperties {
		SourcePipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateCacheHitResultFormGroup() {
		return new FormGroup<CacheHitResultFormProperties>({
			SourcePipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a step execution. */
	export interface PipelineExecutionStepMetadata {
		TrainingJob?: TrainingJobStepMetadata;
		ProcessingJob?: ProcessingJobStepMetadata;
		TransformJob?: TransformJobStepMetadata;
		TuningJob?: TuningJobStepMetaData;
		Model?: ModelStepMetadata;
		RegisterModel?: RegisterModelStepMetadata;
		Condition?: ConditionStepMetadata;
		Callback?: CallbackStepMetadata;
		Lambda?: LambdaStepMetadata;
		QualityCheck?: QualityCheckStepMetadata;
		ClarifyCheck?: ClarifyCheckStepMetadata;
		EMR?: EMRStepMetadata;
		Fail?: FailStepMetadata;
		AutoMLJob?: AutoMLJobStepMetadata;
	}

	/** Metadata for a step execution. */
	export interface PipelineExecutionStepMetadataFormProperties {
	}
	export function CreatePipelineExecutionStepMetadataFormGroup() {
		return new FormGroup<PipelineExecutionStepMetadataFormProperties>({
		});

	}


	/** Metadata for a training job step. */
	export interface TrainingJobStepMetadata {
		Arn?: string;
	}

	/** Metadata for a training job step. */
	export interface TrainingJobStepMetadataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateTrainingJobStepMetadataFormGroup() {
		return new FormGroup<TrainingJobStepMetadataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a processing job step. */
	export interface ProcessingJobStepMetadata {
		Arn?: string;
	}

	/** Metadata for a processing job step. */
	export interface ProcessingJobStepMetadataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateProcessingJobStepMetadataFormGroup() {
		return new FormGroup<ProcessingJobStepMetadataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a transform job step. */
	export interface TransformJobStepMetadata {
		Arn?: string;
	}

	/** Metadata for a transform job step. */
	export interface TransformJobStepMetadataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateTransformJobStepMetadataFormGroup() {
		return new FormGroup<TransformJobStepMetadataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a tuning step. */
	export interface TuningJobStepMetaData {
		Arn?: string;
	}

	/** Metadata for a tuning step. */
	export interface TuningJobStepMetaDataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateTuningJobStepMetaDataFormGroup() {
		return new FormGroup<TuningJobStepMetaDataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for Model steps. */
	export interface ModelStepMetadata {
		Arn?: string;
	}

	/** Metadata for Model steps. */
	export interface ModelStepMetadataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateModelStepMetadataFormGroup() {
		return new FormGroup<ModelStepMetadataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a register model job step. */
	export interface RegisterModelStepMetadata {
		Arn?: string;
	}

	/** Metadata for a register model job step. */
	export interface RegisterModelStepMetadataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateRegisterModelStepMetadataFormGroup() {
		return new FormGroup<RegisterModelStepMetadataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for a Condition step. */
	export interface ConditionStepMetadata {
		Outcome?: ConditionOutcome;
	}

	/** Metadata for a Condition step. */
	export interface ConditionStepMetadataFormProperties {
		Outcome: FormControl<ConditionOutcome | null | undefined>,
	}
	export function CreateConditionStepMetadataFormGroup() {
		return new FormGroup<ConditionStepMetadataFormProperties>({
			Outcome: new FormControl<ConditionOutcome | null | undefined>(undefined),
		});

	}

	export enum ConditionOutcome { True = 'True', False = 'False' }


	/** Metadata about a callback step. */
	export interface CallbackStepMetadata {
		CallbackToken?: string;
		SqsQueueUrl?: string;
		OutputParameters?: Array<OutputParameter>;
	}

	/** Metadata about a callback step. */
	export interface CallbackStepMetadataFormProperties {
		CallbackToken: FormControl<string | null | undefined>,
		SqsQueueUrl: FormControl<string | null | undefined>,
	}
	export function CreateCallbackStepMetadataFormGroup() {
		return new FormGroup<CallbackStepMetadataFormProperties>({
			CallbackToken: new FormControl<string | null | undefined>(undefined),
			SqsQueueUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An output parameter of a pipeline step. */
	export interface OutputParameter {

		/** Required */
		Name: string;

		/** Required */
		Value: string;
	}

	/** An output parameter of a pipeline step. */
	export interface OutputParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateOutputParameterFormGroup() {
		return new FormGroup<OutputParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Metadata for a Lambda step. */
	export interface LambdaStepMetadata {
		Arn?: string;
		OutputParameters?: Array<OutputParameter>;
	}

	/** Metadata for a Lambda step. */
	export interface LambdaStepMetadataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateLambdaStepMetadataFormGroup() {
		return new FormGroup<LambdaStepMetadataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Container for the metadata for a Quality check step. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check">QualityCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.  */
	export interface QualityCheckStepMetadata {
		CheckType?: string;
		BaselineUsedForDriftCheckStatistics?: string;
		BaselineUsedForDriftCheckConstraints?: string;
		CalculatedBaselineStatistics?: string;
		CalculatedBaselineConstraints?: string;
		ModelPackageGroupName?: string;
		ViolationReport?: string;
		CheckJobArn?: string;
		SkipCheck?: boolean | null;
		RegisterNewBaseline?: boolean | null;
	}

	/** Container for the metadata for a Quality check step. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check">QualityCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.  */
	export interface QualityCheckStepMetadataFormProperties {
		CheckType: FormControl<string | null | undefined>,
		BaselineUsedForDriftCheckStatistics: FormControl<string | null | undefined>,
		BaselineUsedForDriftCheckConstraints: FormControl<string | null | undefined>,
		CalculatedBaselineStatistics: FormControl<string | null | undefined>,
		CalculatedBaselineConstraints: FormControl<string | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ViolationReport: FormControl<string | null | undefined>,
		CheckJobArn: FormControl<string | null | undefined>,
		SkipCheck: FormControl<boolean | null | undefined>,
		RegisterNewBaseline: FormControl<boolean | null | undefined>,
	}
	export function CreateQualityCheckStepMetadataFormGroup() {
		return new FormGroup<QualityCheckStepMetadataFormProperties>({
			CheckType: new FormControl<string | null | undefined>(undefined),
			BaselineUsedForDriftCheckStatistics: new FormControl<string | null | undefined>(undefined),
			BaselineUsedForDriftCheckConstraints: new FormControl<string | null | undefined>(undefined),
			CalculatedBaselineStatistics: new FormControl<string | null | undefined>(undefined),
			CalculatedBaselineConstraints: new FormControl<string | null | undefined>(undefined),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ViolationReport: new FormControl<string | null | undefined>(undefined),
			CheckJobArn: new FormControl<string | null | undefined>(undefined),
			SkipCheck: new FormControl<boolean | null | undefined>(undefined),
			RegisterNewBaseline: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The container for the metadata for the ClarifyCheck step. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check">ClarifyCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.  */
	export interface ClarifyCheckStepMetadata {
		CheckType?: string;
		BaselineUsedForDriftCheckConstraints?: string;
		CalculatedBaselineConstraints?: string;
		ModelPackageGroupName?: string;
		ViolationReport?: string;
		CheckJobArn?: string;
		SkipCheck?: boolean | null;
		RegisterNewBaseline?: boolean | null;
	}

	/** The container for the metadata for the ClarifyCheck step. For more information, see the topic on <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check">ClarifyCheck step</a> in the <i>Amazon SageMaker Developer Guide</i>.  */
	export interface ClarifyCheckStepMetadataFormProperties {
		CheckType: FormControl<string | null | undefined>,
		BaselineUsedForDriftCheckConstraints: FormControl<string | null | undefined>,
		CalculatedBaselineConstraints: FormControl<string | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ViolationReport: FormControl<string | null | undefined>,
		CheckJobArn: FormControl<string | null | undefined>,
		SkipCheck: FormControl<boolean | null | undefined>,
		RegisterNewBaseline: FormControl<boolean | null | undefined>,
	}
	export function CreateClarifyCheckStepMetadataFormGroup() {
		return new FormGroup<ClarifyCheckStepMetadataFormProperties>({
			CheckType: new FormControl<string | null | undefined>(undefined),
			BaselineUsedForDriftCheckConstraints: new FormControl<string | null | undefined>(undefined),
			CalculatedBaselineConstraints: new FormControl<string | null | undefined>(undefined),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ViolationReport: new FormControl<string | null | undefined>(undefined),
			CheckJobArn: new FormControl<string | null | undefined>(undefined),
			SkipCheck: new FormControl<boolean | null | undefined>(undefined),
			RegisterNewBaseline: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The configurations and outcomes of an Amazon EMR step execution. */
	export interface EMRStepMetadata {
		ClusterId?: string;
		StepId?: string;
		StepName?: string;
		LogFilePath?: string;
	}

	/** The configurations and outcomes of an Amazon EMR step execution. */
	export interface EMRStepMetadataFormProperties {
		ClusterId: FormControl<string | null | undefined>,
		StepId: FormControl<string | null | undefined>,
		StepName: FormControl<string | null | undefined>,
		LogFilePath: FormControl<string | null | undefined>,
	}
	export function CreateEMRStepMetadataFormGroup() {
		return new FormGroup<EMRStepMetadataFormProperties>({
			ClusterId: new FormControl<string | null | undefined>(undefined),
			StepId: new FormControl<string | null | undefined>(undefined),
			StepName: new FormControl<string | null | undefined>(undefined),
			LogFilePath: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The container for the metadata for Fail step. */
	export interface FailStepMetadata {
		ErrorMessage?: string;
	}

	/** The container for the metadata for Fail step. */
	export interface FailStepMetadataFormProperties {
		ErrorMessage: FormControl<string | null | undefined>,
	}
	export function CreateFailStepMetadataFormGroup() {
		return new FormGroup<FailStepMetadataFormProperties>({
			ErrorMessage: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata for an AutoML job step. */
	export interface AutoMLJobStepMetadata {
		Arn?: string;
	}

	/** Metadata for an AutoML job step. */
	export interface AutoMLJobStepMetadataFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAutoMLJobStepMetadataFormGroup() {
		return new FormGroup<AutoMLJobStepMetadataFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The ARN from an execution of the current pipeline. */
	export interface SelectiveExecutionResult {
		SourcePipelineExecutionArn?: string;
	}

	/** The ARN from an execution of the current pipeline. */
	export interface SelectiveExecutionResultFormProperties {
		SourcePipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateSelectiveExecutionResultFormGroup() {
		return new FormGroup<SelectiveExecutionResultFormProperties>({
			SourcePipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListPipelineExecutionStepsRequest {
		PipelineExecutionArn?: string;
		NextToken?: string;
		MaxResults?: number | null;
		SortOrder?: SortOrder;
	}
	export interface ListPipelineExecutionStepsRequestFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListPipelineExecutionStepsRequestFormGroup() {
		return new FormGroup<ListPipelineExecutionStepsRequestFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListPipelineExecutionsResponse {
		PipelineExecutionSummaries?: Array<PipelineExecutionSummary>;
		NextToken?: string;
	}
	export interface ListPipelineExecutionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListPipelineExecutionsResponseFormGroup() {
		return new FormGroup<ListPipelineExecutionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A pipeline execution summary. */
	export interface PipelineExecutionSummary {
		PipelineExecutionArn?: string;
		StartTime?: Date;
		PipelineExecutionStatus?: PipelineExecutionStatus;
		PipelineExecutionDescription?: string;
		PipelineExecutionDisplayName?: string;
		PipelineExecutionFailureReason?: string;
	}

	/** A pipeline execution summary. */
	export interface PipelineExecutionSummaryFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
		PipelineExecutionStatus: FormControl<PipelineExecutionStatus | null | undefined>,
		PipelineExecutionDescription: FormControl<string | null | undefined>,
		PipelineExecutionDisplayName: FormControl<string | null | undefined>,
		PipelineExecutionFailureReason: FormControl<string | null | undefined>,
	}
	export function CreatePipelineExecutionSummaryFormGroup() {
		return new FormGroup<PipelineExecutionSummaryFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
			PipelineExecutionStatus: new FormControl<PipelineExecutionStatus | null | undefined>(undefined),
			PipelineExecutionDescription: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionFailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListPipelineExecutionsRequest {

		/** Required */
		PipelineName: string;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortPipelineExecutionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListPipelineExecutionsRequestFormProperties {

		/** Required */
		PipelineName: FormControl<string | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortPipelineExecutionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListPipelineExecutionsRequestFormGroup() {
		return new FormGroup<ListPipelineExecutionsRequestFormProperties>({
			PipelineName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortPipelineExecutionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum SortPipelineExecutionsBy { CreationTime = 'CreationTime', PipelineExecutionArn = 'PipelineExecutionArn' }

	export interface ListPipelineParametersForExecutionResponse {
		PipelineParameters?: Array<Parameter>;
		NextToken?: string;
	}
	export interface ListPipelineParametersForExecutionResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListPipelineParametersForExecutionResponseFormGroup() {
		return new FormGroup<ListPipelineParametersForExecutionResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Assigns a value to a named Pipeline parameter. */
	export interface Parameter {

		/** Required */
		Name: string;

		/** Required */
		Value: string;
	}

	/** Assigns a value to a named Pipeline parameter. */
	export interface ParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateParameterFormGroup() {
		return new FormGroup<ParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListPipelineParametersForExecutionRequest {

		/** Required */
		PipelineExecutionArn: string;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListPipelineParametersForExecutionRequestFormProperties {

		/** Required */
		PipelineExecutionArn: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListPipelineParametersForExecutionRequestFormGroup() {
		return new FormGroup<ListPipelineParametersForExecutionRequestFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListPipelinesResponse {
		PipelineSummaries?: Array<PipelineSummary>;
		NextToken?: string;
	}
	export interface ListPipelinesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListPipelinesResponseFormGroup() {
		return new FormGroup<ListPipelinesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of a pipeline. */
	export interface PipelineSummary {
		PipelineArn?: string;
		PipelineName?: string;
		PipelineDisplayName?: string;
		PipelineDescription?: string;
		RoleArn?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		LastExecutionTime?: Date;
	}

	/** A summary of a pipeline. */
	export interface PipelineSummaryFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
		PipelineName: FormControl<string | null | undefined>,
		PipelineDisplayName: FormControl<string | null | undefined>,
		PipelineDescription: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LastExecutionTime: FormControl<Date | null | undefined>,
	}
	export function CreatePipelineSummaryFormGroup() {
		return new FormGroup<PipelineSummaryFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
			PipelineName: new FormControl<string | null | undefined>(undefined),
			PipelineDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineDescription: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LastExecutionTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListPipelinesRequest {
		PipelineNamePrefix?: string;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListPipelinesRequestFormProperties {
		PipelineNamePrefix: FormControl<string | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListPipelinesRequestFormGroup() {
		return new FormGroup<ListPipelinesRequestFormProperties>({
			PipelineNamePrefix: new FormControl<string | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListProcessingJobsResponse {

		/** Required */
		ProcessingJobSummaries: Array<ProcessingJobSummary>;
		NextToken?: string;
	}
	export interface ListProcessingJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListProcessingJobsResponseFormGroup() {
		return new FormGroup<ListProcessingJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary of information about a processing job. */
	export interface ProcessingJobSummary {

		/** Required */
		ProcessingJobName: string;

		/** Required */
		ProcessingJobArn: string;

		/** Required */
		CreationTime: Date;
		ProcessingEndTime?: Date;
		LastModifiedTime?: Date;

		/** Required */
		ProcessingJobStatus: TrialComponentPrimaryStatus;
		FailureReason?: string;
		ExitMessage?: string;
	}

	/** Summary of information about a processing job. */
	export interface ProcessingJobSummaryFormProperties {

		/** Required */
		ProcessingJobName: FormControl<string | null | undefined>,

		/** Required */
		ProcessingJobArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		ProcessingEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		ProcessingJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ExitMessage: FormControl<string | null | undefined>,
	}
	export function CreateProcessingJobSummaryFormGroup() {
		return new FormGroup<ProcessingJobSummaryFormProperties>({
			ProcessingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProcessingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ProcessingEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			ProcessingJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ExitMessage: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListProcessingJobsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		StatusEquals?: TrialComponentPrimaryStatus;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListProcessingJobsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListProcessingJobsRequestFormGroup() {
		return new FormGroup<ListProcessingJobsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListProjectsOutput {

		/** Required */
		ProjectSummaryList: Array<ProjectSummary>;
		NextToken?: string;
	}
	export interface ListProjectsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListProjectsOutputFormGroup() {
		return new FormGroup<ListProjectsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information about a project. */
	export interface ProjectSummary {

		/** Required */
		ProjectName: string;
		ProjectDescription?: string;

		/** Required */
		ProjectArn: string;

		/** Required */
		ProjectId: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		ProjectStatus: ProjectStatus;
	}

	/** Information about a project. */
	export interface ProjectSummaryFormProperties {

		/** Required */
		ProjectName: FormControl<string | null | undefined>,
		ProjectDescription: FormControl<string | null | undefined>,

		/** Required */
		ProjectArn: FormControl<string | null | undefined>,

		/** Required */
		ProjectId: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		ProjectStatus: FormControl<ProjectStatus | null | undefined>,
	}
	export function CreateProjectSummaryFormGroup() {
		return new FormGroup<ProjectSummaryFormProperties>({
			ProjectName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectDescription: new FormControl<string | null | undefined>(undefined),
			ProjectArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ProjectStatus: new FormControl<ProjectStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListProjectsInput {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		MaxResults?: number | null;
		NameContains?: string;
		NextToken?: string;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
	}
	export interface ListProjectsInputFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListProjectsInputFormGroup() {
		return new FormGroup<ListProjectsInputFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListResourceCatalogsResponse {
		ResourceCatalogs?: Array<ResourceCatalog>;
		NextToken?: string;
	}
	export interface ListResourceCatalogsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListResourceCatalogsResponseFormGroup() {
		return new FormGroup<ListResourceCatalogsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/**  A resource catalog containing all of the resources of a specific resource type within a resource owner account. For an example on sharing the Amazon SageMaker Feature Store <code>DefaultFeatureGroupCatalog</code>, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html">Share Amazon SageMaker Catalog resource type</a> in the Amazon SageMaker Developer Guide.  */
	export interface ResourceCatalog {

		/** Required */
		ResourceCatalogArn: string;

		/** Required */
		ResourceCatalogName: string;

		/** Required */
		Description: string;

		/** Required */
		CreationTime: Date;
	}

	/**  A resource catalog containing all of the resources of a specific resource type within a resource owner account. For an example on sharing the Amazon SageMaker Feature Store <code>DefaultFeatureGroupCatalog</code>, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html">Share Amazon SageMaker Catalog resource type</a> in the Amazon SageMaker Developer Guide.  */
	export interface ResourceCatalogFormProperties {

		/** Required */
		ResourceCatalogArn: FormControl<string | null | undefined>,

		/** Required */
		ResourceCatalogName: FormControl<string | null | undefined>,

		/** Required */
		Description: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateResourceCatalogFormGroup() {
		return new FormGroup<ResourceCatalogFormProperties>({
			ResourceCatalogArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ResourceCatalogName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListResourceCatalogsRequest {
		NameContains?: string;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		SortOrder?: SortOrder;
		SortBy?: AppSortKey;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListResourceCatalogsRequestFormProperties {
		NameContains: FormControl<string | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		SortBy: FormControl<AppSortKey | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListResourceCatalogsRequestFormGroup() {
		return new FormGroup<ListResourceCatalogsRequestFormProperties>({
			NameContains: new FormControl<string | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			SortBy: new FormControl<AppSortKey | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListSpacesResponse {
		Spaces?: Array<SpaceDetails>;
		NextToken?: string;
	}
	export interface ListSpacesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListSpacesResponseFormGroup() {
		return new FormGroup<ListSpacesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The space's details. */
	export interface SpaceDetails {
		DomainId?: string;
		SpaceName?: string;
		Status?: DomainStatus;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** The space's details. */
	export interface SpaceDetailsFormProperties {
		DomainId: FormControl<string | null | undefined>,
		SpaceName: FormControl<string | null | undefined>,
		Status: FormControl<DomainStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateSpaceDetailsFormGroup() {
		return new FormGroup<SpaceDetailsFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined),
			SpaceName: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<DomainStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListSpacesRequest {
		NextToken?: string;
		MaxResults?: number | null;
		SortOrder?: SortOrder;
		SortBy?: SpaceSortKey;
		DomainIdEquals?: string;
		SpaceNameContains?: string;
	}
	export interface ListSpacesRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		SortBy: FormControl<SpaceSortKey | null | undefined>,
		DomainIdEquals: FormControl<string | null | undefined>,
		SpaceNameContains: FormControl<string | null | undefined>,
	}
	export function CreateListSpacesRequestFormGroup() {
		return new FormGroup<ListSpacesRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			SortBy: new FormControl<SpaceSortKey | null | undefined>(undefined),
			DomainIdEquals: new FormControl<string | null | undefined>(undefined),
			SpaceNameContains: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SpaceSortKey { CreationTime = 'CreationTime', LastModifiedTime = 'LastModifiedTime' }

	export interface ListStageDevicesResponse {

		/** Required */
		DeviceDeploymentSummaries: Array<DeviceDeploymentSummary>;
		NextToken?: string;
	}
	export interface ListStageDevicesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListStageDevicesResponseFormGroup() {
		return new FormGroup<ListStageDevicesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains information summarizing device details and deployment status. */
	export interface DeviceDeploymentSummary {

		/** Required */
		EdgeDeploymentPlanArn: string;

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		StageName: string;
		DeployedStageName?: string;
		DeviceFleetName?: string;

		/** Required */
		DeviceName: string;

		/** Required */
		DeviceArn: string;
		DeviceDeploymentStatus?: DeviceDeploymentStatus;
		DeviceDeploymentStatusMessage?: string;
		Description?: string;
		DeploymentStartTime?: Date;
	}

	/** Contains information summarizing device details and deployment status. */
	export interface DeviceDeploymentSummaryFormProperties {

		/** Required */
		EdgeDeploymentPlanArn: FormControl<string | null | undefined>,

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,

		/** Required */
		StageName: FormControl<string | null | undefined>,
		DeployedStageName: FormControl<string | null | undefined>,
		DeviceFleetName: FormControl<string | null | undefined>,

		/** Required */
		DeviceName: FormControl<string | null | undefined>,

		/** Required */
		DeviceArn: FormControl<string | null | undefined>,
		DeviceDeploymentStatus: FormControl<DeviceDeploymentStatus | null | undefined>,
		DeviceDeploymentStatusMessage: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		DeploymentStartTime: FormControl<Date | null | undefined>,
	}
	export function CreateDeviceDeploymentSummaryFormGroup() {
		return new FormGroup<DeviceDeploymentSummaryFormProperties>({
			EdgeDeploymentPlanArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeployedStageName: new FormControl<string | null | undefined>(undefined),
			DeviceFleetName: new FormControl<string | null | undefined>(undefined),
			DeviceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DeviceDeploymentStatus: new FormControl<DeviceDeploymentStatus | null | undefined>(undefined),
			DeviceDeploymentStatusMessage: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			DeploymentStartTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum DeviceDeploymentStatus { READYTODEPLOY = 'READYTODEPLOY', INPROGRESS = 'INPROGRESS', DEPLOYED = 'DEPLOYED', FAILED = 'FAILED', STOPPING = 'STOPPING', STOPPED = 'STOPPED' }

	export interface ListStageDevicesRequest {
		NextToken?: string;
		MaxResults?: number | null;

		/** Required */
		EdgeDeploymentPlanName: string;
		ExcludeDevicesDeployedInOtherStage?: boolean | null;

		/** Required */
		StageName: string;
	}
	export interface ListStageDevicesRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,
		ExcludeDevicesDeployedInOtherStage: FormControl<boolean | null | undefined>,

		/** Required */
		StageName: FormControl<string | null | undefined>,
	}
	export function CreateListStageDevicesRequestFormGroup() {
		return new FormGroup<ListStageDevicesRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ExcludeDevicesDeployedInOtherStage: new FormControl<boolean | null | undefined>(undefined),
			StageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListStudioLifecycleConfigsResponse {
		NextToken?: string;
		StudioLifecycleConfigs?: Array<StudioLifecycleConfigDetails>;
	}
	export interface ListStudioLifecycleConfigsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListStudioLifecycleConfigsResponseFormGroup() {
		return new FormGroup<ListStudioLifecycleConfigsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details of the Studio Lifecycle Configuration. */
	export interface StudioLifecycleConfigDetails {
		StudioLifecycleConfigArn?: string;
		StudioLifecycleConfigName?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		StudioLifecycleConfigAppType?: StudioLifecycleConfigAppType;
	}

	/** Details of the Studio Lifecycle Configuration. */
	export interface StudioLifecycleConfigDetailsFormProperties {
		StudioLifecycleConfigArn: FormControl<string | null | undefined>,
		StudioLifecycleConfigName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		StudioLifecycleConfigAppType: FormControl<StudioLifecycleConfigAppType | null | undefined>,
	}
	export function CreateStudioLifecycleConfigDetailsFormGroup() {
		return new FormGroup<StudioLifecycleConfigDetailsFormProperties>({
			StudioLifecycleConfigArn: new FormControl<string | null | undefined>(undefined),
			StudioLifecycleConfigName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			StudioLifecycleConfigAppType: new FormControl<StudioLifecycleConfigAppType | null | undefined>(undefined),
		});

	}

	export interface ListStudioLifecycleConfigsRequest {
		MaxResults?: number | null;
		NextToken?: string;
		NameContains?: string;
		AppTypeEquals?: StudioLifecycleConfigAppType;
		CreationTimeBefore?: Date;
		CreationTimeAfter?: Date;
		ModifiedTimeBefore?: Date;
		ModifiedTimeAfter?: Date;
		SortBy?: AppImageConfigSortKey;
		SortOrder?: SortOrder;
	}
	export interface ListStudioLifecycleConfigsRequestFormProperties {
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		AppTypeEquals: FormControl<StudioLifecycleConfigAppType | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		ModifiedTimeBefore: FormControl<Date | null | undefined>,
		ModifiedTimeAfter: FormControl<Date | null | undefined>,
		SortBy: FormControl<AppImageConfigSortKey | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListStudioLifecycleConfigsRequestFormGroup() {
		return new FormGroup<ListStudioLifecycleConfigsRequestFormProperties>({
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			AppTypeEquals: new FormControl<StudioLifecycleConfigAppType | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			ModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			ModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<AppImageConfigSortKey | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export interface ListSubscribedWorkteamsResponse {

		/** Required */
		SubscribedWorkteams: Array<SubscribedWorkteam>;
		NextToken?: string;
	}
	export interface ListSubscribedWorkteamsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListSubscribedWorkteamsResponseFormGroup() {
		return new FormGroup<ListSubscribedWorkteamsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListSubscribedWorkteamsRequest {
		NameContains?: string;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListSubscribedWorkteamsRequestFormProperties {
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListSubscribedWorkteamsRequestFormGroup() {
		return new FormGroup<ListSubscribedWorkteamsRequestFormProperties>({
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListTagsOutput {
		Tags?: Array<Tag>;
		NextToken?: string;
	}
	export interface ListTagsOutputFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTagsOutputFormGroup() {
		return new FormGroup<ListTagsOutputFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTagsInput {

		/** Required */
		ResourceArn: string;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListTagsInputFormProperties {

		/** Required */
		ResourceArn: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListTagsInputFormGroup() {
		return new FormGroup<ListTagsInputFormProperties>({
			ResourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListTrainingJobsResponse {

		/** Required */
		TrainingJobSummaries: Array<TrainingJobSummary>;
		NextToken?: string;
	}
	export interface ListTrainingJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTrainingJobsResponseFormGroup() {
		return new FormGroup<ListTrainingJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides summary information about a training job. */
	export interface TrainingJobSummary {

		/** Required */
		TrainingJobName: string;

		/** Required */
		TrainingJobArn: string;

		/** Required */
		CreationTime: Date;
		TrainingEndTime?: Date;
		LastModifiedTime?: Date;

		/** Required */
		TrainingJobStatus: TrialComponentPrimaryStatus;
		WarmPoolStatus?: WarmPoolStatus;
	}

	/** Provides summary information about a training job. */
	export interface TrainingJobSummaryFormProperties {

		/** Required */
		TrainingJobName: FormControl<string | null | undefined>,

		/** Required */
		TrainingJobArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		TrainingEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		TrainingJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
	}
	export function CreateTrainingJobSummaryFormGroup() {
		return new FormGroup<TrainingJobSummaryFormProperties>({
			TrainingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TrainingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			TrainingEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			TrainingJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ListTrainingJobsRequest {
		NextToken?: string;
		MaxResults?: number | null;
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		StatusEquals?: TrialComponentPrimaryStatus;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		WarmPoolStatusEquals?: WarmPoolResourceStatus;
	}
	export interface ListTrainingJobsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		WarmPoolStatusEquals: FormControl<WarmPoolResourceStatus | null | undefined>,
	}
	export function CreateListTrainingJobsRequestFormGroup() {
		return new FormGroup<ListTrainingJobsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			WarmPoolStatusEquals: new FormControl<WarmPoolResourceStatus | null | undefined>(undefined),
		});

	}

	export interface ListTrainingJobsForHyperParameterTuningJobResponse {

		/** Required */
		TrainingJobSummaries: Array<HyperParameterTrainingJobSummary>;
		NextToken?: string;
	}
	export interface ListTrainingJobsForHyperParameterTuningJobResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTrainingJobsForHyperParameterTuningJobResponseFormGroup() {
		return new FormGroup<ListTrainingJobsForHyperParameterTuningJobResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTrainingJobsForHyperParameterTuningJobRequest {

		/** Required */
		HyperParameterTuningJobName: string;
		NextToken?: string;
		MaxResults?: number | null;
		StatusEquals?: TrialComponentPrimaryStatus;
		SortBy?: TrainingJobSortByOptions;
		SortOrder?: SortOrder;
	}
	export interface ListTrainingJobsForHyperParameterTuningJobRequestFormProperties {

		/** Required */
		HyperParameterTuningJobName: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		StatusEquals: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		SortBy: FormControl<TrainingJobSortByOptions | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
	}
	export function CreateListTrainingJobsForHyperParameterTuningJobRequestFormGroup() {
		return new FormGroup<ListTrainingJobsForHyperParameterTuningJobRequestFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			StatusEquals: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			SortBy: new FormControl<TrainingJobSortByOptions | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
		});

	}

	export enum TrainingJobSortByOptions { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status', FinalObjectiveMetricValue = 'FinalObjectiveMetricValue' }

	export interface ListTransformJobsResponse {

		/** Required */
		TransformJobSummaries: Array<TransformJobSummary>;
		NextToken?: string;
	}
	export interface ListTransformJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTransformJobsResponseFormGroup() {
		return new FormGroup<ListTransformJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Provides a summary of a transform job. Multiple <code>TransformJobSummary</code> objects are returned as a list after in response to a <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTransformJobs.html">ListTransformJobs</a> call. */
	export interface TransformJobSummary {

		/** Required */
		TransformJobName: string;

		/** Required */
		TransformJobArn: string;

		/** Required */
		CreationTime: Date;
		TransformEndTime?: Date;
		LastModifiedTime?: Date;

		/** Required */
		TransformJobStatus: TrialComponentPrimaryStatus;
		FailureReason?: string;
	}

	/** Provides a summary of a transform job. Multiple <code>TransformJobSummary</code> objects are returned as a list after in response to a <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTransformJobs.html">ListTransformJobs</a> call. */
	export interface TransformJobSummaryFormProperties {

		/** Required */
		TransformJobName: FormControl<string | null | undefined>,

		/** Required */
		TransformJobArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,
		TransformEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		TransformJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateTransformJobSummaryFormGroup() {
		return new FormGroup<TransformJobSummaryFormProperties>({
			TransformJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TransformJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			TransformEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			TransformJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTransformJobsRequest {
		CreationTimeAfter?: Date;
		CreationTimeBefore?: Date;
		LastModifiedTimeAfter?: Date;
		LastModifiedTimeBefore?: Date;
		NameContains?: string;
		StatusEquals?: TrialComponentPrimaryStatus;
		SortBy?: AutoMLSortBy;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListTransformJobsRequestFormProperties {
		CreationTimeAfter: FormControl<Date | null | undefined>,
		CreationTimeBefore: FormControl<Date | null | undefined>,
		LastModifiedTimeAfter: FormControl<Date | null | undefined>,
		LastModifiedTimeBefore: FormControl<Date | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		StatusEquals: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		SortBy: FormControl<AutoMLSortBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListTransformJobsRequestFormGroup() {
		return new FormGroup<ListTransformJobsRequestFormProperties>({
			CreationTimeAfter: new FormControl<Date | null | undefined>(undefined),
			CreationTimeBefore: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeAfter: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTimeBefore: new FormControl<Date | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			StatusEquals: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			SortBy: new FormControl<AutoMLSortBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListTrialComponentsResponse {
		TrialComponentSummaries?: Array<TrialComponentSummary>;
		NextToken?: string;
	}
	export interface ListTrialComponentsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTrialComponentsResponseFormGroup() {
		return new FormGroup<ListTrialComponentsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of the properties of a trial component. To get all the properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a> API and provide the <code>TrialComponentName</code>. */
	export interface TrialComponentSummary {
		TrialComponentName?: string;
		TrialComponentArn?: string;
		DisplayName?: string;

		/** The Amazon Resource Name (ARN) and job type of the source of a trial component. */
		TrialComponentSource?: TrialComponentSource;
		Status?: TrialComponentStatus;
		StartTime?: Date;
		EndTime?: Date;
		CreationTime?: Date;
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;
		LastModifiedBy?: UserContext;
	}

	/** A summary of the properties of a trial component. To get all the properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a> API and provide the <code>TrialComponentName</code>. */
	export interface TrialComponentSummaryFormProperties {
		TrialComponentName: FormControl<string | null | undefined>,
		TrialComponentArn: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateTrialComponentSummaryFormGroup() {
		return new FormGroup<TrialComponentSummaryFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined),
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListTrialComponentsRequest {
		ExperimentName?: string;
		TrialName?: string;
		SourceArn?: string;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListTrialComponentsRequestFormProperties {
		ExperimentName: FormControl<string | null | undefined>,
		TrialName: FormControl<string | null | undefined>,
		SourceArn: FormControl<string | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTrialComponentsRequestFormGroup() {
		return new FormGroup<ListTrialComponentsRequestFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			TrialName: new FormControl<string | null | undefined>(undefined),
			SourceArn: new FormControl<string | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTrialsResponse {
		TrialSummaries?: Array<TrialSummary>;
		NextToken?: string;
	}
	export interface ListTrialsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTrialsResponseFormGroup() {
		return new FormGroup<ListTrialsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of the properties of a trial. To get the complete set of properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a> API and provide the <code>TrialName</code>. */
	export interface TrialSummary {
		TrialArn?: string;
		TrialName?: string;
		DisplayName?: string;

		/** The source of the trial. */
		TrialSource?: TrialSource;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** A summary of the properties of a trial. To get the complete set of properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a> API and provide the <code>TrialName</code>. */
	export interface TrialSummaryFormProperties {
		TrialArn: FormControl<string | null | undefined>,
		TrialName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateTrialSummaryFormGroup() {
		return new FormGroup<TrialSummaryFormProperties>({
			TrialArn: new FormControl<string | null | undefined>(undefined),
			TrialName: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListTrialsRequest {
		ExperimentName?: string;
		TrialComponentName?: string;
		CreatedAfter?: Date;
		CreatedBefore?: Date;
		SortBy?: SortActionsBy;
		SortOrder?: SortOrder;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface ListTrialsRequestFormProperties {
		ExperimentName: FormControl<string | null | undefined>,
		TrialComponentName: FormControl<string | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		CreatedBefore: FormControl<Date | null | undefined>,
		SortBy: FormControl<SortActionsBy | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTrialsRequestFormGroup() {
		return new FormGroup<ListTrialsRequestFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			TrialComponentName: new FormControl<string | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			SortBy: new FormControl<SortActionsBy | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListUserProfilesResponse {
		UserProfiles?: Array<UserProfileDetails>;
		NextToken?: string;
	}
	export interface ListUserProfilesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListUserProfilesResponseFormGroup() {
		return new FormGroup<ListUserProfilesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The user profile details. */
	export interface UserProfileDetails {
		DomainId?: string;
		UserProfileName?: string;
		Status?: DomainStatus;
		CreationTime?: Date;
		LastModifiedTime?: Date;
	}

	/** The user profile details. */
	export interface UserProfileDetailsFormProperties {
		DomainId: FormControl<string | null | undefined>,
		UserProfileName: FormControl<string | null | undefined>,
		Status: FormControl<DomainStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateUserProfileDetailsFormGroup() {
		return new FormGroup<UserProfileDetailsFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined),
			UserProfileName: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<DomainStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListUserProfilesRequest {
		NextToken?: string;
		MaxResults?: number | null;
		SortOrder?: SortOrder;
		SortBy?: SpaceSortKey;
		DomainIdEquals?: string;
		UserProfileNameContains?: string;
	}
	export interface ListUserProfilesRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		SortBy: FormControl<SpaceSortKey | null | undefined>,
		DomainIdEquals: FormControl<string | null | undefined>,
		UserProfileNameContains: FormControl<string | null | undefined>,
	}
	export function CreateListUserProfilesRequestFormGroup() {
		return new FormGroup<ListUserProfilesRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			SortBy: new FormControl<SpaceSortKey | null | undefined>(undefined),
			DomainIdEquals: new FormControl<string | null | undefined>(undefined),
			UserProfileNameContains: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListWorkforcesResponse {

		/** Required */
		Workforces: Array<Workforce>;
		NextToken?: string;
	}
	export interface ListWorkforcesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListWorkforcesResponseFormGroup() {
		return new FormGroup<ListWorkforcesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListWorkforcesRequest {
		SortBy?: ListWorkforcesSortByOptions;
		SortOrder?: SortOrder;
		NameContains?: string;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListWorkforcesRequestFormProperties {
		SortBy: FormControl<ListWorkforcesSortByOptions | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListWorkforcesRequestFormGroup() {
		return new FormGroup<ListWorkforcesRequestFormProperties>({
			SortBy: new FormControl<ListWorkforcesSortByOptions | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum ListWorkforcesSortByOptions { Name = 'Name', CreateDate = 'CreateDate' }

	export interface ListWorkteamsResponse {

		/** Required */
		Workteams: Array<Workteam>;
		NextToken?: string;
	}
	export interface ListWorkteamsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListWorkteamsResponseFormGroup() {
		return new FormGroup<ListWorkteamsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListWorkteamsRequest {
		SortBy?: ListWorkforcesSortByOptions;
		SortOrder?: SortOrder;
		NameContains?: string;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface ListWorkteamsRequestFormProperties {
		SortBy: FormControl<ListWorkforcesSortByOptions | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NameContains: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateListWorkteamsRequestFormGroup() {
		return new FormGroup<ListWorkteamsRequestFormProperties>({
			SortBy: new FormControl<ListWorkforcesSortByOptions | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NameContains: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PutModelPackageGroupPolicyOutput {

		/** Required */
		ModelPackageGroupArn: string;
	}
	export interface PutModelPackageGroupPolicyOutputFormProperties {

		/** Required */
		ModelPackageGroupArn: FormControl<string | null | undefined>,
	}
	export function CreatePutModelPackageGroupPolicyOutputFormGroup() {
		return new FormGroup<PutModelPackageGroupPolicyOutputFormProperties>({
			ModelPackageGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface PutModelPackageGroupPolicyInput {

		/** Required */
		ModelPackageGroupName: string;

		/** Required */
		ResourcePolicy: string;
	}
	export interface PutModelPackageGroupPolicyInputFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,

		/** Required */
		ResourcePolicy: FormControl<string | null | undefined>,
	}
	export function CreatePutModelPackageGroupPolicyInputFormGroup() {
		return new FormGroup<PutModelPackageGroupPolicyInputFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ResourcePolicy: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface QueryLineageResponse {
		Vertices?: Array<Vertex>;
		Edges?: Array<Edge>;
		NextToken?: string;
	}
	export interface QueryLineageResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateQueryLineageResponseFormGroup() {
		return new FormGroup<QueryLineageResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A lineage entity connected to the starting entity(ies). */
	export interface Vertex {
		Arn?: string;
		Type?: string;
		LineageType?: LineageType;
	}

	/** A lineage entity connected to the starting entity(ies). */
	export interface VertexFormProperties {
		Arn: FormControl<string | null | undefined>,
		Type: FormControl<string | null | undefined>,
		LineageType: FormControl<LineageType | null | undefined>,
	}
	export function CreateVertexFormGroup() {
		return new FormGroup<VertexFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<string | null | undefined>(undefined),
			LineageType: new FormControl<LineageType | null | undefined>(undefined),
		});

	}

	export enum LineageType { TrialComponent = 'TrialComponent', Artifact = 'Artifact', Context = 'Context', Action = 'Action' }


	/** A directed edge connecting two lineage entities. */
	export interface Edge {
		SourceArn?: string;
		DestinationArn?: string;
		AssociationType?: AssociationEdgeType;
	}

	/** A directed edge connecting two lineage entities. */
	export interface EdgeFormProperties {
		SourceArn: FormControl<string | null | undefined>,
		DestinationArn: FormControl<string | null | undefined>,
		AssociationType: FormControl<AssociationEdgeType | null | undefined>,
	}
	export function CreateEdgeFormGroup() {
		return new FormGroup<EdgeFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined),
			DestinationArn: new FormControl<string | null | undefined>(undefined),
			AssociationType: new FormControl<AssociationEdgeType | null | undefined>(undefined),
		});

	}

	export interface QueryLineageRequest {
		StartArns?: Array<string>;
		Direction?: Direction;
		IncludeEdges?: boolean | null;
		Filters?: QueryFilters;
		MaxDepth?: number | null;
		MaxResults?: number | null;
		NextToken?: string;
	}
	export interface QueryLineageRequestFormProperties {
		Direction: FormControl<Direction | null | undefined>,
		IncludeEdges: FormControl<boolean | null | undefined>,
		MaxDepth: FormControl<number | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateQueryLineageRequestFormGroup() {
		return new FormGroup<QueryLineageRequestFormProperties>({
			Direction: new FormControl<Direction | null | undefined>(undefined),
			IncludeEdges: new FormControl<boolean | null | undefined>(undefined),
			MaxDepth: new FormControl<number | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Direction { Both = 'Both', Ascendants = 'Ascendants', Descendants = 'Descendants' }


	/** A set of filters to narrow the set of lineage entities connected to the <code>StartArn</code>(s) returned by the <code>QueryLineage</code> API action. */
	export interface QueryFilters {
		Types?: Array<string>;
		LineageTypes?: Array<LineageType>;
		CreatedBefore?: Date;
		CreatedAfter?: Date;
		ModifiedBefore?: Date;
		ModifiedAfter?: Date;
		Properties?: QueryProperties;
	}

	/** A set of filters to narrow the set of lineage entities connected to the <code>StartArn</code>(s) returned by the <code>QueryLineage</code> API action. */
	export interface QueryFiltersFormProperties {
		CreatedBefore: FormControl<Date | null | undefined>,
		CreatedAfter: FormControl<Date | null | undefined>,
		ModifiedBefore: FormControl<Date | null | undefined>,
		ModifiedAfter: FormControl<Date | null | undefined>,
	}
	export function CreateQueryFiltersFormGroup() {
		return new FormGroup<QueryFiltersFormProperties>({
			CreatedBefore: new FormControl<Date | null | undefined>(undefined),
			CreatedAfter: new FormControl<Date | null | undefined>(undefined),
			ModifiedBefore: new FormControl<Date | null | undefined>(undefined),
			ModifiedAfter: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface QueryProperties {
	}
	export interface QueryPropertiesFormProperties {
	}
	export function CreateQueryPropertiesFormGroup() {
		return new FormGroup<QueryPropertiesFormProperties>({
		});

	}

	export interface RegisterDevicesRequest {

		/** Required */
		DeviceFleetName: string;

		/** Required */
		Devices: Array<Device>;
		Tags?: Array<Tag>;
	}
	export interface RegisterDevicesRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateRegisterDevicesRequestFormGroup() {
		return new FormGroup<RegisterDevicesRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information of a particular device. */
	export interface Device {

		/** Required */
		DeviceName: string;
		Description?: string;
		IotThingName?: string;
	}

	/** Information of a particular device. */
	export interface DeviceFormProperties {

		/** Required */
		DeviceName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		IotThingName: FormControl<string | null | undefined>,
	}
	export function CreateDeviceFormGroup() {
		return new FormGroup<DeviceFormProperties>({
			DeviceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			IotThingName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RenderUiTemplateResponse {

		/** Required */
		RenderedContent: string;

		/** Required */
		Errors: Array<RenderingError>;
	}
	export interface RenderUiTemplateResponseFormProperties {

		/** Required */
		RenderedContent: FormControl<string | null | undefined>,
	}
	export function CreateRenderUiTemplateResponseFormGroup() {
		return new FormGroup<RenderUiTemplateResponseFormProperties>({
			RenderedContent: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A description of an error that occurred while rendering the template. */
	export interface RenderingError {

		/** Required */
		Code: string;

		/** Required */
		Message: string;
	}

	/** A description of an error that occurred while rendering the template. */
	export interface RenderingErrorFormProperties {

		/** Required */
		Code: FormControl<string | null | undefined>,

		/** Required */
		Message: FormControl<string | null | undefined>,
	}
	export function CreateRenderingErrorFormGroup() {
		return new FormGroup<RenderingErrorFormProperties>({
			Code: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Message: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface RenderUiTemplateRequest {
		UiTemplate?: UiTemplate;

		/** Required */
		Task: RenderableTask;

		/** Required */
		RoleArn: string;
		HumanTaskUiArn?: string;
	}
	export interface RenderUiTemplateRequestFormProperties {

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
		HumanTaskUiArn: FormControl<string | null | undefined>,
	}
	export function CreateRenderUiTemplateRequestFormGroup() {
		return new FormGroup<RenderUiTemplateRequestFormProperties>({
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HumanTaskUiArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Contains input values for a task. */
	export interface RenderableTask {

		/** Required */
		Input: string;
	}

	/** Contains input values for a task. */
	export interface RenderableTaskFormProperties {

		/** Required */
		Input: FormControl<string | null | undefined>,
	}
	export function CreateRenderableTaskFormGroup() {
		return new FormGroup<RenderableTaskFormProperties>({
			Input: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface RetryPipelineExecutionResponse {
		PipelineExecutionArn?: string;
	}
	export interface RetryPipelineExecutionResponseFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateRetryPipelineExecutionResponseFormGroup() {
		return new FormGroup<RetryPipelineExecutionResponseFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RetryPipelineExecutionRequest {

		/** Required */
		PipelineExecutionArn: string;

		/** Required */
		ClientRequestToken: string;
		ParallelismConfiguration?: ParallelismConfiguration;
	}
	export interface RetryPipelineExecutionRequestFormProperties {

		/** Required */
		PipelineExecutionArn: FormControl<string | null | undefined>,

		/** Required */
		ClientRequestToken: FormControl<string | null | undefined>,
	}
	export function CreateRetryPipelineExecutionRequestFormGroup() {
		return new FormGroup<RetryPipelineExecutionRequestFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientRequestToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface SearchResponse {
		Results?: Array<SearchRecord>;
		NextToken?: string;
	}
	export interface SearchResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateSearchResponseFormGroup() {
		return new FormGroup<SearchResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A single resource returned as part of the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API response. */
	export interface SearchRecord {
		TrainingJob?: TrainingJob;
		Experiment?: Experiment;
		Trial?: Trial;
		TrialComponent?: TrialComponent;

		/** A hosted endpoint for real-time inference. */
		Endpoint?: Endpoint;

		/** A versioned model that can be deployed for SageMaker inference. */
		ModelPackage?: ModelPackage;

		/** A group of versioned models in the model registry. */
		ModelPackageGroup?: ModelPackageGroup;

		/** A SageMaker Model Building Pipeline instance. */
		Pipeline?: Pipeline;

		/** An execution of a pipeline. */
		PipelineExecution?: PipelineExecution;

		/** Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features. */
		FeatureGroup?: FeatureGroup;
		Project?: Project;
		FeatureMetadata?: FeatureMetadata;
		HyperParameterTuningJob?: HyperParameterTuningJobSearchEntity;

		/** A model displayed in the Amazon SageMaker Model Dashboard. */
		Model?: ModelDashboardModel;
		ModelCard?: ModelCard;
	}

	/** A single resource returned as part of the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API response. */
	export interface SearchRecordFormProperties {
	}
	export function CreateSearchRecordFormGroup() {
		return new FormGroup<SearchRecordFormProperties>({
		});

	}


	/** Contains information about a training job. */
	export interface TrainingJob {
		TrainingJobName?: string;
		TrainingJobArn?: string;
		TuningJobArn?: string;
		LabelingJobArn?: string;
		AutoMLJobArn?: string;
		ModelArtifacts?: ModelArtifacts;
		TrainingJobStatus?: TrialComponentPrimaryStatus;
		SecondaryStatus?: SecondaryStatus;
		FailureReason?: string;
		HyperParameters?: HyperParameters;
		AlgorithmSpecification?: AlgorithmSpecification;
		RoleArn?: string;
		InputDataConfig?: Array<Channel>;
		OutputDataConfig?: OutputDataConfig;
		ResourceConfig?: ResourceConfig;
		VpcConfig?: VpcConfig;
		StoppingCondition?: StoppingCondition;
		CreationTime?: Date;
		TrainingStartTime?: Date;
		TrainingEndTime?: Date;
		LastModifiedTime?: Date;
		SecondaryStatusTransitions?: Array<SecondaryStatusTransition>;
		FinalMetricDataList?: Array<MetricData>;
		EnableNetworkIsolation?: boolean | null;
		EnableInterContainerTrafficEncryption?: boolean | null;
		EnableManagedSpotTraining?: boolean | null;

		/** Contains information about the output location for managed spot training checkpoint data. */
		CheckpointConfig?: CheckpointConfig;
		TrainingTimeInSeconds?: number | null;
		BillableTimeInSeconds?: number | null;

		/** Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the <code>DebugHookConfig</code> parameter, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html">Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job</a>. */
		DebugHookConfig?: DebugHookConfig;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;
		DebugRuleConfigurations?: Array<DebugRuleConfiguration>;

		/** Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data. */
		TensorBoardOutputConfig?: TensorBoardOutputConfig;
		DebugRuleEvaluationStatuses?: Array<DebugRuleEvaluationStatus>;

		/** Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths. */
		ProfilerConfig?: ProfilerConfig;
		Environment?: TrainingEnvironmentMap;
		RetryStrategy?: RetryStrategy;
		Tags?: Array<Tag>;
	}

	/** Contains information about a training job. */
	export interface TrainingJobFormProperties {
		TrainingJobName: FormControl<string | null | undefined>,
		TrainingJobArn: FormControl<string | null | undefined>,
		TuningJobArn: FormControl<string | null | undefined>,
		LabelingJobArn: FormControl<string | null | undefined>,
		AutoMLJobArn: FormControl<string | null | undefined>,
		TrainingJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		SecondaryStatus: FormControl<SecondaryStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		TrainingStartTime: FormControl<Date | null | undefined>,
		TrainingEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
		EnableInterContainerTrafficEncryption: FormControl<boolean | null | undefined>,
		EnableManagedSpotTraining: FormControl<boolean | null | undefined>,
		TrainingTimeInSeconds: FormControl<number | null | undefined>,
		BillableTimeInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateTrainingJobFormGroup() {
		return new FormGroup<TrainingJobFormProperties>({
			TrainingJobName: new FormControl<string | null | undefined>(undefined),
			TrainingJobArn: new FormControl<string | null | undefined>(undefined),
			TuningJobArn: new FormControl<string | null | undefined>(undefined),
			LabelingJobArn: new FormControl<string | null | undefined>(undefined),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined),
			TrainingJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			SecondaryStatus: new FormControl<SecondaryStatus | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			TrainingStartTime: new FormControl<Date | null | undefined>(undefined),
			TrainingEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
			EnableInterContainerTrafficEncryption: new FormControl<boolean | null | undefined>(undefined),
			EnableManagedSpotTraining: new FormControl<boolean | null | undefined>(undefined),
			TrainingTimeInSeconds: new FormControl<number | null | undefined>(undefined),
			BillableTimeInSeconds: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The properties of an experiment as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface Experiment {
		ExperimentName?: string;
		ExperimentArn?: string;
		DisplayName?: string;

		/** The source of the experiment. */
		Source?: ExperimentSource;
		Description?: string;
		CreationTime?: Date;
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		Tags?: Array<Tag>;
	}

	/** The properties of an experiment as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface ExperimentFormProperties {
		ExperimentName: FormControl<string | null | undefined>,
		ExperimentArn: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateExperimentFormGroup() {
		return new FormGroup<ExperimentFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			ExperimentArn: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The properties of a trial as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface Trial {
		TrialName?: string;
		TrialArn?: string;
		DisplayName?: string;
		ExperimentName?: string;

		/** The source of the trial. */
		Source?: TrialSource;
		CreationTime?: Date;
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		Tags?: Array<Tag>;
		TrialComponentSummaries?: Array<TrialComponentSimpleSummary>;
	}

	/** The properties of a trial as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface TrialFormProperties {
		TrialName: FormControl<string | null | undefined>,
		TrialArn: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		ExperimentName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateTrialFormGroup() {
		return new FormGroup<TrialFormProperties>({
			TrialName: new FormControl<string | null | undefined>(undefined),
			TrialArn: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			ExperimentName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** A short summary of a trial component. */
	export interface TrialComponentSimpleSummary {
		TrialComponentName?: string;
		TrialComponentArn?: string;

		/** The Amazon Resource Name (ARN) and job type of the source of a trial component. */
		TrialComponentSource?: TrialComponentSource;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
	}

	/** A short summary of a trial component. */
	export interface TrialComponentSimpleSummaryFormProperties {
		TrialComponentName: FormControl<string | null | undefined>,
		TrialComponentArn: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
	}
	export function CreateTrialComponentSimpleSummaryFormGroup() {
		return new FormGroup<TrialComponentSimpleSummaryFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined),
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The properties of a trial component as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface TrialComponent {
		TrialComponentName?: string;
		DisplayName?: string;
		TrialComponentArn?: string;
		Source?: TrialComponentSource;

		/** The status of the trial component. */
		Status?: TrialComponentStatus;
		StartTime?: Date;
		EndTime?: Date;
		CreationTime?: Date;
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		Parameters?: TrialComponentParameters;
		InputArtifacts?: TrialComponentArtifacts;
		OutputArtifacts?: TrialComponentArtifacts;
		Metrics?: Array<TrialComponentMetricSummary>;

		/** Metadata properties of the tracking entity, trial, or trial component. */
		MetadataProperties?: MetadataProperties;
		SourceDetail?: TrialComponentSourceDetail;
		LineageGroupArn?: string;
		Tags?: Array<Tag>;
		Parents?: Array<Parent>;
		RunName?: string;
	}

	/** The properties of a trial component as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface TrialComponentFormProperties {
		TrialComponentName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		TrialComponentArn: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LineageGroupArn: FormControl<string | null | undefined>,
		RunName: FormControl<string | null | undefined>,
	}
	export function CreateTrialComponentFormGroup() {
		return new FormGroup<TrialComponentFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
			EndTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LineageGroupArn: new FormControl<string | null | undefined>(undefined),
			RunName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Detailed information about the source of a trial component. Either <code>ProcessingJob</code> or <code>TrainingJob</code> is returned. */
	export interface TrialComponentSourceDetail {
		SourceArn?: string;
		TrainingJob?: TrainingJob;
		ProcessingJob?: ProcessingJob;
		TransformJob?: TransformJob;
	}

	/** Detailed information about the source of a trial component. Either <code>ProcessingJob</code> or <code>TrainingJob</code> is returned. */
	export interface TrialComponentSourceDetailFormProperties {
		SourceArn: FormControl<string | null | undefined>,
	}
	export function CreateTrialComponentSourceDetailFormGroup() {
		return new FormGroup<TrialComponentSourceDetailFormProperties>({
			SourceArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html">Process Data and Evaluate Models</a>. */
	export interface ProcessingJob {
		ProcessingInputs?: Array<ProcessingInput>;

		/** Configuration for uploading output from the processing container. */
		ProcessingOutputConfig?: ProcessingOutputConfig;
		ProcessingJobName?: string;

		/** Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance. */
		ProcessingResources?: ProcessingResources;

		/** Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped. */
		StoppingCondition?: ProcessingStoppingCondition;

		/** Configuration to run a processing job in a specified container image. */
		AppSpecification?: AppSpecification;
		Environment?: ProcessingEnvironmentMap;

		/** Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs. */
		NetworkConfig?: NetworkConfig;
		RoleArn?: string;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;
		ProcessingJobArn?: string;
		ProcessingJobStatus?: TrialComponentPrimaryStatus;
		ExitMessage?: string;
		FailureReason?: string;
		ProcessingEndTime?: Date;
		ProcessingStartTime?: Date;
		LastModifiedTime?: Date;
		CreationTime?: Date;
		MonitoringScheduleArn?: string;
		AutoMLJobArn?: string;
		TrainingJobArn?: string;
		Tags?: Array<Tag>;
	}

	/** An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html">Process Data and Evaluate Models</a>. */
	export interface ProcessingJobFormProperties {
		ProcessingJobName: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		ProcessingJobArn: FormControl<string | null | undefined>,
		ProcessingJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		ExitMessage: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ProcessingEndTime: FormControl<Date | null | undefined>,
		ProcessingStartTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		MonitoringScheduleArn: FormControl<string | null | undefined>,
		AutoMLJobArn: FormControl<string | null | undefined>,
		TrainingJobArn: FormControl<string | null | undefined>,
	}
	export function CreateProcessingJobFormGroup() {
		return new FormGroup<ProcessingJobFormProperties>({
			ProcessingJobName: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			ProcessingJobArn: new FormControl<string | null | undefined>(undefined),
			ProcessingJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			ExitMessage: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ProcessingEndTime: new FormControl<Date | null | undefined>(undefined),
			ProcessingStartTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined),
			TrainingJobArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A batch transform job. For information about SageMaker batch transform, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use Batch Transform</a>. */
	export interface TransformJob {
		TransformJobName?: string;
		TransformJobArn?: string;
		TransformJobStatus?: TrialComponentPrimaryStatus;
		FailureReason?: string;
		ModelName?: string;
		MaxConcurrentTransforms?: number | null;

		/** Configures the timeout and maximum number of retries for processing a transform job invocation. */
		ModelClientConfig?: ModelClientConfig;
		MaxPayloadInMB?: number | null;
		BatchStrategy?: BatchStrategy;
		Environment?: TransformEnvironmentMap;

		/** Describes the input source of a transform job and the way the transform job consumes it. */
		TransformInput?: TransformInput;

		/** Describes the results of a transform job. */
		TransformOutput?: TransformOutput;

		/** Describes the resources, including ML instance types and ML instance count, to use for transform job. */
		TransformResources?: TransformResources;
		CreationTime?: Date;
		TransformStartTime?: Date;
		TransformEndTime?: Date;
		LabelingJobArn?: string;
		AutoMLJobArn?: string;

		/** The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html">Associate Prediction Results with their Corresponding Input Records</a>. */
		DataProcessing?: DataProcessing;

		/** <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li> </ul> */
		ExperimentConfig?: ExperimentConfig;
		Tags?: Array<Tag>;

		/** Configuration to control how SageMaker captures inference data for batch transform jobs. */
		DataCaptureConfig?: BatchDataCaptureConfig;
	}

	/** A batch transform job. For information about SageMaker batch transform, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use Batch Transform</a>. */
	export interface TransformJobFormProperties {
		TransformJobName: FormControl<string | null | undefined>,
		TransformJobArn: FormControl<string | null | undefined>,
		TransformJobStatus: FormControl<TrialComponentPrimaryStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ModelName: FormControl<string | null | undefined>,
		MaxConcurrentTransforms: FormControl<number | null | undefined>,
		MaxPayloadInMB: FormControl<number | null | undefined>,
		BatchStrategy: FormControl<BatchStrategy | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		TransformStartTime: FormControl<Date | null | undefined>,
		TransformEndTime: FormControl<Date | null | undefined>,
		LabelingJobArn: FormControl<string | null | undefined>,
		AutoMLJobArn: FormControl<string | null | undefined>,
	}
	export function CreateTransformJobFormGroup() {
		return new FormGroup<TransformJobFormProperties>({
			TransformJobName: new FormControl<string | null | undefined>(undefined),
			TransformJobArn: new FormControl<string | null | undefined>(undefined),
			TransformJobStatus: new FormControl<TrialComponentPrimaryStatus | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ModelName: new FormControl<string | null | undefined>(undefined),
			MaxConcurrentTransforms: new FormControl<number | null | undefined>(undefined),
			MaxPayloadInMB: new FormControl<number | null | undefined>(undefined),
			BatchStrategy: new FormControl<BatchStrategy | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			TransformStartTime: new FormControl<Date | null | undefined>(undefined),
			TransformEndTime: new FormControl<Date | null | undefined>(undefined),
			LabelingJobArn: new FormControl<string | null | undefined>(undefined),
			AutoMLJobArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The trial that a trial component is associated with and the experiment the trial is part of. A component might not be associated with a trial. A component can be associated with multiple trials. */
	export interface Parent {
		TrialName?: string;
		ExperimentName?: string;
	}

	/** The trial that a trial component is associated with and the experiment the trial is part of. A component might not be associated with a trial. A component can be associated with multiple trials. */
	export interface ParentFormProperties {
		TrialName: FormControl<string | null | undefined>,
		ExperimentName: FormControl<string | null | undefined>,
	}
	export function CreateParentFormGroup() {
		return new FormGroup<ParentFormProperties>({
			TrialName: new FormControl<string | null | undefined>(undefined),
			ExperimentName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A hosted endpoint for real-time inference. */
	export interface Endpoint {

		/** Required */
		EndpointName: string;

		/** Required */
		EndpointArn: string;

		/** Required */
		EndpointConfigName: string;
		ProductionVariants?: Array<ProductionVariantSummary>;

		/** The currently active data capture configuration used by your Endpoint. */
		DataCaptureConfig?: DataCaptureConfigSummary;

		/** Required */
		EndpointStatus: EndpointStatus;
		FailureReason?: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;
		MonitoringSchedules?: Array<MonitoringSchedule>;
		Tags?: Array<Tag>;
		ShadowProductionVariants?: Array<ProductionVariantSummary>;
	}

	/** A hosted endpoint for real-time inference. */
	export interface EndpointFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		EndpointArn: FormControl<string | null | undefined>,

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,

		/** Required */
		EndpointStatus: FormControl<EndpointStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateEndpointFormGroup() {
		return new FormGroup<EndpointFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointStatus: new FormControl<EndpointStatus | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A schedule for a model monitoring job. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>. */
	export interface MonitoringSchedule {
		MonitoringScheduleArn?: string;
		MonitoringScheduleName?: string;
		MonitoringScheduleStatus?: ScheduleStatus;
		MonitoringType?: MonitoringType;
		FailureReason?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;

		/** Configures the monitoring schedule and defines the monitoring job. */
		MonitoringScheduleConfig?: MonitoringScheduleConfig;
		EndpointName?: string;

		/** Summary of information about the last monitoring job to run. */
		LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
		Tags?: Array<Tag>;
	}

	/** A schedule for a model monitoring job. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>. */
	export interface MonitoringScheduleFormProperties {
		MonitoringScheduleArn: FormControl<string | null | undefined>,
		MonitoringScheduleName: FormControl<string | null | undefined>,
		MonitoringScheduleStatus: FormControl<ScheduleStatus | null | undefined>,
		MonitoringType: FormControl<MonitoringType | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateMonitoringScheduleFormGroup() {
		return new FormGroup<MonitoringScheduleFormProperties>({
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined),
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined),
			MonitoringScheduleStatus: new FormControl<ScheduleStatus | null | undefined>(undefined),
			MonitoringType: new FormControl<MonitoringType | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			EndpointName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A versioned model that can be deployed for SageMaker inference. */
	export interface ModelPackage {
		ModelPackageName?: string;
		ModelPackageGroupName?: string;
		ModelPackageVersion?: number | null;
		ModelPackageArn?: string;
		ModelPackageDescription?: string;
		CreationTime?: Date;
		InferenceSpecification?: InferenceSpecification;
		SourceAlgorithmSpecification?: SourceAlgorithmSpecification;
		ValidationSpecification?: ModelPackageValidationSpecification;
		ModelPackageStatus?: AlgorithmStatus;
		ModelPackageStatusDetails?: ModelPackageStatusDetails;
		CertifyForMarketplace?: boolean | null;
		ModelApprovalStatus?: ModelApprovalStatus;
		CreatedBy?: UserContext;
		MetadataProperties?: MetadataProperties;
		ModelMetrics?: ModelMetrics;
		LastModifiedTime?: Date;
		LastModifiedBy?: UserContext;
		ApprovalDescription?: string;
		Domain?: string;
		Task?: string;
		SamplePayloadUrl?: string;
		AdditionalInferenceSpecifications?: Array<AdditionalInferenceSpecificationDefinition>;
		Tags?: Array<Tag>;
		CustomerMetadataProperties?: CustomerMetadataMap;
		DriftCheckBaselines?: DriftCheckBaselines;
	}

	/** A versioned model that can be deployed for SageMaker inference. */
	export interface ModelPackageFormProperties {
		ModelPackageName: FormControl<string | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageVersion: FormControl<number | null | undefined>,
		ModelPackageArn: FormControl<string | null | undefined>,
		ModelPackageDescription: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		ModelPackageStatus: FormControl<AlgorithmStatus | null | undefined>,
		CertifyForMarketplace: FormControl<boolean | null | undefined>,
		ModelApprovalStatus: FormControl<ModelApprovalStatus | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		ApprovalDescription: FormControl<string | null | undefined>,
		Domain: FormControl<string | null | undefined>,
		Task: FormControl<string | null | undefined>,
		SamplePayloadUrl: FormControl<string | null | undefined>,
	}
	export function CreateModelPackageFormGroup() {
		return new FormGroup<ModelPackageFormProperties>({
			ModelPackageName: new FormControl<string | null | undefined>(undefined),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ModelPackageVersion: new FormControl<number | null | undefined>(undefined),
			ModelPackageArn: new FormControl<string | null | undefined>(undefined),
			ModelPackageDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			ModelPackageStatus: new FormControl<AlgorithmStatus | null | undefined>(undefined),
			CertifyForMarketplace: new FormControl<boolean | null | undefined>(undefined),
			ModelApprovalStatus: new FormControl<ModelApprovalStatus | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			ApprovalDescription: new FormControl<string | null | undefined>(undefined),
			Domain: new FormControl<string | null | undefined>(undefined),
			Task: new FormControl<string | null | undefined>(undefined),
			SamplePayloadUrl: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A group of versioned models in the model registry. */
	export interface ModelPackageGroup {
		ModelPackageGroupName?: string;
		ModelPackageGroupArn?: string;
		ModelPackageGroupDescription?: string;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
		ModelPackageGroupStatus?: ModelPackageGroupStatus;
		Tags?: Array<Tag>;
	}

	/** A group of versioned models in the model registry. */
	export interface ModelPackageGroupFormProperties {
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageGroupArn: FormControl<string | null | undefined>,
		ModelPackageGroupDescription: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		ModelPackageGroupStatus: FormControl<ModelPackageGroupStatus | null | undefined>,
	}
	export function CreateModelPackageGroupFormGroup() {
		return new FormGroup<ModelPackageGroupFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
			ModelPackageGroupArn: new FormControl<string | null | undefined>(undefined),
			ModelPackageGroupDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			ModelPackageGroupStatus: new FormControl<ModelPackageGroupStatus | null | undefined>(undefined),
		});

	}


	/** A SageMaker Model Building Pipeline instance. */
	export interface Pipeline {
		PipelineArn?: string;
		PipelineName?: string;
		PipelineDisplayName?: string;
		PipelineDescription?: string;
		RoleArn?: string;
		PipelineStatus?: PipelineStatus;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		LastRunTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		ParallelismConfiguration?: ParallelismConfiguration;
		Tags?: Array<Tag>;
	}

	/** A SageMaker Model Building Pipeline instance. */
	export interface PipelineFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
		PipelineName: FormControl<string | null | undefined>,
		PipelineDisplayName: FormControl<string | null | undefined>,
		PipelineDescription: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		PipelineStatus: FormControl<PipelineStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		LastRunTime: FormControl<Date | null | undefined>,
	}
	export function CreatePipelineFormGroup() {
		return new FormGroup<PipelineFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
			PipelineName: new FormControl<string | null | undefined>(undefined),
			PipelineDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineDescription: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			PipelineStatus: new FormControl<PipelineStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			LastRunTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** An execution of a pipeline. */
	export interface PipelineExecution {
		PipelineArn?: string;
		PipelineExecutionArn?: string;
		PipelineExecutionDisplayName?: string;
		PipelineExecutionStatus?: PipelineExecutionStatus;
		PipelineExecutionDescription?: string;

		/** Specifies the names of the experiment and trial created by a pipeline. */
		PipelineExperimentConfig?: PipelineExperimentConfig;
		FailureReason?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		ParallelismConfiguration?: ParallelismConfiguration;
		PipelineParameters?: Array<Parameter>;
		SelectiveExecutionConfig?: SelectiveExecutionConfig;
	}

	/** An execution of a pipeline. */
	export interface PipelineExecutionFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
		PipelineExecutionArn: FormControl<string | null | undefined>,
		PipelineExecutionDisplayName: FormControl<string | null | undefined>,
		PipelineExecutionStatus: FormControl<PipelineExecutionStatus | null | undefined>,
		PipelineExecutionDescription: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreatePipelineExecutionFormGroup() {
		return new FormGroup<PipelineExecutionFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionStatus: new FormControl<PipelineExecutionStatus | null | undefined>(undefined),
			PipelineExecutionDescription: new FormControl<string | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features. */
	export interface FeatureGroup {
		FeatureGroupArn?: string;
		FeatureGroupName?: string;
		RecordIdentifierFeatureName?: string;
		EventTimeFeatureName?: string;
		FeatureDefinitions?: Array<FeatureDefinition>;
		CreationTime?: Date;
		LastModifiedTime?: Date;

		/** <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag at General Assembly.</p> <p>The default value is <code>False</code>.</p> */
		OnlineStoreConfig?: OnlineStoreConfig;

		/** <p>The configuration of an <code>OfflineStore</code>.</p> <p>Provide an <code>OfflineStoreConfig</code> in a request to <code>CreateFeatureGroup</code> to create an <code>OfflineStore</code>.</p> <p>To encrypt an <code>OfflineStore</code> using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or <code>KMSKeyId</code>, in <code>S3StorageConfig</code>.</p> */
		OfflineStoreConfig?: OfflineStoreConfig;
		RoleArn?: string;
		FeatureGroupStatus?: FeatureGroupStatus;

		/** The status of <code>OfflineStore</code>. */
		OfflineStoreStatus?: OfflineStoreStatus;
		LastUpdateStatus?: LastUpdateStatus;
		FailureReason?: string;
		Description?: string;
		Tags?: Array<Tag>;
	}

	/** Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features. */
	export interface FeatureGroupFormProperties {
		FeatureGroupArn: FormControl<string | null | undefined>,
		FeatureGroupName: FormControl<string | null | undefined>,
		RecordIdentifierFeatureName: FormControl<string | null | undefined>,
		EventTimeFeatureName: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		FeatureGroupStatus: FormControl<FeatureGroupStatus | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateFeatureGroupFormGroup() {
		return new FormGroup<FeatureGroupFormProperties>({
			FeatureGroupArn: new FormControl<string | null | undefined>(undefined),
			FeatureGroupName: new FormControl<string | null | undefined>(undefined),
			RecordIdentifierFeatureName: new FormControl<string | null | undefined>(undefined),
			EventTimeFeatureName: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			FeatureGroupStatus: new FormControl<FeatureGroupStatus | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The properties of a project as returned by the Search API. */
	export interface Project {
		ProjectArn?: string;
		ProjectName?: string;
		ProjectId?: string;
		ProjectDescription?: string;

		/** Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
		ServiceCatalogProvisioningDetails?: ServiceCatalogProvisioningDetails;

		/** Details of a provisioned service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>. */
		ServiceCatalogProvisionedProductDetails?: ServiceCatalogProvisionedProductDetails;
		ProjectStatus?: ProjectStatus;
		CreatedBy?: UserContext;
		CreationTime?: Date;
		Tags?: Array<Tag>;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
	}

	/** The properties of a project as returned by the Search API. */
	export interface ProjectFormProperties {
		ProjectArn: FormControl<string | null | undefined>,
		ProjectName: FormControl<string | null | undefined>,
		ProjectId: FormControl<string | null | undefined>,
		ProjectDescription: FormControl<string | null | undefined>,
		ProjectStatus: FormControl<ProjectStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
	}
	export function CreateProjectFormGroup() {
		return new FormGroup<ProjectFormProperties>({
			ProjectArn: new FormControl<string | null | undefined>(undefined),
			ProjectName: new FormControl<string | null | undefined>(undefined),
			ProjectId: new FormControl<string | null | undefined>(undefined),
			ProjectDescription: new FormControl<string | null | undefined>(undefined),
			ProjectStatus: new FormControl<ProjectStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The metadata for a feature. It can either be metadata that you specify, or metadata that is updated automatically. */
	export interface FeatureMetadata {
		FeatureGroupArn?: string;
		FeatureGroupName?: string;
		FeatureName?: string;
		FeatureType?: FeatureType;
		CreationTime?: Date;
		LastModifiedTime?: Date;
		Description?: string;
		Parameters?: Array<FeatureParameter>;
	}

	/** The metadata for a feature. It can either be metadata that you specify, or metadata that is updated automatically. */
	export interface FeatureMetadataFormProperties {
		FeatureGroupArn: FormControl<string | null | undefined>,
		FeatureGroupName: FormControl<string | null | undefined>,
		FeatureName: FormControl<string | null | undefined>,
		FeatureType: FormControl<FeatureType | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateFeatureMetadataFormGroup() {
		return new FormGroup<FeatureMetadataFormProperties>({
			FeatureGroupArn: new FormControl<string | null | undefined>(undefined),
			FeatureGroupName: new FormControl<string | null | undefined>(undefined),
			FeatureName: new FormControl<string | null | undefined>(undefined),
			FeatureType: new FormControl<FeatureType | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An entity returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html">SearchRecord</a> API containing the properties of a hyperparameter tuning job. */
	export interface HyperParameterTuningJobSearchEntity {
		HyperParameterTuningJobName?: string;
		HyperParameterTuningJobArn?: string;

		/** Configures a hyperparameter tuning job. */
		HyperParameterTuningJobConfig?: HyperParameterTuningJobConfig;

		/** Defines the training jobs launched by a hyperparameter tuning job. */
		TrainingJobDefinition?: HyperParameterTrainingJobDefinition;
		TrainingJobDefinitions?: Array<HyperParameterTrainingJobDefinition>;
		HyperParameterTuningJobStatus?: CandidateStatus;
		CreationTime?: Date;
		HyperParameterTuningEndTime?: Date;
		LastModifiedTime?: Date;

		/** The numbers of training jobs launched by a hyperparameter tuning job, categorized by status. */
		TrainingJobStatusCounters?: TrainingJobStatusCounters;

		/** Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process. */
		ObjectiveStatusCounters?: ObjectiveStatusCounters;

		/** The container for the summary information about a training job. */
		BestTrainingJob?: HyperParameterTrainingJobSummary;

		/** The container for the summary information about a training job. */
		OverallBestTrainingJob?: HyperParameterTrainingJobSummary;

		/** <p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p> <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note> <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p> </note> */
		WarmStartConfig?: HyperParameterTuningJobWarmStartConfig;
		FailureReason?: string;
		Tags?: Array<Tag>;
		TuningJobCompletionDetails?: HyperParameterTuningJobCompletionDetails;
		ConsumedResources?: HyperParameterTuningJobConsumedResources;
	}

	/** An entity returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html">SearchRecord</a> API containing the properties of a hyperparameter tuning job. */
	export interface HyperParameterTuningJobSearchEntityFormProperties {
		HyperParameterTuningJobName: FormControl<string | null | undefined>,
		HyperParameterTuningJobArn: FormControl<string | null | undefined>,
		HyperParameterTuningJobStatus: FormControl<CandidateStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		HyperParameterTuningEndTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
	}
	export function CreateHyperParameterTuningJobSearchEntityFormGroup() {
		return new FormGroup<HyperParameterTuningJobSearchEntityFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined),
			HyperParameterTuningJobArn: new FormControl<string | null | undefined>(undefined),
			HyperParameterTuningJobStatus: new FormControl<CandidateStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			HyperParameterTuningEndTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardModel {
		Model?: Model;
		Endpoints?: Array<ModelDashboardEndpoint>;

		/** A batch transform job. For information about SageMaker batch transform, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Use Batch Transform</a>. */
		LastBatchTransformJob?: TransformJob;
		MonitoringSchedules?: Array<ModelDashboardMonitoringSchedule>;
		ModelCard?: ModelDashboardModelCard;
	}

	/** A model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardModelFormProperties {
	}
	export function CreateModelDashboardModelFormGroup() {
		return new FormGroup<ModelDashboardModelFormProperties>({
		});

	}


	/** The properties of a model as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface Model {
		ModelName?: string;

		/** Describes the container, as part of model definition. */
		PrimaryContainer?: ContainerDefinition;
		Containers?: Array<ContainerDefinition>;

		/** Specifies details about how containers in a multi-container endpoint are run. */
		InferenceExecutionConfig?: InferenceExecutionConfig;
		ExecutionRoleArn?: string;

		/** Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html">Protect Endpoints by Using an Amazon Virtual Private Cloud</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html">Protect Training Jobs by Using an Amazon Virtual Private Cloud</a>. */
		VpcConfig?: VpcConfig;
		CreationTime?: Date;
		ModelArn?: string;
		EnableNetworkIsolation?: boolean | null;
		Tags?: Array<Tag>;
		DeploymentRecommendation?: DeploymentRecommendation;
	}

	/** The properties of a model as returned by the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. */
	export interface ModelFormProperties {
		ModelName: FormControl<string | null | undefined>,
		ExecutionRoleArn: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		ModelArn: FormControl<string | null | undefined>,
		EnableNetworkIsolation: FormControl<boolean | null | undefined>,
	}
	export function CreateModelFormGroup() {
		return new FormGroup<ModelFormProperties>({
			ModelName: new FormControl<string | null | undefined>(undefined),
			ExecutionRoleArn: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			ModelArn: new FormControl<string | null | undefined>(undefined),
			EnableNetworkIsolation: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** An endpoint that hosts a model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardEndpoint {

		/** Required */
		EndpointName: string;

		/** Required */
		EndpointArn: string;

		/** Required */
		CreationTime: Date;

		/** Required */
		LastModifiedTime: Date;

		/** Required */
		EndpointStatus: EndpointStatus;
	}

	/** An endpoint that hosts a model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardEndpointFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		EndpointArn: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		LastModifiedTime: FormControl<Date | null | undefined>,

		/** Required */
		EndpointStatus: FormControl<EndpointStatus | null | undefined>,
	}
	export function CreateModelDashboardEndpointFormGroup() {
		return new FormGroup<ModelDashboardEndpointFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndpointStatus: new FormControl<EndpointStatus | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A monitoring schedule for a model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardMonitoringSchedule {
		MonitoringScheduleArn?: string;
		MonitoringScheduleName?: string;
		MonitoringScheduleStatus?: ScheduleStatus;
		MonitoringType?: MonitoringType;
		FailureReason?: string;
		CreationTime?: Date;
		LastModifiedTime?: Date;

		/** Configures the monitoring schedule and defines the monitoring job. */
		MonitoringScheduleConfig?: MonitoringScheduleConfig;
		EndpointName?: string;
		MonitoringAlertSummaries?: Array<MonitoringAlertSummary>;

		/** Summary of information about the last monitoring job to run. */
		LastMonitoringExecutionSummary?: MonitoringExecutionSummary;
	}

	/** A monitoring schedule for a model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardMonitoringScheduleFormProperties {
		MonitoringScheduleArn: FormControl<string | null | undefined>,
		MonitoringScheduleName: FormControl<string | null | undefined>,
		MonitoringScheduleStatus: FormControl<ScheduleStatus | null | undefined>,
		MonitoringType: FormControl<MonitoringType | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateModelDashboardMonitoringScheduleFormGroup() {
		return new FormGroup<ModelDashboardMonitoringScheduleFormProperties>({
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined),
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined),
			MonitoringScheduleStatus: new FormControl<ScheduleStatus | null | undefined>(undefined),
			MonitoringType: new FormControl<MonitoringType | null | undefined>(undefined),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			EndpointName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The model card for a model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardModelCard {
		ModelCardArn?: string;
		ModelCardName?: string;
		ModelCardVersion?: number | null;
		ModelCardStatus?: ModelCardStatus;
		SecurityConfig?: ModelCardSecurityConfig;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		Tags?: Array<Tag>;
		ModelId?: string;
		RiskRating?: string;
	}

	/** The model card for a model displayed in the Amazon SageMaker Model Dashboard. */
	export interface ModelDashboardModelCardFormProperties {
		ModelCardArn: FormControl<string | null | undefined>,
		ModelCardName: FormControl<string | null | undefined>,
		ModelCardVersion: FormControl<number | null | undefined>,
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		ModelId: FormControl<string | null | undefined>,
		RiskRating: FormControl<string | null | undefined>,
	}
	export function CreateModelDashboardModelCardFormGroup() {
		return new FormGroup<ModelDashboardModelCardFormProperties>({
			ModelCardArn: new FormControl<string | null | undefined>(undefined),
			ModelCardName: new FormControl<string | null | undefined>(undefined),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			ModelId: new FormControl<string | null | undefined>(undefined),
			RiskRating: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An Amazon SageMaker Model Card. */
	export interface ModelCard {
		ModelCardArn?: string;
		ModelCardName?: string;
		ModelCardVersion?: number | null;
		Content?: string;
		ModelCardStatus?: ModelCardStatus;
		SecurityConfig?: ModelCardSecurityConfig;
		CreationTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		CreatedBy?: UserContext;
		LastModifiedTime?: Date;

		/** Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card. */
		LastModifiedBy?: UserContext;
		Tags?: Array<Tag>;
		ModelId?: string;
		RiskRating?: string;
		ModelPackageGroupName?: string;
	}

	/** An Amazon SageMaker Model Card. */
	export interface ModelCardFormProperties {
		ModelCardArn: FormControl<string | null | undefined>,
		ModelCardName: FormControl<string | null | undefined>,
		ModelCardVersion: FormControl<number | null | undefined>,
		Content: FormControl<string | null | undefined>,
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,
		CreationTime: FormControl<Date | null | undefined>,
		LastModifiedTime: FormControl<Date | null | undefined>,
		ModelId: FormControl<string | null | undefined>,
		RiskRating: FormControl<string | null | undefined>,
		ModelPackageGroupName: FormControl<string | null | undefined>,
	}
	export function CreateModelCardFormGroup() {
		return new FormGroup<ModelCardFormProperties>({
			ModelCardArn: new FormControl<string | null | undefined>(undefined),
			ModelCardName: new FormControl<string | null | undefined>(undefined),
			ModelCardVersion: new FormControl<number | null | undefined>(undefined),
			Content: new FormControl<string | null | undefined>(undefined),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined),
			LastModifiedTime: new FormControl<Date | null | undefined>(undefined),
			ModelId: new FormControl<string | null | undefined>(undefined),
			RiskRating: new FormControl<string | null | undefined>(undefined),
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchRequest {

		/** Required */
		Resource: ResourceType;
		SearchExpression?: SearchExpression;
		SortBy?: string;
		SortOrder?: SortOrder;
		NextToken?: string;
		MaxResults?: number | null;
		CrossAccountFilterOption?: CrossAccountFilterOption;
	}
	export interface SearchRequestFormProperties {

		/** Required */
		Resource: FormControl<ResourceType | null | undefined>,
		SortBy: FormControl<string | null | undefined>,
		SortOrder: FormControl<SortOrder | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
		CrossAccountFilterOption: FormControl<CrossAccountFilterOption | null | undefined>,
	}
	export function CreateSearchRequestFormGroup() {
		return new FormGroup<SearchRequestFormProperties>({
			Resource: new FormControl<ResourceType | null | undefined>(undefined, [Validators.required]),
			SortBy: new FormControl<string | null | undefined>(undefined),
			SortOrder: new FormControl<SortOrder | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
			CrossAccountFilterOption: new FormControl<CrossAccountFilterOption | null | undefined>(undefined),
		});

	}


	/** <p>A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A <code>SearchExpression</code> can contain up to twenty elements.</p> <p>A <code>SearchExpression</code> contains the following components:</p> <ul> <li> <p>A list of <code>Filter</code> objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.</p> </li> <li> <p>A list of <code>NestedFilter</code> objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.</p> </li> <li> <p>A list of <code>SearchExpression</code> objects. A search expression object can be nested in a list of search expression objects.</p> </li> <li> <p>A Boolean operator: <code>And</code> or <code>Or</code>.</p> </li> </ul> */
	export interface SearchExpression {
		Filters?: Array<Filter>;
		NestedFilters?: Array<NestedFilters>;
		SubExpressions?: Array<SearchExpression>;
		Operator?: BooleanOperator;
	}

	/** <p>A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A <code>SearchExpression</code> can contain up to twenty elements.</p> <p>A <code>SearchExpression</code> contains the following components:</p> <ul> <li> <p>A list of <code>Filter</code> objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.</p> </li> <li> <p>A list of <code>NestedFilter</code> objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.</p> </li> <li> <p>A list of <code>SearchExpression</code> objects. A search expression object can be nested in a list of search expression objects.</p> </li> <li> <p>A Boolean operator: <code>And</code> or <code>Or</code>.</p> </li> </ul> */
	export interface SearchExpressionFormProperties {
		Operator: FormControl<BooleanOperator | null | undefined>,
	}
	export function CreateSearchExpressionFormGroup() {
		return new FormGroup<SearchExpressionFormProperties>({
			Operator: new FormControl<BooleanOperator | null | undefined>(undefined),
		});

	}


	/** <p>A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.</p> <p>If you specify a <code>Value</code>, but not an <code>Operator</code>, SageMaker uses the equals operator.</p> <p>In search, there are several property types:</p> <dl> <dt>Metrics</dt> <dd> <p>To define a metric filter, enter a value using the form <code>"Metrics.&lt;name&gt;"</code>, where <code>&lt;name&gt;</code> is a metric name. For example, the following filter searches for training jobs with an <code>"accuracy"</code> metric greater than <code>"0.9"</code>:</p> <p> <code>{</code> </p> <p> <code>"Name": "Metrics.accuracy",</code> </p> <p> <code>"Operator": "GreaterThan",</code> </p> <p> <code>"Value": "0.9"</code> </p> <p> <code>}</code> </p> </dd> <dt>HyperParameters</dt> <dd> <p>To define a hyperparameter filter, enter a value with the form <code>"HyperParameters.&lt;name&gt;"</code>. Decimal hyperparameter values are treated as a decimal in a comparison if the specified <code>Value</code> is also a decimal value. If the specified <code>Value</code> is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a <code>"learning_rate"</code> hyperparameter that is less than <code>"0.5"</code>:</p> <p> <code> {</code> </p> <p> <code> "Name": "HyperParameters.learning_rate",</code> </p> <p> <code> "Operator": "LessThan",</code> </p> <p> <code> "Value": "0.5"</code> </p> <p> <code> }</code> </p> </dd> <dt>Tags</dt> <dd> <p>To define a tag filter, enter a value with the form <code>Tags.&lt;key&gt;</code>.</p> </dd> </dl> */
	export interface Filter {

		/** Required */
		Name: string;
		Operator?: Operator;
		Value?: string;
	}

	/** <p>A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.</p> <p>If you specify a <code>Value</code>, but not an <code>Operator</code>, SageMaker uses the equals operator.</p> <p>In search, there are several property types:</p> <dl> <dt>Metrics</dt> <dd> <p>To define a metric filter, enter a value using the form <code>"Metrics.&lt;name&gt;"</code>, where <code>&lt;name&gt;</code> is a metric name. For example, the following filter searches for training jobs with an <code>"accuracy"</code> metric greater than <code>"0.9"</code>:</p> <p> <code>{</code> </p> <p> <code>"Name": "Metrics.accuracy",</code> </p> <p> <code>"Operator": "GreaterThan",</code> </p> <p> <code>"Value": "0.9"</code> </p> <p> <code>}</code> </p> </dd> <dt>HyperParameters</dt> <dd> <p>To define a hyperparameter filter, enter a value with the form <code>"HyperParameters.&lt;name&gt;"</code>. Decimal hyperparameter values are treated as a decimal in a comparison if the specified <code>Value</code> is also a decimal value. If the specified <code>Value</code> is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a <code>"learning_rate"</code> hyperparameter that is less than <code>"0.5"</code>:</p> <p> <code> {</code> </p> <p> <code> "Name": "HyperParameters.learning_rate",</code> </p> <p> <code> "Operator": "LessThan",</code> </p> <p> <code> "Value": "0.5"</code> </p> <p> <code> }</code> </p> </dd> <dt>Tags</dt> <dd> <p>To define a tag filter, enter a value with the form <code>Tags.&lt;key&gt;</code>.</p> </dd> </dl> */
	export interface FilterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		Operator: FormControl<Operator | null | undefined>,
		Value: FormControl<string | null | undefined>,
	}
	export function CreateFilterFormGroup() {
		return new FormGroup<FilterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Operator: new FormControl<Operator | null | undefined>(undefined),
			Value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Operator { Equals = 'Equals', NotEquals = 'NotEquals', GreaterThan = 'GreaterThan', GreaterThanOrEqualTo = 'GreaterThanOrEqualTo', LessThan = 'LessThan', LessThanOrEqualTo = 'LessThanOrEqualTo', Contains = 'Contains', Exists = 'Exists', NotExists = 'NotExists', In = 'In' }


	/** <p>A list of nested <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html">Filter</a> objects. A resource must satisfy the conditions of all filters to be included in the results returned from the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.</p> <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a specific channel name and <code>S3Uri</code> prefix, define the following filters:</p> <ul> <li> <p> <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',</code> </p> </li> <li> <p> <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains", "Value":"mybucket/catdata"}'</code> </p> </li> </ul> */
	export interface NestedFilters {

		/** Required */
		NestedPropertyName: string;

		/** Required */
		Filters: Array<Filter>;
	}

	/** <p>A list of nested <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html">Filter</a> objects. A resource must satisfy the conditions of all filters to be included in the results returned from the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API.</p> <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a specific channel name and <code>S3Uri</code> prefix, define the following filters:</p> <ul> <li> <p> <code>'{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',</code> </p> </li> <li> <p> <code>'{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains", "Value":"mybucket/catdata"}'</code> </p> </li> </ul> */
	export interface NestedFiltersFormProperties {

		/** Required */
		NestedPropertyName: FormControl<string | null | undefined>,
	}
	export function CreateNestedFiltersFormGroup() {
		return new FormGroup<NestedFiltersFormProperties>({
			NestedPropertyName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum BooleanOperator { And = 'And', Or = 'Or' }

	export enum CrossAccountFilterOption { SameAccount = 'SameAccount', CrossAccount = 'CrossAccount' }

	export interface SendPipelineExecutionStepFailureResponse {
		PipelineExecutionArn?: string;
	}
	export interface SendPipelineExecutionStepFailureResponseFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateSendPipelineExecutionStepFailureResponseFormGroup() {
		return new FormGroup<SendPipelineExecutionStepFailureResponseFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SendPipelineExecutionStepFailureRequest {

		/** Required */
		CallbackToken: string;
		FailureReason?: string;
		ClientRequestToken?: string;
	}
	export interface SendPipelineExecutionStepFailureRequestFormProperties {

		/** Required */
		CallbackToken: FormControl<string | null | undefined>,
		FailureReason: FormControl<string | null | undefined>,
		ClientRequestToken: FormControl<string | null | undefined>,
	}
	export function CreateSendPipelineExecutionStepFailureRequestFormGroup() {
		return new FormGroup<SendPipelineExecutionStepFailureRequestFormProperties>({
			CallbackToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FailureReason: new FormControl<string | null | undefined>(undefined),
			ClientRequestToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SendPipelineExecutionStepSuccessResponse {
		PipelineExecutionArn?: string;
	}
	export interface SendPipelineExecutionStepSuccessResponseFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateSendPipelineExecutionStepSuccessResponseFormGroup() {
		return new FormGroup<SendPipelineExecutionStepSuccessResponseFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SendPipelineExecutionStepSuccessRequest {

		/** Required */
		CallbackToken: string;
		OutputParameters?: Array<OutputParameter>;
		ClientRequestToken?: string;
	}
	export interface SendPipelineExecutionStepSuccessRequestFormProperties {

		/** Required */
		CallbackToken: FormControl<string | null | undefined>,
		ClientRequestToken: FormControl<string | null | undefined>,
	}
	export function CreateSendPipelineExecutionStepSuccessRequestFormGroup() {
		return new FormGroup<SendPipelineExecutionStepSuccessRequestFormProperties>({
			CallbackToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientRequestToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface StartEdgeDeploymentStageRequest {

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		StageName: string;
	}
	export interface StartEdgeDeploymentStageRequestFormProperties {

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,

		/** Required */
		StageName: FormControl<string | null | undefined>,
	}
	export function CreateStartEdgeDeploymentStageRequestFormGroup() {
		return new FormGroup<StartEdgeDeploymentStageRequestFormProperties>({
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StartInferenceExperimentResponse {

		/** Required */
		InferenceExperimentArn: string;
	}
	export interface StartInferenceExperimentResponseFormProperties {

		/** Required */
		InferenceExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateStartInferenceExperimentResponseFormGroup() {
		return new FormGroup<StartInferenceExperimentResponseFormProperties>({
			InferenceExperimentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StartInferenceExperimentRequest {

		/** Required */
		Name: string;
	}
	export interface StartInferenceExperimentRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateStartInferenceExperimentRequestFormGroup() {
		return new FormGroup<StartInferenceExperimentRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StartMonitoringScheduleRequest {

		/** Required */
		MonitoringScheduleName: string;
	}
	export interface StartMonitoringScheduleRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,
	}
	export function CreateStartMonitoringScheduleRequestFormGroup() {
		return new FormGroup<StartMonitoringScheduleRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StartNotebookInstanceInput {

		/** Required */
		NotebookInstanceName: string;
	}
	export interface StartNotebookInstanceInputFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,
	}
	export function CreateStartNotebookInstanceInputFormGroup() {
		return new FormGroup<StartNotebookInstanceInputFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StartPipelineExecutionResponse {
		PipelineExecutionArn?: string;
	}
	export interface StartPipelineExecutionResponseFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateStartPipelineExecutionResponseFormGroup() {
		return new FormGroup<StartPipelineExecutionResponseFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface StartPipelineExecutionRequest {

		/** Required */
		PipelineName: string;
		PipelineExecutionDisplayName?: string;
		PipelineParameters?: Array<Parameter>;
		PipelineExecutionDescription?: string;

		/** Required */
		ClientRequestToken: string;
		ParallelismConfiguration?: ParallelismConfiguration;
		SelectiveExecutionConfig?: SelectiveExecutionConfig;
	}
	export interface StartPipelineExecutionRequestFormProperties {

		/** Required */
		PipelineName: FormControl<string | null | undefined>,
		PipelineExecutionDisplayName: FormControl<string | null | undefined>,
		PipelineExecutionDescription: FormControl<string | null | undefined>,

		/** Required */
		ClientRequestToken: FormControl<string | null | undefined>,
	}
	export function CreateStartPipelineExecutionRequestFormGroup() {
		return new FormGroup<StartPipelineExecutionRequestFormProperties>({
			PipelineName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PipelineExecutionDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionDescription: new FormControl<string | null | undefined>(undefined),
			ClientRequestToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopAutoMLJobRequest {

		/** Required */
		AutoMLJobName: string;
	}
	export interface StopAutoMLJobRequestFormProperties {

		/** Required */
		AutoMLJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopAutoMLJobRequestFormGroup() {
		return new FormGroup<StopAutoMLJobRequestFormProperties>({
			AutoMLJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopCompilationJobRequest {

		/** Required */
		CompilationJobName: string;
	}
	export interface StopCompilationJobRequestFormProperties {

		/** Required */
		CompilationJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopCompilationJobRequestFormGroup() {
		return new FormGroup<StopCompilationJobRequestFormProperties>({
			CompilationJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopEdgeDeploymentStageRequest {

		/** Required */
		EdgeDeploymentPlanName: string;

		/** Required */
		StageName: string;
	}
	export interface StopEdgeDeploymentStageRequestFormProperties {

		/** Required */
		EdgeDeploymentPlanName: FormControl<string | null | undefined>,

		/** Required */
		StageName: FormControl<string | null | undefined>,
	}
	export function CreateStopEdgeDeploymentStageRequestFormGroup() {
		return new FormGroup<StopEdgeDeploymentStageRequestFormProperties>({
			EdgeDeploymentPlanName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopEdgePackagingJobRequest {

		/** Required */
		EdgePackagingJobName: string;
	}
	export interface StopEdgePackagingJobRequestFormProperties {

		/** Required */
		EdgePackagingJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopEdgePackagingJobRequestFormGroup() {
		return new FormGroup<StopEdgePackagingJobRequestFormProperties>({
			EdgePackagingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopHyperParameterTuningJobRequest {

		/** Required */
		HyperParameterTuningJobName: string;
	}
	export interface StopHyperParameterTuningJobRequestFormProperties {

		/** Required */
		HyperParameterTuningJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopHyperParameterTuningJobRequestFormGroup() {
		return new FormGroup<StopHyperParameterTuningJobRequestFormProperties>({
			HyperParameterTuningJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopInferenceExperimentResponse {

		/** Required */
		InferenceExperimentArn: string;
	}
	export interface StopInferenceExperimentResponseFormProperties {

		/** Required */
		InferenceExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateStopInferenceExperimentResponseFormGroup() {
		return new FormGroup<StopInferenceExperimentResponseFormProperties>({
			InferenceExperimentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopInferenceExperimentRequest {

		/** Required */
		Name: string;

		/** Required */
		ModelVariantActions: ModelVariantActionMap;
		DesiredModelVariants?: Array<ModelVariantConfig>;
		DesiredState?: InferenceExperimentStopDesiredState;
		Reason?: string;
	}
	export interface StopInferenceExperimentRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		DesiredState: FormControl<InferenceExperimentStopDesiredState | null | undefined>,
		Reason: FormControl<string | null | undefined>,
	}
	export function CreateStopInferenceExperimentRequestFormGroup() {
		return new FormGroup<StopInferenceExperimentRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DesiredState: new FormControl<InferenceExperimentStopDesiredState | null | undefined>(undefined),
			Reason: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ModelVariantActionMap {
	}
	export interface ModelVariantActionMapFormProperties {
	}
	export function CreateModelVariantActionMapFormGroup() {
		return new FormGroup<ModelVariantActionMapFormProperties>({
		});

	}

	export enum InferenceExperimentStopDesiredState { Completed = 'Completed', Cancelled = 'Cancelled' }

	export interface StopInferenceRecommendationsJobRequest {

		/** Required */
		JobName: string;
	}
	export interface StopInferenceRecommendationsJobRequestFormProperties {

		/** Required */
		JobName: FormControl<string | null | undefined>,
	}
	export function CreateStopInferenceRecommendationsJobRequestFormGroup() {
		return new FormGroup<StopInferenceRecommendationsJobRequestFormProperties>({
			JobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopLabelingJobRequest {

		/** Required */
		LabelingJobName: string;
	}
	export interface StopLabelingJobRequestFormProperties {

		/** Required */
		LabelingJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopLabelingJobRequestFormGroup() {
		return new FormGroup<StopLabelingJobRequestFormProperties>({
			LabelingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopMonitoringScheduleRequest {

		/** Required */
		MonitoringScheduleName: string;
	}
	export interface StopMonitoringScheduleRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,
	}
	export function CreateStopMonitoringScheduleRequestFormGroup() {
		return new FormGroup<StopMonitoringScheduleRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopNotebookInstanceInput {

		/** Required */
		NotebookInstanceName: string;
	}
	export interface StopNotebookInstanceInputFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,
	}
	export function CreateStopNotebookInstanceInputFormGroup() {
		return new FormGroup<StopNotebookInstanceInputFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopPipelineExecutionResponse {
		PipelineExecutionArn?: string;
	}
	export interface StopPipelineExecutionResponseFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateStopPipelineExecutionResponseFormGroup() {
		return new FormGroup<StopPipelineExecutionResponseFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface StopPipelineExecutionRequest {

		/** Required */
		PipelineExecutionArn: string;

		/** Required */
		ClientRequestToken: string;
	}
	export interface StopPipelineExecutionRequestFormProperties {

		/** Required */
		PipelineExecutionArn: FormControl<string | null | undefined>,

		/** Required */
		ClientRequestToken: FormControl<string | null | undefined>,
	}
	export function CreateStopPipelineExecutionRequestFormGroup() {
		return new FormGroup<StopPipelineExecutionRequestFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClientRequestToken: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopProcessingJobRequest {

		/** Required */
		ProcessingJobName: string;
	}
	export interface StopProcessingJobRequestFormProperties {

		/** Required */
		ProcessingJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopProcessingJobRequestFormGroup() {
		return new FormGroup<StopProcessingJobRequestFormProperties>({
			ProcessingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopTrainingJobRequest {

		/** Required */
		TrainingJobName: string;
	}
	export interface StopTrainingJobRequestFormProperties {

		/** Required */
		TrainingJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopTrainingJobRequestFormGroup() {
		return new FormGroup<StopTrainingJobRequestFormProperties>({
			TrainingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StopTransformJobRequest {

		/** Required */
		TransformJobName: string;
	}
	export interface StopTransformJobRequestFormProperties {

		/** Required */
		TransformJobName: FormControl<string | null | undefined>,
	}
	export function CreateStopTransformJobRequestFormGroup() {
		return new FormGroup<StopTransformJobRequestFormProperties>({
			TransformJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateActionResponse {
		ActionArn?: string;
	}
	export interface UpdateActionResponseFormProperties {
		ActionArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateActionResponseFormGroup() {
		return new FormGroup<UpdateActionResponseFormProperties>({
			ActionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateActionRequest {

		/** Required */
		ActionName: string;
		Description?: string;
		Status?: ActionStatus;
		Properties?: LineageEntityParameters;
		PropertiesToRemove?: Array<string>;
	}
	export interface UpdateActionRequestFormProperties {

		/** Required */
		ActionName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		Status: FormControl<ActionStatus | null | undefined>,
	}
	export function CreateUpdateActionRequestFormGroup() {
		return new FormGroup<UpdateActionRequestFormProperties>({
			ActionName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<ActionStatus | null | undefined>(undefined),
		});

	}

	export interface UpdateAppImageConfigResponse {
		AppImageConfigArn?: string;
	}
	export interface UpdateAppImageConfigResponseFormProperties {
		AppImageConfigArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateAppImageConfigResponseFormGroup() {
		return new FormGroup<UpdateAppImageConfigResponseFormProperties>({
			AppImageConfigArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateAppImageConfigRequest {

		/** Required */
		AppImageConfigName: string;
		KernelGatewayImageConfig?: KernelGatewayImageConfig;
	}
	export interface UpdateAppImageConfigRequestFormProperties {

		/** Required */
		AppImageConfigName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateAppImageConfigRequestFormGroup() {
		return new FormGroup<UpdateAppImageConfigRequestFormProperties>({
			AppImageConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateArtifactResponse {
		ArtifactArn?: string;
	}
	export interface UpdateArtifactResponseFormProperties {
		ArtifactArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateArtifactResponseFormGroup() {
		return new FormGroup<UpdateArtifactResponseFormProperties>({
			ArtifactArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateArtifactRequest {

		/** Required */
		ArtifactArn: string;
		ArtifactName?: string;
		Properties?: LineageEntityParameters;
		PropertiesToRemove?: Array<string>;
	}
	export interface UpdateArtifactRequestFormProperties {

		/** Required */
		ArtifactArn: FormControl<string | null | undefined>,
		ArtifactName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateArtifactRequestFormGroup() {
		return new FormGroup<UpdateArtifactRequestFormProperties>({
			ArtifactArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ArtifactName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateCodeRepositoryOutput {

		/** Required */
		CodeRepositoryArn: string;
	}
	export interface UpdateCodeRepositoryOutputFormProperties {

		/** Required */
		CodeRepositoryArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateCodeRepositoryOutputFormGroup() {
		return new FormGroup<UpdateCodeRepositoryOutputFormProperties>({
			CodeRepositoryArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateCodeRepositoryInput {

		/** Required */
		CodeRepositoryName: string;
		GitConfig?: GitConfigForUpdate;
	}
	export interface UpdateCodeRepositoryInputFormProperties {

		/** Required */
		CodeRepositoryName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateCodeRepositoryInputFormGroup() {
		return new FormGroup<UpdateCodeRepositoryInputFormProperties>({
			CodeRepositoryName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specifies configuration details for a Git repository when the repository is updated. */
	export interface GitConfigForUpdate {
		SecretArn?: string;
	}

	/** Specifies configuration details for a Git repository when the repository is updated. */
	export interface GitConfigForUpdateFormProperties {
		SecretArn: FormControl<string | null | undefined>,
	}
	export function CreateGitConfigForUpdateFormGroup() {
		return new FormGroup<GitConfigForUpdateFormProperties>({
			SecretArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateContextResponse {
		ContextArn?: string;
	}
	export interface UpdateContextResponseFormProperties {
		ContextArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateContextResponseFormGroup() {
		return new FormGroup<UpdateContextResponseFormProperties>({
			ContextArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateContextRequest {

		/** Required */
		ContextName: string;
		Description?: string;
		Properties?: LineageEntityParameters;
		PropertiesToRemove?: Array<string>;
	}
	export interface UpdateContextRequestFormProperties {

		/** Required */
		ContextName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateContextRequestFormGroup() {
		return new FormGroup<UpdateContextRequestFormProperties>({
			ContextName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDeviceFleetRequest {

		/** Required */
		DeviceFleetName: string;
		RoleArn?: string;
		Description?: string;

		/** Required */
		OutputConfig: EdgeOutputConfig;
		EnableIotRoleAlias?: boolean | null;
	}
	export interface UpdateDeviceFleetRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		EnableIotRoleAlias: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateDeviceFleetRequestFormGroup() {
		return new FormGroup<UpdateDeviceFleetRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			EnableIotRoleAlias: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UpdateDevicesRequest {

		/** Required */
		DeviceFleetName: string;

		/** Required */
		Devices: Array<Device>;
	}
	export interface UpdateDevicesRequestFormProperties {

		/** Required */
		DeviceFleetName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDevicesRequestFormGroup() {
		return new FormGroup<UpdateDevicesRequestFormProperties>({
			DeviceFleetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateDomainResponse {
		DomainArn?: string;
	}
	export interface UpdateDomainResponseFormProperties {
		DomainArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDomainResponseFormGroup() {
		return new FormGroup<UpdateDomainResponseFormProperties>({
			DomainArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDomainRequest {

		/** Required */
		DomainId: string;
		DefaultUserSettings?: UserSettings;
		DomainSettingsForUpdate?: DomainSettingsForUpdate;
		DefaultSpaceSettings?: DefaultSpaceSettings;
		AppSecurityGroupManagement?: AppSecurityGroupManagement;
	}
	export interface UpdateDomainRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,
		AppSecurityGroupManagement: FormControl<AppSecurityGroupManagement | null | undefined>,
	}
	export function CreateUpdateDomainRequestFormGroup() {
		return new FormGroup<UpdateDomainRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AppSecurityGroupManagement: new FormControl<AppSecurityGroupManagement | null | undefined>(undefined),
		});

	}


	/** A collection of <code>Domain</code> configuration settings to update. */
	export interface DomainSettingsForUpdate {
		RStudioServerProDomainSettingsForUpdate?: RStudioServerProDomainSettingsForUpdate;
		ExecutionRoleIdentityConfig?: ExecutionRoleIdentityConfig;
		SecurityGroupIds?: Array<string>;
	}

	/** A collection of <code>Domain</code> configuration settings to update. */
	export interface DomainSettingsForUpdateFormProperties {
		ExecutionRoleIdentityConfig: FormControl<ExecutionRoleIdentityConfig | null | undefined>,
	}
	export function CreateDomainSettingsForUpdateFormGroup() {
		return new FormGroup<DomainSettingsForUpdateFormProperties>({
			ExecutionRoleIdentityConfig: new FormControl<ExecutionRoleIdentityConfig | null | undefined>(undefined),
		});

	}


	/** A collection of settings that update the current configuration for the <code>RStudioServerPro</code> Domain-level app. */
	export interface RStudioServerProDomainSettingsForUpdate {

		/** Required */
		DomainExecutionRoleArn: string;

		/** Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on. */
		DefaultResourceSpec?: ResourceSpec;
		RStudioConnectUrl?: string;
		RStudioPackageManagerUrl?: string;
	}

	/** A collection of settings that update the current configuration for the <code>RStudioServerPro</code> Domain-level app. */
	export interface RStudioServerProDomainSettingsForUpdateFormProperties {

		/** Required */
		DomainExecutionRoleArn: FormControl<string | null | undefined>,
		RStudioConnectUrl: FormControl<string | null | undefined>,
		RStudioPackageManagerUrl: FormControl<string | null | undefined>,
	}
	export function CreateRStudioServerProDomainSettingsForUpdateFormGroup() {
		return new FormGroup<RStudioServerProDomainSettingsForUpdateFormProperties>({
			DomainExecutionRoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RStudioConnectUrl: new FormControl<string | null | undefined>(undefined),
			RStudioPackageManagerUrl: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateEndpointOutput {

		/** Required */
		EndpointArn: string;
	}
	export interface UpdateEndpointOutputFormProperties {

		/** Required */
		EndpointArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateEndpointOutputFormGroup() {
		return new FormGroup<UpdateEndpointOutputFormProperties>({
			EndpointArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateEndpointInput {

		/** Required */
		EndpointName: string;

		/** Required */
		EndpointConfigName: string;
		RetainAllVariantProperties?: boolean | null;
		ExcludeRetainedVariantProperties?: Array<VariantProperty>;
		DeploymentConfig?: DeploymentConfig;
		RetainDeploymentConfig?: boolean | null;
	}
	export interface UpdateEndpointInputFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,

		/** Required */
		EndpointConfigName: FormControl<string | null | undefined>,
		RetainAllVariantProperties: FormControl<boolean | null | undefined>,
		RetainDeploymentConfig: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateEndpointInputFormGroup() {
		return new FormGroup<UpdateEndpointInputFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EndpointConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RetainAllVariantProperties: new FormControl<boolean | null | undefined>(undefined),
			RetainDeploymentConfig: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** <p>Specifies a production variant property type for an Endpoint.</p> <p>If you are updating an endpoint with the <code>RetainAllVariantProperties</code> option of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a> set to <code>true</code>, the <code>VariantProperty</code> objects listed in the <code>ExcludeRetainedVariantProperties</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a> override the existing variant properties of the endpoint.</p> */
	export interface VariantProperty {

		/** Required */
		VariantPropertyType: VariantPropertyType;
	}

	/** <p>Specifies a production variant property type for an Endpoint.</p> <p>If you are updating an endpoint with the <code>RetainAllVariantProperties</code> option of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a> set to <code>true</code>, the <code>VariantProperty</code> objects listed in the <code>ExcludeRetainedVariantProperties</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html">UpdateEndpointInput</a> override the existing variant properties of the endpoint.</p> */
	export interface VariantPropertyFormProperties {

		/** Required */
		VariantPropertyType: FormControl<VariantPropertyType | null | undefined>,
	}
	export function CreateVariantPropertyFormGroup() {
		return new FormGroup<VariantPropertyFormProperties>({
			VariantPropertyType: new FormControl<VariantPropertyType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum VariantPropertyType { DesiredInstanceCount = 'DesiredInstanceCount', DesiredWeight = 'DesiredWeight', DataCaptureConfig = 'DataCaptureConfig' }

	export interface UpdateEndpointWeightsAndCapacitiesOutput {

		/** Required */
		EndpointArn: string;
	}
	export interface UpdateEndpointWeightsAndCapacitiesOutputFormProperties {

		/** Required */
		EndpointArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateEndpointWeightsAndCapacitiesOutputFormGroup() {
		return new FormGroup<UpdateEndpointWeightsAndCapacitiesOutputFormProperties>({
			EndpointArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateEndpointWeightsAndCapacitiesInput {

		/** Required */
		EndpointName: string;

		/** Required */
		DesiredWeightsAndCapacities: Array<DesiredWeightAndCapacity>;
	}
	export interface UpdateEndpointWeightsAndCapacitiesInputFormProperties {

		/** Required */
		EndpointName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateEndpointWeightsAndCapacitiesInputFormGroup() {
		return new FormGroup<UpdateEndpointWeightsAndCapacitiesInputFormProperties>({
			EndpointName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Specifies weight and capacity values for a production variant. */
	export interface DesiredWeightAndCapacity {

		/** Required */
		VariantName: string;
		DesiredWeight?: number;
		DesiredInstanceCount?: number | null;
		ServerlessUpdateConfig?: ProductionVariantServerlessUpdateConfig;
	}

	/** Specifies weight and capacity values for a production variant. */
	export interface DesiredWeightAndCapacityFormProperties {

		/** Required */
		VariantName: FormControl<string | null | undefined>,
		DesiredWeight: FormControl<number | null | undefined>,
		DesiredInstanceCount: FormControl<number | null | undefined>,
	}
	export function CreateDesiredWeightAndCapacityFormGroup() {
		return new FormGroup<DesiredWeightAndCapacityFormProperties>({
			VariantName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DesiredWeight: new FormControl<number | null | undefined>(undefined),
			DesiredInstanceCount: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Specifies the serverless update concurrency configuration for an endpoint variant. */
	export interface ProductionVariantServerlessUpdateConfig {
		MaxConcurrency?: number | null;
		ProvisionedConcurrency?: number | null;
	}

	/** Specifies the serverless update concurrency configuration for an endpoint variant. */
	export interface ProductionVariantServerlessUpdateConfigFormProperties {
		MaxConcurrency: FormControl<number | null | undefined>,
		ProvisionedConcurrency: FormControl<number | null | undefined>,
	}
	export function CreateProductionVariantServerlessUpdateConfigFormGroup() {
		return new FormGroup<ProductionVariantServerlessUpdateConfigFormProperties>({
			MaxConcurrency: new FormControl<number | null | undefined>(undefined),
			ProvisionedConcurrency: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateExperimentResponse {
		ExperimentArn?: string;
	}
	export interface UpdateExperimentResponseFormProperties {
		ExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateExperimentResponseFormGroup() {
		return new FormGroup<UpdateExperimentResponseFormProperties>({
			ExperimentArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateExperimentRequest {

		/** Required */
		ExperimentName: string;
		DisplayName?: string;
		Description?: string;
	}
	export interface UpdateExperimentRequestFormProperties {

		/** Required */
		ExperimentName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateExperimentRequestFormGroup() {
		return new FormGroup<UpdateExperimentRequestFormProperties>({
			ExperimentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateFeatureGroupResponse {

		/** Required */
		FeatureGroupArn: string;
	}
	export interface UpdateFeatureGroupResponseFormProperties {

		/** Required */
		FeatureGroupArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateFeatureGroupResponseFormGroup() {
		return new FormGroup<UpdateFeatureGroupResponseFormProperties>({
			FeatureGroupArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateFeatureGroupRequest {

		/** Required */
		FeatureGroupName: string;
		FeatureAdditions?: Array<FeatureDefinition>;
		OnlineStoreConfig?: OnlineStoreConfigUpdate;
	}
	export interface UpdateFeatureGroupRequestFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateFeatureGroupRequestFormGroup() {
		return new FormGroup<UpdateFeatureGroupRequestFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Updates the feature group online store configuration. */
	export interface OnlineStoreConfigUpdate {
		TtlDuration?: TtlDuration;
	}

	/** Updates the feature group online store configuration. */
	export interface OnlineStoreConfigUpdateFormProperties {
	}
	export function CreateOnlineStoreConfigUpdateFormGroup() {
		return new FormGroup<OnlineStoreConfigUpdateFormProperties>({
		});

	}

	export interface UpdateFeatureMetadataRequest {

		/** Required */
		FeatureGroupName: string;

		/** Required */
		FeatureName: string;
		Description?: string;
		ParameterAdditions?: Array<FeatureParameter>;
		ParameterRemovals?: Array<string>;
	}
	export interface UpdateFeatureMetadataRequestFormProperties {

		/** Required */
		FeatureGroupName: FormControl<string | null | undefined>,

		/** Required */
		FeatureName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateFeatureMetadataRequestFormGroup() {
		return new FormGroup<UpdateFeatureMetadataRequestFormProperties>({
			FeatureGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FeatureName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateHubResponse {

		/** Required */
		HubArn: string;
	}
	export interface UpdateHubResponseFormProperties {

		/** Required */
		HubArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateHubResponseFormGroup() {
		return new FormGroup<UpdateHubResponseFormProperties>({
			HubArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateHubRequest {

		/** Required */
		HubName: string;
		HubDescription?: string;
		HubDisplayName?: string;
		HubSearchKeywords?: Array<string>;
	}
	export interface UpdateHubRequestFormProperties {

		/** Required */
		HubName: FormControl<string | null | undefined>,
		HubDescription: FormControl<string | null | undefined>,
		HubDisplayName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateHubRequestFormGroup() {
		return new FormGroup<UpdateHubRequestFormProperties>({
			HubName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HubDescription: new FormControl<string | null | undefined>(undefined),
			HubDisplayName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateImageResponse {
		ImageArn?: string;
	}
	export interface UpdateImageResponseFormProperties {
		ImageArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateImageResponseFormGroup() {
		return new FormGroup<UpdateImageResponseFormProperties>({
			ImageArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateImageRequest {
		DeleteProperties?: Array<string>;
		Description?: string;
		DisplayName?: string;

		/** Required */
		ImageName: string;
		RoleArn?: string;
	}
	export interface UpdateImageRequestFormProperties {
		Description: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateImageRequestFormGroup() {
		return new FormGroup<UpdateImageRequestFormProperties>({
			Description: new FormControl<string | null | undefined>(undefined),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateImageVersionResponse {
		ImageVersionArn?: string;
	}
	export interface UpdateImageVersionResponseFormProperties {
		ImageVersionArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateImageVersionResponseFormGroup() {
		return new FormGroup<UpdateImageVersionResponseFormProperties>({
			ImageVersionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateImageVersionRequest {

		/** Required */
		ImageName: string;
		Alias?: string;
		Version?: number | null;
		AliasesToAdd?: Array<string>;
		AliasesToDelete?: Array<string>;
		VendorGuidance?: VendorGuidance;
		JobType?: JobType;
		MLFramework?: string;
		ProgrammingLang?: string;
		Processor?: Processor;
		Horovod?: boolean | null;
		ReleaseNotes?: string;
	}
	export interface UpdateImageVersionRequestFormProperties {

		/** Required */
		ImageName: FormControl<string | null | undefined>,
		Alias: FormControl<string | null | undefined>,
		Version: FormControl<number | null | undefined>,
		VendorGuidance: FormControl<VendorGuidance | null | undefined>,
		JobType: FormControl<JobType | null | undefined>,
		MLFramework: FormControl<string | null | undefined>,
		ProgrammingLang: FormControl<string | null | undefined>,
		Processor: FormControl<Processor | null | undefined>,
		Horovod: FormControl<boolean | null | undefined>,
		ReleaseNotes: FormControl<string | null | undefined>,
	}
	export function CreateUpdateImageVersionRequestFormGroup() {
		return new FormGroup<UpdateImageVersionRequestFormProperties>({
			ImageName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Alias: new FormControl<string | null | undefined>(undefined),
			Version: new FormControl<number | null | undefined>(undefined),
			VendorGuidance: new FormControl<VendorGuidance | null | undefined>(undefined),
			JobType: new FormControl<JobType | null | undefined>(undefined),
			MLFramework: new FormControl<string | null | undefined>(undefined),
			ProgrammingLang: new FormControl<string | null | undefined>(undefined),
			Processor: new FormControl<Processor | null | undefined>(undefined),
			Horovod: new FormControl<boolean | null | undefined>(undefined),
			ReleaseNotes: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateInferenceExperimentResponse {

		/** Required */
		InferenceExperimentArn: string;
	}
	export interface UpdateInferenceExperimentResponseFormProperties {

		/** Required */
		InferenceExperimentArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateInferenceExperimentResponseFormGroup() {
		return new FormGroup<UpdateInferenceExperimentResponseFormProperties>({
			InferenceExperimentArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateInferenceExperimentRequest {

		/** Required */
		Name: string;
		Schedule?: InferenceExperimentSchedule;
		Description?: string;
		ModelVariants?: Array<ModelVariantConfig>;
		DataStorageConfig?: InferenceExperimentDataStorageConfig;
		ShadowModeConfig?: ShadowModeConfig;
	}
	export interface UpdateInferenceExperimentRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateInferenceExperimentRequestFormGroup() {
		return new FormGroup<UpdateInferenceExperimentRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateModelCardResponse {

		/** Required */
		ModelCardArn: string;
	}
	export interface UpdateModelCardResponseFormProperties {

		/** Required */
		ModelCardArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateModelCardResponseFormGroup() {
		return new FormGroup<UpdateModelCardResponseFormProperties>({
			ModelCardArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateModelCardRequest {

		/** Required */
		ModelCardName: string;
		Content?: string;
		ModelCardStatus?: ModelCardStatus;
	}
	export interface UpdateModelCardRequestFormProperties {

		/** Required */
		ModelCardName: FormControl<string | null | undefined>,
		Content: FormControl<string | null | undefined>,
		ModelCardStatus: FormControl<ModelCardStatus | null | undefined>,
	}
	export function CreateUpdateModelCardRequestFormGroup() {
		return new FormGroup<UpdateModelCardRequestFormProperties>({
			ModelCardName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Content: new FormControl<string | null | undefined>(undefined),
			ModelCardStatus: new FormControl<ModelCardStatus | null | undefined>(undefined),
		});

	}

	export interface UpdateModelPackageOutput {

		/** Required */
		ModelPackageArn: string;
	}
	export interface UpdateModelPackageOutputFormProperties {

		/** Required */
		ModelPackageArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateModelPackageOutputFormGroup() {
		return new FormGroup<UpdateModelPackageOutputFormProperties>({
			ModelPackageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateModelPackageInput {

		/** Required */
		ModelPackageArn: string;
		ModelApprovalStatus?: ModelApprovalStatus;
		ApprovalDescription?: string;
		CustomerMetadataProperties?: CustomerMetadataMap;
		CustomerMetadataPropertiesToRemove?: Array<string>;
		AdditionalInferenceSpecificationsToAdd?: Array<AdditionalInferenceSpecificationDefinition>;
	}
	export interface UpdateModelPackageInputFormProperties {

		/** Required */
		ModelPackageArn: FormControl<string | null | undefined>,
		ModelApprovalStatus: FormControl<ModelApprovalStatus | null | undefined>,
		ApprovalDescription: FormControl<string | null | undefined>,
	}
	export function CreateUpdateModelPackageInputFormGroup() {
		return new FormGroup<UpdateModelPackageInputFormProperties>({
			ModelPackageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelApprovalStatus: new FormControl<ModelApprovalStatus | null | undefined>(undefined),
			ApprovalDescription: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateMonitoringAlertResponse {

		/** Required */
		MonitoringScheduleArn: string;
		MonitoringAlertName?: string;
	}
	export interface UpdateMonitoringAlertResponseFormProperties {

		/** Required */
		MonitoringScheduleArn: FormControl<string | null | undefined>,
		MonitoringAlertName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateMonitoringAlertResponseFormGroup() {
		return new FormGroup<UpdateMonitoringAlertResponseFormProperties>({
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MonitoringAlertName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateMonitoringAlertRequest {

		/** Required */
		MonitoringScheduleName: string;

		/** Required */
		MonitoringAlertName: string;

		/** Required */
		DatapointsToAlert: number;

		/** Required */
		EvaluationPeriod: number;
	}
	export interface UpdateMonitoringAlertRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,

		/** Required */
		MonitoringAlertName: FormControl<string | null | undefined>,

		/** Required */
		DatapointsToAlert: FormControl<number | null | undefined>,

		/** Required */
		EvaluationPeriod: FormControl<number | null | undefined>,
	}
	export function CreateUpdateMonitoringAlertRequestFormGroup() {
		return new FormGroup<UpdateMonitoringAlertRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MonitoringAlertName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DatapointsToAlert: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			EvaluationPeriod: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateMonitoringScheduleResponse {

		/** Required */
		MonitoringScheduleArn: string;
	}
	export interface UpdateMonitoringScheduleResponseFormProperties {

		/** Required */
		MonitoringScheduleArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateMonitoringScheduleResponseFormGroup() {
		return new FormGroup<UpdateMonitoringScheduleResponseFormProperties>({
			MonitoringScheduleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateMonitoringScheduleRequest {

		/** Required */
		MonitoringScheduleName: string;

		/** Required */
		MonitoringScheduleConfig: MonitoringScheduleConfig;
	}
	export interface UpdateMonitoringScheduleRequestFormProperties {

		/** Required */
		MonitoringScheduleName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateMonitoringScheduleRequestFormGroup() {
		return new FormGroup<UpdateMonitoringScheduleRequestFormProperties>({
			MonitoringScheduleName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateNotebookInstanceOutput {
	}
	export interface UpdateNotebookInstanceOutputFormProperties {
	}
	export function CreateUpdateNotebookInstanceOutputFormGroup() {
		return new FormGroup<UpdateNotebookInstanceOutputFormProperties>({
		});

	}

	export interface UpdateNotebookInstanceInput {

		/** Required */
		NotebookInstanceName: string;
		InstanceType?: InstanceType;
		RoleArn?: string;
		LifecycleConfigName?: string;
		DisassociateLifecycleConfig?: boolean | null;
		VolumeSizeInGB?: number | null;
		DefaultCodeRepository?: string;
		AdditionalCodeRepositories?: Array<string>;
		AcceleratorTypes?: Array<NotebookInstanceAcceleratorType>;
		DisassociateAcceleratorTypes?: boolean | null;
		DisassociateDefaultCodeRepository?: boolean | null;
		DisassociateAdditionalCodeRepositories?: boolean | null;
		RootAccess?: ModelCacheSetting;
		InstanceMetadataServiceConfiguration?: InstanceMetadataServiceConfiguration;
	}
	export interface UpdateNotebookInstanceInputFormProperties {

		/** Required */
		NotebookInstanceName: FormControl<string | null | undefined>,
		InstanceType: FormControl<InstanceType | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		LifecycleConfigName: FormControl<string | null | undefined>,
		DisassociateLifecycleConfig: FormControl<boolean | null | undefined>,
		VolumeSizeInGB: FormControl<number | null | undefined>,
		DefaultCodeRepository: FormControl<string | null | undefined>,
		DisassociateAcceleratorTypes: FormControl<boolean | null | undefined>,
		DisassociateDefaultCodeRepository: FormControl<boolean | null | undefined>,
		DisassociateAdditionalCodeRepositories: FormControl<boolean | null | undefined>,
		RootAccess: FormControl<ModelCacheSetting | null | undefined>,
	}
	export function CreateUpdateNotebookInstanceInputFormGroup() {
		return new FormGroup<UpdateNotebookInstanceInputFormProperties>({
			NotebookInstanceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			InstanceType: new FormControl<InstanceType | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			LifecycleConfigName: new FormControl<string | null | undefined>(undefined),
			DisassociateLifecycleConfig: new FormControl<boolean | null | undefined>(undefined),
			VolumeSizeInGB: new FormControl<number | null | undefined>(undefined),
			DefaultCodeRepository: new FormControl<string | null | undefined>(undefined),
			DisassociateAcceleratorTypes: new FormControl<boolean | null | undefined>(undefined),
			DisassociateDefaultCodeRepository: new FormControl<boolean | null | undefined>(undefined),
			DisassociateAdditionalCodeRepositories: new FormControl<boolean | null | undefined>(undefined),
			RootAccess: new FormControl<ModelCacheSetting | null | undefined>(undefined),
		});

	}

	export interface UpdateNotebookInstanceLifecycleConfigOutput {
	}
	export interface UpdateNotebookInstanceLifecycleConfigOutputFormProperties {
	}
	export function CreateUpdateNotebookInstanceLifecycleConfigOutputFormGroup() {
		return new FormGroup<UpdateNotebookInstanceLifecycleConfigOutputFormProperties>({
		});

	}

	export interface UpdateNotebookInstanceLifecycleConfigInput {

		/** Required */
		NotebookInstanceLifecycleConfigName: string;
		OnCreate?: Array<NotebookInstanceLifecycleHook>;
		OnStart?: Array<NotebookInstanceLifecycleHook>;
	}
	export interface UpdateNotebookInstanceLifecycleConfigInputFormProperties {

		/** Required */
		NotebookInstanceLifecycleConfigName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateNotebookInstanceLifecycleConfigInputFormGroup() {
		return new FormGroup<UpdateNotebookInstanceLifecycleConfigInputFormProperties>({
			NotebookInstanceLifecycleConfigName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdatePipelineResponse {
		PipelineArn?: string;
	}
	export interface UpdatePipelineResponseFormProperties {
		PipelineArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdatePipelineResponseFormGroup() {
		return new FormGroup<UpdatePipelineResponseFormProperties>({
			PipelineArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdatePipelineRequest {

		/** Required */
		PipelineName: string;
		PipelineDisplayName?: string;
		PipelineDefinition?: string;
		PipelineDefinitionS3Location?: PipelineDefinitionS3Location;
		PipelineDescription?: string;
		RoleArn?: string;
		ParallelismConfiguration?: ParallelismConfiguration;
	}
	export interface UpdatePipelineRequestFormProperties {

		/** Required */
		PipelineName: FormControl<string | null | undefined>,
		PipelineDisplayName: FormControl<string | null | undefined>,
		PipelineDefinition: FormControl<string | null | undefined>,
		PipelineDescription: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdatePipelineRequestFormGroup() {
		return new FormGroup<UpdatePipelineRequestFormProperties>({
			PipelineName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PipelineDisplayName: new FormControl<string | null | undefined>(undefined),
			PipelineDefinition: new FormControl<string | null | undefined>(undefined),
			PipelineDescription: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdatePipelineExecutionResponse {
		PipelineExecutionArn?: string;
	}
	export interface UpdatePipelineExecutionResponseFormProperties {
		PipelineExecutionArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdatePipelineExecutionResponseFormGroup() {
		return new FormGroup<UpdatePipelineExecutionResponseFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdatePipelineExecutionRequest {

		/** Required */
		PipelineExecutionArn: string;
		PipelineExecutionDescription?: string;
		PipelineExecutionDisplayName?: string;
		ParallelismConfiguration?: ParallelismConfiguration;
	}
	export interface UpdatePipelineExecutionRequestFormProperties {

		/** Required */
		PipelineExecutionArn: FormControl<string | null | undefined>,
		PipelineExecutionDescription: FormControl<string | null | undefined>,
		PipelineExecutionDisplayName: FormControl<string | null | undefined>,
	}
	export function CreateUpdatePipelineExecutionRequestFormGroup() {
		return new FormGroup<UpdatePipelineExecutionRequestFormProperties>({
			PipelineExecutionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PipelineExecutionDescription: new FormControl<string | null | undefined>(undefined),
			PipelineExecutionDisplayName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateProjectOutput {

		/** Required */
		ProjectArn: string;
	}
	export interface UpdateProjectOutputFormProperties {

		/** Required */
		ProjectArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateProjectOutputFormGroup() {
		return new FormGroup<UpdateProjectOutputFormProperties>({
			ProjectArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateProjectInput {

		/** Required */
		ProjectName: string;
		ProjectDescription?: string;
		ServiceCatalogProvisioningUpdateDetails?: ServiceCatalogProvisioningUpdateDetails;
		Tags?: Array<Tag>;
	}
	export interface UpdateProjectInputFormProperties {

		/** Required */
		ProjectName: FormControl<string | null | undefined>,
		ProjectDescription: FormControl<string | null | undefined>,
	}
	export function CreateUpdateProjectInputFormGroup() {
		return new FormGroup<UpdateProjectInputFormProperties>({
			ProjectName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ProjectDescription: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.  */
	export interface ServiceCatalogProvisioningUpdateDetails {
		ProvisioningArtifactId?: string;
		ProvisioningParameters?: Array<ProvisioningParameter>;
	}

	/** Details that you specify to provision a service catalog product. For information about service catalog, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html">What is Amazon Web Services Service Catalog</a>.  */
	export interface ServiceCatalogProvisioningUpdateDetailsFormProperties {
		ProvisioningArtifactId: FormControl<string | null | undefined>,
	}
	export function CreateServiceCatalogProvisioningUpdateDetailsFormGroup() {
		return new FormGroup<ServiceCatalogProvisioningUpdateDetailsFormProperties>({
			ProvisioningArtifactId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateSpaceResponse {
		SpaceArn?: string;
	}
	export interface UpdateSpaceResponseFormProperties {
		SpaceArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateSpaceResponseFormGroup() {
		return new FormGroup<UpdateSpaceResponseFormProperties>({
			SpaceArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateSpaceRequest {

		/** Required */
		DomainId: string;

		/** Required */
		SpaceName: string;
		SpaceSettings?: SpaceSettings;
	}
	export interface UpdateSpaceRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		SpaceName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateSpaceRequestFormGroup() {
		return new FormGroup<UpdateSpaceRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpaceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateTrainingJobResponse {

		/** Required */
		TrainingJobArn: string;
	}
	export interface UpdateTrainingJobResponseFormProperties {

		/** Required */
		TrainingJobArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTrainingJobResponseFormGroup() {
		return new FormGroup<UpdateTrainingJobResponseFormProperties>({
			TrainingJobArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateTrainingJobRequest {

		/** Required */
		TrainingJobName: string;
		ProfilerConfig?: ProfilerConfigForUpdate;
		ProfilerRuleConfigurations?: Array<ProfilerRuleConfiguration>;
		ResourceConfig?: ResourceConfigForUpdate;
	}
	export interface UpdateTrainingJobRequestFormProperties {

		/** Required */
		TrainingJobName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTrainingJobRequestFormGroup() {
		return new FormGroup<UpdateTrainingJobRequestFormProperties>({
			TrainingJobName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Configuration information for updating the Amazon SageMaker Debugger profile parameters, system and framework metrics configurations, and storage paths. */
	export interface ProfilerConfigForUpdate {
		S3OutputPath?: string;
		ProfilingIntervalInMilliseconds?: number | null;
		ProfilingParameters?: ProfilingParameters;
		DisableProfiler?: boolean | null;
	}

	/** Configuration information for updating the Amazon SageMaker Debugger profile parameters, system and framework metrics configurations, and storage paths. */
	export interface ProfilerConfigForUpdateFormProperties {
		S3OutputPath: FormControl<string | null | undefined>,
		ProfilingIntervalInMilliseconds: FormControl<number | null | undefined>,
		DisableProfiler: FormControl<boolean | null | undefined>,
	}
	export function CreateProfilerConfigForUpdateFormGroup() {
		return new FormGroup<ProfilerConfigForUpdateFormProperties>({
			S3OutputPath: new FormControl<string | null | undefined>(undefined),
			ProfilingIntervalInMilliseconds: new FormControl<number | null | undefined>(undefined),
			DisableProfiler: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The <code>ResourceConfig</code> to update <code>KeepAlivePeriodInSeconds</code>. Other fields in the <code>ResourceConfig</code> cannot be updated. */
	export interface ResourceConfigForUpdate {

		/** Required */
		KeepAlivePeriodInSeconds: number;
	}

	/** The <code>ResourceConfig</code> to update <code>KeepAlivePeriodInSeconds</code>. Other fields in the <code>ResourceConfig</code> cannot be updated. */
	export interface ResourceConfigForUpdateFormProperties {

		/** Required */
		KeepAlivePeriodInSeconds: FormControl<number | null | undefined>,
	}
	export function CreateResourceConfigForUpdateFormGroup() {
		return new FormGroup<ResourceConfigForUpdateFormProperties>({
			KeepAlivePeriodInSeconds: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateTrialResponse {
		TrialArn?: string;
	}
	export interface UpdateTrialResponseFormProperties {
		TrialArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTrialResponseFormGroup() {
		return new FormGroup<UpdateTrialResponseFormProperties>({
			TrialArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTrialRequest {

		/** Required */
		TrialName: string;
		DisplayName?: string;
	}
	export interface UpdateTrialRequestFormProperties {

		/** Required */
		TrialName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTrialRequestFormGroup() {
		return new FormGroup<UpdateTrialRequestFormProperties>({
			TrialName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DisplayName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTrialComponentResponse {
		TrialComponentArn?: string;
	}
	export interface UpdateTrialComponentResponseFormProperties {
		TrialComponentArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTrialComponentResponseFormGroup() {
		return new FormGroup<UpdateTrialComponentResponseFormProperties>({
			TrialComponentArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTrialComponentRequest {

		/** Required */
		TrialComponentName: string;
		DisplayName?: string;
		Status?: TrialComponentStatus;
		StartTime?: Date;
		EndTime?: Date;
		Parameters?: TrialComponentParameters;
		ParametersToRemove?: Array<string>;
		InputArtifacts?: TrialComponentArtifacts;
		InputArtifactsToRemove?: Array<string>;
		OutputArtifacts?: TrialComponentArtifacts;
		OutputArtifactsToRemove?: Array<string>;
	}
	export interface UpdateTrialComponentRequestFormProperties {

		/** Required */
		TrialComponentName: FormControl<string | null | undefined>,
		DisplayName: FormControl<string | null | undefined>,
		StartTime: FormControl<Date | null | undefined>,
		EndTime: FormControl<Date | null | undefined>,
	}
	export function CreateUpdateTrialComponentRequestFormGroup() {
		return new FormGroup<UpdateTrialComponentRequestFormProperties>({
			TrialComponentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DisplayName: new FormControl<string | null | undefined>(undefined),
			StartTime: new FormControl<Date | null | undefined>(undefined),
			EndTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface UpdateUserProfileResponse {
		UserProfileArn?: string;
	}
	export interface UpdateUserProfileResponseFormProperties {
		UserProfileArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateUserProfileResponseFormGroup() {
		return new FormGroup<UpdateUserProfileResponseFormProperties>({
			UserProfileArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateUserProfileRequest {

		/** Required */
		DomainId: string;

		/** Required */
		UserProfileName: string;
		UserSettings?: UserSettings;
	}
	export interface UpdateUserProfileRequestFormProperties {

		/** Required */
		DomainId: FormControl<string | null | undefined>,

		/** Required */
		UserProfileName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateUserProfileRequestFormGroup() {
		return new FormGroup<UpdateUserProfileRequestFormProperties>({
			DomainId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserProfileName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateWorkforceResponse {

		/** Required */
		Workforce: Workforce;
	}
	export interface UpdateWorkforceResponseFormProperties {
	}
	export function CreateUpdateWorkforceResponseFormGroup() {
		return new FormGroup<UpdateWorkforceResponseFormProperties>({
		});

	}

	export interface UpdateWorkforceRequest {

		/** Required */
		WorkforceName: string;
		SourceIpConfig?: SourceIpConfig;
		OidcConfig?: OidcConfig;
		WorkforceVpcConfig?: WorkforceVpcConfigRequest;
	}
	export interface UpdateWorkforceRequestFormProperties {

		/** Required */
		WorkforceName: FormControl<string | null | undefined>,
	}
	export function CreateUpdateWorkforceRequestFormGroup() {
		return new FormGroup<UpdateWorkforceRequestFormProperties>({
			WorkforceName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateWorkteamResponse {

		/** Required */
		Workteam: Workteam;
	}
	export interface UpdateWorkteamResponseFormProperties {
	}
	export function CreateUpdateWorkteamResponseFormGroup() {
		return new FormGroup<UpdateWorkteamResponseFormProperties>({
		});

	}

	export interface UpdateWorkteamRequest {

		/** Required */
		WorkteamName: string;
		MemberDefinitions?: Array<MemberDefinition>;
		Description?: string;
		NotificationConfiguration?: NotificationConfiguration;
	}
	export interface UpdateWorkteamRequestFormProperties {

		/** Required */
		WorkteamName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateWorkteamRequestFormGroup() {
		return new FormGroup<UpdateWorkteamRequestFormProperties>({
			WorkteamName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AggregationTransformationValue { sum = 'sum', avg = 'avg', first = 'first', min = 'min', max = 'max' }

	export enum AlgorithmSortBy { Name = 'Name', CreationTime = 'CreationTime' }


	/** The data storage format for Athena query results. */
	export enum AthenaResultFormat { PARQUET = 'PARQUET', ORC = 'ORC', AVRO = 'AVRO', JSON = 'JSON', TEXTFILE = 'TEXTFILE' }


	/** The compression used for Athena query results. */
	export enum AthenaResultCompressionType { GZIP = 'GZIP', SNAPPY = 'SNAPPY', ZLIB = 'ZLIB' }

	export enum AutoMLJobObjectiveType { Maximize = 'Maximize', Minimize = 'Minimize' }

	export enum AutoMLJobStatus { Completed = 'Completed', InProgress = 'InProgress', Failed = 'Failed', Stopped = 'Stopped', Stopping = 'Stopping' }

	export enum AutoMLProcessingUnit { CPU = 'CPU', GPU = 'GPU' }

	export enum AutoMLS3DataType { ManifestFile = 'ManifestFile', S3Prefix = 'S3Prefix', AugmentedManifestFile = 'AugmentedManifestFile' }

	export enum AutoMLSortOrder { Ascending = 'Ascending', Descending = 'Descending' }


	/** The error code and error description associated with the resource. */
	export interface BatchDescribeModelPackageError {

		/** Required */
		ErrorCode: string;

		/** Required */
		ErrorResponse: string;
	}

	/** The error code and error description associated with the resource. */
	export interface BatchDescribeModelPackageErrorFormProperties {

		/** Required */
		ErrorCode: FormControl<string | null | undefined>,

		/** Required */
		ErrorResponse: FormControl<string | null | undefined>,
	}
	export function CreateBatchDescribeModelPackageErrorFormGroup() {
		return new FormGroup<BatchDescribeModelPackageErrorFormProperties>({
			ErrorCode: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ErrorResponse: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ModelPackageStatus { Pending = 'Pending', InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Deleting = 'Deleting' }


	/** Provides summary information about the model package. */
	export interface BatchDescribeModelPackageSummary {

		/** Required */
		ModelPackageGroupName: string;
		ModelPackageVersion?: number | null;

		/** Required */
		ModelPackageArn: string;
		ModelPackageDescription?: string;

		/** Required */
		CreationTime: Date;

		/**
		 * Defines how to perform inference generation after a training job is run.
		 * Required
		 */
		InferenceSpecification: InferenceSpecification;

		/** Required */
		ModelPackageStatus: AlgorithmStatus;
		ModelApprovalStatus?: ModelApprovalStatus;
	}

	/** Provides summary information about the model package. */
	export interface BatchDescribeModelPackageSummaryFormProperties {

		/** Required */
		ModelPackageGroupName: FormControl<string | null | undefined>,
		ModelPackageVersion: FormControl<number | null | undefined>,

		/** Required */
		ModelPackageArn: FormControl<string | null | undefined>,
		ModelPackageDescription: FormControl<string | null | undefined>,

		/** Required */
		CreationTime: FormControl<Date | null | undefined>,

		/** Required */
		ModelPackageStatus: FormControl<AlgorithmStatus | null | undefined>,
		ModelApprovalStatus: FormControl<ModelApprovalStatus | null | undefined>,
	}
	export function CreateBatchDescribeModelPackageSummaryFormGroup() {
		return new FormGroup<BatchDescribeModelPackageSummaryFormProperties>({
			ModelPackageGroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageVersion: new FormControl<number | null | undefined>(undefined),
			ModelPackageArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ModelPackageDescription: new FormControl<string | null | undefined>(undefined),
			CreationTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			ModelPackageStatus: new FormControl<AlgorithmStatus | null | undefined>(undefined, [Validators.required]),
			ModelApprovalStatus: new FormControl<ModelApprovalStatus | null | undefined>(undefined),
		});

	}

	export enum ProcessingS3DataDistributionType { FullyReplicated = 'FullyReplicated', ShardedByS3Key = 'ShardedByS3Key' }

	export enum CodeRepositorySortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum DirectInternetAccess { Enabled = 'Enabled', Disabled = 'Disabled' }

	export enum RootAccess { Enabled = 'Enabled', Disabled = 'Disabled' }

	export enum DataDistributionType { FullyReplicated = 'FullyReplicated', ShardedByS3Key = 'ShardedByS3Key' }

	export enum InputMode { Pipe = 'Pipe', File = 'File' }

	export enum HyperParameterTuningJobStatus { Completed = 'Completed', InProgress = 'InProgress', Failed = 'Failed', Stopped = 'Stopped', Stopping = 'Stopping' }

	export enum ProcessingJobStatus { InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Stopping = 'Stopping', Stopped = 'Stopped' }

	export enum SpaceStatus { Deleting = 'Deleting', Failed = 'Failed', InService = 'InService', Pending = 'Pending', Updating = 'Updating', Update_Failed = 'Update_Failed', Delete_Failed = 'Delete_Failed' }

	export enum TrainingJobStatus { InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Stopping = 'Stopping', Stopped = 'Stopped' }

	export enum ProfilingStatus { Enabled = 'Enabled', Disabled = 'Disabled' }

	export enum TransformJobStatus { InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed', Stopping = 'Stopping', Stopped = 'Stopped' }

	export enum UserProfileStatus { Deleting = 'Deleting', Failed = 'Failed', InService = 'InService', Pending = 'Pending', Updating = 'Updating', Update_Failed = 'Update_Failed', Delete_Failed = 'Delete_Failed' }

	export enum DetailedModelPackageStatus { NotStarted = 'NotStarted', InProgress = 'InProgress', Completed = 'Completed', Failed = 'Failed' }

	export enum EndpointConfigSortKey { Name = 'Name', CreationTime = 'CreationTime' }

	export enum EndpointSortKey { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum FeatureGroupSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum FeatureStatus { ENABLED = 'ENABLED', DISABLED = 'DISABLED' }

	export interface FillingTransformationMap {
	}
	export interface FillingTransformationMapFormProperties {
	}
	export function CreateFillingTransformationMapFormGroup() {
		return new FormGroup<FillingTransformationMapFormProperties>({
		});

	}

	export enum FillingType { frontfill = 'frontfill', middlefill = 'middlefill', backfill = 'backfill', futurefill = 'futurefill', frontfill_value = 'frontfill_value', middlefill_value = 'middlefill_value', backfill_value = 'backfill_value', futurefill_value = 'futurefill_value' }

	export enum SagemakerServicecatalogStatus { Enabled = 'Enabled', Disabled = 'Disabled' }

	export enum ImageSortOrder { ASCENDING = 'ASCENDING', DESCENDING = 'DESCENDING' }

	export enum SortArtifactsBy { CreationTime = 'CreationTime' }

	export enum ListCompilationJobsSortBy { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum SortContextsBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum MonitoringJobDefinitionSortKey { Name = 'Name', CreationTime = 'CreationTime' }

	export enum OrderKey { Ascending = 'Ascending', Descending = 'Descending' }

	export enum SortExperimentsBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum SortInferenceExperimentsBy { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum ListInferenceRecommendationsJobsSortBy { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum ListLabelingJobsForWorkteamSortByOptions { CreationTime = 'CreationTime' }

	export enum SortBy { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum SortLineageGroupsBy { Name = 'Name', CreationTime = 'CreationTime' }


	/** Attribute by which to sort returned export jobs. */
	export enum ModelCardExportJobSortBy { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum ModelCardExportJobSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum ModelCardSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum ModelCardSortBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum ModelPackageGroupSortBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum ModelPackageSortBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum ModelSortKey { Name = 'Name', CreationTime = 'CreationTime' }

	export enum MonitoringScheduleSortKey { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum NotebookInstanceLifecycleConfigSortKey { Name = 'Name', CreationTime = 'CreationTime', LastModifiedTime = 'LastModifiedTime' }

	export enum NotebookInstanceLifecycleConfigSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum NotebookInstanceSortKey { Name = 'Name', CreationTime = 'CreationTime', Status = 'Status' }

	export enum NotebookInstanceSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum SortPipelinesBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum ProjectSortBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum ProjectSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum ResourceCatalogSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum ResourceCatalogSortBy { CreationTime = 'CreationTime' }

	export enum StudioLifecycleConfigSortKey { CreationTime = 'CreationTime', LastModifiedTime = 'LastModifiedTime', Name = 'Name' }

	export enum SortTrialComponentsBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum SortTrialsBy { Name = 'Name', CreationTime = 'CreationTime' }

	export enum UserProfileSortKey { CreationTime = 'CreationTime', LastModifiedTime = 'LastModifiedTime' }

	export enum ListWorkteamsSortByOptions { Name = 'Name', CreateDate = 'CreateDate' }

	export enum ModelCompressionType { None = 'None', Gzip = 'Gzip' }

	export enum MonitoringProblemType { BinaryClassification = 'BinaryClassification', MulticlassClassification = 'MulticlassClassification', Regression = 'Regression' }

	export enum ModelVariantAction { Retain = 'Retain', Remove = 'Remove', Promote = 'Promote' }

	export enum ProcessingS3CompressionType { None = 'None', Gzip = 'Gzip' }


	/** The data storage format for Redshift query results. */
	export enum RedshiftResultFormat { PARQUET = 'PARQUET', CSV = 'CSV' }


	/** The compression used for Redshift query results. */
	export enum RedshiftResultCompressionType { None = 'None', GZIP = 'GZIP', BZIP2 = 'BZIP2', ZSTD = 'ZSTD', SNAPPY = 'SNAPPY' }

	export enum SearchSortOrder { Ascending = 'Ascending', Descending = 'Descending' }

	export enum TrainingRepositoryAccessMode { Platform = 'Platform', Vpc = 'Vpc' }


	/** <p>Represents an input or output artifact of a trial component. You specify <code>TrialComponentArtifact</code> as part of the <code>InputArtifacts</code> and <code>OutputArtifacts</code> parameters in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> request.</p> <p>Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types. Examples of output artifacts are metrics, snapshots, logs, and images.</p> */
	export interface TrialComponentArtifact {
		MediaType?: string;

		/** Required */
		Value: string;
	}

	/** <p>Represents an input or output artifact of a trial component. You specify <code>TrialComponentArtifact</code> as part of the <code>InputArtifacts</code> and <code>OutputArtifacts</code> parameters in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> request.</p> <p>Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types. Examples of output artifacts are metrics, snapshots, logs, and images.</p> */
	export interface TrialComponentArtifactFormProperties {
		MediaType: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateTrialComponentArtifactFormGroup() {
		return new FormGroup<TrialComponentArtifactFormProperties>({
			MediaType: new FormControl<string | null | undefined>(undefined),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The value of a hyperparameter. Only one of <code>NumberValue</code> or <code>StringValue</code> can be specified.</p> <p>This object is specified in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> request.</p> */
	export interface TrialComponentParameterValue {
		StringValue?: string;
		NumberValue?: number | null;
	}

	/** <p>The value of a hyperparameter. Only one of <code>NumberValue</code> or <code>StringValue</code> can be specified.</p> <p>This object is specified in the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> request.</p> */
	export interface TrialComponentParameterValueFormProperties {
		StringValue: FormControl<string | null | undefined>,
		NumberValue: FormControl<number | null | undefined>,
	}
	export function CreateTrialComponentParameterValueFormGroup() {
		return new FormGroup<TrialComponentParameterValueFormProperties>({
			StringValue: new FormControl<string | null | undefined>(undefined),
			NumberValue: new FormControl<number | null | undefined>(undefined),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Creates an <i>association</i> between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		 * Post #X-Amz-Target=SageMaker.AddAssociation
		 * @return {AddAssociationResponse} Success
		 */
		AddAssociation(requestBody: AddAssociationRequest): Observable<AddAssociationResponse> {
			return this.http.post<AddAssociationResponse>(this.baseUri + '#X-Amz-Target=SageMaker.AddAssociation', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints.</p> <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">Amazon Web Services Tagging Strategies</a>.</p> <note> <p>Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the <code>Tags</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html">CreateHyperParameterTuningJob</a> </p> </note> <note> <p>Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the <code>Tags</code> parameter of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html">CreateDomain</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html">CreateUserProfile</a>.</p> </note>
		 * Post #X-Amz-Target=SageMaker.AddTags
		 * @return {AddTagsOutput} Success
		 */
		AddTags(requestBody: AddTagsInput): Observable<AddTagsOutput> {
			return this.http.post<AddTagsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.AddTags', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a> API.
		 * Post #X-Amz-Target=SageMaker.AssociateTrialComponent
		 * @return {AssociateTrialComponentResponse} Success
		 */
		AssociateTrialComponent(requestBody: AssociateTrialComponentRequest): Observable<AssociateTrialComponentResponse> {
			return this.http.post<AssociateTrialComponentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.AssociateTrialComponent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * This action batch describes a list of versioned model packages
		 * Post #X-Amz-Target=SageMaker.BatchDescribeModelPackage
		 * @return {BatchDescribeModelPackageOutput} Success
		 */
		BatchDescribeModelPackage(requestBody: BatchDescribeModelPackageInput): Observable<BatchDescribeModelPackageOutput> {
			return this.http.post<BatchDescribeModelPackageOutput>(this.baseUri + '#X-Amz-Target=SageMaker.BatchDescribeModelPackage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates an <i>action</i>. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		 * Post #X-Amz-Target=SageMaker.CreateAction
		 * @return {CreateActionResponse} Success
		 */
		CreateAction(requestBody: CreateActionRequest): Observable<CreateActionResponse> {
			return this.http.post<CreateActionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateAction', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.
		 * Post #X-Amz-Target=SageMaker.CreateAlgorithm
		 * @return {CreateAlgorithmOutput} Success
		 */
		CreateAlgorithm(requestBody: CreateAlgorithmInput): Observable<CreateAlgorithmOutput> {
			return this.http.post<CreateAlgorithmOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateAlgorithm', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
		 * Post #X-Amz-Target=SageMaker.CreateApp
		 * @return {CreateAppResponse} Success
		 */
		CreateApp(requestBody: CreateAppRequest): Observable<CreateAppResponse> {
			return this.http.post<CreateAppResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateApp', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.
		 * Post #X-Amz-Target=SageMaker.CreateAppImageConfig
		 * @return {CreateAppImageConfigResponse} Success
		 */
		CreateAppImageConfig(requestBody: CreateAppImageConfigRequest): Observable<CreateAppImageConfigResponse> {
			return this.http.post<CreateAppImageConfigResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateAppImageConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates an <i>artifact</i>. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		 * Post #X-Amz-Target=SageMaker.CreateArtifact
		 * @return {CreateArtifactResponse} Success
		 */
		CreateArtifact(requestBody: CreateArtifactRequest): Observable<CreateArtifactResponse> {
			return this.http.post<CreateArtifactResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateArtifact', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates an Autopilot job also referred to as Autopilot experiment or AutoML job.</p> <note> <p>We recommend using the new versions <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>, which offer backward compatibility.</p> <p> <code>CreateAutoMLJobV2</code> can manage tabular problem types identical to those of its previous version <code>CreateAutoMLJob</code>, as well as non-tabular problem types such as image or text classification.</p> <p>Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to <code>CreateAutoMLJobV2</code> in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2">Migrate a CreateAutoMLJob to CreateAutoMLJobV2</a>.</p> </note> <p>You can find the best-performing model after you run an AutoML job by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a> (recommended) or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html">DescribeAutoMLJob</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateAutoMLJob
		 * @return {CreateAutoMLJobResponse} Success
		 */
		CreateAutoMLJob(requestBody: CreateAutoMLJobRequest): Observable<CreateAutoMLJobResponse> {
			return this.http.post<CreateAutoMLJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateAutoMLJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates an Autopilot job also referred to as Autopilot experiment or AutoML job V2.</p> <note> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a> are new versions of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJob.html">DescribeAutoMLJob</a> which offer backward compatibility.</p> <p> <code>CreateAutoMLJobV2</code> can manage tabular problem types identical to those of its previous version <code>CreateAutoMLJob</code>, as well as non-tabular problem types such as image or text classification.</p> <p>Find guidelines about how to migrate a <code>CreateAutoMLJob</code> to <code>CreateAutoMLJobV2</code> in <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment-api.html#autopilot-create-experiment-api-migrate-v1-v2">Migrate a CreateAutoMLJob to CreateAutoMLJobV2</a>.</p> </note> <p>For the list of available problem types supported by <code>CreateAutoMLJobV2</code>, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLProblemTypeConfig.html">AutoMLProblemTypeConfig</a>.</p> <p>You can find the best-performing model after you run an AutoML job V2 by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeAutoMLJobV2.html">DescribeAutoMLJobV2</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateAutoMLJobV2
		 * @return {CreateAutoMLJobV2Response} Success
		 */
		CreateAutoMLJobV2(requestBody: CreateAutoMLJobV2Request): Observable<CreateAutoMLJobV2Response> {
			return this.http.post<CreateAutoMLJobV2Response>(this.baseUri + '#X-Amz-Target=SageMaker.CreateAutoMLJobV2', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.</p> <p>The repository can be hosted either in <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">Amazon Web Services CodeCommit</a> or in any other Git repository.</p>
		 * Post #X-Amz-Target=SageMaker.CreateCodeRepository
		 * @return {CreateCodeRepositoryOutput} Success
		 */
		CreateCodeRepository(requestBody: CreateCodeRepositoryInput): Observable<CreateCodeRepositoryOutput> {
			return this.http.post<CreateCodeRepositoryOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateCodeRepository', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. </p> <p>If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p>A name for the compilation job</p> </li> <li> <p> Information about the input model artifacts </p> </li> <li> <p>The output location for the compiled model and the device (target) that the model runs on </p> </li> <li> <p>The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job. </p> </li> </ul> <p>You can also provide a <code>Tag</code> to track the model compilation job's resource use and costs. The response body contains the <code>CompilationJobArn</code> for the compiled job.</p> <p>To stop a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopCompilationJob.html">StopCompilationJob</a>. To get information about a particular model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>. To get information about multiple model compilation jobs, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateCompilationJob
		 * @return {CreateCompilationJobResponse} Success
		 */
		CreateCompilationJob(requestBody: CreateCompilationJobRequest): Observable<CreateCompilationJobResponse> {
			return this.http.post<CreateCompilationJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateCompilationJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a <i>context</i>. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html">Amazon SageMaker ML Lineage Tracking</a>.
		 * Post #X-Amz-Target=SageMaker.CreateContext
		 * @return {CreateContextResponse} Success
		 */
		CreateContext(requestBody: CreateContextRequest): Observable<CreateContextResponse> {
			return this.http.post<CreateContextResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateContext', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a definition for a job that monitors data quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.
		 * Post #X-Amz-Target=SageMaker.CreateDataQualityJobDefinition
		 * @return {CreateDataQualityJobDefinitionResponse} Success
		 */
		CreateDataQualityJobDefinition(requestBody: CreateDataQualityJobDefinitionRequest): Observable<CreateDataQualityJobDefinitionResponse> {
			return this.http.post<CreateDataQualityJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateDataQualityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a device fleet.
		 * Post #X-Amz-Target=SageMaker.CreateDeviceFleet
		 * @return {void} Success
		 */
		CreateDeviceFleet(requestBody: CreateDeviceFleetRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.CreateDeviceFleet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Creates a <code>Domain</code> used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.</p> <p> <b>EFS storage</b> </p> <p>When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.</p> <p>SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html">Protect Data at Rest Using Encryption</a>.</p> <p> <b>VPC configuration</b> </p> <p>All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the <code>AppNetworkAccessType</code> parameter. <code>AppNetworkAccessType</code> corresponds to the network access type that you choose when you onboard to Studio. The following options are available:</p> <ul> <li> <p> <code>PublicInternetOnly</code> - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.</p> </li> <li> <p> <code>VpcOnly</code> - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.</p> <p>When internet access is disabled, you won't be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.</p> </li> </ul> <important> <p>NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html">Connect SageMaker Studio Notebooks to Resources in a VPC</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateDomain
		 * @return {CreateDomainResponse} Success
		 */
		CreateDomain(requestBody: CreateDomainRequest): Observable<CreateDomainResponse> {
			return this.http.post<CreateDomainResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateDomain', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.
		 * Post #X-Amz-Target=SageMaker.CreateEdgeDeploymentPlan
		 * @return {CreateEdgeDeploymentPlanResponse} Success
		 */
		CreateEdgeDeploymentPlan(requestBody: CreateEdgeDeploymentPlanRequest): Observable<CreateEdgeDeploymentPlanResponse> {
			return this.http.post<CreateEdgeDeploymentPlanResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateEdgeDeploymentPlan', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a new stage in an existing edge deployment plan.
		 * Post #X-Amz-Target=SageMaker.CreateEdgeDeploymentStage
		 * @return {void} Success
		 */
		CreateEdgeDeploymentStage(requestBody: CreateEdgeDeploymentStageRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.CreateEdgeDeploymentStage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.
		 * Post #X-Amz-Target=SageMaker.CreateEdgePackagingJob
		 * @return {void} Success
		 */
		CreateEdgePackagingJob(requestBody: CreateEdgePackagingJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.CreateEdgePackagingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a> API. </p> <p> Use this API to deploy models using SageMaker hosting services. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see the <a href="https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb">Create Endpoint example notebook.</a> </p> <note> <p> You must not delete an <code>EndpointConfig</code> that is in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> </note> <p>The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. </p> <p>When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. </p> <note> <p>When you call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a> before calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note> <p>When SageMaker receives the request, it sets the endpoint status to <code>Creating</code>. After it creates the endpoint, it sets the status to <code>InService</code>. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API.</p> <p>If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p> <note> <p> To add the IAM role policies for using this API operation, go to the <a href="https://console.aws.amazon.com/iam/">IAM console</a>, and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html">CreateEndpointConfig</a> API operations, add the following policies to the role. </p> <ul> <li> <p>Option 1: For a full SageMaker access, search and attach the <code>AmazonSageMakerFullAccess</code> policy.</p> </li> <li> <p>Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: </p> <p> <code>"Action": ["sagemaker:CreateEndpoint", "sagemaker:CreateEndpointConfig"]</code> </p> <p> <code>"Resource": [</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint/endpointName"</code> </p> <p> <code>"arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"</code> </p> <p> <code>]</code> </p> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">SageMaker API Permissions: Actions, Permissions, and Resources Reference</a>.</p> </li> </ul> </note>
		 * Post #X-Amz-Target=SageMaker.CreateEndpoint
		 * @return {CreateEndpointOutput} Success
		 */
		CreateEndpoint(requestBody: CreateEndpointInput): Observable<CreateEndpointOutput> {
			return this.http.post<CreateEndpointOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateEndpoint', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the <code>CreateModel</code> API, to deploy and the resources that you want SageMaker to provision. Then you call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> API.</p> <note> <p> Use this API if you want to use SageMaker hosting services to deploy models into production. </p> </note> <p>In the request, you define a <code>ProductionVariant</code>, for each model that you want to deploy. Each <code>ProductionVariant</code> parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. </p> <p>If you are hosting multiple models, you also assign a <code>VariantWeight</code> to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. </p> <note> <p>When you call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a>, a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html"> <code>Eventually Consistent Reads</code> </a>, the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpointConfig.html">DescribeEndpointConfig</a> before calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">CreateEndpoint</a> to minimize the potential impact of a DynamoDB eventually consistent read.</p> </note>
		 * Post #X-Amz-Target=SageMaker.CreateEndpointConfig
		 * @return {CreateEndpointConfigOutput} Success
		 */
		CreateEndpointConfig(requestBody: CreateEndpointConfigInput): Observable<CreateEndpointConfigOutput> {
			return this.http.post<CreateEndpointConfigOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateEndpointConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a SageMaker <i>experiment</i>. An experiment is a collection of <i>trials</i> that are observed, compared and evaluated as a group. A trial is a set of steps, called <i>trial components</i>, that produce a machine learning model.</p> <note> <p>In the Studio UI, trials are referred to as <i>run groups</i> and trial components are referred to as <i>runs</i>.</p> </note> <p>The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to experiments, trials, trial components and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p> <p>To add a description to an experiment, specify the optional <code>Description</code> parameter. To add a description later, or to change the description, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateExperiment.html">UpdateExperiment</a> API.</p> <p>To get a list of all your experiments, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListExperiments.html">ListExperiments</a> API. To view an experiment's properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html">DescribeExperiment</a> API. To get a list of all the trials associated with an experiment, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API. To create a trial call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrial.html">CreateTrial</a> API.</p>
		 * Post #X-Amz-Target=SageMaker.CreateExperiment
		 * @return {CreateExperimentResponse} Success
		 */
		CreateExperiment(requestBody: CreateExperimentRequest): Observable<CreateExperimentResponse> {
			return this.http.post<CreateExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Create a new <code>FeatureGroup</code>. A <code>FeatureGroup</code> is a group of <code>Features</code> defined in the <code>FeatureStore</code> to describe a <code>Record</code>. </p> <p>The <code>FeatureGroup</code> defines the schema and features contained in the FeatureGroup. A <code>FeatureGroup</code> definition is composed of a list of <code>Features</code>, a <code>RecordIdentifierFeatureName</code>, an <code>EventTimeFeatureName</code> and configurations for its <code>OnlineStore</code> and <code>OfflineStore</code>. Check <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Web Services service quotas</a> to see the <code>FeatureGroup</code>s quota for your Amazon Web Services account.</p> <important> <p>You must include at least one of <code>OnlineStoreConfig</code> and <code>OfflineStoreConfig</code> to create a <code>FeatureGroup</code>.</p> </important>
		 * Post #X-Amz-Target=SageMaker.CreateFeatureGroup
		 * @return {CreateFeatureGroupResponse} Success
		 */
		CreateFeatureGroup(requestBody: CreateFeatureGroupRequest): Observable<CreateFeatureGroupResponse> {
			return this.http.post<CreateFeatureGroupResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateFeatureGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a flow definition.
		 * Post #X-Amz-Target=SageMaker.CreateFlowDefinition
		 * @return {CreateFlowDefinitionResponse} Success
		 */
		CreateFlowDefinition(requestBody: CreateFlowDefinitionRequest): Observable<CreateFlowDefinitionResponse> {
			return this.http.post<CreateFlowDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateFlowDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Create a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.CreateHub
		 * @return {CreateHubResponse} Success
		 */
		CreateHub(requestBody: CreateHubRequest): Observable<CreateHubResponse> {
			return this.http.post<CreateHubResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateHub', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.
		 * Post #X-Amz-Target=SageMaker.CreateHumanTaskUi
		 * @return {CreateHumanTaskUiResponse} Success
		 */
		CreateHumanTaskUi(requestBody: CreateHumanTaskUiRequest): Observable<CreateHumanTaskUiResponse> {
			return this.http.post<CreateHumanTaskUiResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateHumanTaskUi', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose.</p> <p>A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view">View Experiments, Trials, and Trial Components</a>.</p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important>
		 * Post #X-Amz-Target=SageMaker.CreateHyperParameterTuningJob
		 * @return {CreateHyperParameterTuningJobResponse} Success
		 */
		CreateHyperParameterTuningJob(requestBody: CreateHyperParameterTuningJobRequest): Observable<CreateHyperParameterTuningJobResponse> {
			return this.http.post<CreateHyperParameterTuningJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateHyperParameterTuningJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html">Bring your own SageMaker image</a>.
		 * Post #X-Amz-Target=SageMaker.CreateImage
		 * @return {CreateImageResponse} Success
		 */
		CreateImage(requestBody: CreateImageRequest): Observable<CreateImageResponse> {
			return this.http.post<CreateImageResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateImage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a version of the SageMaker image specified by <code>ImageName</code>. The version represents the Amazon Elastic Container Registry (ECR) container image specified by <code>BaseImage</code>.
		 * Post #X-Amz-Target=SageMaker.CreateImageVersion
		 * @return {CreateImageVersionResponse} Success
		 */
		CreateImageVersion(requestBody: CreateImageVersionRequest): Observable<CreateImageVersionResponse> {
			return this.http.post<CreateImageVersionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateImageVersion', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p> Creates an inference experiment using the configurations specified in the request. </p> <p> Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html">Shadow tests</a>. </p> <p> Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration. </p> <p> While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html">View, monitor, and edit shadow tests</a>. </p>
		 * Post #X-Amz-Target=SageMaker.CreateInferenceExperiment
		 * @return {CreateInferenceExperimentResponse} Success
		 */
		CreateInferenceExperiment(requestBody: CreateInferenceExperimentRequest): Observable<CreateInferenceExperimentResponse> {
			return this.http.post<CreateInferenceExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateInferenceExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Starts a recommendation job. You can create either an instance recommendation or load test job.
		 * Post #X-Amz-Target=SageMaker.CreateInferenceRecommendationsJob
		 * @return {CreateInferenceRecommendationsJobResponse} Success
		 */
		CreateInferenceRecommendationsJob(requestBody: CreateInferenceRecommendationsJobRequest): Observable<CreateInferenceRecommendationsJobResponse> {
			return this.http.post<CreateInferenceRecommendationsJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateInferenceRecommendationsJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. </p> <p>You can select your workforce from one of three providers:</p> <ul> <li> <p>A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.</p> </li> <li> <p>One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas. </p> </li> <li> <p>The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.</p> </li> </ul> <p>You can also use <i>automated data labeling</i> to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses <i>active learning</i> to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html">Using Automated Data Labeling</a>.</p> <p>The data objects to be labeled are contained in an Amazon S3 bucket. You create a <i>manifest file</i> that describes the location of each object. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html">Using Input and Output Data</a>.</p> <p>The output can be used as the manifest file for another labeling job or as training data for your machine learning models.</p> <p>You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in <code>ManifestS3Uri</code> have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (<code>InProgress</code>) streaming labeling job in real time. To learn how to create a static labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html">Create a Labeling Job (API) </a> in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html">Create a Streaming Labeling Job</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateLabelingJob
		 * @return {CreateLabelingJobResponse} Success
		 */
		CreateLabelingJob(requestBody: CreateLabelingJobRequest): Observable<CreateLabelingJobResponse> {
			return this.http.post<CreateLabelingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateLabelingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions.</p> <p>Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job.</p> <p>To host your model, you create an endpoint configuration with the <code>CreateEndpointConfig</code> API, and then create an endpoint with the <code>CreateEndpoint</code> API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. </p> <p>For an example that calls this method when deploying a model to SageMaker hosting services, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model">Create a Model (Amazon Web Services SDK for Python (Boto 3)).</a> </p> <p>To run a batch transform using your model, you start a job with the <code>CreateTransformJob</code> API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location.</p> <p>In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.</p>
		 * Post #X-Amz-Target=SageMaker.CreateModel
		 * @return {CreateModelOutput} Success
		 */
		CreateModel(requestBody: CreateModelInput): Observable<CreateModelOutput> {
			return this.http.post<CreateModelOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates the definition for a model bias job.
		 * Post #X-Amz-Target=SageMaker.CreateModelBiasJobDefinition
		 * @return {CreateModelBiasJobDefinitionResponse} Success
		 */
		CreateModelBiasJobDefinition(requestBody: CreateModelBiasJobDefinitionRequest): Observable<CreateModelBiasJobDefinitionResponse> {
			return this.http.post<CreateModelBiasJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModelBiasJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates an Amazon SageMaker Model Card.</p> <p>For information about how to use model cards, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html">Amazon SageMaker Model Card</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateModelCard
		 * @return {CreateModelCardResponse} Success
		 */
		CreateModelCard(requestBody: CreateModelCardRequest): Observable<CreateModelCardResponse> {
			return this.http.post<CreateModelCardResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModelCard', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates an Amazon SageMaker Model Card export job.
		 * Post #X-Amz-Target=SageMaker.CreateModelCardExportJob
		 * @return {CreateModelCardExportJobResponse} Success
		 */
		CreateModelCardExportJob(requestBody: CreateModelCardExportJobRequest): Observable<CreateModelCardExportJobResponse> {
			return this.http.post<CreateModelCardExportJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModelCardExportJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates the definition for a model explainability job.
		 * Post #X-Amz-Target=SageMaker.CreateModelExplainabilityJobDefinition
		 * @return {CreateModelExplainabilityJobDefinitionResponse} Success
		 */
		CreateModelExplainabilityJobDefinition(requestBody: CreateModelExplainabilityJobDefinitionRequest): Observable<CreateModelExplainabilityJobDefinitionResponse> {
			return this.http.post<CreateModelExplainabilityJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModelExplainabilityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p> <p>To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for <code>InferenceSpecification</code>. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for <code>SourceAlgorithmSpecification</code>.</p> <note> <p>There are two types of model packages:</p> <ul> <li> <p>Versioned - a model that is part of a model group in the model registry.</p> </li> <li> <p>Unversioned - a model package that is not part of a model group.</p> </li> </ul> </note>
		 * Post #X-Amz-Target=SageMaker.CreateModelPackage
		 * @return {CreateModelPackageOutput} Success
		 */
		CreateModelPackage(requestBody: CreateModelPackageInput): Observable<CreateModelPackageOutput> {
			return this.http.post<CreateModelPackageOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModelPackage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a model group. A model group contains a group of model versions.
		 * Post #X-Amz-Target=SageMaker.CreateModelPackageGroup
		 * @return {CreateModelPackageGroupOutput} Success
		 */
		CreateModelPackageGroup(requestBody: CreateModelPackageGroupInput): Observable<CreateModelPackageGroupOutput> {
			return this.http.post<CreateModelPackageGroupOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModelPackageGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a definition for a job that monitors model quality and drift. For information about model monitor, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html">Amazon SageMaker Model Monitor</a>.
		 * Post #X-Amz-Target=SageMaker.CreateModelQualityJobDefinition
		 * @return {CreateModelQualityJobDefinitionResponse} Success
		 */
		CreateModelQualityJobDefinition(requestBody: CreateModelQualityJobDefinitionRequest): Observable<CreateModelQualityJobDefinitionResponse> {
			return this.http.post<CreateModelQualityJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateModelQualityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endpoint.
		 * Post #X-Amz-Target=SageMaker.CreateMonitoringSchedule
		 * @return {CreateMonitoringScheduleResponse} Success
		 */
		CreateMonitoringSchedule(requestBody: CreateMonitoringScheduleRequest): Observable<CreateMonitoringScheduleResponse> {
			return this.http.post<CreateMonitoringScheduleResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateMonitoringSchedule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. </p> <p>In a <code>CreateNotebookInstance</code> request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. </p> <p>SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. </p> <p>After receiving the request, SageMaker does the following:</p> <ol> <li> <p>Creates a network interface in the SageMaker VPC.</p> </li> <li> <p>(Option) If you specified <code>SubnetId</code>, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.</p> </li> <li> <p>Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified <code>SubnetId</code> of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.</p> </li> </ol> <p>After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can't change the name of a notebook instance after you create it.</p> <p>After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
		 * Post #X-Amz-Target=SageMaker.CreateNotebookInstance
		 * @return {CreateNotebookInstanceOutput} Success
		 */
		CreateNotebookInstance(requestBody: CreateNotebookInstanceInput): Observable<CreateNotebookInstanceOutput> {
			return this.http.post<CreateNotebookInstanceOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateNotebookInstance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a lifecycle configuration that you can associate with a notebook instance. A <i>lifecycle configuration</i> is a collection of shell scripts that run when you create or start a notebook instance.</p> <p>Each lifecycle configuration script has a limit of 16384 characters.</p> <p>The value of the <code>$PATH</code> environment variable that is available to both scripts is <code>/sbin:bin:/usr/sbin:/usr/bin</code>.</p> <p>View CloudWatch Logs for notebook instance lifecycle configurations in log group <code>/aws/sagemaker/NotebookInstances</code> in log stream <code>[notebook-instance-name]/[LifecycleConfigHook]</code>.</p> <p>Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateNotebookInstanceLifecycleConfig
		 * @return {CreateNotebookInstanceLifecycleConfigOutput} Success
		 */
		CreateNotebookInstanceLifecycleConfig(requestBody: CreateNotebookInstanceLifecycleConfigInput): Observable<CreateNotebookInstanceLifecycleConfigOutput> {
			return this.http.post<CreateNotebookInstanceLifecycleConfigOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateNotebookInstanceLifecycleConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a pipeline using a JSON pipeline definition.
		 * Post #X-Amz-Target=SageMaker.CreatePipeline
		 * @return {CreatePipelineResponse} Success
		 */
		CreatePipeline(requestBody: CreatePipelineRequest): Observable<CreatePipelineResponse> {
			return this.http.post<CreatePipelineResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreatePipeline', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. </p> <p>The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html">Connect to SageMaker Studio Through an Interface VPC Endpoint</a> .</p> <note> <p>The URL that you get from a call to <code>CreatePresignedDomainUrl</code> has a default timeout of 5 minutes. You can configure this value using <code>ExpiresInSeconds</code>. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
		 * Post #X-Amz-Target=SageMaker.CreatePresignedDomainUrl
		 * @return {CreatePresignedDomainUrlResponse} Success
		 */
		CreatePresignedDomainUrl(requestBody: CreatePresignedDomainUrlRequest): Observable<CreatePresignedDomainUrlResponse> {
			return this.http.post<CreatePresignedDomainUrlResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreatePresignedDomainUrl', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose <code>Open</code> next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page.</p> <p> The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance.</p> <p>You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the <code>NotIpAddress</code> condition operator and the <code>aws:SourceIP</code> condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter">Limit Access to a Notebook Instance by IP Address</a>.</p> <note> <p>The URL that you get from a call to <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreatePresignedNotebookInstanceUrl.html">CreatePresignedNotebookInstanceUrl</a> is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.</p> </note>
		 * Post #X-Amz-Target=SageMaker.CreatePresignedNotebookInstanceUrl
		 * @return {CreatePresignedNotebookInstanceUrlOutput} Success
		 */
		CreatePresignedNotebookInstanceUrl(requestBody: CreatePresignedNotebookInstanceUrlInput): Observable<CreatePresignedNotebookInstanceUrlOutput> {
			return this.http.post<CreatePresignedNotebookInstanceUrlOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreatePresignedNotebookInstanceUrl', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a processing job.
		 * Post #X-Amz-Target=SageMaker.CreateProcessingJob
		 * @return {CreateProcessingJobResponse} Success
		 */
		CreateProcessingJob(requestBody: CreateProcessingJobRequest): Observable<CreateProcessingJobResponse> {
			return this.http.post<CreateProcessingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateProcessingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
		 * Post #X-Amz-Target=SageMaker.CreateProject
		 * @return {CreateProjectOutput} Success
		 */
		CreateProject(requestBody: CreateProjectInput): Observable<CreateProjectOutput> {
			return this.http.post<CreateProjectOutput>(this.baseUri + '#X-Amz-Target=SageMaker.CreateProject', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a space used for real time collaboration in a Domain.
		 * Post #X-Amz-Target=SageMaker.CreateSpace
		 * @return {CreateSpaceResponse} Success
		 */
		CreateSpace(requestBody: CreateSpaceRequest): Observable<CreateSpaceResponse> {
			return this.http.post<CreateSpaceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateSpace', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a new Studio Lifecycle Configuration.
		 * Post #X-Amz-Target=SageMaker.CreateStudioLifecycleConfig
		 * @return {CreateStudioLifecycleConfigResponse} Success
		 */
		CreateStudioLifecycleConfig(requestBody: CreateStudioLifecycleConfigRequest): Observable<CreateStudioLifecycleConfigResponse> {
			return this.http.post<CreateStudioLifecycleConfigResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateStudioLifecycleConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. </p> <p>If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. </p> <p>In the request body, you provide the following: </p> <ul> <li> <p> <code>AlgorithmSpecification</code> - Identifies the training algorithm to use. </p> </li> <li> <p> <code>HyperParameters</code> - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html">Algorithms</a>. </p> <important> <p>Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.</p> </important> </li> <li> <p> <code>InputDataConfig</code> - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.</p> </li> <li> <p> <code>OutputDataConfig</code> - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training. </p> </li> <li> <p> <code>ResourceConfig</code> - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance. </p> </li> <li> <p> <code>EnableManagedSpotTraining</code> - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html">Managed Spot Training</a>. </p> </li> <li> <p> <code>RoleArn</code> - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training. </p> </li> <li> <p> <code>StoppingCondition</code> - To help cap training costs, use <code>MaxRuntimeInSeconds</code> to set a time limit for training. Use <code>MaxWaitTimeInSeconds</code> to specify how long a managed spot training job has to complete. </p> </li> <li> <p> <code>Environment</code> - The environment variables to set in the Docker container.</p> </li> <li> <p> <code>RetryStrategy</code> - The number of times to retry the job when the job fails due to an <code>InternalServerError</code>.</p> </li> </ul> <p> For more information about SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
		 * Post #X-Amz-Target=SageMaker.CreateTrainingJob
		 * @return {CreateTrainingJobResponse} Success
		 */
		CreateTrainingJob(requestBody: CreateTrainingJobRequest): Observable<CreateTrainingJobResponse> {
			return this.http.post<CreateTrainingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateTrainingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify.</p> <p>To perform batch transformations, you create a transform job and use the data that you have readily available.</p> <p>In the request body, you provide the following:</p> <ul> <li> <p> <code>TransformJobName</code> - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.</p> </li> <li> <p> <code>ModelName</code> - Identifies the model to use. <code>ModelName</code> must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html">CreateModel</a>.</p> </li> <li> <p> <code>TransformInput</code> - Describes the dataset to be transformed and the Amazon S3 location where it is stored.</p> </li> <li> <p> <code>TransformOutput</code> - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.</p> </li> <li> <p> <code>TransformResources</code> - Identifies the ML compute instances for the transform job.</p> </li> </ul> <p>For more information about how batch transformation works, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html">Batch Transform</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateTransformJob
		 * @return {CreateTransformJobResponse} Success
		 */
		CreateTransformJob(requestBody: CreateTransformJobRequest): Observable<CreateTransformJobResponse> {
			return this.http.post<CreateTransformJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateTransformJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates an SageMaker <i>trial</i>. A trial is a set of steps called <i>trial components</i> that produce a machine learning model. A trial is part of a single SageMaker <i>experiment</i>.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p> <p>To get a list of all your trials, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API. To view a trial's properties, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html">DescribeTrial</a> API. To create a trial component, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html">CreateTrialComponent</a> API.</p>
		 * Post #X-Amz-Target=SageMaker.CreateTrial
		 * @return {CreateTrialResponse} Success
		 */
		CreateTrial(requestBody: CreateTrialRequest): Observable<CreateTrialResponse> {
			return this.http.post<CreateTrialResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateTrial', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a <i>trial component</i>, which is a stage of a machine learning <i>trial</i>. A trial is composed of one or more trial components. A trial component can be used in multiple trials.</p> <p>Trial components include pre-processing jobs, training jobs, and batch transform jobs.</p> <p>When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK.</p> <p>You can add tags to a trial component and then use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API to search for the tags.</p>
		 * Post #X-Amz-Target=SageMaker.CreateTrialComponent
		 * @return {CreateTrialComponentResponse} Success
		 */
		CreateTrialComponent(requestBody: CreateTrialComponentRequest): Observable<CreateTrialComponentResponse> {
			return this.http.post<CreateTrialComponentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateTrialComponent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
		 * Post #X-Amz-Target=SageMaker.CreateUserProfile
		 * @return {CreateUserProfileResponse} Success
		 */
		CreateUserProfile(requestBody: CreateUserProfileRequest): Observable<CreateUserProfileResponse> {
			return this.http.post<CreateUserProfileResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateUserProfile', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkforce.html">DeleteWorkforce</a> API operation to delete the existing workforce and then use <code>CreateWorkforce</code> to create a new workforce.</p> <p>To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in <code>CognitoConfig</code>. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html"> Create a Private Workforce (Amazon Cognito)</a>.</p> <p>To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in <code>OidcConfig</code>. Your OIDC IdP must support <i>groups</i> because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html"> Create a Private Workforce (OIDC IdP)</a>.</p>
		 * Post #X-Amz-Target=SageMaker.CreateWorkforce
		 * @return {CreateWorkforceResponse} Success
		 */
		CreateWorkforce(requestBody: CreateWorkforceRequest): Observable<CreateWorkforceResponse> {
			return this.http.post<CreateWorkforceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateWorkforce', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.</p> <p>You cannot create more than 25 work teams in an account and region.</p>
		 * Post #X-Amz-Target=SageMaker.CreateWorkteam
		 * @return {CreateWorkteamResponse} Success
		 */
		CreateWorkteam(requestBody: CreateWorkteamRequest): Observable<CreateWorkteamResponse> {
			return this.http.post<CreateWorkteamResponse>(this.baseUri + '#X-Amz-Target=SageMaker.CreateWorkteam', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes an action.
		 * Post #X-Amz-Target=SageMaker.DeleteAction
		 * @return {DeleteActionResponse} Success
		 */
		DeleteAction(requestBody: DeleteActionRequest): Observable<DeleteActionResponse> {
			return this.http.post<DeleteActionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteAction', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes the specified algorithm from your account.
		 * Post #X-Amz-Target=SageMaker.DeleteAlgorithm
		 * @return {void} Success
		 */
		DeleteAlgorithm(requestBody: DeleteAlgorithmInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteAlgorithm', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Used to stop and delete an app.
		 * Post #X-Amz-Target=SageMaker.DeleteApp
		 * @return {void} Success
		 */
		DeleteApp(requestBody: DeleteAppRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteApp', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an AppImageConfig.
		 * Post #X-Amz-Target=SageMaker.DeleteAppImageConfig
		 * @return {void} Success
		 */
		DeleteAppImageConfig(requestBody: DeleteAppImageConfigRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteAppImageConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an artifact. Either <code>ArtifactArn</code> or <code>Source</code> must be specified.
		 * Post #X-Amz-Target=SageMaker.DeleteArtifact
		 * @return {DeleteArtifactResponse} Success
		 */
		DeleteArtifact(requestBody: DeleteArtifactRequest): Observable<DeleteArtifactResponse> {
			return this.http.post<DeleteArtifactResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteArtifact', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes an association.
		 * Post #X-Amz-Target=SageMaker.DeleteAssociation
		 * @return {DeleteAssociationResponse} Success
		 */
		DeleteAssociation(requestBody: DeleteAssociationRequest): Observable<DeleteAssociationResponse> {
			return this.http.post<DeleteAssociationResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteAssociation', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified Git repository from your account.
		 * Post #X-Amz-Target=SageMaker.DeleteCodeRepository
		 * @return {void} Success
		 */
		DeleteCodeRepository(requestBody: DeleteCodeRepositoryInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteCodeRepository', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an context.
		 * Post #X-Amz-Target=SageMaker.DeleteContext
		 * @return {DeleteContextResponse} Success
		 */
		DeleteContext(requestBody: DeleteContextRequest): Observable<DeleteContextResponse> {
			return this.http.post<DeleteContextResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteContext', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a data quality monitoring job definition.
		 * Post #X-Amz-Target=SageMaker.DeleteDataQualityJobDefinition
		 * @return {void} Success
		 */
		DeleteDataQualityJobDefinition(requestBody: DeleteDataQualityJobDefinitionRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteDataQualityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a fleet.
		 * Post #X-Amz-Target=SageMaker.DeleteDeviceFleet
		 * @return {void} Success
		 */
		DeleteDeviceFleet(requestBody: DeleteDeviceFleetRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteDeviceFleet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts.
		 * Post #X-Amz-Target=SageMaker.DeleteDomain
		 * @return {void} Success
		 */
		DeleteDomain(requestBody: DeleteDomainRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteDomain', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.
		 * Post #X-Amz-Target=SageMaker.DeleteEdgeDeploymentPlan
		 * @return {void} Success
		 */
		DeleteEdgeDeploymentPlan(requestBody: DeleteEdgeDeploymentPlanRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteEdgeDeploymentPlan', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Delete a stage in an edge deployment plan if (and only if) the stage is inactive.
		 * Post #X-Amz-Target=SageMaker.DeleteEdgeDeploymentStage
		 * @return {void} Success
		 */
		DeleteEdgeDeploymentStage(requestBody: DeleteEdgeDeploymentStageRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteEdgeDeploymentStage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. </p> <p>SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't need to use the <a href="http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html">RevokeGrant</a> API call.</p> <p>When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn">ExecutionRoleArn</a> </code>, otherwise SageMaker cannot delete these resources.</p>
		 * Post #X-Amz-Target=SageMaker.DeleteEndpoint
		 * @return {void} Success
		 */
		DeleteEndpoint(requestBody: DeleteEndpointInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteEndpoint', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Deletes an endpoint configuration. The <code>DeleteEndpointConfig</code> API deletes only the specified configuration. It does not delete endpoints created using the configuration. </p> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p>
		 * Post #X-Amz-Target=SageMaker.DeleteEndpointConfig
		 * @return {void} Success
		 */
		DeleteEndpointConfig(requestBody: DeleteEndpointConfigInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteEndpointConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTrials.html">ListTrials</a> API to get a list of the trials associated with the experiment.
		 * Post #X-Amz-Target=SageMaker.DeleteExperiment
		 * @return {DeleteExperimentResponse} Success
		 */
		DeleteExperiment(requestBody: DeleteExperimentRequest): Observable<DeleteExperimentResponse> {
			return this.http.post<DeleteExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Delete the <code>FeatureGroup</code> and any data that was written to the <code>OnlineStore</code> of the <code>FeatureGroup</code>. Data cannot be accessed from the <code>OnlineStore</code> immediately after <code>DeleteFeatureGroup</code> is called. </p> <p>Data written into the <code>OfflineStore</code> will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your <code>OfflineStore</code> are not deleted. </p>
		 * Post #X-Amz-Target=SageMaker.DeleteFeatureGroup
		 * @return {void} Success
		 */
		DeleteFeatureGroup(requestBody: DeleteFeatureGroupRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteFeatureGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified flow definition.
		 * Post #X-Amz-Target=SageMaker.DeleteFlowDefinition
		 * @return {DeleteFlowDefinitionResponse} Success
		 */
		DeleteFlowDefinition(requestBody: DeleteFlowDefinitionRequest): Observable<DeleteFlowDefinitionResponse> {
			return this.http.post<DeleteFlowDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteFlowDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Delete a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.DeleteHub
		 * @return {void} Success
		 */
		DeleteHub(requestBody: DeleteHubRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteHub', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Delete the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.DeleteHubContent
		 * @return {void} Success
		 */
		DeleteHubContent(requestBody: DeleteHubContentRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteHubContent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Use this operation to delete a human task user interface (worker task template).</p> <p> To see a list of human task user interfaces (work task templates) in your account, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListHumanTaskUis.html">ListHumanTaskUis</a>. When you delete a worker task template, it no longer appears when you call <code>ListHumanTaskUis</code>.</p>
		 * Post #X-Amz-Target=SageMaker.DeleteHumanTaskUi
		 * @return {DeleteHumanTaskUiResponse} Success
		 */
		DeleteHumanTaskUi(requestBody: DeleteHumanTaskUiRequest): Observable<DeleteHumanTaskUiResponse> {
			return this.http.post<DeleteHumanTaskUiResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteHumanTaskUi', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a SageMaker image and all versions of the image. The container images aren't deleted.
		 * Post #X-Amz-Target=SageMaker.DeleteImage
		 * @return {DeleteImageResponse} Success
		 */
		DeleteImage(requestBody: DeleteImageRequest): Observable<DeleteImageResponse> {
			return this.http.post<DeleteImageResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteImage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a version of a SageMaker image. The container image the version represents isn't deleted.
		 * Post #X-Amz-Target=SageMaker.DeleteImageVersion
		 * @return {DeleteImageVersionResponse} Success
		 */
		DeleteImageVersion(requestBody: DeleteImageVersionRequest): Observable<DeleteImageVersionResponse> {
			return this.http.post<DeleteImageVersionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteImageVersion', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Deletes an inference experiment.</p> <note> <p> This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment. </p> </note>
		 * Post #X-Amz-Target=SageMaker.DeleteInferenceExperiment
		 * @return {DeleteInferenceExperimentResponse} Success
		 */
		DeleteInferenceExperiment(requestBody: DeleteInferenceExperimentRequest): Observable<DeleteInferenceExperimentResponse> {
			return this.http.post<DeleteInferenceExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteInferenceExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a model. The <code>DeleteModel</code> API deletes only the model entry that was created in SageMaker when you called the <code>CreateModel</code> API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model.
		 * Post #X-Amz-Target=SageMaker.DeleteModel
		 * @return {void} Success
		 */
		DeleteModel(requestBody: DeleteModelInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an Amazon SageMaker model bias job definition.
		 * Post #X-Amz-Target=SageMaker.DeleteModelBiasJobDefinition
		 * @return {void} Success
		 */
		DeleteModelBiasJobDefinition(requestBody: DeleteModelBiasJobDefinitionRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModelBiasJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an Amazon SageMaker Model Card.
		 * Post #X-Amz-Target=SageMaker.DeleteModelCard
		 * @return {void} Success
		 */
		DeleteModelCard(requestBody: DeleteModelCardRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModelCard', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes an Amazon SageMaker model explainability job definition.
		 * Post #X-Amz-Target=SageMaker.DeleteModelExplainabilityJobDefinition
		 * @return {void} Success
		 */
		DeleteModelExplainabilityJobDefinition(requestBody: DeleteModelExplainabilityJobDefinitionRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModelExplainabilityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Deletes a model package.</p> <p>A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p>
		 * Post #X-Amz-Target=SageMaker.DeleteModelPackage
		 * @return {void} Success
		 */
		DeleteModelPackage(requestBody: DeleteModelPackageInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModelPackage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the specified model group.
		 * Post #X-Amz-Target=SageMaker.DeleteModelPackageGroup
		 * @return {void} Success
		 */
		DeleteModelPackageGroup(requestBody: DeleteModelPackageGroupInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModelPackageGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a model group resource policy.
		 * Post #X-Amz-Target=SageMaker.DeleteModelPackageGroupPolicy
		 * @return {void} Success
		 */
		DeleteModelPackageGroupPolicy(requestBody: DeleteModelPackageGroupPolicyInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModelPackageGroupPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the secified model quality monitoring job definition.
		 * Post #X-Amz-Target=SageMaker.DeleteModelQualityJobDefinition
		 * @return {void} Success
		 */
		DeleteModelQualityJobDefinition(requestBody: DeleteModelQualityJobDefinitionRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteModelQualityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule.
		 * Post #X-Amz-Target=SageMaker.DeleteMonitoringSchedule
		 * @return {void} Success
		 */
		DeleteMonitoringSchedule(requestBody: DeleteMonitoringScheduleRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteMonitoringSchedule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p> Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the <code>StopNotebookInstance</code> API. </p> <important> <p>When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance. </p> </important>
		 * Post #X-Amz-Target=SageMaker.DeleteNotebookInstance
		 * @return {void} Success
		 */
		DeleteNotebookInstance(requestBody: DeleteNotebookInstanceInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteNotebookInstance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a notebook instance lifecycle configuration.
		 * Post #X-Amz-Target=SageMaker.DeleteNotebookInstanceLifecycleConfig
		 * @return {void} Success
		 */
		DeleteNotebookInstanceLifecycleConfig(requestBody: DeleteNotebookInstanceLifecycleConfigInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteNotebookInstanceLifecycleConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the <code>StopPipelineExecution</code> API. When you delete a pipeline, all instances of the pipeline are deleted.
		 * Post #X-Amz-Target=SageMaker.DeletePipeline
		 * @return {DeletePipelineResponse} Success
		 */
		DeletePipeline(requestBody: DeletePipelineRequest): Observable<DeletePipelineResponse> {
			return this.http.post<DeletePipelineResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeletePipeline', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Delete the specified project.
		 * Post #X-Amz-Target=SageMaker.DeleteProject
		 * @return {void} Success
		 */
		DeleteProject(requestBody: DeleteProjectInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteProject', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Used to delete a space.
		 * Post #X-Amz-Target=SageMaker.DeleteSpace
		 * @return {void} Success
		 */
		DeleteSpace(requestBody: DeleteSpaceRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteSpace', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.
		 * Post #X-Amz-Target=SageMaker.DeleteStudioLifecycleConfig
		 * @return {void} Success
		 */
		DeleteStudioLifecycleConfig(requestBody: DeleteStudioLifecycleConfigRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteStudioLifecycleConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Deletes the specified tags from an SageMaker resource.</p> <p>To list a resource's tags, use the <code>ListTags</code> API. </p> <note> <p>When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API.</p> </note> <note> <p>When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.</p> </note>
		 * Post #X-Amz-Target=SageMaker.DeleteTags
		 * @return {DeleteTagsOutput} Success
		 */
		DeleteTags(requestBody: DeleteTagsInput): Observable<DeleteTagsOutput> {
			return this.http.post<DeleteTagsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteTags', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html">DescribeTrialComponent</a> API to get the list of trial components.
		 * Post #X-Amz-Target=SageMaker.DeleteTrial
		 * @return {DeleteTrialResponse} Success
		 */
		DeleteTrial(requestBody: DeleteTrialRequest): Observable<DeleteTrialResponse> {
			return this.http.post<DeleteTrialResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteTrial', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DisassociateTrialComponent.html">DisassociateTrialComponent</a> API.
		 * Post #X-Amz-Target=SageMaker.DeleteTrialComponent
		 * @return {DeleteTrialComponentResponse} Success
		 */
		DeleteTrialComponent(requestBody: DeleteTrialComponentRequest): Observable<DeleteTrialComponentResponse> {
			return this.http.post<DeleteTrialComponentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteTrialComponent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.
		 * Post #X-Amz-Target=SageMaker.DeleteUserProfile
		 * @return {void} Success
		 */
		DeleteUserProfile(requestBody: DeleteUserProfileRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeleteUserProfile', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Use this operation to delete a workforce.</p> <p>If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateWorkforce.html">CreateWorkforce</a> to create a new workforce.</p> <important> <p>If a private workforce contains one or more work teams, you must use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a> operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a <code>ResourceInUse</code> error.</p> </important>
		 * Post #X-Amz-Target=SageMaker.DeleteWorkforce
		 * @return {DeleteWorkforceResponse} Success
		 */
		DeleteWorkforce(requestBody: DeleteWorkforceRequest): Observable<DeleteWorkforceResponse> {
			return this.http.post<DeleteWorkforceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteWorkforce', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes an existing work team. This operation can't be undone.
		 * Post #X-Amz-Target=SageMaker.DeleteWorkteam
		 * @return {DeleteWorkteamResponse} Success
		 */
		DeleteWorkteam(requestBody: DeleteWorkteamRequest): Observable<DeleteWorkteamResponse> {
			return this.http.post<DeleteWorkteamResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DeleteWorkteam', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.
		 * Post #X-Amz-Target=SageMaker.DeregisterDevices
		 * @return {void} Success
		 */
		DeregisterDevices(requestBody: DeregisterDevicesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.DeregisterDevices', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Describes an action.
		 * Post #X-Amz-Target=SageMaker.DescribeAction
		 * @return {DescribeActionResponse} Success
		 */
		DescribeAction(requestBody: DescribeActionRequest): Observable<DescribeActionResponse> {
			return this.http.post<DescribeActionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeAction', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a description of the specified algorithm that is in your account.
		 * Post #X-Amz-Target=SageMaker.DescribeAlgorithm
		 * @return {DescribeAlgorithmOutput} Success
		 */
		DescribeAlgorithm(requestBody: DescribeAlgorithmInput): Observable<DescribeAlgorithmOutput> {
			return this.http.post<DescribeAlgorithmOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeAlgorithm', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the app.
		 * Post #X-Amz-Target=SageMaker.DescribeApp
		 * @return {DescribeAppResponse} Success
		 */
		DescribeApp(requestBody: DescribeAppRequest): Observable<DescribeAppResponse> {
			return this.http.post<DescribeAppResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeApp', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes an AppImageConfig.
		 * Post #X-Amz-Target=SageMaker.DescribeAppImageConfig
		 * @return {DescribeAppImageConfigResponse} Success
		 */
		DescribeAppImageConfig(requestBody: DescribeAppImageConfigRequest): Observable<DescribeAppImageConfigResponse> {
			return this.http.post<DescribeAppImageConfigResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeAppImageConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes an artifact.
		 * Post #X-Amz-Target=SageMaker.DescribeArtifact
		 * @return {DescribeArtifactResponse} Success
		 */
		DescribeArtifact(requestBody: DescribeArtifactRequest): Observable<DescribeArtifactResponse> {
			return this.http.post<DescribeArtifactResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeArtifact', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Returns information about an AutoML job created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>.</p> <note> <p>AutoML jobs created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> cannot be described by <code>DescribeAutoMLJob</code>.</p> </note>
		 * Post #X-Amz-Target=SageMaker.DescribeAutoMLJob
		 * @return {DescribeAutoMLJobResponse} Success
		 */
		DescribeAutoMLJob(requestBody: DescribeAutoMLJobRequest): Observable<DescribeAutoMLJobResponse> {
			return this.http.post<DescribeAutoMLJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeAutoMLJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns information about an AutoML job created by calling <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html">CreateAutoMLJobV2</a> or <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html">CreateAutoMLJob</a>.
		 * Post #X-Amz-Target=SageMaker.DescribeAutoMLJobV2
		 * @return {DescribeAutoMLJobV2Response} Success
		 */
		DescribeAutoMLJobV2(requestBody: DescribeAutoMLJobV2Request): Observable<DescribeAutoMLJobV2Response> {
			return this.http.post<DescribeAutoMLJobV2Response>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeAutoMLJobV2', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets details about the specified Git repository.
		 * Post #X-Amz-Target=SageMaker.DescribeCodeRepository
		 * @return {DescribeCodeRepositoryOutput} Success
		 */
		DescribeCodeRepository(requestBody: DescribeCodeRepositoryInput): Observable<DescribeCodeRepositoryOutput> {
			return this.http.post<DescribeCodeRepositoryOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeCodeRepository', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Returns information about a model compilation job.</p> <p>To create a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>. To get information about multiple model compilation jobs, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListCompilationJobs.html">ListCompilationJobs</a>.</p>
		 * Post #X-Amz-Target=SageMaker.DescribeCompilationJob
		 * @return {DescribeCompilationJobResponse} Success
		 */
		DescribeCompilationJob(requestBody: DescribeCompilationJobRequest): Observable<DescribeCompilationJobResponse> {
			return this.http.post<DescribeCompilationJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeCompilationJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes a context.
		 * Post #X-Amz-Target=SageMaker.DescribeContext
		 * @return {DescribeContextResponse} Success
		 */
		DescribeContext(requestBody: DescribeContextRequest): Observable<DescribeContextResponse> {
			return this.http.post<DescribeContextResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeContext', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the details of a data quality monitoring job definition.
		 * Post #X-Amz-Target=SageMaker.DescribeDataQualityJobDefinition
		 * @return {DescribeDataQualityJobDefinitionResponse} Success
		 */
		DescribeDataQualityJobDefinition(requestBody: DescribeDataQualityJobDefinitionRequest): Observable<DescribeDataQualityJobDefinitionResponse> {
			return this.http.post<DescribeDataQualityJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeDataQualityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the device.
		 * Post #X-Amz-Target=SageMaker.DescribeDevice
		 * @return {DescribeDeviceResponse} Success
		 */
		DescribeDevice(requestBody: DescribeDeviceRequest): Observable<DescribeDeviceResponse> {
			return this.http.post<DescribeDeviceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeDevice', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * A description of the fleet the device belongs to.
		 * Post #X-Amz-Target=SageMaker.DescribeDeviceFleet
		 * @return {DescribeDeviceFleetResponse} Success
		 */
		DescribeDeviceFleet(requestBody: DescribeDeviceFleetRequest): Observable<DescribeDeviceFleetResponse> {
			return this.http.post<DescribeDeviceFleetResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeDeviceFleet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * The description of the domain.
		 * Post #X-Amz-Target=SageMaker.DescribeDomain
		 * @return {DescribeDomainResponse} Success
		 */
		DescribeDomain(requestBody: DescribeDomainRequest): Observable<DescribeDomainResponse> {
			return this.http.post<DescribeDomainResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeDomain', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes an edge deployment plan with deployment status per stage.
		 * Post #X-Amz-Target=SageMaker.DescribeEdgeDeploymentPlan
		 * @return {DescribeEdgeDeploymentPlanResponse} Success
		 */
		DescribeEdgeDeploymentPlan(requestBody: DescribeEdgeDeploymentPlanRequest): Observable<DescribeEdgeDeploymentPlanResponse> {
			return this.http.post<DescribeEdgeDeploymentPlanResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeEdgeDeploymentPlan', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * A description of edge packaging jobs.
		 * Post #X-Amz-Target=SageMaker.DescribeEdgePackagingJob
		 * @return {DescribeEdgePackagingJobResponse} Success
		 */
		DescribeEdgePackagingJob(requestBody: DescribeEdgePackagingJobRequest): Observable<DescribeEdgePackagingJobResponse> {
			return this.http.post<DescribeEdgePackagingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeEdgePackagingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the description of an endpoint.
		 * Post #X-Amz-Target=SageMaker.DescribeEndpoint
		 * @return {DescribeEndpointOutput} Success
		 */
		DescribeEndpoint(requestBody: DescribeEndpointInput): Observable<DescribeEndpointOutput> {
			return this.http.post<DescribeEndpointOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeEndpoint', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the description of an endpoint configuration created using the <code>CreateEndpointConfig</code> API.
		 * Post #X-Amz-Target=SageMaker.DescribeEndpointConfig
		 * @return {DescribeEndpointConfigOutput} Success
		 */
		DescribeEndpointConfig(requestBody: DescribeEndpointConfigInput): Observable<DescribeEndpointConfigOutput> {
			return this.http.post<DescribeEndpointConfigOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeEndpointConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Provides a list of an experiment's properties.
		 * Post #X-Amz-Target=SageMaker.DescribeExperiment
		 * @return {DescribeExperimentResponse} Success
		 */
		DescribeExperiment(requestBody: DescribeExperimentRequest): Observable<DescribeExperimentResponse> {
			return this.http.post<DescribeExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Use this operation to describe a <code>FeatureGroup</code>. The response includes information on the creation time, <code>FeatureGroup</code> name, the unique identifier for each <code>FeatureGroup</code>, and more.
		 * Post #X-Amz-Target=SageMaker.DescribeFeatureGroup
		 * @return {DescribeFeatureGroupResponse} Success
		 */
		DescribeFeatureGroup(requestBody: DescribeFeatureGroupRequest): Observable<DescribeFeatureGroupResponse> {
			return this.http.post<DescribeFeatureGroupResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeFeatureGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Shows the metadata for a feature within a feature group.
		 * Post #X-Amz-Target=SageMaker.DescribeFeatureMetadata
		 * @return {DescribeFeatureMetadataResponse} Success
		 */
		DescribeFeatureMetadata(requestBody: DescribeFeatureMetadataRequest): Observable<DescribeFeatureMetadataResponse> {
			return this.http.post<DescribeFeatureMetadataResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeFeatureMetadata', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns information about the specified flow definition.
		 * Post #X-Amz-Target=SageMaker.DescribeFlowDefinition
		 * @return {DescribeFlowDefinitionResponse} Success
		 */
		DescribeFlowDefinition(requestBody: DescribeFlowDefinitionRequest): Observable<DescribeFlowDefinitionResponse> {
			return this.http.post<DescribeFlowDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeFlowDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Describe a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.DescribeHub
		 * @return {DescribeHubResponse} Success
		 */
		DescribeHub(requestBody: DescribeHubRequest): Observable<DescribeHubResponse> {
			return this.http.post<DescribeHubResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeHub', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Describe the content of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.DescribeHubContent
		 * @return {DescribeHubContentResponse} Success
		 */
		DescribeHubContent(requestBody: DescribeHubContentRequest): Observable<DescribeHubContentResponse> {
			return this.http.post<DescribeHubContentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeHubContent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns information about the requested human task user interface (worker task template).
		 * Post #X-Amz-Target=SageMaker.DescribeHumanTaskUi
		 * @return {DescribeHumanTaskUiResponse} Success
		 */
		DescribeHumanTaskUi(requestBody: DescribeHumanTaskUiRequest): Observable<DescribeHumanTaskUiResponse> {
			return this.http.post<DescribeHumanTaskUiResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeHumanTaskUi', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a description of a hyperparameter tuning job, depending on the fields selected. These fields can include the name, Amazon Resource Name (ARN), job status of your tuning job and more.
		 * Post #X-Amz-Target=SageMaker.DescribeHyperParameterTuningJob
		 * @return {DescribeHyperParameterTuningJobResponse} Success
		 */
		DescribeHyperParameterTuningJob(requestBody: DescribeHyperParameterTuningJobRequest): Observable<DescribeHyperParameterTuningJobResponse> {
			return this.http.post<DescribeHyperParameterTuningJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeHyperParameterTuningJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes a SageMaker image.
		 * Post #X-Amz-Target=SageMaker.DescribeImage
		 * @return {DescribeImageResponse} Success
		 */
		DescribeImage(requestBody: DescribeImageRequest): Observable<DescribeImageResponse> {
			return this.http.post<DescribeImageResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeImage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes a version of a SageMaker image.
		 * Post #X-Amz-Target=SageMaker.DescribeImageVersion
		 * @return {DescribeImageVersionResponse} Success
		 */
		DescribeImageVersion(requestBody: DescribeImageVersionRequest): Observable<DescribeImageVersionResponse> {
			return this.http.post<DescribeImageVersionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeImageVersion', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns details about an inference experiment.
		 * Post #X-Amz-Target=SageMaker.DescribeInferenceExperiment
		 * @return {DescribeInferenceExperimentResponse} Success
		 */
		DescribeInferenceExperiment(requestBody: DescribeInferenceExperimentRequest): Observable<DescribeInferenceExperimentResponse> {
			return this.http.post<DescribeInferenceExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeInferenceExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.
		 * Post #X-Amz-Target=SageMaker.DescribeInferenceRecommendationsJob
		 * @return {DescribeInferenceRecommendationsJobResponse} Success
		 */
		DescribeInferenceRecommendationsJob(requestBody: DescribeInferenceRecommendationsJobRequest): Observable<DescribeInferenceRecommendationsJobResponse> {
			return this.http.post<DescribeInferenceRecommendationsJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeInferenceRecommendationsJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets information about a labeling job.
		 * Post #X-Amz-Target=SageMaker.DescribeLabelingJob
		 * @return {DescribeLabelingJobResponse} Success
		 */
		DescribeLabelingJob(requestBody: DescribeLabelingJobRequest): Observable<DescribeLabelingJobResponse> {
			return this.http.post<DescribeLabelingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeLabelingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Provides a list of properties for the requested lineage group. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
		 * Post #X-Amz-Target=SageMaker.DescribeLineageGroup
		 * @return {DescribeLineageGroupResponse} Success
		 */
		DescribeLineageGroup(requestBody: DescribeLineageGroupRequest): Observable<DescribeLineageGroupResponse> {
			return this.http.post<DescribeLineageGroupResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeLineageGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes a model that you created using the <code>CreateModel</code> API.
		 * Post #X-Amz-Target=SageMaker.DescribeModel
		 * @return {DescribeModelOutput} Success
		 */
		DescribeModel(requestBody: DescribeModelInput): Observable<DescribeModelOutput> {
			return this.http.post<DescribeModelOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModel', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a description of a model bias job definition.
		 * Post #X-Amz-Target=SageMaker.DescribeModelBiasJobDefinition
		 * @return {DescribeModelBiasJobDefinitionResponse} Success
		 */
		DescribeModelBiasJobDefinition(requestBody: DescribeModelBiasJobDefinitionRequest): Observable<DescribeModelBiasJobDefinitionResponse> {
			return this.http.post<DescribeModelBiasJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModelBiasJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.
		 * Post #X-Amz-Target=SageMaker.DescribeModelCard
		 * @return {DescribeModelCardResponse} Success
		 */
		DescribeModelCard(requestBody: DescribeModelCardRequest): Observable<DescribeModelCardResponse> {
			return this.http.post<DescribeModelCardResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModelCard', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes an Amazon SageMaker Model Card export job.
		 * Post #X-Amz-Target=SageMaker.DescribeModelCardExportJob
		 * @return {DescribeModelCardExportJobResponse} Success
		 */
		DescribeModelCardExportJob(requestBody: DescribeModelCardExportJobRequest): Observable<DescribeModelCardExportJobResponse> {
			return this.http.post<DescribeModelCardExportJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModelCardExportJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a description of a model explainability job definition.
		 * Post #X-Amz-Target=SageMaker.DescribeModelExplainabilityJobDefinition
		 * @return {DescribeModelExplainabilityJobDefinitionResponse} Success
		 */
		DescribeModelExplainabilityJobDefinition(requestBody: DescribeModelExplainabilityJobDefinitionRequest): Observable<DescribeModelExplainabilityJobDefinitionResponse> {
			return this.http.post<DescribeModelExplainabilityJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModelExplainabilityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace.</p> <p>To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.</p>
		 * Post #X-Amz-Target=SageMaker.DescribeModelPackage
		 * @return {DescribeModelPackageOutput} Success
		 */
		DescribeModelPackage(requestBody: DescribeModelPackageInput): Observable<DescribeModelPackageOutput> {
			return this.http.post<DescribeModelPackageOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModelPackage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a description for the specified model group.
		 * Post #X-Amz-Target=SageMaker.DescribeModelPackageGroup
		 * @return {DescribeModelPackageGroupOutput} Success
		 */
		DescribeModelPackageGroup(requestBody: DescribeModelPackageGroupInput): Observable<DescribeModelPackageGroupOutput> {
			return this.http.post<DescribeModelPackageGroupOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModelPackageGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a description of a model quality job definition.
		 * Post #X-Amz-Target=SageMaker.DescribeModelQualityJobDefinition
		 * @return {DescribeModelQualityJobDefinitionResponse} Success
		 */
		DescribeModelQualityJobDefinition(requestBody: DescribeModelQualityJobDefinitionRequest): Observable<DescribeModelQualityJobDefinitionResponse> {
			return this.http.post<DescribeModelQualityJobDefinitionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeModelQualityJobDefinition', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the schedule for a monitoring job.
		 * Post #X-Amz-Target=SageMaker.DescribeMonitoringSchedule
		 * @return {DescribeMonitoringScheduleResponse} Success
		 */
		DescribeMonitoringSchedule(requestBody: DescribeMonitoringScheduleRequest): Observable<DescribeMonitoringScheduleResponse> {
			return this.http.post<DescribeMonitoringScheduleResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeMonitoringSchedule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns information about a notebook instance.
		 * Post #X-Amz-Target=SageMaker.DescribeNotebookInstance
		 * @return {DescribeNotebookInstanceOutput} Success
		 */
		DescribeNotebookInstance(requestBody: DescribeNotebookInstanceInput): Observable<DescribeNotebookInstanceOutput> {
			return this.http.post<DescribeNotebookInstanceOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeNotebookInstance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Returns a description of a notebook instance lifecycle configuration.</p> <p>For information about notebook instance lifestyle configurations, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html">Step 2.1: (Optional) Customize a Notebook Instance</a>.</p>
		 * Post #X-Amz-Target=SageMaker.DescribeNotebookInstanceLifecycleConfig
		 * @return {DescribeNotebookInstanceLifecycleConfigOutput} Success
		 */
		DescribeNotebookInstanceLifecycleConfig(requestBody: DescribeNotebookInstanceLifecycleConfigInput): Observable<DescribeNotebookInstanceLifecycleConfigOutput> {
			return this.http.post<DescribeNotebookInstanceLifecycleConfigOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeNotebookInstanceLifecycleConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the details of a pipeline.
		 * Post #X-Amz-Target=SageMaker.DescribePipeline
		 * @return {DescribePipelineResponse} Success
		 */
		DescribePipeline(requestBody: DescribePipelineRequest): Observable<DescribePipelineResponse> {
			return this.http.post<DescribePipelineResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribePipeline', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the details of an execution's pipeline definition.
		 * Post #X-Amz-Target=SageMaker.DescribePipelineDefinitionForExecution
		 * @return {DescribePipelineDefinitionForExecutionResponse} Success
		 */
		DescribePipelineDefinitionForExecution(requestBody: DescribePipelineDefinitionForExecutionRequest): Observable<DescribePipelineDefinitionForExecutionResponse> {
			return this.http.post<DescribePipelineDefinitionForExecutionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribePipelineDefinitionForExecution', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the details of a pipeline execution.
		 * Post #X-Amz-Target=SageMaker.DescribePipelineExecution
		 * @return {DescribePipelineExecutionResponse} Success
		 */
		DescribePipelineExecution(requestBody: DescribePipelineExecutionRequest): Observable<DescribePipelineExecutionResponse> {
			return this.http.post<DescribePipelineExecutionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribePipelineExecution', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a description of a processing job.
		 * Post #X-Amz-Target=SageMaker.DescribeProcessingJob
		 * @return {DescribeProcessingJobResponse} Success
		 */
		DescribeProcessingJob(requestBody: DescribeProcessingJobRequest): Observable<DescribeProcessingJobResponse> {
			return this.http.post<DescribeProcessingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeProcessingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the details of a project.
		 * Post #X-Amz-Target=SageMaker.DescribeProject
		 * @return {DescribeProjectOutput} Success
		 */
		DescribeProject(requestBody: DescribeProjectInput): Observable<DescribeProjectOutput> {
			return this.http.post<DescribeProjectOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeProject', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the space.
		 * Post #X-Amz-Target=SageMaker.DescribeSpace
		 * @return {DescribeSpaceResponse} Success
		 */
		DescribeSpace(requestBody: DescribeSpaceRequest): Observable<DescribeSpaceResponse> {
			return this.http.post<DescribeSpaceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeSpace', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the Studio Lifecycle Configuration.
		 * Post #X-Amz-Target=SageMaker.DescribeStudioLifecycleConfig
		 * @return {DescribeStudioLifecycleConfigResponse} Success
		 */
		DescribeStudioLifecycleConfig(requestBody: DescribeStudioLifecycleConfigRequest): Observable<DescribeStudioLifecycleConfigResponse> {
			return this.http.post<DescribeStudioLifecycleConfigResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeStudioLifecycleConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.
		 * Post #X-Amz-Target=SageMaker.DescribeSubscribedWorkteam
		 * @return {DescribeSubscribedWorkteamResponse} Success
		 */
		DescribeSubscribedWorkteam(requestBody: DescribeSubscribedWorkteamRequest): Observable<DescribeSubscribedWorkteamResponse> {
			return this.http.post<DescribeSubscribedWorkteamResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeSubscribedWorkteam', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Returns information about a training job. </p> <p>Some of the attributes below only appear if the training job successfully starts. If the training job fails, <code>TrainingJobStatus</code> is <code>Failed</code> and, depending on the <code>FailureReason</code>, attributes like <code>TrainingStartTime</code>, <code>TrainingTimeInSeconds</code>, <code>TrainingEndTime</code>, and <code>BillableTimeInSeconds</code> may not be present in the response.</p>
		 * Post #X-Amz-Target=SageMaker.DescribeTrainingJob
		 * @return {DescribeTrainingJobResponse} Success
		 */
		DescribeTrainingJob(requestBody: DescribeTrainingJobRequest): Observable<DescribeTrainingJobResponse> {
			return this.http.post<DescribeTrainingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeTrainingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns information about a transform job.
		 * Post #X-Amz-Target=SageMaker.DescribeTransformJob
		 * @return {DescribeTransformJobResponse} Success
		 */
		DescribeTransformJob(requestBody: DescribeTransformJobRequest): Observable<DescribeTransformJobResponse> {
			return this.http.post<DescribeTransformJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeTransformJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Provides a list of a trial's properties.
		 * Post #X-Amz-Target=SageMaker.DescribeTrial
		 * @return {DescribeTrialResponse} Success
		 */
		DescribeTrial(requestBody: DescribeTrialRequest): Observable<DescribeTrialResponse> {
			return this.http.post<DescribeTrialResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeTrial', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Provides a list of a trials component's properties.
		 * Post #X-Amz-Target=SageMaker.DescribeTrialComponent
		 * @return {DescribeTrialComponentResponse} Success
		 */
		DescribeTrialComponent(requestBody: DescribeTrialComponentRequest): Observable<DescribeTrialComponentResponse> {
			return this.http.post<DescribeTrialComponentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeTrialComponent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes a user profile. For more information, see <code>CreateUserProfile</code>.
		 * Post #X-Amz-Target=SageMaker.DescribeUserProfile
		 * @return {DescribeUserProfileResponse} Success
		 */
		DescribeUserProfile(requestBody: DescribeUserProfileRequest): Observable<DescribeUserProfileResponse> {
			return this.http.post<DescribeUserProfileResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeUserProfile', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges (<a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>). Allowable IP address ranges are the IP addresses that workers can use to access tasks. </p> <important> <p>This operation applies only to private workforces.</p> </important>
		 * Post #X-Amz-Target=SageMaker.DescribeWorkforce
		 * @return {DescribeWorkforceResponse} Success
		 */
		DescribeWorkforce(requestBody: DescribeWorkforceRequest): Observable<DescribeWorkforceResponse> {
			return this.http.post<DescribeWorkforceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeWorkforce', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team's Amazon Resource Name (ARN).
		 * Post #X-Amz-Target=SageMaker.DescribeWorkteam
		 * @return {DescribeWorkteamResponse} Success
		 */
		DescribeWorkteam(requestBody: DescribeWorkteamRequest): Observable<DescribeWorkteamResponse> {
			return this.http.post<DescribeWorkteamResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DescribeWorkteam', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
		 * Post #X-Amz-Target=SageMaker.DisableSagemakerServicecatalogPortfolio
		 * @return {DisableSagemakerServicecatalogPortfolioOutput} Success
		 */
		DisableSagemakerServicecatalogPortfolio(requestBody: DisableSagemakerServicecatalogPortfolioInput): Observable<DisableSagemakerServicecatalogPortfolioOutput> {
			return this.http.post<DisableSagemakerServicecatalogPortfolioOutput>(this.baseUri + '#X-Amz-Target=SageMaker.DisableSagemakerServicecatalogPortfolio', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Disassociates a trial component from a trial. This doesn't effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AssociateTrialComponent.html">AssociateTrialComponent</a> API.</p> <p>To get a list of the trials a component is associated with, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html">Search</a> API. Specify <code>ExperimentTrialComponent</code> for the <code>Resource</code> parameter. The list appears in the response under <code>Results.TrialComponent.Parents</code>.</p>
		 * Post #X-Amz-Target=SageMaker.DisassociateTrialComponent
		 * @return {DisassociateTrialComponentResponse} Success
		 */
		DisassociateTrialComponent(requestBody: DisassociateTrialComponentRequest): Observable<DisassociateTrialComponentResponse> {
			return this.http.post<DisassociateTrialComponentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.DisassociateTrialComponent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
		 * Post #X-Amz-Target=SageMaker.EnableSagemakerServicecatalogPortfolio
		 * @return {EnableSagemakerServicecatalogPortfolioOutput} Success
		 */
		EnableSagemakerServicecatalogPortfolio(requestBody: EnableSagemakerServicecatalogPortfolioInput): Observable<EnableSagemakerServicecatalogPortfolioOutput> {
			return this.http.post<EnableSagemakerServicecatalogPortfolioOutput>(this.baseUri + '#X-Amz-Target=SageMaker.EnableSagemakerServicecatalogPortfolio', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes a fleet.
		 * Post #X-Amz-Target=SageMaker.GetDeviceFleetReport
		 * @return {GetDeviceFleetReportResponse} Success
		 */
		GetDeviceFleetReport(requestBody: GetDeviceFleetReportRequest): Observable<GetDeviceFleetReportResponse> {
			return this.http.post<GetDeviceFleetReportResponse>(this.baseUri + '#X-Amz-Target=SageMaker.GetDeviceFleetReport', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * The resource policy for the lineage group.
		 * Post #X-Amz-Target=SageMaker.GetLineageGroupPolicy
		 * @return {GetLineageGroupPolicyResponse} Success
		 */
		GetLineageGroupPolicy(requestBody: GetLineageGroupPolicyRequest): Observable<GetLineageGroupPolicyResponse> {
			return this.http.post<GetLineageGroupPolicyResponse>(this.baseUri + '#X-Amz-Target=SageMaker.GetLineageGroupPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a resource policy that manages access for a model group. For information about resource policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
		 * Post #X-Amz-Target=SageMaker.GetModelPackageGroupPolicy
		 * @return {GetModelPackageGroupPolicyOutput} Success
		 */
		GetModelPackageGroupPolicy(requestBody: GetModelPackageGroupPolicyInput): Observable<GetModelPackageGroupPolicyOutput> {
			return this.http.post<GetModelPackageGroupPolicyOutput>(this.baseUri + '#X-Amz-Target=SageMaker.GetModelPackageGroupPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
		 * Post #X-Amz-Target=SageMaker.GetSagemakerServicecatalogPortfolioStatus
		 * @return {GetSagemakerServicecatalogPortfolioStatusOutput} Success
		 */
		GetSagemakerServicecatalogPortfolioStatus(requestBody: GetSagemakerServicecatalogPortfolioStatusInput): Observable<GetSagemakerServicecatalogPortfolioStatusOutput> {
			return this.http.post<GetSagemakerServicecatalogPortfolioStatusOutput>(this.baseUri + '#X-Amz-Target=SageMaker.GetSagemakerServicecatalogPortfolioStatus', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Starts an Amazon SageMaker Inference Recommender autoscaling recommendation job. Returns recommendations for autoscaling policies that you can apply to your SageMaker endpoint.
		 * Post #X-Amz-Target=SageMaker.GetScalingConfigurationRecommendation
		 * @return {GetScalingConfigurationRecommendationResponse} Success
		 */
		GetScalingConfigurationRecommendation(requestBody: GetScalingConfigurationRecommendationRequest): Observable<GetScalingConfigurationRecommendationResponse> {
			return this.http.post<GetScalingConfigurationRecommendationResponse>(this.baseUri + '#X-Amz-Target=SageMaker.GetScalingConfigurationRecommendation', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * An auto-complete API for the search functionality in the SageMaker console. It returns suggestions of possible matches for the property name to use in <code>Search</code> queries. Provides suggestions for <code>HyperParameters</code>, <code>Tags</code>, and <code>Metrics</code>.
		 * Post #X-Amz-Target=SageMaker.GetSearchSuggestions
		 * @return {GetSearchSuggestionsResponse} Success
		 */
		GetSearchSuggestions(requestBody: GetSearchSuggestionsRequest): Observable<GetSearchSuggestionsResponse> {
			return this.http.post<GetSearchSuggestionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.GetSearchSuggestions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Import hub content.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.ImportHubContent
		 * @return {ImportHubContentResponse} Success
		 */
		ImportHubContent(requestBody: ImportHubContentRequest): Observable<ImportHubContentResponse> {
			return this.http.post<ImportHubContentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ImportHubContent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the actions in your account and their properties.
		 * Post #X-Amz-Target=SageMaker.ListActions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListActionsResponse} Success
		 */
		ListActions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListActionsRequest): Observable<ListActionsResponse> {
			return this.http.post<ListActionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListActions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the machine learning algorithms that have been created.
		 * Post #X-Amz-Target=SageMaker.ListAlgorithms
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAlgorithmsOutput} Success
		 */
		ListAlgorithms(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListAlgorithmsInput): Observable<ListAlgorithmsOutput> {
			return this.http.post<ListAlgorithmsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListAlgorithms?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the aliases of a specified image or image version.
		 * Post #X-Amz-Target=SageMaker.ListAliases
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAliasesResponse} Success
		 */
		ListAliases(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListAliasesRequest): Observable<ListAliasesResponse> {
			return this.http.post<ListAliasesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListAliases?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
		 * Post #X-Amz-Target=SageMaker.ListAppImageConfigs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAppImageConfigsResponse} Success
		 */
		ListAppImageConfigs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListAppImageConfigsRequest): Observable<ListAppImageConfigsResponse> {
			return this.http.post<ListAppImageConfigsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListAppImageConfigs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists apps.
		 * Post #X-Amz-Target=SageMaker.ListApps
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAppsResponse} Success
		 */
		ListApps(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListAppsRequest): Observable<ListAppsResponse> {
			return this.http.post<ListAppsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListApps?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the artifacts in your account and their properties.
		 * Post #X-Amz-Target=SageMaker.ListArtifacts
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListArtifactsResponse} Success
		 */
		ListArtifacts(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListArtifactsRequest): Observable<ListArtifactsResponse> {
			return this.http.post<ListArtifactsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListArtifacts?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the associations in your account and their properties.
		 * Post #X-Amz-Target=SageMaker.ListAssociations
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAssociationsResponse} Success
		 */
		ListAssociations(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListAssociationsRequest): Observable<ListAssociationsResponse> {
			return this.http.post<ListAssociationsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListAssociations?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Request a list of jobs.
		 * Post #X-Amz-Target=SageMaker.ListAutoMLJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAutoMLJobsResponse} Success
		 */
		ListAutoMLJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListAutoMLJobsRequest): Observable<ListAutoMLJobsResponse> {
			return this.http.post<ListAutoMLJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListAutoMLJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List the candidates created for the job.
		 * Post #X-Amz-Target=SageMaker.ListCandidatesForAutoMLJob
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListCandidatesForAutoMLJobResponse} Success
		 */
		ListCandidatesForAutoMLJob(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListCandidatesForAutoMLJobRequest): Observable<ListCandidatesForAutoMLJobResponse> {
			return this.http.post<ListCandidatesForAutoMLJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListCandidatesForAutoMLJob?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of the Git repositories in your account.
		 * Post #X-Amz-Target=SageMaker.ListCodeRepositories
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListCodeRepositoriesOutput} Success
		 */
		ListCodeRepositories(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListCodeRepositoriesInput): Observable<ListCodeRepositoriesOutput> {
			return this.http.post<ListCodeRepositoriesOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListCodeRepositories?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Lists model compilation jobs that satisfy various filters.</p> <p>To create a model compilation job, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateCompilationJob.html">CreateCompilationJob</a>. To get information about a particular model compilation job you have created, use <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeCompilationJob.html">DescribeCompilationJob</a>.</p>
		 * Post #X-Amz-Target=SageMaker.ListCompilationJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListCompilationJobsResponse} Success
		 */
		ListCompilationJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListCompilationJobsRequest): Observable<ListCompilationJobsResponse> {
			return this.http.post<ListCompilationJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListCompilationJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the contexts in your account and their properties.
		 * Post #X-Amz-Target=SageMaker.ListContexts
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListContextsResponse} Success
		 */
		ListContexts(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListContextsRequest): Observable<ListContextsResponse> {
			return this.http.post<ListContextsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListContexts?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the data quality job definitions in your account.
		 * Post #X-Amz-Target=SageMaker.ListDataQualityJobDefinitions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDataQualityJobDefinitionsResponse} Success
		 */
		ListDataQualityJobDefinitions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListDataQualityJobDefinitionsRequest): Observable<ListDataQualityJobDefinitionsResponse> {
			return this.http.post<ListDataQualityJobDefinitionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListDataQualityJobDefinitions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a list of devices in the fleet.
		 * Post #X-Amz-Target=SageMaker.ListDeviceFleets
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDeviceFleetsResponse} Success
		 */
		ListDeviceFleets(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListDeviceFleetsRequest): Observable<ListDeviceFleetsResponse> {
			return this.http.post<ListDeviceFleetsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListDeviceFleets?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * A list of devices.
		 * Post #X-Amz-Target=SageMaker.ListDevices
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDevicesResponse} Success
		 */
		ListDevices(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListDevicesRequest): Observable<ListDevicesResponse> {
			return this.http.post<ListDevicesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListDevices?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the domains.
		 * Post #X-Amz-Target=SageMaker.ListDomains
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDomainsResponse} Success
		 */
		ListDomains(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListDomainsRequest): Observable<ListDomainsResponse> {
			return this.http.post<ListDomainsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListDomains?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all edge deployment plans.
		 * Post #X-Amz-Target=SageMaker.ListEdgeDeploymentPlans
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListEdgeDeploymentPlansResponse} Success
		 */
		ListEdgeDeploymentPlans(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListEdgeDeploymentPlansRequest): Observable<ListEdgeDeploymentPlansResponse> {
			return this.http.post<ListEdgeDeploymentPlansResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListEdgeDeploymentPlans?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a list of edge packaging jobs.
		 * Post #X-Amz-Target=SageMaker.ListEdgePackagingJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListEdgePackagingJobsResponse} Success
		 */
		ListEdgePackagingJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListEdgePackagingJobsRequest): Observable<ListEdgePackagingJobsResponse> {
			return this.http.post<ListEdgePackagingJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListEdgePackagingJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists endpoint configurations.
		 * Post #X-Amz-Target=SageMaker.ListEndpointConfigs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListEndpointConfigsOutput} Success
		 */
		ListEndpointConfigs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListEndpointConfigsInput): Observable<ListEndpointConfigsOutput> {
			return this.http.post<ListEndpointConfigsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListEndpointConfigs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists endpoints.
		 * Post #X-Amz-Target=SageMaker.ListEndpoints
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListEndpointsOutput} Success
		 */
		ListEndpoints(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListEndpointsInput): Observable<ListEndpointsOutput> {
			return this.http.post<ListEndpointsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListEndpoints?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
		 * Post #X-Amz-Target=SageMaker.ListExperiments
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListExperimentsResponse} Success
		 */
		ListExperiments(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListExperimentsRequest): Observable<ListExperimentsResponse> {
			return this.http.post<ListExperimentsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListExperiments?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List <code>FeatureGroup</code>s based on given filter and order.
		 * Post #X-Amz-Target=SageMaker.ListFeatureGroups
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListFeatureGroupsResponse} Success
		 */
		ListFeatureGroups(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListFeatureGroupsRequest): Observable<ListFeatureGroupsResponse> {
			return this.http.post<ListFeatureGroupsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListFeatureGroups?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns information about the flow definitions in your account.
		 * Post #X-Amz-Target=SageMaker.ListFlowDefinitions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListFlowDefinitionsResponse} Success
		 */
		ListFlowDefinitions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListFlowDefinitionsRequest): Observable<ListFlowDefinitionsResponse> {
			return this.http.post<ListFlowDefinitionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListFlowDefinitions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>List hub content versions.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.ListHubContentVersions
		 * @return {ListHubContentVersionsResponse} Success
		 */
		ListHubContentVersions(requestBody: ListHubContentVersionsRequest): Observable<ListHubContentVersionsResponse> {
			return this.http.post<ListHubContentVersionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListHubContentVersions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>List the contents of a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.ListHubContents
		 * @return {ListHubContentsResponse} Success
		 */
		ListHubContents(requestBody: ListHubContentsRequest): Observable<ListHubContentsResponse> {
			return this.http.post<ListHubContentsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListHubContents', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>List all existing hubs.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.ListHubs
		 * @return {ListHubsResponse} Success
		 */
		ListHubs(requestBody: ListHubsRequest): Observable<ListHubsResponse> {
			return this.http.post<ListHubsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListHubs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns information about the human task user interfaces in your account.
		 * Post #X-Amz-Target=SageMaker.ListHumanTaskUis
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListHumanTaskUisResponse} Success
		 */
		ListHumanTaskUis(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListHumanTaskUisRequest): Observable<ListHumanTaskUisResponse> {
			return this.http.post<ListHumanTaskUisResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListHumanTaskUis?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html">HyperParameterTuningJobSummary</a> objects that describe the hyperparameter tuning jobs launched in your account.
		 * Post #X-Amz-Target=SageMaker.ListHyperParameterTuningJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListHyperParameterTuningJobsResponse} Success
		 */
		ListHyperParameterTuningJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListHyperParameterTuningJobsRequest): Observable<ListHyperParameterTuningJobsResponse> {
			return this.http.post<ListHyperParameterTuningJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListHyperParameterTuningJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
		 * Post #X-Amz-Target=SageMaker.ListImageVersions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListImageVersionsResponse} Success
		 */
		ListImageVersions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListImageVersionsRequest): Observable<ListImageVersionsResponse> {
			return this.http.post<ListImageVersionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListImageVersions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
		 * Post #X-Amz-Target=SageMaker.ListImages
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListImagesResponse} Success
		 */
		ListImages(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListImagesRequest): Observable<ListImagesResponse> {
			return this.http.post<ListImagesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListImages?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the list of all inference experiments.
		 * Post #X-Amz-Target=SageMaker.ListInferenceExperiments
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListInferenceExperimentsResponse} Success
		 */
		ListInferenceExperiments(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListInferenceExperimentsRequest): Observable<ListInferenceExperimentsResponse> {
			return this.http.post<ListInferenceExperimentsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListInferenceExperiments?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Returns a list of the subtasks for an Inference Recommender job.</p> <p>The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.</p>
		 * Post #X-Amz-Target=SageMaker.ListInferenceRecommendationsJobSteps
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListInferenceRecommendationsJobStepsResponse} Success
		 */
		ListInferenceRecommendationsJobSteps(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListInferenceRecommendationsJobStepsRequest): Observable<ListInferenceRecommendationsJobStepsResponse> {
			return this.http.post<ListInferenceRecommendationsJobStepsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobSteps?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists recommendation jobs that satisfy various filters.
		 * Post #X-Amz-Target=SageMaker.ListInferenceRecommendationsJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListInferenceRecommendationsJobsResponse} Success
		 */
		ListInferenceRecommendationsJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListInferenceRecommendationsJobsRequest): Observable<ListInferenceRecommendationsJobsResponse> {
			return this.http.post<ListInferenceRecommendationsJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListInferenceRecommendationsJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of labeling jobs.
		 * Post #X-Amz-Target=SageMaker.ListLabelingJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListLabelingJobsResponse} Success
		 */
		ListLabelingJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListLabelingJobsRequest): Observable<ListLabelingJobsResponse> {
			return this.http.post<ListLabelingJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListLabelingJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of labeling jobs assigned to a specified work team.
		 * Post #X-Amz-Target=SageMaker.ListLabelingJobsForWorkteam
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListLabelingJobsForWorkteamResponse} Success
		 */
		ListLabelingJobsForWorkteam(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListLabelingJobsForWorkteamRequest): Observable<ListLabelingJobsForWorkteamResponse> {
			return this.http.post<ListLabelingJobsForWorkteamResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListLabelingJobsForWorkteam?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * A list of lineage groups shared with your Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html"> Cross-Account Lineage Tracking </a> in the <i>Amazon SageMaker Developer Guide</i>.
		 * Post #X-Amz-Target=SageMaker.ListLineageGroups
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListLineageGroupsResponse} Success
		 */
		ListLineageGroups(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListLineageGroupsRequest): Observable<ListLineageGroupsResponse> {
			return this.http.post<ListLineageGroupsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListLineageGroups?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists model bias jobs definitions that satisfy various filters.
		 * Post #X-Amz-Target=SageMaker.ListModelBiasJobDefinitions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelBiasJobDefinitionsResponse} Success
		 */
		ListModelBiasJobDefinitions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelBiasJobDefinitionsRequest): Observable<ListModelBiasJobDefinitionsResponse> {
			return this.http.post<ListModelBiasJobDefinitionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelBiasJobDefinitions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List the export jobs for the Amazon SageMaker Model Card.
		 * Post #X-Amz-Target=SageMaker.ListModelCardExportJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelCardExportJobsResponse} Success
		 */
		ListModelCardExportJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelCardExportJobsRequest): Observable<ListModelCardExportJobsResponse> {
			return this.http.post<ListModelCardExportJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelCardExportJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List existing versions of an Amazon SageMaker Model Card.
		 * Post #X-Amz-Target=SageMaker.ListModelCardVersions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelCardVersionsResponse} Success
		 */
		ListModelCardVersions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelCardVersionsRequest): Observable<ListModelCardVersionsResponse> {
			return this.http.post<ListModelCardVersionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelCardVersions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * List existing model cards.
		 * Post #X-Amz-Target=SageMaker.ListModelCards
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelCardsResponse} Success
		 */
		ListModelCards(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelCardsRequest): Observable<ListModelCardsResponse> {
			return this.http.post<ListModelCardsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelCards?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists model explainability job definitions that satisfy various filters.
		 * Post #X-Amz-Target=SageMaker.ListModelExplainabilityJobDefinitions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelExplainabilityJobDefinitionsResponse} Success
		 */
		ListModelExplainabilityJobDefinitions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelExplainabilityJobDefinitionsRequest): Observable<ListModelExplainabilityJobDefinitionsResponse> {
			return this.http.post<ListModelExplainabilityJobDefinitionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelExplainabilityJobDefinitions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.
		 * Post #X-Amz-Target=SageMaker.ListModelMetadata
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelMetadataResponse} Success
		 */
		ListModelMetadata(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelMetadataRequest): Observable<ListModelMetadataResponse> {
			return this.http.post<ListModelMetadataResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelMetadata?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of the model groups in your Amazon Web Services account.
		 * Post #X-Amz-Target=SageMaker.ListModelPackageGroups
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelPackageGroupsOutput} Success
		 */
		ListModelPackageGroups(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelPackageGroupsInput): Observable<ListModelPackageGroupsOutput> {
			return this.http.post<ListModelPackageGroupsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelPackageGroups?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the model packages that have been created.
		 * Post #X-Amz-Target=SageMaker.ListModelPackages
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelPackagesOutput} Success
		 */
		ListModelPackages(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelPackagesInput): Observable<ListModelPackagesOutput> {
			return this.http.post<ListModelPackagesOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelPackages?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of model quality monitoring job definitions in your account.
		 * Post #X-Amz-Target=SageMaker.ListModelQualityJobDefinitions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelQualityJobDefinitionsResponse} Success
		 */
		ListModelQualityJobDefinitions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelQualityJobDefinitionsRequest): Observable<ListModelQualityJobDefinitionsResponse> {
			return this.http.post<ListModelQualityJobDefinitionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListModelQualityJobDefinitions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists models created with the <code>CreateModel</code> API.
		 * Post #X-Amz-Target=SageMaker.ListModels
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListModelsOutput} Success
		 */
		ListModels(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListModelsInput): Observable<ListModelsOutput> {
			return this.http.post<ListModelsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListModels?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of past alerts in a model monitoring schedule.
		 * Post #X-Amz-Target=SageMaker.ListMonitoringAlertHistory
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListMonitoringAlertHistoryResponse} Success
		 */
		ListMonitoringAlertHistory(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListMonitoringAlertHistoryRequest): Observable<ListMonitoringAlertHistoryResponse> {
			return this.http.post<ListMonitoringAlertHistoryResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListMonitoringAlertHistory?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the alerts for a single monitoring schedule.
		 * Post #X-Amz-Target=SageMaker.ListMonitoringAlerts
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListMonitoringAlertsResponse} Success
		 */
		ListMonitoringAlerts(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListMonitoringAlertsRequest): Observable<ListMonitoringAlertsResponse> {
			return this.http.post<ListMonitoringAlertsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListMonitoringAlerts?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns list of all monitoring job executions.
		 * Post #X-Amz-Target=SageMaker.ListMonitoringExecutions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListMonitoringExecutionsResponse} Success
		 */
		ListMonitoringExecutions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListMonitoringExecutionsRequest): Observable<ListMonitoringExecutionsResponse> {
			return this.http.post<ListMonitoringExecutionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListMonitoringExecutions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns list of all monitoring schedules.
		 * Post #X-Amz-Target=SageMaker.ListMonitoringSchedules
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListMonitoringSchedulesResponse} Success
		 */
		ListMonitoringSchedules(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListMonitoringSchedulesRequest): Observable<ListMonitoringSchedulesResponse> {
			return this.http.post<ListMonitoringSchedulesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListMonitoringSchedules?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists notebook instance lifestyle configurations created with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a> API.
		 * Post #X-Amz-Target=SageMaker.ListNotebookInstanceLifecycleConfigs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListNotebookInstanceLifecycleConfigsOutput} Success
		 */
		ListNotebookInstanceLifecycleConfigs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListNotebookInstanceLifecycleConfigsInput): Observable<ListNotebookInstanceLifecycleConfigsOutput> {
			return this.http.post<ListNotebookInstanceLifecycleConfigsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListNotebookInstanceLifecycleConfigs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region.
		 * Post #X-Amz-Target=SageMaker.ListNotebookInstances
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListNotebookInstancesOutput} Success
		 */
		ListNotebookInstances(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListNotebookInstancesInput): Observable<ListNotebookInstancesOutput> {
			return this.http.post<ListNotebookInstancesOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListNotebookInstances?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of <code>PipeLineExecutionStep</code> objects.
		 * Post #X-Amz-Target=SageMaker.ListPipelineExecutionSteps
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListPipelineExecutionStepsResponse} Success
		 */
		ListPipelineExecutionSteps(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListPipelineExecutionStepsRequest): Observable<ListPipelineExecutionStepsResponse> {
			return this.http.post<ListPipelineExecutionStepsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListPipelineExecutionSteps?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of the pipeline executions.
		 * Post #X-Amz-Target=SageMaker.ListPipelineExecutions
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListPipelineExecutionsResponse} Success
		 */
		ListPipelineExecutions(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListPipelineExecutionsRequest): Observable<ListPipelineExecutionsResponse> {
			return this.http.post<ListPipelineExecutionsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListPipelineExecutions?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of parameters for a pipeline execution.
		 * Post #X-Amz-Target=SageMaker.ListPipelineParametersForExecution
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListPipelineParametersForExecutionResponse} Success
		 */
		ListPipelineParametersForExecution(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListPipelineParametersForExecutionRequest): Observable<ListPipelineParametersForExecutionResponse> {
			return this.http.post<ListPipelineParametersForExecutionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListPipelineParametersForExecution?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of pipelines.
		 * Post #X-Amz-Target=SageMaker.ListPipelines
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListPipelinesResponse} Success
		 */
		ListPipelines(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListPipelinesRequest): Observable<ListPipelinesResponse> {
			return this.http.post<ListPipelinesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListPipelines?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists processing jobs that satisfy various filters.
		 * Post #X-Amz-Target=SageMaker.ListProcessingJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListProcessingJobsResponse} Success
		 */
		ListProcessingJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListProcessingJobsRequest): Observable<ListProcessingJobsResponse> {
			return this.http.post<ListProcessingJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListProcessingJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of the projects in an Amazon Web Services account.
		 * Post #X-Amz-Target=SageMaker.ListProjects
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListProjectsOutput} Success
		 */
		ListProjects(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListProjectsInput): Observable<ListProjectsOutput> {
			return this.http.post<ListProjectsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListProjects?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists Amazon SageMaker Catalogs based on given filters and orders. The maximum number of <code>ResourceCatalog</code>s viewable is 1000.
		 * Post #X-Amz-Target=SageMaker.ListResourceCatalogs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListResourceCatalogsResponse} Success
		 */
		ListResourceCatalogs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListResourceCatalogsRequest): Observable<ListResourceCatalogsResponse> {
			return this.http.post<ListResourceCatalogsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListResourceCatalogs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists spaces.
		 * Post #X-Amz-Target=SageMaker.ListSpaces
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListSpacesResponse} Success
		 */
		ListSpaces(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListSpacesRequest): Observable<ListSpacesResponse> {
			return this.http.post<ListSpacesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListSpaces?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists devices allocated to the stage, containing detailed device information and deployment status.
		 * Post #X-Amz-Target=SageMaker.ListStageDevices
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListStageDevicesResponse} Success
		 */
		ListStageDevices(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListStageDevicesRequest): Observable<ListStageDevicesResponse> {
			return this.http.post<ListStageDevicesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListStageDevices?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.
		 * Post #X-Amz-Target=SageMaker.ListStudioLifecycleConfigs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListStudioLifecycleConfigsResponse} Success
		 */
		ListStudioLifecycleConfigs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListStudioLifecycleConfigsRequest): Observable<ListStudioLifecycleConfigsResponse> {
			return this.http.post<ListStudioLifecycleConfigsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListStudioLifecycleConfigs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
		 * Post #X-Amz-Target=SageMaker.ListSubscribedWorkteams
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListSubscribedWorkteamsResponse} Success
		 */
		ListSubscribedWorkteams(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListSubscribedWorkteamsRequest): Observable<ListSubscribedWorkteamsResponse> {
			return this.http.post<ListSubscribedWorkteamsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListSubscribedWorkteams?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Returns the tags for the specified SageMaker resource.
		 * Post #X-Amz-Target=SageMaker.ListTags
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTagsOutput} Success
		 */
		ListTags(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListTagsInput): Observable<ListTagsOutput> {
			return this.http.post<ListTagsOutput>(this.baseUri + '#X-Amz-Target=SageMaker.ListTags?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Lists training jobs.</p> <note> <p>When <code>StatusEquals</code> and <code>MaxResults</code> are set at the same time, the <code>MaxResults</code> number of training jobs are first retrieved ignoring the <code>StatusEquals</code> parameter and then they are filtered by the <code>StatusEquals</code> parameter, which is returned as a response.</p> <p>For example, if <code>ListTrainingJobs</code> is invoked with the following parameters:</p> <p> <code>{ ... MaxResults: 100, StatusEquals: InProgress ... }</code> </p> <p>First, 100 trainings jobs with any status, including those other than <code>InProgress</code>, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of <code>InProgress</code> are returned.</p> <p>You can quickly test the API using the following Amazon Web Services CLI code.</p> <p> <code>aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress</code> </p> </note>
		 * Post #X-Amz-Target=SageMaker.ListTrainingJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTrainingJobsResponse} Success
		 */
		ListTrainingJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListTrainingJobsRequest): Observable<ListTrainingJobsResponse> {
			return this.http.post<ListTrainingJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListTrainingJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html">TrainingJobSummary</a> objects that describe the training jobs that a hyperparameter tuning job launched.
		 * Post #X-Amz-Target=SageMaker.ListTrainingJobsForHyperParameterTuningJob
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTrainingJobsForHyperParameterTuningJobResponse} Success
		 */
		ListTrainingJobsForHyperParameterTuningJob(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListTrainingJobsForHyperParameterTuningJobRequest): Observable<ListTrainingJobsForHyperParameterTuningJobResponse> {
			return this.http.post<ListTrainingJobsForHyperParameterTuningJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListTrainingJobsForHyperParameterTuningJob?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists transform jobs.
		 * Post #X-Amz-Target=SageMaker.ListTransformJobs
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTransformJobsResponse} Success
		 */
		ListTransformJobs(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListTransformJobsRequest): Observable<ListTransformJobsResponse> {
			return this.http.post<ListTransformJobsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListTransformJobs?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:</p> <ul> <li> <p> <code>ExperimentName</code> </p> </li> <li> <p> <code>SourceArn</code> </p> </li> <li> <p> <code>TrialName</code> </p> </li> </ul>
		 * Post #X-Amz-Target=SageMaker.ListTrialComponents
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTrialComponentsResponse} Success
		 */
		ListTrialComponents(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListTrialComponentsRequest): Observable<ListTrialComponentsResponse> {
			return this.http.post<ListTrialComponentsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListTrialComponents?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
		 * Post #X-Amz-Target=SageMaker.ListTrials
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTrialsResponse} Success
		 */
		ListTrials(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListTrialsRequest): Observable<ListTrialsResponse> {
			return this.http.post<ListTrialsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListTrials?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists user profiles.
		 * Post #X-Amz-Target=SageMaker.ListUserProfiles
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListUserProfilesResponse} Success
		 */
		ListUserProfiles(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListUserProfilesRequest): Observable<ListUserProfilesResponse> {
			return this.http.post<ListUserProfilesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListUserProfiles?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.
		 * Post #X-Amz-Target=SageMaker.ListWorkforces
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListWorkforcesResponse} Success
		 */
		ListWorkforces(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListWorkforcesRequest): Observable<ListWorkforcesResponse> {
			return this.http.post<ListWorkforcesResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListWorkforces?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the <code>NameContains</code> parameter.
		 * Post #X-Amz-Target=SageMaker.ListWorkteams
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListWorkteamsResponse} Success
		 */
		ListWorkteams(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: ListWorkteamsRequest): Observable<ListWorkteamsResponse> {
			return this.http.post<ListWorkteamsResponse>(this.baseUri + '#X-Amz-Target=SageMaker.ListWorkteams?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds a resouce policy to control access to a model group. For information about resoure policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies and resource-based policies</a> in the <i>Amazon Web Services Identity and Access Management User Guide.</i>.
		 * Post #X-Amz-Target=SageMaker.PutModelPackageGroupPolicy
		 * @return {PutModelPackageGroupPolicyOutput} Success
		 */
		PutModelPackageGroupPolicy(requestBody: PutModelPackageGroupPolicyInput): Observable<PutModelPackageGroupPolicyOutput> {
			return this.http.post<PutModelPackageGroupPolicyOutput>(this.baseUri + '#X-Amz-Target=SageMaker.PutModelPackageGroupPolicy', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.
		 * Post #X-Amz-Target=SageMaker.QueryLineage
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {QueryLineageResponse} Success
		 */
		QueryLineage(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: QueryLineageRequest): Observable<QueryLineageResponse> {
			return this.http.post<QueryLineageResponse>(this.baseUri + '#X-Amz-Target=SageMaker.QueryLineage?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Register devices.
		 * Post #X-Amz-Target=SageMaker.RegisterDevices
		 * @return {void} Success
		 */
		RegisterDevices(requestBody: RegisterDevicesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.RegisterDevices', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Renders the UI template so that you can preview the worker's experience.
		 * Post #X-Amz-Target=SageMaker.RenderUiTemplate
		 * @return {RenderUiTemplateResponse} Success
		 */
		RenderUiTemplate(requestBody: RenderUiTemplateRequest): Observable<RenderUiTemplateResponse> {
			return this.http.post<RenderUiTemplateResponse>(this.baseUri + '#X-Amz-Target=SageMaker.RenderUiTemplate', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Retry the execution of the pipeline.
		 * Post #X-Amz-Target=SageMaker.RetryPipelineExecution
		 * @return {RetryPipelineExecutionResponse} Success
		 */
		RetryPipelineExecution(requestBody: RetryPipelineExecutionRequest): Observable<RetryPipelineExecutionResponse> {
			return this.http.post<RetryPipelineExecutionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.RetryPipelineExecution', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Finds SageMaker resources that match a search query. Matching resources are returned as a list of <code>SearchRecord</code> objects in the response. You can sort the search results by any resource property in a ascending or descending order.</p> <p>You can query against the following value types: numeric, text, Boolean, and timestamp.</p> <note> <p>The Search API may provide access to otherwise restricted data. See <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html">Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference</a> for more information.</p> </note>
		 * Post #X-Amz-Target=SageMaker.Search
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {SearchResponse} Success
		 */
		Search(MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: SearchRequest): Observable<SearchResponse> {
			return this.http.post<SearchResponse>(this.baseUri + '#X-Amz-Target=SageMaker.Search?MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
		 * Post #X-Amz-Target=SageMaker.SendPipelineExecutionStepFailure
		 * @return {SendPipelineExecutionStepFailureResponse} Success
		 */
		SendPipelineExecutionStepFailure(requestBody: SendPipelineExecutionStepFailureRequest): Observable<SendPipelineExecutionStepFailureResponse> {
			return this.http.post<SendPipelineExecutionStepFailureResponse>(this.baseUri + '#X-Amz-Target=SageMaker.SendPipelineExecutionStepFailure', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step's output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
		 * Post #X-Amz-Target=SageMaker.SendPipelineExecutionStepSuccess
		 * @return {SendPipelineExecutionStepSuccessResponse} Success
		 */
		SendPipelineExecutionStepSuccess(requestBody: SendPipelineExecutionStepSuccessRequest): Observable<SendPipelineExecutionStepSuccessResponse> {
			return this.http.post<SendPipelineExecutionStepSuccessResponse>(this.baseUri + '#X-Amz-Target=SageMaker.SendPipelineExecutionStepSuccess', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Starts a stage in an edge deployment plan.
		 * Post #X-Amz-Target=SageMaker.StartEdgeDeploymentStage
		 * @return {void} Success
		 */
		StartEdgeDeploymentStage(requestBody: StartEdgeDeploymentStageRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StartEdgeDeploymentStage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Starts an inference experiment.
		 * Post #X-Amz-Target=SageMaker.StartInferenceExperiment
		 * @return {StartInferenceExperimentResponse} Success
		 */
		StartInferenceExperiment(requestBody: StartInferenceExperimentRequest): Observable<StartInferenceExperimentResponse> {
			return this.http.post<StartInferenceExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.StartInferenceExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts a previously stopped monitoring schedule.</p> <note> <p>By default, when you successfully create a new schedule, the status of a monitoring schedule is <code>scheduled</code>.</p> </note>
		 * Post #X-Amz-Target=SageMaker.StartMonitoringSchedule
		 * @return {void} Success
		 */
		StartMonitoringSchedule(requestBody: StartMonitoringScheduleRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StartMonitoringSchedule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to <code>InService</code>. A notebook instance's status must be <code>InService</code> before you can connect to your Jupyter notebook.
		 * Post #X-Amz-Target=SageMaker.StartNotebookInstance
		 * @return {void} Success
		 */
		StartNotebookInstance(requestBody: StartNotebookInstanceInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StartNotebookInstance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Starts a pipeline execution.
		 * Post #X-Amz-Target=SageMaker.StartPipelineExecution
		 * @return {StartPipelineExecutionResponse} Success
		 */
		StartPipelineExecution(requestBody: StartPipelineExecutionRequest): Observable<StartPipelineExecutionResponse> {
			return this.http.post<StartPipelineExecutionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.StartPipelineExecution', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * A method for forcing a running job to shut down.
		 * Post #X-Amz-Target=SageMaker.StopAutoMLJob
		 * @return {void} Success
		 */
		StopAutoMLJob(requestBody: StopAutoMLJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopAutoMLJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Stops a model compilation job.</p> <p> To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn't stopped, it sends the SIGKILL signal.</p> <p>When it receives a <code>StopCompilationJob</code> request, Amazon SageMaker changes the <code>CompilationJobStatus</code> of the job to <code>Stopping</code>. After Amazon SageMaker stops the job, it sets the <code>CompilationJobStatus</code> to <code>Stopped</code>. </p>
		 * Post #X-Amz-Target=SageMaker.StopCompilationJob
		 * @return {void} Success
		 */
		StopCompilationJob(requestBody: StopCompilationJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopCompilationJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Stops a stage in an edge deployment plan.
		 * Post #X-Amz-Target=SageMaker.StopEdgeDeploymentStage
		 * @return {void} Success
		 */
		StopEdgeDeploymentStage(requestBody: StopEdgeDeploymentStageRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopEdgeDeploymentStage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Request to stop an edge packaging job.
		 * Post #X-Amz-Target=SageMaker.StopEdgePackagingJob
		 * @return {void} Success
		 */
		StopEdgePackagingJob(requestBody: StopEdgePackagingJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopEdgePackagingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched.</p> <p>All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the <code>Stopped</code> state, it releases all reserved resources for the tuning job.</p>
		 * Post #X-Amz-Target=SageMaker.StopHyperParameterTuningJob
		 * @return {void} Success
		 */
		StopHyperParameterTuningJob(requestBody: StopHyperParameterTuningJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopHyperParameterTuningJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Stops an inference experiment.
		 * Post #X-Amz-Target=SageMaker.StopInferenceExperiment
		 * @return {StopInferenceExperimentResponse} Success
		 */
		StopInferenceExperiment(requestBody: StopInferenceExperimentRequest): Observable<StopInferenceExperimentResponse> {
			return this.http.post<StopInferenceExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.StopInferenceExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Stops an Inference Recommender job.
		 * Post #X-Amz-Target=SageMaker.StopInferenceRecommendationsJob
		 * @return {void} Success
		 */
		StopInferenceRecommendationsJob(requestBody: StopInferenceRecommendationsJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopInferenceRecommendationsJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.
		 * Post #X-Amz-Target=SageMaker.StopLabelingJob
		 * @return {void} Success
		 */
		StopLabelingJob(requestBody: StopLabelingJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopLabelingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Stops a previously started monitoring schedule.
		 * Post #X-Amz-Target=SageMaker.StopMonitoringSchedule
		 * @return {void} Success
		 */
		StopMonitoringSchedule(requestBody: StopMonitoringScheduleRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopMonitoringSchedule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call <code>StopNotebookInstance</code>.</p> <p>To access data on the ML storage volume for a notebook instance that has been terminated, call the <code>StartNotebookInstance</code> API. <code>StartNotebookInstance</code> launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. </p>
		 * Post #X-Amz-Target=SageMaker.StopNotebookInstance
		 * @return {void} Success
		 */
		StopNotebookInstance(requestBody: StopNotebookInstanceInput): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopNotebookInstance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Stops a pipeline execution.</p> <p> <b>Callback Step</b> </p> <p>A pipeline execution won't stop while a callback step is running. When you call <code>StopPipelineExecution</code> on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a "Status" field which is set to "Stopping".</p> <p>You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to <code>SendPipelineExecutionStepSuccess</code> or <code>SendPipelineExecutionStepFailure</code>.</p> <p>Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution.</p> <p> <b>Lambda Step</b> </p> <p>A pipeline execution can't be stopped while a lambda step is running because the Lambda function invoked by the lambda step can't be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is <code>Stopped</code>. If the timeout is hit the pipeline execution status is <code>Failed</code>.</p>
		 * Post #X-Amz-Target=SageMaker.StopPipelineExecution
		 * @return {StopPipelineExecutionResponse} Success
		 */
		StopPipelineExecution(requestBody: StopPipelineExecutionRequest): Observable<StopPipelineExecutionResponse> {
			return this.http.post<StopPipelineExecutionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.StopPipelineExecution', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Stops a processing job.
		 * Post #X-Amz-Target=SageMaker.StopProcessingJob
		 * @return {void} Success
		 */
		StopProcessingJob(requestBody: StopProcessingJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopProcessingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Stops a training job. To stop a job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. </p> <p>When it receives a <code>StopTrainingJob</code> request, SageMaker changes the status of the job to <code>Stopping</code>. After SageMaker stops the job, it sets the status to <code>Stopped</code>.</p>
		 * Post #X-Amz-Target=SageMaker.StopTrainingJob
		 * @return {void} Success
		 */
		StopTrainingJob(requestBody: StopTrainingJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopTrainingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Stops a batch transform job.</p> <p>When Amazon SageMaker receives a <code>StopTransformJob</code> request, the status of the job changes to <code>Stopping</code>. After Amazon SageMaker stops the job, the status is set to <code>Stopped</code>. When you stop a batch transform job before it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.</p>
		 * Post #X-Amz-Target=SageMaker.StopTransformJob
		 * @return {void} Success
		 */
		StopTransformJob(requestBody: StopTransformJobRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.StopTransformJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates an action.
		 * Post #X-Amz-Target=SageMaker.UpdateAction
		 * @return {UpdateActionResponse} Success
		 */
		UpdateAction(requestBody: UpdateActionRequest): Observable<UpdateActionResponse> {
			return this.http.post<UpdateActionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateAction', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the properties of an AppImageConfig.
		 * Post #X-Amz-Target=SageMaker.UpdateAppImageConfig
		 * @return {UpdateAppImageConfigResponse} Success
		 */
		UpdateAppImageConfig(requestBody: UpdateAppImageConfigRequest): Observable<UpdateAppImageConfigResponse> {
			return this.http.post<UpdateAppImageConfigResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateAppImageConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates an artifact.
		 * Post #X-Amz-Target=SageMaker.UpdateArtifact
		 * @return {UpdateArtifactResponse} Success
		 */
		UpdateArtifact(requestBody: UpdateArtifactRequest): Observable<UpdateArtifactResponse> {
			return this.http.post<UpdateArtifactResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateArtifact', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the specified Git repository with the specified values.
		 * Post #X-Amz-Target=SageMaker.UpdateCodeRepository
		 * @return {UpdateCodeRepositoryOutput} Success
		 */
		UpdateCodeRepository(requestBody: UpdateCodeRepositoryInput): Observable<UpdateCodeRepositoryOutput> {
			return this.http.post<UpdateCodeRepositoryOutput>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateCodeRepository', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a context.
		 * Post #X-Amz-Target=SageMaker.UpdateContext
		 * @return {UpdateContextResponse} Success
		 */
		UpdateContext(requestBody: UpdateContextRequest): Observable<UpdateContextResponse> {
			return this.http.post<UpdateContextResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateContext', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a fleet of devices.
		 * Post #X-Amz-Target=SageMaker.UpdateDeviceFleet
		 * @return {void} Success
		 */
		UpdateDeviceFleet(requestBody: UpdateDeviceFleetRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.UpdateDeviceFleet', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates one or more devices in a fleet.
		 * Post #X-Amz-Target=SageMaker.UpdateDevices
		 * @return {void} Success
		 */
		UpdateDevices(requestBody: UpdateDevicesRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.UpdateDevices', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * Updates the default settings for new user profiles in the domain.
		 * Post #X-Amz-Target=SageMaker.UpdateDomain
		 * @return {UpdateDomainResponse} Success
		 */
		UpdateDomain(requestBody: UpdateDomainRequest): Observable<UpdateDomainResponse> {
			return this.http.post<UpdateDomainResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateDomain', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Deploys the new <code>EndpointConfig</code> specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous <code>EndpointConfig</code> (there is no availability loss). </p> <p>When SageMaker receives the request, it sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API. </p> <note> <p>You must not delete an <code>EndpointConfig</code> in use by an endpoint that is live or while the <code>UpdateEndpoint</code> or <code>CreateEndpoint</code> operations are being performed on the endpoint. To update an endpoint, you must create a new <code>EndpointConfig</code>.</p> <p>If you delete the <code>EndpointConfig</code> of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.</p> </note>
		 * Post #X-Amz-Target=SageMaker.UpdateEndpoint
		 * @return {UpdateEndpointOutput} Success
		 */
		UpdateEndpoint(requestBody: UpdateEndpointInput): Observable<UpdateEndpointOutput> {
			return this.http.post<UpdateEndpointOutput>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateEndpoint', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to <code>Updating</code>. After updating the endpoint, it sets the status to <code>InService</code>. To check the status of an endpoint, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html">DescribeEndpoint</a> API.
		 * Post #X-Amz-Target=SageMaker.UpdateEndpointWeightsAndCapacities
		 * @return {UpdateEndpointWeightsAndCapacitiesOutput} Success
		 */
		UpdateEndpointWeightsAndCapacities(requestBody: UpdateEndpointWeightsAndCapacitiesInput): Observable<UpdateEndpointWeightsAndCapacitiesOutput> {
			return this.http.post<UpdateEndpointWeightsAndCapacitiesOutput>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateEndpointWeightsAndCapacities', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.
		 * Post #X-Amz-Target=SageMaker.UpdateExperiment
		 * @return {UpdateExperimentResponse} Success
		 */
		UpdateExperiment(requestBody: UpdateExperimentRequest): Observable<UpdateExperimentResponse> {
			return this.http.post<UpdateExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Updates the feature group by either adding features or updating the online store configuration. Use one of the following request parameters at a time while using the <code>UpdateFeatureGroup</code> API.</p> <p>You can add features for your feature group using the <code>FeatureAdditions</code> request parameter. Features cannot be removed from a feature group.</p> <p>You can update the online store configuration by using the <code>OnlineStoreConfig</code> request parameter. If a <code>TtlDuration</code> is specified, the default <code>TtlDuration</code> applies for all records added to the feature group <i>after the feature group is updated</i>. If a record level <code>TtlDuration</code> exists from using the <code>PutRecord</code> API, the record level <code>TtlDuration</code> applies to that record instead of the default <code>TtlDuration</code>.</p>
		 * Post #X-Amz-Target=SageMaker.UpdateFeatureGroup
		 * @return {UpdateFeatureGroupResponse} Success
		 */
		UpdateFeatureGroup(requestBody: UpdateFeatureGroupRequest): Observable<UpdateFeatureGroupResponse> {
			return this.http.post<UpdateFeatureGroupResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateFeatureGroup', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the description and parameters of the feature group.
		 * Post #X-Amz-Target=SageMaker.UpdateFeatureMetadata
		 * @return {void} Success
		 */
		UpdateFeatureMetadata(requestBody: UpdateFeatureMetadataRequest): Observable<HttpResponse<string>> {
			return this.http.post(this.baseUri + '#X-Amz-Target=SageMaker.UpdateFeatureMetadata', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' }, observe: 'response', responseType: 'text' });
		}

		/**
		 * <p>Update a hub.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>
		 * Post #X-Amz-Target=SageMaker.UpdateHub
		 * @return {UpdateHubResponse} Success
		 */
		UpdateHub(requestBody: UpdateHubRequest): Observable<UpdateHubResponse> {
			return this.http.post<UpdateHubResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateHub', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the properties of a SageMaker image. To change the image's tags, use the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html">AddTags</a> and <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteTags.html">DeleteTags</a> APIs.
		 * Post #X-Amz-Target=SageMaker.UpdateImage
		 * @return {UpdateImageResponse} Success
		 */
		UpdateImage(requestBody: UpdateImageRequest): Observable<UpdateImageResponse> {
			return this.http.post<UpdateImageResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateImage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the properties of a SageMaker image version.
		 * Post #X-Amz-Target=SageMaker.UpdateImageVersion
		 * @return {UpdateImageVersionResponse} Success
		 */
		UpdateImageVersion(requestBody: UpdateImageVersionRequest): Observable<UpdateImageVersionResponse> {
			return this.http.post<UpdateImageVersionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateImageVersion', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates an inference experiment that you created. The status of the inference experiment has to be either <code>Created</code>, <code>Running</code>. For more information on the status of an inference experiment, see <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html">DescribeInferenceExperiment</a>.
		 * Post #X-Amz-Target=SageMaker.UpdateInferenceExperiment
		 * @return {UpdateInferenceExperimentResponse} Success
		 */
		UpdateInferenceExperiment(requestBody: UpdateInferenceExperimentRequest): Observable<UpdateInferenceExperimentResponse> {
			return this.http.post<UpdateInferenceExperimentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateInferenceExperiment', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Update an Amazon SageMaker Model Card.</p> <important> <p>You cannot update both model card content and model card status in a single call.</p> </important>
		 * Post #X-Amz-Target=SageMaker.UpdateModelCard
		 * @return {UpdateModelCardResponse} Success
		 */
		UpdateModelCard(requestBody: UpdateModelCardRequest): Observable<UpdateModelCardResponse> {
			return this.http.post<UpdateModelCardResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateModelCard', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a versioned model.
		 * Post #X-Amz-Target=SageMaker.UpdateModelPackage
		 * @return {UpdateModelPackageOutput} Success
		 */
		UpdateModelPackage(requestBody: UpdateModelPackageInput): Observable<UpdateModelPackageOutput> {
			return this.http.post<UpdateModelPackageOutput>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateModelPackage', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update the parameters of a model monitor alert.
		 * Post #X-Amz-Target=SageMaker.UpdateMonitoringAlert
		 * @return {UpdateMonitoringAlertResponse} Success
		 */
		UpdateMonitoringAlert(requestBody: UpdateMonitoringAlertRequest): Observable<UpdateMonitoringAlertResponse> {
			return this.http.post<UpdateMonitoringAlertResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateMonitoringAlert', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a previously created schedule.
		 * Post #X-Amz-Target=SageMaker.UpdateMonitoringSchedule
		 * @return {UpdateMonitoringScheduleResponse} Success
		 */
		UpdateMonitoringSchedule(requestBody: UpdateMonitoringScheduleRequest): Observable<UpdateMonitoringScheduleResponse> {
			return this.http.post<UpdateMonitoringScheduleResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateMonitoringSchedule', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.
		 * Post #X-Amz-Target=SageMaker.UpdateNotebookInstance
		 * @return {UpdateNotebookInstanceOutput} Success
		 */
		UpdateNotebookInstance(requestBody: UpdateNotebookInstanceInput): Observable<UpdateNotebookInstanceOutput> {
			return this.http.post<UpdateNotebookInstanceOutput>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateNotebookInstance', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a notebook instance lifecycle configuration created with the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateNotebookInstanceLifecycleConfig.html">CreateNotebookInstanceLifecycleConfig</a> API.
		 * Post #X-Amz-Target=SageMaker.UpdateNotebookInstanceLifecycleConfig
		 * @return {UpdateNotebookInstanceLifecycleConfigOutput} Success
		 */
		UpdateNotebookInstanceLifecycleConfig(requestBody: UpdateNotebookInstanceLifecycleConfigInput): Observable<UpdateNotebookInstanceLifecycleConfigOutput> {
			return this.http.post<UpdateNotebookInstanceLifecycleConfigOutput>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateNotebookInstanceLifecycleConfig', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a pipeline.
		 * Post #X-Amz-Target=SageMaker.UpdatePipeline
		 * @return {UpdatePipelineResponse} Success
		 */
		UpdatePipeline(requestBody: UpdatePipelineRequest): Observable<UpdatePipelineResponse> {
			return this.http.post<UpdatePipelineResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdatePipeline', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a pipeline execution.
		 * Post #X-Amz-Target=SageMaker.UpdatePipelineExecution
		 * @return {UpdatePipelineExecutionResponse} Success
		 */
		UpdatePipelineExecution(requestBody: UpdatePipelineExecutionRequest): Observable<UpdatePipelineExecutionResponse> {
			return this.http.post<UpdatePipelineExecutionResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdatePipelineExecution', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model.</p> <note> <p>You must not update a project that is in use. If you update the <code>ServiceCatalogProvisioningUpdateDetails</code> of a project that is active or being created, or updated, you may lose resources already created by the project.</p> </note>
		 * Post #X-Amz-Target=SageMaker.UpdateProject
		 * @return {UpdateProjectOutput} Success
		 */
		UpdateProject(requestBody: UpdateProjectInput): Observable<UpdateProjectOutput> {
			return this.http.post<UpdateProjectOutput>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateProject', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the settings of a space.
		 * Post #X-Amz-Target=SageMaker.UpdateSpace
		 * @return {UpdateSpaceResponse} Success
		 */
		UpdateSpace(requestBody: UpdateSpaceRequest): Observable<UpdateSpaceResponse> {
			return this.http.post<UpdateSpaceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateSpace', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.
		 * Post #X-Amz-Target=SageMaker.UpdateTrainingJob
		 * @return {UpdateTrainingJobResponse} Success
		 */
		UpdateTrainingJob(requestBody: UpdateTrainingJobRequest): Observable<UpdateTrainingJobResponse> {
			return this.http.post<UpdateTrainingJobResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateTrainingJob', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates the display name of a trial.
		 * Post #X-Amz-Target=SageMaker.UpdateTrial
		 * @return {UpdateTrialResponse} Success
		 */
		UpdateTrial(requestBody: UpdateTrialRequest): Observable<UpdateTrialResponse> {
			return this.http.post<UpdateTrialResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateTrial', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates one or more properties of a trial component.
		 * Post #X-Amz-Target=SageMaker.UpdateTrialComponent
		 * @return {UpdateTrialComponentResponse} Success
		 */
		UpdateTrialComponent(requestBody: UpdateTrialComponentRequest): Observable<UpdateTrialComponentResponse> {
			return this.http.post<UpdateTrialComponentResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateTrialComponent', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates a user profile.
		 * Post #X-Amz-Target=SageMaker.UpdateUserProfile
		 * @return {UpdateUserProfileResponse} Success
		 */
		UpdateUserProfile(requestBody: UpdateUserProfileRequest): Observable<UpdateUserProfileResponse> {
			return this.http.post<UpdateUserProfileResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateUserProfile', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration.</p> <p>The worker portal is now supported in VPC and public internet.</p> <p> Use <code>SourceIpConfig</code> to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">CIDRs</a>. By default, a workforce isn't restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a <code>Not Found</code> error message on the worker portal.</p> <p>To restrict access to all the workers in public internet, add the <code>SourceIpConfig</code> CIDR value as "10.0.0.0/16".</p> <important> <p>Amazon SageMaker does not support Source Ip restriction for worker portals in VPC.</p> </important> <p>Use <code>OidcConfig</code> to update the configuration of a workforce created using your own OIDC IdP. </p> <important> <p>You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteWorkteam.html">DeleteWorkteam</a> operation.</p> </important> <p>After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeWorkforce.html">DescribeWorkforce</a> operation.</p> <important> <p>This operation only applies to private workforces.</p> </important>
		 * Post #X-Amz-Target=SageMaker.UpdateWorkforce
		 * @return {UpdateWorkforceResponse} Success
		 */
		UpdateWorkforce(requestBody: UpdateWorkforceRequest): Observable<UpdateWorkforceResponse> {
			return this.http.post<UpdateWorkforceResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateWorkforce', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Updates an existing work team with new member definitions or description.
		 * Post #X-Amz-Target=SageMaker.UpdateWorkteam
		 * @return {UpdateWorkteamResponse} Success
		 */
		UpdateWorkteam(requestBody: UpdateWorkteamRequest): Observable<UpdateWorkteamResponse> {
			return this.http.post<UpdateWorkteamResponse>(this.baseUri + '#X-Amz-Target=SageMaker.UpdateWorkteam', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

	export enum AddAssociationX_Amz_Target { 'SageMaker.AddAssociation' = 'SageMaker.AddAssociation' }

	export enum AddTagsX_Amz_Target { 'SageMaker.AddTags' = 'SageMaker.AddTags' }

	export enum AssociateTrialComponentX_Amz_Target { 'SageMaker.AssociateTrialComponent' = 'SageMaker.AssociateTrialComponent' }

	export enum BatchDescribeModelPackageX_Amz_Target { 'SageMaker.BatchDescribeModelPackage' = 'SageMaker.BatchDescribeModelPackage' }

	export enum CreateActionX_Amz_Target { 'SageMaker.CreateAction' = 'SageMaker.CreateAction' }

	export enum CreateAlgorithmX_Amz_Target { 'SageMaker.CreateAlgorithm' = 'SageMaker.CreateAlgorithm' }

	export enum CreateAppX_Amz_Target { 'SageMaker.CreateApp' = 'SageMaker.CreateApp' }

	export enum CreateAppImageConfigX_Amz_Target { 'SageMaker.CreateAppImageConfig' = 'SageMaker.CreateAppImageConfig' }

	export enum CreateArtifactX_Amz_Target { 'SageMaker.CreateArtifact' = 'SageMaker.CreateArtifact' }

	export enum CreateAutoMLJobX_Amz_Target { 'SageMaker.CreateAutoMLJob' = 'SageMaker.CreateAutoMLJob' }

	export enum CreateAutoMLJobV2X_Amz_Target { 'SageMaker.CreateAutoMLJobV2' = 'SageMaker.CreateAutoMLJobV2' }

	export enum CreateCodeRepositoryX_Amz_Target { 'SageMaker.CreateCodeRepository' = 'SageMaker.CreateCodeRepository' }

	export enum CreateCompilationJobX_Amz_Target { 'SageMaker.CreateCompilationJob' = 'SageMaker.CreateCompilationJob' }

	export enum CreateContextX_Amz_Target { 'SageMaker.CreateContext' = 'SageMaker.CreateContext' }

	export enum CreateDataQualityJobDefinitionX_Amz_Target { 'SageMaker.CreateDataQualityJobDefinition' = 'SageMaker.CreateDataQualityJobDefinition' }

	export enum CreateDeviceFleetX_Amz_Target { 'SageMaker.CreateDeviceFleet' = 'SageMaker.CreateDeviceFleet' }

	export enum CreateDomainX_Amz_Target { 'SageMaker.CreateDomain' = 'SageMaker.CreateDomain' }

	export enum CreateEdgeDeploymentPlanX_Amz_Target { 'SageMaker.CreateEdgeDeploymentPlan' = 'SageMaker.CreateEdgeDeploymentPlan' }

	export enum CreateEdgeDeploymentStageX_Amz_Target { 'SageMaker.CreateEdgeDeploymentStage' = 'SageMaker.CreateEdgeDeploymentStage' }

	export enum CreateEdgePackagingJobX_Amz_Target { 'SageMaker.CreateEdgePackagingJob' = 'SageMaker.CreateEdgePackagingJob' }

	export enum CreateEndpointX_Amz_Target { 'SageMaker.CreateEndpoint' = 'SageMaker.CreateEndpoint' }

	export enum CreateEndpointConfigX_Amz_Target { 'SageMaker.CreateEndpointConfig' = 'SageMaker.CreateEndpointConfig' }

	export enum CreateExperimentX_Amz_Target { 'SageMaker.CreateExperiment' = 'SageMaker.CreateExperiment' }

	export enum CreateFeatureGroupX_Amz_Target { 'SageMaker.CreateFeatureGroup' = 'SageMaker.CreateFeatureGroup' }

	export enum CreateFlowDefinitionX_Amz_Target { 'SageMaker.CreateFlowDefinition' = 'SageMaker.CreateFlowDefinition' }

	export enum CreateHubX_Amz_Target { 'SageMaker.CreateHub' = 'SageMaker.CreateHub' }

	export enum CreateHumanTaskUiX_Amz_Target { 'SageMaker.CreateHumanTaskUi' = 'SageMaker.CreateHumanTaskUi' }

	export enum CreateHyperParameterTuningJobX_Amz_Target { 'SageMaker.CreateHyperParameterTuningJob' = 'SageMaker.CreateHyperParameterTuningJob' }

	export enum CreateImageX_Amz_Target { 'SageMaker.CreateImage' = 'SageMaker.CreateImage' }

	export enum CreateImageVersionX_Amz_Target { 'SageMaker.CreateImageVersion' = 'SageMaker.CreateImageVersion' }

	export enum CreateInferenceExperimentX_Amz_Target { 'SageMaker.CreateInferenceExperiment' = 'SageMaker.CreateInferenceExperiment' }

	export enum CreateInferenceRecommendationsJobX_Amz_Target { 'SageMaker.CreateInferenceRecommendationsJob' = 'SageMaker.CreateInferenceRecommendationsJob' }

	export enum CreateLabelingJobX_Amz_Target { 'SageMaker.CreateLabelingJob' = 'SageMaker.CreateLabelingJob' }

	export enum CreateModelX_Amz_Target { 'SageMaker.CreateModel' = 'SageMaker.CreateModel' }

	export enum CreateModelBiasJobDefinitionX_Amz_Target { 'SageMaker.CreateModelBiasJobDefinition' = 'SageMaker.CreateModelBiasJobDefinition' }

	export enum CreateModelCardX_Amz_Target { 'SageMaker.CreateModelCard' = 'SageMaker.CreateModelCard' }

	export enum CreateModelCardExportJobX_Amz_Target { 'SageMaker.CreateModelCardExportJob' = 'SageMaker.CreateModelCardExportJob' }

	export enum CreateModelExplainabilityJobDefinitionX_Amz_Target { 'SageMaker.CreateModelExplainabilityJobDefinition' = 'SageMaker.CreateModelExplainabilityJobDefinition' }

	export enum CreateModelPackageX_Amz_Target { 'SageMaker.CreateModelPackage' = 'SageMaker.CreateModelPackage' }

	export enum CreateModelPackageGroupX_Amz_Target { 'SageMaker.CreateModelPackageGroup' = 'SageMaker.CreateModelPackageGroup' }

	export enum CreateModelQualityJobDefinitionX_Amz_Target { 'SageMaker.CreateModelQualityJobDefinition' = 'SageMaker.CreateModelQualityJobDefinition' }

	export enum CreateMonitoringScheduleX_Amz_Target { 'SageMaker.CreateMonitoringSchedule' = 'SageMaker.CreateMonitoringSchedule' }

	export enum CreateNotebookInstanceX_Amz_Target { 'SageMaker.CreateNotebookInstance' = 'SageMaker.CreateNotebookInstance' }

	export enum CreateNotebookInstanceLifecycleConfigX_Amz_Target { 'SageMaker.CreateNotebookInstanceLifecycleConfig' = 'SageMaker.CreateNotebookInstanceLifecycleConfig' }

	export enum CreatePipelineX_Amz_Target { 'SageMaker.CreatePipeline' = 'SageMaker.CreatePipeline' }

	export enum CreatePresignedDomainUrlX_Amz_Target { 'SageMaker.CreatePresignedDomainUrl' = 'SageMaker.CreatePresignedDomainUrl' }

	export enum CreatePresignedNotebookInstanceUrlX_Amz_Target { 'SageMaker.CreatePresignedNotebookInstanceUrl' = 'SageMaker.CreatePresignedNotebookInstanceUrl' }

	export enum CreateProcessingJobX_Amz_Target { 'SageMaker.CreateProcessingJob' = 'SageMaker.CreateProcessingJob' }

	export enum CreateProjectX_Amz_Target { 'SageMaker.CreateProject' = 'SageMaker.CreateProject' }

	export enum CreateSpaceX_Amz_Target { 'SageMaker.CreateSpace' = 'SageMaker.CreateSpace' }

	export enum CreateStudioLifecycleConfigX_Amz_Target { 'SageMaker.CreateStudioLifecycleConfig' = 'SageMaker.CreateStudioLifecycleConfig' }

	export enum CreateTrainingJobX_Amz_Target { 'SageMaker.CreateTrainingJob' = 'SageMaker.CreateTrainingJob' }

	export enum CreateTransformJobX_Amz_Target { 'SageMaker.CreateTransformJob' = 'SageMaker.CreateTransformJob' }

	export enum CreateTrialX_Amz_Target { 'SageMaker.CreateTrial' = 'SageMaker.CreateTrial' }

	export enum CreateTrialComponentX_Amz_Target { 'SageMaker.CreateTrialComponent' = 'SageMaker.CreateTrialComponent' }

	export enum CreateUserProfileX_Amz_Target { 'SageMaker.CreateUserProfile' = 'SageMaker.CreateUserProfile' }

	export enum CreateWorkforceX_Amz_Target { 'SageMaker.CreateWorkforce' = 'SageMaker.CreateWorkforce' }

	export enum CreateWorkteamX_Amz_Target { 'SageMaker.CreateWorkteam' = 'SageMaker.CreateWorkteam' }

	export enum DeleteActionX_Amz_Target { 'SageMaker.DeleteAction' = 'SageMaker.DeleteAction' }

	export enum DeleteAlgorithmX_Amz_Target { 'SageMaker.DeleteAlgorithm' = 'SageMaker.DeleteAlgorithm' }

	export enum DeleteAppX_Amz_Target { 'SageMaker.DeleteApp' = 'SageMaker.DeleteApp' }

	export enum DeleteAppImageConfigX_Amz_Target { 'SageMaker.DeleteAppImageConfig' = 'SageMaker.DeleteAppImageConfig' }

	export enum DeleteArtifactX_Amz_Target { 'SageMaker.DeleteArtifact' = 'SageMaker.DeleteArtifact' }

	export enum DeleteAssociationX_Amz_Target { 'SageMaker.DeleteAssociation' = 'SageMaker.DeleteAssociation' }

	export enum DeleteCodeRepositoryX_Amz_Target { 'SageMaker.DeleteCodeRepository' = 'SageMaker.DeleteCodeRepository' }

	export enum DeleteContextX_Amz_Target { 'SageMaker.DeleteContext' = 'SageMaker.DeleteContext' }

	export enum DeleteDataQualityJobDefinitionX_Amz_Target { 'SageMaker.DeleteDataQualityJobDefinition' = 'SageMaker.DeleteDataQualityJobDefinition' }

	export enum DeleteDeviceFleetX_Amz_Target { 'SageMaker.DeleteDeviceFleet' = 'SageMaker.DeleteDeviceFleet' }

	export enum DeleteDomainX_Amz_Target { 'SageMaker.DeleteDomain' = 'SageMaker.DeleteDomain' }

	export enum DeleteEdgeDeploymentPlanX_Amz_Target { 'SageMaker.DeleteEdgeDeploymentPlan' = 'SageMaker.DeleteEdgeDeploymentPlan' }

	export enum DeleteEdgeDeploymentStageX_Amz_Target { 'SageMaker.DeleteEdgeDeploymentStage' = 'SageMaker.DeleteEdgeDeploymentStage' }

	export enum DeleteEndpointX_Amz_Target { 'SageMaker.DeleteEndpoint' = 'SageMaker.DeleteEndpoint' }

	export enum DeleteEndpointConfigX_Amz_Target { 'SageMaker.DeleteEndpointConfig' = 'SageMaker.DeleteEndpointConfig' }

	export enum DeleteExperimentX_Amz_Target { 'SageMaker.DeleteExperiment' = 'SageMaker.DeleteExperiment' }

	export enum DeleteFeatureGroupX_Amz_Target { 'SageMaker.DeleteFeatureGroup' = 'SageMaker.DeleteFeatureGroup' }

	export enum DeleteFlowDefinitionX_Amz_Target { 'SageMaker.DeleteFlowDefinition' = 'SageMaker.DeleteFlowDefinition' }

	export enum DeleteHubX_Amz_Target { 'SageMaker.DeleteHub' = 'SageMaker.DeleteHub' }

	export enum DeleteHubContentX_Amz_Target { 'SageMaker.DeleteHubContent' = 'SageMaker.DeleteHubContent' }

	export enum DeleteHumanTaskUiX_Amz_Target { 'SageMaker.DeleteHumanTaskUi' = 'SageMaker.DeleteHumanTaskUi' }

	export enum DeleteImageX_Amz_Target { 'SageMaker.DeleteImage' = 'SageMaker.DeleteImage' }

	export enum DeleteImageVersionX_Amz_Target { 'SageMaker.DeleteImageVersion' = 'SageMaker.DeleteImageVersion' }

	export enum DeleteInferenceExperimentX_Amz_Target { 'SageMaker.DeleteInferenceExperiment' = 'SageMaker.DeleteInferenceExperiment' }

	export enum DeleteModelX_Amz_Target { 'SageMaker.DeleteModel' = 'SageMaker.DeleteModel' }

	export enum DeleteModelBiasJobDefinitionX_Amz_Target { 'SageMaker.DeleteModelBiasJobDefinition' = 'SageMaker.DeleteModelBiasJobDefinition' }

	export enum DeleteModelCardX_Amz_Target { 'SageMaker.DeleteModelCard' = 'SageMaker.DeleteModelCard' }

	export enum DeleteModelExplainabilityJobDefinitionX_Amz_Target { 'SageMaker.DeleteModelExplainabilityJobDefinition' = 'SageMaker.DeleteModelExplainabilityJobDefinition' }

	export enum DeleteModelPackageX_Amz_Target { 'SageMaker.DeleteModelPackage' = 'SageMaker.DeleteModelPackage' }

	export enum DeleteModelPackageGroupX_Amz_Target { 'SageMaker.DeleteModelPackageGroup' = 'SageMaker.DeleteModelPackageGroup' }

	export enum DeleteModelPackageGroupPolicyX_Amz_Target { 'SageMaker.DeleteModelPackageGroupPolicy' = 'SageMaker.DeleteModelPackageGroupPolicy' }

	export enum DeleteModelQualityJobDefinitionX_Amz_Target { 'SageMaker.DeleteModelQualityJobDefinition' = 'SageMaker.DeleteModelQualityJobDefinition' }

	export enum DeleteMonitoringScheduleX_Amz_Target { 'SageMaker.DeleteMonitoringSchedule' = 'SageMaker.DeleteMonitoringSchedule' }

	export enum DeleteNotebookInstanceX_Amz_Target { 'SageMaker.DeleteNotebookInstance' = 'SageMaker.DeleteNotebookInstance' }

	export enum DeleteNotebookInstanceLifecycleConfigX_Amz_Target { 'SageMaker.DeleteNotebookInstanceLifecycleConfig' = 'SageMaker.DeleteNotebookInstanceLifecycleConfig' }

	export enum DeletePipelineX_Amz_Target { 'SageMaker.DeletePipeline' = 'SageMaker.DeletePipeline' }

	export enum DeleteProjectX_Amz_Target { 'SageMaker.DeleteProject' = 'SageMaker.DeleteProject' }

	export enum DeleteSpaceX_Amz_Target { 'SageMaker.DeleteSpace' = 'SageMaker.DeleteSpace' }

	export enum DeleteStudioLifecycleConfigX_Amz_Target { 'SageMaker.DeleteStudioLifecycleConfig' = 'SageMaker.DeleteStudioLifecycleConfig' }

	export enum DeleteTagsX_Amz_Target { 'SageMaker.DeleteTags' = 'SageMaker.DeleteTags' }

	export enum DeleteTrialX_Amz_Target { 'SageMaker.DeleteTrial' = 'SageMaker.DeleteTrial' }

	export enum DeleteTrialComponentX_Amz_Target { 'SageMaker.DeleteTrialComponent' = 'SageMaker.DeleteTrialComponent' }

	export enum DeleteUserProfileX_Amz_Target { 'SageMaker.DeleteUserProfile' = 'SageMaker.DeleteUserProfile' }

	export enum DeleteWorkforceX_Amz_Target { 'SageMaker.DeleteWorkforce' = 'SageMaker.DeleteWorkforce' }

	export enum DeleteWorkteamX_Amz_Target { 'SageMaker.DeleteWorkteam' = 'SageMaker.DeleteWorkteam' }

	export enum DeregisterDevicesX_Amz_Target { 'SageMaker.DeregisterDevices' = 'SageMaker.DeregisterDevices' }

	export enum DescribeActionX_Amz_Target { 'SageMaker.DescribeAction' = 'SageMaker.DescribeAction' }

	export enum DescribeAlgorithmX_Amz_Target { 'SageMaker.DescribeAlgorithm' = 'SageMaker.DescribeAlgorithm' }

	export enum DescribeAppX_Amz_Target { 'SageMaker.DescribeApp' = 'SageMaker.DescribeApp' }

	export enum DescribeAppImageConfigX_Amz_Target { 'SageMaker.DescribeAppImageConfig' = 'SageMaker.DescribeAppImageConfig' }

	export enum DescribeArtifactX_Amz_Target { 'SageMaker.DescribeArtifact' = 'SageMaker.DescribeArtifact' }

	export enum DescribeAutoMLJobX_Amz_Target { 'SageMaker.DescribeAutoMLJob' = 'SageMaker.DescribeAutoMLJob' }

	export enum DescribeAutoMLJobV2X_Amz_Target { 'SageMaker.DescribeAutoMLJobV2' = 'SageMaker.DescribeAutoMLJobV2' }

	export enum DescribeCodeRepositoryX_Amz_Target { 'SageMaker.DescribeCodeRepository' = 'SageMaker.DescribeCodeRepository' }

	export enum DescribeCompilationJobX_Amz_Target { 'SageMaker.DescribeCompilationJob' = 'SageMaker.DescribeCompilationJob' }

	export enum DescribeContextX_Amz_Target { 'SageMaker.DescribeContext' = 'SageMaker.DescribeContext' }

	export enum DescribeDataQualityJobDefinitionX_Amz_Target { 'SageMaker.DescribeDataQualityJobDefinition' = 'SageMaker.DescribeDataQualityJobDefinition' }

	export enum DescribeDeviceX_Amz_Target { 'SageMaker.DescribeDevice' = 'SageMaker.DescribeDevice' }

	export enum DescribeDeviceFleetX_Amz_Target { 'SageMaker.DescribeDeviceFleet' = 'SageMaker.DescribeDeviceFleet' }

	export enum DescribeDomainX_Amz_Target { 'SageMaker.DescribeDomain' = 'SageMaker.DescribeDomain' }

	export enum DescribeEdgeDeploymentPlanX_Amz_Target { 'SageMaker.DescribeEdgeDeploymentPlan' = 'SageMaker.DescribeEdgeDeploymentPlan' }

	export enum DescribeEdgePackagingJobX_Amz_Target { 'SageMaker.DescribeEdgePackagingJob' = 'SageMaker.DescribeEdgePackagingJob' }

	export enum DescribeEndpointX_Amz_Target { 'SageMaker.DescribeEndpoint' = 'SageMaker.DescribeEndpoint' }

	export enum DescribeEndpointConfigX_Amz_Target { 'SageMaker.DescribeEndpointConfig' = 'SageMaker.DescribeEndpointConfig' }

	export enum DescribeExperimentX_Amz_Target { 'SageMaker.DescribeExperiment' = 'SageMaker.DescribeExperiment' }

	export enum DescribeFeatureGroupX_Amz_Target { 'SageMaker.DescribeFeatureGroup' = 'SageMaker.DescribeFeatureGroup' }

	export enum DescribeFeatureMetadataX_Amz_Target { 'SageMaker.DescribeFeatureMetadata' = 'SageMaker.DescribeFeatureMetadata' }

	export enum DescribeFlowDefinitionX_Amz_Target { 'SageMaker.DescribeFlowDefinition' = 'SageMaker.DescribeFlowDefinition' }

	export enum DescribeHubX_Amz_Target { 'SageMaker.DescribeHub' = 'SageMaker.DescribeHub' }

	export enum DescribeHubContentX_Amz_Target { 'SageMaker.DescribeHubContent' = 'SageMaker.DescribeHubContent' }

	export enum DescribeHumanTaskUiX_Amz_Target { 'SageMaker.DescribeHumanTaskUi' = 'SageMaker.DescribeHumanTaskUi' }

	export enum DescribeHyperParameterTuningJobX_Amz_Target { 'SageMaker.DescribeHyperParameterTuningJob' = 'SageMaker.DescribeHyperParameterTuningJob' }

	export enum DescribeImageX_Amz_Target { 'SageMaker.DescribeImage' = 'SageMaker.DescribeImage' }

	export enum DescribeImageVersionX_Amz_Target { 'SageMaker.DescribeImageVersion' = 'SageMaker.DescribeImageVersion' }

	export enum DescribeInferenceExperimentX_Amz_Target { 'SageMaker.DescribeInferenceExperiment' = 'SageMaker.DescribeInferenceExperiment' }

	export enum DescribeInferenceRecommendationsJobX_Amz_Target { 'SageMaker.DescribeInferenceRecommendationsJob' = 'SageMaker.DescribeInferenceRecommendationsJob' }

	export enum DescribeLabelingJobX_Amz_Target { 'SageMaker.DescribeLabelingJob' = 'SageMaker.DescribeLabelingJob' }

	export enum DescribeLineageGroupX_Amz_Target { 'SageMaker.DescribeLineageGroup' = 'SageMaker.DescribeLineageGroup' }

	export enum DescribeModelX_Amz_Target { 'SageMaker.DescribeModel' = 'SageMaker.DescribeModel' }

	export enum DescribeModelBiasJobDefinitionX_Amz_Target { 'SageMaker.DescribeModelBiasJobDefinition' = 'SageMaker.DescribeModelBiasJobDefinition' }

	export enum DescribeModelCardX_Amz_Target { 'SageMaker.DescribeModelCard' = 'SageMaker.DescribeModelCard' }

	export enum DescribeModelCardExportJobX_Amz_Target { 'SageMaker.DescribeModelCardExportJob' = 'SageMaker.DescribeModelCardExportJob' }

	export enum DescribeModelExplainabilityJobDefinitionX_Amz_Target { 'SageMaker.DescribeModelExplainabilityJobDefinition' = 'SageMaker.DescribeModelExplainabilityJobDefinition' }

	export enum DescribeModelPackageX_Amz_Target { 'SageMaker.DescribeModelPackage' = 'SageMaker.DescribeModelPackage' }

	export enum DescribeModelPackageGroupX_Amz_Target { 'SageMaker.DescribeModelPackageGroup' = 'SageMaker.DescribeModelPackageGroup' }

	export enum DescribeModelQualityJobDefinitionX_Amz_Target { 'SageMaker.DescribeModelQualityJobDefinition' = 'SageMaker.DescribeModelQualityJobDefinition' }

	export enum DescribeMonitoringScheduleX_Amz_Target { 'SageMaker.DescribeMonitoringSchedule' = 'SageMaker.DescribeMonitoringSchedule' }

	export enum DescribeNotebookInstanceX_Amz_Target { 'SageMaker.DescribeNotebookInstance' = 'SageMaker.DescribeNotebookInstance' }

	export enum DescribeNotebookInstanceLifecycleConfigX_Amz_Target { 'SageMaker.DescribeNotebookInstanceLifecycleConfig' = 'SageMaker.DescribeNotebookInstanceLifecycleConfig' }

	export enum DescribePipelineX_Amz_Target { 'SageMaker.DescribePipeline' = 'SageMaker.DescribePipeline' }

	export enum DescribePipelineDefinitionForExecutionX_Amz_Target { 'SageMaker.DescribePipelineDefinitionForExecution' = 'SageMaker.DescribePipelineDefinitionForExecution' }

	export enum DescribePipelineExecutionX_Amz_Target { 'SageMaker.DescribePipelineExecution' = 'SageMaker.DescribePipelineExecution' }

	export enum DescribeProcessingJobX_Amz_Target { 'SageMaker.DescribeProcessingJob' = 'SageMaker.DescribeProcessingJob' }

	export enum DescribeProjectX_Amz_Target { 'SageMaker.DescribeProject' = 'SageMaker.DescribeProject' }

	export enum DescribeSpaceX_Amz_Target { 'SageMaker.DescribeSpace' = 'SageMaker.DescribeSpace' }

	export enum DescribeStudioLifecycleConfigX_Amz_Target { 'SageMaker.DescribeStudioLifecycleConfig' = 'SageMaker.DescribeStudioLifecycleConfig' }

	export enum DescribeSubscribedWorkteamX_Amz_Target { 'SageMaker.DescribeSubscribedWorkteam' = 'SageMaker.DescribeSubscribedWorkteam' }

	export enum DescribeTrainingJobX_Amz_Target { 'SageMaker.DescribeTrainingJob' = 'SageMaker.DescribeTrainingJob' }

	export enum DescribeTransformJobX_Amz_Target { 'SageMaker.DescribeTransformJob' = 'SageMaker.DescribeTransformJob' }

	export enum DescribeTrialX_Amz_Target { 'SageMaker.DescribeTrial' = 'SageMaker.DescribeTrial' }

	export enum DescribeTrialComponentX_Amz_Target { 'SageMaker.DescribeTrialComponent' = 'SageMaker.DescribeTrialComponent' }

	export enum DescribeUserProfileX_Amz_Target { 'SageMaker.DescribeUserProfile' = 'SageMaker.DescribeUserProfile' }

	export enum DescribeWorkforceX_Amz_Target { 'SageMaker.DescribeWorkforce' = 'SageMaker.DescribeWorkforce' }

	export enum DescribeWorkteamX_Amz_Target { 'SageMaker.DescribeWorkteam' = 'SageMaker.DescribeWorkteam' }

	export enum DisableSagemakerServicecatalogPortfolioX_Amz_Target { 'SageMaker.DisableSagemakerServicecatalogPortfolio' = 'SageMaker.DisableSagemakerServicecatalogPortfolio' }

	export enum DisassociateTrialComponentX_Amz_Target { 'SageMaker.DisassociateTrialComponent' = 'SageMaker.DisassociateTrialComponent' }

	export enum EnableSagemakerServicecatalogPortfolioX_Amz_Target { 'SageMaker.EnableSagemakerServicecatalogPortfolio' = 'SageMaker.EnableSagemakerServicecatalogPortfolio' }

	export enum GetDeviceFleetReportX_Amz_Target { 'SageMaker.GetDeviceFleetReport' = 'SageMaker.GetDeviceFleetReport' }

	export enum GetLineageGroupPolicyX_Amz_Target { 'SageMaker.GetLineageGroupPolicy' = 'SageMaker.GetLineageGroupPolicy' }

	export enum GetModelPackageGroupPolicyX_Amz_Target { 'SageMaker.GetModelPackageGroupPolicy' = 'SageMaker.GetModelPackageGroupPolicy' }

	export enum GetSagemakerServicecatalogPortfolioStatusX_Amz_Target { 'SageMaker.GetSagemakerServicecatalogPortfolioStatus' = 'SageMaker.GetSagemakerServicecatalogPortfolioStatus' }

	export enum GetScalingConfigurationRecommendationX_Amz_Target { 'SageMaker.GetScalingConfigurationRecommendation' = 'SageMaker.GetScalingConfigurationRecommendation' }

	export enum GetSearchSuggestionsX_Amz_Target { 'SageMaker.GetSearchSuggestions' = 'SageMaker.GetSearchSuggestions' }

	export enum ImportHubContentX_Amz_Target { 'SageMaker.ImportHubContent' = 'SageMaker.ImportHubContent' }

	export enum ListActionsX_Amz_Target { 'SageMaker.ListActions' = 'SageMaker.ListActions' }

	export enum ListAlgorithmsX_Amz_Target { 'SageMaker.ListAlgorithms' = 'SageMaker.ListAlgorithms' }

	export enum ListAliasesX_Amz_Target { 'SageMaker.ListAliases' = 'SageMaker.ListAliases' }

	export enum ListAppImageConfigsX_Amz_Target { 'SageMaker.ListAppImageConfigs' = 'SageMaker.ListAppImageConfigs' }

	export enum ListAppsX_Amz_Target { 'SageMaker.ListApps' = 'SageMaker.ListApps' }

	export enum ListArtifactsX_Amz_Target { 'SageMaker.ListArtifacts' = 'SageMaker.ListArtifacts' }

	export enum ListAssociationsX_Amz_Target { 'SageMaker.ListAssociations' = 'SageMaker.ListAssociations' }

	export enum ListAutoMLJobsX_Amz_Target { 'SageMaker.ListAutoMLJobs' = 'SageMaker.ListAutoMLJobs' }

	export enum ListCandidatesForAutoMLJobX_Amz_Target { 'SageMaker.ListCandidatesForAutoMLJob' = 'SageMaker.ListCandidatesForAutoMLJob' }

	export enum ListCodeRepositoriesX_Amz_Target { 'SageMaker.ListCodeRepositories' = 'SageMaker.ListCodeRepositories' }

	export enum ListCompilationJobsX_Amz_Target { 'SageMaker.ListCompilationJobs' = 'SageMaker.ListCompilationJobs' }

	export enum ListContextsX_Amz_Target { 'SageMaker.ListContexts' = 'SageMaker.ListContexts' }

	export enum ListDataQualityJobDefinitionsX_Amz_Target { 'SageMaker.ListDataQualityJobDefinitions' = 'SageMaker.ListDataQualityJobDefinitions' }

	export enum ListDeviceFleetsX_Amz_Target { 'SageMaker.ListDeviceFleets' = 'SageMaker.ListDeviceFleets' }

	export enum ListDevicesX_Amz_Target { 'SageMaker.ListDevices' = 'SageMaker.ListDevices' }

	export enum ListDomainsX_Amz_Target { 'SageMaker.ListDomains' = 'SageMaker.ListDomains' }

	export enum ListEdgeDeploymentPlansX_Amz_Target { 'SageMaker.ListEdgeDeploymentPlans' = 'SageMaker.ListEdgeDeploymentPlans' }

	export enum ListEdgePackagingJobsX_Amz_Target { 'SageMaker.ListEdgePackagingJobs' = 'SageMaker.ListEdgePackagingJobs' }

	export enum ListEndpointConfigsX_Amz_Target { 'SageMaker.ListEndpointConfigs' = 'SageMaker.ListEndpointConfigs' }

	export enum ListEndpointsX_Amz_Target { 'SageMaker.ListEndpoints' = 'SageMaker.ListEndpoints' }

	export enum ListExperimentsX_Amz_Target { 'SageMaker.ListExperiments' = 'SageMaker.ListExperiments' }

	export enum ListFeatureGroupsX_Amz_Target { 'SageMaker.ListFeatureGroups' = 'SageMaker.ListFeatureGroups' }

	export enum ListFlowDefinitionsX_Amz_Target { 'SageMaker.ListFlowDefinitions' = 'SageMaker.ListFlowDefinitions' }

	export enum ListHubContentVersionsX_Amz_Target { 'SageMaker.ListHubContentVersions' = 'SageMaker.ListHubContentVersions' }

	export enum ListHubContentsX_Amz_Target { 'SageMaker.ListHubContents' = 'SageMaker.ListHubContents' }

	export enum ListHubsX_Amz_Target { 'SageMaker.ListHubs' = 'SageMaker.ListHubs' }

	export enum ListHumanTaskUisX_Amz_Target { 'SageMaker.ListHumanTaskUis' = 'SageMaker.ListHumanTaskUis' }

	export enum ListHyperParameterTuningJobsX_Amz_Target { 'SageMaker.ListHyperParameterTuningJobs' = 'SageMaker.ListHyperParameterTuningJobs' }

	export enum ListImageVersionsX_Amz_Target { 'SageMaker.ListImageVersions' = 'SageMaker.ListImageVersions' }

	export enum ListImagesX_Amz_Target { 'SageMaker.ListImages' = 'SageMaker.ListImages' }

	export enum ListInferenceExperimentsX_Amz_Target { 'SageMaker.ListInferenceExperiments' = 'SageMaker.ListInferenceExperiments' }

	export enum ListInferenceRecommendationsJobStepsX_Amz_Target { 'SageMaker.ListInferenceRecommendationsJobSteps' = 'SageMaker.ListInferenceRecommendationsJobSteps' }

	export enum ListInferenceRecommendationsJobsX_Amz_Target { 'SageMaker.ListInferenceRecommendationsJobs' = 'SageMaker.ListInferenceRecommendationsJobs' }

	export enum ListLabelingJobsX_Amz_Target { 'SageMaker.ListLabelingJobs' = 'SageMaker.ListLabelingJobs' }

	export enum ListLabelingJobsForWorkteamX_Amz_Target { 'SageMaker.ListLabelingJobsForWorkteam' = 'SageMaker.ListLabelingJobsForWorkteam' }

	export enum ListLineageGroupsX_Amz_Target { 'SageMaker.ListLineageGroups' = 'SageMaker.ListLineageGroups' }

	export enum ListModelBiasJobDefinitionsX_Amz_Target { 'SageMaker.ListModelBiasJobDefinitions' = 'SageMaker.ListModelBiasJobDefinitions' }

	export enum ListModelCardExportJobsX_Amz_Target { 'SageMaker.ListModelCardExportJobs' = 'SageMaker.ListModelCardExportJobs' }

	export enum ListModelCardVersionsX_Amz_Target { 'SageMaker.ListModelCardVersions' = 'SageMaker.ListModelCardVersions' }

	export enum ListModelCardsX_Amz_Target { 'SageMaker.ListModelCards' = 'SageMaker.ListModelCards' }

	export enum ListModelExplainabilityJobDefinitionsX_Amz_Target { 'SageMaker.ListModelExplainabilityJobDefinitions' = 'SageMaker.ListModelExplainabilityJobDefinitions' }

	export enum ListModelMetadataX_Amz_Target { 'SageMaker.ListModelMetadata' = 'SageMaker.ListModelMetadata' }

	export enum ListModelPackageGroupsX_Amz_Target { 'SageMaker.ListModelPackageGroups' = 'SageMaker.ListModelPackageGroups' }

	export enum ListModelPackagesX_Amz_Target { 'SageMaker.ListModelPackages' = 'SageMaker.ListModelPackages' }

	export enum ListModelQualityJobDefinitionsX_Amz_Target { 'SageMaker.ListModelQualityJobDefinitions' = 'SageMaker.ListModelQualityJobDefinitions' }

	export enum ListModelsX_Amz_Target { 'SageMaker.ListModels' = 'SageMaker.ListModels' }

	export enum ListMonitoringAlertHistoryX_Amz_Target { 'SageMaker.ListMonitoringAlertHistory' = 'SageMaker.ListMonitoringAlertHistory' }

	export enum ListMonitoringAlertsX_Amz_Target { 'SageMaker.ListMonitoringAlerts' = 'SageMaker.ListMonitoringAlerts' }

	export enum ListMonitoringExecutionsX_Amz_Target { 'SageMaker.ListMonitoringExecutions' = 'SageMaker.ListMonitoringExecutions' }

	export enum ListMonitoringSchedulesX_Amz_Target { 'SageMaker.ListMonitoringSchedules' = 'SageMaker.ListMonitoringSchedules' }

	export enum ListNotebookInstanceLifecycleConfigsX_Amz_Target { 'SageMaker.ListNotebookInstanceLifecycleConfigs' = 'SageMaker.ListNotebookInstanceLifecycleConfigs' }

	export enum ListNotebookInstancesX_Amz_Target { 'SageMaker.ListNotebookInstances' = 'SageMaker.ListNotebookInstances' }

	export enum ListPipelineExecutionStepsX_Amz_Target { 'SageMaker.ListPipelineExecutionSteps' = 'SageMaker.ListPipelineExecutionSteps' }

	export enum ListPipelineExecutionsX_Amz_Target { 'SageMaker.ListPipelineExecutions' = 'SageMaker.ListPipelineExecutions' }

	export enum ListPipelineParametersForExecutionX_Amz_Target { 'SageMaker.ListPipelineParametersForExecution' = 'SageMaker.ListPipelineParametersForExecution' }

	export enum ListPipelinesX_Amz_Target { 'SageMaker.ListPipelines' = 'SageMaker.ListPipelines' }

	export enum ListProcessingJobsX_Amz_Target { 'SageMaker.ListProcessingJobs' = 'SageMaker.ListProcessingJobs' }

	export enum ListProjectsX_Amz_Target { 'SageMaker.ListProjects' = 'SageMaker.ListProjects' }

	export enum ListResourceCatalogsX_Amz_Target { 'SageMaker.ListResourceCatalogs' = 'SageMaker.ListResourceCatalogs' }

	export enum ListSpacesX_Amz_Target { 'SageMaker.ListSpaces' = 'SageMaker.ListSpaces' }

	export enum ListStageDevicesX_Amz_Target { 'SageMaker.ListStageDevices' = 'SageMaker.ListStageDevices' }

	export enum ListStudioLifecycleConfigsX_Amz_Target { 'SageMaker.ListStudioLifecycleConfigs' = 'SageMaker.ListStudioLifecycleConfigs' }

	export enum ListSubscribedWorkteamsX_Amz_Target { 'SageMaker.ListSubscribedWorkteams' = 'SageMaker.ListSubscribedWorkteams' }

	export enum ListTagsX_Amz_Target { 'SageMaker.ListTags' = 'SageMaker.ListTags' }

	export enum ListTrainingJobsX_Amz_Target { 'SageMaker.ListTrainingJobs' = 'SageMaker.ListTrainingJobs' }

	export enum ListTrainingJobsForHyperParameterTuningJobX_Amz_Target { 'SageMaker.ListTrainingJobsForHyperParameterTuningJob' = 'SageMaker.ListTrainingJobsForHyperParameterTuningJob' }

	export enum ListTransformJobsX_Amz_Target { 'SageMaker.ListTransformJobs' = 'SageMaker.ListTransformJobs' }

	export enum ListTrialComponentsX_Amz_Target { 'SageMaker.ListTrialComponents' = 'SageMaker.ListTrialComponents' }

	export enum ListTrialsX_Amz_Target { 'SageMaker.ListTrials' = 'SageMaker.ListTrials' }

	export enum ListUserProfilesX_Amz_Target { 'SageMaker.ListUserProfiles' = 'SageMaker.ListUserProfiles' }

	export enum ListWorkforcesX_Amz_Target { 'SageMaker.ListWorkforces' = 'SageMaker.ListWorkforces' }

	export enum ListWorkteamsX_Amz_Target { 'SageMaker.ListWorkteams' = 'SageMaker.ListWorkteams' }

	export enum PutModelPackageGroupPolicyX_Amz_Target { 'SageMaker.PutModelPackageGroupPolicy' = 'SageMaker.PutModelPackageGroupPolicy' }

	export enum QueryLineageX_Amz_Target { 'SageMaker.QueryLineage' = 'SageMaker.QueryLineage' }

	export enum RegisterDevicesX_Amz_Target { 'SageMaker.RegisterDevices' = 'SageMaker.RegisterDevices' }

	export enum RenderUiTemplateX_Amz_Target { 'SageMaker.RenderUiTemplate' = 'SageMaker.RenderUiTemplate' }

	export enum RetryPipelineExecutionX_Amz_Target { 'SageMaker.RetryPipelineExecution' = 'SageMaker.RetryPipelineExecution' }

	export enum SearchX_Amz_Target { 'SageMaker.Search' = 'SageMaker.Search' }

	export enum SendPipelineExecutionStepFailureX_Amz_Target { 'SageMaker.SendPipelineExecutionStepFailure' = 'SageMaker.SendPipelineExecutionStepFailure' }

	export enum SendPipelineExecutionStepSuccessX_Amz_Target { 'SageMaker.SendPipelineExecutionStepSuccess' = 'SageMaker.SendPipelineExecutionStepSuccess' }

	export enum StartEdgeDeploymentStageX_Amz_Target { 'SageMaker.StartEdgeDeploymentStage' = 'SageMaker.StartEdgeDeploymentStage' }

	export enum StartInferenceExperimentX_Amz_Target { 'SageMaker.StartInferenceExperiment' = 'SageMaker.StartInferenceExperiment' }

	export enum StartMonitoringScheduleX_Amz_Target { 'SageMaker.StartMonitoringSchedule' = 'SageMaker.StartMonitoringSchedule' }

	export enum StartNotebookInstanceX_Amz_Target { 'SageMaker.StartNotebookInstance' = 'SageMaker.StartNotebookInstance' }

	export enum StartPipelineExecutionX_Amz_Target { 'SageMaker.StartPipelineExecution' = 'SageMaker.StartPipelineExecution' }

	export enum StopAutoMLJobX_Amz_Target { 'SageMaker.StopAutoMLJob' = 'SageMaker.StopAutoMLJob' }

	export enum StopCompilationJobX_Amz_Target { 'SageMaker.StopCompilationJob' = 'SageMaker.StopCompilationJob' }

	export enum StopEdgeDeploymentStageX_Amz_Target { 'SageMaker.StopEdgeDeploymentStage' = 'SageMaker.StopEdgeDeploymentStage' }

	export enum StopEdgePackagingJobX_Amz_Target { 'SageMaker.StopEdgePackagingJob' = 'SageMaker.StopEdgePackagingJob' }

	export enum StopHyperParameterTuningJobX_Amz_Target { 'SageMaker.StopHyperParameterTuningJob' = 'SageMaker.StopHyperParameterTuningJob' }

	export enum StopInferenceExperimentX_Amz_Target { 'SageMaker.StopInferenceExperiment' = 'SageMaker.StopInferenceExperiment' }

	export enum StopInferenceRecommendationsJobX_Amz_Target { 'SageMaker.StopInferenceRecommendationsJob' = 'SageMaker.StopInferenceRecommendationsJob' }

	export enum StopLabelingJobX_Amz_Target { 'SageMaker.StopLabelingJob' = 'SageMaker.StopLabelingJob' }

	export enum StopMonitoringScheduleX_Amz_Target { 'SageMaker.StopMonitoringSchedule' = 'SageMaker.StopMonitoringSchedule' }

	export enum StopNotebookInstanceX_Amz_Target { 'SageMaker.StopNotebookInstance' = 'SageMaker.StopNotebookInstance' }

	export enum StopPipelineExecutionX_Amz_Target { 'SageMaker.StopPipelineExecution' = 'SageMaker.StopPipelineExecution' }

	export enum StopProcessingJobX_Amz_Target { 'SageMaker.StopProcessingJob' = 'SageMaker.StopProcessingJob' }

	export enum StopTrainingJobX_Amz_Target { 'SageMaker.StopTrainingJob' = 'SageMaker.StopTrainingJob' }

	export enum StopTransformJobX_Amz_Target { 'SageMaker.StopTransformJob' = 'SageMaker.StopTransformJob' }

	export enum UpdateActionX_Amz_Target { 'SageMaker.UpdateAction' = 'SageMaker.UpdateAction' }

	export enum UpdateAppImageConfigX_Amz_Target { 'SageMaker.UpdateAppImageConfig' = 'SageMaker.UpdateAppImageConfig' }

	export enum UpdateArtifactX_Amz_Target { 'SageMaker.UpdateArtifact' = 'SageMaker.UpdateArtifact' }

	export enum UpdateCodeRepositoryX_Amz_Target { 'SageMaker.UpdateCodeRepository' = 'SageMaker.UpdateCodeRepository' }

	export enum UpdateContextX_Amz_Target { 'SageMaker.UpdateContext' = 'SageMaker.UpdateContext' }

	export enum UpdateDeviceFleetX_Amz_Target { 'SageMaker.UpdateDeviceFleet' = 'SageMaker.UpdateDeviceFleet' }

	export enum UpdateDevicesX_Amz_Target { 'SageMaker.UpdateDevices' = 'SageMaker.UpdateDevices' }

	export enum UpdateDomainX_Amz_Target { 'SageMaker.UpdateDomain' = 'SageMaker.UpdateDomain' }

	export enum UpdateEndpointX_Amz_Target { 'SageMaker.UpdateEndpoint' = 'SageMaker.UpdateEndpoint' }

	export enum UpdateEndpointWeightsAndCapacitiesX_Amz_Target { 'SageMaker.UpdateEndpointWeightsAndCapacities' = 'SageMaker.UpdateEndpointWeightsAndCapacities' }

	export enum UpdateExperimentX_Amz_Target { 'SageMaker.UpdateExperiment' = 'SageMaker.UpdateExperiment' }

	export enum UpdateFeatureGroupX_Amz_Target { 'SageMaker.UpdateFeatureGroup' = 'SageMaker.UpdateFeatureGroup' }

	export enum UpdateFeatureMetadataX_Amz_Target { 'SageMaker.UpdateFeatureMetadata' = 'SageMaker.UpdateFeatureMetadata' }

	export enum UpdateHubX_Amz_Target { 'SageMaker.UpdateHub' = 'SageMaker.UpdateHub' }

	export enum UpdateImageX_Amz_Target { 'SageMaker.UpdateImage' = 'SageMaker.UpdateImage' }

	export enum UpdateImageVersionX_Amz_Target { 'SageMaker.UpdateImageVersion' = 'SageMaker.UpdateImageVersion' }

	export enum UpdateInferenceExperimentX_Amz_Target { 'SageMaker.UpdateInferenceExperiment' = 'SageMaker.UpdateInferenceExperiment' }

	export enum UpdateModelCardX_Amz_Target { 'SageMaker.UpdateModelCard' = 'SageMaker.UpdateModelCard' }

	export enum UpdateModelPackageX_Amz_Target { 'SageMaker.UpdateModelPackage' = 'SageMaker.UpdateModelPackage' }

	export enum UpdateMonitoringAlertX_Amz_Target { 'SageMaker.UpdateMonitoringAlert' = 'SageMaker.UpdateMonitoringAlert' }

	export enum UpdateMonitoringScheduleX_Amz_Target { 'SageMaker.UpdateMonitoringSchedule' = 'SageMaker.UpdateMonitoringSchedule' }

	export enum UpdateNotebookInstanceX_Amz_Target { 'SageMaker.UpdateNotebookInstance' = 'SageMaker.UpdateNotebookInstance' }

	export enum UpdateNotebookInstanceLifecycleConfigX_Amz_Target { 'SageMaker.UpdateNotebookInstanceLifecycleConfig' = 'SageMaker.UpdateNotebookInstanceLifecycleConfig' }

	export enum UpdatePipelineX_Amz_Target { 'SageMaker.UpdatePipeline' = 'SageMaker.UpdatePipeline' }

	export enum UpdatePipelineExecutionX_Amz_Target { 'SageMaker.UpdatePipelineExecution' = 'SageMaker.UpdatePipelineExecution' }

	export enum UpdateProjectX_Amz_Target { 'SageMaker.UpdateProject' = 'SageMaker.UpdateProject' }

	export enum UpdateSpaceX_Amz_Target { 'SageMaker.UpdateSpace' = 'SageMaker.UpdateSpace' }

	export enum UpdateTrainingJobX_Amz_Target { 'SageMaker.UpdateTrainingJob' = 'SageMaker.UpdateTrainingJob' }

	export enum UpdateTrialX_Amz_Target { 'SageMaker.UpdateTrial' = 'SageMaker.UpdateTrial' }

	export enum UpdateTrialComponentX_Amz_Target { 'SageMaker.UpdateTrialComponent' = 'SageMaker.UpdateTrialComponent' }

	export enum UpdateUserProfileX_Amz_Target { 'SageMaker.UpdateUserProfile' = 'SageMaker.UpdateUserProfile' }

	export enum UpdateWorkforceX_Amz_Target { 'SageMaker.UpdateWorkforce' = 'SageMaker.UpdateWorkforce' }

	export enum UpdateWorkteamX_Amz_Target { 'SageMaker.UpdateWorkteam' = 'SageMaker.UpdateWorkteam' }

}

