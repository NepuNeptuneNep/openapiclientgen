import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {

	/** Representation of an account. */
	export interface Account {

		/** Output only. Creation time of the account. */
		createTime?: string | null;

		/** Output only. Display name of this account. */
		displayName?: string | null;

		/** Output only. Resource name of the account. Format: accounts/pub-[0-9]+ */
		name?: string | null;

		/** Output only. Outstanding tasks that need to be completed as part of the sign-up process for a new account. e.g. "billing-profile-creation", "phone-pin-verification". */
		pendingTasks?: Array<string>;

		/** Output only. Whether this account is premium. */
		premium?: boolean | null;

		/** Output only. State of the account. */
		state?: AccountState | null;

		/** Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones). */
		timeZone?: TimeZone;
	}

	/** Representation of an account. */
	export interface AccountFormProperties {

		/** Output only. Creation time of the account. */
		createTime: FormControl<string | null | undefined>,

		/** Output only. Display name of this account. */
		displayName: FormControl<string | null | undefined>,

		/** Output only. Resource name of the account. Format: accounts/pub-[0-9]+ */
		name: FormControl<string | null | undefined>,

		/** Output only. Whether this account is premium. */
		premium: FormControl<boolean | null | undefined>,

		/** Output only. State of the account. */
		state: FormControl<AccountState | null | undefined>,
	}
	export function CreateAccountFormGroup() {
		return new FormGroup<AccountFormProperties>({
			createTime: new FormControl<string | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			premium: new FormControl<boolean | null | undefined>(undefined),
			state: new FormControl<AccountState | null | undefined>(undefined),
		});

	}

	export enum AccountState { STATE_UNSPECIFIED = 0, READY = 1, NEEDS_ATTENTION = 2, CLOSED = 3 }


	/** Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones). */
	export interface TimeZone {

		/** IANA Time Zone Database time zone, e.g. "America/New_York". */
		id?: string | null;

		/** Optional. IANA Time Zone Database version number, e.g. "2019a". */
		version?: string | null;
	}

	/** Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones). */
	export interface TimeZoneFormProperties {

		/** IANA Time Zone Database time zone, e.g. "America/New_York". */
		id: FormControl<string | null | undefined>,

		/** Optional. IANA Time Zone Database version number, e.g. "2019a". */
		version: FormControl<string | null | undefined>,
	}
	export function CreateTimeZoneFormGroup() {
		return new FormGroup<TimeZoneFormProperties>({
			id: new FormControl<string | null | undefined>(undefined),
			version: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of an ad blocking recovery tag. See https://support.google.com/adsense/answer/11575177. */
	export interface AdBlockingRecoveryTag {

		/** Error protection code that can be used in conjunction with the tag. It'll display a message to users if an [ad blocking extension blocks their access to your site](https://support.google.com/adsense/answer/11575480). */
		errorProtectionCode?: string | null;

		/** The ad blocking recovery tag. Note that the message generated by the tag can be blocked by an ad blocking extension. If this is not your desired outcome, then you'll need to use it in conjunction with the error protection code. */
		tag?: string | null;
	}

	/** Representation of an ad blocking recovery tag. See https://support.google.com/adsense/answer/11575177. */
	export interface AdBlockingRecoveryTagFormProperties {

		/** Error protection code that can be used in conjunction with the tag. It'll display a message to users if an [ad blocking extension blocks their access to your site](https://support.google.com/adsense/answer/11575480). */
		errorProtectionCode: FormControl<string | null | undefined>,

		/** The ad blocking recovery tag. Note that the message generated by the tag can be blocked by an ad blocking extension. If this is not your desired outcome, then you'll need to use it in conjunction with the error protection code. */
		tag: FormControl<string | null | undefined>,
	}
	export function CreateAdBlockingRecoveryTagFormGroup() {
		return new FormGroup<AdBlockingRecoveryTagFormProperties>({
			errorProtectionCode: new FormControl<string | null | undefined>(undefined),
			tag: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of an ad client. An ad client represents a user's subscription with a specific AdSense product. */
	export interface AdClient {

		/** Output only. Resource name of the ad client. Format: accounts/{account}/adclients/{adclient} */
		name?: string | null;

		/** Output only. Reporting product code of the ad client. For example, "AFC" for AdSense for Content. Corresponds to the `PRODUCT_CODE` dimension, and present only if the ad client supports reporting. */
		productCode?: string | null;

		/** Output only. Unique ID of the ad client as used in the `AD_CLIENT_ID` reporting dimension. Present only if the ad client supports reporting. */
		reportingDimensionId?: string | null;

		/** Output only. State of the ad client. */
		state?: AdClientState | null;
	}

	/** Representation of an ad client. An ad client represents a user's subscription with a specific AdSense product. */
	export interface AdClientFormProperties {

		/** Output only. Resource name of the ad client. Format: accounts/{account}/adclients/{adclient} */
		name: FormControl<string | null | undefined>,

		/** Output only. Reporting product code of the ad client. For example, "AFC" for AdSense for Content. Corresponds to the `PRODUCT_CODE` dimension, and present only if the ad client supports reporting. */
		productCode: FormControl<string | null | undefined>,

		/** Output only. Unique ID of the ad client as used in the `AD_CLIENT_ID` reporting dimension. Present only if the ad client supports reporting. */
		reportingDimensionId: FormControl<string | null | undefined>,

		/** Output only. State of the ad client. */
		state: FormControl<AdClientState | null | undefined>,
	}
	export function CreateAdClientFormGroup() {
		return new FormGroup<AdClientFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			productCode: new FormControl<string | null | undefined>(undefined),
			reportingDimensionId: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<AdClientState | null | undefined>(undefined),
		});

	}

	export enum AdClientState { STATE_UNSPECIFIED = 0, READY = 1, GETTING_READY = 2, REQUIRES_REVIEW = 3 }


	/** Representation of the AdSense code for a given ad client. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634). */
	export interface AdClientAdCode {

		/** Output only. The AdSense code snippet to add to the head of an HTML page. */
		adCode?: string | null;

		/** Output only. The AdSense code snippet to add to the body of an AMP page. */
		ampBody?: string | null;

		/** Output only. The AdSense code snippet to add to the head of an AMP page. */
		ampHead?: string | null;
	}

	/** Representation of the AdSense code for a given ad client. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634). */
	export interface AdClientAdCodeFormProperties {

		/** Output only. The AdSense code snippet to add to the head of an HTML page. */
		adCode: FormControl<string | null | undefined>,

		/** Output only. The AdSense code snippet to add to the body of an AMP page. */
		ampBody: FormControl<string | null | undefined>,

		/** Output only. The AdSense code snippet to add to the head of an AMP page. */
		ampHead: FormControl<string | null | undefined>,
	}
	export function CreateAdClientAdCodeFormGroup() {
		return new FormGroup<AdClientAdCodeFormProperties>({
			adCode: new FormControl<string | null | undefined>(undefined),
			ampBody: new FormControl<string | null | undefined>(undefined),
			ampHead: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of an ad unit. An ad unit represents a saved ad unit with a specific set of ad settings that have been customized within an account. */
	export interface AdUnit {

		/** Settings specific to content ads (AFC). */
		contentAdsSettings?: ContentAdsSettings;

		/** Required. Display name of the ad unit, as provided when the ad unit was created. */
		displayName?: string | null;

		/** Output only. Resource name of the ad unit. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit} */
		name?: string | null;

		/** Output only. Unique ID of the ad unit as used in the `AD_UNIT_ID` reporting dimension. */
		reportingDimensionId?: string | null;

		/** Required. State of the ad unit. */
		state?: AdUnitState | null;
	}

	/** Representation of an ad unit. An ad unit represents a saved ad unit with a specific set of ad settings that have been customized within an account. */
	export interface AdUnitFormProperties {

		/** Required. Display name of the ad unit, as provided when the ad unit was created. */
		displayName: FormControl<string | null | undefined>,

		/** Output only. Resource name of the ad unit. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit} */
		name: FormControl<string | null | undefined>,

		/** Output only. Unique ID of the ad unit as used in the `AD_UNIT_ID` reporting dimension. */
		reportingDimensionId: FormControl<string | null | undefined>,

		/** Required. State of the ad unit. */
		state: FormControl<AdUnitState | null | undefined>,
	}
	export function CreateAdUnitFormGroup() {
		return new FormGroup<AdUnitFormProperties>({
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			reportingDimensionId: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<AdUnitState | null | undefined>(undefined),
		});

	}


	/** Settings specific to content ads (AFC). */
	export interface ContentAdsSettings {

		/** Required. Size of the ad unit. e.g. "728x90", "1x3" (for responsive ad units). */
		size?: string | null;

		/** Required. Type of the ad unit. */
		type?: ContentAdsSettingsType | null;
	}

	/** Settings specific to content ads (AFC). */
	export interface ContentAdsSettingsFormProperties {

		/** Required. Size of the ad unit. e.g. "728x90", "1x3" (for responsive ad units). */
		size: FormControl<string | null | undefined>,

		/** Required. Type of the ad unit. */
		type: FormControl<ContentAdsSettingsType | null | undefined>,
	}
	export function CreateContentAdsSettingsFormGroup() {
		return new FormGroup<ContentAdsSettingsFormProperties>({
			size: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<ContentAdsSettingsType | null | undefined>(undefined),
		});

	}

	export enum ContentAdsSettingsType { TYPE_UNSPECIFIED = 0, DISPLAY = 1, FEED = 2, ARTICLE = 3, MATCHED_CONTENT = 4, LINK = 5 }

	export enum AdUnitState { STATE_UNSPECIFIED = 0, ACTIVE = 1, ARCHIVED = 2 }


	/** Representation of the ad unit code for a given ad unit. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634) and [Where to place the ad code in your HTML](https://support.google.com/adsense/answer/9190028). */
	export interface AdUnitAdCode {

		/** Output only. The code snippet to add to the body of an HTML page. */
		adCode?: string | null;
	}

	/** Representation of the ad unit code for a given ad unit. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634) and [Where to place the ad code in your HTML](https://support.google.com/adsense/answer/9190028). */
	export interface AdUnitAdCodeFormProperties {

		/** Output only. The code snippet to add to the body of an HTML page. */
		adCode: FormControl<string | null | undefined>,
	}
	export function CreateAdUnitAdCodeFormGroup() {
		return new FormGroup<AdUnitAdCodeFormProperties>({
			adCode: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of an alert. */
	export interface Alert {

		/** Output only. The localized alert message. This may contain HTML markup, such as phrase elements or links. */
		message?: string | null;

		/** Output only. Resource name of the alert. Format: accounts/{account}/alerts/{alert} */
		name?: string | null;

		/** Output only. Severity of this alert. */
		severity?: AlertSeverity | null;

		/** Output only. Type of alert. This identifies the broad type of this alert, and provides a stable machine-readable identifier that will not be translated. For example, "payment-hold". */
		type?: string | null;
	}

	/** Representation of an alert. */
	export interface AlertFormProperties {

		/** Output only. The localized alert message. This may contain HTML markup, such as phrase elements or links. */
		message: FormControl<string | null | undefined>,

		/** Output only. Resource name of the alert. Format: accounts/{account}/alerts/{alert} */
		name: FormControl<string | null | undefined>,

		/** Output only. Severity of this alert. */
		severity: FormControl<AlertSeverity | null | undefined>,

		/** Output only. Type of alert. This identifies the broad type of this alert, and provides a stable machine-readable identifier that will not be translated. For example, "payment-hold". */
		type: FormControl<string | null | undefined>,
	}
	export function CreateAlertFormGroup() {
		return new FormGroup<AlertFormProperties>({
			message: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			severity: new FormControl<AlertSeverity | null | undefined>(undefined),
			type: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AlertSeverity { SEVERITY_UNSPECIFIED = 0, INFO = 1, WARNING = 2, SEVERE = 3 }


	/** Cell representation. */
	export interface Cell {

		/** Value in the cell. The dimension cells contain strings, and the metric cells contain numbers. */
		value?: string | null;
	}

	/** Cell representation. */
	export interface CellFormProperties {

		/** Value in the cell. The dimension cells contain strings, and the metric cells contain numbers. */
		value: FormControl<string | null | undefined>,
	}
	export function CreateCellFormGroup() {
		return new FormGroup<CellFormProperties>({
			value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of a custom channel. */
	export interface CustomChannel {

		/** Whether the custom channel is active and collecting data. See https://support.google.com/adsense/answer/10077192. */
		active?: boolean | null;

		/** Required. Display name of the custom channel. */
		displayName?: string | null;

		/** Output only. Resource name of the custom channel. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel} */
		name?: string | null;

		/** Output only. Unique ID of the custom channel as used in the `CUSTOM_CHANNEL_ID` reporting dimension. */
		reportingDimensionId?: string | null;
	}

	/** Representation of a custom channel. */
	export interface CustomChannelFormProperties {

		/** Whether the custom channel is active and collecting data. See https://support.google.com/adsense/answer/10077192. */
		active: FormControl<boolean | null | undefined>,

		/** Required. Display name of the custom channel. */
		displayName: FormControl<string | null | undefined>,

		/** Output only. Resource name of the custom channel. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel} */
		name: FormControl<string | null | undefined>,

		/** Output only. Unique ID of the custom channel as used in the `CUSTOM_CHANNEL_ID` reporting dimension. */
		reportingDimensionId: FormControl<string | null | undefined>,
	}
	export function CreateCustomChannelFormGroup() {
		return new FormGroup<CustomChannelFormProperties>({
			active: new FormControl<boolean | null | undefined>(undefined),
			displayName: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			reportingDimensionId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp */
	export interface Date {

		/** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
		day?: number | null;

		/** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
		month?: number | null;

		/** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
		year?: number | null;
	}

	/** Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp */
	export interface DateFormProperties {

		/** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
		day: FormControl<number | null | undefined>,

		/** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
		month: FormControl<number | null | undefined>,

		/** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
		year: FormControl<number | null | undefined>,
	}
	export function CreateDateFormGroup() {
		return new FormGroup<DateFormProperties>({
			day: new FormControl<number | null | undefined>(undefined),
			month: new FormControl<number | null | undefined>(undefined),
			year: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } */
	export interface Empty {
	}

	/** A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } */
	export interface EmptyFormProperties {
	}
	export function CreateEmptyFormGroup() {
		return new FormGroup<EmptyFormProperties>({
		});

	}


	/** The header information of the columns requested in the report. */
	export interface Header {

		/** The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) of this column. Only present if the header type is METRIC_CURRENCY. */
		currencyCode?: string | null;

		/** Required. Name of the header. */
		name?: string | null;

		/** Required. Type of the header. */
		type?: HeaderType | null;
	}

	/** The header information of the columns requested in the report. */
	export interface HeaderFormProperties {

		/** The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) of this column. Only present if the header type is METRIC_CURRENCY. */
		currencyCode: FormControl<string | null | undefined>,

		/** Required. Name of the header. */
		name: FormControl<string | null | undefined>,

		/** Required. Type of the header. */
		type: FormControl<HeaderType | null | undefined>,
	}
	export function CreateHeaderFormGroup() {
		return new FormGroup<HeaderFormProperties>({
			currencyCode: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			type: new FormControl<HeaderType | null | undefined>(undefined),
		});

	}

	export enum HeaderType { HEADER_TYPE_UNSPECIFIED = 0, DIMENSION = 1, METRIC_TALLY = 2, METRIC_RATIO = 3, METRIC_CURRENCY = 4, METRIC_MILLISECONDS = 5, METRIC_DECIMAL = 6 }


	/** Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged. */
	export interface HttpBody {

		/** The HTTP Content-Type header value specifying the content type of the body. */
		contentType?: string | null;

		/** The HTTP request/response body as raw binary. */
		data?: string | null;

		/** Application specific response metadata. Must be set in the first response for streaming APIs. */
		extensions?: Array<string>;
	}

	/** Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged. */
	export interface HttpBodyFormProperties {

		/** The HTTP Content-Type header value specifying the content type of the body. */
		contentType: FormControl<string | null | undefined>,

		/** The HTTP request/response body as raw binary. */
		data: FormControl<string | null | undefined>,
	}
	export function CreateHttpBodyFormGroup() {
		return new FormGroup<HttpBodyFormProperties>({
			contentType: new FormControl<string | null | undefined>(undefined),
			data: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the account list rpc. */
	export interface ListAccountsResponse {

		/** The accounts returned in this list response. */
		accounts?: Array<Account>;

		/** Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;
	}

	/** Response definition for the account list rpc. */
	export interface ListAccountsResponseFormProperties {

		/** Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListAccountsResponseFormGroup() {
		return new FormGroup<ListAccountsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the ad client list rpc. */
	export interface ListAdClientsResponse {

		/** The ad clients returned in this list response. */
		adClients?: Array<AdClient>;

		/** Continuation token used to page through ad clients. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;
	}

	/** Response definition for the ad client list rpc. */
	export interface ListAdClientsResponseFormProperties {

		/** Continuation token used to page through ad clients. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListAdClientsResponseFormGroup() {
		return new FormGroup<ListAdClientsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the adunit list rpc. */
	export interface ListAdUnitsResponse {

		/** The ad units returned in the list response. */
		adUnits?: Array<AdUnit>;

		/** Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;
	}

	/** Response definition for the adunit list rpc. */
	export interface ListAdUnitsResponseFormProperties {

		/** Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListAdUnitsResponseFormGroup() {
		return new FormGroup<ListAdUnitsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the alerts list rpc. */
	export interface ListAlertsResponse {

		/** The alerts returned in this list response. */
		alerts?: Array<Alert>;
	}

	/** Response definition for the alerts list rpc. */
	export interface ListAlertsResponseFormProperties {
	}
	export function CreateListAlertsResponseFormGroup() {
		return new FormGroup<ListAlertsResponseFormProperties>({
		});

	}


	/** Response definition for the child account list rpc. */
	export interface ListChildAccountsResponse {

		/** The accounts returned in this list response. */
		accounts?: Array<Account>;

		/** Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;
	}

	/** Response definition for the child account list rpc. */
	export interface ListChildAccountsResponseFormProperties {

		/** Continuation token used to page through accounts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListChildAccountsResponseFormGroup() {
		return new FormGroup<ListChildAccountsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the custom channel list rpc. */
	export interface ListCustomChannelsResponse {

		/** The custom channels returned in this list response. */
		customChannels?: Array<CustomChannel>;

		/** Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;
	}

	/** Response definition for the custom channel list rpc. */
	export interface ListCustomChannelsResponseFormProperties {

		/** Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListCustomChannelsResponseFormGroup() {
		return new FormGroup<ListCustomChannelsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the ad units linked to a custom channel list rpc. */
	export interface ListLinkedAdUnitsResponse {

		/** The ad units returned in the list response. */
		adUnits?: Array<AdUnit>;

		/** Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;
	}

	/** Response definition for the ad units linked to a custom channel list rpc. */
	export interface ListLinkedAdUnitsResponseFormProperties {

		/** Continuation token used to page through ad units. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListLinkedAdUnitsResponseFormGroup() {
		return new FormGroup<ListLinkedAdUnitsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the custom channels linked to an adunit list rpc. */
	export interface ListLinkedCustomChannelsResponse {

		/** The custom channels returned in this list response. */
		customChannels?: Array<CustomChannel>;

		/** Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;
	}

	/** Response definition for the custom channels linked to an adunit list rpc. */
	export interface ListLinkedCustomChannelsResponseFormProperties {

		/** Continuation token used to page through alerts. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListLinkedCustomChannelsResponseFormGroup() {
		return new FormGroup<ListLinkedCustomChannelsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the payments list rpc. */
	export interface ListPaymentsResponse {

		/** The payments returned in this list response. */
		payments?: Array<Payment>;
	}

	/** Response definition for the payments list rpc. */
	export interface ListPaymentsResponseFormProperties {
	}
	export function CreateListPaymentsResponseFormGroup() {
		return new FormGroup<ListPaymentsResponseFormProperties>({
		});

	}


	/** Representation of an unpaid or paid payment. See [Payment timelines for AdSense](https://support.google.com/adsense/answer/7164703) for more information about payments and the [YouTube homepage and payments account](https://support.google.com/adsense/answer/11622510) article for information about dedicated payments accounts for YouTube. */
	export interface Payment {

		/** Output only. The amount of unpaid or paid earnings, as a formatted string, including the currency. E.g. "¥1,235 JPY", "$1,234.57", "£87.65". */
		amount?: string | null;

		/** Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp */
		date?: Date;

		/** Output only. Resource name of the payment. Format: - accounts/{account}/payments/unpaid for unpaid (current) AdSense earnings. - accounts/{account}/payments/youtube-unpaid for unpaid (current) YouTube earnings. - accounts/{account}/payments/yyyy-MM-dd for paid AdSense earnings. - accounts/{account}/payments/youtube-yyyy-MM-dd for paid YouTube earnings. */
		name?: string | null;
	}

	/** Representation of an unpaid or paid payment. See [Payment timelines for AdSense](https://support.google.com/adsense/answer/7164703) for more information about payments and the [YouTube homepage and payments account](https://support.google.com/adsense/answer/11622510) article for information about dedicated payments accounts for YouTube. */
	export interface PaymentFormProperties {

		/** Output only. The amount of unpaid or paid earnings, as a formatted string, including the currency. E.g. "¥1,235 JPY", "$1,234.57", "£87.65". */
		amount: FormControl<string | null | undefined>,

		/** Output only. Resource name of the payment. Format: - accounts/{account}/payments/unpaid for unpaid (current) AdSense earnings. - accounts/{account}/payments/youtube-unpaid for unpaid (current) YouTube earnings. - accounts/{account}/payments/yyyy-MM-dd for paid AdSense earnings. - accounts/{account}/payments/youtube-yyyy-MM-dd for paid YouTube earnings. */
		name: FormControl<string | null | undefined>,
	}
	export function CreatePaymentFormGroup() {
		return new FormGroup<PaymentFormProperties>({
			amount: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the saved reports list rpc. */
	export interface ListSavedReportsResponse {

		/** Continuation token used to page through reports. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;

		/** The reports returned in this list response. */
		savedReports?: Array<SavedReport>;
	}

	/** Response definition for the saved reports list rpc. */
	export interface ListSavedReportsResponseFormProperties {

		/** Continuation token used to page through reports. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListSavedReportsResponseFormGroup() {
		return new FormGroup<ListSavedReportsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of a saved report. */
	export interface SavedReport {

		/** Output only. Resource name of the report. Format: accounts/{account}/reports/{report} */
		name?: string | null;

		/** Report title as specified by publisher. */
		title?: string | null;
	}

	/** Representation of a saved report. */
	export interface SavedReportFormProperties {

		/** Output only. Resource name of the report. Format: accounts/{account}/reports/{report} */
		name: FormControl<string | null | undefined>,

		/** Report title as specified by publisher. */
		title: FormControl<string | null | undefined>,
	}
	export function CreateSavedReportFormGroup() {
		return new FormGroup<SavedReportFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			title: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Response definition for the sites list rpc. */
	export interface ListSitesResponse {

		/** Continuation token used to page through sites. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;

		/** The sites returned in this list response. */
		sites?: Array<Site>;
	}

	/** Response definition for the sites list rpc. */
	export interface ListSitesResponseFormProperties {

		/** Continuation token used to page through sites. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListSitesResponseFormGroup() {
		return new FormGroup<ListSitesResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of a Site. */
	export interface Site {

		/** Whether auto ads is turned on for the site. */
		autoAdsEnabled?: boolean | null;

		/** Domain (or subdomain) of the site, e.g. "example.com" or "www.example.com". This is used in the `OWNED_SITE_DOMAIN_NAME` reporting dimension. */
		domain?: string | null;

		/** Output only. Resource name of a site. Format: accounts/{account}/sites/{site} */
		name?: string | null;

		/** Output only. Unique ID of the site as used in the `OWNED_SITE_ID` reporting dimension. */
		reportingDimensionId?: string | null;

		/** Output only. State of a site. */
		state?: SiteState | null;
	}

	/** Representation of a Site. */
	export interface SiteFormProperties {

		/** Whether auto ads is turned on for the site. */
		autoAdsEnabled: FormControl<boolean | null | undefined>,

		/** Domain (or subdomain) of the site, e.g. "example.com" or "www.example.com". This is used in the `OWNED_SITE_DOMAIN_NAME` reporting dimension. */
		domain: FormControl<string | null | undefined>,

		/** Output only. Resource name of a site. Format: accounts/{account}/sites/{site} */
		name: FormControl<string | null | undefined>,

		/** Output only. Unique ID of the site as used in the `OWNED_SITE_ID` reporting dimension. */
		reportingDimensionId: FormControl<string | null | undefined>,

		/** Output only. State of a site. */
		state: FormControl<SiteState | null | undefined>,
	}
	export function CreateSiteFormGroup() {
		return new FormGroup<SiteFormProperties>({
			autoAdsEnabled: new FormControl<boolean | null | undefined>(undefined),
			domain: new FormControl<string | null | undefined>(undefined),
			name: new FormControl<string | null | undefined>(undefined),
			reportingDimensionId: new FormControl<string | null | undefined>(undefined),
			state: new FormControl<SiteState | null | undefined>(undefined),
		});

	}

	export enum SiteState { STATE_UNSPECIFIED = 0, REQUIRES_REVIEW = 1, GETTING_READY = 2, READY = 3, NEEDS_ATTENTION = 4 }


	/** Response definition for the url channels list rpc. */
	export interface ListUrlChannelsResponse {

		/** Continuation token used to page through url channels. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken?: string | null;

		/** The url channels returned in this list response. */
		urlChannels?: Array<UrlChannel>;
	}

	/** Response definition for the url channels list rpc. */
	export interface ListUrlChannelsResponseFormProperties {

		/** Continuation token used to page through url channels. To retrieve the next page of the results, set the next request's "page_token" value to this. */
		nextPageToken: FormControl<string | null | undefined>,
	}
	export function CreateListUrlChannelsResponseFormGroup() {
		return new FormGroup<ListUrlChannelsResponseFormProperties>({
			nextPageToken: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Representation of a URL channel. URL channels allow you to track the performance of particular pages in your site; see [URL channels](https://support.google.com/adsense/answer/2923836) for more information. */
	export interface UrlChannel {

		/** Output only. Resource name of the URL channel. Format: accounts/{account}/adclients/{adclient}/urlchannels/{urlchannel} */
		name?: string | null;

		/** Output only. Unique ID of the custom channel as used in the `URL_CHANNEL_ID` reporting dimension. */
		reportingDimensionId?: string | null;

		/** URI pattern of the channel. Does not include "http://" or "https://". Example: www.example.com/home */
		uriPattern?: string | null;
	}

	/** Representation of a URL channel. URL channels allow you to track the performance of particular pages in your site; see [URL channels](https://support.google.com/adsense/answer/2923836) for more information. */
	export interface UrlChannelFormProperties {

		/** Output only. Resource name of the URL channel. Format: accounts/{account}/adclients/{adclient}/urlchannels/{urlchannel} */
		name: FormControl<string | null | undefined>,

		/** Output only. Unique ID of the custom channel as used in the `URL_CHANNEL_ID` reporting dimension. */
		reportingDimensionId: FormControl<string | null | undefined>,

		/** URI pattern of the channel. Does not include "http://" or "https://". Example: www.example.com/home */
		uriPattern: FormControl<string | null | undefined>,
	}
	export function CreateUrlChannelFormGroup() {
		return new FormGroup<UrlChannelFormProperties>({
			name: new FormControl<string | null | undefined>(undefined),
			reportingDimensionId: new FormControl<string | null | undefined>(undefined),
			uriPattern: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Result of a generated report. */
	export interface ReportResult {

		/** Row representation. */
		averages?: Row;

		/** Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp */
		endDate?: Date;

		/** The header information; one for each dimension in the request, followed by one for each metric in the request. */
		headers?: Array<Header>;

		/** The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. */
		rows?: Array<Row>;

		/** Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp */
		startDate?: Date;

		/** The total number of rows matched by the report request. */
		totalMatchedRows?: string | null;

		/** Row representation. */
		totals?: Row;

		/** Any warnings associated with generation of the report. These warnings are always returned in English. */
		warnings?: Array<string>;
	}

	/** Result of a generated report. */
	export interface ReportResultFormProperties {

		/** The total number of rows matched by the report request. */
		totalMatchedRows: FormControl<string | null | undefined>,
	}
	export function CreateReportResultFormGroup() {
		return new FormGroup<ReportResultFormProperties>({
			totalMatchedRows: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Row representation. */
	export interface Row {

		/** Cells in the row. */
		cells?: Array<Cell>;
	}

	/** Row representation. */
	export interface RowFormProperties {
	}
	export function CreateRowFormGroup() {
		return new FormGroup<RowFormProperties>({
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Lists all accounts available to this user.
		 * Get v2/accounts
		 * @param {number} pageSize The maximum number of accounts to include in the response, used for paging. If unspecified, at most 10000 accounts will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListAccounts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAccounts` must match the call that provided the page token.
		 * @return {ListAccountsResponse} Successful response
		 */
		Adsense_accounts_list(pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListAccountsResponse> {
			return this.http.get<ListAccountsResponse>(this.baseUri + 'v2/accounts?pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Generates an ad hoc report.
		 * Get v2/{account}/reports:generate
		 * @param {string} account Required. The account which owns the collection of reports. Format: accounts/{account}
		 * @param {string} currencyCode The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.
		 * @param {Adsense_accounts_reports_generateDateRange} dateRange Date range of the report, if unset the range will be considered CUSTOM.
		 * @param {Array<string>} dimensions Dimensions to base the report on.
		 * @param {number} endDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} endDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} endDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @param {Array<string>} filters A list of [filters](/adsense/management/reporting/filtering) to apply to the report. All provided filters must match in order for the data to be included in the report.
		 * @param {string} languageCode The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
		 * @param {number} limit The maximum number of rows of report data to return. Reports producing more rows than the requested limit will be truncated. If unset, this defaults to 100,000 rows for `Reports.GenerateReport` and 1,000,000 rows for `Reports.GenerateCsvReport`, which are also the maximum values permitted here. Report truncation can be identified (for `Reports.GenerateReport` only) by comparing the number of rows returned to the value returned in `total_matched_rows`.
		 * @param {Array<string>} metrics Required. Reporting metrics.
		 * @param {Array<string>} orderBy The name of a dimension or metric to sort the resulting report on, can be prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.
		 * @param {Adsense_accounts_reports_generateReportingTimeZone} reportingTimeZone Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).
		 * @param {number} startDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} startDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} startDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @return {ReportResult} Successful response
		 */
		Adsense_accounts_reports_generate(account: string, currencyCode: string | null | undefined, dateRange: Adsense_accounts_reports_generateDateRange | null | undefined, dimensions: Array<string> | null | undefined, endDate_day: number | null | undefined, endDate_month: number | null | undefined, endDate_year: number | null | undefined, filters: Array<string> | null | undefined, languageCode: string | null | undefined, limit: number | null | undefined, metrics: Array<string> | null | undefined, orderBy: Array<string> | null | undefined, reportingTimeZone: Adsense_accounts_reports_generateReportingTimeZone | null | undefined, startDate_day: number | null | undefined, startDate_month: number | null | undefined, startDate_year: number | null | undefined): Observable<ReportResult> {
			return this.http.get<ReportResult>(this.baseUri + 'v2/' + (account == null ? '' : encodeURIComponent(account)) + '/reports:generate&currencyCode=' + (currencyCode == null ? '' : encodeURIComponent(currencyCode)) + '&dateRange=' + dateRange + '&' + dimensions?.map(z => `dimensions=${encodeURIComponent(z)}`).join('&') + '&endDate_day=' + endDate_day + '&endDate_month=' + endDate_month + '&endDate_year=' + endDate_year + '&' + filters?.map(z => `filters=${encodeURIComponent(z)}`).join('&') + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)) + '&limit=' + limit + '&' + metrics?.map(z => `metrics=${encodeURIComponent(z)}`).join('&') + '&' + orderBy?.map(z => `orderBy=${encodeURIComponent(z)}`).join('&') + '&reportingTimeZone=' + reportingTimeZone + '&startDate_day=' + startDate_day + '&startDate_month=' + startDate_month + '&startDate_year=' + startDate_year, {});
		}

		/**
		 * Generates a csv formatted ad hoc report.
		 * Get v2/{account}/reports:generateCsv
		 * @param {string} account Required. The account which owns the collection of reports. Format: accounts/{account}
		 * @param {string} currencyCode The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.
		 * @param {Adsense_accounts_reports_generateDateRange} dateRange Date range of the report, if unset the range will be considered CUSTOM.
		 * @param {Array<string>} dimensions Dimensions to base the report on.
		 * @param {number} endDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} endDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} endDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @param {Array<string>} filters A list of [filters](/adsense/management/reporting/filtering) to apply to the report. All provided filters must match in order for the data to be included in the report.
		 * @param {string} languageCode The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
		 * @param {number} limit The maximum number of rows of report data to return. Reports producing more rows than the requested limit will be truncated. If unset, this defaults to 100,000 rows for `Reports.GenerateReport` and 1,000,000 rows for `Reports.GenerateCsvReport`, which are also the maximum values permitted here. Report truncation can be identified (for `Reports.GenerateReport` only) by comparing the number of rows returned to the value returned in `total_matched_rows`.
		 * @param {Array<string>} metrics Required. Reporting metrics.
		 * @param {Array<string>} orderBy The name of a dimension or metric to sort the resulting report on, can be prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.
		 * @param {Adsense_accounts_reports_generateReportingTimeZone} reportingTimeZone Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).
		 * @param {number} startDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} startDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} startDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @return {HttpBody} Successful response
		 */
		Adsense_accounts_reports_generateCsv(account: string, currencyCode: string | null | undefined, dateRange: Adsense_accounts_reports_generateDateRange | null | undefined, dimensions: Array<string> | null | undefined, endDate_day: number | null | undefined, endDate_month: number | null | undefined, endDate_year: number | null | undefined, filters: Array<string> | null | undefined, languageCode: string | null | undefined, limit: number | null | undefined, metrics: Array<string> | null | undefined, orderBy: Array<string> | null | undefined, reportingTimeZone: Adsense_accounts_reports_generateReportingTimeZone | null | undefined, startDate_day: number | null | undefined, startDate_month: number | null | undefined, startDate_year: number | null | undefined): Observable<HttpBody> {
			return this.http.get<HttpBody>(this.baseUri + 'v2/' + (account == null ? '' : encodeURIComponent(account)) + '/reports:generateCsv&currencyCode=' + (currencyCode == null ? '' : encodeURIComponent(currencyCode)) + '&dateRange=' + dateRange + '&' + dimensions?.map(z => `dimensions=${encodeURIComponent(z)}`).join('&') + '&endDate_day=' + endDate_day + '&endDate_month=' + endDate_month + '&endDate_year=' + endDate_year + '&' + filters?.map(z => `filters=${encodeURIComponent(z)}`).join('&') + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)) + '&limit=' + limit + '&' + metrics?.map(z => `metrics=${encodeURIComponent(z)}`).join('&') + '&' + orderBy?.map(z => `orderBy=${encodeURIComponent(z)}`).join('&') + '&reportingTimeZone=' + reportingTimeZone + '&startDate_day=' + startDate_day + '&startDate_month=' + startDate_month + '&startDate_year=' + startDate_year, {});
		}

		/**
		 * Deletes a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
		 * Delete v2/{name}
		 * @param {string} name Required. Name of the custom channel to delete. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel}
		 * @return {Empty} Successful response
		 */
		Adsense_accounts_adclients_customchannels_delete(name: string): Observable<Empty> {
			return this.http.delete<Empty>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Gets information about the selected site.
		 * Get v2/{name}
		 * @param {string} name Required. Name of the site. Format: accounts/{account}/sites/{site}
		 * @return {Site} Successful response
		 */
		Adsense_accounts_sites_get(name: string): Observable<Site> {
			return this.http.get<Site>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)), {});
		}

		/**
		 * Updates a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
		 * Patch v2/{name}
		 * @param {string} name Output only. Resource name of the custom channel. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel}
		 * @param {string} updateMask The list of fields to update. If empty, a full update is performed.
		 * @return {CustomChannel} Successful response
		 */
		Adsense_accounts_adclients_customchannels_patch(name: string, updateMask: string | null | undefined, requestBody: CustomChannel): Observable<CustomChannel> {
			return this.http.patch<CustomChannel>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '&updateMask=' + (updateMask == null ? '' : encodeURIComponent(updateMask)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Gets the ad blocking recovery tag of an account.
		 * Get v2/{name}/adBlockingRecoveryTag
		 * @param {string} name Required. The name of the account to get the tag for. Format: accounts/{account}
		 * @return {AdBlockingRecoveryTag} Successful response
		 */
		Adsense_accounts_getAdBlockingRecoveryTag(name: string): Observable<AdBlockingRecoveryTag> {
			return this.http.get<AdBlockingRecoveryTag>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '/adBlockingRecoveryTag', {});
		}

		/**
		 * Gets the ad unit code for a given ad unit. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634) and [Where to place the ad code in your HTML](https://support.google.com/adsense/answer/9190028).
		 * Get v2/{name}/adcode
		 * @param {string} name Required. Name of the adunit for which to get the adcode. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit}
		 * @return {AdUnitAdCode} Successful response
		 */
		Adsense_accounts_adclients_adunits_getAdcode(name: string): Observable<AdUnitAdCode> {
			return this.http.get<AdUnitAdCode>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '/adcode', {});
		}

		/**
		 * Gets the saved report from the given resource name.
		 * Get v2/{name}/saved
		 * @param {string} name Required. The name of the saved report to retrieve. Format: accounts/{account}/reports/{report}
		 * @return {SavedReport} Successful response
		 */
		Adsense_accounts_reports_getSaved(name: string): Observable<SavedReport> {
			return this.http.get<SavedReport>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '/saved', {});
		}

		/**
		 * Generates a saved report.
		 * Get v2/{name}/saved:generate
		 * @param {string} name Required. Name of the saved report. Format: accounts/{account}/reports/{report}
		 * @param {string} currencyCode The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.
		 * @param {Adsense_accounts_reports_generateDateRange} dateRange Date range of the report, if unset the range will be considered CUSTOM.
		 * @param {number} endDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} endDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} endDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @param {string} languageCode The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
		 * @param {Adsense_accounts_reports_generateReportingTimeZone} reportingTimeZone Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).
		 * @param {number} startDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} startDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} startDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @return {ReportResult} Successful response
		 */
		Adsense_accounts_reports_saved_generate(name: string, currencyCode: string | null | undefined, dateRange: Adsense_accounts_reports_generateDateRange | null | undefined, endDate_day: number | null | undefined, endDate_month: number | null | undefined, endDate_year: number | null | undefined, languageCode: string | null | undefined, reportingTimeZone: Adsense_accounts_reports_generateReportingTimeZone | null | undefined, startDate_day: number | null | undefined, startDate_month: number | null | undefined, startDate_year: number | null | undefined): Observable<ReportResult> {
			return this.http.get<ReportResult>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '/saved:generate&currencyCode=' + (currencyCode == null ? '' : encodeURIComponent(currencyCode)) + '&dateRange=' + dateRange + '&endDate_day=' + endDate_day + '&endDate_month=' + endDate_month + '&endDate_year=' + endDate_year + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)) + '&reportingTimeZone=' + reportingTimeZone + '&startDate_day=' + startDate_day + '&startDate_month=' + startDate_month + '&startDate_year=' + startDate_year, {});
		}

		/**
		 * Generates a csv formatted saved report.
		 * Get v2/{name}/saved:generateCsv
		 * @param {string} name Required. Name of the saved report. Format: accounts/{account}/reports/{report}
		 * @param {string} currencyCode The [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) to use when reporting on monetary metrics. Defaults to the account's currency if not set.
		 * @param {Adsense_accounts_reports_generateDateRange} dateRange Date range of the report, if unset the range will be considered CUSTOM.
		 * @param {number} endDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} endDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} endDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @param {string} languageCode The language to use for translating report output. If unspecified, this defaults to English ("en"). If the given language is not supported, report output will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
		 * @param {Adsense_accounts_reports_generateReportingTimeZone} reportingTimeZone Timezone in which to generate the report. If unspecified, this defaults to the account timezone. For more information, see [changing the time zone of your reports](https://support.google.com/adsense/answer/9830725).
		 * @param {number} startDate_day Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		 * @param {number} startDate_month Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		 * @param {number} startDate_year Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		 * @return {HttpBody} Successful response
		 */
		Adsense_accounts_reports_saved_generateCsv(name: string, currencyCode: string | null | undefined, dateRange: Adsense_accounts_reports_generateDateRange | null | undefined, endDate_day: number | null | undefined, endDate_month: number | null | undefined, endDate_year: number | null | undefined, languageCode: string | null | undefined, reportingTimeZone: Adsense_accounts_reports_generateReportingTimeZone | null | undefined, startDate_day: number | null | undefined, startDate_month: number | null | undefined, startDate_year: number | null | undefined): Observable<HttpBody> {
			return this.http.get<HttpBody>(this.baseUri + 'v2/' + (name == null ? '' : encodeURIComponent(name)) + '/saved:generateCsv&currencyCode=' + (currencyCode == null ? '' : encodeURIComponent(currencyCode)) + '&dateRange=' + dateRange + '&endDate_day=' + endDate_day + '&endDate_month=' + endDate_month + '&endDate_year=' + endDate_year + '&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)) + '&reportingTimeZone=' + reportingTimeZone + '&startDate_day=' + startDate_day + '&startDate_month=' + startDate_month + '&startDate_year=' + startDate_year, {});
		}

		/**
		 * Lists all the ad clients available in an account.
		 * Get v2/{parent}/adclients
		 * @param {string} parent Required. The account which owns the collection of ad clients. Format: accounts/{account}
		 * @param {number} pageSize The maximum number of ad clients to include in the response, used for paging. If unspecified, at most 10000 ad clients will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListAdClients` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAdClients` must match the call that provided the page token.
		 * @return {ListAdClientsResponse} Successful response
		 */
		Adsense_accounts_adclients_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListAdClientsResponse> {
			return this.http.get<ListAdClientsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/adclients&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists all ad units under a specified account and ad client.
		 * Get v2/{parent}/adunits
		 * @param {string} parent Required. The ad client which owns the collection of ad units. Format: accounts/{account}/adclients/{adclient}
		 * @param {number} pageSize The maximum number of ad units to include in the response, used for paging. If unspecified, at most 10000 ad units will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListAdUnits` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAdUnits` must match the call that provided the page token.
		 * @return {ListAdUnitsResponse} Successful response
		 */
		Adsense_accounts_adclients_adunits_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListAdUnitsResponse> {
			return this.http.get<ListAdUnitsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/adunits&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates an ad unit. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product. Note that ad units can only be created for ad clients with an "AFC" product code. For more info see the [AdClient resource](/adsense/management/reference/rest/v2/accounts.adclients). For now, this method can only be used to create `DISPLAY` ad units. See: https://support.google.com/adsense/answer/9183566
		 * Post v2/{parent}/adunits
		 * @param {string} parent Required. Ad client to create an ad unit under. Format: accounts/{account}/adclients/{adclient}
		 * @return {AdUnit} Successful response
		 */
		Adsense_accounts_adclients_adunits_create(parent: string, requestBody: AdUnit): Observable<AdUnit> {
			return this.http.post<AdUnit>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/adunits', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all the alerts available in an account.
		 * Get v2/{parent}/alerts
		 * @param {string} parent Required. The account which owns the collection of alerts. Format: accounts/{account}
		 * @param {string} languageCode The language to use for translating alert messages. If unspecified, this defaults to the user's display language. If the given language is not supported, alerts will be returned in English. The language is specified as an [IETF BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag).
		 * @return {ListAlertsResponse} Successful response
		 */
		Adsense_accounts_alerts_list(parent: string, languageCode: string | null | undefined): Observable<ListAlertsResponse> {
			return this.http.get<ListAlertsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/alerts&languageCode=' + (languageCode == null ? '' : encodeURIComponent(languageCode)), {});
		}

		/**
		 * Lists all the custom channels available in an ad client.
		 * Get v2/{parent}/customchannels
		 * @param {string} parent Required. The ad client which owns the collection of custom channels. Format: accounts/{account}/adclients/{adclient}
		 * @param {number} pageSize The maximum number of custom channels to include in the response, used for paging. If unspecified, at most 10000 custom channels will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListCustomChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCustomChannels` must match the call that provided the page token.
		 * @return {ListCustomChannelsResponse} Successful response
		 */
		Adsense_accounts_adclients_customchannels_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListCustomChannelsResponse> {
			return this.http.get<ListCustomChannelsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/customchannels&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Creates a custom channel. This method can only be used by projects enabled for the [AdSense for Platforms](https://developers.google.com/adsense/platforms/) product.
		 * Post v2/{parent}/customchannels
		 * @param {string} parent Required. The ad client to create a custom channel under. Format: accounts/{account}/adclients/{adclient}
		 * @return {CustomChannel} Successful response
		 */
		Adsense_accounts_adclients_customchannels_create(parent: string, requestBody: CustomChannel): Observable<CustomChannel> {
			return this.http.post<CustomChannel>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/customchannels', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all the payments available for an account.
		 * Get v2/{parent}/payments
		 * @param {string} parent Required. The account which owns the collection of payments. Format: accounts/{account}
		 * @return {ListPaymentsResponse} Successful response
		 */
		Adsense_accounts_payments_list(parent: string): Observable<ListPaymentsResponse> {
			return this.http.get<ListPaymentsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/payments', {});
		}

		/**
		 * Lists saved reports.
		 * Get v2/{parent}/reports/saved
		 * @param {string} parent Required. The account which owns the collection of reports. Format: accounts/{account}
		 * @param {number} pageSize The maximum number of reports to include in the response, used for paging. If unspecified, at most 10000 reports will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListSavedReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSavedReports` must match the call that provided the page token.
		 * @return {ListSavedReportsResponse} Successful response
		 */
		Adsense_accounts_reports_saved_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListSavedReportsResponse> {
			return this.http.get<ListSavedReportsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/reports/saved&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists all the sites available in an account.
		 * Get v2/{parent}/sites
		 * @param {string} parent Required. The account which owns the collection of sites. Format: accounts/{account}
		 * @param {number} pageSize The maximum number of sites to include in the response, used for paging. If unspecified, at most 10000 sites will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListSites` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSites` must match the call that provided the page token.
		 * @return {ListSitesResponse} Successful response
		 */
		Adsense_accounts_sites_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListSitesResponse> {
			return this.http.get<ListSitesResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/sites&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists active url channels.
		 * Get v2/{parent}/urlchannels
		 * @param {string} parent Required. The ad client which owns the collection of url channels. Format: accounts/{account}/adclients/{adclient}
		 * @param {number} pageSize The maximum number of url channels to include in the response, used for paging. If unspecified, at most 10000 url channels will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListUrlChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListUrlChannels` must match the call that provided the page token.
		 * @return {ListUrlChannelsResponse} Successful response
		 */
		Adsense_accounts_adclients_urlchannels_list(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListUrlChannelsResponse> {
			return this.http.get<ListUrlChannelsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + '/urlchannels&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists all accounts directly managed by the given AdSense account.
		 * Get v2/{parent}:listChildAccounts
		 * @param {string} parent Required. The parent account, which owns the child accounts. Format: accounts/{account}
		 * @param {number} pageSize The maximum number of accounts to include in the response, used for paging. If unspecified, at most 10000 accounts will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListChildAccounts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListChildAccounts` must match the call that provided the page token.
		 * @return {ListChildAccountsResponse} Successful response
		 */
		Adsense_accounts_listChildAccounts(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListChildAccountsResponse> {
			return this.http.get<ListChildAccountsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + ':listChildAccounts&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists all the ad units available for a custom channel.
		 * Get v2/{parent}:listLinkedAdUnits
		 * @param {string} parent Required. The custom channel which owns the collection of ad units. Format: accounts/{account}/adclients/{adclient}/customchannels/{customchannel}
		 * @param {number} pageSize The maximum number of ad units to include in the response, used for paging. If unspecified, at most 10000 ad units will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListLinkedAdUnits` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListLinkedAdUnits` must match the call that provided the page token.
		 * @return {ListLinkedAdUnitsResponse} Successful response
		 */
		Adsense_accounts_adclients_customchannels_listLinkedAdUnits(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListLinkedAdUnitsResponse> {
			return this.http.get<ListLinkedAdUnitsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + ':listLinkedAdUnits&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}

		/**
		 * Lists all the custom channels available for an ad unit.
		 * Get v2/{parent}:listLinkedCustomChannels
		 * @param {string} parent Required. The ad unit which owns the collection of custom channels. Format: accounts/{account}/adclients/{adclient}/adunits/{adunit}
		 * @param {number} pageSize The maximum number of custom channels to include in the response, used for paging. If unspecified, at most 10000 custom channels will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
		 * @param {string} pageToken A page token, received from a previous `ListLinkedCustomChannels` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListLinkedCustomChannels` must match the call that provided the page token.
		 * @return {ListLinkedCustomChannelsResponse} Successful response
		 */
		Adsense_accounts_adclients_adunits_listLinkedCustomChannels(parent: string, pageSize: number | null | undefined, pageToken: string | null | undefined): Observable<ListLinkedCustomChannelsResponse> {
			return this.http.get<ListLinkedCustomChannelsResponse>(this.baseUri + 'v2/' + (parent == null ? '' : encodeURIComponent(parent)) + ':listLinkedCustomChannels&pageSize=' + pageSize + '&pageToken=' + (pageToken == null ? '' : encodeURIComponent(pageToken)), {});
		}
	}

	export enum Adsense_accounts_reports_generateDateRange { REPORTING_DATE_RANGE_UNSPECIFIED = 0, CUSTOM = 1, TODAY = 2, YESTERDAY = 3, MONTH_TO_DATE = 4, YEAR_TO_DATE = 5, LAST_7_DAYS = 6, LAST_30_DAYS = 7 }

	export enum Adsense_accounts_reports_generateReportingTimeZone { REPORTING_TIME_ZONE_UNSPECIFIED = 0, ACCOUNT_TIME_ZONE = 1, GOOGLE_TIME_ZONE = 2 }

}

