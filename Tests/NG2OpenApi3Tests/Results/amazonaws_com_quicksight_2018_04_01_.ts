import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FormControl, FormGroup, Validators } from '@angular/forms';
export namespace MyNS {
	export interface CancelIngestionResponse {
		Arn?: string;
		IngestionId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CancelIngestionResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		IngestionId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCancelIngestionResponseFormGroup() {
		return new FormGroup<CancelIngestionResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			IngestionId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface AccessDeniedException {
	}
	export interface AccessDeniedExceptionFormProperties {
	}
	export function CreateAccessDeniedExceptionFormGroup() {
		return new FormGroup<AccessDeniedExceptionFormProperties>({
		});

	}

	export interface InvalidParameterValueException {
	}
	export interface InvalidParameterValueExceptionFormProperties {
	}
	export function CreateInvalidParameterValueExceptionFormGroup() {
		return new FormGroup<InvalidParameterValueExceptionFormProperties>({
		});

	}

	export interface ResourceNotFoundException {
	}
	export interface ResourceNotFoundExceptionFormProperties {
	}
	export function CreateResourceNotFoundExceptionFormGroup() {
		return new FormGroup<ResourceNotFoundExceptionFormProperties>({
		});

	}

	export interface ThrottlingException {
	}
	export interface ThrottlingExceptionFormProperties {
	}
	export function CreateThrottlingExceptionFormGroup() {
		return new FormGroup<ThrottlingExceptionFormProperties>({
		});

	}

	export interface ResourceExistsException {
	}
	export interface ResourceExistsExceptionFormProperties {
	}
	export function CreateResourceExistsExceptionFormGroup() {
		return new FormGroup<ResourceExistsExceptionFormProperties>({
		});

	}

	export interface InternalFailureException {
	}
	export interface InternalFailureExceptionFormProperties {
	}
	export function CreateInternalFailureExceptionFormGroup() {
		return new FormGroup<InternalFailureExceptionFormProperties>({
		});

	}

	export interface CreateAccountCustomizationResponse {
		Arn?: string;
		AwsAccountId?: string;
		Namespace?: string;
		AccountCustomization?: AccountCustomization;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateAccountCustomizationResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		AwsAccountId: FormControl<string | null | undefined>,
		Namespace: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateAccountCustomizationResponseFormGroup() {
		return new FormGroup<CreateAccountCustomizationResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			Namespace: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The Amazon QuickSight customizations associated with your Amazon Web Services account or a QuickSight namespace in a specific Amazon Web Services Region. */
	export interface AccountCustomization {
		DefaultTheme?: string;
		DefaultEmailCustomizationTemplate?: string;
	}

	/** The Amazon QuickSight customizations associated with your Amazon Web Services account or a QuickSight namespace in a specific Amazon Web Services Region. */
	export interface AccountCustomizationFormProperties {
		DefaultTheme: FormControl<string | null | undefined>,
		DefaultEmailCustomizationTemplate: FormControl<string | null | undefined>,
	}
	export function CreateAccountCustomizationFormGroup() {
		return new FormGroup<AccountCustomizationFormProperties>({
			DefaultTheme: new FormControl<string | null | undefined>(undefined),
			DefaultEmailCustomizationTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The key or keys of the key-value pairs for the resource tag or tags assigned to the resource. */
	export interface Tag {

		/** Required */
		Key: string;

		/** Required */
		Value: string;
	}

	/** The key or keys of the key-value pairs for the resource tag or tags assigned to the resource. */
	export interface TagFormProperties {

		/** Required */
		Key: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateTagFormGroup() {
		return new FormGroup<TagFormProperties>({
			Key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface ConflictException {
	}
	export interface ConflictExceptionFormProperties {
	}
	export function CreateConflictExceptionFormGroup() {
		return new FormGroup<ConflictExceptionFormProperties>({
		});

	}

	export interface ResourceUnavailableException {
	}
	export interface ResourceUnavailableExceptionFormProperties {
	}
	export function CreateResourceUnavailableExceptionFormGroup() {
		return new FormGroup<ResourceUnavailableExceptionFormProperties>({
		});

	}

	export interface CreateAccountSubscriptionResponse {
		SignupResponse?: SignupResponse;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateAccountSubscriptionResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateAccountSubscriptionResponseFormGroup() {
		return new FormGroup<CreateAccountSubscriptionResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A <code>SignupResponse</code> object that contains a summary of a newly created account. */
	export interface SignupResponse {
		IAMUser?: boolean | null;
		userLoginName?: string;
		accountName?: string;
		directoryType?: string;
	}

	/** A <code>SignupResponse</code> object that contains a summary of a newly created account. */
	export interface SignupResponseFormProperties {
		IAMUser: FormControl<boolean | null | undefined>,
		userLoginName: FormControl<string | null | undefined>,
		accountName: FormControl<string | null | undefined>,
		directoryType: FormControl<string | null | undefined>,
	}
	export function CreateSignupResponseFormGroup() {
		return new FormGroup<SignupResponseFormProperties>({
			IAMUser: new FormControl<boolean | null | undefined>(undefined),
			userLoginName: new FormControl<string | null | undefined>(undefined),
			accountName: new FormControl<string | null | undefined>(undefined),
			directoryType: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface PreconditionNotMetException {
	}
	export interface PreconditionNotMetExceptionFormProperties {
	}
	export function CreatePreconditionNotMetExceptionFormGroup() {
		return new FormGroup<PreconditionNotMetExceptionFormProperties>({
		});

	}

	export interface CreateAnalysisResponse {
		Arn?: string;
		AnalysisId?: string;
		CreationStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateAnalysisResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		AnalysisId: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateAnalysisResponseFormGroup() {
		return new FormGroup<CreateAnalysisResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ResourceStatus { CREATION_IN_PROGRESS = 0, CREATION_SUCCESSFUL = 1, CREATION_FAILED = 2, UPDATE_IN_PROGRESS = 3, UPDATE_SUCCESSFUL = 4, UPDATE_FAILED = 5, DELETED = 6 }


	/** A string parameter. */
	export interface StringParameter {

		/** Required */
		Name: string;

		/** Required */
		Values: Array<string>;
	}

	/** A string parameter. */
	export interface StringParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateStringParameterFormGroup() {
		return new FormGroup<StringParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An integer parameter. */
	export interface IntegerParameter {

		/** Required */
		Name: string;

		/** Required */
		Values: Array<number>;
	}

	/** An integer parameter. */
	export interface IntegerParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateIntegerParameterFormGroup() {
		return new FormGroup<IntegerParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A decimal parameter. */
	export interface DecimalParameter {

		/** Required */
		Name: string;

		/** Required */
		Values: Array<number>;
	}

	/** A decimal parameter. */
	export interface DecimalParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateDecimalParameterFormGroup() {
		return new FormGroup<DecimalParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A date-time parameter. */
	export interface DateTimeParameter {

		/** Required */
		Name: string;

		/** Required */
		Values: Array<string>;
	}

	/** A date-time parameter. */
	export interface DateTimeParameterFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateDateTimeParameterFormGroup() {
		return new FormGroup<DateTimeParameterFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Permission for the resource. */
	export interface ResourcePermission {

		/** Required */
		Principal: string;

		/** Required */
		Actions: Array<string>;
	}

	/** Permission for the resource. */
	export interface ResourcePermissionFormProperties {

		/** Required */
		Principal: FormControl<string | null | undefined>,
	}
	export function CreateResourcePermissionFormGroup() {
		return new FormGroup<ResourcePermissionFormProperties>({
			Principal: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The source template of an analysis. */
	export interface AnalysisSourceTemplate {

		/** Required */
		DataSetReferences: Array<DataSetReference>;

		/** Required */
		Arn: string;
	}

	/** The source template of an analysis. */
	export interface AnalysisSourceTemplateFormProperties {

		/** Required */
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAnalysisSourceTemplateFormGroup() {
		return new FormGroup<AnalysisSourceTemplateFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Dataset reference. */
	export interface DataSetReference {

		/** Required */
		DataSetPlaceholder: string;

		/** Required */
		DataSetArn: string;
	}

	/** Dataset reference. */
	export interface DataSetReferenceFormProperties {

		/** Required */
		DataSetPlaceholder: FormControl<string | null | undefined>,

		/** Required */
		DataSetArn: FormControl<string | null | undefined>,
	}
	export function CreateDataSetReferenceFormGroup() {
		return new FormGroup<DataSetReferenceFormProperties>({
			DataSetPlaceholder: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DataSetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A data set. */
	export interface DataSetIdentifierDeclaration {

		/** Required */
		Identifier: string;

		/** Required */
		DataSetArn: string;
	}

	/** A data set. */
	export interface DataSetIdentifierDeclarationFormProperties {

		/** Required */
		Identifier: FormControl<string | null | undefined>,

		/** Required */
		DataSetArn: FormControl<string | null | undefined>,
	}
	export function CreateDataSetIdentifierDeclarationFormGroup() {
		return new FormGroup<DataSetIdentifierDeclarationFormProperties>({
			Identifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DataSetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A sheet is an object that contains a set of visuals that are viewed together on one page in a paginated report. Every analysis and dashboard must contain at least one sheet. */
	export interface SheetDefinition {

		/** Required */
		SheetId: string;
		Title?: string;
		Description?: string;
		Name?: string;
		ParameterControls?: Array<ParameterControl>;
		FilterControls?: Array<FilterControl>;
		Visuals?: Array<Visual>;
		TextBoxes?: Array<SheetTextBox>;
		Layouts?: Array<Layout>;
		SheetControlLayouts?: Array<SheetControlLayout>;
		ContentType?: SheetContentType;
	}

	/** A sheet is an object that contains a set of visuals that are viewed together on one page in a paginated report. Every analysis and dashboard must contain at least one sheet. */
	export interface SheetDefinitionFormProperties {

		/** Required */
		SheetId: FormControl<string | null | undefined>,
		Title: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		ContentType: FormControl<SheetContentType | null | undefined>,
	}
	export function CreateSheetDefinitionFormGroup() {
		return new FormGroup<SheetDefinitionFormProperties>({
			SheetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			ContentType: new FormControl<SheetContentType | null | undefined>(undefined),
		});

	}


	/** <p>The control of a parameter that users can interact with in a dashboard or an analysis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ParameterControl {
		DateTimePicker?: ParameterDateTimePickerControl;
		List?: ParameterListControl;
		Dropdown?: ParameterDropDownControl;
		TextField?: ParameterTextFieldControl;
		TextArea?: ParameterTextAreaControl;
		Slider?: ParameterSliderControl;
	}

	/** <p>The control of a parameter that users can interact with in a dashboard or an analysis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ParameterControlFormProperties {
	}
	export function CreateParameterControlFormGroup() {
		return new FormGroup<ParameterControlFormProperties>({
		});

	}


	/** A control from a date parameter that specifies date and time. */
	export interface ParameterDateTimePickerControl {

		/** Required */
		ParameterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceParameterName: string;
		DisplayOptions?: DateTimePickerControlDisplayOptions;
	}

	/** A control from a date parameter that specifies date and time. */
	export interface ParameterDateTimePickerControlFormProperties {

		/** Required */
		ParameterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceParameterName: FormControl<string | null | undefined>,
	}
	export function CreateParameterDateTimePickerControlFormGroup() {
		return new FormGroup<ParameterDateTimePickerControlFormProperties>({
			ParameterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The display options of a control. */
	export interface DateTimePickerControlDisplayOptions {
		TitleOptions?: LabelOptions;
		DateTimeFormat?: string;
		InfoIconLabelOptions?: SheetControlInfoIconLabelOptions;
	}

	/** The display options of a control. */
	export interface DateTimePickerControlDisplayOptionsFormProperties {
		DateTimeFormat: FormControl<string | null | undefined>,
	}
	export function CreateDateTimePickerControlDisplayOptionsFormGroup() {
		return new FormGroup<DateTimePickerControlDisplayOptionsFormProperties>({
			DateTimeFormat: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The share label options for the labels. */
	export interface LabelOptions {
		Visibility?: Visibility;
		FontConfiguration?: FontConfiguration;
		CustomLabel?: string;
	}

	/** The share label options for the labels. */
	export interface LabelOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		CustomLabel: FormControl<string | null | undefined>,
	}
	export function CreateLabelOptionsFormGroup() {
		return new FormGroup<LabelOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			CustomLabel: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Visibility { HIDDEN = 0, VISIBLE = 1 }


	/** Configures the display properties of the given text. */
	export interface FontConfiguration {
		FontSize?: FontSize;
		FontDecoration?: FontDecoration;
		FontColor?: string;
		FontWeight?: FontWeight;
		FontStyle?: FontStyle;
	}

	/** Configures the display properties of the given text. */
	export interface FontConfigurationFormProperties {
		FontDecoration: FormControl<FontDecoration | null | undefined>,
		FontColor: FormControl<string | null | undefined>,
		FontStyle: FormControl<FontStyle | null | undefined>,
	}
	export function CreateFontConfigurationFormGroup() {
		return new FormGroup<FontConfigurationFormProperties>({
			FontDecoration: new FormControl<FontDecoration | null | undefined>(undefined),
			FontColor: new FormControl<string | null | undefined>(undefined),
			FontStyle: new FormControl<FontStyle | null | undefined>(undefined),
		});

	}


	/** The option that determines the text display size. */
	export interface FontSize {
		Relative?: RelativeFontSize;
	}

	/** The option that determines the text display size. */
	export interface FontSizeFormProperties {
		Relative: FormControl<RelativeFontSize | null | undefined>,
	}
	export function CreateFontSizeFormGroup() {
		return new FormGroup<FontSizeFormProperties>({
			Relative: new FormControl<RelativeFontSize | null | undefined>(undefined),
		});

	}

	export enum RelativeFontSize { EXTRA_SMALL = 0, SMALL = 1, MEDIUM = 2, LARGE = 3, EXTRA_LARGE = 4 }

	export enum FontDecoration { UNDERLINE = 0, NONE = 1 }


	/** The option that determines the text display weight, or boldness. */
	export interface FontWeight {
		Name?: FontWeightName;
	}

	/** The option that determines the text display weight, or boldness. */
	export interface FontWeightFormProperties {
		Name: FormControl<FontWeightName | null | undefined>,
	}
	export function CreateFontWeightFormGroup() {
		return new FormGroup<FontWeightFormProperties>({
			Name: new FormControl<FontWeightName | null | undefined>(undefined),
		});

	}

	export enum FontWeightName { NORMAL = 0, BOLD = 1 }

	export enum FontStyle { NORMAL = 0, ITALIC = 1 }


	/** A control to display info icons for filters and parameters. */
	export interface SheetControlInfoIconLabelOptions {
		Visibility?: Visibility;
		InfoIconText?: string;
	}

	/** A control to display info icons for filters and parameters. */
	export interface SheetControlInfoIconLabelOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		InfoIconText: FormControl<string | null | undefined>,
	}
	export function CreateSheetControlInfoIconLabelOptionsFormGroup() {
		return new FormGroup<SheetControlInfoIconLabelOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			InfoIconText: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A control to display a list with buttons or boxes that are used to select either a single value or multiple values. */
	export interface ParameterListControl {

		/** Required */
		ParameterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceParameterName: string;
		DisplayOptions?: ListControlDisplayOptions;
		Type?: SheetControlListType;
		SelectableValues?: ParameterSelectableValues;
		CascadingControlConfiguration?: CascadingControlConfiguration;
	}

	/** A control to display a list with buttons or boxes that are used to select either a single value or multiple values. */
	export interface ParameterListControlFormProperties {

		/** Required */
		ParameterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceParameterName: FormControl<string | null | undefined>,
		Type: FormControl<SheetControlListType | null | undefined>,
	}
	export function CreateParameterListControlFormGroup() {
		return new FormGroup<ParameterListControlFormProperties>({
			ParameterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<SheetControlListType | null | undefined>(undefined),
		});

	}


	/** The display options of a control. */
	export interface ListControlDisplayOptions {
		SearchOptions?: ListControlSearchOptions;
		SelectAllOptions?: ListControlSelectAllOptions;
		TitleOptions?: LabelOptions;
		InfoIconLabelOptions?: SheetControlInfoIconLabelOptions;
	}

	/** The display options of a control. */
	export interface ListControlDisplayOptionsFormProperties {
	}
	export function CreateListControlDisplayOptionsFormGroup() {
		return new FormGroup<ListControlDisplayOptionsFormProperties>({
		});

	}


	/** The configuration of the search options in a list control. */
	export interface ListControlSearchOptions {
		Visibility?: Visibility;
	}

	/** The configuration of the search options in a list control. */
	export interface ListControlSearchOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateListControlSearchOptionsFormGroup() {
		return new FormGroup<ListControlSearchOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The configuration of the <code>Select all</code> options in a list control. */
	export interface ListControlSelectAllOptions {
		Visibility?: Visibility;
	}

	/** The configuration of the <code>Select all</code> options in a list control. */
	export interface ListControlSelectAllOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateListControlSelectAllOptionsFormGroup() {
		return new FormGroup<ListControlSelectAllOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}

	export enum SheetControlListType { MULTI_SELECT = 0, SINGLE_SELECT = 1 }


	/** A list of selectable values that are used in a control. */
	export interface ParameterSelectableValues {
		Values?: Array<string>;
		LinkToDataSetColumn?: ColumnIdentifier;
	}

	/** A list of selectable values that are used in a control. */
	export interface ParameterSelectableValuesFormProperties {
	}
	export function CreateParameterSelectableValuesFormGroup() {
		return new FormGroup<ParameterSelectableValuesFormProperties>({
		});

	}


	/** A column of a data set. */
	export interface ColumnIdentifier {

		/** Required */
		DataSetIdentifier: string;

		/** Required */
		ColumnName: string;
	}

	/** A column of a data set. */
	export interface ColumnIdentifierFormProperties {

		/** Required */
		DataSetIdentifier: FormControl<string | null | undefined>,

		/** Required */
		ColumnName: FormControl<string | null | undefined>,
	}
	export function CreateColumnIdentifierFormGroup() {
		return new FormGroup<ColumnIdentifierFormProperties>({
			DataSetIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls. */
	export interface CascadingControlConfiguration {
		SourceControls?: Array<CascadingControlSource>;
	}

	/** The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls. */
	export interface CascadingControlConfigurationFormProperties {
	}
	export function CreateCascadingControlConfigurationFormGroup() {
		return new FormGroup<CascadingControlConfigurationFormProperties>({
		});

	}


	/** The source controls that are used in a <code>CascadingControlConfiguration</code>. */
	export interface CascadingControlSource {
		SourceSheetControlId?: string;
		ColumnToMatch?: ColumnIdentifier;
	}

	/** The source controls that are used in a <code>CascadingControlConfiguration</code>. */
	export interface CascadingControlSourceFormProperties {
		SourceSheetControlId: FormControl<string | null | undefined>,
	}
	export function CreateCascadingControlSourceFormGroup() {
		return new FormGroup<CascadingControlSourceFormProperties>({
			SourceSheetControlId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A control to display a dropdown list with buttons that are used to select a single value. */
	export interface ParameterDropDownControl {

		/** Required */
		ParameterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceParameterName: string;
		DisplayOptions?: DropDownControlDisplayOptions;
		Type?: SheetControlListType;
		SelectableValues?: ParameterSelectableValues;
		CascadingControlConfiguration?: CascadingControlConfiguration;
	}

	/** A control to display a dropdown list with buttons that are used to select a single value. */
	export interface ParameterDropDownControlFormProperties {

		/** Required */
		ParameterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceParameterName: FormControl<string | null | undefined>,
		Type: FormControl<SheetControlListType | null | undefined>,
	}
	export function CreateParameterDropDownControlFormGroup() {
		return new FormGroup<ParameterDropDownControlFormProperties>({
			ParameterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<SheetControlListType | null | undefined>(undefined),
		});

	}


	/** The display options of a control. */
	export interface DropDownControlDisplayOptions {
		SelectAllOptions?: ListControlSelectAllOptions;
		TitleOptions?: LabelOptions;
		InfoIconLabelOptions?: SheetControlInfoIconLabelOptions;
	}

	/** The display options of a control. */
	export interface DropDownControlDisplayOptionsFormProperties {
	}
	export function CreateDropDownControlDisplayOptionsFormGroup() {
		return new FormGroup<DropDownControlDisplayOptionsFormProperties>({
		});

	}


	/** A control to display a text box that is used to enter a single entry. */
	export interface ParameterTextFieldControl {

		/** Required */
		ParameterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceParameterName: string;
		DisplayOptions?: TextFieldControlDisplayOptions;
	}

	/** A control to display a text box that is used to enter a single entry. */
	export interface ParameterTextFieldControlFormProperties {

		/** Required */
		ParameterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceParameterName: FormControl<string | null | undefined>,
	}
	export function CreateParameterTextFieldControlFormGroup() {
		return new FormGroup<ParameterTextFieldControlFormProperties>({
			ParameterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The display options of a control. */
	export interface TextFieldControlDisplayOptions {
		TitleOptions?: LabelOptions;
		PlaceholderOptions?: TextControlPlaceholderOptions;
		InfoIconLabelOptions?: SheetControlInfoIconLabelOptions;
	}

	/** The display options of a control. */
	export interface TextFieldControlDisplayOptionsFormProperties {
	}
	export function CreateTextFieldControlDisplayOptionsFormGroup() {
		return new FormGroup<TextFieldControlDisplayOptionsFormProperties>({
		});

	}


	/** The configuration of the placeholder options in a text control. */
	export interface TextControlPlaceholderOptions {
		Visibility?: Visibility;
	}

	/** The configuration of the placeholder options in a text control. */
	export interface TextControlPlaceholderOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateTextControlPlaceholderOptionsFormGroup() {
		return new FormGroup<TextControlPlaceholderOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** A control to display a text box that is used to enter multiple entries. */
	export interface ParameterTextAreaControl {

		/** Required */
		ParameterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceParameterName: string;
		Delimiter?: string;
		DisplayOptions?: TextAreaControlDisplayOptions;
	}

	/** A control to display a text box that is used to enter multiple entries. */
	export interface ParameterTextAreaControlFormProperties {

		/** Required */
		ParameterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceParameterName: FormControl<string | null | undefined>,
		Delimiter: FormControl<string | null | undefined>,
	}
	export function CreateParameterTextAreaControlFormGroup() {
		return new FormGroup<ParameterTextAreaControlFormProperties>({
			ParameterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Delimiter: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The display options of a control. */
	export interface TextAreaControlDisplayOptions {
		TitleOptions?: LabelOptions;
		PlaceholderOptions?: TextControlPlaceholderOptions;
		InfoIconLabelOptions?: SheetControlInfoIconLabelOptions;
	}

	/** The display options of a control. */
	export interface TextAreaControlDisplayOptionsFormProperties {
	}
	export function CreateTextAreaControlDisplayOptionsFormGroup() {
		return new FormGroup<TextAreaControlDisplayOptionsFormProperties>({
		});

	}


	/** A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle. */
	export interface ParameterSliderControl {

		/** Required */
		ParameterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceParameterName: string;
		DisplayOptions?: SliderControlDisplayOptions;

		/** Required */
		MaximumValue: number;

		/** Required */
		MinimumValue: number;

		/** Required */
		StepSize: number;
	}

	/** A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle. */
	export interface ParameterSliderControlFormProperties {

		/** Required */
		ParameterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceParameterName: FormControl<string | null | undefined>,

		/** Required */
		MaximumValue: FormControl<number | null | undefined>,

		/** Required */
		MinimumValue: FormControl<number | null | undefined>,

		/** Required */
		StepSize: FormControl<number | null | undefined>,
	}
	export function CreateParameterSliderControlFormGroup() {
		return new FormGroup<ParameterSliderControlFormProperties>({
			ParameterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaximumValue: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			MinimumValue: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			StepSize: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The display options of a control. */
	export interface SliderControlDisplayOptions {
		TitleOptions?: LabelOptions;
		InfoIconLabelOptions?: SheetControlInfoIconLabelOptions;
	}

	/** The display options of a control. */
	export interface SliderControlDisplayOptionsFormProperties {
	}
	export function CreateSliderControlDisplayOptionsFormGroup() {
		return new FormGroup<SliderControlDisplayOptionsFormProperties>({
		});

	}


	/** <p>The control of a filter that is used to interact with a dashboard or an analysis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterControl {
		DateTimePicker?: FilterDateTimePickerControl;
		List?: FilterListControl;
		Dropdown?: FilterDropDownControl;
		TextField?: FilterTextFieldControl;
		TextArea?: FilterTextAreaControl;
		Slider?: FilterSliderControl;
		RelativeDateTime?: FilterRelativeDateTimeControl;
	}

	/** <p>The control of a filter that is used to interact with a dashboard or an analysis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterControlFormProperties {
	}
	export function CreateFilterControlFormGroup() {
		return new FormGroup<FilterControlFormProperties>({
		});

	}


	/** A control from a date filter that is used to specify date and time. */
	export interface FilterDateTimePickerControl {

		/** Required */
		FilterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceFilterId: string;
		DisplayOptions?: DateTimePickerControlDisplayOptions;
		Type?: SheetControlDateTimePickerType;
	}

	/** A control from a date filter that is used to specify date and time. */
	export interface FilterDateTimePickerControlFormProperties {

		/** Required */
		FilterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceFilterId: FormControl<string | null | undefined>,
		Type: FormControl<SheetControlDateTimePickerType | null | undefined>,
	}
	export function CreateFilterDateTimePickerControlFormGroup() {
		return new FormGroup<FilterDateTimePickerControlFormProperties>({
			FilterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceFilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<SheetControlDateTimePickerType | null | undefined>(undefined),
		});

	}

	export enum SheetControlDateTimePickerType { SINGLE_VALUED = 0, DATE_RANGE = 1 }


	/** A control to display a list of buttons or boxes. This is used to select either a single value or multiple values. */
	export interface FilterListControl {

		/** Required */
		FilterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceFilterId: string;
		DisplayOptions?: ListControlDisplayOptions;
		Type?: SheetControlListType;
		SelectableValues?: FilterSelectableValues;
		CascadingControlConfiguration?: CascadingControlConfiguration;
	}

	/** A control to display a list of buttons or boxes. This is used to select either a single value or multiple values. */
	export interface FilterListControlFormProperties {

		/** Required */
		FilterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceFilterId: FormControl<string | null | undefined>,
		Type: FormControl<SheetControlListType | null | undefined>,
	}
	export function CreateFilterListControlFormGroup() {
		return new FormGroup<FilterListControlFormProperties>({
			FilterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceFilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<SheetControlListType | null | undefined>(undefined),
		});

	}


	/** A list of selectable values that are used in a control. */
	export interface FilterSelectableValues {
		Values?: Array<string>;
	}

	/** A list of selectable values that are used in a control. */
	export interface FilterSelectableValuesFormProperties {
	}
	export function CreateFilterSelectableValuesFormGroup() {
		return new FormGroup<FilterSelectableValuesFormProperties>({
		});

	}


	/** A control to display a dropdown list with buttons that are used to select a single value. */
	export interface FilterDropDownControl {

		/** Required */
		FilterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceFilterId: string;
		DisplayOptions?: DropDownControlDisplayOptions;
		Type?: SheetControlListType;
		SelectableValues?: FilterSelectableValues;
		CascadingControlConfiguration?: CascadingControlConfiguration;
	}

	/** A control to display a dropdown list with buttons that are used to select a single value. */
	export interface FilterDropDownControlFormProperties {

		/** Required */
		FilterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceFilterId: FormControl<string | null | undefined>,
		Type: FormControl<SheetControlListType | null | undefined>,
	}
	export function CreateFilterDropDownControlFormGroup() {
		return new FormGroup<FilterDropDownControlFormProperties>({
			FilterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceFilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<SheetControlListType | null | undefined>(undefined),
		});

	}


	/** A control to display a text box that is used to enter a single entry. */
	export interface FilterTextFieldControl {

		/** Required */
		FilterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceFilterId: string;
		DisplayOptions?: TextFieldControlDisplayOptions;
	}

	/** A control to display a text box that is used to enter a single entry. */
	export interface FilterTextFieldControlFormProperties {

		/** Required */
		FilterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceFilterId: FormControl<string | null | undefined>,
	}
	export function CreateFilterTextFieldControlFormGroup() {
		return new FormGroup<FilterTextFieldControlFormProperties>({
			FilterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceFilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A control to display a text box that is used to enter multiple entries. */
	export interface FilterTextAreaControl {

		/** Required */
		FilterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceFilterId: string;
		Delimiter?: string;
		DisplayOptions?: TextAreaControlDisplayOptions;
	}

	/** A control to display a text box that is used to enter multiple entries. */
	export interface FilterTextAreaControlFormProperties {

		/** Required */
		FilterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceFilterId: FormControl<string | null | undefined>,
		Delimiter: FormControl<string | null | undefined>,
	}
	export function CreateFilterTextAreaControlFormGroup() {
		return new FormGroup<FilterTextAreaControlFormProperties>({
			FilterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceFilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Delimiter: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle. */
	export interface FilterSliderControl {

		/** Required */
		FilterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceFilterId: string;
		DisplayOptions?: SliderControlDisplayOptions;
		Type?: SheetControlSliderType;

		/** Required */
		MaximumValue: number;

		/** Required */
		MinimumValue: number;

		/** Required */
		StepSize: number;
	}

	/** A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle. */
	export interface FilterSliderControlFormProperties {

		/** Required */
		FilterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceFilterId: FormControl<string | null | undefined>,
		Type: FormControl<SheetControlSliderType | null | undefined>,

		/** Required */
		MaximumValue: FormControl<number | null | undefined>,

		/** Required */
		MinimumValue: FormControl<number | null | undefined>,

		/** Required */
		StepSize: FormControl<number | null | undefined>,
	}
	export function CreateFilterSliderControlFormGroup() {
		return new FormGroup<FilterSliderControlFormProperties>({
			FilterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceFilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<SheetControlSliderType | null | undefined>(undefined),
			MaximumValue: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			MinimumValue: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			StepSize: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SheetControlSliderType { SINGLE_POINT = 0, RANGE = 1 }


	/** A control from a date filter that is used to specify the relative date. */
	export interface FilterRelativeDateTimeControl {

		/** Required */
		FilterControlId: string;

		/** Required */
		Title: string;

		/** Required */
		SourceFilterId: string;
		DisplayOptions?: RelativeDateTimeControlDisplayOptions;
	}

	/** A control from a date filter that is used to specify the relative date. */
	export interface FilterRelativeDateTimeControlFormProperties {

		/** Required */
		FilterControlId: FormControl<string | null | undefined>,

		/** Required */
		Title: FormControl<string | null | undefined>,

		/** Required */
		SourceFilterId: FormControl<string | null | undefined>,
	}
	export function CreateFilterRelativeDateTimeControlFormGroup() {
		return new FormGroup<FilterRelativeDateTimeControlFormProperties>({
			FilterControlId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Title: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SourceFilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The display options of a control. */
	export interface RelativeDateTimeControlDisplayOptions {
		TitleOptions?: LabelOptions;
		DateTimeFormat?: string;
		InfoIconLabelOptions?: SheetControlInfoIconLabelOptions;
	}

	/** The display options of a control. */
	export interface RelativeDateTimeControlDisplayOptionsFormProperties {
		DateTimeFormat: FormControl<string | null | undefined>,
	}
	export function CreateRelativeDateTimeControlDisplayOptionsFormGroup() {
		return new FormGroup<RelativeDateTimeControlDisplayOptionsFormProperties>({
			DateTimeFormat: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** <p>A visual displayed on a sheet in an analysis, dashboard, or template.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface Visual {
		TableVisual?: TableVisual;
		PivotTableVisual?: PivotTableVisual;
		BarChartVisual?: BarChartVisual;
		KPIVisual?: KPIVisual;
		PieChartVisual?: PieChartVisual;
		GaugeChartVisual?: GaugeChartVisual;
		LineChartVisual?: LineChartVisual;
		HeatMapVisual?: HeatMapVisual;
		TreeMapVisual?: TreeMapVisual;
		GeospatialMapVisual?: GeospatialMapVisual;
		FilledMapVisual?: FilledMapVisual;
		FunnelChartVisual?: FunnelChartVisual;
		ScatterPlotVisual?: ScatterPlotVisual;
		ComboChartVisual?: ComboChartVisual;
		BoxPlotVisual?: BoxPlotVisual;
		WaterfallVisual?: WaterfallVisual;
		HistogramVisual?: HistogramVisual;
		WordCloudVisual?: WordCloudVisual;
		InsightVisual?: InsightVisual;
		SankeyDiagramVisual?: SankeyDiagramVisual;
		CustomContentVisual?: CustomContentVisual;
		EmptyVisual?: EmptyVisual;
		RadarChartVisual?: RadarChartVisual;
	}

	/** <p>A visual displayed on a sheet in an analysis, dashboard, or template.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface VisualFormProperties {
	}
	export function CreateVisualFormGroup() {
		return new FormGroup<VisualFormProperties>({
		});

	}


	/** <p>A table visual.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tabular.html">Using tables as visuals</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface TableVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: TableConfiguration;
		ConditionalFormatting?: TableConditionalFormatting;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A table visual.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tabular.html">Using tables as visuals</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface TableVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateTableVisualFormGroup() {
		return new FormGroup<TableVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The title label options for a visual. */
	export interface VisualTitleLabelOptions {
		Visibility?: Visibility;
		FormatText?: ShortFormatText;
	}

	/** The title label options for a visual. */
	export interface VisualTitleLabelOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateVisualTitleLabelOptionsFormGroup() {
		return new FormGroup<VisualTitleLabelOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** <p>The text format for the title.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ShortFormatText {
		PlainText?: string;
		RichText?: string;
	}

	/** <p>The text format for the title.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ShortFormatTextFormProperties {
		PlainText: FormControl<string | null | undefined>,
		RichText: FormControl<string | null | undefined>,
	}
	export function CreateShortFormatTextFormGroup() {
		return new FormGroup<ShortFormatTextFormProperties>({
			PlainText: new FormControl<string | null | undefined>(undefined),
			RichText: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The subtitle label options for a visual. */
	export interface VisualSubtitleLabelOptions {
		Visibility?: Visibility;
		FormatText?: LongFormatText;
	}

	/** The subtitle label options for a visual. */
	export interface VisualSubtitleLabelOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateVisualSubtitleLabelOptionsFormGroup() {
		return new FormGroup<VisualSubtitleLabelOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** <p>The text format for a subtitle.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface LongFormatText {
		PlainText?: string;
		RichText?: string;
	}

	/** <p>The text format for a subtitle.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface LongFormatTextFormProperties {
		PlainText: FormControl<string | null | undefined>,
		RichText: FormControl<string | null | undefined>,
	}
	export function CreateLongFormatTextFormGroup() {
		return new FormGroup<LongFormatTextFormProperties>({
			PlainText: new FormControl<string | null | undefined>(undefined),
			RichText: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration for a <code>TableVisual</code>. */
	export interface TableConfiguration {
		FieldWells?: TableFieldWells;
		SortConfiguration?: TableSortConfiguration;
		TableOptions?: TableOptions;
		TotalOptions?: TotalOptions;
		FieldOptions?: TableFieldOptions;
		PaginatedReportOptions?: TablePaginatedReportOptions;
		TableInlineVisualizations?: Array<TableInlineVisualization>;
	}

	/** The configuration for a <code>TableVisual</code>. */
	export interface TableConfigurationFormProperties {
	}
	export function CreateTableConfigurationFormGroup() {
		return new FormGroup<TableConfigurationFormProperties>({
		});

	}


	/** <p>The field wells for a table visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TableFieldWells {
		TableAggregatedFieldWells?: TableAggregatedFieldWells;
		TableUnaggregatedFieldWells?: TableUnaggregatedFieldWells;
	}

	/** <p>The field wells for a table visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TableFieldWellsFormProperties {
	}
	export function CreateTableFieldWellsFormGroup() {
		return new FormGroup<TableFieldWellsFormProperties>({
		});

	}


	/** The aggregated field well for the table. */
	export interface TableAggregatedFieldWells {
		GroupBy?: Array<DimensionField>;
		Values?: Array<MeasureField>;
	}

	/** The aggregated field well for the table. */
	export interface TableAggregatedFieldWellsFormProperties {
	}
	export function CreateTableAggregatedFieldWellsFormGroup() {
		return new FormGroup<TableAggregatedFieldWellsFormProperties>({
		});

	}


	/** The dimension type field. */
	export interface DimensionField {
		NumericalDimensionField?: NumericalDimensionField;
		CategoricalDimensionField?: CategoricalDimensionField;
		DateDimensionField?: DateDimensionField;
	}

	/** The dimension type field. */
	export interface DimensionFieldFormProperties {
	}
	export function CreateDimensionFieldFormGroup() {
		return new FormGroup<DimensionFieldFormProperties>({
		});

	}


	/** The dimension type field with numerical type columns. */
	export interface NumericalDimensionField {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
		HierarchyId?: string;
		FormatConfiguration?: NumberFormatConfiguration;
	}

	/** The dimension type field with numerical type columns. */
	export interface NumericalDimensionFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		HierarchyId: FormControl<string | null | undefined>,
	}
	export function CreateNumericalDimensionFieldFormGroup() {
		return new FormGroup<NumericalDimensionFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HierarchyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Formatting configuration for number fields. */
	export interface NumberFormatConfiguration {
		FormatConfiguration?: NumericFormatConfiguration;
	}

	/** Formatting configuration for number fields. */
	export interface NumberFormatConfigurationFormProperties {
	}
	export function CreateNumberFormatConfigurationFormGroup() {
		return new FormGroup<NumberFormatConfigurationFormProperties>({
		});

	}


	/** <p>The options that determine the numeric format configuration.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface NumericFormatConfiguration {
		NumberDisplayFormatConfiguration?: NumberDisplayFormatConfiguration;
		CurrencyDisplayFormatConfiguration?: CurrencyDisplayFormatConfiguration;
		PercentageDisplayFormatConfiguration?: PercentageDisplayFormatConfiguration;
	}

	/** <p>The options that determine the numeric format configuration.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface NumericFormatConfigurationFormProperties {
	}
	export function CreateNumericFormatConfigurationFormGroup() {
		return new FormGroup<NumericFormatConfigurationFormProperties>({
		});

	}


	/** The options that determine the number display format configuration. */
	export interface NumberDisplayFormatConfiguration {
		Prefix?: string;
		Suffix?: string;
		SeparatorConfiguration?: NumericSeparatorConfiguration;
		DecimalPlacesConfiguration?: DecimalPlacesConfiguration;
		NumberScale?: NumberScale;
		NegativeValueConfiguration?: NegativeValueConfiguration;
		NullValueFormatConfiguration?: NullValueFormatConfiguration;
	}

	/** The options that determine the number display format configuration. */
	export interface NumberDisplayFormatConfigurationFormProperties {
		Prefix: FormControl<string | null | undefined>,
		Suffix: FormControl<string | null | undefined>,
		NumberScale: FormControl<NumberScale | null | undefined>,
	}
	export function CreateNumberDisplayFormatConfigurationFormGroup() {
		return new FormGroup<NumberDisplayFormatConfigurationFormProperties>({
			Prefix: new FormControl<string | null | undefined>(undefined),
			Suffix: new FormControl<string | null | undefined>(undefined),
			NumberScale: new FormControl<NumberScale | null | undefined>(undefined),
		});

	}


	/** The options that determine the numeric separator configuration. */
	export interface NumericSeparatorConfiguration {
		DecimalSeparator?: NumericSeparatorSymbol;
		ThousandsSeparator?: ThousandSeparatorOptions;
	}

	/** The options that determine the numeric separator configuration. */
	export interface NumericSeparatorConfigurationFormProperties {
		DecimalSeparator: FormControl<NumericSeparatorSymbol | null | undefined>,
	}
	export function CreateNumericSeparatorConfigurationFormGroup() {
		return new FormGroup<NumericSeparatorConfigurationFormProperties>({
			DecimalSeparator: new FormControl<NumericSeparatorSymbol | null | undefined>(undefined),
		});

	}

	export enum NumericSeparatorSymbol { COMMA = 0, DOT = 1, SPACE = 2 }


	/** The options that determine the thousands separator configuration. */
	export interface ThousandSeparatorOptions {
		Symbol?: NumericSeparatorSymbol;
		Visibility?: Visibility;
	}

	/** The options that determine the thousands separator configuration. */
	export interface ThousandSeparatorOptionsFormProperties {
		Symbol: FormControl<NumericSeparatorSymbol | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateThousandSeparatorOptionsFormGroup() {
		return new FormGroup<ThousandSeparatorOptionsFormProperties>({
			Symbol: new FormControl<NumericSeparatorSymbol | null | undefined>(undefined),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The option that determines the decimal places configuration. */
	export interface DecimalPlacesConfiguration {

		/** Required */
		DecimalPlaces: number;
	}

	/** The option that determines the decimal places configuration. */
	export interface DecimalPlacesConfigurationFormProperties {

		/** Required */
		DecimalPlaces: FormControl<number | null | undefined>,
	}
	export function CreateDecimalPlacesConfigurationFormGroup() {
		return new FormGroup<DecimalPlacesConfigurationFormProperties>({
			DecimalPlaces: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum NumberScale { NONE = 0, AUTO = 1, THOUSANDS = 2, MILLIONS = 3, BILLIONS = 4, TRILLIONS = 5 }


	/** The options that determine the negative value configuration. */
	export interface NegativeValueConfiguration {

		/** Required */
		DisplayMode: NegativeValueDisplayMode;
	}

	/** The options that determine the negative value configuration. */
	export interface NegativeValueConfigurationFormProperties {

		/** Required */
		DisplayMode: FormControl<NegativeValueDisplayMode | null | undefined>,
	}
	export function CreateNegativeValueConfigurationFormGroup() {
		return new FormGroup<NegativeValueConfigurationFormProperties>({
			DisplayMode: new FormControl<NegativeValueDisplayMode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum NegativeValueDisplayMode { POSITIVE = 0, NEGATIVE = 1 }


	/** The options that determine the null value format configuration. */
	export interface NullValueFormatConfiguration {

		/** Required */
		NullString: string;
	}

	/** The options that determine the null value format configuration. */
	export interface NullValueFormatConfigurationFormProperties {

		/** Required */
		NullString: FormControl<string | null | undefined>,
	}
	export function CreateNullValueFormatConfigurationFormGroup() {
		return new FormGroup<NullValueFormatConfigurationFormProperties>({
			NullString: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The options that determine the currency display format configuration. */
	export interface CurrencyDisplayFormatConfiguration {
		Prefix?: string;
		Suffix?: string;
		SeparatorConfiguration?: NumericSeparatorConfiguration;
		Symbol?: string;
		DecimalPlacesConfiguration?: DecimalPlacesConfiguration;
		NumberScale?: NumberScale;
		NegativeValueConfiguration?: NegativeValueConfiguration;
		NullValueFormatConfiguration?: NullValueFormatConfiguration;
	}

	/** The options that determine the currency display format configuration. */
	export interface CurrencyDisplayFormatConfigurationFormProperties {
		Prefix: FormControl<string | null | undefined>,
		Suffix: FormControl<string | null | undefined>,
		Symbol: FormControl<string | null | undefined>,
		NumberScale: FormControl<NumberScale | null | undefined>,
	}
	export function CreateCurrencyDisplayFormatConfigurationFormGroup() {
		return new FormGroup<CurrencyDisplayFormatConfigurationFormProperties>({
			Prefix: new FormControl<string | null | undefined>(undefined),
			Suffix: new FormControl<string | null | undefined>(undefined),
			Symbol: new FormControl<string | null | undefined>(undefined),
			NumberScale: new FormControl<NumberScale | null | undefined>(undefined),
		});

	}


	/** The options that determine the percentage display format configuration. */
	export interface PercentageDisplayFormatConfiguration {
		Prefix?: string;
		Suffix?: string;
		SeparatorConfiguration?: NumericSeparatorConfiguration;
		DecimalPlacesConfiguration?: DecimalPlacesConfiguration;
		NegativeValueConfiguration?: NegativeValueConfiguration;
		NullValueFormatConfiguration?: NullValueFormatConfiguration;
	}

	/** The options that determine the percentage display format configuration. */
	export interface PercentageDisplayFormatConfigurationFormProperties {
		Prefix: FormControl<string | null | undefined>,
		Suffix: FormControl<string | null | undefined>,
	}
	export function CreatePercentageDisplayFormatConfigurationFormGroup() {
		return new FormGroup<PercentageDisplayFormatConfigurationFormProperties>({
			Prefix: new FormControl<string | null | undefined>(undefined),
			Suffix: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The dimension type field with categorical type columns.. */
	export interface CategoricalDimensionField {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
		HierarchyId?: string;
		FormatConfiguration?: StringFormatConfiguration;
	}

	/** The dimension type field with categorical type columns.. */
	export interface CategoricalDimensionFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		HierarchyId: FormControl<string | null | undefined>,
	}
	export function CreateCategoricalDimensionFieldFormGroup() {
		return new FormGroup<CategoricalDimensionFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			HierarchyId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Formatting configuration for string fields. */
	export interface StringFormatConfiguration {
		NullValueFormatConfiguration?: NullValueFormatConfiguration;
		NumericFormatConfiguration?: NumericFormatConfiguration;
	}

	/** Formatting configuration for string fields. */
	export interface StringFormatConfigurationFormProperties {
	}
	export function CreateStringFormatConfigurationFormGroup() {
		return new FormGroup<StringFormatConfigurationFormProperties>({
		});

	}


	/** The dimension type field with date type columns. */
	export interface DateDimensionField {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
		DateGranularity?: TimeGranularity;
		HierarchyId?: string;
		FormatConfiguration?: DateTimeFormatConfiguration;
	}

	/** The dimension type field with date type columns. */
	export interface DateDimensionFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		DateGranularity: FormControl<TimeGranularity | null | undefined>,
		HierarchyId: FormControl<string | null | undefined>,
	}
	export function CreateDateDimensionFieldFormGroup() {
		return new FormGroup<DateDimensionFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DateGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
			HierarchyId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TimeGranularity { YEAR = 0, QUARTER = 1, MONTH = 2, WEEK = 3, DAY = 4, HOUR = 5, MINUTE = 6, SECOND = 7, MILLISECOND = 8 }


	/** Formatting configuration for <code>DateTime</code> fields. */
	export interface DateTimeFormatConfiguration {
		DateTimeFormat?: string;
		NullValueFormatConfiguration?: NullValueFormatConfiguration;
		NumericFormatConfiguration?: NumericFormatConfiguration;
	}

	/** Formatting configuration for <code>DateTime</code> fields. */
	export interface DateTimeFormatConfigurationFormProperties {
		DateTimeFormat: FormControl<string | null | undefined>,
	}
	export function CreateDateTimeFormatConfigurationFormGroup() {
		return new FormGroup<DateTimeFormatConfigurationFormProperties>({
			DateTimeFormat: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The measure (metric) type field. */
	export interface MeasureField {
		NumericalMeasureField?: NumericalMeasureField;
		CategoricalMeasureField?: CategoricalMeasureField;
		DateMeasureField?: DateMeasureField;
		CalculatedMeasureField?: CalculatedMeasureField;
	}

	/** The measure (metric) type field. */
	export interface MeasureFieldFormProperties {
	}
	export function CreateMeasureFieldFormGroup() {
		return new FormGroup<MeasureFieldFormProperties>({
		});

	}


	/** The measure type field with numerical type columns. */
	export interface NumericalMeasureField {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
		AggregationFunction?: NumericalAggregationFunction;
		FormatConfiguration?: NumberFormatConfiguration;
	}

	/** The measure type field with numerical type columns. */
	export interface NumericalMeasureFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreateNumericalMeasureFieldFormGroup() {
		return new FormGroup<NumericalMeasureFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Aggregation for numerical values. */
	export interface NumericalAggregationFunction {
		SimpleNumericalAggregation?: SimpleNumericalAggregationFunction;
		PercentileAggregation?: PercentileAggregation;
	}

	/** Aggregation for numerical values. */
	export interface NumericalAggregationFunctionFormProperties {
		SimpleNumericalAggregation: FormControl<SimpleNumericalAggregationFunction | null | undefined>,
	}
	export function CreateNumericalAggregationFunctionFormGroup() {
		return new FormGroup<NumericalAggregationFunctionFormProperties>({
			SimpleNumericalAggregation: new FormControl<SimpleNumericalAggregationFunction | null | undefined>(undefined),
		});

	}

	export enum SimpleNumericalAggregationFunction { SUM = 0, AVERAGE = 1, MIN = 2, MAX = 3, COUNT = 4, DISTINCT_COUNT = 5, VAR = 6, VARP = 7, STDEV = 8, STDEVP = 9, MEDIAN = 10 }


	/** An aggregation based on the percentile of values in a dimension or measure. */
	export interface PercentileAggregation {
		PercentileValue?: number | null;
	}

	/** An aggregation based on the percentile of values in a dimension or measure. */
	export interface PercentileAggregationFormProperties {
		PercentileValue: FormControl<number | null | undefined>,
	}
	export function CreatePercentileAggregationFormGroup() {
		return new FormGroup<PercentileAggregationFormProperties>({
			PercentileValue: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The measure type field with categorical type columns. */
	export interface CategoricalMeasureField {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
		AggregationFunction?: CategoricalAggregationFunction;
		FormatConfiguration?: StringFormatConfiguration;
	}

	/** The measure type field with categorical type columns. */
	export interface CategoricalMeasureFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		AggregationFunction: FormControl<CategoricalAggregationFunction | null | undefined>,
	}
	export function CreateCategoricalMeasureFieldFormGroup() {
		return new FormGroup<CategoricalMeasureFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AggregationFunction: new FormControl<CategoricalAggregationFunction | null | undefined>(undefined),
		});

	}

	export enum CategoricalAggregationFunction { COUNT = 0, DISTINCT_COUNT = 1 }


	/** The measure type field with date type columns. */
	export interface DateMeasureField {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
		AggregationFunction?: DateAggregationFunction;
		FormatConfiguration?: DateTimeFormatConfiguration;
	}

	/** The measure type field with date type columns. */
	export interface DateMeasureFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		AggregationFunction: FormControl<DateAggregationFunction | null | undefined>,
	}
	export function CreateDateMeasureFieldFormGroup() {
		return new FormGroup<DateMeasureFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AggregationFunction: new FormControl<DateAggregationFunction | null | undefined>(undefined),
		});

	}

	export enum DateAggregationFunction { COUNT = 0, DISTINCT_COUNT = 1, MIN = 2, MAX = 3 }


	/** The table calculation measure field for pivot tables. */
	export interface CalculatedMeasureField {

		/** Required */
		FieldId: string;

		/** Required */
		Expression: string;
	}

	/** The table calculation measure field for pivot tables. */
	export interface CalculatedMeasureFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,

		/** Required */
		Expression: FormControl<string | null | undefined>,
	}
	export function CreateCalculatedMeasureFieldFormGroup() {
		return new FormGroup<CalculatedMeasureFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The unaggregated field well for the table. */
	export interface TableUnaggregatedFieldWells {
		Values?: Array<UnaggregatedField>;
	}

	/** The unaggregated field well for the table. */
	export interface TableUnaggregatedFieldWellsFormProperties {
	}
	export function CreateTableUnaggregatedFieldWellsFormGroup() {
		return new FormGroup<TableUnaggregatedFieldWellsFormProperties>({
		});

	}


	/** The unaggregated field for a table. */
	export interface UnaggregatedField {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
		FormatConfiguration?: FormatConfiguration;
	}

	/** The unaggregated field for a table. */
	export interface UnaggregatedFieldFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreateUnaggregatedFieldFormGroup() {
		return new FormGroup<UnaggregatedFieldFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The formatting configuration for all types of field. */
	export interface FormatConfiguration {
		StringFormatConfiguration?: StringFormatConfiguration;
		NumberFormatConfiguration?: NumberFormatConfiguration;
		DateTimeFormatConfiguration?: DateTimeFormatConfiguration;
	}

	/** The formatting configuration for all types of field. */
	export interface FormatConfigurationFormProperties {
	}
	export function CreateFormatConfigurationFormGroup() {
		return new FormGroup<FormatConfigurationFormProperties>({
		});

	}


	/** The sort configuration for a <code>TableVisual</code>. */
	export interface TableSortConfiguration {
		RowSort?: Array<FieldSortOptions>;
		PaginationConfiguration?: PaginationConfiguration;
	}

	/** The sort configuration for a <code>TableVisual</code>. */
	export interface TableSortConfigurationFormProperties {
	}
	export function CreateTableSortConfigurationFormGroup() {
		return new FormGroup<TableSortConfigurationFormProperties>({
		});

	}


	/** The field sort options in a chart configuration. */
	export interface FieldSortOptions {
		FieldSort?: FieldSort;
		ColumnSort?: ColumnSort;
	}

	/** The field sort options in a chart configuration. */
	export interface FieldSortOptionsFormProperties {
	}
	export function CreateFieldSortOptionsFormGroup() {
		return new FormGroup<FieldSortOptionsFormProperties>({
		});

	}


	/** The sort configuration for a field in a field well. */
	export interface FieldSort {

		/** Required */
		FieldId: string;

		/** Required */
		Direction: SortDirection;
	}

	/** The sort configuration for a field in a field well. */
	export interface FieldSortFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,

		/** Required */
		Direction: FormControl<SortDirection | null | undefined>,
	}
	export function CreateFieldSortFormGroup() {
		return new FormGroup<FieldSortFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Direction: new FormControl<SortDirection | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SortDirection { ASC = 0, DESC = 1 }


	/** The sort configuration for a column that is not used in a field well. */
	export interface ColumnSort {

		/**
		 * A column of a data set.
		 * Required
		 */
		SortBy: ColumnIdentifier;

		/** Required */
		Direction: SortDirection;
		AggregationFunction?: AggregationFunction;
	}

	/** The sort configuration for a column that is not used in a field well. */
	export interface ColumnSortFormProperties {

		/** Required */
		Direction: FormControl<SortDirection | null | undefined>,
	}
	export function CreateColumnSortFormGroup() {
		return new FormGroup<ColumnSortFormProperties>({
			Direction: new FormControl<SortDirection | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>An aggregation function aggregates values from a dimension or measure.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AggregationFunction {
		NumericalAggregationFunction?: NumericalAggregationFunction;
		CategoricalAggregationFunction?: CategoricalAggregationFunction;
		DateAggregationFunction?: DateAggregationFunction;
		AttributeAggregationFunction?: AttributeAggregationFunction;
	}

	/** <p>An aggregation function aggregates values from a dimension or measure.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AggregationFunctionFormProperties {
		CategoricalAggregationFunction: FormControl<CategoricalAggregationFunction | null | undefined>,
		DateAggregationFunction: FormControl<DateAggregationFunction | null | undefined>,
	}
	export function CreateAggregationFunctionFormGroup() {
		return new FormGroup<AggregationFunctionFormProperties>({
			CategoricalAggregationFunction: new FormControl<CategoricalAggregationFunction | null | undefined>(undefined),
			DateAggregationFunction: new FormControl<DateAggregationFunction | null | undefined>(undefined),
		});

	}


	/** Aggregation for attributes. */
	export interface AttributeAggregationFunction {
		SimpleAttributeAggregation?: SimpleAttributeAggregationFunction;
		ValueForMultipleValues?: string;
	}

	/** Aggregation for attributes. */
	export interface AttributeAggregationFunctionFormProperties {
		SimpleAttributeAggregation: FormControl<SimpleAttributeAggregationFunction | null | undefined>,
		ValueForMultipleValues: FormControl<string | null | undefined>,
	}
	export function CreateAttributeAggregationFunctionFormGroup() {
		return new FormGroup<AttributeAggregationFunctionFormProperties>({
			SimpleAttributeAggregation: new FormControl<SimpleAttributeAggregationFunction | null | undefined>(undefined),
			ValueForMultipleValues: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum SimpleAttributeAggregationFunction { UNIQUE_VALUE = 0 }


	/** The pagination configuration for a table visual or boxplot. */
	export interface PaginationConfiguration {

		/** Required */
		PageSize: number;

		/** Required */
		PageNumber: number;
	}

	/** The pagination configuration for a table visual or boxplot. */
	export interface PaginationConfigurationFormProperties {

		/** Required */
		PageSize: FormControl<number | null | undefined>,

		/** Required */
		PageNumber: FormControl<number | null | undefined>,
	}
	export function CreatePaginationConfigurationFormGroup() {
		return new FormGroup<PaginationConfigurationFormProperties>({
			PageSize: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			PageNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The table options for a table visual. */
	export interface TableOptions {
		Orientation?: TableOrientation;
		HeaderStyle?: TableCellStyle;
		CellStyle?: TableCellStyle;
		RowAlternateColorOptions?: RowAlternateColorOptions;
	}

	/** The table options for a table visual. */
	export interface TableOptionsFormProperties {
		Orientation: FormControl<TableOrientation | null | undefined>,
	}
	export function CreateTableOptionsFormGroup() {
		return new FormGroup<TableOptionsFormProperties>({
			Orientation: new FormControl<TableOrientation | null | undefined>(undefined),
		});

	}

	export enum TableOrientation { VERTICAL = 0, HORIZONTAL = 1 }


	/** The table cell style for a cell in pivot table or table visual. */
	export interface TableCellStyle {
		Visibility?: Visibility;
		FontConfiguration?: FontConfiguration;
		TextWrap?: TextWrap;
		HorizontalTextAlignment?: HorizontalTextAlignment;
		VerticalTextAlignment?: VerticalTextAlignment;
		BackgroundColor?: string;
		Height?: number | null;
		Border?: GlobalTableBorderOptions;
	}

	/** The table cell style for a cell in pivot table or table visual. */
	export interface TableCellStyleFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		TextWrap: FormControl<TextWrap | null | undefined>,
		HorizontalTextAlignment: FormControl<HorizontalTextAlignment | null | undefined>,
		VerticalTextAlignment: FormControl<VerticalTextAlignment | null | undefined>,
		BackgroundColor: FormControl<string | null | undefined>,
		Height: FormControl<number | null | undefined>,
	}
	export function CreateTableCellStyleFormGroup() {
		return new FormGroup<TableCellStyleFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			TextWrap: new FormControl<TextWrap | null | undefined>(undefined),
			HorizontalTextAlignment: new FormControl<HorizontalTextAlignment | null | undefined>(undefined),
			VerticalTextAlignment: new FormControl<VerticalTextAlignment | null | undefined>(undefined),
			BackgroundColor: new FormControl<string | null | undefined>(undefined),
			Height: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum TextWrap { NONE = 0, WRAP = 1 }

	export enum HorizontalTextAlignment { LEFT = 0, CENTER = 1, RIGHT = 2, AUTO = 3 }

	export enum VerticalTextAlignment { TOP = 0, MIDDLE = 1, BOTTOM = 2 }


	/** Determines the border options for a table visual. */
	export interface GlobalTableBorderOptions {
		UniformBorder?: TableBorderOptions;
		SideSpecificBorder?: TableSideBorderOptions;
	}

	/** Determines the border options for a table visual. */
	export interface GlobalTableBorderOptionsFormProperties {
	}
	export function CreateGlobalTableBorderOptionsFormGroup() {
		return new FormGroup<GlobalTableBorderOptionsFormProperties>({
		});

	}


	/** The border options for a table border. */
	export interface TableBorderOptions {
		Color?: string;
		Thickness?: number | null;
		Style?: TableBorderStyle;
	}

	/** The border options for a table border. */
	export interface TableBorderOptionsFormProperties {
		Color: FormControl<string | null | undefined>,
		Thickness: FormControl<number | null | undefined>,
		Style: FormControl<TableBorderStyle | null | undefined>,
	}
	export function CreateTableBorderOptionsFormGroup() {
		return new FormGroup<TableBorderOptionsFormProperties>({
			Color: new FormControl<string | null | undefined>(undefined),
			Thickness: new FormControl<number | null | undefined>(undefined),
			Style: new FormControl<TableBorderStyle | null | undefined>(undefined),
		});

	}

	export enum TableBorderStyle { NONE = 0, SOLID = 1 }


	/** The side border options for a table. */
	export interface TableSideBorderOptions {
		InnerVertical?: TableBorderOptions;
		InnerHorizontal?: TableBorderOptions;
		Left?: TableBorderOptions;
		Right?: TableBorderOptions;
		Top?: TableBorderOptions;
		Bottom?: TableBorderOptions;
	}

	/** The side border options for a table. */
	export interface TableSideBorderOptionsFormProperties {
	}
	export function CreateTableSideBorderOptionsFormGroup() {
		return new FormGroup<TableSideBorderOptionsFormProperties>({
		});

	}


	/** Determines the row alternate color options. */
	export interface RowAlternateColorOptions {
		Status?: WidgetStatus;
		RowAlternateColors?: Array<string>;
	}

	/** Determines the row alternate color options. */
	export interface RowAlternateColorOptionsFormProperties {
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateRowAlternateColorOptionsFormGroup() {
		return new FormGroup<RowAlternateColorOptionsFormProperties>({
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}

	export enum WidgetStatus { ENABLED = 0, DISABLED = 1 }


	/** The total options for a table visual. */
	export interface TotalOptions {
		TotalsVisibility?: Visibility;
		Placement?: TableTotalsPlacement;
		ScrollStatus?: TableTotalsScrollStatus;
		CustomLabel?: string;
		TotalCellStyle?: TableCellStyle;
	}

	/** The total options for a table visual. */
	export interface TotalOptionsFormProperties {
		TotalsVisibility: FormControl<Visibility | null | undefined>,
		Placement: FormControl<TableTotalsPlacement | null | undefined>,
		ScrollStatus: FormControl<TableTotalsScrollStatus | null | undefined>,
		CustomLabel: FormControl<string | null | undefined>,
	}
	export function CreateTotalOptionsFormGroup() {
		return new FormGroup<TotalOptionsFormProperties>({
			TotalsVisibility: new FormControl<Visibility | null | undefined>(undefined),
			Placement: new FormControl<TableTotalsPlacement | null | undefined>(undefined),
			ScrollStatus: new FormControl<TableTotalsScrollStatus | null | undefined>(undefined),
			CustomLabel: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TableTotalsPlacement { START = 0, END = 1 }

	export enum TableTotalsScrollStatus { PINNED = 0, SCROLLED = 1 }


	/** The field options for a table visual. */
	export interface TableFieldOptions {
		SelectedFieldOptions?: Array<TableFieldOption>;
		Order?: Array<string>;
	}

	/** The field options for a table visual. */
	export interface TableFieldOptionsFormProperties {
	}
	export function CreateTableFieldOptionsFormGroup() {
		return new FormGroup<TableFieldOptionsFormProperties>({
		});

	}


	/** The options for a table field. */
	export interface TableFieldOption {

		/** Required */
		FieldId: string;
		Width?: string;
		CustomLabel?: string;
		Visibility?: Visibility;
		URLStyling?: TableFieldURLConfiguration;
	}

	/** The options for a table field. */
	export interface TableFieldOptionFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		Width: FormControl<string | null | undefined>,
		CustomLabel: FormControl<string | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateTableFieldOptionFormGroup() {
		return new FormGroup<TableFieldOptionFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Width: new FormControl<string | null | undefined>(undefined),
			CustomLabel: new FormControl<string | null | undefined>(undefined),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The URL configuration for a table field. */
	export interface TableFieldURLConfiguration {
		LinkConfiguration?: TableFieldLinkConfiguration;
		ImageConfiguration?: TableFieldImageConfiguration;
	}

	/** The URL configuration for a table field. */
	export interface TableFieldURLConfigurationFormProperties {
	}
	export function CreateTableFieldURLConfigurationFormGroup() {
		return new FormGroup<TableFieldURLConfigurationFormProperties>({
		});

	}


	/** The link configuration of a table field URL. */
	export interface TableFieldLinkConfiguration {

		/** Required */
		Target: URLTargetConfiguration;

		/** Required */
		Content: TableFieldLinkContentConfiguration;
	}

	/** The link configuration of a table field URL. */
	export interface TableFieldLinkConfigurationFormProperties {

		/** Required */
		Target: FormControl<URLTargetConfiguration | null | undefined>,
	}
	export function CreateTableFieldLinkConfigurationFormGroup() {
		return new FormGroup<TableFieldLinkConfigurationFormProperties>({
			Target: new FormControl<URLTargetConfiguration | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum URLTargetConfiguration { NEW_TAB = 0, NEW_WINDOW = 1, SAME_TAB = 2 }


	/** The URL content (text, icon) for the table link configuration. */
	export interface TableFieldLinkContentConfiguration {
		CustomTextContent?: TableFieldCustomTextContent;
		CustomIconContent?: TableFieldCustomIconContent;
	}

	/** The URL content (text, icon) for the table link configuration. */
	export interface TableFieldLinkContentConfigurationFormProperties {
	}
	export function CreateTableFieldLinkContentConfigurationFormGroup() {
		return new FormGroup<TableFieldLinkContentConfigurationFormProperties>({
		});

	}


	/** The custom text content (value, font configuration) for the table link content configuration. */
	export interface TableFieldCustomTextContent {
		Value?: string;

		/** Required */
		FontConfiguration: FontConfiguration;
	}

	/** The custom text content (value, font configuration) for the table link content configuration. */
	export interface TableFieldCustomTextContentFormProperties {
		Value: FormControl<string | null | undefined>,
	}
	export function CreateTableFieldCustomTextContentFormGroup() {
		return new FormGroup<TableFieldCustomTextContentFormProperties>({
			Value: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The custom icon content for the table link content configuration. */
	export interface TableFieldCustomIconContent {
		Icon?: TableFieldIconSetType;
	}

	/** The custom icon content for the table link content configuration. */
	export interface TableFieldCustomIconContentFormProperties {
		Icon: FormControl<TableFieldIconSetType | null | undefined>,
	}
	export function CreateTableFieldCustomIconContentFormGroup() {
		return new FormGroup<TableFieldCustomIconContentFormProperties>({
			Icon: new FormControl<TableFieldIconSetType | null | undefined>(undefined),
		});

	}

	export enum TableFieldIconSetType { LINK = 0 }


	/** The image configuration of a table field URL. */
	export interface TableFieldImageConfiguration {
		SizingOptions?: TableCellImageSizingConfiguration;
	}

	/** The image configuration of a table field URL. */
	export interface TableFieldImageConfigurationFormProperties {
	}
	export function CreateTableFieldImageConfigurationFormGroup() {
		return new FormGroup<TableFieldImageConfigurationFormProperties>({
		});

	}


	/** The sizing options for the table image configuration. */
	export interface TableCellImageSizingConfiguration {
		TableCellImageScalingConfiguration?: TableCellImageScalingConfiguration;
	}

	/** The sizing options for the table image configuration. */
	export interface TableCellImageSizingConfigurationFormProperties {
		TableCellImageScalingConfiguration: FormControl<TableCellImageScalingConfiguration | null | undefined>,
	}
	export function CreateTableCellImageSizingConfigurationFormGroup() {
		return new FormGroup<TableCellImageSizingConfigurationFormProperties>({
			TableCellImageScalingConfiguration: new FormControl<TableCellImageScalingConfiguration | null | undefined>(undefined),
		});

	}

	export enum TableCellImageScalingConfiguration { FIT_TO_CELL_HEIGHT = 0, FIT_TO_CELL_WIDTH = 1, DO_NOT_SCALE = 2 }


	/** The paginated report options for a table visual. */
	export interface TablePaginatedReportOptions {
		VerticalOverflowVisibility?: Visibility;
		OverflowColumnHeaderVisibility?: Visibility;
	}

	/** The paginated report options for a table visual. */
	export interface TablePaginatedReportOptionsFormProperties {
		VerticalOverflowVisibility: FormControl<Visibility | null | undefined>,
		OverflowColumnHeaderVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateTablePaginatedReportOptionsFormGroup() {
		return new FormGroup<TablePaginatedReportOptionsFormProperties>({
			VerticalOverflowVisibility: new FormControl<Visibility | null | undefined>(undefined),
			OverflowColumnHeaderVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The inline visualization of a specific type to display within a chart. */
	export interface TableInlineVisualization {
		DataBars?: DataBarsOptions;
	}

	/** The inline visualization of a specific type to display within a chart. */
	export interface TableInlineVisualizationFormProperties {
	}
	export function CreateTableInlineVisualizationFormGroup() {
		return new FormGroup<TableInlineVisualizationFormProperties>({
		});

	}


	/** The options for data bars. */
	export interface DataBarsOptions {

		/** Required */
		FieldId: string;
		PositiveColor?: string;
		NegativeColor?: string;
	}

	/** The options for data bars. */
	export interface DataBarsOptionsFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		PositiveColor: FormControl<string | null | undefined>,
		NegativeColor: FormControl<string | null | undefined>,
	}
	export function CreateDataBarsOptionsFormGroup() {
		return new FormGroup<DataBarsOptionsFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PositiveColor: new FormControl<string | null | undefined>(undefined),
			NegativeColor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The conditional formatting for a <code>PivotTableVisual</code>. */
	export interface TableConditionalFormatting {
		ConditionalFormattingOptions?: Array<TableConditionalFormattingOption>;
	}

	/** The conditional formatting for a <code>PivotTableVisual</code>. */
	export interface TableConditionalFormattingFormProperties {
	}
	export function CreateTableConditionalFormattingFormGroup() {
		return new FormGroup<TableConditionalFormattingFormProperties>({
		});

	}


	/** Conditional formatting options for a <code>PivotTableVisual</code>. */
	export interface TableConditionalFormattingOption {
		Cell?: TableCellConditionalFormatting;
		Row?: TableRowConditionalFormatting;
	}

	/** Conditional formatting options for a <code>PivotTableVisual</code>. */
	export interface TableConditionalFormattingOptionFormProperties {
	}
	export function CreateTableConditionalFormattingOptionFormGroup() {
		return new FormGroup<TableConditionalFormattingOptionFormProperties>({
		});

	}


	/** The cell conditional formatting option for a table. */
	export interface TableCellConditionalFormatting {

		/** Required */
		FieldId: string;
		TextFormat?: TextConditionalFormat;
	}

	/** The cell conditional formatting option for a table. */
	export interface TableCellConditionalFormattingFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreateTableCellConditionalFormattingFormGroup() {
		return new FormGroup<TableCellConditionalFormattingFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The conditional formatting for the text. */
	export interface TextConditionalFormat {
		BackgroundColor?: ConditionalFormattingColor;
		TextColor?: ConditionalFormattingColor;
		Icon?: ConditionalFormattingIcon;
	}

	/** The conditional formatting for the text. */
	export interface TextConditionalFormatFormProperties {
	}
	export function CreateTextConditionalFormatFormGroup() {
		return new FormGroup<TextConditionalFormatFormProperties>({
		});

	}


	/** The formatting configuration for the color. */
	export interface ConditionalFormattingColor {
		Solid?: ConditionalFormattingSolidColor;
		Gradient?: ConditionalFormattingGradientColor;
	}

	/** The formatting configuration for the color. */
	export interface ConditionalFormattingColorFormProperties {
	}
	export function CreateConditionalFormattingColorFormGroup() {
		return new FormGroup<ConditionalFormattingColorFormProperties>({
		});

	}


	/** Formatting configuration for solid color. */
	export interface ConditionalFormattingSolidColor {

		/** Required */
		Expression: string;
		Color?: string;
	}

	/** Formatting configuration for solid color. */
	export interface ConditionalFormattingSolidColorFormProperties {

		/** Required */
		Expression: FormControl<string | null | undefined>,
		Color: FormControl<string | null | undefined>,
	}
	export function CreateConditionalFormattingSolidColorFormGroup() {
		return new FormGroup<ConditionalFormattingSolidColorFormProperties>({
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Color: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Formatting configuration for gradient color. */
	export interface ConditionalFormattingGradientColor {

		/** Required */
		Expression: string;

		/** Required */
		Color: GradientColor;
	}

	/** Formatting configuration for gradient color. */
	export interface ConditionalFormattingGradientColorFormProperties {

		/** Required */
		Expression: FormControl<string | null | undefined>,
	}
	export function CreateConditionalFormattingGradientColorFormGroup() {
		return new FormGroup<ConditionalFormattingGradientColorFormProperties>({
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Determines the gradient color settings. */
	export interface GradientColor {
		Stops?: Array<GradientStop>;
	}

	/** Determines the gradient color settings. */
	export interface GradientColorFormProperties {
	}
	export function CreateGradientColorFormGroup() {
		return new FormGroup<GradientColorFormProperties>({
		});

	}


	/** Determines the gradient stop configuration. */
	export interface GradientStop {

		/** Required */
		GradientOffset: number;
		DataValue?: number | null;
		Color?: string;
	}

	/** Determines the gradient stop configuration. */
	export interface GradientStopFormProperties {

		/** Required */
		GradientOffset: FormControl<number | null | undefined>,
		DataValue: FormControl<number | null | undefined>,
		Color: FormControl<string | null | undefined>,
	}
	export function CreateGradientStopFormGroup() {
		return new FormGroup<GradientStopFormProperties>({
			GradientOffset: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			DataValue: new FormControl<number | null | undefined>(undefined),
			Color: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The formatting configuration for the icon. */
	export interface ConditionalFormattingIcon {
		IconSet?: ConditionalFormattingIconSet;
		CustomCondition?: ConditionalFormattingCustomIconCondition;
	}

	/** The formatting configuration for the icon. */
	export interface ConditionalFormattingIconFormProperties {
	}
	export function CreateConditionalFormattingIconFormGroup() {
		return new FormGroup<ConditionalFormattingIconFormProperties>({
		});

	}


	/** Formatting configuration for icon set. */
	export interface ConditionalFormattingIconSet {

		/** Required */
		Expression: string;
		IconSetType?: ConditionalFormattingIconSetType;
	}

	/** Formatting configuration for icon set. */
	export interface ConditionalFormattingIconSetFormProperties {

		/** Required */
		Expression: FormControl<string | null | undefined>,
		IconSetType: FormControl<ConditionalFormattingIconSetType | null | undefined>,
	}
	export function CreateConditionalFormattingIconSetFormGroup() {
		return new FormGroup<ConditionalFormattingIconSetFormProperties>({
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IconSetType: new FormControl<ConditionalFormattingIconSetType | null | undefined>(undefined),
		});

	}

	export enum ConditionalFormattingIconSetType { PLUS_MINUS = 0, CHECK_X = 1, THREE_COLOR_ARROW = 2, THREE_GRAY_ARROW = 3, CARET_UP_MINUS_DOWN = 4, THREE_SHAPE = 5, THREE_CIRCLE = 6, FLAGS = 7, BARS = 8, FOUR_COLOR_ARROW = 9, FOUR_GRAY_ARROW = 10 }


	/** Determines the custom condition for an icon set. */
	export interface ConditionalFormattingCustomIconCondition {

		/** Required */
		Expression: string;

		/** Required */
		IconOptions: ConditionalFormattingCustomIconOptions;
		Color?: string;
		DisplayConfiguration?: ConditionalFormattingIconDisplayConfiguration;
	}

	/** Determines the custom condition for an icon set. */
	export interface ConditionalFormattingCustomIconConditionFormProperties {

		/** Required */
		Expression: FormControl<string | null | undefined>,
		Color: FormControl<string | null | undefined>,
	}
	export function CreateConditionalFormattingCustomIconConditionFormGroup() {
		return new FormGroup<ConditionalFormattingCustomIconConditionFormProperties>({
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Color: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Custom icon options for an icon set. */
	export interface ConditionalFormattingCustomIconOptions {
		Icon?: Icon;
		UnicodeIcon?: string;
	}

	/** Custom icon options for an icon set. */
	export interface ConditionalFormattingCustomIconOptionsFormProperties {
		Icon: FormControl<Icon | null | undefined>,
		UnicodeIcon: FormControl<string | null | undefined>,
	}
	export function CreateConditionalFormattingCustomIconOptionsFormGroup() {
		return new FormGroup<ConditionalFormattingCustomIconOptionsFormProperties>({
			Icon: new FormControl<Icon | null | undefined>(undefined),
			UnicodeIcon: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum Icon { CARET_UP = 0, CARET_DOWN = 1, PLUS = 2, MINUS = 3, ARROW_UP = 4, ARROW_DOWN = 5, ARROW_LEFT = 6, ARROW_UP_LEFT = 7, ARROW_DOWN_LEFT = 8, ARROW_RIGHT = 9, ARROW_UP_RIGHT = 10, ARROW_DOWN_RIGHT = 11, FACE_UP = 12, FACE_DOWN = 13, FACE_FLAT = 14, ONE_BAR = 15, TWO_BAR = 16, THREE_BAR = 17, CIRCLE = 18, TRIANGLE = 19, SQUARE = 20, FLAG = 21, THUMBS_UP = 22, THUMBS_DOWN = 23, CHECKMARK = 24, X = 25 }


	/** Determines the icon display configuration. */
	export interface ConditionalFormattingIconDisplayConfiguration {
		IconDisplayOption?: ConditionalFormattingIconDisplayOption;
	}

	/** Determines the icon display configuration. */
	export interface ConditionalFormattingIconDisplayConfigurationFormProperties {
		IconDisplayOption: FormControl<ConditionalFormattingIconDisplayOption | null | undefined>,
	}
	export function CreateConditionalFormattingIconDisplayConfigurationFormGroup() {
		return new FormGroup<ConditionalFormattingIconDisplayConfigurationFormProperties>({
			IconDisplayOption: new FormControl<ConditionalFormattingIconDisplayOption | null | undefined>(undefined),
		});

	}

	export enum ConditionalFormattingIconDisplayOption { ICON_ONLY = 0 }


	/** The conditional formatting of a table row. */
	export interface TableRowConditionalFormatting {
		BackgroundColor?: ConditionalFormattingColor;
		TextColor?: ConditionalFormattingColor;
	}

	/** The conditional formatting of a table row. */
	export interface TableRowConditionalFormattingFormProperties {
	}
	export function CreateTableRowConditionalFormattingFormGroup() {
		return new FormGroup<TableRowConditionalFormattingFormProperties>({
		});

	}


	/** A custom action defined on a visual. */
	export interface VisualCustomAction {

		/** Required */
		CustomActionId: string;

		/** Required */
		Name: string;
		Status?: WidgetStatus;

		/** Required */
		Trigger: VisualCustomActionTrigger;

		/** Required */
		ActionOperations: Array<VisualCustomActionOperation>;
	}

	/** A custom action defined on a visual. */
	export interface VisualCustomActionFormProperties {

		/** Required */
		CustomActionId: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,
		Status: FormControl<WidgetStatus | null | undefined>,

		/** Required */
		Trigger: FormControl<VisualCustomActionTrigger | null | undefined>,
	}
	export function CreateVisualCustomActionFormGroup() {
		return new FormGroup<VisualCustomActionFormProperties>({
			CustomActionId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
			Trigger: new FormControl<VisualCustomActionTrigger | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum VisualCustomActionTrigger { DATA_POINT_CLICK = 0, DATA_POINT_MENU = 1 }


	/** <p>The operation that is defined by the custom action.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface VisualCustomActionOperation {
		FilterOperation?: CustomActionFilterOperation;
		NavigationOperation?: CustomActionNavigationOperation;
		URLOperation?: CustomActionURLOperation;
		SetParametersOperation?: CustomActionSetParametersOperation;
	}

	/** <p>The operation that is defined by the custom action.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface VisualCustomActionOperationFormProperties {
	}
	export function CreateVisualCustomActionOperationFormGroup() {
		return new FormGroup<VisualCustomActionOperationFormProperties>({
		});

	}


	/** The filter operation that filters data included in a visual or in an entire sheet. */
	export interface CustomActionFilterOperation {

		/** Required */
		SelectedFieldsConfiguration: FilterOperationSelectedFieldsConfiguration;

		/** Required */
		TargetVisualsConfiguration: FilterOperationTargetVisualsConfiguration;
	}

	/** The filter operation that filters data included in a visual or in an entire sheet. */
	export interface CustomActionFilterOperationFormProperties {
	}
	export function CreateCustomActionFilterOperationFormGroup() {
		return new FormGroup<CustomActionFilterOperationFormProperties>({
		});

	}


	/** <p>The configuration of selected fields in the<code>CustomActionFilterOperation</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterOperationSelectedFieldsConfiguration {
		SelectedFields?: Array<string>;
		SelectedFieldOptions?: SelectedFieldOptions;
		SelectedColumns?: Array<ColumnIdentifier>;
	}

	/** <p>The configuration of selected fields in the<code>CustomActionFilterOperation</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterOperationSelectedFieldsConfigurationFormProperties {
		SelectedFieldOptions: FormControl<SelectedFieldOptions | null | undefined>,
	}
	export function CreateFilterOperationSelectedFieldsConfigurationFormGroup() {
		return new FormGroup<FilterOperationSelectedFieldsConfigurationFormProperties>({
			SelectedFieldOptions: new FormControl<SelectedFieldOptions | null | undefined>(undefined),
		});

	}

	export enum SelectedFieldOptions { ALL_FIELDS = 0 }


	/** <p>The configuration of target visuals that you want to be filtered.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterOperationTargetVisualsConfiguration {
		SameSheetTargetVisualConfiguration?: SameSheetTargetVisualConfiguration;
	}

	/** <p>The configuration of target visuals that you want to be filtered.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterOperationTargetVisualsConfigurationFormProperties {
	}
	export function CreateFilterOperationTargetVisualsConfigurationFormGroup() {
		return new FormGroup<FilterOperationTargetVisualsConfigurationFormProperties>({
		});

	}


	/** <p>The configuration of the same-sheet target visuals that you want to be filtered.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface SameSheetTargetVisualConfiguration {
		TargetVisuals?: Array<string>;
		TargetVisualOptions?: TargetVisualOptions;
	}

	/** <p>The configuration of the same-sheet target visuals that you want to be filtered.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface SameSheetTargetVisualConfigurationFormProperties {
		TargetVisualOptions: FormControl<TargetVisualOptions | null | undefined>,
	}
	export function CreateSameSheetTargetVisualConfigurationFormGroup() {
		return new FormGroup<SameSheetTargetVisualConfigurationFormProperties>({
			TargetVisualOptions: new FormControl<TargetVisualOptions | null | undefined>(undefined),
		});

	}

	export enum TargetVisualOptions { ALL_VISUALS = 0 }


	/** <p>The navigation operation that navigates between different sheets in the same analysis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface CustomActionNavigationOperation {
		LocalNavigationConfiguration?: LocalNavigationConfiguration;
	}

	/** <p>The navigation operation that navigates between different sheets in the same analysis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface CustomActionNavigationOperationFormProperties {
	}
	export function CreateCustomActionNavigationOperationFormGroup() {
		return new FormGroup<CustomActionNavigationOperationFormProperties>({
		});

	}


	/** The navigation configuration for <code>CustomActionNavigationOperation</code>. */
	export interface LocalNavigationConfiguration {

		/** Required */
		TargetSheetId: string;
	}

	/** The navigation configuration for <code>CustomActionNavigationOperation</code>. */
	export interface LocalNavigationConfigurationFormProperties {

		/** Required */
		TargetSheetId: FormControl<string | null | undefined>,
	}
	export function CreateLocalNavigationConfigurationFormGroup() {
		return new FormGroup<LocalNavigationConfigurationFormProperties>({
			TargetSheetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The URL operation that opens a link to another webpage. */
	export interface CustomActionURLOperation {

		/** Required */
		URLTemplate: string;

		/** Required */
		URLTarget: URLTargetConfiguration;
	}

	/** The URL operation that opens a link to another webpage. */
	export interface CustomActionURLOperationFormProperties {

		/** Required */
		URLTemplate: FormControl<string | null | undefined>,

		/** Required */
		URLTarget: FormControl<URLTargetConfiguration | null | undefined>,
	}
	export function CreateCustomActionURLOperationFormGroup() {
		return new FormGroup<CustomActionURLOperationFormProperties>({
			URLTemplate: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			URLTarget: new FormControl<URLTargetConfiguration | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The set parameter operation that sets parameters in custom action. */
	export interface CustomActionSetParametersOperation {

		/** Required */
		ParameterValueConfigurations: Array<SetParameterValueConfiguration>;
	}

	/** The set parameter operation that sets parameters in custom action. */
	export interface CustomActionSetParametersOperationFormProperties {
	}
	export function CreateCustomActionSetParametersOperationFormGroup() {
		return new FormGroup<CustomActionSetParametersOperationFormProperties>({
		});

	}


	/** The configuration of adding parameters in action. */
	export interface SetParameterValueConfiguration {

		/** Required */
		DestinationParameterName: string;

		/**
		 * <p>The configuration of destination parameter values.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
		 * Required
		 */
		Value: DestinationParameterValueConfiguration;
	}

	/** The configuration of adding parameters in action. */
	export interface SetParameterValueConfigurationFormProperties {

		/** Required */
		DestinationParameterName: FormControl<string | null | undefined>,
	}
	export function CreateSetParameterValueConfigurationFormGroup() {
		return new FormGroup<SetParameterValueConfigurationFormProperties>({
			DestinationParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The configuration of destination parameter values.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface DestinationParameterValueConfiguration {
		CustomValuesConfiguration?: CustomValuesConfiguration;
		SelectAllValueOptions?: SelectAllValueOptions;
		SourceParameterName?: string;
		SourceField?: string;

		/** A column of a data set. */
		SourceColumn?: ColumnIdentifier;
	}

	/** <p>The configuration of destination parameter values.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface DestinationParameterValueConfigurationFormProperties {
		SelectAllValueOptions: FormControl<SelectAllValueOptions | null | undefined>,
		SourceParameterName: FormControl<string | null | undefined>,
		SourceField: FormControl<string | null | undefined>,
	}
	export function CreateDestinationParameterValueConfigurationFormGroup() {
		return new FormGroup<DestinationParameterValueConfigurationFormProperties>({
			SelectAllValueOptions: new FormControl<SelectAllValueOptions | null | undefined>(undefined),
			SourceParameterName: new FormControl<string | null | undefined>(undefined),
			SourceField: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration of custom values for the destination parameter in <code>DestinationParameterValueConfiguration</code>. */
	export interface CustomValuesConfiguration {
		IncludeNullValue?: boolean | null;

		/**
		 * <p>The customized parameter values.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p>
		 * Required
		 */
		CustomValues: CustomParameterValues;
	}

	/** The configuration of custom values for the destination parameter in <code>DestinationParameterValueConfiguration</code>. */
	export interface CustomValuesConfigurationFormProperties {
		IncludeNullValue: FormControl<boolean | null | undefined>,
	}
	export function CreateCustomValuesConfigurationFormGroup() {
		return new FormGroup<CustomValuesConfigurationFormProperties>({
			IncludeNullValue: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** <p>The customized parameter values.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface CustomParameterValues {
		StringValues?: Array<string>;
		IntegerValues?: Array<number> | null;
		DecimalValues?: Array<number> | null;
		DateTimeValues?: Array<string>;
	}

	/** <p>The customized parameter values.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface CustomParameterValuesFormProperties {
	}
	export function CreateCustomParameterValuesFormGroup() {
		return new FormGroup<CustomParameterValuesFormProperties>({
		});

	}

	export enum SelectAllValueOptions { ALL_VALUES = 0 }


	/** <p>A pivot table.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html">Using pivot tables</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface PivotTableVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: PivotTableConfiguration;
		ConditionalFormatting?: PivotTableConditionalFormatting;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A pivot table.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html">Using pivot tables</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface PivotTableVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreatePivotTableVisualFormGroup() {
		return new FormGroup<PivotTableVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for a <code>PivotTableVisual</code>. */
	export interface PivotTableConfiguration {
		FieldWells?: PivotTableFieldWells;
		SortConfiguration?: PivotTableSortConfiguration;
		TableOptions?: PivotTableOptions;
		TotalOptions?: PivotTableTotalOptions;
		FieldOptions?: PivotTableFieldOptions;
		PaginatedReportOptions?: PivotTablePaginatedReportOptions;
	}

	/** The configuration for a <code>PivotTableVisual</code>. */
	export interface PivotTableConfigurationFormProperties {
	}
	export function CreatePivotTableConfigurationFormGroup() {
		return new FormGroup<PivotTableConfigurationFormProperties>({
		});

	}


	/** <p>The field wells for a pivot table visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface PivotTableFieldWells {
		PivotTableAggregatedFieldWells?: PivotTableAggregatedFieldWells;
	}

	/** <p>The field wells for a pivot table visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface PivotTableFieldWellsFormProperties {
	}
	export function CreatePivotTableFieldWellsFormGroup() {
		return new FormGroup<PivotTableFieldWellsFormProperties>({
		});

	}


	/** The aggregated field well for the pivot table. */
	export interface PivotTableAggregatedFieldWells {
		Rows?: Array<DimensionField>;
		Columns?: Array<DimensionField>;
		Values?: Array<MeasureField>;
	}

	/** The aggregated field well for the pivot table. */
	export interface PivotTableAggregatedFieldWellsFormProperties {
	}
	export function CreatePivotTableAggregatedFieldWellsFormGroup() {
		return new FormGroup<PivotTableAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration for a <code>PivotTableVisual</code>. */
	export interface PivotTableSortConfiguration {
		FieldSortOptions?: Array<PivotFieldSortOptions>;
	}

	/** The sort configuration for a <code>PivotTableVisual</code>. */
	export interface PivotTableSortConfigurationFormProperties {
	}
	export function CreatePivotTableSortConfigurationFormGroup() {
		return new FormGroup<PivotTableSortConfigurationFormProperties>({
		});

	}


	/** The field sort options for a pivot table sort configuration. */
	export interface PivotFieldSortOptions {

		/** Required */
		FieldId: string;

		/** Required */
		SortBy: PivotTableSortBy;
	}

	/** The field sort options for a pivot table sort configuration. */
	export interface PivotFieldSortOptionsFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreatePivotFieldSortOptionsFormGroup() {
		return new FormGroup<PivotFieldSortOptionsFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The sort by field for the field sort options. */
	export interface PivotTableSortBy {
		Field?: FieldSort;
		Column?: ColumnSort;
		DataPath?: DataPathSort;
	}

	/** The sort by field for the field sort options. */
	export interface PivotTableSortByFormProperties {
	}
	export function CreatePivotTableSortByFormGroup() {
		return new FormGroup<PivotTableSortByFormProperties>({
		});

	}


	/** Allows data paths to be sorted by a specific data value. */
	export interface DataPathSort {

		/** Required */
		Direction: SortDirection;

		/** Required */
		SortPaths: Array<DataPathValue>;
	}

	/** Allows data paths to be sorted by a specific data value. */
	export interface DataPathSortFormProperties {

		/** Required */
		Direction: FormControl<SortDirection | null | undefined>,
	}
	export function CreateDataPathSortFormGroup() {
		return new FormGroup<DataPathSortFormProperties>({
			Direction: new FormControl<SortDirection | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The data path that needs to be sorted. */
	export interface DataPathValue {

		/** Required */
		FieldId: string;

		/** Required */
		FieldValue: string;
	}

	/** The data path that needs to be sorted. */
	export interface DataPathValueFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,

		/** Required */
		FieldValue: FormControl<string | null | undefined>,
	}
	export function CreateDataPathValueFormGroup() {
		return new FormGroup<DataPathValueFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FieldValue: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The table options for a pivot table visual. */
	export interface PivotTableOptions {
		MetricPlacement?: PivotTableMetricPlacement;
		SingleMetricVisibility?: Visibility;
		ColumnNamesVisibility?: Visibility;
		ToggleButtonsVisibility?: Visibility;
		ColumnHeaderStyle?: TableCellStyle;
		RowHeaderStyle?: TableCellStyle;
		CellStyle?: TableCellStyle;
		RowFieldNamesStyle?: TableCellStyle;
		RowAlternateColorOptions?: RowAlternateColorOptions;
		CollapsedRowDimensionsVisibility?: Visibility;
	}

	/** The table options for a pivot table visual. */
	export interface PivotTableOptionsFormProperties {
		MetricPlacement: FormControl<PivotTableMetricPlacement | null | undefined>,
		SingleMetricVisibility: FormControl<Visibility | null | undefined>,
		ColumnNamesVisibility: FormControl<Visibility | null | undefined>,
		ToggleButtonsVisibility: FormControl<Visibility | null | undefined>,
		CollapsedRowDimensionsVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreatePivotTableOptionsFormGroup() {
		return new FormGroup<PivotTableOptionsFormProperties>({
			MetricPlacement: new FormControl<PivotTableMetricPlacement | null | undefined>(undefined),
			SingleMetricVisibility: new FormControl<Visibility | null | undefined>(undefined),
			ColumnNamesVisibility: new FormControl<Visibility | null | undefined>(undefined),
			ToggleButtonsVisibility: new FormControl<Visibility | null | undefined>(undefined),
			CollapsedRowDimensionsVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}

	export enum PivotTableMetricPlacement { ROW = 0, COLUMN = 1 }


	/** The total options for a pivot table visual. */
	export interface PivotTableTotalOptions {
		RowSubtotalOptions?: SubtotalOptions;
		ColumnSubtotalOptions?: SubtotalOptions;
		RowTotalOptions?: PivotTotalOptions;
		ColumnTotalOptions?: PivotTotalOptions;
	}

	/** The total options for a pivot table visual. */
	export interface PivotTableTotalOptionsFormProperties {
	}
	export function CreatePivotTableTotalOptionsFormGroup() {
		return new FormGroup<PivotTableTotalOptionsFormProperties>({
		});

	}


	/** The subtotal options. */
	export interface SubtotalOptions {
		TotalsVisibility?: Visibility;
		CustomLabel?: string;
		FieldLevel?: PivotTableSubtotalLevel;
		FieldLevelOptions?: Array<PivotTableFieldSubtotalOptions>;
		TotalCellStyle?: TableCellStyle;
		ValueCellStyle?: TableCellStyle;
		MetricHeaderCellStyle?: TableCellStyle;
	}

	/** The subtotal options. */
	export interface SubtotalOptionsFormProperties {
		TotalsVisibility: FormControl<Visibility | null | undefined>,
		CustomLabel: FormControl<string | null | undefined>,
		FieldLevel: FormControl<PivotTableSubtotalLevel | null | undefined>,
	}
	export function CreateSubtotalOptionsFormGroup() {
		return new FormGroup<SubtotalOptionsFormProperties>({
			TotalsVisibility: new FormControl<Visibility | null | undefined>(undefined),
			CustomLabel: new FormControl<string | null | undefined>(undefined),
			FieldLevel: new FormControl<PivotTableSubtotalLevel | null | undefined>(undefined),
		});

	}

	export enum PivotTableSubtotalLevel { ALL = 0, CUSTOM = 1, LAST = 2 }


	/** The optional configuration of subtotals cells. */
	export interface PivotTableFieldSubtotalOptions {
		FieldId?: string;
	}

	/** The optional configuration of subtotals cells. */
	export interface PivotTableFieldSubtotalOptionsFormProperties {
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreatePivotTableFieldSubtotalOptionsFormGroup() {
		return new FormGroup<PivotTableFieldSubtotalOptionsFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The optional configuration of totals cells in a <code>PivotTableVisual</code>. */
	export interface PivotTotalOptions {
		TotalsVisibility?: Visibility;
		Placement?: TableTotalsPlacement;
		ScrollStatus?: TableTotalsScrollStatus;
		CustomLabel?: string;
		TotalCellStyle?: TableCellStyle;
		ValueCellStyle?: TableCellStyle;
		MetricHeaderCellStyle?: TableCellStyle;
	}

	/** The optional configuration of totals cells in a <code>PivotTableVisual</code>. */
	export interface PivotTotalOptionsFormProperties {
		TotalsVisibility: FormControl<Visibility | null | undefined>,
		Placement: FormControl<TableTotalsPlacement | null | undefined>,
		ScrollStatus: FormControl<TableTotalsScrollStatus | null | undefined>,
		CustomLabel: FormControl<string | null | undefined>,
	}
	export function CreatePivotTotalOptionsFormGroup() {
		return new FormGroup<PivotTotalOptionsFormProperties>({
			TotalsVisibility: new FormControl<Visibility | null | undefined>(undefined),
			Placement: new FormControl<TableTotalsPlacement | null | undefined>(undefined),
			ScrollStatus: new FormControl<TableTotalsScrollStatus | null | undefined>(undefined),
			CustomLabel: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The field options for a pivot table visual. */
	export interface PivotTableFieldOptions {
		SelectedFieldOptions?: Array<PivotTableFieldOption>;
		DataPathOptions?: Array<PivotTableDataPathOption>;
		CollapseStateOptions?: Array<PivotTableFieldCollapseStateOption>;
	}

	/** The field options for a pivot table visual. */
	export interface PivotTableFieldOptionsFormProperties {
	}
	export function CreatePivotTableFieldOptionsFormGroup() {
		return new FormGroup<PivotTableFieldOptionsFormProperties>({
		});

	}


	/** The selected field options for the pivot table field options. */
	export interface PivotTableFieldOption {

		/** Required */
		FieldId: string;
		CustomLabel?: string;
		Visibility?: Visibility;
	}

	/** The selected field options for the pivot table field options. */
	export interface PivotTableFieldOptionFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		CustomLabel: FormControl<string | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreatePivotTableFieldOptionFormGroup() {
		return new FormGroup<PivotTableFieldOptionFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CustomLabel: new FormControl<string | null | undefined>(undefined),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The data path options for the pivot table field options. */
	export interface PivotTableDataPathOption {

		/** Required */
		DataPathList: Array<DataPathValue>;
		Width?: string;
	}

	/** The data path options for the pivot table field options. */
	export interface PivotTableDataPathOptionFormProperties {
		Width: FormControl<string | null | undefined>,
	}
	export function CreatePivotTableDataPathOptionFormGroup() {
		return new FormGroup<PivotTableDataPathOptionFormProperties>({
			Width: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The collapse state options for the pivot table field options. */
	export interface PivotTableFieldCollapseStateOption {

		/** Required */
		Target: PivotTableFieldCollapseStateTarget;
		State?: PivotTableFieldCollapseState;
	}

	/** The collapse state options for the pivot table field options. */
	export interface PivotTableFieldCollapseStateOptionFormProperties {
		State: FormControl<PivotTableFieldCollapseState | null | undefined>,
	}
	export function CreatePivotTableFieldCollapseStateOptionFormGroup() {
		return new FormGroup<PivotTableFieldCollapseStateOptionFormProperties>({
			State: new FormControl<PivotTableFieldCollapseState | null | undefined>(undefined),
		});

	}


	/** The target of a pivot table field collapse state. */
	export interface PivotTableFieldCollapseStateTarget {
		FieldId?: string;
		FieldDataPathValues?: Array<DataPathValue>;
	}

	/** The target of a pivot table field collapse state. */
	export interface PivotTableFieldCollapseStateTargetFormProperties {
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreatePivotTableFieldCollapseStateTargetFormGroup() {
		return new FormGroup<PivotTableFieldCollapseStateTargetFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum PivotTableFieldCollapseState { COLLAPSED = 0, EXPANDED = 1 }


	/** The paginated report options for a pivot table visual. */
	export interface PivotTablePaginatedReportOptions {
		VerticalOverflowVisibility?: Visibility;
		OverflowColumnHeaderVisibility?: Visibility;
	}

	/** The paginated report options for a pivot table visual. */
	export interface PivotTablePaginatedReportOptionsFormProperties {
		VerticalOverflowVisibility: FormControl<Visibility | null | undefined>,
		OverflowColumnHeaderVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreatePivotTablePaginatedReportOptionsFormGroup() {
		return new FormGroup<PivotTablePaginatedReportOptionsFormProperties>({
			VerticalOverflowVisibility: new FormControl<Visibility | null | undefined>(undefined),
			OverflowColumnHeaderVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The conditional formatting for a <code>PivotTableVisual</code>. */
	export interface PivotTableConditionalFormatting {
		ConditionalFormattingOptions?: Array<PivotTableConditionalFormattingOption>;
	}

	/** The conditional formatting for a <code>PivotTableVisual</code>. */
	export interface PivotTableConditionalFormattingFormProperties {
	}
	export function CreatePivotTableConditionalFormattingFormGroup() {
		return new FormGroup<PivotTableConditionalFormattingFormProperties>({
		});

	}


	/** Conditional formatting options for a <code>PivotTableVisual</code>. */
	export interface PivotTableConditionalFormattingOption {
		Cell?: PivotTableCellConditionalFormatting;
	}

	/** Conditional formatting options for a <code>PivotTableVisual</code>. */
	export interface PivotTableConditionalFormattingOptionFormProperties {
	}
	export function CreatePivotTableConditionalFormattingOptionFormGroup() {
		return new FormGroup<PivotTableConditionalFormattingOptionFormProperties>({
		});

	}


	/** The cell conditional formatting option for a pivot table. */
	export interface PivotTableCellConditionalFormatting {

		/** Required */
		FieldId: string;
		TextFormat?: TextConditionalFormat;
		Scope?: PivotTableConditionalFormattingScope;
		Scopes?: Array<PivotTableConditionalFormattingScope>;
	}

	/** The cell conditional formatting option for a pivot table. */
	export interface PivotTableCellConditionalFormattingFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreatePivotTableCellConditionalFormattingFormGroup() {
		return new FormGroup<PivotTableCellConditionalFormattingFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The scope of the cell for conditional formatting. */
	export interface PivotTableConditionalFormattingScope {
		Role?: PivotTableConditionalFormattingScopeRole;
	}

	/** The scope of the cell for conditional formatting. */
	export interface PivotTableConditionalFormattingScopeFormProperties {
		Role: FormControl<PivotTableConditionalFormattingScopeRole | null | undefined>,
	}
	export function CreatePivotTableConditionalFormattingScopeFormGroup() {
		return new FormGroup<PivotTableConditionalFormattingScopeFormProperties>({
			Role: new FormControl<PivotTableConditionalFormattingScopeRole | null | undefined>(undefined),
		});

	}

	export enum PivotTableConditionalFormattingScopeRole { FIELD = 0, FIELD_TOTAL = 1, GRAND_TOTAL = 2 }


	/** <p>A bar chart.</p> <p>The <code>BarChartVisual</code> structure describes a visual that is a member of the bar chart family. The following charts can be described using this structure:</p> <ul> <li> <p>Horizontal bar chart</p> </li> <li> <p>Vertical bar chart</p> </li> <li> <p>Horizontal stacked bar chart</p> </li> <li> <p>Vertical stacked bar chart</p> </li> <li> <p>Horizontal stacked 100% bar chart</p> </li> <li> <p>Vertical stacked 100% bar chart</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html">Using bar charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface BarChartVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: BarChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A bar chart.</p> <p>The <code>BarChartVisual</code> structure describes a visual that is a member of the bar chart family. The following charts can be described using this structure:</p> <ul> <li> <p>Horizontal bar chart</p> </li> <li> <p>Vertical bar chart</p> </li> <li> <p>Horizontal stacked bar chart</p> </li> <li> <p>Vertical stacked bar chart</p> </li> <li> <p>Horizontal stacked 100% bar chart</p> </li> <li> <p>Vertical stacked 100% bar chart</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html">Using bar charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface BarChartVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateBarChartVisualFormGroup() {
		return new FormGroup<BarChartVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>BarChartVisual</code>. */
	export interface BarChartConfiguration {
		FieldWells?: BarChartFieldWells;
		SortConfiguration?: BarChartSortConfiguration;
		Orientation?: BarChartOrientation;
		BarsArrangement?: BarsArrangement;
		VisualPalette?: VisualPalette;
		SmallMultiplesOptions?: SmallMultiplesOptions;
		CategoryAxis?: AxisDisplayOptions;
		CategoryLabelOptions?: ChartAxisLabelOptions;
		ValueAxis?: AxisDisplayOptions;
		ValueLabelOptions?: ChartAxisLabelOptions;
		ColorLabelOptions?: ChartAxisLabelOptions;
		Legend?: LegendOptions;
		DataLabels?: DataLabelOptions;
		Tooltip?: TooltipOptions;
		ReferenceLines?: Array<ReferenceLine>;
		ContributionAnalysisDefaults?: Array<ContributionAnalysisDefault>;
	}

	/** The configuration of a <code>BarChartVisual</code>. */
	export interface BarChartConfigurationFormProperties {
		Orientation: FormControl<BarChartOrientation | null | undefined>,
		BarsArrangement: FormControl<BarsArrangement | null | undefined>,
	}
	export function CreateBarChartConfigurationFormGroup() {
		return new FormGroup<BarChartConfigurationFormProperties>({
			Orientation: new FormControl<BarChartOrientation | null | undefined>(undefined),
			BarsArrangement: new FormControl<BarsArrangement | null | undefined>(undefined),
		});

	}


	/** <p>The field wells of a <code>BarChartVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface BarChartFieldWells {
		BarChartAggregatedFieldWells?: BarChartAggregatedFieldWells;
	}

	/** <p>The field wells of a <code>BarChartVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface BarChartFieldWellsFormProperties {
	}
	export function CreateBarChartFieldWellsFormGroup() {
		return new FormGroup<BarChartFieldWellsFormProperties>({
		});

	}


	/** The aggregated field wells of a bar chart. */
	export interface BarChartAggregatedFieldWells {
		Category?: Array<DimensionField>;
		Values?: Array<MeasureField>;
		Colors?: Array<DimensionField>;
		SmallMultiples?: Array<DimensionField>;
	}

	/** The aggregated field wells of a bar chart. */
	export interface BarChartAggregatedFieldWellsFormProperties {
	}
	export function CreateBarChartAggregatedFieldWellsFormGroup() {
		return new FormGroup<BarChartAggregatedFieldWellsFormProperties>({
		});

	}


	/** sort-configuration-description */
	export interface BarChartSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		CategoryItemsLimit?: ItemsLimitConfiguration;
		ColorSort?: Array<FieldSortOptions>;
		ColorItemsLimit?: ItemsLimitConfiguration;
		SmallMultiplesSort?: Array<FieldSortOptions>;
		SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration;
	}

	/** sort-configuration-description */
	export interface BarChartSortConfigurationFormProperties {
	}
	export function CreateBarChartSortConfigurationFormGroup() {
		return new FormGroup<BarChartSortConfigurationFormProperties>({
		});

	}


	/** The limit configuration of the visual display for an axis. */
	export interface ItemsLimitConfiguration {
		ItemsLimit?: number | null;
		OtherCategories?: OtherCategories;
	}

	/** The limit configuration of the visual display for an axis. */
	export interface ItemsLimitConfigurationFormProperties {
		ItemsLimit: FormControl<number | null | undefined>,
		OtherCategories: FormControl<OtherCategories | null | undefined>,
	}
	export function CreateItemsLimitConfigurationFormGroup() {
		return new FormGroup<ItemsLimitConfigurationFormProperties>({
			ItemsLimit: new FormControl<number | null | undefined>(undefined),
			OtherCategories: new FormControl<OtherCategories | null | undefined>(undefined),
		});

	}

	export enum OtherCategories { INCLUDE = 0, EXCLUDE = 1 }

	export enum BarChartOrientation { HORIZONTAL = 0, VERTICAL = 1 }

	export enum BarsArrangement { CLUSTERED = 0, STACKED = 1, STACKED_PERCENT = 2 }


	/** The visual display options for the visual palette. */
	export interface VisualPalette {
		ChartColor?: string;
		ColorMap?: Array<DataPathColor>;
	}

	/** The visual display options for the visual palette. */
	export interface VisualPaletteFormProperties {
		ChartColor: FormControl<string | null | undefined>,
	}
	export function CreateVisualPaletteFormGroup() {
		return new FormGroup<VisualPaletteFormProperties>({
			ChartColor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The color map that determines the color options for a particular element. */
	export interface DataPathColor {

		/** Required */
		Element: DataPathValue;

		/** Required */
		Color: string;
		TimeGranularity?: TimeGranularity;
	}

	/** The color map that determines the color options for a particular element. */
	export interface DataPathColorFormProperties {

		/** Required */
		Color: FormControl<string | null | undefined>,
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,
	}
	export function CreateDataPathColorFormGroup() {
		return new FormGroup<DataPathColorFormProperties>({
			Color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
		});

	}


	/** Options that determine the layout and display options of a chart's small multiples. */
	export interface SmallMultiplesOptions {
		MaxVisibleRows?: number | null;
		MaxVisibleColumns?: number | null;
		PanelConfiguration?: PanelConfiguration;
		XAxis?: SmallMultiplesAxisProperties;
		YAxis?: SmallMultiplesAxisProperties;
	}

	/** Options that determine the layout and display options of a chart's small multiples. */
	export interface SmallMultiplesOptionsFormProperties {
		MaxVisibleRows: FormControl<number | null | undefined>,
		MaxVisibleColumns: FormControl<number | null | undefined>,
	}
	export function CreateSmallMultiplesOptionsFormGroup() {
		return new FormGroup<SmallMultiplesOptionsFormProperties>({
			MaxVisibleRows: new FormControl<number | null | undefined>(undefined),
			MaxVisibleColumns: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A collection of options that configure how each panel displays in a small multiples chart. */
	export interface PanelConfiguration {
		Title?: PanelTitleOptions;
		BorderVisibility?: Visibility;
		BorderThickness?: string;
		BorderStyle?: PanelBorderStyle;
		BorderColor?: string;
		GutterVisibility?: Visibility;
		GutterSpacing?: string;
		BackgroundVisibility?: Visibility;
		BackgroundColor?: string;
	}

	/** A collection of options that configure how each panel displays in a small multiples chart. */
	export interface PanelConfigurationFormProperties {
		BorderVisibility: FormControl<Visibility | null | undefined>,
		BorderThickness: FormControl<string | null | undefined>,
		BorderStyle: FormControl<PanelBorderStyle | null | undefined>,
		BorderColor: FormControl<string | null | undefined>,
		GutterVisibility: FormControl<Visibility | null | undefined>,
		GutterSpacing: FormControl<string | null | undefined>,
		BackgroundVisibility: FormControl<Visibility | null | undefined>,
		BackgroundColor: FormControl<string | null | undefined>,
	}
	export function CreatePanelConfigurationFormGroup() {
		return new FormGroup<PanelConfigurationFormProperties>({
			BorderVisibility: new FormControl<Visibility | null | undefined>(undefined),
			BorderThickness: new FormControl<string | null | undefined>(undefined),
			BorderStyle: new FormControl<PanelBorderStyle | null | undefined>(undefined),
			BorderColor: new FormControl<string | null | undefined>(undefined),
			GutterVisibility: new FormControl<Visibility | null | undefined>(undefined),
			GutterSpacing: new FormControl<string | null | undefined>(undefined),
			BackgroundVisibility: new FormControl<Visibility | null | undefined>(undefined),
			BackgroundColor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The options that determine the title styles for each small multiples panel. */
	export interface PanelTitleOptions {
		Visibility?: Visibility;

		/** Configures the display properties of the given text. */
		FontConfiguration?: FontConfiguration;
		HorizontalTextAlignment?: HorizontalTextAlignment;
	}

	/** The options that determine the title styles for each small multiples panel. */
	export interface PanelTitleOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		HorizontalTextAlignment: FormControl<HorizontalTextAlignment | null | undefined>,
	}
	export function CreatePanelTitleOptionsFormGroup() {
		return new FormGroup<PanelTitleOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			HorizontalTextAlignment: new FormControl<HorizontalTextAlignment | null | undefined>(undefined),
		});

	}

	export enum PanelBorderStyle { SOLID = 0, DASHED = 1, DOTTED = 2 }


	/** Configures the properties of a chart's axes that are used by small multiples panels. */
	export interface SmallMultiplesAxisProperties {
		Scale?: SmallMultiplesAxisScale;
		Placement?: SmallMultiplesAxisPlacement;
	}

	/** Configures the properties of a chart's axes that are used by small multiples panels. */
	export interface SmallMultiplesAxisPropertiesFormProperties {
		Scale: FormControl<SmallMultiplesAxisScale | null | undefined>,
		Placement: FormControl<SmallMultiplesAxisPlacement | null | undefined>,
	}
	export function CreateSmallMultiplesAxisPropertiesFormGroup() {
		return new FormGroup<SmallMultiplesAxisPropertiesFormProperties>({
			Scale: new FormControl<SmallMultiplesAxisScale | null | undefined>(undefined),
			Placement: new FormControl<SmallMultiplesAxisPlacement | null | undefined>(undefined),
		});

	}

	export enum SmallMultiplesAxisScale { SHARED = 0, INDEPENDENT = 1 }

	export enum SmallMultiplesAxisPlacement { OUTSIDE = 0, INSIDE = 1 }


	/** The display options for the axis label. */
	export interface AxisDisplayOptions {
		TickLabelOptions?: AxisTickLabelOptions;
		AxisLineVisibility?: Visibility;
		GridLineVisibility?: Visibility;
		DataOptions?: AxisDataOptions;
		ScrollbarOptions?: ScrollBarOptions;
		AxisOffset?: string;
	}

	/** The display options for the axis label. */
	export interface AxisDisplayOptionsFormProperties {
		AxisLineVisibility: FormControl<Visibility | null | undefined>,
		GridLineVisibility: FormControl<Visibility | null | undefined>,
		AxisOffset: FormControl<string | null | undefined>,
	}
	export function CreateAxisDisplayOptionsFormGroup() {
		return new FormGroup<AxisDisplayOptionsFormProperties>({
			AxisLineVisibility: new FormControl<Visibility | null | undefined>(undefined),
			GridLineVisibility: new FormControl<Visibility | null | undefined>(undefined),
			AxisOffset: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The tick label options of an axis. */
	export interface AxisTickLabelOptions {
		LabelOptions?: LabelOptions;
		RotationAngle?: number | null;
	}

	/** The tick label options of an axis. */
	export interface AxisTickLabelOptionsFormProperties {
		RotationAngle: FormControl<number | null | undefined>,
	}
	export function CreateAxisTickLabelOptionsFormGroup() {
		return new FormGroup<AxisTickLabelOptionsFormProperties>({
			RotationAngle: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>The data options for an axis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisDataOptions {
		NumericAxisOptions?: NumericAxisOptions;
		DateAxisOptions?: DateAxisOptions;
	}

	/** <p>The data options for an axis.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisDataOptionsFormProperties {
	}
	export function CreateAxisDataOptionsFormGroup() {
		return new FormGroup<AxisDataOptionsFormProperties>({
		});

	}


	/** The options for an axis with a numeric field. */
	export interface NumericAxisOptions {
		Scale?: AxisScale;
		Range?: AxisDisplayRange;
	}

	/** The options for an axis with a numeric field. */
	export interface NumericAxisOptionsFormProperties {
	}
	export function CreateNumericAxisOptionsFormGroup() {
		return new FormGroup<NumericAxisOptionsFormProperties>({
		});

	}


	/** <p>The scale setup options for a numeric axis display.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisScale {
		Linear?: AxisLinearScale;
		Logarithmic?: AxisLogarithmicScale;
	}

	/** <p>The scale setup options for a numeric axis display.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisScaleFormProperties {
	}
	export function CreateAxisScaleFormGroup() {
		return new FormGroup<AxisScaleFormProperties>({
		});

	}


	/** <p>The liner axis scale setup.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisLinearScale {
		StepCount?: number | null;
		StepSize?: number | null;
	}

	/** <p>The liner axis scale setup.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisLinearScaleFormProperties {
		StepCount: FormControl<number | null | undefined>,
		StepSize: FormControl<number | null | undefined>,
	}
	export function CreateAxisLinearScaleFormGroup() {
		return new FormGroup<AxisLinearScaleFormProperties>({
			StepCount: new FormControl<number | null | undefined>(undefined),
			StepSize: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The logarithmic axis scale setup. */
	export interface AxisLogarithmicScale {
		Base?: number | null;
	}

	/** The logarithmic axis scale setup. */
	export interface AxisLogarithmicScaleFormProperties {
		Base: FormControl<number | null | undefined>,
	}
	export function CreateAxisLogarithmicScaleFormGroup() {
		return new FormGroup<AxisLogarithmicScaleFormProperties>({
			Base: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>The range setup of a numeric axis display range.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisDisplayRange {
		MinMax?: AxisDisplayMinMaxRange;
		DataDriven?: AxisDisplayDataDrivenRange;
	}

	/** <p>The range setup of a numeric axis display range.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface AxisDisplayRangeFormProperties {
	}
	export function CreateAxisDisplayRangeFormGroup() {
		return new FormGroup<AxisDisplayRangeFormProperties>({
		});

	}


	/** The minimum and maximum setup for an axis display range. */
	export interface AxisDisplayMinMaxRange {
		Minimum?: number | null;
		Maximum?: number | null;
	}

	/** The minimum and maximum setup for an axis display range. */
	export interface AxisDisplayMinMaxRangeFormProperties {
		Minimum: FormControl<number | null | undefined>,
		Maximum: FormControl<number | null | undefined>,
	}
	export function CreateAxisDisplayMinMaxRangeFormGroup() {
		return new FormGroup<AxisDisplayMinMaxRangeFormProperties>({
			Minimum: new FormControl<number | null | undefined>(undefined),
			Maximum: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The options that are saved for future extension. */
	export interface AxisDisplayDataDrivenRange {
	}

	/** The options that are saved for future extension. */
	export interface AxisDisplayDataDrivenRangeFormProperties {
	}
	export function CreateAxisDisplayDataDrivenRangeFormGroup() {
		return new FormGroup<AxisDisplayDataDrivenRangeFormProperties>({
		});

	}


	/** The options that determine how a date axis is displayed. */
	export interface DateAxisOptions {
		MissingDateVisibility?: Visibility;
	}

	/** The options that determine how a date axis is displayed. */
	export interface DateAxisOptionsFormProperties {
		MissingDateVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateDateAxisOptionsFormGroup() {
		return new FormGroup<DateAxisOptionsFormProperties>({
			MissingDateVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The visual display options for a data zoom scroll bar. */
	export interface ScrollBarOptions {
		Visibility?: Visibility;
		VisibleRange?: VisibleRangeOptions;
	}

	/** The visual display options for a data zoom scroll bar. */
	export interface ScrollBarOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateScrollBarOptionsFormGroup() {
		return new FormGroup<ScrollBarOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The range options for the data zoom scroll bar. */
	export interface VisibleRangeOptions {
		PercentRange?: PercentVisibleRange;
	}

	/** The range options for the data zoom scroll bar. */
	export interface VisibleRangeOptionsFormProperties {
	}
	export function CreateVisibleRangeOptionsFormGroup() {
		return new FormGroup<VisibleRangeOptionsFormProperties>({
		});

	}


	/** The percent range in the visible range. */
	export interface PercentVisibleRange {
		From?: number | null;
		To?: number | null;
	}

	/** The percent range in the visible range. */
	export interface PercentVisibleRangeFormProperties {
		From: FormControl<number | null | undefined>,
		To: FormControl<number | null | undefined>,
	}
	export function CreatePercentVisibleRangeFormGroup() {
		return new FormGroup<PercentVisibleRangeFormProperties>({
			From: new FormControl<number | null | undefined>(undefined),
			To: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The label options for an axis on a chart. */
	export interface ChartAxisLabelOptions {
		Visibility?: Visibility;
		SortIconVisibility?: Visibility;
		AxisLabelOptions?: Array<AxisLabelOptions>;
	}

	/** The label options for an axis on a chart. */
	export interface ChartAxisLabelOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		SortIconVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateChartAxisLabelOptionsFormGroup() {
		return new FormGroup<ChartAxisLabelOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			SortIconVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The label options for a chart axis. You must specify the field that the label is targeted to. */
	export interface AxisLabelOptions {
		FontConfiguration?: FontConfiguration;
		CustomLabel?: string;
		ApplyTo?: AxisLabelReferenceOptions;
	}

	/** The label options for a chart axis. You must specify the field that the label is targeted to. */
	export interface AxisLabelOptionsFormProperties {
		CustomLabel: FormControl<string | null | undefined>,
	}
	export function CreateAxisLabelOptionsFormGroup() {
		return new FormGroup<AxisLabelOptionsFormProperties>({
			CustomLabel: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The reference that specifies where the axis label is applied to. */
	export interface AxisLabelReferenceOptions {

		/** Required */
		FieldId: string;

		/** Required */
		Column: ColumnIdentifier;
	}

	/** The reference that specifies where the axis label is applied to. */
	export interface AxisLabelReferenceOptionsFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreateAxisLabelReferenceOptionsFormGroup() {
		return new FormGroup<AxisLabelReferenceOptionsFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The options for the legend setup of a visual. */
	export interface LegendOptions {
		Visibility?: Visibility;
		Title?: LabelOptions;
		Position?: LegendPosition;
		Width?: string;
		Height?: string;
	}

	/** The options for the legend setup of a visual. */
	export interface LegendOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		Position: FormControl<LegendPosition | null | undefined>,
		Width: FormControl<string | null | undefined>,
		Height: FormControl<string | null | undefined>,
	}
	export function CreateLegendOptionsFormGroup() {
		return new FormGroup<LegendOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			Position: new FormControl<LegendPosition | null | undefined>(undefined),
			Width: new FormControl<string | null | undefined>(undefined),
			Height: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum LegendPosition { AUTO = 0, RIGHT = 1, BOTTOM = 2, TOP = 3 }


	/** The options that determine the presentation of the data labels. */
	export interface DataLabelOptions {
		Visibility?: Visibility;
		CategoryLabelVisibility?: Visibility;
		MeasureLabelVisibility?: Visibility;
		DataLabelTypes?: Array<DataLabelType>;
		Position?: DataLabelPosition;
		LabelContent?: DataLabelContent;
		LabelFontConfiguration?: FontConfiguration;
		LabelColor?: string;
		Overlap?: DataLabelOverlap;
		TotalsVisibility?: Visibility;
	}

	/** The options that determine the presentation of the data labels. */
	export interface DataLabelOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		CategoryLabelVisibility: FormControl<Visibility | null | undefined>,
		MeasureLabelVisibility: FormControl<Visibility | null | undefined>,
		Position: FormControl<DataLabelPosition | null | undefined>,
		LabelContent: FormControl<DataLabelContent | null | undefined>,
		LabelColor: FormControl<string | null | undefined>,
		Overlap: FormControl<DataLabelOverlap | null | undefined>,
		TotalsVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateDataLabelOptionsFormGroup() {
		return new FormGroup<DataLabelOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			CategoryLabelVisibility: new FormControl<Visibility | null | undefined>(undefined),
			MeasureLabelVisibility: new FormControl<Visibility | null | undefined>(undefined),
			Position: new FormControl<DataLabelPosition | null | undefined>(undefined),
			LabelContent: new FormControl<DataLabelContent | null | undefined>(undefined),
			LabelColor: new FormControl<string | null | undefined>(undefined),
			Overlap: new FormControl<DataLabelOverlap | null | undefined>(undefined),
			TotalsVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** <p>The option that determines the data label type.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface DataLabelType {
		FieldLabelType?: FieldLabelType;
		DataPathLabelType?: DataPathLabelType;
		RangeEndsLabelType?: RangeEndsLabelType;
		MinimumLabelType?: MinimumLabelType;
		MaximumLabelType?: MaximumLabelType;
	}

	/** <p>The option that determines the data label type.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface DataLabelTypeFormProperties {
	}
	export function CreateDataLabelTypeFormGroup() {
		return new FormGroup<DataLabelTypeFormProperties>({
		});

	}


	/** The field label type. */
	export interface FieldLabelType {
		FieldId?: string;
		Visibility?: Visibility;
	}

	/** The field label type. */
	export interface FieldLabelTypeFormProperties {
		FieldId: FormControl<string | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateFieldLabelTypeFormGroup() {
		return new FormGroup<FieldLabelTypeFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The option that specifies individual data values for labels. */
	export interface DataPathLabelType {
		FieldId?: string;
		FieldValue?: string;
		Visibility?: Visibility;
	}

	/** The option that specifies individual data values for labels. */
	export interface DataPathLabelTypeFormProperties {
		FieldId: FormControl<string | null | undefined>,
		FieldValue: FormControl<string | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateDataPathLabelTypeFormGroup() {
		return new FormGroup<DataPathLabelTypeFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined),
			FieldValue: new FormControl<string | null | undefined>(undefined),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The range ends label type of a data path label. */
	export interface RangeEndsLabelType {
		Visibility?: Visibility;
	}

	/** The range ends label type of a data path label. */
	export interface RangeEndsLabelTypeFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateRangeEndsLabelTypeFormGroup() {
		return new FormGroup<RangeEndsLabelTypeFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The minimum label of a data path label. */
	export interface MinimumLabelType {
		Visibility?: Visibility;
	}

	/** The minimum label of a data path label. */
	export interface MinimumLabelTypeFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateMinimumLabelTypeFormGroup() {
		return new FormGroup<MinimumLabelTypeFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The maximum label of a data path label. */
	export interface MaximumLabelType {
		Visibility?: Visibility;
	}

	/** The maximum label of a data path label. */
	export interface MaximumLabelTypeFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateMaximumLabelTypeFormGroup() {
		return new FormGroup<MaximumLabelTypeFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}

	export enum DataLabelPosition { INSIDE = 0, OUTSIDE = 1, LEFT = 2, TOP = 3, BOTTOM = 4, RIGHT = 5 }

	export enum DataLabelContent { VALUE = 0, PERCENT = 1, VALUE_AND_PERCENT = 2 }

	export enum DataLabelOverlap { DISABLE_OVERLAP = 0, ENABLE_OVERLAP = 1 }


	/** The display options for the visual tooltip. */
	export interface TooltipOptions {
		TooltipVisibility?: Visibility;
		SelectedTooltipType?: SelectedTooltipType;
		FieldBasedTooltip?: FieldBasedTooltip;
	}

	/** The display options for the visual tooltip. */
	export interface TooltipOptionsFormProperties {
		TooltipVisibility: FormControl<Visibility | null | undefined>,
		SelectedTooltipType: FormControl<SelectedTooltipType | null | undefined>,
	}
	export function CreateTooltipOptionsFormGroup() {
		return new FormGroup<TooltipOptionsFormProperties>({
			TooltipVisibility: new FormControl<Visibility | null | undefined>(undefined),
			SelectedTooltipType: new FormControl<SelectedTooltipType | null | undefined>(undefined),
		});

	}

	export enum SelectedTooltipType { BASIC = 0, DETAILED = 1 }


	/** The setup for the detailed tooltip. */
	export interface FieldBasedTooltip {
		AggregationVisibility?: Visibility;
		TooltipTitleType?: TooltipTitleType;
		TooltipFields?: Array<TooltipItem>;
	}

	/** The setup for the detailed tooltip. */
	export interface FieldBasedTooltipFormProperties {
		AggregationVisibility: FormControl<Visibility | null | undefined>,
		TooltipTitleType: FormControl<TooltipTitleType | null | undefined>,
	}
	export function CreateFieldBasedTooltipFormGroup() {
		return new FormGroup<FieldBasedTooltipFormProperties>({
			AggregationVisibility: new FormControl<Visibility | null | undefined>(undefined),
			TooltipTitleType: new FormControl<TooltipTitleType | null | undefined>(undefined),
		});

	}

	export enum TooltipTitleType { NONE = 0, PRIMARY_VALUE = 1 }


	/** <p>The tooltip.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TooltipItem {
		FieldTooltipItem?: FieldTooltipItem;
		ColumnTooltipItem?: ColumnTooltipItem;
	}

	/** <p>The tooltip.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TooltipItemFormProperties {
	}
	export function CreateTooltipItemFormGroup() {
		return new FormGroup<TooltipItemFormProperties>({
		});

	}


	/** The tooltip item for the fields. */
	export interface FieldTooltipItem {

		/** Required */
		FieldId: string;
		Label?: string;
		Visibility?: Visibility;
	}

	/** The tooltip item for the fields. */
	export interface FieldTooltipItemFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		Label: FormControl<string | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateFieldTooltipItemFormGroup() {
		return new FormGroup<FieldTooltipItemFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Label: new FormControl<string | null | undefined>(undefined),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The tooltip item for the columns that are not part of a field well. */
	export interface ColumnTooltipItem {

		/** Required */
		Column: ColumnIdentifier;
		Label?: string;
		Visibility?: Visibility;
		Aggregation?: AggregationFunction;
	}

	/** The tooltip item for the columns that are not part of a field well. */
	export interface ColumnTooltipItemFormProperties {
		Label: FormControl<string | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateColumnTooltipItemFormGroup() {
		return new FormGroup<ColumnTooltipItemFormProperties>({
			Label: new FormControl<string | null | undefined>(undefined),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The reference line visual display options. */
	export interface ReferenceLine {
		Status?: WidgetStatus;

		/** Required */
		DataConfiguration: ReferenceLineDataConfiguration;
		StyleConfiguration?: ReferenceLineStyleConfiguration;
		LabelConfiguration?: ReferenceLineLabelConfiguration;
	}

	/** The reference line visual display options. */
	export interface ReferenceLineFormProperties {
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateReferenceLineFormGroup() {
		return new FormGroup<ReferenceLineFormProperties>({
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The data configuration of the reference line. */
	export interface ReferenceLineDataConfiguration {
		StaticConfiguration?: ReferenceLineStaticDataConfiguration;
		DynamicConfiguration?: ReferenceLineDynamicDataConfiguration;
		AxisBinding?: AxisBinding;
	}

	/** The data configuration of the reference line. */
	export interface ReferenceLineDataConfigurationFormProperties {
		AxisBinding: FormControl<AxisBinding | null | undefined>,
	}
	export function CreateReferenceLineDataConfigurationFormGroup() {
		return new FormGroup<ReferenceLineDataConfigurationFormProperties>({
			AxisBinding: new FormControl<AxisBinding | null | undefined>(undefined),
		});

	}


	/** The static data configuration of the reference line data configuration. */
	export interface ReferenceLineStaticDataConfiguration {

		/** Required */
		Value: number;
	}

	/** The static data configuration of the reference line data configuration. */
	export interface ReferenceLineStaticDataConfigurationFormProperties {

		/** Required */
		Value: FormControl<number | null | undefined>,
	}
	export function CreateReferenceLineStaticDataConfigurationFormGroup() {
		return new FormGroup<ReferenceLineStaticDataConfigurationFormProperties>({
			Value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The dynamic configuration of the reference line data configuration. */
	export interface ReferenceLineDynamicDataConfiguration {

		/** Required */
		Column: ColumnIdentifier;
		MeasureAggregationFunction?: AggregationFunction;

		/** Required */
		Calculation: NumericalAggregationFunction;
	}

	/** The dynamic configuration of the reference line data configuration. */
	export interface ReferenceLineDynamicDataConfigurationFormProperties {
	}
	export function CreateReferenceLineDynamicDataConfigurationFormGroup() {
		return new FormGroup<ReferenceLineDynamicDataConfigurationFormProperties>({
		});

	}

	export enum AxisBinding { PRIMARY_YAXIS = 0, SECONDARY_YAXIS = 1 }


	/** The style configuration of the reference line. */
	export interface ReferenceLineStyleConfiguration {
		Pattern?: PanelBorderStyle;
		Color?: string;
	}

	/** The style configuration of the reference line. */
	export interface ReferenceLineStyleConfigurationFormProperties {
		Pattern: FormControl<PanelBorderStyle | null | undefined>,
		Color: FormControl<string | null | undefined>,
	}
	export function CreateReferenceLineStyleConfigurationFormGroup() {
		return new FormGroup<ReferenceLineStyleConfigurationFormProperties>({
			Pattern: new FormControl<PanelBorderStyle | null | undefined>(undefined),
			Color: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The label configuration of a reference line. */
	export interface ReferenceLineLabelConfiguration {
		ValueLabelConfiguration?: ReferenceLineValueLabelConfiguration;
		CustomLabelConfiguration?: ReferenceLineCustomLabelConfiguration;
		FontConfiguration?: FontConfiguration;
		FontColor?: string;
		HorizontalPosition?: ReferenceLineLabelHorizontalPosition;
		VerticalPosition?: ReferenceLineLabelVerticalPosition;
	}

	/** The label configuration of a reference line. */
	export interface ReferenceLineLabelConfigurationFormProperties {
		FontColor: FormControl<string | null | undefined>,
		HorizontalPosition: FormControl<ReferenceLineLabelHorizontalPosition | null | undefined>,
		VerticalPosition: FormControl<ReferenceLineLabelVerticalPosition | null | undefined>,
	}
	export function CreateReferenceLineLabelConfigurationFormGroup() {
		return new FormGroup<ReferenceLineLabelConfigurationFormProperties>({
			FontColor: new FormControl<string | null | undefined>(undefined),
			HorizontalPosition: new FormControl<ReferenceLineLabelHorizontalPosition | null | undefined>(undefined),
			VerticalPosition: new FormControl<ReferenceLineLabelVerticalPosition | null | undefined>(undefined),
		});

	}


	/** The value label configuration of the label in a reference line. */
	export interface ReferenceLineValueLabelConfiguration {
		RelativePosition?: ReferenceLineValueLabelRelativePosition;
		FormatConfiguration?: NumericFormatConfiguration;
	}

	/** The value label configuration of the label in a reference line. */
	export interface ReferenceLineValueLabelConfigurationFormProperties {
		RelativePosition: FormControl<ReferenceLineValueLabelRelativePosition | null | undefined>,
	}
	export function CreateReferenceLineValueLabelConfigurationFormGroup() {
		return new FormGroup<ReferenceLineValueLabelConfigurationFormProperties>({
			RelativePosition: new FormControl<ReferenceLineValueLabelRelativePosition | null | undefined>(undefined),
		});

	}

	export enum ReferenceLineValueLabelRelativePosition { BEFORE_CUSTOM_LABEL = 0, AFTER_CUSTOM_LABEL = 1 }


	/** The configuration for a custom label on a <code>ReferenceLine</code>. */
	export interface ReferenceLineCustomLabelConfiguration {

		/** Required */
		CustomLabel: string;
	}

	/** The configuration for a custom label on a <code>ReferenceLine</code>. */
	export interface ReferenceLineCustomLabelConfigurationFormProperties {

		/** Required */
		CustomLabel: FormControl<string | null | undefined>,
	}
	export function CreateReferenceLineCustomLabelConfigurationFormGroup() {
		return new FormGroup<ReferenceLineCustomLabelConfigurationFormProperties>({
			CustomLabel: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ReferenceLineLabelHorizontalPosition { LEFT = 0, CENTER = 1, RIGHT = 2 }

	export enum ReferenceLineLabelVerticalPosition { ABOVE = 0, BELOW = 1 }


	/** The contribution analysis visual display for a line, pie, or bar chart. */
	export interface ContributionAnalysisDefault {

		/** Required */
		MeasureFieldId: string;

		/** Required */
		ContributorDimensions: Array<ColumnIdentifier>;
	}

	/** The contribution analysis visual display for a line, pie, or bar chart. */
	export interface ContributionAnalysisDefaultFormProperties {

		/** Required */
		MeasureFieldId: FormControl<string | null | undefined>,
	}
	export function CreateContributionAnalysisDefaultFormGroup() {
		return new FormGroup<ContributionAnalysisDefaultFormProperties>({
			MeasureFieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The option that determines the hierarchy of the fields for a visual element. */
	export interface ColumnHierarchy {
		ExplicitHierarchy?: ExplicitHierarchy;
		DateTimeHierarchy?: DateTimeHierarchy;
		PredefinedHierarchy?: PredefinedHierarchy;
	}

	/** The option that determines the hierarchy of the fields for a visual element. */
	export interface ColumnHierarchyFormProperties {
	}
	export function CreateColumnHierarchyFormGroup() {
		return new FormGroup<ColumnHierarchyFormProperties>({
		});

	}


	/** The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals. */
	export interface ExplicitHierarchy {

		/** Required */
		HierarchyId: string;

		/** Required */
		Columns: Array<ColumnIdentifier>;
		DrillDownFilters?: Array<DrillDownFilter>;
	}

	/** The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals. */
	export interface ExplicitHierarchyFormProperties {

		/** Required */
		HierarchyId: FormControl<string | null | undefined>,
	}
	export function CreateExplicitHierarchyFormGroup() {
		return new FormGroup<ExplicitHierarchyFormProperties>({
			HierarchyId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The drill down filter for the column hierarchies.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface DrillDownFilter {
		NumericEqualityFilter?: NumericEqualityDrillDownFilter;
		CategoryFilter?: CategoryDrillDownFilter;
		TimeRangeFilter?: TimeRangeDrillDownFilter;
	}

	/** <p>The drill down filter for the column hierarchies.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface DrillDownFilterFormProperties {
	}
	export function CreateDrillDownFilterFormGroup() {
		return new FormGroup<DrillDownFilterFormProperties>({
		});

	}


	/** The category drill down filter. */
	export interface NumericEqualityDrillDownFilter {

		/** Required */
		Column: ColumnIdentifier;

		/** Required */
		Value: number;
	}

	/** The category drill down filter. */
	export interface NumericEqualityDrillDownFilterFormProperties {

		/** Required */
		Value: FormControl<number | null | undefined>,
	}
	export function CreateNumericEqualityDrillDownFilterFormGroup() {
		return new FormGroup<NumericEqualityDrillDownFilterFormProperties>({
			Value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The numeric equality type drill down filter. */
	export interface CategoryDrillDownFilter {

		/** Required */
		Column: ColumnIdentifier;

		/** Required */
		CategoryValues: Array<string>;
	}

	/** The numeric equality type drill down filter. */
	export interface CategoryDrillDownFilterFormProperties {
	}
	export function CreateCategoryDrillDownFilterFormGroup() {
		return new FormGroup<CategoryDrillDownFilterFormProperties>({
		});

	}


	/** The time range drill down filter. */
	export interface TimeRangeDrillDownFilter {

		/** Required */
		Column: ColumnIdentifier;

		/** Required */
		RangeMinimum: Date;

		/** Required */
		RangeMaximum: Date;

		/** Required */
		TimeGranularity: TimeGranularity;
	}

	/** The time range drill down filter. */
	export interface TimeRangeDrillDownFilterFormProperties {

		/** Required */
		RangeMinimum: FormControl<Date | null | undefined>,

		/** Required */
		RangeMaximum: FormControl<Date | null | undefined>,

		/** Required */
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,
	}
	export function CreateTimeRangeDrillDownFilterFormGroup() {
		return new FormGroup<TimeRangeDrillDownFilterFormProperties>({
			RangeMinimum: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			RangeMaximum: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The option that determines the hierarchy of any <code>DateTime</code> fields. */
	export interface DateTimeHierarchy {

		/** Required */
		HierarchyId: string;
		DrillDownFilters?: Array<DrillDownFilter>;
	}

	/** The option that determines the hierarchy of any <code>DateTime</code> fields. */
	export interface DateTimeHierarchyFormProperties {

		/** Required */
		HierarchyId: FormControl<string | null | undefined>,
	}
	export function CreateDateTimeHierarchyFormGroup() {
		return new FormGroup<DateTimeHierarchyFormProperties>({
			HierarchyId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source. */
	export interface PredefinedHierarchy {

		/** Required */
		HierarchyId: string;

		/** Required */
		Columns: Array<ColumnIdentifier>;
		DrillDownFilters?: Array<DrillDownFilter>;
	}

	/** The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source. */
	export interface PredefinedHierarchyFormProperties {

		/** Required */
		HierarchyId: FormControl<string | null | undefined>,
	}
	export function CreatePredefinedHierarchyFormGroup() {
		return new FormGroup<PredefinedHierarchyFormProperties>({
			HierarchyId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>A key performance indicator (KPI).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/kpi.html">Using KPIs</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface KPIVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: KPIConfiguration;
		ConditionalFormatting?: KPIConditionalFormatting;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A key performance indicator (KPI).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/kpi.html">Using KPIs</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface KPIVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateKPIVisualFormGroup() {
		return new FormGroup<KPIVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a KPI visual. */
	export interface KPIConfiguration {
		FieldWells?: KPIFieldWells;
		SortConfiguration?: KPISortConfiguration;
		KPIOptions?: KPIOptions;
	}

	/** The configuration of a KPI visual. */
	export interface KPIConfigurationFormProperties {
	}
	export function CreateKPIConfigurationFormGroup() {
		return new FormGroup<KPIConfigurationFormProperties>({
		});

	}


	/** The field well configuration of a KPI visual. */
	export interface KPIFieldWells {
		Values?: Array<MeasureField>;
		TargetValues?: Array<MeasureField>;
		TrendGroups?: Array<DimensionField>;
	}

	/** The field well configuration of a KPI visual. */
	export interface KPIFieldWellsFormProperties {
	}
	export function CreateKPIFieldWellsFormGroup() {
		return new FormGroup<KPIFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a KPI visual. */
	export interface KPISortConfiguration {
		TrendGroupSort?: Array<FieldSortOptions>;
	}

	/** The sort configuration of a KPI visual. */
	export interface KPISortConfigurationFormProperties {
	}
	export function CreateKPISortConfigurationFormGroup() {
		return new FormGroup<KPISortConfigurationFormProperties>({
		});

	}


	/** The options that determine the presentation of a KPI visual. */
	export interface KPIOptions {
		ProgressBar?: ProgressBarOptions;
		TrendArrows?: TrendArrowOptions;
		SecondaryValue?: SecondaryValueOptions;
		Comparison?: ComparisonConfiguration;
		PrimaryValueDisplayType?: PrimaryValueDisplayType;
		PrimaryValueFontConfiguration?: FontConfiguration;
		SecondaryValueFontConfiguration?: FontConfiguration;
	}

	/** The options that determine the presentation of a KPI visual. */
	export interface KPIOptionsFormProperties {
		PrimaryValueDisplayType: FormControl<PrimaryValueDisplayType | null | undefined>,
	}
	export function CreateKPIOptionsFormGroup() {
		return new FormGroup<KPIOptionsFormProperties>({
			PrimaryValueDisplayType: new FormControl<PrimaryValueDisplayType | null | undefined>(undefined),
		});

	}


	/** The options that determine the presentation of the progress bar of a KPI visual. */
	export interface ProgressBarOptions {
		Visibility?: Visibility;
	}

	/** The options that determine the presentation of the progress bar of a KPI visual. */
	export interface ProgressBarOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateProgressBarOptionsFormGroup() {
		return new FormGroup<ProgressBarOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The options that determine the presentation of trend arrows in a KPI visual. */
	export interface TrendArrowOptions {
		Visibility?: Visibility;
	}

	/** The options that determine the presentation of trend arrows in a KPI visual. */
	export interface TrendArrowOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateTrendArrowOptionsFormGroup() {
		return new FormGroup<TrendArrowOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The options that determine the presentation of the secondary value of a KPI visual. */
	export interface SecondaryValueOptions {
		Visibility?: Visibility;
	}

	/** The options that determine the presentation of the secondary value of a KPI visual. */
	export interface SecondaryValueOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateSecondaryValueOptionsFormGroup() {
		return new FormGroup<SecondaryValueOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The comparison display configuration of a KPI or gauge chart. */
	export interface ComparisonConfiguration {
		ComparisonMethod?: ComparisonMethod;
		ComparisonFormat?: ComparisonFormatConfiguration;
	}

	/** The comparison display configuration of a KPI or gauge chart. */
	export interface ComparisonConfigurationFormProperties {
		ComparisonMethod: FormControl<ComparisonMethod | null | undefined>,
	}
	export function CreateComparisonConfigurationFormGroup() {
		return new FormGroup<ComparisonConfigurationFormProperties>({
			ComparisonMethod: new FormControl<ComparisonMethod | null | undefined>(undefined),
		});

	}

	export enum ComparisonMethod { DIFFERENCE = 0, PERCENT_DIFFERENCE = 1, PERCENT = 2 }


	/** <p>The format of the comparison.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ComparisonFormatConfiguration {
		NumberDisplayFormatConfiguration?: NumberDisplayFormatConfiguration;
		PercentageDisplayFormatConfiguration?: PercentageDisplayFormatConfiguration;
	}

	/** <p>The format of the comparison.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ComparisonFormatConfigurationFormProperties {
	}
	export function CreateComparisonFormatConfigurationFormGroup() {
		return new FormGroup<ComparisonFormatConfigurationFormProperties>({
		});

	}

	export enum PrimaryValueDisplayType { HIDDEN = 0, COMPARISON = 1, ACTUAL = 2 }


	/** The conditional formatting of a KPI visual. */
	export interface KPIConditionalFormatting {
		ConditionalFormattingOptions?: Array<KPIConditionalFormattingOption>;
	}

	/** The conditional formatting of a KPI visual. */
	export interface KPIConditionalFormattingFormProperties {
	}
	export function CreateKPIConditionalFormattingFormGroup() {
		return new FormGroup<KPIConditionalFormattingFormProperties>({
		});

	}


	/** The conditional formatting options of a KPI visual. */
	export interface KPIConditionalFormattingOption {
		PrimaryValue?: KPIPrimaryValueConditionalFormatting;
		ProgressBar?: KPIProgressBarConditionalFormatting;
	}

	/** The conditional formatting options of a KPI visual. */
	export interface KPIConditionalFormattingOptionFormProperties {
	}
	export function CreateKPIConditionalFormattingOptionFormGroup() {
		return new FormGroup<KPIConditionalFormattingOptionFormProperties>({
		});

	}


	/** The conditional formatting for the primary value of a KPI visual. */
	export interface KPIPrimaryValueConditionalFormatting {
		TextColor?: ConditionalFormattingColor;
		Icon?: ConditionalFormattingIcon;
	}

	/** The conditional formatting for the primary value of a KPI visual. */
	export interface KPIPrimaryValueConditionalFormattingFormProperties {
	}
	export function CreateKPIPrimaryValueConditionalFormattingFormGroup() {
		return new FormGroup<KPIPrimaryValueConditionalFormattingFormProperties>({
		});

	}


	/** The conditional formatting for the progress bar of a KPI visual. */
	export interface KPIProgressBarConditionalFormatting {
		ForegroundColor?: ConditionalFormattingColor;
	}

	/** The conditional formatting for the progress bar of a KPI visual. */
	export interface KPIProgressBarConditionalFormattingFormProperties {
	}
	export function CreateKPIProgressBarConditionalFormattingFormGroup() {
		return new FormGroup<KPIProgressBarConditionalFormattingFormProperties>({
		});

	}


	/** <p>A pie or donut chart.</p> <p>The <code>PieChartVisual</code> structure describes a visual that is a member of the pie chart family.</p> <p>The following charts can be described by using this structure:</p> <ul> <li> <p>Pie charts</p> </li> <li> <p>Donut charts</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html">Using pie charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/donut-chart.html">Using donut charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface PieChartVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: PieChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A pie or donut chart.</p> <p>The <code>PieChartVisual</code> structure describes a visual that is a member of the pie chart family.</p> <p>The following charts can be described by using this structure:</p> <ul> <li> <p>Pie charts</p> </li> <li> <p>Donut charts</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html">Using pie charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/donut-chart.html">Using donut charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface PieChartVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreatePieChartVisualFormGroup() {
		return new FormGroup<PieChartVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a pie chart. */
	export interface PieChartConfiguration {
		FieldWells?: PieChartFieldWells;
		SortConfiguration?: PieChartSortConfiguration;
		DonutOptions?: DonutOptions;
		SmallMultiplesOptions?: SmallMultiplesOptions;
		CategoryLabelOptions?: ChartAxisLabelOptions;
		ValueLabelOptions?: ChartAxisLabelOptions;
		Legend?: LegendOptions;
		DataLabels?: DataLabelOptions;
		Tooltip?: TooltipOptions;
		VisualPalette?: VisualPalette;
		ContributionAnalysisDefaults?: Array<ContributionAnalysisDefault>;
	}

	/** The configuration of a pie chart. */
	export interface PieChartConfigurationFormProperties {
	}
	export function CreatePieChartConfigurationFormGroup() {
		return new FormGroup<PieChartConfigurationFormProperties>({
		});

	}


	/** <p>The field well configuration of a pie chart.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface PieChartFieldWells {
		PieChartAggregatedFieldWells?: PieChartAggregatedFieldWells;
	}

	/** <p>The field well configuration of a pie chart.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface PieChartFieldWellsFormProperties {
	}
	export function CreatePieChartFieldWellsFormGroup() {
		return new FormGroup<PieChartFieldWellsFormProperties>({
		});

	}


	/** The field well configuration of a pie chart. */
	export interface PieChartAggregatedFieldWells {
		Category?: Array<DimensionField>;
		Values?: Array<MeasureField>;
		SmallMultiples?: Array<DimensionField>;
	}

	/** The field well configuration of a pie chart. */
	export interface PieChartAggregatedFieldWellsFormProperties {
	}
	export function CreatePieChartAggregatedFieldWellsFormGroup() {
		return new FormGroup<PieChartAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a pie chart. */
	export interface PieChartSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		CategoryItemsLimit?: ItemsLimitConfiguration;
		SmallMultiplesSort?: Array<FieldSortOptions>;
		SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a pie chart. */
	export interface PieChartSortConfigurationFormProperties {
	}
	export function CreatePieChartSortConfigurationFormGroup() {
		return new FormGroup<PieChartSortConfigurationFormProperties>({
		});

	}


	/** The options for configuring a donut chart or pie chart. */
	export interface DonutOptions {
		ArcOptions?: ArcOptions;
		DonutCenterOptions?: DonutCenterOptions;
	}

	/** The options for configuring a donut chart or pie chart. */
	export interface DonutOptionsFormProperties {
	}
	export function CreateDonutOptionsFormGroup() {
		return new FormGroup<DonutOptionsFormProperties>({
		});

	}


	/** The options that determine the arc thickness of a <code>GaugeChartVisual</code>. */
	export interface ArcOptions {
		ArcThickness?: ArcThickness;
	}

	/** The options that determine the arc thickness of a <code>GaugeChartVisual</code>. */
	export interface ArcOptionsFormProperties {
		ArcThickness: FormControl<ArcThickness | null | undefined>,
	}
	export function CreateArcOptionsFormGroup() {
		return new FormGroup<ArcOptionsFormProperties>({
			ArcThickness: new FormControl<ArcThickness | null | undefined>(undefined),
		});

	}

	export enum ArcThickness { SMALL = 0, MEDIUM = 1, LARGE = 2, WHOLE = 3 }


	/** The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts. */
	export interface DonutCenterOptions {
		LabelVisibility?: Visibility;
	}

	/** The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts. */
	export interface DonutCenterOptionsFormProperties {
		LabelVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateDonutCenterOptionsFormGroup() {
		return new FormGroup<DonutCenterOptionsFormProperties>({
			LabelVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** <p>A gauge chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html">Using gauge charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface GaugeChartVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: GaugeChartConfiguration;
		ConditionalFormatting?: GaugeChartConditionalFormatting;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A gauge chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html">Using gauge charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface GaugeChartVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateGaugeChartVisualFormGroup() {
		return new FormGroup<GaugeChartVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartConfiguration {
		FieldWells?: GaugeChartFieldWells;
		GaugeChartOptions?: GaugeChartOptions;
		DataLabels?: DataLabelOptions;
		TooltipOptions?: TooltipOptions;
		VisualPalette?: VisualPalette;
	}

	/** The configuration of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartConfigurationFormProperties {
	}
	export function CreateGaugeChartConfigurationFormGroup() {
		return new FormGroup<GaugeChartConfigurationFormProperties>({
		});

	}


	/** The field well configuration of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartFieldWells {
		Values?: Array<MeasureField>;
		TargetValues?: Array<MeasureField>;
	}

	/** The field well configuration of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartFieldWellsFormProperties {
	}
	export function CreateGaugeChartFieldWellsFormGroup() {
		return new FormGroup<GaugeChartFieldWellsFormProperties>({
		});

	}


	/** The options that determine the presentation of the <code>GaugeChartVisual</code>. */
	export interface GaugeChartOptions {
		PrimaryValueDisplayType?: PrimaryValueDisplayType;
		Comparison?: ComparisonConfiguration;
		ArcAxis?: ArcAxisConfiguration;
		Arc?: ArcConfiguration;
		PrimaryValueFontConfiguration?: FontConfiguration;
	}

	/** The options that determine the presentation of the <code>GaugeChartVisual</code>. */
	export interface GaugeChartOptionsFormProperties {
		PrimaryValueDisplayType: FormControl<PrimaryValueDisplayType | null | undefined>,
	}
	export function CreateGaugeChartOptionsFormGroup() {
		return new FormGroup<GaugeChartOptionsFormProperties>({
			PrimaryValueDisplayType: new FormControl<PrimaryValueDisplayType | null | undefined>(undefined),
		});

	}


	/** The arc axis configuration of a <code>GaugeChartVisual</code>. */
	export interface ArcAxisConfiguration {
		Range?: ArcAxisDisplayRange;
		ReserveRange?: number | null;
	}

	/** The arc axis configuration of a <code>GaugeChartVisual</code>. */
	export interface ArcAxisConfigurationFormProperties {
		ReserveRange: FormControl<number | null | undefined>,
	}
	export function CreateArcAxisConfigurationFormGroup() {
		return new FormGroup<ArcAxisConfigurationFormProperties>({
			ReserveRange: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The arc axis range of a <code>GaugeChartVisual</code>. */
	export interface ArcAxisDisplayRange {
		Min?: number | null;
		Max?: number | null;
	}

	/** The arc axis range of a <code>GaugeChartVisual</code>. */
	export interface ArcAxisDisplayRangeFormProperties {
		Min: FormControl<number | null | undefined>,
		Max: FormControl<number | null | undefined>,
	}
	export function CreateArcAxisDisplayRangeFormGroup() {
		return new FormGroup<ArcAxisDisplayRangeFormProperties>({
			Min: new FormControl<number | null | undefined>(undefined),
			Max: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The arc configuration of a <code>GaugeChartVisual</code>. */
	export interface ArcConfiguration {
		ArcAngle?: number | null;
		ArcThickness?: ArcThicknessOptions;
	}

	/** The arc configuration of a <code>GaugeChartVisual</code>. */
	export interface ArcConfigurationFormProperties {
		ArcAngle: FormControl<number | null | undefined>,
		ArcThickness: FormControl<ArcThicknessOptions | null | undefined>,
	}
	export function CreateArcConfigurationFormGroup() {
		return new FormGroup<ArcConfigurationFormProperties>({
			ArcAngle: new FormControl<number | null | undefined>(undefined),
			ArcThickness: new FormControl<ArcThicknessOptions | null | undefined>(undefined),
		});

	}

	export enum ArcThicknessOptions { SMALL = 0, MEDIUM = 1, LARGE = 2 }


	/** The conditional formatting of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartConditionalFormatting {
		ConditionalFormattingOptions?: Array<GaugeChartConditionalFormattingOption>;
	}

	/** The conditional formatting of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartConditionalFormattingFormProperties {
	}
	export function CreateGaugeChartConditionalFormattingFormGroup() {
		return new FormGroup<GaugeChartConditionalFormattingFormProperties>({
		});

	}


	/** Conditional formatting options of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartConditionalFormattingOption {
		PrimaryValue?: GaugeChartPrimaryValueConditionalFormatting;
		Arc?: GaugeChartArcConditionalFormatting;
	}

	/** Conditional formatting options of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartConditionalFormattingOptionFormProperties {
	}
	export function CreateGaugeChartConditionalFormattingOptionFormGroup() {
		return new FormGroup<GaugeChartConditionalFormattingOptionFormProperties>({
		});

	}


	/** The conditional formatting for the primary value of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartPrimaryValueConditionalFormatting {
		TextColor?: ConditionalFormattingColor;
		Icon?: ConditionalFormattingIcon;
	}

	/** The conditional formatting for the primary value of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartPrimaryValueConditionalFormattingFormProperties {
	}
	export function CreateGaugeChartPrimaryValueConditionalFormattingFormGroup() {
		return new FormGroup<GaugeChartPrimaryValueConditionalFormattingFormProperties>({
		});

	}


	/** The options that determine the presentation of the arc of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartArcConditionalFormatting {
		ForegroundColor?: ConditionalFormattingColor;
	}

	/** The options that determine the presentation of the arc of a <code>GaugeChartVisual</code>. */
	export interface GaugeChartArcConditionalFormattingFormProperties {
	}
	export function CreateGaugeChartArcConditionalFormattingFormGroup() {
		return new FormGroup<GaugeChartArcConditionalFormattingFormProperties>({
		});

	}


	/** <p>A line chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html">Using line charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface LineChartVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: LineChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A line chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html">Using line charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface LineChartVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateLineChartVisualFormGroup() {
		return new FormGroup<LineChartVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a line chart. */
	export interface LineChartConfiguration {
		FieldWells?: LineChartFieldWells;
		SortConfiguration?: LineChartSortConfiguration;
		ForecastConfigurations?: Array<ForecastConfiguration>;
		Type?: LineChartType;
		SmallMultiplesOptions?: SmallMultiplesOptions;
		XAxisDisplayOptions?: AxisDisplayOptions;
		XAxisLabelOptions?: ChartAxisLabelOptions;
		PrimaryYAxisDisplayOptions?: LineSeriesAxisDisplayOptions;
		PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;
		SecondaryYAxisDisplayOptions?: LineSeriesAxisDisplayOptions;
		SecondaryYAxisLabelOptions?: ChartAxisLabelOptions;
		DefaultSeriesSettings?: LineChartDefaultSeriesSettings;
		Series?: Array<SeriesItem>;
		Legend?: LegendOptions;
		DataLabels?: DataLabelOptions;
		ReferenceLines?: Array<ReferenceLine>;
		Tooltip?: TooltipOptions;
		ContributionAnalysisDefaults?: Array<ContributionAnalysisDefault>;
		VisualPalette?: VisualPalette;
	}

	/** The configuration of a line chart. */
	export interface LineChartConfigurationFormProperties {
		Type: FormControl<LineChartType | null | undefined>,
	}
	export function CreateLineChartConfigurationFormGroup() {
		return new FormGroup<LineChartConfigurationFormProperties>({
			Type: new FormControl<LineChartType | null | undefined>(undefined),
		});

	}


	/** The field well configuration of a line chart. */
	export interface LineChartFieldWells {
		LineChartAggregatedFieldWells?: LineChartAggregatedFieldWells;
	}

	/** The field well configuration of a line chart. */
	export interface LineChartFieldWellsFormProperties {
	}
	export function CreateLineChartFieldWellsFormGroup() {
		return new FormGroup<LineChartFieldWellsFormProperties>({
		});

	}


	/** The field well configuration of a line chart. */
	export interface LineChartAggregatedFieldWells {
		Category?: Array<DimensionField>;
		Values?: Array<MeasureField>;
		Colors?: Array<DimensionField>;
		SmallMultiples?: Array<DimensionField>;
	}

	/** The field well configuration of a line chart. */
	export interface LineChartAggregatedFieldWellsFormProperties {
	}
	export function CreateLineChartAggregatedFieldWellsFormGroup() {
		return new FormGroup<LineChartAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a line chart. */
	export interface LineChartSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		CategoryItemsLimitConfiguration?: ItemsLimitConfiguration;
		ColorItemsLimitConfiguration?: ItemsLimitConfiguration;
		SmallMultiplesSort?: Array<FieldSortOptions>;
		SmallMultiplesLimitConfiguration?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a line chart. */
	export interface LineChartSortConfigurationFormProperties {
	}
	export function CreateLineChartSortConfigurationFormGroup() {
		return new FormGroup<LineChartSortConfigurationFormProperties>({
		});

	}


	/** The forecast configuration that is used in a line chart's display properties. */
	export interface ForecastConfiguration {
		ForecastProperties?: TimeBasedForecastProperties;
		Scenario?: ForecastScenario;
	}

	/** The forecast configuration that is used in a line chart's display properties. */
	export interface ForecastConfigurationFormProperties {
	}
	export function CreateForecastConfigurationFormGroup() {
		return new FormGroup<ForecastConfigurationFormProperties>({
		});

	}


	/** The forecast properties setup of a forecast in the line chart. */
	export interface TimeBasedForecastProperties {
		PeriodsForward?: number | null;
		PeriodsBackward?: number | null;
		UpperBoundary?: number | null;
		LowerBoundary?: number | null;
		PredictionInterval?: number | null;
		Seasonality?: number | null;
	}

	/** The forecast properties setup of a forecast in the line chart. */
	export interface TimeBasedForecastPropertiesFormProperties {
		PeriodsForward: FormControl<number | null | undefined>,
		PeriodsBackward: FormControl<number | null | undefined>,
		UpperBoundary: FormControl<number | null | undefined>,
		LowerBoundary: FormControl<number | null | undefined>,
		PredictionInterval: FormControl<number | null | undefined>,
		Seasonality: FormControl<number | null | undefined>,
	}
	export function CreateTimeBasedForecastPropertiesFormGroup() {
		return new FormGroup<TimeBasedForecastPropertiesFormProperties>({
			PeriodsForward: new FormControl<number | null | undefined>(undefined),
			PeriodsBackward: new FormControl<number | null | undefined>(undefined),
			UpperBoundary: new FormControl<number | null | undefined>(undefined),
			LowerBoundary: new FormControl<number | null | undefined>(undefined),
			PredictionInterval: new FormControl<number | null | undefined>(undefined),
			Seasonality: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The forecast scenario of a forecast in the line chart. */
	export interface ForecastScenario {
		WhatIfPointScenario?: WhatIfPointScenario;
		WhatIfRangeScenario?: WhatIfRangeScenario;
	}

	/** The forecast scenario of a forecast in the line chart. */
	export interface ForecastScenarioFormProperties {
	}
	export function CreateForecastScenarioFormGroup() {
		return new FormGroup<ForecastScenarioFormProperties>({
		});

	}


	/** Provides the forecast to meet the target for a particular date. */
	export interface WhatIfPointScenario {

		/** Required */
		Date: Date;

		/** Required */
		Value: number;
	}

	/** Provides the forecast to meet the target for a particular date. */
	export interface WhatIfPointScenarioFormProperties {

		/** Required */
		Date: FormControl<Date | null | undefined>,

		/** Required */
		Value: FormControl<number | null | undefined>,
	}
	export function CreateWhatIfPointScenarioFormGroup() {
		return new FormGroup<WhatIfPointScenarioFormProperties>({
			Date: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Provides the forecast to meet the target for a particular date range. */
	export interface WhatIfRangeScenario {

		/** Required */
		StartDate: Date;

		/** Required */
		EndDate: Date;

		/** Required */
		Value: number;
	}

	/** Provides the forecast to meet the target for a particular date range. */
	export interface WhatIfRangeScenarioFormProperties {

		/** Required */
		StartDate: FormControl<Date | null | undefined>,

		/** Required */
		EndDate: FormControl<Date | null | undefined>,

		/** Required */
		Value: FormControl<number | null | undefined>,
	}
	export function CreateWhatIfRangeScenarioFormGroup() {
		return new FormGroup<WhatIfRangeScenarioFormProperties>({
			StartDate: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			EndDate: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum LineChartType { LINE = 0, AREA = 1, STACKED_AREA = 2 }


	/** The series axis configuration of a line chart. */
	export interface LineSeriesAxisDisplayOptions {
		AxisOptions?: AxisDisplayOptions;
		MissingDataConfigurations?: Array<MissingDataConfiguration>;
	}

	/** The series axis configuration of a line chart. */
	export interface LineSeriesAxisDisplayOptionsFormProperties {
	}
	export function CreateLineSeriesAxisDisplayOptionsFormGroup() {
		return new FormGroup<LineSeriesAxisDisplayOptionsFormProperties>({
		});

	}


	/** The configuration options that determine how missing data is treated during the rendering of a line chart. */
	export interface MissingDataConfiguration {
		TreatmentOption?: MissingDataTreatmentOption;
	}

	/** The configuration options that determine how missing data is treated during the rendering of a line chart. */
	export interface MissingDataConfigurationFormProperties {
		TreatmentOption: FormControl<MissingDataTreatmentOption | null | undefined>,
	}
	export function CreateMissingDataConfigurationFormGroup() {
		return new FormGroup<MissingDataConfigurationFormProperties>({
			TreatmentOption: new FormControl<MissingDataTreatmentOption | null | undefined>(undefined),
		});

	}

	export enum MissingDataTreatmentOption { INTERPOLATE = 0, SHOW_AS_ZERO = 1, SHOW_AS_BLANK = 2 }


	/** The options that determine the default presentation of all line series in <code>LineChartVisual</code>. */
	export interface LineChartDefaultSeriesSettings {
		AxisBinding?: AxisBinding;
		LineStyleSettings?: LineChartLineStyleSettings;
		MarkerStyleSettings?: LineChartMarkerStyleSettings;
	}

	/** The options that determine the default presentation of all line series in <code>LineChartVisual</code>. */
	export interface LineChartDefaultSeriesSettingsFormProperties {
		AxisBinding: FormControl<AxisBinding | null | undefined>,
	}
	export function CreateLineChartDefaultSeriesSettingsFormGroup() {
		return new FormGroup<LineChartDefaultSeriesSettingsFormProperties>({
			AxisBinding: new FormControl<AxisBinding | null | undefined>(undefined),
		});

	}


	/** Line styles options for a line series in <code>LineChartVisual</code>. */
	export interface LineChartLineStyleSettings {
		LineVisibility?: Visibility;
		LineInterpolation?: LineInterpolation;
		LineStyle?: LineChartLineStyle;
		LineWidth?: string;
	}

	/** Line styles options for a line series in <code>LineChartVisual</code>. */
	export interface LineChartLineStyleSettingsFormProperties {
		LineVisibility: FormControl<Visibility | null | undefined>,
		LineInterpolation: FormControl<LineInterpolation | null | undefined>,
		LineStyle: FormControl<LineChartLineStyle | null | undefined>,
		LineWidth: FormControl<string | null | undefined>,
	}
	export function CreateLineChartLineStyleSettingsFormGroup() {
		return new FormGroup<LineChartLineStyleSettingsFormProperties>({
			LineVisibility: new FormControl<Visibility | null | undefined>(undefined),
			LineInterpolation: new FormControl<LineInterpolation | null | undefined>(undefined),
			LineStyle: new FormControl<LineChartLineStyle | null | undefined>(undefined),
			LineWidth: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum LineInterpolation { LINEAR = 0, SMOOTH = 1, STEPPED = 2 }

	export enum LineChartLineStyle { SOLID = 0, DOTTED = 1, DASHED = 2 }


	/** Marker styles options for a line series in <code>LineChartVisual</code>. */
	export interface LineChartMarkerStyleSettings {
		MarkerVisibility?: Visibility;
		MarkerShape?: LineChartMarkerShape;
		MarkerSize?: string;
		MarkerColor?: string;
	}

	/** Marker styles options for a line series in <code>LineChartVisual</code>. */
	export interface LineChartMarkerStyleSettingsFormProperties {
		MarkerVisibility: FormControl<Visibility | null | undefined>,
		MarkerShape: FormControl<LineChartMarkerShape | null | undefined>,
		MarkerSize: FormControl<string | null | undefined>,
		MarkerColor: FormControl<string | null | undefined>,
	}
	export function CreateLineChartMarkerStyleSettingsFormGroup() {
		return new FormGroup<LineChartMarkerStyleSettingsFormProperties>({
			MarkerVisibility: new FormControl<Visibility | null | undefined>(undefined),
			MarkerShape: new FormControl<LineChartMarkerShape | null | undefined>(undefined),
			MarkerSize: new FormControl<string | null | undefined>(undefined),
			MarkerColor: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum LineChartMarkerShape { CIRCLE = 0, TRIANGLE = 1, SQUARE = 2, DIAMOND = 3, ROUNDED_SQUARE = 4 }


	/** <p>The series item configuration of a line chart.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface SeriesItem {
		FieldSeriesItem?: FieldSeriesItem;
		DataFieldSeriesItem?: DataFieldSeriesItem;
	}

	/** <p>The series item configuration of a line chart.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface SeriesItemFormProperties {
	}
	export function CreateSeriesItemFormGroup() {
		return new FormGroup<SeriesItemFormProperties>({
		});

	}


	/** The field series item configuration of a line chart. */
	export interface FieldSeriesItem {

		/** Required */
		FieldId: string;

		/** Required */
		AxisBinding: AxisBinding;
		Settings?: LineChartSeriesSettings;
	}

	/** The field series item configuration of a line chart. */
	export interface FieldSeriesItemFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,

		/** Required */
		AxisBinding: FormControl<AxisBinding | null | undefined>,
	}
	export function CreateFieldSeriesItemFormGroup() {
		return new FormGroup<FieldSeriesItemFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AxisBinding: new FormControl<AxisBinding | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The options that determine the presentation of a line series in the visual */
	export interface LineChartSeriesSettings {
		LineStyleSettings?: LineChartLineStyleSettings;
		MarkerStyleSettings?: LineChartMarkerStyleSettings;
	}

	/** The options that determine the presentation of a line series in the visual */
	export interface LineChartSeriesSettingsFormProperties {
	}
	export function CreateLineChartSeriesSettingsFormGroup() {
		return new FormGroup<LineChartSeriesSettingsFormProperties>({
		});

	}


	/** The data field series item configuration of a line chart. */
	export interface DataFieldSeriesItem {

		/** Required */
		FieldId: string;
		FieldValue?: string;

		/** Required */
		AxisBinding: AxisBinding;
		Settings?: LineChartSeriesSettings;
	}

	/** The data field series item configuration of a line chart. */
	export interface DataFieldSeriesItemFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
		FieldValue: FormControl<string | null | undefined>,

		/** Required */
		AxisBinding: FormControl<AxisBinding | null | undefined>,
	}
	export function CreateDataFieldSeriesItemFormGroup() {
		return new FormGroup<DataFieldSeriesItemFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FieldValue: new FormControl<string | null | undefined>(undefined),
			AxisBinding: new FormControl<AxisBinding | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>A heat map.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html">Using heat maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface HeatMapVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: HeatMapConfiguration;
		ColumnHierarchies?: Array<ColumnHierarchy>;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A heat map.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html">Using heat maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface HeatMapVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateHeatMapVisualFormGroup() {
		return new FormGroup<HeatMapVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a heat map. */
	export interface HeatMapConfiguration {
		FieldWells?: HeatMapFieldWells;
		SortConfiguration?: HeatMapSortConfiguration;
		RowLabelOptions?: ChartAxisLabelOptions;
		ColumnLabelOptions?: ChartAxisLabelOptions;
		ColorScale?: ColorScale;
		Legend?: LegendOptions;
		DataLabels?: DataLabelOptions;
		Tooltip?: TooltipOptions;
	}

	/** The configuration of a heat map. */
	export interface HeatMapConfigurationFormProperties {
	}
	export function CreateHeatMapConfigurationFormGroup() {
		return new FormGroup<HeatMapConfigurationFormProperties>({
		});

	}


	/** <p>The field well configuration of a heat map.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface HeatMapFieldWells {
		HeatMapAggregatedFieldWells?: HeatMapAggregatedFieldWells;
	}

	/** <p>The field well configuration of a heat map.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface HeatMapFieldWellsFormProperties {
	}
	export function CreateHeatMapFieldWellsFormGroup() {
		return new FormGroup<HeatMapFieldWellsFormProperties>({
		});

	}


	/** The aggregated field wells of a heat map. */
	export interface HeatMapAggregatedFieldWells {
		Rows?: Array<DimensionField>;
		Columns?: Array<DimensionField>;
		Values?: Array<MeasureField>;
	}

	/** The aggregated field wells of a heat map. */
	export interface HeatMapAggregatedFieldWellsFormProperties {
	}
	export function CreateHeatMapAggregatedFieldWellsFormGroup() {
		return new FormGroup<HeatMapAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a heat map. */
	export interface HeatMapSortConfiguration {
		HeatMapRowSort?: Array<FieldSortOptions>;
		HeatMapColumnSort?: Array<FieldSortOptions>;
		HeatMapRowItemsLimitConfiguration?: ItemsLimitConfiguration;
		HeatMapColumnItemsLimitConfiguration?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a heat map. */
	export interface HeatMapSortConfigurationFormProperties {
	}
	export function CreateHeatMapSortConfigurationFormGroup() {
		return new FormGroup<HeatMapSortConfigurationFormProperties>({
		});

	}


	/** Determines the color scale that is applied to the visual. */
	export interface ColorScale {

		/** Required */
		Colors: Array<DataColor>;

		/** Required */
		ColorFillType: ColorFillType;
		NullValueColor?: DataColor;
	}

	/** Determines the color scale that is applied to the visual. */
	export interface ColorScaleFormProperties {

		/** Required */
		ColorFillType: FormControl<ColorFillType | null | undefined>,
	}
	export function CreateColorScaleFormGroup() {
		return new FormGroup<ColorScaleFormProperties>({
			ColorFillType: new FormControl<ColorFillType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Determines the color that is applied to a particular data value. */
	export interface DataColor {
		Color?: string;
		DataValue?: number | null;
	}

	/** Determines the color that is applied to a particular data value. */
	export interface DataColorFormProperties {
		Color: FormControl<string | null | undefined>,
		DataValue: FormControl<number | null | undefined>,
	}
	export function CreateDataColorFormGroup() {
		return new FormGroup<DataColorFormProperties>({
			Color: new FormControl<string | null | undefined>(undefined),
			DataValue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum ColorFillType { DISCRETE = 0, GRADIENT = 1 }


	/** <p>A tree map.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html">Using tree maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface TreeMapVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: TreeMapConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A tree map.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html">Using tree maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface TreeMapVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateTreeMapVisualFormGroup() {
		return new FormGroup<TreeMapVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a tree map. */
	export interface TreeMapConfiguration {
		FieldWells?: TreeMapFieldWells;
		SortConfiguration?: TreeMapSortConfiguration;
		GroupLabelOptions?: ChartAxisLabelOptions;
		SizeLabelOptions?: ChartAxisLabelOptions;
		ColorLabelOptions?: ChartAxisLabelOptions;
		ColorScale?: ColorScale;
		Legend?: LegendOptions;
		DataLabels?: DataLabelOptions;
		Tooltip?: TooltipOptions;
	}

	/** The configuration of a tree map. */
	export interface TreeMapConfigurationFormProperties {
	}
	export function CreateTreeMapConfigurationFormGroup() {
		return new FormGroup<TreeMapConfigurationFormProperties>({
		});

	}


	/** <p>The field wells of a tree map.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TreeMapFieldWells {
		TreeMapAggregatedFieldWells?: TreeMapAggregatedFieldWells;
	}

	/** <p>The field wells of a tree map.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TreeMapFieldWellsFormProperties {
	}
	export function CreateTreeMapFieldWellsFormGroup() {
		return new FormGroup<TreeMapFieldWellsFormProperties>({
		});

	}


	/** Aggregated field wells of a tree map. */
	export interface TreeMapAggregatedFieldWells {
		Groups?: Array<DimensionField>;
		Sizes?: Array<MeasureField>;
		Colors?: Array<MeasureField>;
	}

	/** Aggregated field wells of a tree map. */
	export interface TreeMapAggregatedFieldWellsFormProperties {
	}
	export function CreateTreeMapAggregatedFieldWellsFormGroup() {
		return new FormGroup<TreeMapAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a tree map. */
	export interface TreeMapSortConfiguration {
		TreeMapSort?: Array<FieldSortOptions>;
		TreeMapGroupItemsLimitConfiguration?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a tree map. */
	export interface TreeMapSortConfigurationFormProperties {
	}
	export function CreateTreeMapSortConfigurationFormGroup() {
		return new FormGroup<TreeMapSortConfigurationFormProperties>({
		});

	}


	/** <p>A geospatial map or a points on map visual.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html">Creating point maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface GeospatialMapVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: GeospatialMapConfiguration;
		ColumnHierarchies?: Array<ColumnHierarchy>;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A geospatial map or a points on map visual.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html">Creating point maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface GeospatialMapVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateGeospatialMapVisualFormGroup() {
		return new FormGroup<GeospatialMapVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>GeospatialMapVisual</code>. */
	export interface GeospatialMapConfiguration {
		FieldWells?: GeospatialMapFieldWells;
		Legend?: LegendOptions;
		Tooltip?: TooltipOptions;
		WindowOptions?: GeospatialWindowOptions;
		MapStyleOptions?: GeospatialMapStyleOptions;
		PointStyleOptions?: GeospatialPointStyleOptions;

		/** The visual display options for the visual palette. */
		VisualPalette?: VisualPalette;
	}

	/** The configuration of a <code>GeospatialMapVisual</code>. */
	export interface GeospatialMapConfigurationFormProperties {
	}
	export function CreateGeospatialMapConfigurationFormGroup() {
		return new FormGroup<GeospatialMapConfigurationFormProperties>({
		});

	}


	/** <p>The field wells of a <code>GeospatialMapVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface GeospatialMapFieldWells {
		GeospatialMapAggregatedFieldWells?: GeospatialMapAggregatedFieldWells;
	}

	/** <p>The field wells of a <code>GeospatialMapVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface GeospatialMapFieldWellsFormProperties {
	}
	export function CreateGeospatialMapFieldWellsFormGroup() {
		return new FormGroup<GeospatialMapFieldWellsFormProperties>({
		});

	}


	/** The aggregated field wells for a geospatial map. */
	export interface GeospatialMapAggregatedFieldWells {
		Geospatial?: Array<DimensionField>;
		Values?: Array<MeasureField>;
		Colors?: Array<DimensionField>;
	}

	/** The aggregated field wells for a geospatial map. */
	export interface GeospatialMapAggregatedFieldWellsFormProperties {
	}
	export function CreateGeospatialMapAggregatedFieldWellsFormGroup() {
		return new FormGroup<GeospatialMapAggregatedFieldWellsFormProperties>({
		});

	}


	/** The window options of the geospatial map visual. */
	export interface GeospatialWindowOptions {
		Bounds?: GeospatialCoordinateBounds;
		MapZoomMode?: MapZoomMode;
	}

	/** The window options of the geospatial map visual. */
	export interface GeospatialWindowOptionsFormProperties {
		MapZoomMode: FormControl<MapZoomMode | null | undefined>,
	}
	export function CreateGeospatialWindowOptionsFormGroup() {
		return new FormGroup<GeospatialWindowOptionsFormProperties>({
			MapZoomMode: new FormControl<MapZoomMode | null | undefined>(undefined),
		});

	}


	/** The bound options (north, south, west, east) of the geospatial window options. */
	export interface GeospatialCoordinateBounds {

		/** Required */
		North: number;

		/** Required */
		South: number;

		/** Required */
		West: number;

		/** Required */
		East: number;
	}

	/** The bound options (north, south, west, east) of the geospatial window options. */
	export interface GeospatialCoordinateBoundsFormProperties {

		/** Required */
		North: FormControl<number | null | undefined>,

		/** Required */
		South: FormControl<number | null | undefined>,

		/** Required */
		West: FormControl<number | null | undefined>,

		/** Required */
		East: FormControl<number | null | undefined>,
	}
	export function CreateGeospatialCoordinateBoundsFormGroup() {
		return new FormGroup<GeospatialCoordinateBoundsFormProperties>({
			North: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			South: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			West: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			East: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum MapZoomMode { AUTO = 0, MANUAL = 1 }


	/** The map style options of the geospatial map. */
	export interface GeospatialMapStyleOptions {
		BaseMapStyle?: BaseMapStyleType;
	}

	/** The map style options of the geospatial map. */
	export interface GeospatialMapStyleOptionsFormProperties {
		BaseMapStyle: FormControl<BaseMapStyleType | null | undefined>,
	}
	export function CreateGeospatialMapStyleOptionsFormGroup() {
		return new FormGroup<GeospatialMapStyleOptionsFormProperties>({
			BaseMapStyle: new FormControl<BaseMapStyleType | null | undefined>(undefined),
		});

	}

	export enum BaseMapStyleType { LIGHT_GRAY = 0, DARK_GRAY = 1, STREET = 2, IMAGERY = 3 }


	/** The point style of the geospatial map. */
	export interface GeospatialPointStyleOptions {
		SelectedPointStyle?: GeospatialSelectedPointStyle;
		ClusterMarkerConfiguration?: ClusterMarkerConfiguration;
		HeatmapConfiguration?: GeospatialHeatmapConfiguration;
	}

	/** The point style of the geospatial map. */
	export interface GeospatialPointStyleOptionsFormProperties {
		SelectedPointStyle: FormControl<GeospatialSelectedPointStyle | null | undefined>,
	}
	export function CreateGeospatialPointStyleOptionsFormGroup() {
		return new FormGroup<GeospatialPointStyleOptionsFormProperties>({
			SelectedPointStyle: new FormControl<GeospatialSelectedPointStyle | null | undefined>(undefined),
		});

	}

	export enum GeospatialSelectedPointStyle { POINT = 0, CLUSTER = 1, HEATMAP = 2 }


	/** The cluster marker configuration of the geospatial map selected point style. */
	export interface ClusterMarkerConfiguration {
		ClusterMarker?: ClusterMarker;
	}

	/** The cluster marker configuration of the geospatial map selected point style. */
	export interface ClusterMarkerConfigurationFormProperties {
	}
	export function CreateClusterMarkerConfigurationFormGroup() {
		return new FormGroup<ClusterMarkerConfigurationFormProperties>({
		});

	}


	/** The cluster marker that is a part of the cluster marker configuration. */
	export interface ClusterMarker {
		SimpleClusterMarker?: SimpleClusterMarker;
	}

	/** The cluster marker that is a part of the cluster marker configuration. */
	export interface ClusterMarkerFormProperties {
	}
	export function CreateClusterMarkerFormGroup() {
		return new FormGroup<ClusterMarkerFormProperties>({
		});

	}


	/** The simple cluster marker of the cluster marker. */
	export interface SimpleClusterMarker {
		Color?: string;
	}

	/** The simple cluster marker of the cluster marker. */
	export interface SimpleClusterMarkerFormProperties {
		Color: FormControl<string | null | undefined>,
	}
	export function CreateSimpleClusterMarkerFormGroup() {
		return new FormGroup<SimpleClusterMarkerFormProperties>({
			Color: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The heatmap configuration of the geospatial point style. */
	export interface GeospatialHeatmapConfiguration {
		HeatmapColor?: GeospatialHeatmapColorScale;
	}

	/** The heatmap configuration of the geospatial point style. */
	export interface GeospatialHeatmapConfigurationFormProperties {
	}
	export function CreateGeospatialHeatmapConfigurationFormGroup() {
		return new FormGroup<GeospatialHeatmapConfigurationFormProperties>({
		});

	}


	/** The color scale specification for the heatmap point style. */
	export interface GeospatialHeatmapColorScale {
		Colors?: Array<GeospatialHeatmapDataColor>;
	}

	/** The color scale specification for the heatmap point style. */
	export interface GeospatialHeatmapColorScaleFormProperties {
	}
	export function CreateGeospatialHeatmapColorScaleFormGroup() {
		return new FormGroup<GeospatialHeatmapColorScaleFormProperties>({
		});

	}


	/** The color to be used in the heatmap point style. */
	export interface GeospatialHeatmapDataColor {

		/** Required */
		Color: string;
	}

	/** The color to be used in the heatmap point style. */
	export interface GeospatialHeatmapDataColorFormProperties {

		/** Required */
		Color: FormControl<string | null | undefined>,
	}
	export function CreateGeospatialHeatmapDataColorFormGroup() {
		return new FormGroup<GeospatialHeatmapDataColorFormProperties>({
			Color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>A filled map.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html">Creating filled maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface FilledMapVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: FilledMapConfiguration;
		ConditionalFormatting?: FilledMapConditionalFormatting;
		ColumnHierarchies?: Array<ColumnHierarchy>;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A filled map.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html">Creating filled maps</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface FilledMapVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateFilledMapVisualFormGroup() {
		return new FormGroup<FilledMapVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for a <code>FilledMapVisual</code>. */
	export interface FilledMapConfiguration {
		FieldWells?: FilledMapFieldWells;
		SortConfiguration?: FilledMapSortConfiguration;
		Legend?: LegendOptions;
		Tooltip?: TooltipOptions;
		WindowOptions?: GeospatialWindowOptions;
		MapStyleOptions?: GeospatialMapStyleOptions;
	}

	/** The configuration for a <code>FilledMapVisual</code>. */
	export interface FilledMapConfigurationFormProperties {
	}
	export function CreateFilledMapConfigurationFormGroup() {
		return new FormGroup<FilledMapConfigurationFormProperties>({
		});

	}


	/** <p>The field wells of a <code>FilledMapVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilledMapFieldWells {
		FilledMapAggregatedFieldWells?: FilledMapAggregatedFieldWells;
	}

	/** <p>The field wells of a <code>FilledMapVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilledMapFieldWellsFormProperties {
	}
	export function CreateFilledMapFieldWellsFormGroup() {
		return new FormGroup<FilledMapFieldWellsFormProperties>({
		});

	}


	/** The aggregated field well of the filled map. */
	export interface FilledMapAggregatedFieldWells {
		Geospatial?: Array<DimensionField>;
		Values?: Array<MeasureField>;
	}

	/** The aggregated field well of the filled map. */
	export interface FilledMapAggregatedFieldWellsFormProperties {
	}
	export function CreateFilledMapAggregatedFieldWellsFormGroup() {
		return new FormGroup<FilledMapAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a <code>FilledMapVisual</code>. */
	export interface FilledMapSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
	}

	/** The sort configuration of a <code>FilledMapVisual</code>. */
	export interface FilledMapSortConfigurationFormProperties {
	}
	export function CreateFilledMapSortConfigurationFormGroup() {
		return new FormGroup<FilledMapSortConfigurationFormProperties>({
		});

	}


	/** The conditional formatting of a <code>FilledMapVisual</code>. */
	export interface FilledMapConditionalFormatting {

		/** Required */
		ConditionalFormattingOptions: Array<FilledMapConditionalFormattingOption>;
	}

	/** The conditional formatting of a <code>FilledMapVisual</code>. */
	export interface FilledMapConditionalFormattingFormProperties {
	}
	export function CreateFilledMapConditionalFormattingFormGroup() {
		return new FormGroup<FilledMapConditionalFormattingFormProperties>({
		});

	}


	/** Conditional formatting options of a <code>FilledMapVisual</code>. */
	export interface FilledMapConditionalFormattingOption {

		/** Required */
		Shape: FilledMapShapeConditionalFormatting;
	}

	/** Conditional formatting options of a <code>FilledMapVisual</code>. */
	export interface FilledMapConditionalFormattingOptionFormProperties {
	}
	export function CreateFilledMapConditionalFormattingOptionFormGroup() {
		return new FormGroup<FilledMapConditionalFormattingOptionFormProperties>({
		});

	}


	/** The conditional formatting that determines the shape of the filled map. */
	export interface FilledMapShapeConditionalFormatting {

		/** Required */
		FieldId: string;
		Format?: ShapeConditionalFormat;
	}

	/** The conditional formatting that determines the shape of the filled map. */
	export interface FilledMapShapeConditionalFormattingFormProperties {

		/** Required */
		FieldId: FormControl<string | null | undefined>,
	}
	export function CreateFilledMapShapeConditionalFormattingFormGroup() {
		return new FormGroup<FilledMapShapeConditionalFormattingFormProperties>({
			FieldId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The shape conditional formatting of a filled map visual. */
	export interface ShapeConditionalFormat {

		/** Required */
		BackgroundColor: ConditionalFormattingColor;
	}

	/** The shape conditional formatting of a filled map visual. */
	export interface ShapeConditionalFormatFormProperties {
	}
	export function CreateShapeConditionalFormatFormGroup() {
		return new FormGroup<ShapeConditionalFormatFormProperties>({
		});

	}


	/** <p>A funnel chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html">Using funnel charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface FunnelChartVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: FunnelChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A funnel chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html">Using funnel charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface FunnelChartVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateFunnelChartVisualFormGroup() {
		return new FormGroup<FunnelChartVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>FunnelChartVisual</code>. */
	export interface FunnelChartConfiguration {
		FieldWells?: FunnelChartFieldWells;
		SortConfiguration?: FunnelChartSortConfiguration;
		CategoryLabelOptions?: ChartAxisLabelOptions;
		ValueLabelOptions?: ChartAxisLabelOptions;
		Tooltip?: TooltipOptions;
		DataLabelOptions?: FunnelChartDataLabelOptions;
		VisualPalette?: VisualPalette;
	}

	/** The configuration of a <code>FunnelChartVisual</code>. */
	export interface FunnelChartConfigurationFormProperties {
	}
	export function CreateFunnelChartConfigurationFormGroup() {
		return new FormGroup<FunnelChartConfigurationFormProperties>({
		});

	}


	/** <p>The field well configuration of a <code>FunnelChartVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FunnelChartFieldWells {
		FunnelChartAggregatedFieldWells?: FunnelChartAggregatedFieldWells;
	}

	/** <p>The field well configuration of a <code>FunnelChartVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FunnelChartFieldWellsFormProperties {
	}
	export function CreateFunnelChartFieldWellsFormGroup() {
		return new FormGroup<FunnelChartFieldWellsFormProperties>({
		});

	}


	/** The field well configuration of a <code>FunnelChartVisual</code>. */
	export interface FunnelChartAggregatedFieldWells {
		Category?: Array<DimensionField>;
		Values?: Array<MeasureField>;
	}

	/** The field well configuration of a <code>FunnelChartVisual</code>. */
	export interface FunnelChartAggregatedFieldWellsFormProperties {
	}
	export function CreateFunnelChartAggregatedFieldWellsFormGroup() {
		return new FormGroup<FunnelChartAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a <code>FunnelChartVisual</code>. */
	export interface FunnelChartSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		CategoryItemsLimit?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a <code>FunnelChartVisual</code>. */
	export interface FunnelChartSortConfigurationFormProperties {
	}
	export function CreateFunnelChartSortConfigurationFormGroup() {
		return new FormGroup<FunnelChartSortConfigurationFormProperties>({
		});

	}


	/** The options that determine the presentation of the data labels. */
	export interface FunnelChartDataLabelOptions {
		Visibility?: Visibility;
		CategoryLabelVisibility?: Visibility;
		MeasureLabelVisibility?: Visibility;
		Position?: DataLabelPosition;
		LabelFontConfiguration?: FontConfiguration;
		LabelColor?: string;
		MeasureDataLabelStyle?: FunnelChartMeasureDataLabelStyle;
	}

	/** The options that determine the presentation of the data labels. */
	export interface FunnelChartDataLabelOptionsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		CategoryLabelVisibility: FormControl<Visibility | null | undefined>,
		MeasureLabelVisibility: FormControl<Visibility | null | undefined>,
		Position: FormControl<DataLabelPosition | null | undefined>,
		LabelColor: FormControl<string | null | undefined>,
		MeasureDataLabelStyle: FormControl<FunnelChartMeasureDataLabelStyle | null | undefined>,
	}
	export function CreateFunnelChartDataLabelOptionsFormGroup() {
		return new FormGroup<FunnelChartDataLabelOptionsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			CategoryLabelVisibility: new FormControl<Visibility | null | undefined>(undefined),
			MeasureLabelVisibility: new FormControl<Visibility | null | undefined>(undefined),
			Position: new FormControl<DataLabelPosition | null | undefined>(undefined),
			LabelColor: new FormControl<string | null | undefined>(undefined),
			MeasureDataLabelStyle: new FormControl<FunnelChartMeasureDataLabelStyle | null | undefined>(undefined),
		});

	}

	export enum FunnelChartMeasureDataLabelStyle { VALUE_ONLY = 0, PERCENTAGE_BY_FIRST_STAGE = 1, PERCENTAGE_BY_PREVIOUS_STAGE = 2, VALUE_AND_PERCENTAGE_BY_FIRST_STAGE = 3, VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE = 4 }


	/** <p>A scatter plot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html">Using scatter plots</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface ScatterPlotVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: ScatterPlotConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A scatter plot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html">Using scatter plots</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface ScatterPlotVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateScatterPlotVisualFormGroup() {
		return new FormGroup<ScatterPlotVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a scatter plot. */
	export interface ScatterPlotConfiguration {
		FieldWells?: ScatterPlotFieldWells;
		XAxisLabelOptions?: ChartAxisLabelOptions;
		XAxisDisplayOptions?: AxisDisplayOptions;
		YAxisLabelOptions?: ChartAxisLabelOptions;
		YAxisDisplayOptions?: AxisDisplayOptions;
		Legend?: LegendOptions;
		DataLabels?: DataLabelOptions;
		Tooltip?: TooltipOptions;
		VisualPalette?: VisualPalette;
	}

	/** The configuration of a scatter plot. */
	export interface ScatterPlotConfigurationFormProperties {
	}
	export function CreateScatterPlotConfigurationFormGroup() {
		return new FormGroup<ScatterPlotConfigurationFormProperties>({
		});

	}


	/** <p>The field well configuration of a scatter plot.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ScatterPlotFieldWells {
		ScatterPlotCategoricallyAggregatedFieldWells?: ScatterPlotCategoricallyAggregatedFieldWells;
		ScatterPlotUnaggregatedFieldWells?: ScatterPlotUnaggregatedFieldWells;
	}

	/** <p>The field well configuration of a scatter plot.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ScatterPlotFieldWellsFormProperties {
	}
	export function CreateScatterPlotFieldWellsFormGroup() {
		return new FormGroup<ScatterPlotFieldWellsFormProperties>({
		});

	}


	/** The aggregated field well of a scatter plot. */
	export interface ScatterPlotCategoricallyAggregatedFieldWells {
		XAxis?: Array<MeasureField>;
		YAxis?: Array<MeasureField>;
		Category?: Array<DimensionField>;
		Size?: Array<MeasureField>;
		Label?: Array<DimensionField>;
	}

	/** The aggregated field well of a scatter plot. */
	export interface ScatterPlotCategoricallyAggregatedFieldWellsFormProperties {
	}
	export function CreateScatterPlotCategoricallyAggregatedFieldWellsFormGroup() {
		return new FormGroup<ScatterPlotCategoricallyAggregatedFieldWellsFormProperties>({
		});

	}


	/** The unaggregated field wells of a scatter plot. */
	export interface ScatterPlotUnaggregatedFieldWells {
		XAxis?: Array<DimensionField>;
		YAxis?: Array<DimensionField>;
		Size?: Array<MeasureField>;
		Category?: Array<DimensionField>;
		Label?: Array<DimensionField>;
	}

	/** The unaggregated field wells of a scatter plot. */
	export interface ScatterPlotUnaggregatedFieldWellsFormProperties {
	}
	export function CreateScatterPlotUnaggregatedFieldWellsFormGroup() {
		return new FormGroup<ScatterPlotUnaggregatedFieldWellsFormProperties>({
		});

	}


	/** <p>A combo chart.</p> <p>The <code>ComboChartVisual</code> includes stacked bar combo charts and clustered bar combo charts</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html">Using combo charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface ComboChartVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: ComboChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A combo chart.</p> <p>The <code>ComboChartVisual</code> includes stacked bar combo charts and clustered bar combo charts</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html">Using combo charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface ComboChartVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateComboChartVisualFormGroup() {
		return new FormGroup<ComboChartVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>ComboChartVisual</code>. */
	export interface ComboChartConfiguration {
		FieldWells?: ComboChartFieldWells;
		SortConfiguration?: ComboChartSortConfiguration;
		BarsArrangement?: BarsArrangement;
		CategoryAxis?: AxisDisplayOptions;
		CategoryLabelOptions?: ChartAxisLabelOptions;
		PrimaryYAxisDisplayOptions?: AxisDisplayOptions;
		PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;
		SecondaryYAxisDisplayOptions?: AxisDisplayOptions;
		SecondaryYAxisLabelOptions?: ChartAxisLabelOptions;
		ColorLabelOptions?: ChartAxisLabelOptions;
		Legend?: LegendOptions;
		BarDataLabels?: DataLabelOptions;
		LineDataLabels?: DataLabelOptions;
		Tooltip?: TooltipOptions;
		ReferenceLines?: Array<ReferenceLine>;
		VisualPalette?: VisualPalette;
	}

	/** The configuration of a <code>ComboChartVisual</code>. */
	export interface ComboChartConfigurationFormProperties {
		BarsArrangement: FormControl<BarsArrangement | null | undefined>,
	}
	export function CreateComboChartConfigurationFormGroup() {
		return new FormGroup<ComboChartConfigurationFormProperties>({
			BarsArrangement: new FormControl<BarsArrangement | null | undefined>(undefined),
		});

	}


	/** <p>The field wells of the visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ComboChartFieldWells {
		ComboChartAggregatedFieldWells?: ComboChartAggregatedFieldWells;
	}

	/** <p>The field wells of the visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ComboChartFieldWellsFormProperties {
	}
	export function CreateComboChartFieldWellsFormGroup() {
		return new FormGroup<ComboChartFieldWellsFormProperties>({
		});

	}


	/** The aggregated field wells of a combo chart. */
	export interface ComboChartAggregatedFieldWells {
		Category?: Array<DimensionField>;
		BarValues?: Array<MeasureField>;
		Colors?: Array<DimensionField>;
		LineValues?: Array<MeasureField>;
	}

	/** The aggregated field wells of a combo chart. */
	export interface ComboChartAggregatedFieldWellsFormProperties {
	}
	export function CreateComboChartAggregatedFieldWellsFormGroup() {
		return new FormGroup<ComboChartAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a <code>ComboChartVisual</code>. */
	export interface ComboChartSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		CategoryItemsLimit?: ItemsLimitConfiguration;
		ColorSort?: Array<FieldSortOptions>;
		ColorItemsLimit?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a <code>ComboChartVisual</code>. */
	export interface ComboChartSortConfigurationFormProperties {
	}
	export function CreateComboChartSortConfigurationFormGroup() {
		return new FormGroup<ComboChartSortConfigurationFormProperties>({
		});

	}


	/** <p>A box plot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html">Using box plots</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface BoxPlotVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: BoxPlotChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A box plot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html">Using box plots</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface BoxPlotVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateBoxPlotVisualFormGroup() {
		return new FormGroup<BoxPlotVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>BoxPlotVisual</code>. */
	export interface BoxPlotChartConfiguration {
		FieldWells?: BoxPlotFieldWells;
		SortConfiguration?: BoxPlotSortConfiguration;
		BoxPlotOptions?: BoxPlotOptions;
		CategoryAxis?: AxisDisplayOptions;
		CategoryLabelOptions?: ChartAxisLabelOptions;
		PrimaryYAxisDisplayOptions?: AxisDisplayOptions;
		PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;

		/** The options for the legend setup of a visual. */
		Legend?: LegendOptions;
		Tooltip?: TooltipOptions;
		ReferenceLines?: Array<ReferenceLine>;
		VisualPalette?: VisualPalette;
	}

	/** The configuration of a <code>BoxPlotVisual</code>. */
	export interface BoxPlotChartConfigurationFormProperties {
	}
	export function CreateBoxPlotChartConfigurationFormGroup() {
		return new FormGroup<BoxPlotChartConfigurationFormProperties>({
		});

	}


	/** <p>The field wells of a <code>BoxPlotVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface BoxPlotFieldWells {
		BoxPlotAggregatedFieldWells?: BoxPlotAggregatedFieldWells;
	}

	/** <p>The field wells of a <code>BoxPlotVisual</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface BoxPlotFieldWellsFormProperties {
	}
	export function CreateBoxPlotFieldWellsFormGroup() {
		return new FormGroup<BoxPlotFieldWellsFormProperties>({
		});

	}


	/** The aggregated field well for a box plot. */
	export interface BoxPlotAggregatedFieldWells {
		GroupBy?: Array<DimensionField>;
		Values?: Array<MeasureField>;
	}

	/** The aggregated field well for a box plot. */
	export interface BoxPlotAggregatedFieldWellsFormProperties {
	}
	export function CreateBoxPlotAggregatedFieldWellsFormGroup() {
		return new FormGroup<BoxPlotAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a <code>BoxPlotVisual</code>. */
	export interface BoxPlotSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		PaginationConfiguration?: PaginationConfiguration;
	}

	/** The sort configuration of a <code>BoxPlotVisual</code>. */
	export interface BoxPlotSortConfigurationFormProperties {
	}
	export function CreateBoxPlotSortConfigurationFormGroup() {
		return new FormGroup<BoxPlotSortConfigurationFormProperties>({
		});

	}


	/** The options of a box plot visual. */
	export interface BoxPlotOptions {
		StyleOptions?: BoxPlotStyleOptions;
		OutlierVisibility?: Visibility;
		AllDataPointsVisibility?: Visibility;
	}

	/** The options of a box plot visual. */
	export interface BoxPlotOptionsFormProperties {
		OutlierVisibility: FormControl<Visibility | null | undefined>,
		AllDataPointsVisibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateBoxPlotOptionsFormGroup() {
		return new FormGroup<BoxPlotOptionsFormProperties>({
			OutlierVisibility: new FormControl<Visibility | null | undefined>(undefined),
			AllDataPointsVisibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The style options of the box plot. */
	export interface BoxPlotStyleOptions {
		FillStyle?: BoxPlotFillStyle;
	}

	/** The style options of the box plot. */
	export interface BoxPlotStyleOptionsFormProperties {
		FillStyle: FormControl<BoxPlotFillStyle | null | undefined>,
	}
	export function CreateBoxPlotStyleOptionsFormGroup() {
		return new FormGroup<BoxPlotStyleOptionsFormProperties>({
			FillStyle: new FormControl<BoxPlotFillStyle | null | undefined>(undefined),
		});

	}

	export enum BoxPlotFillStyle { SOLID = 0, TRANSPARENT = 1 }


	/** <p>A waterfall chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html">Using waterfall charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface WaterfallVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: WaterfallChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A waterfall chart.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html">Using waterfall charts</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface WaterfallVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateWaterfallVisualFormGroup() {
		return new FormGroup<WaterfallVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for a waterfall visual. */
	export interface WaterfallChartConfiguration {
		FieldWells?: WaterfallChartFieldWells;
		SortConfiguration?: WaterfallChartSortConfiguration;
		WaterfallChartOptions?: WaterfallChartOptions;
		CategoryAxisLabelOptions?: ChartAxisLabelOptions;
		CategoryAxisDisplayOptions?: AxisDisplayOptions;
		PrimaryYAxisLabelOptions?: ChartAxisLabelOptions;
		PrimaryYAxisDisplayOptions?: AxisDisplayOptions;
		Legend?: LegendOptions;
		DataLabels?: DataLabelOptions;
		VisualPalette?: VisualPalette;
	}

	/** The configuration for a waterfall visual. */
	export interface WaterfallChartConfigurationFormProperties {
	}
	export function CreateWaterfallChartConfigurationFormGroup() {
		return new FormGroup<WaterfallChartConfigurationFormProperties>({
		});

	}


	/** The field well configuration of a waterfall visual. */
	export interface WaterfallChartFieldWells {
		WaterfallChartAggregatedFieldWells?: WaterfallChartAggregatedFieldWells;
	}

	/** The field well configuration of a waterfall visual. */
	export interface WaterfallChartFieldWellsFormProperties {
	}
	export function CreateWaterfallChartFieldWellsFormGroup() {
		return new FormGroup<WaterfallChartFieldWellsFormProperties>({
		});

	}


	/** The field well configuration of a waterfall visual. */
	export interface WaterfallChartAggregatedFieldWells {
		Categories?: Array<DimensionField>;
		Values?: Array<MeasureField>;
		Breakdowns?: Array<DimensionField>;
	}

	/** The field well configuration of a waterfall visual. */
	export interface WaterfallChartAggregatedFieldWellsFormProperties {
	}
	export function CreateWaterfallChartAggregatedFieldWellsFormGroup() {
		return new FormGroup<WaterfallChartAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a waterfall visual. */
	export interface WaterfallChartSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		BreakdownItemsLimit?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a waterfall visual. */
	export interface WaterfallChartSortConfigurationFormProperties {
	}
	export function CreateWaterfallChartSortConfigurationFormGroup() {
		return new FormGroup<WaterfallChartSortConfigurationFormProperties>({
		});

	}


	/** The options that determine the presentation of a waterfall visual. */
	export interface WaterfallChartOptions {
		TotalBarLabel?: string;
	}

	/** The options that determine the presentation of a waterfall visual. */
	export interface WaterfallChartOptionsFormProperties {
		TotalBarLabel: FormControl<string | null | undefined>,
	}
	export function CreateWaterfallChartOptionsFormGroup() {
		return new FormGroup<WaterfallChartOptionsFormProperties>({
			TotalBarLabel: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** <p>A histogram.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html">Using histograms</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface HistogramVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: HistogramConfiguration;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A histogram.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html">Using histograms</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface HistogramVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateHistogramVisualFormGroup() {
		return new FormGroup<HistogramVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for a <code>HistogramVisual</code>. */
	export interface HistogramConfiguration {
		FieldWells?: HistogramFieldWells;
		XAxisDisplayOptions?: AxisDisplayOptions;
		XAxisLabelOptions?: ChartAxisLabelOptions;
		YAxisDisplayOptions?: AxisDisplayOptions;
		BinOptions?: HistogramBinOptions;
		DataLabels?: DataLabelOptions;
		Tooltip?: TooltipOptions;
		VisualPalette?: VisualPalette;
	}

	/** The configuration for a <code>HistogramVisual</code>. */
	export interface HistogramConfigurationFormProperties {
	}
	export function CreateHistogramConfigurationFormGroup() {
		return new FormGroup<HistogramConfigurationFormProperties>({
		});

	}


	/** The field well configuration of a histogram. */
	export interface HistogramFieldWells {
		HistogramAggregatedFieldWells?: HistogramAggregatedFieldWells;
	}

	/** The field well configuration of a histogram. */
	export interface HistogramFieldWellsFormProperties {
	}
	export function CreateHistogramFieldWellsFormGroup() {
		return new FormGroup<HistogramFieldWellsFormProperties>({
		});

	}


	/** The field well configuration of a histogram. */
	export interface HistogramAggregatedFieldWells {
		Values?: Array<MeasureField>;
	}

	/** The field well configuration of a histogram. */
	export interface HistogramAggregatedFieldWellsFormProperties {
	}
	export function CreateHistogramAggregatedFieldWellsFormGroup() {
		return new FormGroup<HistogramAggregatedFieldWellsFormProperties>({
		});

	}


	/** The options that determine the presentation of histogram bins. */
	export interface HistogramBinOptions {
		SelectedBinType?: HistogramBinType;
		BinCount?: BinCountOptions;
		BinWidth?: BinWidthOptions;
		StartValue?: number | null;
	}

	/** The options that determine the presentation of histogram bins. */
	export interface HistogramBinOptionsFormProperties {
		SelectedBinType: FormControl<HistogramBinType | null | undefined>,
		StartValue: FormControl<number | null | undefined>,
	}
	export function CreateHistogramBinOptionsFormGroup() {
		return new FormGroup<HistogramBinOptionsFormProperties>({
			SelectedBinType: new FormControl<HistogramBinType | null | undefined>(undefined),
			StartValue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum HistogramBinType { BIN_COUNT = 0, BIN_WIDTH = 1 }


	/** The options that determine the bin count of a histogram. */
	export interface BinCountOptions {
		Value?: number | null;
	}

	/** The options that determine the bin count of a histogram. */
	export interface BinCountOptionsFormProperties {
		Value: FormControl<number | null | undefined>,
	}
	export function CreateBinCountOptionsFormGroup() {
		return new FormGroup<BinCountOptionsFormProperties>({
			Value: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The options that determine the bin width of a histogram. */
	export interface BinWidthOptions {
		Value?: number | null;
		BinCountLimit?: number | null;
	}

	/** The options that determine the bin width of a histogram. */
	export interface BinWidthOptionsFormProperties {
		Value: FormControl<number | null | undefined>,
		BinCountLimit: FormControl<number | null | undefined>,
	}
	export function CreateBinWidthOptionsFormGroup() {
		return new FormGroup<BinWidthOptionsFormProperties>({
			Value: new FormControl<number | null | undefined>(undefined),
			BinCountLimit: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** <p>A word cloud.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html">Using word clouds</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface WordCloudVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: WordCloudChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** <p>A word cloud.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html">Using word clouds</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface WordCloudVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateWordCloudVisualFormGroup() {
		return new FormGroup<WordCloudVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a word cloud visual. */
	export interface WordCloudChartConfiguration {
		FieldWells?: WordCloudFieldWells;
		SortConfiguration?: WordCloudSortConfiguration;
		CategoryLabelOptions?: ChartAxisLabelOptions;
		WordCloudOptions?: WordCloudOptions;
	}

	/** The configuration of a word cloud visual. */
	export interface WordCloudChartConfigurationFormProperties {
	}
	export function CreateWordCloudChartConfigurationFormGroup() {
		return new FormGroup<WordCloudChartConfigurationFormProperties>({
		});

	}


	/** <p>The field wells of a word cloud visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface WordCloudFieldWells {
		WordCloudAggregatedFieldWells?: WordCloudAggregatedFieldWells;
	}

	/** <p>The field wells of a word cloud visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface WordCloudFieldWellsFormProperties {
	}
	export function CreateWordCloudFieldWellsFormGroup() {
		return new FormGroup<WordCloudFieldWellsFormProperties>({
		});

	}


	/** The aggregated field wells of a word cloud. */
	export interface WordCloudAggregatedFieldWells {
		GroupBy?: Array<DimensionField>;
		Size?: Array<MeasureField>;
	}

	/** The aggregated field wells of a word cloud. */
	export interface WordCloudAggregatedFieldWellsFormProperties {
	}
	export function CreateWordCloudAggregatedFieldWellsFormGroup() {
		return new FormGroup<WordCloudAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a word cloud visual. */
	export interface WordCloudSortConfiguration {
		CategoryItemsLimit?: ItemsLimitConfiguration;
		CategorySort?: Array<FieldSortOptions>;
	}

	/** The sort configuration of a word cloud visual. */
	export interface WordCloudSortConfigurationFormProperties {
	}
	export function CreateWordCloudSortConfigurationFormGroup() {
		return new FormGroup<WordCloudSortConfigurationFormProperties>({
		});

	}


	/** The word cloud options for a word cloud visual. */
	export interface WordCloudOptions {
		WordOrientation?: WordCloudWordOrientation;
		WordScaling?: WordCloudWordScaling;
		CloudLayout?: WordCloudCloudLayout;
		WordCasing?: WordCloudWordCasing;
		WordPadding?: WordCloudWordPadding;
		MaximumStringLength?: number | null;
	}

	/** The word cloud options for a word cloud visual. */
	export interface WordCloudOptionsFormProperties {
		WordOrientation: FormControl<WordCloudWordOrientation | null | undefined>,
		WordScaling: FormControl<WordCloudWordScaling | null | undefined>,
		CloudLayout: FormControl<WordCloudCloudLayout | null | undefined>,
		WordCasing: FormControl<WordCloudWordCasing | null | undefined>,
		WordPadding: FormControl<WordCloudWordPadding | null | undefined>,
		MaximumStringLength: FormControl<number | null | undefined>,
	}
	export function CreateWordCloudOptionsFormGroup() {
		return new FormGroup<WordCloudOptionsFormProperties>({
			WordOrientation: new FormControl<WordCloudWordOrientation | null | undefined>(undefined),
			WordScaling: new FormControl<WordCloudWordScaling | null | undefined>(undefined),
			CloudLayout: new FormControl<WordCloudCloudLayout | null | undefined>(undefined),
			WordCasing: new FormControl<WordCloudWordCasing | null | undefined>(undefined),
			WordPadding: new FormControl<WordCloudWordPadding | null | undefined>(undefined),
			MaximumStringLength: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum WordCloudWordOrientation { HORIZONTAL = 0, HORIZONTAL_AND_VERTICAL = 1 }

	export enum WordCloudWordScaling { EMPHASIZE = 0, NORMAL = 1 }

	export enum WordCloudCloudLayout { FLUID = 0, NORMAL = 1 }

	export enum WordCloudWordCasing { LOWER_CASE = 0, EXISTING_CASE = 1 }

	export enum WordCloudWordPadding { NONE = 0, SMALL = 1, MEDIUM = 2, LARGE = 3 }


	/** <p>An insight visual.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html">Working with insights</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface InsightVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		InsightConfiguration?: InsightConfiguration;
		Actions?: Array<VisualCustomAction>;

		/** Required */
		DataSetIdentifier: string;
	}

	/** <p>An insight visual.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html">Working with insights</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface InsightVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,

		/** Required */
		DataSetIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateInsightVisualFormGroup() {
		return new FormGroup<InsightVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DataSetIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of an insight visual. */
	export interface InsightConfiguration {
		Computations?: Array<Computation>;
		CustomNarrative?: CustomNarrativeOptions;
	}

	/** The configuration of an insight visual. */
	export interface InsightConfigurationFormProperties {
	}
	export function CreateInsightConfigurationFormGroup() {
		return new FormGroup<InsightConfigurationFormProperties>({
		});

	}


	/** <p>The computation union that is used in an insight visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface Computation {
		TopBottomRanked?: TopBottomRankedComputation;
		TopBottomMovers?: TopBottomMoversComputation;
		TotalAggregation?: TotalAggregationComputation;
		MaximumMinimum?: MaximumMinimumComputation;
		MetricComparison?: MetricComparisonComputation;
		PeriodOverPeriod?: PeriodOverPeriodComputation;
		PeriodToDate?: PeriodToDateComputation;
		GrowthRate?: GrowthRateComputation;
		UniqueValues?: UniqueValuesComputation;
		Forecast?: ForecastComputation;
	}

	/** <p>The computation union that is used in an insight visual.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ComputationFormProperties {
	}
	export function CreateComputationFormGroup() {
		return new FormGroup<ComputationFormProperties>({
		});

	}


	/** The top ranked and bottom ranked computation configuration. */
	export interface TopBottomRankedComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Category: DimensionField;
		Value?: MeasureField;
		ResultSize?: number | null;

		/** Required */
		Type: TopBottomComputationType;
	}

	/** The top ranked and bottom ranked computation configuration. */
	export interface TopBottomRankedComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		ResultSize: FormControl<number | null | undefined>,

		/** Required */
		Type: FormControl<TopBottomComputationType | null | undefined>,
	}
	export function CreateTopBottomRankedComputationFormGroup() {
		return new FormGroup<TopBottomRankedComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
			ResultSize: new FormControl<number | null | undefined>(undefined),
			Type: new FormControl<TopBottomComputationType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TopBottomComputationType { TOP = 0, BOTTOM = 1 }


	/** The top movers and bottom movers computation setup. */
	export interface TopBottomMoversComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Time: DimensionField;

		/** Required */
		Category: DimensionField;
		Value?: MeasureField;
		MoverSize?: number | null;
		SortOrder?: TopBottomSortOrder;

		/** Required */
		Type: TopBottomComputationType;
	}

	/** The top movers and bottom movers computation setup. */
	export interface TopBottomMoversComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		MoverSize: FormControl<number | null | undefined>,
		SortOrder: FormControl<TopBottomSortOrder | null | undefined>,

		/** Required */
		Type: FormControl<TopBottomComputationType | null | undefined>,
	}
	export function CreateTopBottomMoversComputationFormGroup() {
		return new FormGroup<TopBottomMoversComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
			MoverSize: new FormControl<number | null | undefined>(undefined),
			SortOrder: new FormControl<TopBottomSortOrder | null | undefined>(undefined),
			Type: new FormControl<TopBottomComputationType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum TopBottomSortOrder { PERCENT_DIFFERENCE = 0, ABSOLUTE_DIFFERENCE = 1 }


	/** The total aggregation computation configuration. */
	export interface TotalAggregationComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Value: MeasureField;
	}

	/** The total aggregation computation configuration. */
	export interface TotalAggregationComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateTotalAggregationComputationFormGroup() {
		return new FormGroup<TotalAggregationComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The maximum and minimum computation configuration. */
	export interface MaximumMinimumComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Time: DimensionField;
		Value?: MeasureField;

		/** Required */
		Type: MaximumMinimumComputationType;
	}

	/** The maximum and minimum computation configuration. */
	export interface MaximumMinimumComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<MaximumMinimumComputationType | null | undefined>,
	}
	export function CreateMaximumMinimumComputationFormGroup() {
		return new FormGroup<MaximumMinimumComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<MaximumMinimumComputationType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum MaximumMinimumComputationType { MAXIMUM = 0, MINIMUM = 1 }


	/** The metric comparison computation configuration. */
	export interface MetricComparisonComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Time: DimensionField;

		/** Required */
		FromValue: MeasureField;

		/** Required */
		TargetValue: MeasureField;
	}

	/** The metric comparison computation configuration. */
	export interface MetricComparisonComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateMetricComparisonComputationFormGroup() {
		return new FormGroup<MetricComparisonComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The period over period computation configuration. */
	export interface PeriodOverPeriodComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Time: DimensionField;
		Value?: MeasureField;
	}

	/** The period over period computation configuration. */
	export interface PeriodOverPeriodComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreatePeriodOverPeriodComputationFormGroup() {
		return new FormGroup<PeriodOverPeriodComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The period to date computation configuration. */
	export interface PeriodToDateComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Time: DimensionField;
		Value?: MeasureField;
		PeriodTimeGranularity?: TimeGranularity;
	}

	/** The period to date computation configuration. */
	export interface PeriodToDateComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		PeriodTimeGranularity: FormControl<TimeGranularity | null | undefined>,
	}
	export function CreatePeriodToDateComputationFormGroup() {
		return new FormGroup<PeriodToDateComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
			PeriodTimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
		});

	}


	/** The growth rate computation configuration. */
	export interface GrowthRateComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Time: DimensionField;
		Value?: MeasureField;
		PeriodSize?: number | null;
	}

	/** The growth rate computation configuration. */
	export interface GrowthRateComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		PeriodSize: FormControl<number | null | undefined>,
	}
	export function CreateGrowthRateComputationFormGroup() {
		return new FormGroup<GrowthRateComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
			PeriodSize: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The unique values computation configuration. */
	export interface UniqueValuesComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Category: DimensionField;
	}

	/** The unique values computation configuration. */
	export interface UniqueValuesComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateUniqueValuesComputationFormGroup() {
		return new FormGroup<UniqueValuesComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The forecast computation configuration. */
	export interface ForecastComputation {

		/** Required */
		ComputationId: string;
		Name?: string;

		/** Required */
		Time: DimensionField;
		Value?: MeasureField;
		PeriodsForward?: number | null;
		PeriodsBackward?: number | null;
		UpperBoundary?: number | null;
		LowerBoundary?: number | null;
		PredictionInterval?: number | null;
		Seasonality?: ForecastComputationSeasonality;
		CustomSeasonalityValue?: number | null;
	}

	/** The forecast computation configuration. */
	export interface ForecastComputationFormProperties {

		/** Required */
		ComputationId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		PeriodsForward: FormControl<number | null | undefined>,
		PeriodsBackward: FormControl<number | null | undefined>,
		UpperBoundary: FormControl<number | null | undefined>,
		LowerBoundary: FormControl<number | null | undefined>,
		PredictionInterval: FormControl<number | null | undefined>,
		Seasonality: FormControl<ForecastComputationSeasonality | null | undefined>,
		CustomSeasonalityValue: FormControl<number | null | undefined>,
	}
	export function CreateForecastComputationFormGroup() {
		return new FormGroup<ForecastComputationFormProperties>({
			ComputationId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
			PeriodsForward: new FormControl<number | null | undefined>(undefined),
			PeriodsBackward: new FormControl<number | null | undefined>(undefined),
			UpperBoundary: new FormControl<number | null | undefined>(undefined),
			LowerBoundary: new FormControl<number | null | undefined>(undefined),
			PredictionInterval: new FormControl<number | null | undefined>(undefined),
			Seasonality: new FormControl<ForecastComputationSeasonality | null | undefined>(undefined),
			CustomSeasonalityValue: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum ForecastComputationSeasonality { AUTOMATIC = 0, CUSTOM = 1 }


	/** The custom narrative options. */
	export interface CustomNarrativeOptions {

		/** Required */
		Narrative: string;
	}

	/** The custom narrative options. */
	export interface CustomNarrativeOptionsFormProperties {

		/** Required */
		Narrative: FormControl<string | null | undefined>,
	}
	export function CreateCustomNarrativeOptionsFormGroup() {
		return new FormGroup<CustomNarrativeOptionsFormProperties>({
			Narrative: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>A sankey diagram.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html">Using Sankey diagrams</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface SankeyDiagramVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: SankeyDiagramChartConfiguration;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>A sankey diagram.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html">Using Sankey diagrams</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface SankeyDiagramVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateSankeyDiagramVisualFormGroup() {
		return new FormGroup<SankeyDiagramVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a sankey diagram. */
	export interface SankeyDiagramChartConfiguration {
		FieldWells?: SankeyDiagramFieldWells;
		SortConfiguration?: SankeyDiagramSortConfiguration;
		DataLabels?: DataLabelOptions;
	}

	/** The configuration of a sankey diagram. */
	export interface SankeyDiagramChartConfigurationFormProperties {
	}
	export function CreateSankeyDiagramChartConfigurationFormGroup() {
		return new FormGroup<SankeyDiagramChartConfigurationFormProperties>({
		});

	}


	/** The field well configuration of a sankey diagram. */
	export interface SankeyDiagramFieldWells {
		SankeyDiagramAggregatedFieldWells?: SankeyDiagramAggregatedFieldWells;
	}

	/** The field well configuration of a sankey diagram. */
	export interface SankeyDiagramFieldWellsFormProperties {
	}
	export function CreateSankeyDiagramFieldWellsFormGroup() {
		return new FormGroup<SankeyDiagramFieldWellsFormProperties>({
		});

	}


	/** The field well configuration of a sankey diagram. */
	export interface SankeyDiagramAggregatedFieldWells {
		Source?: Array<DimensionField>;
		Destination?: Array<DimensionField>;
		Weight?: Array<MeasureField>;
	}

	/** The field well configuration of a sankey diagram. */
	export interface SankeyDiagramAggregatedFieldWellsFormProperties {
	}
	export function CreateSankeyDiagramAggregatedFieldWellsFormGroup() {
		return new FormGroup<SankeyDiagramAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a sankey diagram. */
	export interface SankeyDiagramSortConfiguration {
		WeightSort?: Array<FieldSortOptions>;
		SourceItemsLimit?: ItemsLimitConfiguration;
		DestinationItemsLimit?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a sankey diagram. */
	export interface SankeyDiagramSortConfigurationFormProperties {
	}
	export function CreateSankeyDiagramSortConfigurationFormGroup() {
		return new FormGroup<SankeyDiagramSortConfigurationFormProperties>({
		});

	}


	/** <p>A visual that contains custom content.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html">Using custom visual content</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface CustomContentVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: CustomContentConfiguration;
		Actions?: Array<VisualCustomAction>;

		/** Required */
		DataSetIdentifier: string;
	}

	/** <p>A visual that contains custom content.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html">Using custom visual content</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface CustomContentVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,

		/** Required */
		DataSetIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateCustomContentVisualFormGroup() {
		return new FormGroup<CustomContentVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DataSetIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>CustomContentVisual</code>. */
	export interface CustomContentConfiguration {
		ContentUrl?: string;
		ContentType?: CustomContentType;
		ImageScaling?: CustomContentImageScalingConfiguration;
	}

	/** The configuration of a <code>CustomContentVisual</code>. */
	export interface CustomContentConfigurationFormProperties {
		ContentUrl: FormControl<string | null | undefined>,
		ContentType: FormControl<CustomContentType | null | undefined>,
		ImageScaling: FormControl<CustomContentImageScalingConfiguration | null | undefined>,
	}
	export function CreateCustomContentConfigurationFormGroup() {
		return new FormGroup<CustomContentConfigurationFormProperties>({
			ContentUrl: new FormControl<string | null | undefined>(undefined),
			ContentType: new FormControl<CustomContentType | null | undefined>(undefined),
			ImageScaling: new FormControl<CustomContentImageScalingConfiguration | null | undefined>(undefined),
		});

	}

	export enum CustomContentType { IMAGE = 0, OTHER_EMBEDDED_CONTENT = 1 }

	export enum CustomContentImageScalingConfiguration { FIT_TO_HEIGHT = 0, FIT_TO_WIDTH = 1, DO_NOT_SCALE = 2, SCALE_TO_VISUAL = 3 }


	/** <p>An empty visual.</p> <p>Empty visuals are used in layouts but have not been configured to show any data. A new visual created in the Amazon QuickSight console is considered an <code>EmptyVisual</code> until a visual type is selected.</p> */
	export interface EmptyVisual {

		/** Required */
		VisualId: string;

		/** Required */
		DataSetIdentifier: string;
		Actions?: Array<VisualCustomAction>;
	}

	/** <p>An empty visual.</p> <p>Empty visuals are used in layouts but have not been configured to show any data. A new visual created in the Amazon QuickSight console is considered an <code>EmptyVisual</code> until a visual type is selected.</p> */
	export interface EmptyVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,

		/** Required */
		DataSetIdentifier: FormControl<string | null | undefined>,
	}
	export function CreateEmptyVisualFormGroup() {
		return new FormGroup<EmptyVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DataSetIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A radar chart visual. */
	export interface RadarChartVisual {

		/** Required */
		VisualId: string;
		Title?: VisualTitleLabelOptions;
		Subtitle?: VisualSubtitleLabelOptions;
		ChartConfiguration?: RadarChartConfiguration;
		Actions?: Array<VisualCustomAction>;
		ColumnHierarchies?: Array<ColumnHierarchy>;
	}

	/** A radar chart visual. */
	export interface RadarChartVisualFormProperties {

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateRadarChartVisualFormGroup() {
		return new FormGroup<RadarChartVisualFormProperties>({
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of a <code>RadarChartVisual</code>. */
	export interface RadarChartConfiguration {
		FieldWells?: RadarChartFieldWells;
		SortConfiguration?: RadarChartSortConfiguration;
		Shape?: RadarChartShape;
		BaseSeriesSettings?: RadarChartSeriesSettings;
		StartAngle?: number | null;
		VisualPalette?: VisualPalette;
		AlternateBandColorsVisibility?: Visibility;
		AlternateBandEvenColor?: string;
		AlternateBandOddColor?: string;
		CategoryAxis?: AxisDisplayOptions;
		CategoryLabelOptions?: ChartAxisLabelOptions;
		ColorAxis?: AxisDisplayOptions;
		ColorLabelOptions?: ChartAxisLabelOptions;
		Legend?: LegendOptions;
		AxesRangeScale?: RadarChartAxesRangeScale;
	}

	/** The configuration of a <code>RadarChartVisual</code>. */
	export interface RadarChartConfigurationFormProperties {
		Shape: FormControl<RadarChartShape | null | undefined>,
		StartAngle: FormControl<number | null | undefined>,
		AlternateBandColorsVisibility: FormControl<Visibility | null | undefined>,
		AlternateBandEvenColor: FormControl<string | null | undefined>,
		AlternateBandOddColor: FormControl<string | null | undefined>,
		AxesRangeScale: FormControl<RadarChartAxesRangeScale | null | undefined>,
	}
	export function CreateRadarChartConfigurationFormGroup() {
		return new FormGroup<RadarChartConfigurationFormProperties>({
			Shape: new FormControl<RadarChartShape | null | undefined>(undefined),
			StartAngle: new FormControl<number | null | undefined>(undefined),
			AlternateBandColorsVisibility: new FormControl<Visibility | null | undefined>(undefined),
			AlternateBandEvenColor: new FormControl<string | null | undefined>(undefined),
			AlternateBandOddColor: new FormControl<string | null | undefined>(undefined),
			AxesRangeScale: new FormControl<RadarChartAxesRangeScale | null | undefined>(undefined),
		});

	}


	/** The field wells of a radar chart visual. */
	export interface RadarChartFieldWells {
		RadarChartAggregatedFieldWells?: RadarChartAggregatedFieldWells;
	}

	/** The field wells of a radar chart visual. */
	export interface RadarChartFieldWellsFormProperties {
	}
	export function CreateRadarChartFieldWellsFormGroup() {
		return new FormGroup<RadarChartFieldWellsFormProperties>({
		});

	}


	/** The aggregated field well configuration of a <code>RadarChartVisual</code>. */
	export interface RadarChartAggregatedFieldWells {
		Category?: Array<DimensionField>;
		Color?: Array<DimensionField>;
		Values?: Array<MeasureField>;
	}

	/** The aggregated field well configuration of a <code>RadarChartVisual</code>. */
	export interface RadarChartAggregatedFieldWellsFormProperties {
	}
	export function CreateRadarChartAggregatedFieldWellsFormGroup() {
		return new FormGroup<RadarChartAggregatedFieldWellsFormProperties>({
		});

	}


	/** The sort configuration of a <code>RadarChartVisual</code>. */
	export interface RadarChartSortConfiguration {
		CategorySort?: Array<FieldSortOptions>;
		CategoryItemsLimit?: ItemsLimitConfiguration;
		ColorSort?: Array<FieldSortOptions>;
		ColorItemsLimit?: ItemsLimitConfiguration;
	}

	/** The sort configuration of a <code>RadarChartVisual</code>. */
	export interface RadarChartSortConfigurationFormProperties {
	}
	export function CreateRadarChartSortConfigurationFormGroup() {
		return new FormGroup<RadarChartSortConfigurationFormProperties>({
		});

	}

	export enum RadarChartShape { CIRCLE = 0, POLYGON = 1 }


	/** The series settings of a radar chart. */
	export interface RadarChartSeriesSettings {
		AreaStyleSettings?: RadarChartAreaStyleSettings;
	}

	/** The series settings of a radar chart. */
	export interface RadarChartSeriesSettingsFormProperties {
	}
	export function CreateRadarChartSeriesSettingsFormGroup() {
		return new FormGroup<RadarChartSeriesSettingsFormProperties>({
		});

	}


	/** The configured style settings of a radar chart. */
	export interface RadarChartAreaStyleSettings {
		Visibility?: Visibility;
	}

	/** The configured style settings of a radar chart. */
	export interface RadarChartAreaStyleSettingsFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateRadarChartAreaStyleSettingsFormGroup() {
		return new FormGroup<RadarChartAreaStyleSettingsFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}

	export enum RadarChartAxesRangeScale { AUTO = 0, INDEPENDENT = 1, SHARED = 2 }


	/** A text box. */
	export interface SheetTextBox {

		/** Required */
		SheetTextBoxId: string;
		Content?: string;
	}

	/** A text box. */
	export interface SheetTextBoxFormProperties {

		/** Required */
		SheetTextBoxId: FormControl<string | null | undefined>,
		Content: FormControl<string | null | undefined>,
	}
	export function CreateSheetTextBoxFormGroup() {
		return new FormGroup<SheetTextBoxFormProperties>({
			SheetTextBoxId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Content: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** <p>A <code>Layout</code> defines the placement of elements within a sheet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface Layout {

		/** Required */
		Configuration: LayoutConfiguration;
	}

	/** <p>A <code>Layout</code> defines the placement of elements within a sheet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html">Types of layout</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface LayoutFormProperties {
	}
	export function CreateLayoutFormGroup() {
		return new FormGroup<LayoutFormProperties>({
		});

	}


	/** <p>The configuration that determines what the type of layout will be used on a sheet.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface LayoutConfiguration {
		GridLayout?: GridLayoutConfiguration;
		FreeFormLayout?: FreeFormLayoutConfiguration;
		SectionBasedLayout?: SectionBasedLayoutConfiguration;
	}

	/** <p>The configuration that determines what the type of layout will be used on a sheet.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface LayoutConfigurationFormProperties {
	}
	export function CreateLayoutConfigurationFormGroup() {
		return new FormGroup<LayoutConfigurationFormProperties>({
		});

	}


	/** <p>The configuration for a grid layout. Also called a tiled layout.</p> <p>Visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size.</p> */
	export interface GridLayoutConfiguration {

		/** Required */
		Elements: Array<GridLayoutElement>;

		/** Configuration options for the canvas of a grid layout. */
		CanvasSizeOptions?: GridLayoutCanvasSizeOptions;
	}

	/** <p>The configuration for a grid layout. Also called a tiled layout.</p> <p>Visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size.</p> */
	export interface GridLayoutConfigurationFormProperties {
	}
	export function CreateGridLayoutConfigurationFormGroup() {
		return new FormGroup<GridLayoutConfigurationFormProperties>({
		});

	}


	/** An element within a grid layout. */
	export interface GridLayoutElement {

		/** Required */
		ElementId: string;

		/** Required */
		ElementType: LayoutElementType;
		ColumnIndex?: number | null;

		/** Required */
		ColumnSpan: number;
		RowIndex?: number | null;

		/** Required */
		RowSpan: number;
	}

	/** An element within a grid layout. */
	export interface GridLayoutElementFormProperties {

		/** Required */
		ElementId: FormControl<string | null | undefined>,

		/** Required */
		ElementType: FormControl<LayoutElementType | null | undefined>,
		ColumnIndex: FormControl<number | null | undefined>,

		/** Required */
		ColumnSpan: FormControl<number | null | undefined>,
		RowIndex: FormControl<number | null | undefined>,

		/** Required */
		RowSpan: FormControl<number | null | undefined>,
	}
	export function CreateGridLayoutElementFormGroup() {
		return new FormGroup<GridLayoutElementFormProperties>({
			ElementId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ElementType: new FormControl<LayoutElementType | null | undefined>(undefined, [Validators.required]),
			ColumnIndex: new FormControl<number | null | undefined>(undefined),
			ColumnSpan: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			RowIndex: new FormControl<number | null | undefined>(undefined),
			RowSpan: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum LayoutElementType { VISUAL = 0, FILTER_CONTROL = 1, PARAMETER_CONTROL = 2, TEXT_BOX = 3 }


	/** Configuration options for the canvas of a grid layout. */
	export interface GridLayoutCanvasSizeOptions {
		ScreenCanvasSizeOptions?: GridLayoutScreenCanvasSizeOptions;
	}

	/** Configuration options for the canvas of a grid layout. */
	export interface GridLayoutCanvasSizeOptionsFormProperties {
	}
	export function CreateGridLayoutCanvasSizeOptionsFormGroup() {
		return new FormGroup<GridLayoutCanvasSizeOptionsFormProperties>({
		});

	}


	/** The options that determine the sizing of the canvas used in a grid layout. */
	export interface GridLayoutScreenCanvasSizeOptions {

		/** Required */
		ResizeOption: ResizeOption;
		OptimizedViewPortWidth?: string;
	}

	/** The options that determine the sizing of the canvas used in a grid layout. */
	export interface GridLayoutScreenCanvasSizeOptionsFormProperties {

		/** Required */
		ResizeOption: FormControl<ResizeOption | null | undefined>,
		OptimizedViewPortWidth: FormControl<string | null | undefined>,
	}
	export function CreateGridLayoutScreenCanvasSizeOptionsFormGroup() {
		return new FormGroup<GridLayoutScreenCanvasSizeOptionsFormProperties>({
			ResizeOption: new FormControl<ResizeOption | null | undefined>(undefined, [Validators.required]),
			OptimizedViewPortWidth: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ResizeOption { FIXED = 0, RESPONSIVE = 1 }


	/** The configuration of a free-form layout. */
	export interface FreeFormLayoutConfiguration {

		/** Required */
		Elements: Array<FreeFormLayoutElement>;

		/** Configuration options for the canvas of a free-form layout. */
		CanvasSizeOptions?: FreeFormLayoutCanvasSizeOptions;
	}

	/** The configuration of a free-form layout. */
	export interface FreeFormLayoutConfigurationFormProperties {
	}
	export function CreateFreeFormLayoutConfigurationFormGroup() {
		return new FormGroup<FreeFormLayoutConfigurationFormProperties>({
		});

	}


	/** An element within a free-form layout. */
	export interface FreeFormLayoutElement {

		/** Required */
		ElementId: string;

		/** Required */
		ElementType: LayoutElementType;

		/** Required */
		XAxisLocation: string;

		/** Required */
		YAxisLocation: string;

		/** Required */
		Width: string;

		/** Required */
		Height: string;
		Visibility?: Visibility;
		RenderingRules?: Array<SheetElementRenderingRule>;
		BorderStyle?: FreeFormLayoutElementBorderStyle;
		SelectedBorderStyle?: FreeFormLayoutElementBorderStyle;
		BackgroundStyle?: FreeFormLayoutElementBackgroundStyle;
		LoadingAnimation?: LoadingAnimation;
	}

	/** An element within a free-form layout. */
	export interface FreeFormLayoutElementFormProperties {

		/** Required */
		ElementId: FormControl<string | null | undefined>,

		/** Required */
		ElementType: FormControl<LayoutElementType | null | undefined>,

		/** Required */
		XAxisLocation: FormControl<string | null | undefined>,

		/** Required */
		YAxisLocation: FormControl<string | null | undefined>,

		/** Required */
		Width: FormControl<string | null | undefined>,

		/** Required */
		Height: FormControl<string | null | undefined>,
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateFreeFormLayoutElementFormGroup() {
		return new FormGroup<FreeFormLayoutElementFormProperties>({
			ElementId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ElementType: new FormControl<LayoutElementType | null | undefined>(undefined, [Validators.required]),
			XAxisLocation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			YAxisLocation: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Width: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Height: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The rendering rules of a sheet that uses a free-form layout. */
	export interface SheetElementRenderingRule {

		/** Required */
		Expression: string;

		/** Required */
		ConfigurationOverrides: SheetElementConfigurationOverrides;
	}

	/** The rendering rules of a sheet that uses a free-form layout. */
	export interface SheetElementRenderingRuleFormProperties {

		/** Required */
		Expression: FormControl<string | null | undefined>,
	}
	export function CreateSheetElementRenderingRuleFormGroup() {
		return new FormGroup<SheetElementRenderingRuleFormProperties>({
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The override configuration of the rendering rules of a sheet. */
	export interface SheetElementConfigurationOverrides {
		Visibility?: Visibility;
	}

	/** The override configuration of the rendering rules of a sheet. */
	export interface SheetElementConfigurationOverridesFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateSheetElementConfigurationOverridesFormGroup() {
		return new FormGroup<SheetElementConfigurationOverridesFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** The background style configuration of a free-form layout element. */
	export interface FreeFormLayoutElementBorderStyle {
		Visibility?: Visibility;
		Color?: string;
	}

	/** The background style configuration of a free-form layout element. */
	export interface FreeFormLayoutElementBorderStyleFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		Color: FormControl<string | null | undefined>,
	}
	export function CreateFreeFormLayoutElementBorderStyleFormGroup() {
		return new FormGroup<FreeFormLayoutElementBorderStyleFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			Color: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The background style configuration of a free-form layout element. */
	export interface FreeFormLayoutElementBackgroundStyle {
		Visibility?: Visibility;
		Color?: string;
	}

	/** The background style configuration of a free-form layout element. */
	export interface FreeFormLayoutElementBackgroundStyleFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
		Color: FormControl<string | null | undefined>,
	}
	export function CreateFreeFormLayoutElementBackgroundStyleFormGroup() {
		return new FormGroup<FreeFormLayoutElementBackgroundStyleFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
			Color: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration of loading animation in free-form layout.  */
	export interface LoadingAnimation {
		Visibility?: Visibility;
	}

	/** The configuration of loading animation in free-form layout.  */
	export interface LoadingAnimationFormProperties {
		Visibility: FormControl<Visibility | null | undefined>,
	}
	export function CreateLoadingAnimationFormGroup() {
		return new FormGroup<LoadingAnimationFormProperties>({
			Visibility: new FormControl<Visibility | null | undefined>(undefined),
		});

	}


	/** Configuration options for the canvas of a free-form layout. */
	export interface FreeFormLayoutCanvasSizeOptions {
		ScreenCanvasSizeOptions?: FreeFormLayoutScreenCanvasSizeOptions;
	}

	/** Configuration options for the canvas of a free-form layout. */
	export interface FreeFormLayoutCanvasSizeOptionsFormProperties {
	}
	export function CreateFreeFormLayoutCanvasSizeOptionsFormGroup() {
		return new FormGroup<FreeFormLayoutCanvasSizeOptionsFormProperties>({
		});

	}


	/** The options that determine the sizing of the canvas used in a free-form layout. */
	export interface FreeFormLayoutScreenCanvasSizeOptions {

		/** Required */
		OptimizedViewPortWidth: string;
	}

	/** The options that determine the sizing of the canvas used in a free-form layout. */
	export interface FreeFormLayoutScreenCanvasSizeOptionsFormProperties {

		/** Required */
		OptimizedViewPortWidth: FormControl<string | null | undefined>,
	}
	export function CreateFreeFormLayoutScreenCanvasSizeOptionsFormGroup() {
		return new FormGroup<FreeFormLayoutScreenCanvasSizeOptionsFormProperties>({
			OptimizedViewPortWidth: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration for a section-based layout. */
	export interface SectionBasedLayoutConfiguration {

		/** Required */
		HeaderSections: Array<HeaderFooterSectionConfiguration>;

		/** Required */
		BodySections: Array<BodySectionConfiguration>;

		/** Required */
		FooterSections: Array<HeaderFooterSectionConfiguration>;

		/** Required */
		CanvasSizeOptions: SectionBasedLayoutCanvasSizeOptions;
	}

	/** The configuration for a section-based layout. */
	export interface SectionBasedLayoutConfigurationFormProperties {
	}
	export function CreateSectionBasedLayoutConfigurationFormGroup() {
		return new FormGroup<SectionBasedLayoutConfigurationFormProperties>({
		});

	}


	/** The configuration of a header or footer section. */
	export interface HeaderFooterSectionConfiguration {

		/** Required */
		SectionId: string;

		/** Required */
		Layout: SectionLayoutConfiguration;
		Style?: SectionStyle;
	}

	/** The configuration of a header or footer section. */
	export interface HeaderFooterSectionConfigurationFormProperties {

		/** Required */
		SectionId: FormControl<string | null | undefined>,
	}
	export function CreateHeaderFooterSectionConfigurationFormGroup() {
		return new FormGroup<HeaderFooterSectionConfigurationFormProperties>({
			SectionId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The layout configuration of a section. */
	export interface SectionLayoutConfiguration {

		/** Required */
		FreeFormLayout: FreeFormSectionLayoutConfiguration;
	}

	/** The layout configuration of a section. */
	export interface SectionLayoutConfigurationFormProperties {
	}
	export function CreateSectionLayoutConfigurationFormGroup() {
		return new FormGroup<SectionLayoutConfigurationFormProperties>({
		});

	}


	/** The free-form layout configuration of a section. */
	export interface FreeFormSectionLayoutConfiguration {

		/** Required */
		Elements: Array<FreeFormLayoutElement>;
	}

	/** The free-form layout configuration of a section. */
	export interface FreeFormSectionLayoutConfigurationFormProperties {
	}
	export function CreateFreeFormSectionLayoutConfigurationFormGroup() {
		return new FormGroup<FreeFormSectionLayoutConfigurationFormProperties>({
		});

	}


	/** The options that style a section. */
	export interface SectionStyle {
		Height?: string;
		Padding?: Spacing;
	}

	/** The options that style a section. */
	export interface SectionStyleFormProperties {
		Height: FormControl<string | null | undefined>,
	}
	export function CreateSectionStyleFormGroup() {
		return new FormGroup<SectionStyleFormProperties>({
			Height: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration of spacing (often a margin or padding). */
	export interface Spacing {
		Top?: string;
		Bottom?: string;
		Left?: string;
		Right?: string;
	}

	/** The configuration of spacing (often a margin or padding). */
	export interface SpacingFormProperties {
		Top: FormControl<string | null | undefined>,
		Bottom: FormControl<string | null | undefined>,
		Left: FormControl<string | null | undefined>,
		Right: FormControl<string | null | undefined>,
	}
	export function CreateSpacingFormGroup() {
		return new FormGroup<SpacingFormProperties>({
			Top: new FormControl<string | null | undefined>(undefined),
			Bottom: new FormControl<string | null | undefined>(undefined),
			Left: new FormControl<string | null | undefined>(undefined),
			Right: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration of a body section. */
	export interface BodySectionConfiguration {

		/** Required */
		SectionId: string;

		/** Required */
		Content: BodySectionContent;
		Style?: SectionStyle;
		PageBreakConfiguration?: SectionPageBreakConfiguration;
	}

	/** The configuration of a body section. */
	export interface BodySectionConfigurationFormProperties {

		/** Required */
		SectionId: FormControl<string | null | undefined>,
	}
	export function CreateBodySectionConfigurationFormGroup() {
		return new FormGroup<BodySectionConfigurationFormProperties>({
			SectionId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration of content in a body section. */
	export interface BodySectionContent {
		Layout?: SectionLayoutConfiguration;
	}

	/** The configuration of content in a body section. */
	export interface BodySectionContentFormProperties {
	}
	export function CreateBodySectionContentFormGroup() {
		return new FormGroup<BodySectionContentFormProperties>({
		});

	}


	/** The configuration of a page break for a section. */
	export interface SectionPageBreakConfiguration {
		After?: SectionAfterPageBreak;
	}

	/** The configuration of a page break for a section. */
	export interface SectionPageBreakConfigurationFormProperties {
	}
	export function CreateSectionPageBreakConfigurationFormGroup() {
		return new FormGroup<SectionPageBreakConfigurationFormProperties>({
		});

	}


	/** The configuration of a page break after a section. */
	export interface SectionAfterPageBreak {
		Status?: WidgetStatus;
	}

	/** The configuration of a page break after a section. */
	export interface SectionAfterPageBreakFormProperties {
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateSectionAfterPageBreakFormGroup() {
		return new FormGroup<SectionAfterPageBreakFormProperties>({
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The options for the canvas of a section-based layout. */
	export interface SectionBasedLayoutCanvasSizeOptions {
		PaperCanvasSizeOptions?: SectionBasedLayoutPaperCanvasSizeOptions;
	}

	/** The options for the canvas of a section-based layout. */
	export interface SectionBasedLayoutCanvasSizeOptionsFormProperties {
	}
	export function CreateSectionBasedLayoutCanvasSizeOptionsFormGroup() {
		return new FormGroup<SectionBasedLayoutCanvasSizeOptionsFormProperties>({
		});

	}


	/** The options for a paper canvas of a section-based layout. */
	export interface SectionBasedLayoutPaperCanvasSizeOptions {
		PaperSize?: PaperSize;
		PaperOrientation?: PaperOrientation;
		PaperMargin?: Spacing;
	}

	/** The options for a paper canvas of a section-based layout. */
	export interface SectionBasedLayoutPaperCanvasSizeOptionsFormProperties {
		PaperSize: FormControl<PaperSize | null | undefined>,
		PaperOrientation: FormControl<PaperOrientation | null | undefined>,
	}
	export function CreateSectionBasedLayoutPaperCanvasSizeOptionsFormGroup() {
		return new FormGroup<SectionBasedLayoutPaperCanvasSizeOptionsFormProperties>({
			PaperSize: new FormControl<PaperSize | null | undefined>(undefined),
			PaperOrientation: new FormControl<PaperOrientation | null | undefined>(undefined),
		});

	}

	export enum PaperSize { US_LETTER = 0, US_LEGAL = 1, US_TABLOID_LEDGER = 2, A0 = 3, A1 = 4, A2 = 5, A3 = 6, A4 = 7, A5 = 8, JIS_B4 = 9, JIS_B5 = 10 }

	export enum PaperOrientation { PORTRAIT = 0, LANDSCAPE = 1 }


	/** A grid layout to define the placement of sheet control. */
	export interface SheetControlLayout {

		/** Required */
		Configuration: SheetControlLayoutConfiguration;
	}

	/** A grid layout to define the placement of sheet control. */
	export interface SheetControlLayoutFormProperties {
	}
	export function CreateSheetControlLayoutFormGroup() {
		return new FormGroup<SheetControlLayoutFormProperties>({
		});

	}


	/** The configuration that determines the elements and canvas size options of sheet control. */
	export interface SheetControlLayoutConfiguration {
		GridLayout?: GridLayoutConfiguration;
	}

	/** The configuration that determines the elements and canvas size options of sheet control. */
	export interface SheetControlLayoutConfigurationFormProperties {
	}
	export function CreateSheetControlLayoutConfigurationFormGroup() {
		return new FormGroup<SheetControlLayoutConfigurationFormProperties>({
		});

	}

	export enum SheetContentType { PAGINATED = 0, INTERACTIVE = 1 }


	/** The calculated field of an analysis. */
	export interface CalculatedField {

		/** Required */
		DataSetIdentifier: string;

		/** Required */
		Name: string;

		/** Required */
		Expression: string;
	}

	/** The calculated field of an analysis. */
	export interface CalculatedFieldFormProperties {

		/** Required */
		DataSetIdentifier: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Expression: FormControl<string | null | undefined>,
	}
	export function CreateCalculatedFieldFormGroup() {
		return new FormGroup<CalculatedFieldFormProperties>({
			DataSetIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The declaration definition of a parameter.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html">Parameters in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ParameterDeclaration {
		StringParameterDeclaration?: StringParameterDeclaration;
		DecimalParameterDeclaration?: DecimalParameterDeclaration;
		IntegerParameterDeclaration?: IntegerParameterDeclaration;
		DateTimeParameterDeclaration?: DateTimeParameterDeclaration;
	}

	/** <p>The declaration definition of a parameter.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html">Parameters in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface ParameterDeclarationFormProperties {
	}
	export function CreateParameterDeclarationFormGroup() {
		return new FormGroup<ParameterDeclarationFormProperties>({
		});

	}


	/** A parameter declaration for the <code>String</code> data type. */
	export interface StringParameterDeclaration {

		/** Required */
		ParameterValueType: ParameterValueType;

		/** Required */
		Name: string;
		DefaultValues?: StringDefaultValues;
		ValueWhenUnset?: StringValueWhenUnsetConfiguration;

		/**
		 * A list of dataset parameters that are mapped to an analysis parameter.
		 * Minimum items: 0
		 * Maximum items: 150
		 */
		MappedDataSetParameters?: Array<MappedDataSetParameter>;
	}

	/** A parameter declaration for the <code>String</code> data type. */
	export interface StringParameterDeclarationFormProperties {

		/** Required */
		ParameterValueType: FormControl<ParameterValueType | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateStringParameterDeclarationFormGroup() {
		return new FormGroup<StringParameterDeclarationFormProperties>({
			ParameterValueType: new FormControl<ParameterValueType | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ParameterValueType { MULTI_VALUED = 0, SINGLE_VALUED = 1 }


	/** The default values of the <code>StringParameterDeclaration</code>. */
	export interface StringDefaultValues {
		DynamicValue?: DynamicDefaultValue;
		StaticValues?: Array<string>;
	}

	/** The default values of the <code>StringParameterDeclaration</code>. */
	export interface StringDefaultValuesFormProperties {
	}
	export function CreateStringDefaultValuesFormGroup() {
		return new FormGroup<StringDefaultValuesFormProperties>({
		});

	}


	/** Defines different defaults to the users or groups based on mapping. */
	export interface DynamicDefaultValue {
		UserNameColumn?: ColumnIdentifier;
		GroupNameColumn?: ColumnIdentifier;

		/** Required */
		DefaultValueColumn: ColumnIdentifier;
	}

	/** Defines different defaults to the users or groups based on mapping. */
	export interface DynamicDefaultValueFormProperties {
	}
	export function CreateDynamicDefaultValueFormGroup() {
		return new FormGroup<DynamicDefaultValueFormProperties>({
		});

	}


	/** The configuration that defines the default value of a <code>String</code> parameter when a value has not been set. */
	export interface StringValueWhenUnsetConfiguration {
		ValueWhenUnsetOption?: ValueWhenUnsetOption;
		CustomValue?: string;
	}

	/** The configuration that defines the default value of a <code>String</code> parameter when a value has not been set. */
	export interface StringValueWhenUnsetConfigurationFormProperties {
		ValueWhenUnsetOption: FormControl<ValueWhenUnsetOption | null | undefined>,
		CustomValue: FormControl<string | null | undefined>,
	}
	export function CreateStringValueWhenUnsetConfigurationFormGroup() {
		return new FormGroup<StringValueWhenUnsetConfigurationFormProperties>({
			ValueWhenUnsetOption: new FormControl<ValueWhenUnsetOption | null | undefined>(undefined),
			CustomValue: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ValueWhenUnsetOption { RECOMMENDED_VALUE = 0, NULL = 1 }


	/** A dataset parameter that is mapped to an analysis parameter. */
	export interface MappedDataSetParameter {

		/** Required */
		DataSetIdentifier: string;

		/** Required */
		DataSetParameterName: string;
	}

	/** A dataset parameter that is mapped to an analysis parameter. */
	export interface MappedDataSetParameterFormProperties {

		/** Required */
		DataSetIdentifier: FormControl<string | null | undefined>,

		/** Required */
		DataSetParameterName: FormControl<string | null | undefined>,
	}
	export function CreateMappedDataSetParameterFormGroup() {
		return new FormGroup<MappedDataSetParameterFormProperties>({
			DataSetIdentifier: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DataSetParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A parameter declaration for the <code>Decimal</code> data type. */
	export interface DecimalParameterDeclaration {

		/** Required */
		ParameterValueType: ParameterValueType;

		/** Required */
		Name: string;
		DefaultValues?: DecimalDefaultValues;
		ValueWhenUnset?: DecimalValueWhenUnsetConfiguration;

		/**
		 * A list of dataset parameters that are mapped to an analysis parameter.
		 * Minimum items: 0
		 * Maximum items: 150
		 */
		MappedDataSetParameters?: Array<MappedDataSetParameter>;
	}

	/** A parameter declaration for the <code>Decimal</code> data type. */
	export interface DecimalParameterDeclarationFormProperties {

		/** Required */
		ParameterValueType: FormControl<ParameterValueType | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateDecimalParameterDeclarationFormGroup() {
		return new FormGroup<DecimalParameterDeclarationFormProperties>({
			ParameterValueType: new FormControl<ParameterValueType | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The default values of the <code>DecimalParameterDeclaration</code>. */
	export interface DecimalDefaultValues {
		DynamicValue?: DynamicDefaultValue;
		StaticValues?: Array<number> | null;
	}

	/** The default values of the <code>DecimalParameterDeclaration</code>. */
	export interface DecimalDefaultValuesFormProperties {
	}
	export function CreateDecimalDefaultValuesFormGroup() {
		return new FormGroup<DecimalDefaultValuesFormProperties>({
		});

	}


	/** The configuration that defines the default value of a <code>Decimal</code> parameter when a value has not been set. */
	export interface DecimalValueWhenUnsetConfiguration {
		ValueWhenUnsetOption?: ValueWhenUnsetOption;
		CustomValue?: number | null;
	}

	/** The configuration that defines the default value of a <code>Decimal</code> parameter when a value has not been set. */
	export interface DecimalValueWhenUnsetConfigurationFormProperties {
		ValueWhenUnsetOption: FormControl<ValueWhenUnsetOption | null | undefined>,
		CustomValue: FormControl<number | null | undefined>,
	}
	export function CreateDecimalValueWhenUnsetConfigurationFormGroup() {
		return new FormGroup<DecimalValueWhenUnsetConfigurationFormProperties>({
			ValueWhenUnsetOption: new FormControl<ValueWhenUnsetOption | null | undefined>(undefined),
			CustomValue: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A parameter declaration for the <code>Integer</code> data type. */
	export interface IntegerParameterDeclaration {

		/** Required */
		ParameterValueType: ParameterValueType;

		/** Required */
		Name: string;
		DefaultValues?: IntegerDefaultValues;
		ValueWhenUnset?: IntegerValueWhenUnsetConfiguration;

		/**
		 * A list of dataset parameters that are mapped to an analysis parameter.
		 * Minimum items: 0
		 * Maximum items: 150
		 */
		MappedDataSetParameters?: Array<MappedDataSetParameter>;
	}

	/** A parameter declaration for the <code>Integer</code> data type. */
	export interface IntegerParameterDeclarationFormProperties {

		/** Required */
		ParameterValueType: FormControl<ParameterValueType | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateIntegerParameterDeclarationFormGroup() {
		return new FormGroup<IntegerParameterDeclarationFormProperties>({
			ParameterValueType: new FormControl<ParameterValueType | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The default values of the <code>IntegerParameterDeclaration</code>. */
	export interface IntegerDefaultValues {
		DynamicValue?: DynamicDefaultValue;
		StaticValues?: Array<number> | null;
	}

	/** The default values of the <code>IntegerParameterDeclaration</code>. */
	export interface IntegerDefaultValuesFormProperties {
	}
	export function CreateIntegerDefaultValuesFormGroup() {
		return new FormGroup<IntegerDefaultValuesFormProperties>({
		});

	}


	/** <p>A parameter declaration for the <code>Integer</code> data type.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface IntegerValueWhenUnsetConfiguration {
		ValueWhenUnsetOption?: ValueWhenUnsetOption;
		CustomValue?: number | null;
	}

	/** <p>A parameter declaration for the <code>Integer</code> data type.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface IntegerValueWhenUnsetConfigurationFormProperties {
		ValueWhenUnsetOption: FormControl<ValueWhenUnsetOption | null | undefined>,
		CustomValue: FormControl<number | null | undefined>,
	}
	export function CreateIntegerValueWhenUnsetConfigurationFormGroup() {
		return new FormGroup<IntegerValueWhenUnsetConfigurationFormProperties>({
			ValueWhenUnsetOption: new FormControl<ValueWhenUnsetOption | null | undefined>(undefined),
			CustomValue: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A parameter declaration for the <code>DateTime</code> data type. */
	export interface DateTimeParameterDeclaration {

		/** Required */
		Name: string;
		DefaultValues?: DateTimeDefaultValues;
		TimeGranularity?: TimeGranularity;
		ValueWhenUnset?: DateTimeValueWhenUnsetConfiguration;

		/**
		 * A list of dataset parameters that are mapped to an analysis parameter.
		 * Minimum items: 0
		 * Maximum items: 150
		 */
		MappedDataSetParameters?: Array<MappedDataSetParameter>;
	}

	/** A parameter declaration for the <code>DateTime</code> data type. */
	export interface DateTimeParameterDeclarationFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,
	}
	export function CreateDateTimeParameterDeclarationFormGroup() {
		return new FormGroup<DateTimeParameterDeclarationFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
		});

	}


	/** The default values of the <code>DateTimeParameterDeclaration</code>. */
	export interface DateTimeDefaultValues {
		DynamicValue?: DynamicDefaultValue;
		StaticValues?: Array<string>;
		RollingDate?: RollingDateConfiguration;
	}

	/** The default values of the <code>DateTimeParameterDeclaration</code>. */
	export interface DateTimeDefaultValuesFormProperties {
	}
	export function CreateDateTimeDefaultValuesFormGroup() {
		return new FormGroup<DateTimeDefaultValuesFormProperties>({
		});

	}


	/** The rolling date configuration of a date time filter. */
	export interface RollingDateConfiguration {
		DataSetIdentifier?: string;

		/** Required */
		Expression: string;
	}

	/** The rolling date configuration of a date time filter. */
	export interface RollingDateConfigurationFormProperties {
		DataSetIdentifier: FormControl<string | null | undefined>,

		/** Required */
		Expression: FormControl<string | null | undefined>,
	}
	export function CreateRollingDateConfigurationFormGroup() {
		return new FormGroup<RollingDateConfigurationFormProperties>({
			DataSetIdentifier: new FormControl<string | null | undefined>(undefined),
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The configuration that defines the default value of a <code>DateTime</code> parameter when a value has not been set. */
	export interface DateTimeValueWhenUnsetConfiguration {
		ValueWhenUnsetOption?: ValueWhenUnsetOption;
		CustomValue?: Date;
	}

	/** The configuration that defines the default value of a <code>DateTime</code> parameter when a value has not been set. */
	export interface DateTimeValueWhenUnsetConfigurationFormProperties {
		ValueWhenUnsetOption: FormControl<ValueWhenUnsetOption | null | undefined>,
		CustomValue: FormControl<Date | null | undefined>,
	}
	export function CreateDateTimeValueWhenUnsetConfigurationFormGroup() {
		return new FormGroup<DateTimeValueWhenUnsetConfigurationFormProperties>({
			ValueWhenUnsetOption: new FormControl<ValueWhenUnsetOption | null | undefined>(undefined),
			CustomValue: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** <p>A grouping of individual filters. Filter groups are applied to the same group of visuals.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-compound-filter.html">Adding filter conditions (group filters) with AND and OR operators</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface FilterGroup {

		/** Required */
		FilterGroupId: string;

		/** Required */
		Filters: Array<Filter>;

		/** Required */
		ScopeConfiguration: FilterScopeConfiguration;
		Status?: WidgetStatus;

		/** Required */
		CrossDataset: CrossDatasetTypes;
	}

	/** <p>A grouping of individual filters. Filter groups are applied to the same group of visuals.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-compound-filter.html">Adding filter conditions (group filters) with AND and OR operators</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface FilterGroupFormProperties {

		/** Required */
		FilterGroupId: FormControl<string | null | undefined>,
		Status: FormControl<WidgetStatus | null | undefined>,

		/** Required */
		CrossDataset: FormControl<CrossDatasetTypes | null | undefined>,
	}
	export function CreateFilterGroupFormGroup() {
		return new FormGroup<FilterGroupFormProperties>({
			FilterGroupId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
			CrossDataset: new FormControl<CrossDatasetTypes | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>With a <code>Filter</code>, you can remove portions of data from a particular visual or view.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface Filter {
		CategoryFilter?: CategoryFilter;
		NumericRangeFilter?: NumericRangeFilter;
		NumericEqualityFilter?: NumericEqualityFilter;
		TimeEqualityFilter?: TimeEqualityFilter;
		TimeRangeFilter?: TimeRangeFilter;
		RelativeDatesFilter?: RelativeDatesFilter;
		TopBottomFilter?: TopBottomFilter;
	}

	/** <p>With a <code>Filter</code>, you can remove portions of data from a particular visual or view.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterFormProperties {
	}
	export function CreateFilterFormGroup() {
		return new FormGroup<FilterFormProperties>({
		});

	}


	/** <p>A <code>CategoryFilter</code> filters text values.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html">Adding text filters</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface CategoryFilter {

		/** Required */
		FilterId: string;

		/** Required */
		Column: ColumnIdentifier;

		/** Required */
		Configuration: CategoryFilterConfiguration;
	}

	/** <p>A <code>CategoryFilter</code> filters text values.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html">Adding text filters</a> in the <i>Amazon QuickSight User Guide</i>.</p> */
	export interface CategoryFilterFormProperties {

		/** Required */
		FilterId: FormControl<string | null | undefined>,
	}
	export function CreateCategoryFilterFormGroup() {
		return new FormGroup<CategoryFilterFormProperties>({
			FilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The configuration for a <code>CategoryFilter</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface CategoryFilterConfiguration {
		FilterListConfiguration?: FilterListConfiguration;
		CustomFilterListConfiguration?: CustomFilterListConfiguration;
		CustomFilterConfiguration?: CustomFilterConfiguration;
	}

	/** <p>The configuration for a <code>CategoryFilter</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface CategoryFilterConfigurationFormProperties {
	}
	export function CreateCategoryFilterConfigurationFormGroup() {
		return new FormGroup<CategoryFilterConfigurationFormProperties>({
		});

	}


	/** A list of filter configurations. */
	export interface FilterListConfiguration {

		/** Required */
		MatchOperator: CategoryFilterMatchOperator;
		CategoryValues?: Array<string>;
		SelectAllOptions?: CategoryFilterSelectAllOptions;
	}

	/** A list of filter configurations. */
	export interface FilterListConfigurationFormProperties {

		/** Required */
		MatchOperator: FormControl<CategoryFilterMatchOperator | null | undefined>,
		SelectAllOptions: FormControl<CategoryFilterSelectAllOptions | null | undefined>,
	}
	export function CreateFilterListConfigurationFormGroup() {
		return new FormGroup<FilterListConfigurationFormProperties>({
			MatchOperator: new FormControl<CategoryFilterMatchOperator | null | undefined>(undefined, [Validators.required]),
			SelectAllOptions: new FormControl<CategoryFilterSelectAllOptions | null | undefined>(undefined),
		});

	}

	export enum CategoryFilterMatchOperator { EQUALS = 0, DOES_NOT_EQUAL = 1, CONTAINS = 2, DOES_NOT_CONTAIN = 3, STARTS_WITH = 4, ENDS_WITH = 5 }

	export enum CategoryFilterSelectAllOptions { FILTER_ALL_VALUES = 0 }


	/** A list of custom filter values. */
	export interface CustomFilterListConfiguration {

		/** Required */
		MatchOperator: CategoryFilterMatchOperator;
		CategoryValues?: Array<string>;
		SelectAllOptions?: CategoryFilterSelectAllOptions;

		/** Required */
		NullOption: FilterNullOption;
	}

	/** A list of custom filter values. */
	export interface CustomFilterListConfigurationFormProperties {

		/** Required */
		MatchOperator: FormControl<CategoryFilterMatchOperator | null | undefined>,
		SelectAllOptions: FormControl<CategoryFilterSelectAllOptions | null | undefined>,

		/** Required */
		NullOption: FormControl<FilterNullOption | null | undefined>,
	}
	export function CreateCustomFilterListConfigurationFormGroup() {
		return new FormGroup<CustomFilterListConfigurationFormProperties>({
			MatchOperator: new FormControl<CategoryFilterMatchOperator | null | undefined>(undefined, [Validators.required]),
			SelectAllOptions: new FormControl<CategoryFilterSelectAllOptions | null | undefined>(undefined),
			NullOption: new FormControl<FilterNullOption | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum FilterNullOption { ALL_VALUES = 0, NULLS_ONLY = 1, NON_NULLS_ONLY = 2 }


	/** A custom filter that filters based on a single value. This filter can be partially matched. */
	export interface CustomFilterConfiguration {

		/** Required */
		MatchOperator: CategoryFilterMatchOperator;
		CategoryValue?: string;
		SelectAllOptions?: CategoryFilterSelectAllOptions;
		ParameterName?: string;

		/** Required */
		NullOption: FilterNullOption;
	}

	/** A custom filter that filters based on a single value. This filter can be partially matched. */
	export interface CustomFilterConfigurationFormProperties {

		/** Required */
		MatchOperator: FormControl<CategoryFilterMatchOperator | null | undefined>,
		CategoryValue: FormControl<string | null | undefined>,
		SelectAllOptions: FormControl<CategoryFilterSelectAllOptions | null | undefined>,
		ParameterName: FormControl<string | null | undefined>,

		/** Required */
		NullOption: FormControl<FilterNullOption | null | undefined>,
	}
	export function CreateCustomFilterConfigurationFormGroup() {
		return new FormGroup<CustomFilterConfigurationFormProperties>({
			MatchOperator: new FormControl<CategoryFilterMatchOperator | null | undefined>(undefined, [Validators.required]),
			CategoryValue: new FormControl<string | null | undefined>(undefined),
			SelectAllOptions: new FormControl<CategoryFilterSelectAllOptions | null | undefined>(undefined),
			ParameterName: new FormControl<string | null | undefined>(undefined),
			NullOption: new FormControl<FilterNullOption | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A <code>NumericRangeFilter</code> filters values that are within the value range. */
	export interface NumericRangeFilter {

		/** Required */
		FilterId: string;

		/** Required */
		Column: ColumnIdentifier;
		IncludeMinimum?: boolean | null;
		IncludeMaximum?: boolean | null;
		RangeMinimum?: NumericRangeFilterValue;
		RangeMaximum?: NumericRangeFilterValue;
		SelectAllOptions?: CategoryFilterSelectAllOptions;
		AggregationFunction?: AggregationFunction;

		/** Required */
		NullOption: FilterNullOption;
	}

	/** A <code>NumericRangeFilter</code> filters values that are within the value range. */
	export interface NumericRangeFilterFormProperties {

		/** Required */
		FilterId: FormControl<string | null | undefined>,
		IncludeMinimum: FormControl<boolean | null | undefined>,
		IncludeMaximum: FormControl<boolean | null | undefined>,
		SelectAllOptions: FormControl<CategoryFilterSelectAllOptions | null | undefined>,

		/** Required */
		NullOption: FormControl<FilterNullOption | null | undefined>,
	}
	export function CreateNumericRangeFilterFormGroup() {
		return new FormGroup<NumericRangeFilterFormProperties>({
			FilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IncludeMinimum: new FormControl<boolean | null | undefined>(undefined),
			IncludeMaximum: new FormControl<boolean | null | undefined>(undefined),
			SelectAllOptions: new FormControl<CategoryFilterSelectAllOptions | null | undefined>(undefined),
			NullOption: new FormControl<FilterNullOption | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The value input pf the numeric range filter. */
	export interface NumericRangeFilterValue {
		StaticValue?: number | null;
		Parameter?: string;
	}

	/** The value input pf the numeric range filter. */
	export interface NumericRangeFilterValueFormProperties {
		StaticValue: FormControl<number | null | undefined>,
		Parameter: FormControl<string | null | undefined>,
	}
	export function CreateNumericRangeFilterValueFormGroup() {
		return new FormGroup<NumericRangeFilterValueFormProperties>({
			StaticValue: new FormControl<number | null | undefined>(undefined),
			Parameter: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A <code>NumericEqualityFilter</code> filters values that are equal to the specified value. */
	export interface NumericEqualityFilter {

		/** Required */
		FilterId: string;

		/** Required */
		Column: ColumnIdentifier;
		Value?: number | null;
		SelectAllOptions?: CategoryFilterSelectAllOptions;

		/** Required */
		MatchOperator: NumericEqualityMatchOperator;
		AggregationFunction?: AggregationFunction;
		ParameterName?: string;

		/** Required */
		NullOption: FilterNullOption;
	}

	/** A <code>NumericEqualityFilter</code> filters values that are equal to the specified value. */
	export interface NumericEqualityFilterFormProperties {

		/** Required */
		FilterId: FormControl<string | null | undefined>,
		Value: FormControl<number | null | undefined>,
		SelectAllOptions: FormControl<CategoryFilterSelectAllOptions | null | undefined>,

		/** Required */
		MatchOperator: FormControl<NumericEqualityMatchOperator | null | undefined>,
		ParameterName: FormControl<string | null | undefined>,

		/** Required */
		NullOption: FormControl<FilterNullOption | null | undefined>,
	}
	export function CreateNumericEqualityFilterFormGroup() {
		return new FormGroup<NumericEqualityFilterFormProperties>({
			FilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<number | null | undefined>(undefined),
			SelectAllOptions: new FormControl<CategoryFilterSelectAllOptions | null | undefined>(undefined),
			MatchOperator: new FormControl<NumericEqualityMatchOperator | null | undefined>(undefined, [Validators.required]),
			ParameterName: new FormControl<string | null | undefined>(undefined),
			NullOption: new FormControl<FilterNullOption | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum NumericEqualityMatchOperator { EQUALS = 0, DOES_NOT_EQUAL = 1 }


	/** A <code>TimeEqualityFilter</code> filters values that are equal to a given value. */
	export interface TimeEqualityFilter {

		/** Required */
		FilterId: string;

		/** Required */
		Column: ColumnIdentifier;
		Value?: Date;
		ParameterName?: string;
		TimeGranularity?: TimeGranularity;
	}

	/** A <code>TimeEqualityFilter</code> filters values that are equal to a given value. */
	export interface TimeEqualityFilterFormProperties {

		/** Required */
		FilterId: FormControl<string | null | undefined>,
		Value: FormControl<Date | null | undefined>,
		ParameterName: FormControl<string | null | undefined>,
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,
	}
	export function CreateTimeEqualityFilterFormGroup() {
		return new FormGroup<TimeEqualityFilterFormProperties>({
			FilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<Date | null | undefined>(undefined),
			ParameterName: new FormControl<string | null | undefined>(undefined),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
		});

	}


	/** A <code>TimeRangeFilter</code> filters values that are between two specified values. */
	export interface TimeRangeFilter {

		/** Required */
		FilterId: string;

		/** Required */
		Column: ColumnIdentifier;
		IncludeMinimum?: boolean | null;
		IncludeMaximum?: boolean | null;
		RangeMinimumValue?: TimeRangeFilterValue;
		RangeMaximumValue?: TimeRangeFilterValue;

		/** Required */
		NullOption: FilterNullOption;
		ExcludePeriodConfiguration?: ExcludePeriodConfiguration;
		TimeGranularity?: TimeGranularity;
	}

	/** A <code>TimeRangeFilter</code> filters values that are between two specified values. */
	export interface TimeRangeFilterFormProperties {

		/** Required */
		FilterId: FormControl<string | null | undefined>,
		IncludeMinimum: FormControl<boolean | null | undefined>,
		IncludeMaximum: FormControl<boolean | null | undefined>,

		/** Required */
		NullOption: FormControl<FilterNullOption | null | undefined>,
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,
	}
	export function CreateTimeRangeFilterFormGroup() {
		return new FormGroup<TimeRangeFilterFormProperties>({
			FilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IncludeMinimum: new FormControl<boolean | null | undefined>(undefined),
			IncludeMaximum: new FormControl<boolean | null | undefined>(undefined),
			NullOption: new FormControl<FilterNullOption | null | undefined>(undefined, [Validators.required]),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
		});

	}


	/** <p>The value of a time range filter.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TimeRangeFilterValue {
		StaticValue?: Date;
		RollingDate?: RollingDateConfiguration;
		Parameter?: string;
	}

	/** <p>The value of a time range filter.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface TimeRangeFilterValueFormProperties {
		StaticValue: FormControl<Date | null | undefined>,
		Parameter: FormControl<string | null | undefined>,
	}
	export function CreateTimeRangeFilterValueFormGroup() {
		return new FormGroup<TimeRangeFilterValueFormProperties>({
			StaticValue: new FormControl<Date | null | undefined>(undefined),
			Parameter: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The exclude period of <code>TimeRangeFilter</code> or <code>RelativeDatesFilter</code>. */
	export interface ExcludePeriodConfiguration {

		/** Required */
		Amount: number;

		/** Required */
		Granularity: TimeGranularity;
		Status?: WidgetStatus;
	}

	/** The exclude period of <code>TimeRangeFilter</code> or <code>RelativeDatesFilter</code>. */
	export interface ExcludePeriodConfigurationFormProperties {

		/** Required */
		Amount: FormControl<number | null | undefined>,

		/** Required */
		Granularity: FormControl<TimeGranularity | null | undefined>,
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateExcludePeriodConfigurationFormGroup() {
		return new FormGroup<ExcludePeriodConfigurationFormProperties>({
			Amount: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Granularity: new FormControl<TimeGranularity | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** A <code>RelativeDatesFilter</code> filters relative dates values. */
	export interface RelativeDatesFilter {

		/** Required */
		FilterId: string;

		/** Required */
		Column: ColumnIdentifier;

		/** Required */
		AnchorDateConfiguration: AnchorDateConfiguration;
		MinimumGranularity?: TimeGranularity;

		/** Required */
		TimeGranularity: TimeGranularity;

		/** Required */
		RelativeDateType: RelativeDateType;
		RelativeDateValue?: number | null;
		ParameterName?: string;

		/** Required */
		NullOption: FilterNullOption;
		ExcludePeriodConfiguration?: ExcludePeriodConfiguration;
	}

	/** A <code>RelativeDatesFilter</code> filters relative dates values. */
	export interface RelativeDatesFilterFormProperties {

		/** Required */
		FilterId: FormControl<string | null | undefined>,
		MinimumGranularity: FormControl<TimeGranularity | null | undefined>,

		/** Required */
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,

		/** Required */
		RelativeDateType: FormControl<RelativeDateType | null | undefined>,
		RelativeDateValue: FormControl<number | null | undefined>,
		ParameterName: FormControl<string | null | undefined>,

		/** Required */
		NullOption: FormControl<FilterNullOption | null | undefined>,
	}
	export function CreateRelativeDatesFilterFormGroup() {
		return new FormGroup<RelativeDatesFilterFormProperties>({
			FilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MinimumGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined, [Validators.required]),
			RelativeDateType: new FormControl<RelativeDateType | null | undefined>(undefined, [Validators.required]),
			RelativeDateValue: new FormControl<number | null | undefined>(undefined),
			ParameterName: new FormControl<string | null | undefined>(undefined),
			NullOption: new FormControl<FilterNullOption | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The date configuration of the filter. */
	export interface AnchorDateConfiguration {
		AnchorOption?: AnchorOption;
		ParameterName?: string;
	}

	/** The date configuration of the filter. */
	export interface AnchorDateConfigurationFormProperties {
		AnchorOption: FormControl<AnchorOption | null | undefined>,
		ParameterName: FormControl<string | null | undefined>,
	}
	export function CreateAnchorDateConfigurationFormGroup() {
		return new FormGroup<AnchorDateConfigurationFormProperties>({
			AnchorOption: new FormControl<AnchorOption | null | undefined>(undefined),
			ParameterName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AnchorOption { NOW = 0 }

	export enum RelativeDateType { PREVIOUS = 0, THIS = 1, LAST = 2, NOW = 3, NEXT = 4 }


	/** A <code>TopBottomFilter</code> filters values that are at the top or the bottom. */
	export interface TopBottomFilter {

		/** Required */
		FilterId: string;

		/** Required */
		Column: ColumnIdentifier;
		Limit?: number | null;

		/** Required */
		AggregationSortConfigurations: Array<AggregationSortConfiguration>;
		TimeGranularity?: TimeGranularity;
		ParameterName?: string;
	}

	/** A <code>TopBottomFilter</code> filters values that are at the top or the bottom. */
	export interface TopBottomFilterFormProperties {

		/** Required */
		FilterId: FormControl<string | null | undefined>,
		Limit: FormControl<number | null | undefined>,
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,
		ParameterName: FormControl<string | null | undefined>,
	}
	export function CreateTopBottomFilterFormGroup() {
		return new FormGroup<TopBottomFilterFormProperties>({
			FilterId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Limit: new FormControl<number | null | undefined>(undefined),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
			ParameterName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration options to sort aggregated values. */
	export interface AggregationSortConfiguration {

		/** Required */
		Column: ColumnIdentifier;

		/** Required */
		SortDirection: SortDirection;
		AggregationFunction?: AggregationFunction;
	}

	/** The configuration options to sort aggregated values. */
	export interface AggregationSortConfigurationFormProperties {

		/** Required */
		SortDirection: FormControl<SortDirection | null | undefined>,
	}
	export function CreateAggregationSortConfigurationFormGroup() {
		return new FormGroup<AggregationSortConfigurationFormProperties>({
			SortDirection: new FormControl<SortDirection | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The scope configuration for a <code>FilterGroup</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterScopeConfiguration {
		SelectedSheets?: SelectedSheetsFilterScopeConfiguration;
	}

	/** <p>The scope configuration for a <code>FilterGroup</code>.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface FilterScopeConfigurationFormProperties {
	}
	export function CreateFilterScopeConfigurationFormGroup() {
		return new FormGroup<FilterScopeConfigurationFormProperties>({
		});

	}


	/** <p>The configuration for applying a filter to specific sheets or visuals. You can apply this filter to multiple visuals that are on one sheet or to all visuals on a sheet.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface SelectedSheetsFilterScopeConfiguration {
		SheetVisualScopingConfigurations?: Array<SheetVisualScopingConfiguration>;
	}

	/** <p>The configuration for applying a filter to specific sheets or visuals. You can apply this filter to multiple visuals that are on one sheet or to all visuals on a sheet.</p> <p>This is a union type structure. For this structure to be valid, only one of the attributes can be defined.</p> */
	export interface SelectedSheetsFilterScopeConfigurationFormProperties {
	}
	export function CreateSelectedSheetsFilterScopeConfigurationFormGroup() {
		return new FormGroup<SelectedSheetsFilterScopeConfigurationFormProperties>({
		});

	}


	/** The filter that is applied to the options. */
	export interface SheetVisualScopingConfiguration {

		/** Required */
		SheetId: string;

		/** Required */
		Scope: FilterVisualScope;
		VisualIds?: Array<string>;
	}

	/** The filter that is applied to the options. */
	export interface SheetVisualScopingConfigurationFormProperties {

		/** Required */
		SheetId: FormControl<string | null | undefined>,

		/** Required */
		Scope: FormControl<FilterVisualScope | null | undefined>,
	}
	export function CreateSheetVisualScopingConfigurationFormGroup() {
		return new FormGroup<SheetVisualScopingConfigurationFormProperties>({
			SheetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Scope: new FormControl<FilterVisualScope | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum FilterVisualScope { ALL_VISUALS = 0, SELECTED_VISUALS = 1 }

	export enum CrossDatasetTypes { ALL_DATASETS = 0, SINGLE_DATASET = 1 }


	/** The general configuration of a column. */
	export interface ColumnConfiguration {

		/** Required */
		Column: ColumnIdentifier;
		FormatConfiguration?: FormatConfiguration;
		Role?: ColumnRole;
		ColorsConfiguration?: ColorsConfiguration;
	}

	/** The general configuration of a column. */
	export interface ColumnConfigurationFormProperties {
		Role: FormControl<ColumnRole | null | undefined>,
	}
	export function CreateColumnConfigurationFormGroup() {
		return new FormGroup<ColumnConfigurationFormProperties>({
			Role: new FormControl<ColumnRole | null | undefined>(undefined),
		});

	}

	export enum ColumnRole { DIMENSION = 0, MEASURE = 1 }


	/** The color configurations for a column. */
	export interface ColorsConfiguration {
		CustomColors?: Array<CustomColor>;
	}

	/** The color configurations for a column. */
	export interface ColorsConfigurationFormProperties {
	}
	export function CreateColorsConfigurationFormGroup() {
		return new FormGroup<ColorsConfigurationFormProperties>({
		});

	}


	/** Determines the color that's applied to a particular data value in a column. */
	export interface CustomColor {
		FieldValue?: string;

		/** Required */
		Color: string;
		SpecialValue?: SpecialValue;
	}

	/** Determines the color that's applied to a particular data value in a column. */
	export interface CustomColorFormProperties {
		FieldValue: FormControl<string | null | undefined>,

		/** Required */
		Color: FormControl<string | null | undefined>,
		SpecialValue: FormControl<SpecialValue | null | undefined>,
	}
	export function CreateCustomColorFormGroup() {
		return new FormGroup<CustomColorFormProperties>({
			FieldValue: new FormControl<string | null | undefined>(undefined),
			Color: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SpecialValue: new FormControl<SpecialValue | null | undefined>(undefined),
		});

	}

	export enum SpecialValue { EMPTY = 0, NULL = 1, OTHER = 2 }


	/** The configuration for default analysis settings. */
	export interface AnalysisDefaults {

		/** Required */
		DefaultNewSheetConfiguration: DefaultNewSheetConfiguration;
	}

	/** The configuration for default analysis settings. */
	export interface AnalysisDefaultsFormProperties {
	}
	export function CreateAnalysisDefaultsFormGroup() {
		return new FormGroup<AnalysisDefaultsFormProperties>({
		});

	}


	/** The configuration for default new sheet settings. */
	export interface DefaultNewSheetConfiguration {
		InteractiveLayoutConfiguration?: DefaultInteractiveLayoutConfiguration;
		PaginatedLayoutConfiguration?: DefaultPaginatedLayoutConfiguration;
		SheetContentType?: SheetContentType;
	}

	/** The configuration for default new sheet settings. */
	export interface DefaultNewSheetConfigurationFormProperties {
		SheetContentType: FormControl<SheetContentType | null | undefined>,
	}
	export function CreateDefaultNewSheetConfigurationFormGroup() {
		return new FormGroup<DefaultNewSheetConfigurationFormProperties>({
			SheetContentType: new FormControl<SheetContentType | null | undefined>(undefined),
		});

	}


	/** The options that determine the default settings for interactive layout configuration. */
	export interface DefaultInteractiveLayoutConfiguration {
		Grid?: DefaultGridLayoutConfiguration;
		FreeForm?: DefaultFreeFormLayoutConfiguration;
	}

	/** The options that determine the default settings for interactive layout configuration. */
	export interface DefaultInteractiveLayoutConfigurationFormProperties {
	}
	export function CreateDefaultInteractiveLayoutConfigurationFormGroup() {
		return new FormGroup<DefaultInteractiveLayoutConfigurationFormProperties>({
		});

	}


	/** The options that determine the default settings for a grid layout configuration. */
	export interface DefaultGridLayoutConfiguration {

		/** Required */
		CanvasSizeOptions: GridLayoutCanvasSizeOptions;
	}

	/** The options that determine the default settings for a grid layout configuration. */
	export interface DefaultGridLayoutConfigurationFormProperties {
	}
	export function CreateDefaultGridLayoutConfigurationFormGroup() {
		return new FormGroup<DefaultGridLayoutConfigurationFormProperties>({
		});

	}


	/** The options that determine the default settings of a free-form layout configuration. */
	export interface DefaultFreeFormLayoutConfiguration {

		/** Required */
		CanvasSizeOptions: FreeFormLayoutCanvasSizeOptions;
	}

	/** The options that determine the default settings of a free-form layout configuration. */
	export interface DefaultFreeFormLayoutConfigurationFormProperties {
	}
	export function CreateDefaultFreeFormLayoutConfigurationFormGroup() {
		return new FormGroup<DefaultFreeFormLayoutConfigurationFormProperties>({
		});

	}


	/** The options that determine the default settings for a paginated layout configuration. */
	export interface DefaultPaginatedLayoutConfiguration {
		SectionBased?: DefaultSectionBasedLayoutConfiguration;
	}

	/** The options that determine the default settings for a paginated layout configuration. */
	export interface DefaultPaginatedLayoutConfigurationFormProperties {
	}
	export function CreateDefaultPaginatedLayoutConfigurationFormGroup() {
		return new FormGroup<DefaultPaginatedLayoutConfigurationFormProperties>({
		});

	}


	/** The options that determine the default settings for a section-based layout configuration. */
	export interface DefaultSectionBasedLayoutConfiguration {

		/** Required */
		CanvasSizeOptions: SectionBasedLayoutCanvasSizeOptions;
	}

	/** The options that determine the default settings for a section-based layout configuration. */
	export interface DefaultSectionBasedLayoutConfigurationFormProperties {
	}
	export function CreateDefaultSectionBasedLayoutConfigurationFormGroup() {
		return new FormGroup<DefaultSectionBasedLayoutConfigurationFormProperties>({
		});

	}

	export interface UnsupportedUserEditionException {
	}
	export interface UnsupportedUserEditionExceptionFormProperties {
	}
	export function CreateUnsupportedUserEditionExceptionFormGroup() {
		return new FormGroup<UnsupportedUserEditionExceptionFormProperties>({
		});

	}

	export interface LimitExceededException {
	}
	export interface LimitExceededExceptionFormProperties {
	}
	export function CreateLimitExceededExceptionFormGroup() {
		return new FormGroup<LimitExceededExceptionFormProperties>({
		});

	}

	export interface CreateDashboardResponse {
		Arn?: string;
		VersionArn?: string;
		DashboardId?: string;
		CreationStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateDashboardResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		VersionArn: FormControl<string | null | undefined>,
		DashboardId: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateDashboardResponseFormGroup() {
		return new FormGroup<CreateDashboardResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VersionArn: new FormControl<string | null | undefined>(undefined),
			DashboardId: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dashboard source template. */
	export interface DashboardSourceTemplate {

		/** Required */
		DataSetReferences: Array<DataSetReference>;

		/** Required */
		Arn: string;
	}

	/** Dashboard source template. */
	export interface DashboardSourceTemplateFormProperties {

		/** Required */
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateDashboardSourceTemplateFormGroup() {
		return new FormGroup<DashboardSourceTemplateFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** An ad hoc (one-time) filtering option. */
	export interface AdHocFilteringOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** An ad hoc (one-time) filtering option. */
	export interface AdHocFilteringOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateAdHocFilteringOptionFormGroup() {
		return new FormGroup<AdHocFilteringOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** Export to .csv option. */
	export interface ExportToCSVOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** Export to .csv option. */
	export interface ExportToCSVOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateExportToCSVOptionFormGroup() {
		return new FormGroup<ExportToCSVOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** Sheet controls option. */
	export interface SheetControlsOption {
		VisibilityState?: DashboardUIState;
	}

	/** Sheet controls option. */
	export interface SheetControlsOptionFormProperties {
		VisibilityState: FormControl<DashboardUIState | null | undefined>,
	}
	export function CreateSheetControlsOptionFormGroup() {
		return new FormGroup<SheetControlsOptionFormProperties>({
			VisibilityState: new FormControl<DashboardUIState | null | undefined>(undefined),
		});

	}

	export enum DashboardUIState { EXPANDED = 0, COLLAPSED = 1 }


	/** The visual publish options of a visual in a dashboard */
	export interface DashboardVisualPublishOptions {
		ExportHiddenFieldsOption?: ExportHiddenFieldsOption;
	}

	/** The visual publish options of a visual in a dashboard */
	export interface DashboardVisualPublishOptionsFormProperties {
	}
	export function CreateDashboardVisualPublishOptionsFormGroup() {
		return new FormGroup<DashboardVisualPublishOptionsFormProperties>({
		});

	}


	/** Determines if hidden fields are included in an exported dashboard. */
	export interface ExportHiddenFieldsOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** Determines if hidden fields are included in an exported dashboard. */
	export interface ExportHiddenFieldsOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateExportHiddenFieldsOptionFormGroup() {
		return new FormGroup<ExportHiddenFieldsOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The sheet layout maximization options of a dashbaord. */
	export interface SheetLayoutElementMaximizationOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** The sheet layout maximization options of a dashbaord. */
	export interface SheetLayoutElementMaximizationOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateSheetLayoutElementMaximizationOptionFormGroup() {
		return new FormGroup<SheetLayoutElementMaximizationOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The menu options for a visual. */
	export interface VisualMenuOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** The menu options for a visual. */
	export interface VisualMenuOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateVisualMenuOptionFormGroup() {
		return new FormGroup<VisualMenuOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The axis sort options for a visual. */
	export interface VisualAxisSortOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** The axis sort options for a visual. */
	export interface VisualAxisSortOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateVisualAxisSortOptionFormGroup() {
		return new FormGroup<VisualAxisSortOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** Determines whether or not hidden fields are visible on exported dashbaords. */
	export interface ExportWithHiddenFieldsOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** Determines whether or not hidden fields are visible on exported dashbaords. */
	export interface ExportWithHiddenFieldsOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateExportWithHiddenFieldsOptionFormGroup() {
		return new FormGroup<ExportWithHiddenFieldsOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The drill down options for data points in a dashbaord. */
	export interface DataPointDrillUpDownOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** The drill down options for data points in a dashbaord. */
	export interface DataPointDrillUpDownOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateDataPointDrillUpDownOptionFormGroup() {
		return new FormGroup<DataPointDrillUpDownOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The data point menu options of a dashboard. */
	export interface DataPointMenuLabelOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** The data point menu options of a dashboard. */
	export interface DataPointMenuLabelOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateDataPointMenuLabelOptionFormGroup() {
		return new FormGroup<DataPointMenuLabelOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The data point tooltip options. */
	export interface DataPointTooltipOption {
		AvailabilityStatus?: WidgetStatus;
	}

	/** The data point tooltip options. */
	export interface DataPointTooltipOptionFormProperties {
		AvailabilityStatus: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateDataPointTooltipOptionFormGroup() {
		return new FormGroup<DataPointTooltipOptionFormProperties>({
			AvailabilityStatus: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}

	export interface CreateDataSetResponse {
		Arn?: string;
		DataSetId?: string;
		IngestionArn?: string;
		IngestionId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateDataSetResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSetId: FormControl<string | null | undefined>,
		IngestionArn: FormControl<string | null | undefined>,
		IngestionId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateDataSetResponseFormGroup() {
		return new FormGroup<CreateDataSetResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSetId: new FormControl<string | null | undefined>(undefined),
			IngestionArn: new FormControl<string | null | undefined>(undefined),
			IngestionId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A view of a data source that contains information about the shape of the data in the underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface PhysicalTable {
		RelationalTable?: RelationalTable;
		CustomSql?: CustomSql;
		S3Source?: S3Source;
	}

	/** A view of a data source that contains information about the shape of the data in the underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface PhysicalTableFormProperties {
	}
	export function CreatePhysicalTableFormGroup() {
		return new FormGroup<PhysicalTableFormProperties>({
		});

	}


	/** A physical table type for relational data sources. */
	export interface RelationalTable {

		/** Required */
		DataSourceArn: string;
		Catalog?: string;
		Schema?: string;

		/** Required */
		Name: string;

		/** Required */
		InputColumns: Array<InputColumn>;
	}

	/** A physical table type for relational data sources. */
	export interface RelationalTableFormProperties {

		/** Required */
		DataSourceArn: FormControl<string | null | undefined>,
		Catalog: FormControl<string | null | undefined>,
		Schema: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateRelationalTableFormGroup() {
		return new FormGroup<RelationalTableFormProperties>({
			DataSourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Catalog: new FormControl<string | null | undefined>(undefined),
			Schema: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Metadata for a column that is used as the input of a transform operation. */
	export interface InputColumn {

		/** Required */
		Name: string;

		/** Required */
		Type: InputColumnDataType;
	}

	/** Metadata for a column that is used as the input of a transform operation. */
	export interface InputColumnFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<InputColumnDataType | null | undefined>,
	}
	export function CreateInputColumnFormGroup() {
		return new FormGroup<InputColumnFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<InputColumnDataType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum InputColumnDataType { STRING = 0, INTEGER = 1, DECIMAL = 2, DATETIME = 3, BIT = 4, BOOLEAN = 5, JSON = 6 }


	/** A physical table type built from the results of the custom SQL query. */
	export interface CustomSql {

		/** Required */
		DataSourceArn: string;

		/** Required */
		Name: string;

		/** Required */
		SqlQuery: string;
		Columns?: Array<InputColumn>;
	}

	/** A physical table type built from the results of the custom SQL query. */
	export interface CustomSqlFormProperties {

		/** Required */
		DataSourceArn: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		SqlQuery: FormControl<string | null | undefined>,
	}
	export function CreateCustomSqlFormGroup() {
		return new FormGroup<CustomSqlFormProperties>({
			DataSourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SqlQuery: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A physical table type for an S3 data source. */
	export interface S3Source {

		/** Required */
		DataSourceArn: string;
		UploadSettings?: UploadSettings;

		/** Required */
		InputColumns: Array<InputColumn>;
	}

	/** A physical table type for an S3 data source. */
	export interface S3SourceFormProperties {

		/** Required */
		DataSourceArn: FormControl<string | null | undefined>,
	}
	export function CreateS3SourceFormGroup() {
		return new FormGroup<S3SourceFormProperties>({
			DataSourceArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the format for a source file or files. */
	export interface UploadSettings {
		Format?: FileFormat;
		StartFromRow?: number | null;
		ContainsHeader?: boolean | null;
		TextQualifier?: TextQualifier;
		Delimiter?: string;
	}

	/** Information about the format for a source file or files. */
	export interface UploadSettingsFormProperties {
		Format: FormControl<FileFormat | null | undefined>,
		StartFromRow: FormControl<number | null | undefined>,
		ContainsHeader: FormControl<boolean | null | undefined>,
		TextQualifier: FormControl<TextQualifier | null | undefined>,
		Delimiter: FormControl<string | null | undefined>,
	}
	export function CreateUploadSettingsFormGroup() {
		return new FormGroup<UploadSettingsFormProperties>({
			Format: new FormControl<FileFormat | null | undefined>(undefined),
			StartFromRow: new FormControl<number | null | undefined>(undefined),
			ContainsHeader: new FormControl<boolean | null | undefined>(undefined),
			TextQualifier: new FormControl<TextQualifier | null | undefined>(undefined),
			Delimiter: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum FileFormat { CSV = 0, TSV = 1, CLF = 2, ELF = 3, XLSX = 4, JSON = 5 }

	export enum TextQualifier { DOUBLE_QUOTE = 0, SINGLE_QUOTE = 1 }


	/** A <i>logical table</i> is a unit that joins and that data transformations operate on. A logical table has a source, which can be either a physical table or result of a join. When a logical table points to a physical table, the logical table acts as a mutable copy of that physical table through transform operations. */
	export interface LogicalTable {

		/** Required */
		Alias: string;
		DataTransforms?: Array<TransformOperation>;

		/** Required */
		Source: LogicalTableSource;
	}

	/** A <i>logical table</i> is a unit that joins and that data transformations operate on. A logical table has a source, which can be either a physical table or result of a join. When a logical table points to a physical table, the logical table acts as a mutable copy of that physical table through transform operations. */
	export interface LogicalTableFormProperties {

		/** Required */
		Alias: FormControl<string | null | undefined>,
	}
	export function CreateLogicalTableFormGroup() {
		return new FormGroup<LogicalTableFormProperties>({
			Alias: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A data transformation on a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface TransformOperation {
		ProjectOperation?: ProjectOperation;
		FilterOperation?: FilterOperation;
		CreateColumnsOperation?: CreateColumnsOperation;
		RenameColumnOperation?: RenameColumnOperation;
		CastColumnTypeOperation?: CastColumnTypeOperation;
		TagColumnOperation?: TagColumnOperation;

		/** A transform operation that removes tags associated with a column. */
		UntagColumnOperation?: UntagColumnOperation;

		/** A transform operation that overrides the dataset parameter values that are defined in another dataset. */
		OverrideDatasetParameterOperation?: OverrideDatasetParameterOperation;
	}

	/** A data transformation on a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface TransformOperationFormProperties {
	}
	export function CreateTransformOperationFormGroup() {
		return new FormGroup<TransformOperationFormProperties>({
		});

	}


	/** A transform operation that projects columns. Operations that come after a projection can only refer to projected columns. */
	export interface ProjectOperation {

		/** Required */
		ProjectedColumns: Array<string>;
	}

	/** A transform operation that projects columns. Operations that come after a projection can only refer to projected columns. */
	export interface ProjectOperationFormProperties {
	}
	export function CreateProjectOperationFormGroup() {
		return new FormGroup<ProjectOperationFormProperties>({
		});

	}


	/** A transform operation that filters rows based on a condition. */
	export interface FilterOperation {

		/** Required */
		ConditionExpression: string;
	}

	/** A transform operation that filters rows based on a condition. */
	export interface FilterOperationFormProperties {

		/** Required */
		ConditionExpression: FormControl<string | null | undefined>,
	}
	export function CreateFilterOperationFormGroup() {
		return new FormGroup<FilterOperationFormProperties>({
			ConditionExpression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A transform operation that creates calculated columns. Columns created in one such operation form a lexical closure. */
	export interface CreateColumnsOperation {

		/** Required */
		Columns: Array<CalculatedColumn>;
	}

	/** A transform operation that creates calculated columns. Columns created in one such operation form a lexical closure. */
	export interface CreateColumnsOperationFormProperties {
	}
	export function CreateCreateColumnsOperationFormGroup() {
		return new FormGroup<CreateColumnsOperationFormProperties>({
		});

	}


	/** A calculated column for a dataset. */
	export interface CalculatedColumn {

		/** Required */
		ColumnName: string;

		/** Required */
		ColumnId: string;

		/** Required */
		Expression: string;
	}

	/** A calculated column for a dataset. */
	export interface CalculatedColumnFormProperties {

		/** Required */
		ColumnName: FormControl<string | null | undefined>,

		/** Required */
		ColumnId: FormControl<string | null | undefined>,

		/** Required */
		Expression: FormControl<string | null | undefined>,
	}
	export function CreateCalculatedColumnFormGroup() {
		return new FormGroup<CalculatedColumnFormProperties>({
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ColumnId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A transform operation that renames a column. */
	export interface RenameColumnOperation {

		/** Required */
		ColumnName: string;

		/** Required */
		NewColumnName: string;
	}

	/** A transform operation that renames a column. */
	export interface RenameColumnOperationFormProperties {

		/** Required */
		ColumnName: FormControl<string | null | undefined>,

		/** Required */
		NewColumnName: FormControl<string | null | undefined>,
	}
	export function CreateRenameColumnOperationFormGroup() {
		return new FormGroup<RenameColumnOperationFormProperties>({
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NewColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A transform operation that casts a column to a different type. */
	export interface CastColumnTypeOperation {

		/** Required */
		ColumnName: string;

		/** Required */
		NewColumnType: ColumnDataType;
		Format?: string;
	}

	/** A transform operation that casts a column to a different type. */
	export interface CastColumnTypeOperationFormProperties {

		/** Required */
		ColumnName: FormControl<string | null | undefined>,

		/** Required */
		NewColumnType: FormControl<ColumnDataType | null | undefined>,
		Format: FormControl<string | null | undefined>,
	}
	export function CreateCastColumnTypeOperationFormGroup() {
		return new FormGroup<CastColumnTypeOperationFormProperties>({
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NewColumnType: new FormControl<ColumnDataType | null | undefined>(undefined, [Validators.required]),
			Format: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ColumnDataType { STRING = 0, INTEGER = 1, DECIMAL = 2, DATETIME = 3 }


	/** A transform operation that tags a column with additional information. */
	export interface TagColumnOperation {

		/** Required */
		ColumnName: string;

		/** Required */
		Tags: Array<ColumnTag>;
	}

	/** A transform operation that tags a column with additional information. */
	export interface TagColumnOperationFormProperties {

		/** Required */
		ColumnName: FormControl<string | null | undefined>,
	}
	export function CreateTagColumnOperationFormGroup() {
		return new FormGroup<TagColumnOperationFormProperties>({
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A tag for a column in a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html">TagColumnOperation</a> </code> structure. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface ColumnTag {
		ColumnGeographicRole?: GeoSpatialDataRole;
		ColumnDescription?: ColumnDescription;
	}

	/** A tag for a column in a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html">TagColumnOperation</a> </code> structure. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface ColumnTagFormProperties {
		ColumnGeographicRole: FormControl<GeoSpatialDataRole | null | undefined>,
	}
	export function CreateColumnTagFormGroup() {
		return new FormGroup<ColumnTagFormProperties>({
			ColumnGeographicRole: new FormControl<GeoSpatialDataRole | null | undefined>(undefined),
		});

	}

	export enum GeoSpatialDataRole { COUNTRY = 0, STATE = 1, COUNTY = 2, CITY = 3, POSTCODE = 4, LONGITUDE = 5, LATITUDE = 6 }


	/** Metadata that contains a description for a column. */
	export interface ColumnDescription {
		Text?: string;
	}

	/** Metadata that contains a description for a column. */
	export interface ColumnDescriptionFormProperties {
		Text: FormControl<string | null | undefined>,
	}
	export function CreateColumnDescriptionFormGroup() {
		return new FormGroup<ColumnDescriptionFormProperties>({
			Text: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A transform operation that removes tags associated with a column. */
	export interface UntagColumnOperation {

		/** Required */
		ColumnName: string;

		/** Required */
		TagNames: Array<ColumnTagName>;
	}

	/** A transform operation that removes tags associated with a column. */
	export interface UntagColumnOperationFormProperties {

		/** Required */
		ColumnName: FormControl<string | null | undefined>,
	}
	export function CreateUntagColumnOperationFormGroup() {
		return new FormGroup<UntagColumnOperationFormProperties>({
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum ColumnTagName { COLUMN_GEOGRAPHIC_ROLE = 0, COLUMN_DESCRIPTION = 1 }


	/** A transform operation that overrides the dataset parameter values that are defined in another dataset. */
	export interface OverrideDatasetParameterOperation {

		/** Required */
		ParameterName: string;
		NewParameterName?: string;
		NewDefaultValues?: NewDefaultValues;
	}

	/** A transform operation that overrides the dataset parameter values that are defined in another dataset. */
	export interface OverrideDatasetParameterOperationFormProperties {

		/** Required */
		ParameterName: FormControl<string | null | undefined>,
		NewParameterName: FormControl<string | null | undefined>,
	}
	export function CreateOverrideDatasetParameterOperationFormGroup() {
		return new FormGroup<OverrideDatasetParameterOperationFormProperties>({
			ParameterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NewParameterName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The configuration that overrides the existing default values for a dataset parameter that is inherited from another dataset. */
	export interface NewDefaultValues {
		StringStaticValues?: Array<string>;
		DecimalStaticValues?: Array<number> | null;
		DateTimeStaticValues?: Array<string>;
		IntegerStaticValues?: Array<number> | null;
	}

	/** The configuration that overrides the existing default values for a dataset parameter that is inherited from another dataset. */
	export interface NewDefaultValuesFormProperties {
	}
	export function CreateNewDefaultValuesFormGroup() {
		return new FormGroup<NewDefaultValuesFormProperties>({
		});

	}


	/** Information about the source of a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface LogicalTableSource {
		JoinInstruction?: JoinInstruction;
		PhysicalTableId?: string;
		DataSetArn?: string;
	}

	/** Information about the source of a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface LogicalTableSourceFormProperties {
		PhysicalTableId: FormControl<string | null | undefined>,
		DataSetArn: FormControl<string | null | undefined>,
	}
	export function CreateLogicalTableSourceFormGroup() {
		return new FormGroup<LogicalTableSourceFormProperties>({
			PhysicalTableId: new FormControl<string | null | undefined>(undefined),
			DataSetArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The instructions associated with a join.  */
	export interface JoinInstruction {

		/** Required */
		LeftOperand: string;

		/** Required */
		RightOperand: string;
		LeftJoinKeyProperties?: JoinKeyProperties;
		RightJoinKeyProperties?: JoinKeyProperties;

		/** Required */
		Type: JoinType;

		/** Required */
		OnClause: string;
	}

	/** The instructions associated with a join.  */
	export interface JoinInstructionFormProperties {

		/** Required */
		LeftOperand: FormControl<string | null | undefined>,

		/** Required */
		RightOperand: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<JoinType | null | undefined>,

		/** Required */
		OnClause: FormControl<string | null | undefined>,
	}
	export function CreateJoinInstructionFormGroup() {
		return new FormGroup<JoinInstructionFormProperties>({
			LeftOperand: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RightOperand: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<JoinType | null | undefined>(undefined, [Validators.required]),
			OnClause: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Properties associated with the columns participating in a join. */
	export interface JoinKeyProperties {
		UniqueKey?: boolean | null;
	}

	/** Properties associated with the columns participating in a join. */
	export interface JoinKeyPropertiesFormProperties {
		UniqueKey: FormControl<boolean | null | undefined>,
	}
	export function CreateJoinKeyPropertiesFormGroup() {
		return new FormGroup<JoinKeyPropertiesFormProperties>({
			UniqueKey: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum JoinType { INNER = 0, OUTER = 1, LEFT = 2, RIGHT = 3 }


	/** Groupings of columns that work together in certain Amazon QuickSight features. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface ColumnGroup {
		GeoSpatialColumnGroup?: GeoSpatialColumnGroup;
	}

	/** Groupings of columns that work together in certain Amazon QuickSight features. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface ColumnGroupFormProperties {
	}
	export function CreateColumnGroupFormGroup() {
		return new FormGroup<ColumnGroupFormProperties>({
		});

	}


	/** Geospatial column group that denotes a hierarchy. */
	export interface GeoSpatialColumnGroup {

		/** Required */
		Name: string;
		CountryCode?: GeoSpatialCountryCode;

		/** Required */
		Columns: Array<string>;
	}

	/** Geospatial column group that denotes a hierarchy. */
	export interface GeoSpatialColumnGroupFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		CountryCode: FormControl<GeoSpatialCountryCode | null | undefined>,
	}
	export function CreateGeoSpatialColumnGroupFormGroup() {
		return new FormGroup<GeoSpatialColumnGroupFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CountryCode: new FormControl<GeoSpatialCountryCode | null | undefined>(undefined),
		});

	}

	export enum GeoSpatialCountryCode { US = 0 }


	/** A FieldFolder element is a folder that contains fields and nested subfolders. */
	export interface FieldFolder {
		description?: string;
		columns?: Array<string>;
	}

	/** A FieldFolder element is a folder that contains fields and nested subfolders. */
	export interface FieldFolderFormProperties {
		description: FormControl<string | null | undefined>,
	}
	export function CreateFieldFolderFormGroup() {
		return new FormGroup<FieldFolderFormProperties>({
			description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RowLevelPermissionPolicy { GRANT_ACCESS = 0, DENY_ACCESS = 1 }

	export enum RowLevelPermissionFormatVersion { VERSION_1 = 0, VERSION_2 = 1 }

	export enum Status { ENABLED = 0, DISABLED = 1 }


	/** A set of rules associated with a tag. */
	export interface RowLevelPermissionTagRule {

		/** Required */
		TagKey: string;

		/** Required */
		ColumnName: string;
		TagMultiValueDelimiter?: string;
		MatchAllValue?: string;
	}

	/** A set of rules associated with a tag. */
	export interface RowLevelPermissionTagRuleFormProperties {

		/** Required */
		TagKey: FormControl<string | null | undefined>,

		/** Required */
		ColumnName: FormControl<string | null | undefined>,
		TagMultiValueDelimiter: FormControl<string | null | undefined>,
		MatchAllValue: FormControl<string | null | undefined>,
	}
	export function CreateRowLevelPermissionTagRuleFormGroup() {
		return new FormGroup<RowLevelPermissionTagRuleFormProperties>({
			TagKey: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			TagMultiValueDelimiter: new FormControl<string | null | undefined>(undefined),
			MatchAllValue: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A rule defined to grant access on one or more restricted columns. Each dataset can have multiple rules. To create a restricted column, you add it to one or more rules. Each rule must contain at least one column and at least one user or group. To be able to see a restricted column, a user or group needs to be added to a rule for that column. */
	export interface ColumnLevelPermissionRule {
		Principals?: Array<string>;
		ColumnNames?: Array<string>;
	}

	/** A rule defined to grant access on one or more restricted columns. Each dataset can have multiple rules. To create a restricted column, you add it to one or more rules. Each rule must contain at least one column and at least one user or group. To be able to see a restricted column, a user or group needs to be added to a rule for that column. */
	export interface ColumnLevelPermissionRuleFormProperties {
	}
	export function CreateColumnLevelPermissionRuleFormGroup() {
		return new FormGroup<ColumnLevelPermissionRuleFormProperties>({
		});

	}


	/** A dataset parameter. */
	export interface DatasetParameter {
		StringDatasetParameter?: StringDatasetParameter;
		DecimalDatasetParameter?: DecimalDatasetParameter;
		IntegerDatasetParameter?: IntegerDatasetParameter;
		DateTimeDatasetParameter?: DateTimeDatasetParameter;
	}

	/** A dataset parameter. */
	export interface DatasetParameterFormProperties {
	}
	export function CreateDatasetParameterFormGroup() {
		return new FormGroup<DatasetParameterFormProperties>({
		});

	}


	/** A string parameter for a dataset. */
	export interface StringDatasetParameter {

		/** Required */
		Id: string;

		/** Required */
		Name: string;

		/** Required */
		ValueType: ParameterValueType;
		DefaultValues?: StringDatasetParameterDefaultValues;
	}

	/** A string parameter for a dataset. */
	export interface StringDatasetParameterFormProperties {

		/** Required */
		Id: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		ValueType: FormControl<ParameterValueType | null | undefined>,
	}
	export function CreateStringDatasetParameterFormGroup() {
		return new FormGroup<StringDatasetParameterFormProperties>({
			Id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ValueType: new FormControl<ParameterValueType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The default values of a string parameter. */
	export interface StringDatasetParameterDefaultValues {
		StaticValues?: Array<string>;
	}

	/** The default values of a string parameter. */
	export interface StringDatasetParameterDefaultValuesFormProperties {
	}
	export function CreateStringDatasetParameterDefaultValuesFormGroup() {
		return new FormGroup<StringDatasetParameterDefaultValuesFormProperties>({
		});

	}


	/** A decimal parameter for a dataset. */
	export interface DecimalDatasetParameter {

		/** Required */
		Id: string;

		/** Required */
		Name: string;

		/** Required */
		ValueType: ParameterValueType;
		DefaultValues?: DecimalDatasetParameterDefaultValues;
	}

	/** A decimal parameter for a dataset. */
	export interface DecimalDatasetParameterFormProperties {

		/** Required */
		Id: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		ValueType: FormControl<ParameterValueType | null | undefined>,
	}
	export function CreateDecimalDatasetParameterFormGroup() {
		return new FormGroup<DecimalDatasetParameterFormProperties>({
			Id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ValueType: new FormControl<ParameterValueType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The default values of a decimal parameter. */
	export interface DecimalDatasetParameterDefaultValues {
		StaticValues?: Array<number> | null;
	}

	/** The default values of a decimal parameter. */
	export interface DecimalDatasetParameterDefaultValuesFormProperties {
	}
	export function CreateDecimalDatasetParameterDefaultValuesFormGroup() {
		return new FormGroup<DecimalDatasetParameterDefaultValuesFormProperties>({
		});

	}


	/** An integer parameter for a dataset. */
	export interface IntegerDatasetParameter {

		/** Required */
		Id: string;

		/** Required */
		Name: string;

		/** Required */
		ValueType: ParameterValueType;
		DefaultValues?: IntegerDatasetParameterDefaultValues;
	}

	/** An integer parameter for a dataset. */
	export interface IntegerDatasetParameterFormProperties {

		/** Required */
		Id: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		ValueType: FormControl<ParameterValueType | null | undefined>,
	}
	export function CreateIntegerDatasetParameterFormGroup() {
		return new FormGroup<IntegerDatasetParameterFormProperties>({
			Id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ValueType: new FormControl<ParameterValueType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The default values of an integer parameter. */
	export interface IntegerDatasetParameterDefaultValues {
		StaticValues?: Array<number> | null;
	}

	/** The default values of an integer parameter. */
	export interface IntegerDatasetParameterDefaultValuesFormProperties {
	}
	export function CreateIntegerDatasetParameterDefaultValuesFormGroup() {
		return new FormGroup<IntegerDatasetParameterDefaultValuesFormProperties>({
		});

	}


	/** A date time parameter for a dataset. */
	export interface DateTimeDatasetParameter {

		/** Required */
		Id: string;

		/** Required */
		Name: string;

		/** Required */
		ValueType: ParameterValueType;
		TimeGranularity?: TimeGranularity;
		DefaultValues?: DateTimeDatasetParameterDefaultValues;
	}

	/** A date time parameter for a dataset. */
	export interface DateTimeDatasetParameterFormProperties {

		/** Required */
		Id: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		ValueType: FormControl<ParameterValueType | null | undefined>,
		TimeGranularity: FormControl<TimeGranularity | null | undefined>,
	}
	export function CreateDateTimeDatasetParameterFormGroup() {
		return new FormGroup<DateTimeDatasetParameterFormProperties>({
			Id: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ValueType: new FormControl<ParameterValueType | null | undefined>(undefined, [Validators.required]),
			TimeGranularity: new FormControl<TimeGranularity | null | undefined>(undefined),
		});

	}


	/** The default values of a date time parameter. */
	export interface DateTimeDatasetParameterDefaultValues {
		StaticValues?: Array<string>;
	}

	/** The default values of a date time parameter. */
	export interface DateTimeDatasetParameterDefaultValuesFormProperties {
	}
	export function CreateDateTimeDatasetParameterDefaultValuesFormGroup() {
		return new FormGroup<DateTimeDatasetParameterDefaultValuesFormProperties>({
		});

	}

	export interface CreateDataSourceResponse {
		Arn?: string;
		DataSourceId?: string;
		CreationStatus?: ResourceStatus;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateDataSourceResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSourceId: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateDataSourceResponseFormGroup() {
		return new FormGroup<CreateDataSourceResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSourceId: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The parameters for OpenSearch. */
	export interface AmazonElasticsearchParameters {

		/** Required */
		Domain: string;
	}

	/** The parameters for OpenSearch. */
	export interface AmazonElasticsearchParametersFormProperties {

		/** Required */
		Domain: FormControl<string | null | undefined>,
	}
	export function CreateAmazonElasticsearchParametersFormGroup() {
		return new FormGroup<AmazonElasticsearchParametersFormProperties>({
			Domain: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Parameters for Amazon Athena. */
	export interface AthenaParameters {
		WorkGroup?: string;
		RoleArn?: string;
	}

	/** Parameters for Amazon Athena. */
	export interface AthenaParametersFormProperties {
		WorkGroup: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateAthenaParametersFormGroup() {
		return new FormGroup<AthenaParametersFormProperties>({
			WorkGroup: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Parameters for Amazon Aurora. */
	export interface AuroraParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** Parameters for Amazon Aurora. */
	export interface AuroraParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateAuroraParametersFormGroup() {
		return new FormGroup<AuroraParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Parameters for Amazon Aurora PostgreSQL-Compatible Edition. */
	export interface AuroraPostgreSqlParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** Parameters for Amazon Aurora PostgreSQL-Compatible Edition. */
	export interface AuroraPostgreSqlParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateAuroraPostgreSqlParametersFormGroup() {
		return new FormGroup<AuroraPostgreSqlParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for IoT Analytics. */
	export interface AwsIotAnalyticsParameters {

		/** Required */
		DataSetName: string;
	}

	/** The parameters for IoT Analytics. */
	export interface AwsIotAnalyticsParametersFormProperties {

		/** Required */
		DataSetName: FormControl<string | null | undefined>,
	}
	export function CreateAwsIotAnalyticsParametersFormGroup() {
		return new FormGroup<AwsIotAnalyticsParametersFormProperties>({
			DataSetName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Jira. */
	export interface JiraParameters {

		/** Required */
		SiteBaseUrl: string;
	}

	/** The parameters for Jira. */
	export interface JiraParametersFormProperties {

		/** Required */
		SiteBaseUrl: FormControl<string | null | undefined>,
	}
	export function CreateJiraParametersFormGroup() {
		return new FormGroup<JiraParametersFormProperties>({
			SiteBaseUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for MariaDB. */
	export interface MariaDbParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** The parameters for MariaDB. */
	export interface MariaDbParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateMariaDbParametersFormGroup() {
		return new FormGroup<MariaDbParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for MySQL. */
	export interface MySqlParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** The parameters for MySQL. */
	export interface MySqlParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateMySqlParametersFormGroup() {
		return new FormGroup<MySqlParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Oracle. */
	export interface OracleParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** The parameters for Oracle. */
	export interface OracleParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateOracleParametersFormGroup() {
		return new FormGroup<OracleParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for PostgreSQL. */
	export interface PostgreSqlParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** The parameters for PostgreSQL. */
	export interface PostgreSqlParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreatePostgreSqlParametersFormGroup() {
		return new FormGroup<PostgreSqlParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Presto. */
	export interface PrestoParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Catalog: string;
	}

	/** The parameters for Presto. */
	export interface PrestoParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Catalog: FormControl<string | null | undefined>,
	}
	export function CreatePrestoParametersFormGroup() {
		return new FormGroup<PrestoParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Catalog: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Amazon RDS. */
	export interface RdsParameters {

		/** Required */
		InstanceId: string;

		/** Required */
		Database: string;
	}

	/** The parameters for Amazon RDS. */
	export interface RdsParametersFormProperties {

		/** Required */
		InstanceId: FormControl<string | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateRdsParametersFormGroup() {
		return new FormGroup<RdsParametersFormProperties>({
			InstanceId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set. */
	export interface RedshiftParameters {
		Host?: string;
		Port?: number | null;

		/** Required */
		Database: string;
		ClusterId?: string;
	}

	/** The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set. */
	export interface RedshiftParametersFormProperties {
		Host: FormControl<string | null | undefined>,
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
		ClusterId: FormControl<string | null | undefined>,
	}
	export function CreateRedshiftParametersFormGroup() {
		return new FormGroup<RedshiftParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined),
			Port: new FormControl<number | null | undefined>(undefined),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ClusterId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The parameters for S3. */
	export interface S3Parameters {

		/** Required */
		ManifestFileLocation: ManifestFileLocation;
		RoleArn?: string;
	}

	/** The parameters for S3. */
	export interface S3ParametersFormProperties {
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateS3ParametersFormGroup() {
		return new FormGroup<S3ParametersFormProperties>({
			RoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Amazon S3 manifest file location. */
	export interface ManifestFileLocation {

		/** Required */
		Bucket: string;

		/** Required */
		Key: string;
	}

	/** Amazon S3 manifest file location. */
	export interface ManifestFileLocationFormProperties {

		/** Required */
		Bucket: FormControl<string | null | undefined>,

		/** Required */
		Key: FormControl<string | null | undefined>,
	}
	export function CreateManifestFileLocationFormGroup() {
		return new FormGroup<ManifestFileLocationFormProperties>({
			Bucket: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for ServiceNow. */
	export interface ServiceNowParameters {

		/** Required */
		SiteBaseUrl: string;
	}

	/** The parameters for ServiceNow. */
	export interface ServiceNowParametersFormProperties {

		/** Required */
		SiteBaseUrl: FormControl<string | null | undefined>,
	}
	export function CreateServiceNowParametersFormGroup() {
		return new FormGroup<ServiceNowParametersFormProperties>({
			SiteBaseUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Snowflake. */
	export interface SnowflakeParameters {

		/** Required */
		Host: string;

		/** Required */
		Database: string;

		/** Required */
		Warehouse: string;
	}

	/** The parameters for Snowflake. */
	export interface SnowflakeParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,

		/** Required */
		Warehouse: FormControl<string | null | undefined>,
	}
	export function CreateSnowflakeParametersFormGroup() {
		return new FormGroup<SnowflakeParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Warehouse: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Spark. */
	export interface SparkParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;
	}

	/** The parameters for Spark. */
	export interface SparkParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,
	}
	export function CreateSparkParametersFormGroup() {
		return new FormGroup<SparkParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for SQL Server. */
	export interface SqlServerParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** The parameters for SQL Server. */
	export interface SqlServerParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateSqlServerParametersFormGroup() {
		return new FormGroup<SqlServerParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Teradata. */
	export interface TeradataParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		Database: string;
	}

	/** The parameters for Teradata. */
	export interface TeradataParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		Database: FormControl<string | null | undefined>,
	}
	export function CreateTeradataParametersFormGroup() {
		return new FormGroup<TeradataParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			Database: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for Twitter. */
	export interface TwitterParameters {

		/** Required */
		Query: string;

		/** Required */
		MaxRows: number;
	}

	/** The parameters for Twitter. */
	export interface TwitterParametersFormProperties {

		/** Required */
		Query: FormControl<string | null | undefined>,

		/** Required */
		MaxRows: FormControl<number | null | undefined>,
	}
	export function CreateTwitterParametersFormGroup() {
		return new FormGroup<TwitterParametersFormProperties>({
			Query: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			MaxRows: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters for OpenSearch. */
	export interface AmazonOpenSearchParameters {

		/** Required */
		Domain: string;
	}

	/** The parameters for OpenSearch. */
	export interface AmazonOpenSearchParametersFormProperties {

		/** Required */
		Domain: FormControl<string | null | undefined>,
	}
	export function CreateAmazonOpenSearchParametersFormGroup() {
		return new FormGroup<AmazonOpenSearchParametersFormProperties>({
			Domain: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The required parameters for connecting to an Exasol data source. */
	export interface ExasolParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;
	}

	/** The required parameters for connecting to an Exasol data source. */
	export interface ExasolParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,
	}
	export function CreateExasolParametersFormGroup() {
		return new FormGroup<ExasolParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The required parameters that are needed to connect to a Databricks data source. */
	export interface DatabricksParameters {

		/** Required */
		Host: string;

		/** Required */
		Port: number;

		/** Required */
		SqlEndpointPath: string;
	}

	/** The required parameters that are needed to connect to a Databricks data source. */
	export interface DatabricksParametersFormProperties {

		/** Required */
		Host: FormControl<string | null | undefined>,

		/** Required */
		Port: FormControl<number | null | undefined>,

		/** Required */
		SqlEndpointPath: FormControl<string | null | undefined>,
	}
	export function CreateDatabricksParametersFormGroup() {
		return new FormGroup<DatabricksParametersFormProperties>({
			Host: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Port: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			SqlEndpointPath: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The combination of user name and password that are used as credentials. */
	export interface CredentialPair {

		/** Required */
		Username: string;

		/** Required */
		Password: string;
		AlternateDataSourceParameters?: Array<DataSourceParameters>;
	}

	/** The combination of user name and password that are used as credentials. */
	export interface CredentialPairFormProperties {

		/** Required */
		Username: FormControl<string | null | undefined>,

		/** Required */
		Password: FormControl<string | null | undefined>,
	}
	export function CreateCredentialPairFormGroup() {
		return new FormGroup<CredentialPairFormProperties>({
			Username: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Password: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface DataSourceParameters {
		AmazonElasticsearchParameters?: AmazonElasticsearchParameters;
		AthenaParameters?: AthenaParameters;
		AuroraParameters?: AuroraParameters;
		AuroraPostgreSqlParameters?: AuroraPostgreSqlParameters;
		AwsIotAnalyticsParameters?: AwsIotAnalyticsParameters;
		JiraParameters?: JiraParameters;
		MariaDbParameters?: MariaDbParameters;
		MySqlParameters?: MySqlParameters;
		OracleParameters?: OracleParameters;
		PostgreSqlParameters?: PostgreSqlParameters;
		PrestoParameters?: PrestoParameters;
		RdsParameters?: RdsParameters;
		RedshiftParameters?: RedshiftParameters;
		S3Parameters?: S3Parameters;
		ServiceNowParameters?: ServiceNowParameters;
		SnowflakeParameters?: SnowflakeParameters;
		SparkParameters?: SparkParameters;
		SqlServerParameters?: SqlServerParameters;
		TeradataParameters?: TeradataParameters;
		TwitterParameters?: TwitterParameters;
		AmazonOpenSearchParameters?: AmazonOpenSearchParameters;
		ExasolParameters?: ExasolParameters;
		DatabricksParameters?: DatabricksParameters;
	}

	/** The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface DataSourceParametersFormProperties {
	}
	export function CreateDataSourceParametersFormGroup() {
		return new FormGroup<DataSourceParametersFormProperties>({
		});

	}

	export interface CreateFolderResponse {
		Status?: number | null;
		Arn?: string;
		FolderId?: string;
		RequestId?: string;
	}
	export interface CreateFolderResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		FolderId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateFolderResponseFormGroup() {
		return new FormGroup<CreateFolderResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			FolderId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateFolderMembershipResponse {
		Status?: number | null;
		FolderMember?: FolderMember;
		RequestId?: string;
	}
	export interface CreateFolderMembershipResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateFolderMembershipResponseFormGroup() {
		return new FormGroup<CreateFolderMembershipResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An asset in a Amazon QuickSight folder, such as a dashboard, analysis, or dataset. */
	export interface FolderMember {
		MemberId?: string;
		MemberType?: MemberType;
	}

	/** An asset in a Amazon QuickSight folder, such as a dashboard, analysis, or dataset. */
	export interface FolderMemberFormProperties {
		MemberId: FormControl<string | null | undefined>,
		MemberType: FormControl<MemberType | null | undefined>,
	}
	export function CreateFolderMemberFormGroup() {
		return new FormGroup<FolderMemberFormProperties>({
			MemberId: new FormControl<string | null | undefined>(undefined),
			MemberType: new FormControl<MemberType | null | undefined>(undefined),
		});

	}

	export enum MemberType { DASHBOARD = 0, ANALYSIS = 1, DATASET = 2 }


	/** The response object for this operation. */
	export interface CreateGroupResponse {
		Group?: Group;
		RequestId?: string;
		Status?: number | null;
	}

	/** The response object for this operation. */
	export interface CreateGroupResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateGroupResponseFormGroup() {
		return new FormGroup<CreateGroupResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A <i>group</i> in Amazon QuickSight consists of a set of users. You can use groups to make it easier to manage access and security.  */
	export interface Group {
		Arn?: string;
		GroupName?: string;
		Description?: string;
		PrincipalId?: string;
	}

	/** A <i>group</i> in Amazon QuickSight consists of a set of users. You can use groups to make it easier to manage access and security.  */
	export interface GroupFormProperties {
		Arn: FormControl<string | null | undefined>,
		GroupName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		PrincipalId: FormControl<string | null | undefined>,
	}
	export function CreateGroupFormGroup() {
		return new FormGroup<GroupFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			GroupName: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			PrincipalId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateGroupMembershipResponse {
		GroupMember?: GroupMember;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateGroupMembershipResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateGroupMembershipResponseFormGroup() {
		return new FormGroup<CreateGroupMembershipResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A member of an Amazon QuickSight group. Currently, group members must be users. Groups can't be members of another group. . */
	export interface GroupMember {
		Arn?: string;
		MemberName?: string;
	}

	/** A member of an Amazon QuickSight group. Currently, group members must be users. Groups can't be members of another group. . */
	export interface GroupMemberFormProperties {
		Arn: FormControl<string | null | undefined>,
		MemberName: FormControl<string | null | undefined>,
	}
	export function CreateGroupMemberFormGroup() {
		return new FormGroup<GroupMemberFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			MemberName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateIAMPolicyAssignmentResponse {
		AssignmentName?: string;
		AssignmentId?: string;
		AssignmentStatus?: AssignmentStatus;
		PolicyArn?: string;
		Identities?: IdentityMap;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateIAMPolicyAssignmentResponseFormProperties {
		AssignmentName: FormControl<string | null | undefined>,
		AssignmentId: FormControl<string | null | undefined>,
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,
		PolicyArn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateIAMPolicyAssignmentResponseFormGroup() {
		return new FormGroup<CreateIAMPolicyAssignmentResponseFormProperties>({
			AssignmentName: new FormControl<string | null | undefined>(undefined),
			AssignmentId: new FormControl<string | null | undefined>(undefined),
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum AssignmentStatus { ENABLED = 0, DRAFT = 1, DISABLED = 2 }

	export interface IdentityMap {
	}
	export interface IdentityMapFormProperties {
	}
	export function CreateIdentityMapFormGroup() {
		return new FormGroup<IdentityMapFormProperties>({
		});

	}

	export interface ConcurrentUpdatingException {
	}
	export interface ConcurrentUpdatingExceptionFormProperties {
	}
	export function CreateConcurrentUpdatingExceptionFormGroup() {
		return new FormGroup<ConcurrentUpdatingExceptionFormProperties>({
		});

	}

	export interface CreateIngestionResponse {
		Arn?: string;
		IngestionId?: string;
		IngestionStatus?: IngestionStatus;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateIngestionResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		IngestionId: FormControl<string | null | undefined>,
		IngestionStatus: FormControl<IngestionStatus | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateIngestionResponseFormGroup() {
		return new FormGroup<CreateIngestionResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			IngestionId: new FormControl<string | null | undefined>(undefined),
			IngestionStatus: new FormControl<IngestionStatus | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum IngestionStatus { INITIALIZED = 0, QUEUED = 1, RUNNING = 2, FAILED = 3, COMPLETED = 4, CANCELLED = 5 }

	export interface CreateNamespaceResponse {
		Arn?: string;
		Name?: string;
		CapacityRegion?: string;
		CreationStatus?: NamespaceStatus;
		IdentityStore?: IdentityStore;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateNamespaceResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		CapacityRegion: FormControl<string | null | undefined>,
		CreationStatus: FormControl<NamespaceStatus | null | undefined>,
		IdentityStore: FormControl<IdentityStore | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateNamespaceResponseFormGroup() {
		return new FormGroup<CreateNamespaceResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			CapacityRegion: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<NamespaceStatus | null | undefined>(undefined),
			IdentityStore: new FormControl<IdentityStore | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum NamespaceStatus { CREATED = 0, CREATING = 1, DELETING = 2, RETRYABLE_FAILURE = 3, NON_RETRYABLE_FAILURE = 4 }

	export enum IdentityStore { QUICKSIGHT = 0 }

	export interface CreateRefreshScheduleResponse {
		Status?: number | null;
		RequestId?: string;
		ScheduleId?: string;
		Arn?: string;
	}
	export interface CreateRefreshScheduleResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		ScheduleId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateCreateRefreshScheduleResponseFormGroup() {
		return new FormGroup<CreateRefreshScheduleResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			ScheduleId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Specifies the interval between each scheduled refresh of a dataset. */
	export interface RefreshFrequency {

		/** Required */
		Interval: RefreshInterval;
		RefreshOnDay?: ScheduleRefreshOnEntity;
		Timezone?: string;
		TimeOfTheDay?: string;
	}

	/** Specifies the interval between each scheduled refresh of a dataset. */
	export interface RefreshFrequencyFormProperties {

		/** Required */
		Interval: FormControl<RefreshInterval | null | undefined>,
		Timezone: FormControl<string | null | undefined>,
		TimeOfTheDay: FormControl<string | null | undefined>,
	}
	export function CreateRefreshFrequencyFormGroup() {
		return new FormGroup<RefreshFrequencyFormProperties>({
			Interval: new FormControl<RefreshInterval | null | undefined>(undefined, [Validators.required]),
			Timezone: new FormControl<string | null | undefined>(undefined),
			TimeOfTheDay: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum RefreshInterval { MINUTE15 = 0, MINUTE30 = 1, HOURLY = 2, DAILY = 3, WEEKLY = 4, MONTHLY = 5 }


	/** The refresh on entity for weekly or monthly schedules. */
	export interface ScheduleRefreshOnEntity {
		DayOfWeek?: DayOfWeek;
		DayOfMonth?: string;
	}

	/** The refresh on entity for weekly or monthly schedules. */
	export interface ScheduleRefreshOnEntityFormProperties {
		DayOfWeek: FormControl<DayOfWeek | null | undefined>,
		DayOfMonth: FormControl<string | null | undefined>,
	}
	export function CreateScheduleRefreshOnEntityFormGroup() {
		return new FormGroup<ScheduleRefreshOnEntityFormProperties>({
			DayOfWeek: new FormControl<DayOfWeek | null | undefined>(undefined),
			DayOfMonth: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DayOfWeek { SUNDAY = 0, MONDAY = 1, TUESDAY = 2, WEDNESDAY = 3, THURSDAY = 4, FRIDAY = 5, SATURDAY = 6 }


	/** This defines the type of ingestion user wants to trigger. This is part of create ingestion request. */
	export enum IngestionType { INCREMENTAL_REFRESH = 0, FULL_REFRESH = 1 }

	export interface CreateTemplateResponse {
		Arn?: string;
		VersionArn?: string;
		TemplateId?: string;
		CreationStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateTemplateResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		VersionArn: FormControl<string | null | undefined>,
		TemplateId: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateTemplateResponseFormGroup() {
		return new FormGroup<CreateTemplateResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VersionArn: new FormControl<string | null | undefined>(undefined),
			TemplateId: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The source analysis of the template. */
	export interface TemplateSourceAnalysis {

		/** Required */
		Arn: string;

		/** Required */
		DataSetReferences: Array<DataSetReference>;
	}

	/** The source analysis of the template. */
	export interface TemplateSourceAnalysisFormProperties {

		/** Required */
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateTemplateSourceAnalysisFormGroup() {
		return new FormGroup<TemplateSourceAnalysisFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The source template of the template. */
	export interface TemplateSourceTemplate {

		/** Required */
		Arn: string;
	}

	/** The source template of the template. */
	export interface TemplateSourceTemplateFormProperties {

		/** Required */
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateTemplateSourceTemplateFormGroup() {
		return new FormGroup<TemplateSourceTemplateFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Dataset configuration. */
	export interface DataSetConfiguration {
		Placeholder?: string;
		DataSetSchema?: DataSetSchema;
		ColumnGroupSchemaList?: Array<ColumnGroupSchema>;
	}

	/** Dataset configuration. */
	export interface DataSetConfigurationFormProperties {
		Placeholder: FormControl<string | null | undefined>,
	}
	export function CreateDataSetConfigurationFormGroup() {
		return new FormGroup<DataSetConfigurationFormProperties>({
			Placeholder: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dataset schema. */
	export interface DataSetSchema {
		ColumnSchemaList?: Array<ColumnSchema>;
	}

	/** Dataset schema. */
	export interface DataSetSchemaFormProperties {
	}
	export function CreateDataSetSchemaFormGroup() {
		return new FormGroup<DataSetSchemaFormProperties>({
		});

	}


	/** The column schema. */
	export interface ColumnSchema {
		Name?: string;
		DataType?: string;
		GeographicRole?: string;
	}

	/** The column schema. */
	export interface ColumnSchemaFormProperties {
		Name: FormControl<string | null | undefined>,
		DataType: FormControl<string | null | undefined>,
		GeographicRole: FormControl<string | null | undefined>,
	}
	export function CreateColumnSchemaFormGroup() {
		return new FormGroup<ColumnSchemaFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			DataType: new FormControl<string | null | undefined>(undefined),
			GeographicRole: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The column group schema. */
	export interface ColumnGroupSchema {
		Name?: string;
		ColumnGroupColumnSchemaList?: Array<ColumnGroupColumnSchema>;
	}

	/** The column group schema. */
	export interface ColumnGroupSchemaFormProperties {
		Name: FormControl<string | null | undefined>,
	}
	export function CreateColumnGroupSchemaFormGroup() {
		return new FormGroup<ColumnGroupSchemaFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure describing the name, data type, and geographic role of the columns. */
	export interface ColumnGroupColumnSchema {
		Name?: string;
	}

	/** A structure describing the name, data type, and geographic role of the columns. */
	export interface ColumnGroupColumnSchemaFormProperties {
		Name: FormControl<string | null | undefined>,
	}
	export function CreateColumnGroupColumnSchemaFormGroup() {
		return new FormGroup<ColumnGroupColumnSchemaFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTemplateAliasResponse {
		TemplateAlias?: TemplateAlias;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateTemplateAliasResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateTemplateAliasResponseFormGroup() {
		return new FormGroup<CreateTemplateAliasResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The template alias. */
	export interface TemplateAlias {
		AliasName?: string;
		Arn?: string;
		TemplateVersionNumber?: number | null;
	}

	/** The template alias. */
	export interface TemplateAliasFormProperties {
		AliasName: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		TemplateVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateTemplateAliasFormGroup() {
		return new FormGroup<TemplateAliasFormProperties>({
			AliasName: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			TemplateVersionNumber: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CreateThemeResponse {
		Arn?: string;
		VersionArn?: string;
		ThemeId?: string;
		CreationStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateThemeResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		VersionArn: FormControl<string | null | undefined>,
		ThemeId: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateThemeResponseFormGroup() {
		return new FormGroup<CreateThemeResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VersionArn: new FormControl<string | null | undefined>(undefined),
			ThemeId: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The theme colors that are used for data colors in charts. The colors description is a hexadecimal color code that consists of six alphanumerical characters, prefixed with <code>#</code>, for example #37BFF5.  */
	export interface DataColorPalette {
		Colors?: Array<string>;
		MinMaxGradient?: Array<string>;
		EmptyFillColor?: string;
	}

	/** The theme colors that are used for data colors in charts. The colors description is a hexadecimal color code that consists of six alphanumerical characters, prefixed with <code>#</code>, for example #37BFF5.  */
	export interface DataColorPaletteFormProperties {
		EmptyFillColor: FormControl<string | null | undefined>,
	}
	export function CreateDataColorPaletteFormGroup() {
		return new FormGroup<DataColorPaletteFormProperties>({
			EmptyFillColor: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The theme colors that apply to UI and to charts, excluding data colors. The colors description is a hexadecimal color code that consists of six alphanumerical characters, prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i>  */
	export interface UIColorPalette {
		PrimaryForeground?: string;
		PrimaryBackground?: string;
		SecondaryForeground?: string;
		SecondaryBackground?: string;
		Accent?: string;
		AccentForeground?: string;
		Danger?: string;
		DangerForeground?: string;
		Warning?: string;
		WarningForeground?: string;
		Success?: string;
		SuccessForeground?: string;
		Dimension?: string;
		DimensionForeground?: string;
		Measure?: string;
		MeasureForeground?: string;
	}

	/** The theme colors that apply to UI and to charts, excluding data colors. The colors description is a hexadecimal color code that consists of six alphanumerical characters, prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i>  */
	export interface UIColorPaletteFormProperties {
		PrimaryForeground: FormControl<string | null | undefined>,
		PrimaryBackground: FormControl<string | null | undefined>,
		SecondaryForeground: FormControl<string | null | undefined>,
		SecondaryBackground: FormControl<string | null | undefined>,
		Accent: FormControl<string | null | undefined>,
		AccentForeground: FormControl<string | null | undefined>,
		Danger: FormControl<string | null | undefined>,
		DangerForeground: FormControl<string | null | undefined>,
		Warning: FormControl<string | null | undefined>,
		WarningForeground: FormControl<string | null | undefined>,
		Success: FormControl<string | null | undefined>,
		SuccessForeground: FormControl<string | null | undefined>,
		Dimension: FormControl<string | null | undefined>,
		DimensionForeground: FormControl<string | null | undefined>,
		Measure: FormControl<string | null | undefined>,
		MeasureForeground: FormControl<string | null | undefined>,
	}
	export function CreateUIColorPaletteFormGroup() {
		return new FormGroup<UIColorPaletteFormProperties>({
			PrimaryForeground: new FormControl<string | null | undefined>(undefined),
			PrimaryBackground: new FormControl<string | null | undefined>(undefined),
			SecondaryForeground: new FormControl<string | null | undefined>(undefined),
			SecondaryBackground: new FormControl<string | null | undefined>(undefined),
			Accent: new FormControl<string | null | undefined>(undefined),
			AccentForeground: new FormControl<string | null | undefined>(undefined),
			Danger: new FormControl<string | null | undefined>(undefined),
			DangerForeground: new FormControl<string | null | undefined>(undefined),
			Warning: new FormControl<string | null | undefined>(undefined),
			WarningForeground: new FormControl<string | null | undefined>(undefined),
			Success: new FormControl<string | null | undefined>(undefined),
			SuccessForeground: new FormControl<string | null | undefined>(undefined),
			Dimension: new FormControl<string | null | undefined>(undefined),
			DimensionForeground: new FormControl<string | null | undefined>(undefined),
			Measure: new FormControl<string | null | undefined>(undefined),
			MeasureForeground: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The theme display options for sheets.  */
	export interface SheetStyle {
		Tile?: TileStyle;
		TileLayout?: TileLayoutStyle;
	}

	/** The theme display options for sheets.  */
	export interface SheetStyleFormProperties {
	}
	export function CreateSheetStyleFormGroup() {
		return new FormGroup<SheetStyleFormProperties>({
		});

	}


	/** Display options related to tiles on a sheet. */
	export interface TileStyle {
		Border?: BorderStyle;
	}

	/** Display options related to tiles on a sheet. */
	export interface TileStyleFormProperties {
	}
	export function CreateTileStyleFormGroup() {
		return new FormGroup<TileStyleFormProperties>({
		});

	}


	/** The display options for tile borders for visuals. */
	export interface BorderStyle {
		Show?: boolean | null;
	}

	/** The display options for tile borders for visuals. */
	export interface BorderStyleFormProperties {
		Show: FormControl<boolean | null | undefined>,
	}
	export function CreateBorderStyleFormGroup() {
		return new FormGroup<BorderStyleFormProperties>({
			Show: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The display options for the layout of tiles on a sheet. */
	export interface TileLayoutStyle {
		Gutter?: GutterStyle;
		Margin?: MarginStyle;
	}

	/** The display options for the layout of tiles on a sheet. */
	export interface TileLayoutStyleFormProperties {
	}
	export function CreateTileLayoutStyleFormGroup() {
		return new FormGroup<TileLayoutStyleFormProperties>({
		});

	}


	/** The display options for gutter spacing between tiles on a sheet. */
	export interface GutterStyle {
		Show?: boolean | null;
	}

	/** The display options for gutter spacing between tiles on a sheet. */
	export interface GutterStyleFormProperties {
		Show: FormControl<boolean | null | undefined>,
	}
	export function CreateGutterStyleFormGroup() {
		return new FormGroup<GutterStyleFormProperties>({
			Show: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The display options for margins around the outside edge of sheets. */
	export interface MarginStyle {
		Show?: boolean | null;
	}

	/** The display options for margins around the outside edge of sheets. */
	export interface MarginStyleFormProperties {
		Show: FormControl<boolean | null | undefined>,
	}
	export function CreateMarginStyleFormGroup() {
		return new FormGroup<MarginStyleFormProperties>({
			Show: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Determines the typography options. */
	export interface Typography {
		FontFamilies?: Array<Font>;
	}

	/** Determines the typography options. */
	export interface TypographyFormProperties {
	}
	export function CreateTypographyFormGroup() {
		return new FormGroup<TypographyFormProperties>({
		});

	}


	/** Determines the font settings. */
	export interface Font {
		FontFamily?: string;
	}

	/** Determines the font settings. */
	export interface FontFormProperties {
		FontFamily: FormControl<string | null | undefined>,
	}
	export function CreateFontFormGroup() {
		return new FormGroup<FontFormProperties>({
			FontFamily: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateThemeAliasResponse {
		ThemeAlias?: ThemeAlias;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateThemeAliasResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateThemeAliasResponseFormGroup() {
		return new FormGroup<CreateThemeAliasResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An alias for a theme. */
	export interface ThemeAlias {
		Arn?: string;
		AliasName?: string;
		ThemeVersionNumber?: number | null;
	}

	/** An alias for a theme. */
	export interface ThemeAliasFormProperties {
		Arn: FormControl<string | null | undefined>,
		AliasName: FormControl<string | null | undefined>,
		ThemeVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateThemeAliasFormGroup() {
		return new FormGroup<ThemeAliasFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AliasName: new FormControl<string | null | undefined>(undefined),
			ThemeVersionNumber: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface CreateTopicResponse {
		Arn?: string;
		TopicId?: string;
		RefreshArn?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateTopicResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		TopicId: FormControl<string | null | undefined>,
		RefreshArn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateTopicResponseFormGroup() {
		return new FormGroup<CreateTopicResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			TopicId: new FormControl<string | null | undefined>(undefined),
			RefreshArn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A structure that represents a dataset. */
	export interface DatasetMetadata {

		/** Required */
		DatasetArn: string;
		DatasetName?: string;
		DatasetDescription?: string;
		DataAggregation?: DataAggregation;
		Filters?: Array<TopicFilter>;
		Columns?: Array<TopicColumn>;
		CalculatedFields?: Array<TopicCalculatedField>;
		NamedEntities?: Array<TopicNamedEntity>;
	}

	/** A structure that represents a dataset. */
	export interface DatasetMetadataFormProperties {

		/** Required */
		DatasetArn: FormControl<string | null | undefined>,
		DatasetName: FormControl<string | null | undefined>,
		DatasetDescription: FormControl<string | null | undefined>,
	}
	export function CreateDatasetMetadataFormGroup() {
		return new FormGroup<DatasetMetadataFormProperties>({
			DatasetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DatasetName: new FormControl<string | null | undefined>(undefined),
			DatasetDescription: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that represents a data aggregation. */
	export interface DataAggregation {
		DatasetRowDateGranularity?: TopicTimeGranularity;
		DefaultDateColumnName?: string;
	}

	/** A structure that represents a data aggregation. */
	export interface DataAggregationFormProperties {
		DatasetRowDateGranularity: FormControl<TopicTimeGranularity | null | undefined>,
		DefaultDateColumnName: FormControl<string | null | undefined>,
	}
	export function CreateDataAggregationFormGroup() {
		return new FormGroup<DataAggregationFormProperties>({
			DatasetRowDateGranularity: new FormControl<TopicTimeGranularity | null | undefined>(undefined),
			DefaultDateColumnName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TopicTimeGranularity { SECOND = 0, MINUTE = 1, HOUR = 2, DAY = 3, WEEK = 4, MONTH = 5, QUARTER = 6, YEAR = 7 }


	/** A structure that represents a filter used to select items for a topic. */
	export interface TopicFilter {
		FilterDescription?: string;
		FilterClass?: FilterClass;

		/** Required */
		FilterName: string;
		FilterSynonyms?: Array<string>;

		/** Required */
		OperandFieldName: string;
		FilterType?: NamedFilterType;
		CategoryFilter?: TopicCategoryFilter;
		NumericEqualityFilter?: TopicNumericEqualityFilter;
		NumericRangeFilter?: TopicNumericRangeFilter;
		DateRangeFilter?: TopicDateRangeFilter;
		RelativeDateFilter?: TopicRelativeDateFilter;
	}

	/** A structure that represents a filter used to select items for a topic. */
	export interface TopicFilterFormProperties {
		FilterDescription: FormControl<string | null | undefined>,
		FilterClass: FormControl<FilterClass | null | undefined>,

		/** Required */
		FilterName: FormControl<string | null | undefined>,

		/** Required */
		OperandFieldName: FormControl<string | null | undefined>,
		FilterType: FormControl<NamedFilterType | null | undefined>,
	}
	export function CreateTopicFilterFormGroup() {
		return new FormGroup<TopicFilterFormProperties>({
			FilterDescription: new FormControl<string | null | undefined>(undefined),
			FilterClass: new FormControl<FilterClass | null | undefined>(undefined),
			FilterName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			OperandFieldName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FilterType: new FormControl<NamedFilterType | null | undefined>(undefined),
		});

	}

	export enum FilterClass { ENFORCED_VALUE_FILTER = 0, CONDITIONAL_VALUE_FILTER = 1, NAMED_VALUE_FILTER = 2 }

	export enum NamedFilterType { CATEGORY_FILTER = 0, NUMERIC_EQUALITY_FILTER = 1, NUMERIC_RANGE_FILTER = 2, DATE_RANGE_FILTER = 3, RELATIVE_DATE_FILTER = 4 }


	/** A structure that represents a category filter. */
	export interface TopicCategoryFilter {
		CategoryFilterFunction?: CategoryFilterFunction;
		CategoryFilterType?: CategoryFilterType;
		Constant?: TopicCategoryFilterConstant;
		Inverse?: boolean | null;
	}

	/** A structure that represents a category filter. */
	export interface TopicCategoryFilterFormProperties {
		CategoryFilterFunction: FormControl<CategoryFilterFunction | null | undefined>,
		CategoryFilterType: FormControl<CategoryFilterType | null | undefined>,
		Inverse: FormControl<boolean | null | undefined>,
	}
	export function CreateTopicCategoryFilterFormGroup() {
		return new FormGroup<TopicCategoryFilterFormProperties>({
			CategoryFilterFunction: new FormControl<CategoryFilterFunction | null | undefined>(undefined),
			CategoryFilterType: new FormControl<CategoryFilterType | null | undefined>(undefined),
			Inverse: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum CategoryFilterFunction { EXACT = 0, CONTAINS = 1 }

	export enum CategoryFilterType { CUSTOM_FILTER = 0, CUSTOM_FILTER_LIST = 1, FILTER_LIST = 2 }


	/** A constant used in a category filter. */
	export interface TopicCategoryFilterConstant {
		ConstantType?: ConstantType;
		SingularConstant?: string;
		CollectiveConstant?: CollectiveConstant;
	}

	/** A constant used in a category filter. */
	export interface TopicCategoryFilterConstantFormProperties {
		ConstantType: FormControl<ConstantType | null | undefined>,
		SingularConstant: FormControl<string | null | undefined>,
	}
	export function CreateTopicCategoryFilterConstantFormGroup() {
		return new FormGroup<TopicCategoryFilterConstantFormProperties>({
			ConstantType: new FormControl<ConstantType | null | undefined>(undefined),
			SingularConstant: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ConstantType { SINGULAR = 0, RANGE = 1, COLLECTIVE = 2 }


	/** A structure that represents a collective constant. */
	export interface CollectiveConstant {
		ValueList?: Array<string>;
	}

	/** A structure that represents a collective constant. */
	export interface CollectiveConstantFormProperties {
	}
	export function CreateCollectiveConstantFormGroup() {
		return new FormGroup<CollectiveConstantFormProperties>({
		});

	}


	/** A filter that filters topics based on the value of a numeric field. The filter includes only topics whose numeric field value matches the specified value. */
	export interface TopicNumericEqualityFilter {
		Constant?: TopicSingularFilterConstant;
		Aggregation?: NamedFilterAggType;
	}

	/** A filter that filters topics based on the value of a numeric field. The filter includes only topics whose numeric field value matches the specified value. */
	export interface TopicNumericEqualityFilterFormProperties {
		Aggregation: FormControl<NamedFilterAggType | null | undefined>,
	}
	export function CreateTopicNumericEqualityFilterFormGroup() {
		return new FormGroup<TopicNumericEqualityFilterFormProperties>({
			Aggregation: new FormControl<NamedFilterAggType | null | undefined>(undefined),
		});

	}


	/** A structure that represents a singular filter constant, used in filters to specify a single value to match against. */
	export interface TopicSingularFilterConstant {
		ConstantType?: ConstantType;
		SingularConstant?: string;
	}

	/** A structure that represents a singular filter constant, used in filters to specify a single value to match against. */
	export interface TopicSingularFilterConstantFormProperties {
		ConstantType: FormControl<ConstantType | null | undefined>,
		SingularConstant: FormControl<string | null | undefined>,
	}
	export function CreateTopicSingularFilterConstantFormGroup() {
		return new FormGroup<TopicSingularFilterConstantFormProperties>({
			ConstantType: new FormControl<ConstantType | null | undefined>(undefined),
			SingularConstant: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NamedFilterAggType { NO_AGGREGATION = 0, SUM = 1, AVERAGE = 2, COUNT = 3, DISTINCT_COUNT = 4, MAX = 5, MEDIAN = 6, MIN = 7, STDEV = 8, STDEVP = 9, VAR = 10, VARP = 11 }


	/** A filter that filters topics based on the value of a numeric field. The filter includes only topics whose numeric field value falls within the specified range. */
	export interface TopicNumericRangeFilter {
		Inclusive?: boolean | null;
		Constant?: TopicRangeFilterConstant;
		Aggregation?: NamedFilterAggType;
	}

	/** A filter that filters topics based on the value of a numeric field. The filter includes only topics whose numeric field value falls within the specified range. */
	export interface TopicNumericRangeFilterFormProperties {
		Inclusive: FormControl<boolean | null | undefined>,
		Aggregation: FormControl<NamedFilterAggType | null | undefined>,
	}
	export function CreateTopicNumericRangeFilterFormGroup() {
		return new FormGroup<TopicNumericRangeFilterFormProperties>({
			Inclusive: new FormControl<boolean | null | undefined>(undefined),
			Aggregation: new FormControl<NamedFilterAggType | null | undefined>(undefined),
		});

	}


	/** A constant value that is used in a range filter to specify the endpoints of the range. */
	export interface TopicRangeFilterConstant {
		ConstantType?: ConstantType;
		RangeConstant?: RangeConstant;
	}

	/** A constant value that is used in a range filter to specify the endpoints of the range. */
	export interface TopicRangeFilterConstantFormProperties {
		ConstantType: FormControl<ConstantType | null | undefined>,
	}
	export function CreateTopicRangeFilterConstantFormGroup() {
		return new FormGroup<TopicRangeFilterConstantFormProperties>({
			ConstantType: new FormControl<ConstantType | null | undefined>(undefined),
		});

	}


	/** A structure that represents a range constant. */
	export interface RangeConstant {
		Minimum?: string;
		Maximum?: string;
	}

	/** A structure that represents a range constant. */
	export interface RangeConstantFormProperties {
		Minimum: FormControl<string | null | undefined>,
		Maximum: FormControl<string | null | undefined>,
	}
	export function CreateRangeConstantFormGroup() {
		return new FormGroup<RangeConstantFormProperties>({
			Minimum: new FormControl<string | null | undefined>(undefined),
			Maximum: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A filter used to restrict data based on a range of dates or times. */
	export interface TopicDateRangeFilter {
		Inclusive?: boolean | null;
		Constant?: TopicRangeFilterConstant;
	}

	/** A filter used to restrict data based on a range of dates or times. */
	export interface TopicDateRangeFilterFormProperties {
		Inclusive: FormControl<boolean | null | undefined>,
	}
	export function CreateTopicDateRangeFilterFormGroup() {
		return new FormGroup<TopicDateRangeFilterFormProperties>({
			Inclusive: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A structure that represents a relative date filter. */
	export interface TopicRelativeDateFilter {
		TimeGranularity?: TopicTimeGranularity;
		RelativeDateFilterFunction?: TopicRelativeDateFilterFunction;
		Constant?: TopicSingularFilterConstant;
	}

	/** A structure that represents a relative date filter. */
	export interface TopicRelativeDateFilterFormProperties {
		TimeGranularity: FormControl<TopicTimeGranularity | null | undefined>,
		RelativeDateFilterFunction: FormControl<TopicRelativeDateFilterFunction | null | undefined>,
	}
	export function CreateTopicRelativeDateFilterFormGroup() {
		return new FormGroup<TopicRelativeDateFilterFormProperties>({
			TimeGranularity: new FormControl<TopicTimeGranularity | null | undefined>(undefined),
			RelativeDateFilterFunction: new FormControl<TopicRelativeDateFilterFunction | null | undefined>(undefined),
		});

	}

	export enum TopicRelativeDateFilterFunction { PREVIOUS = 0, THIS = 1, LAST = 2, NEXT = 3, NOW = 4 }


	/** Represents a column in a dataset. */
	export interface TopicColumn {

		/** Required */
		ColumnName: string;
		ColumnFriendlyName?: string;
		ColumnDescription?: string;
		ColumnSynonyms?: Array<string>;
		ColumnDataRole?: ColumnRole;
		Aggregation?: DefaultAggregation;
		IsIncludedInTopic?: boolean | null;
		DisableIndexing?: boolean | null;
		ComparativeOrder?: ComparativeOrder;
		SemanticType?: SemanticType;
		TimeGranularity?: TopicTimeGranularity;
		AllowedAggregations?: Array<AuthorSpecifiedAggregation>;
		NotAllowedAggregations?: Array<AuthorSpecifiedAggregation>;
		DefaultFormatting?: DefaultFormatting;
		NeverAggregateInFilter?: boolean | null;
		CellValueSynonyms?: Array<CellValueSynonym>;
	}

	/** Represents a column in a dataset. */
	export interface TopicColumnFormProperties {

		/** Required */
		ColumnName: FormControl<string | null | undefined>,
		ColumnFriendlyName: FormControl<string | null | undefined>,
		ColumnDescription: FormControl<string | null | undefined>,
		ColumnDataRole: FormControl<ColumnRole | null | undefined>,
		Aggregation: FormControl<DefaultAggregation | null | undefined>,
		IsIncludedInTopic: FormControl<boolean | null | undefined>,
		DisableIndexing: FormControl<boolean | null | undefined>,
		TimeGranularity: FormControl<TopicTimeGranularity | null | undefined>,
		NeverAggregateInFilter: FormControl<boolean | null | undefined>,
	}
	export function CreateTopicColumnFormGroup() {
		return new FormGroup<TopicColumnFormProperties>({
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ColumnFriendlyName: new FormControl<string | null | undefined>(undefined),
			ColumnDescription: new FormControl<string | null | undefined>(undefined),
			ColumnDataRole: new FormControl<ColumnRole | null | undefined>(undefined),
			Aggregation: new FormControl<DefaultAggregation | null | undefined>(undefined),
			IsIncludedInTopic: new FormControl<boolean | null | undefined>(undefined),
			DisableIndexing: new FormControl<boolean | null | undefined>(undefined),
			TimeGranularity: new FormControl<TopicTimeGranularity | null | undefined>(undefined),
			NeverAggregateInFilter: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum DefaultAggregation { SUM = 0, MAX = 1, MIN = 2, COUNT = 3, DISTINCT_COUNT = 4, AVERAGE = 5 }


	/** A structure that represents a comparative order. */
	export interface ComparativeOrder {
		UseOrdering?: ColumnOrderingType;
		SpecifedOrder?: Array<string>;
		TreatUndefinedSpecifiedValues?: UndefinedSpecifiedValueType;
	}

	/** A structure that represents a comparative order. */
	export interface ComparativeOrderFormProperties {
		UseOrdering: FormControl<ColumnOrderingType | null | undefined>,
		TreatUndefinedSpecifiedValues: FormControl<UndefinedSpecifiedValueType | null | undefined>,
	}
	export function CreateComparativeOrderFormGroup() {
		return new FormGroup<ComparativeOrderFormProperties>({
			UseOrdering: new FormControl<ColumnOrderingType | null | undefined>(undefined),
			TreatUndefinedSpecifiedValues: new FormControl<UndefinedSpecifiedValueType | null | undefined>(undefined),
		});

	}

	export enum ColumnOrderingType { GREATER_IS_BETTER = 0, LESSER_IS_BETTER = 1, SPECIFIED = 2 }

	export enum UndefinedSpecifiedValueType { LEAST = 0, MOST = 1 }


	/** A structure that represents a semantic type. */
	export interface SemanticType {
		TypeName?: string;
		SubTypeName?: string;
		TypeParameters?: TypeParameters;
		TruthyCellValue?: string;
		TruthyCellValueSynonyms?: Array<string>;
		FalseyCellValue?: string;
		FalseyCellValueSynonyms?: Array<string>;
	}

	/** A structure that represents a semantic type. */
	export interface SemanticTypeFormProperties {
		TypeName: FormControl<string | null | undefined>,
		SubTypeName: FormControl<string | null | undefined>,
		TruthyCellValue: FormControl<string | null | undefined>,
		FalseyCellValue: FormControl<string | null | undefined>,
	}
	export function CreateSemanticTypeFormGroup() {
		return new FormGroup<SemanticTypeFormProperties>({
			TypeName: new FormControl<string | null | undefined>(undefined),
			SubTypeName: new FormControl<string | null | undefined>(undefined),
			TruthyCellValue: new FormControl<string | null | undefined>(undefined),
			FalseyCellValue: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface TypeParameters {
	}
	export interface TypeParametersFormProperties {
	}
	export function CreateTypeParametersFormGroup() {
		return new FormGroup<TypeParametersFormProperties>({
		});

	}

	export enum AuthorSpecifiedAggregation { COUNT = 0, DISTINCT_COUNT = 1, MIN = 2, MAX = 3, MEDIAN = 4, SUM = 5, AVERAGE = 6, STDEV = 7, STDEVP = 8, VAR = 9, VARP = 10, PERCENTILE = 11 }


	/** A structure that represents a default formatting definition. */
	export interface DefaultFormatting {
		DisplayFormat?: DisplayFormat;
		DisplayFormatOptions?: DisplayFormatOptions;
	}

	/** A structure that represents a default formatting definition. */
	export interface DefaultFormattingFormProperties {
		DisplayFormat: FormControl<DisplayFormat | null | undefined>,
	}
	export function CreateDefaultFormattingFormGroup() {
		return new FormGroup<DefaultFormattingFormProperties>({
			DisplayFormat: new FormControl<DisplayFormat | null | undefined>(undefined),
		});

	}

	export enum DisplayFormat { AUTO = 0, PERCENT = 1, CURRENCY = 2, NUMBER = 3, DATE = 4, STRING = 5 }


	/** A structure that represents additional options for display formatting. */
	export interface DisplayFormatOptions {
		UseBlankCellFormat?: boolean | null;
		BlankCellFormat?: string;
		DateFormat?: string;
		DecimalSeparator?: TopicNumericSeparatorSymbol;
		GroupingSeparator?: string;
		UseGrouping?: boolean | null;
		FractionDigits?: number | null;
		Prefix?: string;
		Suffix?: string;
		UnitScaler?: NumberScale;
		NegativeFormat?: NegativeFormat;
		CurrencySymbol?: string;
	}

	/** A structure that represents additional options for display formatting. */
	export interface DisplayFormatOptionsFormProperties {
		UseBlankCellFormat: FormControl<boolean | null | undefined>,
		BlankCellFormat: FormControl<string | null | undefined>,
		DateFormat: FormControl<string | null | undefined>,
		DecimalSeparator: FormControl<TopicNumericSeparatorSymbol | null | undefined>,
		GroupingSeparator: FormControl<string | null | undefined>,
		UseGrouping: FormControl<boolean | null | undefined>,
		FractionDigits: FormControl<number | null | undefined>,
		Prefix: FormControl<string | null | undefined>,
		Suffix: FormControl<string | null | undefined>,
		UnitScaler: FormControl<NumberScale | null | undefined>,
		CurrencySymbol: FormControl<string | null | undefined>,
	}
	export function CreateDisplayFormatOptionsFormGroup() {
		return new FormGroup<DisplayFormatOptionsFormProperties>({
			UseBlankCellFormat: new FormControl<boolean | null | undefined>(undefined),
			BlankCellFormat: new FormControl<string | null | undefined>(undefined),
			DateFormat: new FormControl<string | null | undefined>(undefined),
			DecimalSeparator: new FormControl<TopicNumericSeparatorSymbol | null | undefined>(undefined),
			GroupingSeparator: new FormControl<string | null | undefined>(undefined),
			UseGrouping: new FormControl<boolean | null | undefined>(undefined),
			FractionDigits: new FormControl<number | null | undefined>(undefined),
			Prefix: new FormControl<string | null | undefined>(undefined),
			Suffix: new FormControl<string | null | undefined>(undefined),
			UnitScaler: new FormControl<NumberScale | null | undefined>(undefined),
			CurrencySymbol: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TopicNumericSeparatorSymbol { COMMA = 0, DOT = 1 }


	/** A structure that represents a negative format. */
	export interface NegativeFormat {
		Prefix?: string;
		Suffix?: string;
	}

	/** A structure that represents a negative format. */
	export interface NegativeFormatFormProperties {
		Prefix: FormControl<string | null | undefined>,
		Suffix: FormControl<string | null | undefined>,
	}
	export function CreateNegativeFormatFormGroup() {
		return new FormGroup<NegativeFormatFormProperties>({
			Prefix: new FormControl<string | null | undefined>(undefined),
			Suffix: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that represents the cell value synonym. */
	export interface CellValueSynonym {
		CellValue?: string;
		Synonyms?: Array<string>;
	}

	/** A structure that represents the cell value synonym. */
	export interface CellValueSynonymFormProperties {
		CellValue: FormControl<string | null | undefined>,
	}
	export function CreateCellValueSynonymFormGroup() {
		return new FormGroup<CellValueSynonymFormProperties>({
			CellValue: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that represents a calculated field. */
	export interface TopicCalculatedField {

		/** Required */
		CalculatedFieldName: string;
		CalculatedFieldDescription?: string;

		/** Required */
		Expression: string;
		CalculatedFieldSynonyms?: Array<string>;
		IsIncludedInTopic?: boolean | null;
		DisableIndexing?: boolean | null;
		ColumnDataRole?: ColumnRole;
		TimeGranularity?: TopicTimeGranularity;
		DefaultFormatting?: DefaultFormatting;
		Aggregation?: DefaultAggregation;
		ComparativeOrder?: ComparativeOrder;
		SemanticType?: SemanticType;
		AllowedAggregations?: Array<AuthorSpecifiedAggregation>;
		NotAllowedAggregations?: Array<AuthorSpecifiedAggregation>;
		NeverAggregateInFilter?: boolean | null;
		CellValueSynonyms?: Array<CellValueSynonym>;
	}

	/** A structure that represents a calculated field. */
	export interface TopicCalculatedFieldFormProperties {

		/** Required */
		CalculatedFieldName: FormControl<string | null | undefined>,
		CalculatedFieldDescription: FormControl<string | null | undefined>,

		/** Required */
		Expression: FormControl<string | null | undefined>,
		IsIncludedInTopic: FormControl<boolean | null | undefined>,
		DisableIndexing: FormControl<boolean | null | undefined>,
		ColumnDataRole: FormControl<ColumnRole | null | undefined>,
		TimeGranularity: FormControl<TopicTimeGranularity | null | undefined>,
		Aggregation: FormControl<DefaultAggregation | null | undefined>,
		NeverAggregateInFilter: FormControl<boolean | null | undefined>,
	}
	export function CreateTopicCalculatedFieldFormGroup() {
		return new FormGroup<TopicCalculatedFieldFormProperties>({
			CalculatedFieldName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			CalculatedFieldDescription: new FormControl<string | null | undefined>(undefined),
			Expression: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IsIncludedInTopic: new FormControl<boolean | null | undefined>(undefined),
			DisableIndexing: new FormControl<boolean | null | undefined>(undefined),
			ColumnDataRole: new FormControl<ColumnRole | null | undefined>(undefined),
			TimeGranularity: new FormControl<TopicTimeGranularity | null | undefined>(undefined),
			Aggregation: new FormControl<DefaultAggregation | null | undefined>(undefined),
			NeverAggregateInFilter: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** A structure that represents a named entity. */
	export interface TopicNamedEntity {

		/** Required */
		EntityName: string;
		EntityDescription?: string;
		EntitySynonyms?: Array<string>;
		SemanticEntityType?: SemanticEntityType;
		Definition?: Array<NamedEntityDefinition>;
	}

	/** A structure that represents a named entity. */
	export interface TopicNamedEntityFormProperties {

		/** Required */
		EntityName: FormControl<string | null | undefined>,
		EntityDescription: FormControl<string | null | undefined>,
	}
	export function CreateTopicNamedEntityFormGroup() {
		return new FormGroup<TopicNamedEntityFormProperties>({
			EntityName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			EntityDescription: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that represents a semantic entity type. */
	export interface SemanticEntityType {
		TypeName?: string;
		SubTypeName?: string;
		TypeParameters?: TypeParameters;
	}

	/** A structure that represents a semantic entity type. */
	export interface SemanticEntityTypeFormProperties {
		TypeName: FormControl<string | null | undefined>,
		SubTypeName: FormControl<string | null | undefined>,
	}
	export function CreateSemanticEntityTypeFormGroup() {
		return new FormGroup<SemanticEntityTypeFormProperties>({
			TypeName: new FormControl<string | null | undefined>(undefined),
			SubTypeName: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that represents a named entity. */
	export interface NamedEntityDefinition {
		FieldName?: string;
		PropertyName?: string;
		PropertyRole?: PropertyRole;
		PropertyUsage?: PropertyUsage;
		Metric?: NamedEntityDefinitionMetric;
	}

	/** A structure that represents a named entity. */
	export interface NamedEntityDefinitionFormProperties {
		FieldName: FormControl<string | null | undefined>,
		PropertyName: FormControl<string | null | undefined>,
		PropertyRole: FormControl<PropertyRole | null | undefined>,
		PropertyUsage: FormControl<PropertyUsage | null | undefined>,
	}
	export function CreateNamedEntityDefinitionFormGroup() {
		return new FormGroup<NamedEntityDefinitionFormProperties>({
			FieldName: new FormControl<string | null | undefined>(undefined),
			PropertyName: new FormControl<string | null | undefined>(undefined),
			PropertyRole: new FormControl<PropertyRole | null | undefined>(undefined),
			PropertyUsage: new FormControl<PropertyUsage | null | undefined>(undefined),
		});

	}

	export enum PropertyRole { PRIMARY = 0, ID = 1 }

	export enum PropertyUsage { INHERIT = 0, DIMENSION = 1, MEASURE = 2 }


	/** A structure that represents a metric. */
	export interface NamedEntityDefinitionMetric {
		Aggregation?: NamedEntityAggType;
		AggregationFunctionParameters?: AggregationFunctionParameters;
	}

	/** A structure that represents a metric. */
	export interface NamedEntityDefinitionMetricFormProperties {
		Aggregation: FormControl<NamedEntityAggType | null | undefined>,
	}
	export function CreateNamedEntityDefinitionMetricFormGroup() {
		return new FormGroup<NamedEntityDefinitionMetricFormProperties>({
			Aggregation: new FormControl<NamedEntityAggType | null | undefined>(undefined),
		});

	}

	export enum NamedEntityAggType { SUM = 0, MIN = 1, MAX = 2, COUNT = 3, AVERAGE = 4, DISTINCT_COUNT = 5, STDEV = 6, STDEVP = 7, VAR = 8, VARP = 9, PERCENTILE = 10, MEDIAN = 11, CUSTOM = 12 }

	export interface AggregationFunctionParameters {
	}
	export interface AggregationFunctionParametersFormProperties {
	}
	export function CreateAggregationFunctionParametersFormGroup() {
		return new FormGroup<AggregationFunctionParametersFormProperties>({
		});

	}

	export interface CreateTopicRefreshScheduleResponse {
		TopicId?: string;
		TopicArn?: string;
		DatasetArn?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface CreateTopicRefreshScheduleResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		TopicArn: FormControl<string | null | undefined>,
		DatasetArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateCreateTopicRefreshScheduleResponseFormGroup() {
		return new FormGroup<CreateTopicRefreshScheduleResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			TopicArn: new FormControl<string | null | undefined>(undefined),
			DatasetArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TopicScheduleType { HOURLY = 0, DAILY = 1, WEEKLY = 2, MONTHLY = 3 }

	export interface CreateVPCConnectionResponse {
		Arn?: string;
		VPCConnectionId?: string;
		CreationStatus?: VPCConnectionResourceStatus;
		AvailabilityStatus?: VPCConnectionAvailabilityStatus;
		RequestId?: string;
		Status?: number | null;
	}
	export interface CreateVPCConnectionResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		VPCConnectionId: FormControl<string | null | undefined>,
		CreationStatus: FormControl<VPCConnectionResourceStatus | null | undefined>,
		AvailabilityStatus: FormControl<VPCConnectionAvailabilityStatus | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateCreateVPCConnectionResponseFormGroup() {
		return new FormGroup<CreateVPCConnectionResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VPCConnectionId: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<VPCConnectionResourceStatus | null | undefined>(undefined),
			AvailabilityStatus: new FormControl<VPCConnectionAvailabilityStatus | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum VPCConnectionResourceStatus { CREATION_IN_PROGRESS = 0, CREATION_SUCCESSFUL = 1, CREATION_FAILED = 2, UPDATE_IN_PROGRESS = 3, UPDATE_SUCCESSFUL = 4, UPDATE_FAILED = 5, DELETION_IN_PROGRESS = 6, DELETION_FAILED = 7, DELETED = 8 }

	export enum VPCConnectionAvailabilityStatus { AVAILABLE = 0, UNAVAILABLE = 1, PARTIALLY_AVAILABLE = 2 }

	export interface DeleteAccountCustomizationResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteAccountCustomizationResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteAccountCustomizationResponseFormGroup() {
		return new FormGroup<DeleteAccountCustomizationResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteAccountSubscriptionResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteAccountSubscriptionResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteAccountSubscriptionResponseFormGroup() {
		return new FormGroup<DeleteAccountSubscriptionResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteAnalysisResponse {
		Status?: number | null;
		Arn?: string;
		AnalysisId?: string;
		DeletionTime?: Date;
		RequestId?: string;
	}
	export interface DeleteAnalysisResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		AnalysisId: FormControl<string | null | undefined>,
		DeletionTime: FormControl<Date | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteAnalysisResponseFormGroup() {
		return new FormGroup<DeleteAnalysisResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			DeletionTime: new FormControl<Date | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteDashboardResponse {
		Status?: number | null;
		Arn?: string;
		DashboardId?: string;
		RequestId?: string;
	}
	export interface DeleteDashboardResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		DashboardId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteDashboardResponseFormGroup() {
		return new FormGroup<DeleteDashboardResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			DashboardId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteDataSetResponse {
		Arn?: string;
		DataSetId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteDataSetResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSetId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteDataSetResponseFormGroup() {
		return new FormGroup<DeleteDataSetResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSetId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteDataSetRefreshPropertiesResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteDataSetRefreshPropertiesResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteDataSetRefreshPropertiesResponseFormGroup() {
		return new FormGroup<DeleteDataSetRefreshPropertiesResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteDataSourceResponse {
		Arn?: string;
		DataSourceId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteDataSourceResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSourceId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteDataSourceResponseFormGroup() {
		return new FormGroup<DeleteDataSourceResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSourceId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteFolderResponse {
		Status?: number | null;
		Arn?: string;
		FolderId?: string;
		RequestId?: string;
	}
	export interface DeleteFolderResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		FolderId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteFolderResponseFormGroup() {
		return new FormGroup<DeleteFolderResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			FolderId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteFolderMembershipResponse {
		Status?: number | null;
		RequestId?: string;
	}
	export interface DeleteFolderMembershipResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteFolderMembershipResponseFormGroup() {
		return new FormGroup<DeleteFolderMembershipResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteGroupResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteGroupResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteGroupResponseFormGroup() {
		return new FormGroup<DeleteGroupResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteGroupMembershipResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteGroupMembershipResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteGroupMembershipResponseFormGroup() {
		return new FormGroup<DeleteGroupMembershipResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteIAMPolicyAssignmentResponse {
		AssignmentName?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteIAMPolicyAssignmentResponseFormProperties {
		AssignmentName: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteIAMPolicyAssignmentResponseFormGroup() {
		return new FormGroup<DeleteIAMPolicyAssignmentResponseFormProperties>({
			AssignmentName: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteNamespaceResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteNamespaceResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteNamespaceResponseFormGroup() {
		return new FormGroup<DeleteNamespaceResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteRefreshScheduleResponse {
		Status?: number | null;
		RequestId?: string;
		ScheduleId?: string;
		Arn?: string;
	}
	export interface DeleteRefreshScheduleResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		ScheduleId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateDeleteRefreshScheduleResponseFormGroup() {
		return new FormGroup<DeleteRefreshScheduleResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			ScheduleId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteTemplateResponse {
		RequestId?: string;
		Arn?: string;
		TemplateId?: string;
		Status?: number | null;
	}
	export interface DeleteTemplateResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		TemplateId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteTemplateResponseFormGroup() {
		return new FormGroup<DeleteTemplateResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			TemplateId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteTemplateAliasResponse {
		Status?: number | null;
		TemplateId?: string;
		AliasName?: string;
		Arn?: string;
		RequestId?: string;
	}
	export interface DeleteTemplateAliasResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		TemplateId: FormControl<string | null | undefined>,
		AliasName: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteTemplateAliasResponseFormGroup() {
		return new FormGroup<DeleteTemplateAliasResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			TemplateId: new FormControl<string | null | undefined>(undefined),
			AliasName: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteThemeResponse {
		Arn?: string;
		RequestId?: string;
		Status?: number | null;
		ThemeId?: string;
	}
	export interface DeleteThemeResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		ThemeId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteThemeResponseFormGroup() {
		return new FormGroup<DeleteThemeResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			ThemeId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteThemeAliasResponse {
		AliasName?: string;
		Arn?: string;
		RequestId?: string;
		Status?: number | null;
		ThemeId?: string;
	}
	export interface DeleteThemeAliasResponseFormProperties {
		AliasName: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		ThemeId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteThemeAliasResponseFormGroup() {
		return new FormGroup<DeleteThemeAliasResponseFormProperties>({
			AliasName: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			ThemeId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteTopicResponse {
		Arn?: string;
		TopicId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteTopicResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		TopicId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteTopicResponseFormGroup() {
		return new FormGroup<DeleteTopicResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			TopicId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteTopicRefreshScheduleResponse {
		TopicId?: string;
		TopicArn?: string;
		DatasetArn?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DeleteTopicRefreshScheduleResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		TopicArn: FormControl<string | null | undefined>,
		DatasetArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDeleteTopicRefreshScheduleResponseFormGroup() {
		return new FormGroup<DeleteTopicRefreshScheduleResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			TopicArn: new FormControl<string | null | undefined>(undefined),
			DatasetArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DeleteUserResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteUserResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteUserResponseFormGroup() {
		return new FormGroup<DeleteUserResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteUserByPrincipalIdResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteUserByPrincipalIdResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteUserByPrincipalIdResponseFormGroup() {
		return new FormGroup<DeleteUserByPrincipalIdResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DeleteVPCConnectionResponse {
		Arn?: string;
		VPCConnectionId?: string;
		DeletionStatus?: VPCConnectionResourceStatus;
		AvailabilityStatus?: VPCConnectionAvailabilityStatus;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DeleteVPCConnectionResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		VPCConnectionId: FormControl<string | null | undefined>,
		DeletionStatus: FormControl<VPCConnectionResourceStatus | null | undefined>,
		AvailabilityStatus: FormControl<VPCConnectionAvailabilityStatus | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDeleteVPCConnectionResponseFormGroup() {
		return new FormGroup<DeleteVPCConnectionResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VPCConnectionId: new FormControl<string | null | undefined>(undefined),
			DeletionStatus: new FormControl<VPCConnectionResourceStatus | null | undefined>(undefined),
			AvailabilityStatus: new FormControl<VPCConnectionAvailabilityStatus | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeAccountCustomizationResponse {
		Arn?: string;
		AwsAccountId?: string;
		Namespace?: string;
		AccountCustomization?: AccountCustomization;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeAccountCustomizationResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		AwsAccountId: FormControl<string | null | undefined>,
		Namespace: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeAccountCustomizationResponseFormGroup() {
		return new FormGroup<DescribeAccountCustomizationResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			Namespace: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeAccountSettingsResponse {
		AccountSettings?: AccountSettings;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeAccountSettingsResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeAccountSettingsResponseFormGroup() {
		return new FormGroup<DescribeAccountSettingsResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The Amazon QuickSight settings associated with your Amazon Web Services account. */
	export interface AccountSettings {
		AccountName?: string;
		Edition?: Edition;
		DefaultNamespace?: string;
		NotificationEmail?: string;
		PublicSharingEnabled?: boolean | null;
		TerminationProtectionEnabled?: boolean | null;
	}

	/** The Amazon QuickSight settings associated with your Amazon Web Services account. */
	export interface AccountSettingsFormProperties {
		AccountName: FormControl<string | null | undefined>,
		Edition: FormControl<Edition | null | undefined>,
		DefaultNamespace: FormControl<string | null | undefined>,
		NotificationEmail: FormControl<string | null | undefined>,
		PublicSharingEnabled: FormControl<boolean | null | undefined>,
		TerminationProtectionEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateAccountSettingsFormGroup() {
		return new FormGroup<AccountSettingsFormProperties>({
			AccountName: new FormControl<string | null | undefined>(undefined),
			Edition: new FormControl<Edition | null | undefined>(undefined),
			DefaultNamespace: new FormControl<string | null | undefined>(undefined),
			NotificationEmail: new FormControl<string | null | undefined>(undefined),
			PublicSharingEnabled: new FormControl<boolean | null | undefined>(undefined),
			TerminationProtectionEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export enum Edition { STANDARD = 0, ENTERPRISE = 1, ENTERPRISE_AND_Q = 2 }

	export interface DescribeAccountSubscriptionResponse {
		AccountInfo?: AccountInfo;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeAccountSubscriptionResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAccountSubscriptionResponseFormGroup() {
		return new FormGroup<DescribeAccountSubscriptionResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** <p>A structure that contains the following account information elements:</p> <ul> <li> <p>Your Amazon QuickSight account name.</p> </li> <li> <p>The edition of Amazon QuickSight that your account is using.</p> </li> <li> <p>The notification email address that is associated with the Amazon QuickSight account. </p> </li> <li> <p>The authentication type of the Amazon QuickSight account.</p> </li> <li> <p>The status of the Amazon QuickSight account's subscription.</p> </li> </ul> */
	export interface AccountInfo {
		AccountName?: string;
		Edition?: Edition;
		NotificationEmail?: string;
		AuthenticationType?: string;
		AccountSubscriptionStatus?: string;
	}

	/** <p>A structure that contains the following account information elements:</p> <ul> <li> <p>Your Amazon QuickSight account name.</p> </li> <li> <p>The edition of Amazon QuickSight that your account is using.</p> </li> <li> <p>The notification email address that is associated with the Amazon QuickSight account. </p> </li> <li> <p>The authentication type of the Amazon QuickSight account.</p> </li> <li> <p>The status of the Amazon QuickSight account's subscription.</p> </li> </ul> */
	export interface AccountInfoFormProperties {
		AccountName: FormControl<string | null | undefined>,
		Edition: FormControl<Edition | null | undefined>,
		NotificationEmail: FormControl<string | null | undefined>,
		AuthenticationType: FormControl<string | null | undefined>,
		AccountSubscriptionStatus: FormControl<string | null | undefined>,
	}
	export function CreateAccountInfoFormGroup() {
		return new FormGroup<AccountInfoFormProperties>({
			AccountName: new FormControl<string | null | undefined>(undefined),
			Edition: new FormControl<Edition | null | undefined>(undefined),
			NotificationEmail: new FormControl<string | null | undefined>(undefined),
			AuthenticationType: new FormControl<string | null | undefined>(undefined),
			AccountSubscriptionStatus: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeAnalysisResponse {
		Analysis?: Analysis;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeAnalysisResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAnalysisResponseFormGroup() {
		return new FormGroup<DescribeAnalysisResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Metadata structure for an analysis in Amazon QuickSight */
	export interface Analysis {
		AnalysisId?: string;
		Arn?: string;
		Name?: string;
		Status?: ResourceStatus;
		Errors?: Array<AnalysisError>;
		DataSetArns?: Array<string>;
		ThemeArn?: string;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		Sheets?: Array<Sheet>;
	}

	/** Metadata structure for an analysis in Amazon QuickSight */
	export interface AnalysisFormProperties {
		AnalysisId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateAnalysisFormGroup() {
		return new FormGroup<AnalysisFormProperties>({
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Analysis error. */
	export interface AnalysisError {
		Type?: AnalysisErrorType;
		Message?: string;
		ViolatedEntities?: Array<Entity>;
	}

	/** Analysis error. */
	export interface AnalysisErrorFormProperties {
		Type: FormControl<AnalysisErrorType | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateAnalysisErrorFormGroup() {
		return new FormGroup<AnalysisErrorFormProperties>({
			Type: new FormControl<AnalysisErrorType | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AnalysisErrorType { ACCESS_DENIED = 0, SOURCE_NOT_FOUND = 1, DATA_SET_NOT_FOUND = 2, INTERNAL_FAILURE = 3, PARAMETER_VALUE_INCOMPATIBLE = 4, PARAMETER_TYPE_INVALID = 5, PARAMETER_NOT_FOUND = 6, COLUMN_TYPE_MISMATCH = 7, COLUMN_GEOGRAPHIC_ROLE_MISMATCH = 8, COLUMN_REPLACEMENT_MISSING = 9 }


	/** An object, structure, or sub-structure of an analysis, template, or dashboard. */
	export interface Entity {
		Path?: string;
	}

	/** An object, structure, or sub-structure of an analysis, template, or dashboard. */
	export interface EntityFormProperties {
		Path: FormControl<string | null | undefined>,
	}
	export function CreateEntityFormGroup() {
		return new FormGroup<EntityFormProperties>({
			Path: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A <i>sheet</i>, which is an object that contains a set of visuals that are viewed together on one page in Amazon QuickSight. Every analysis and dashboard contains at least one sheet. Each sheet contains at least one visualization widget, for example a chart, pivot table, or narrative insight. Sheets can be associated with other components, such as controls, filters, and so on. */
	export interface Sheet {
		SheetId?: string;
		Name?: string;
	}

	/** A <i>sheet</i>, which is an object that contains a set of visuals that are viewed together on one page in Amazon QuickSight. Every analysis and dashboard contains at least one sheet. Each sheet contains at least one visualization widget, for example a chart, pivot table, or narrative insight. Sheets can be associated with other components, such as controls, filters, and so on. */
	export interface SheetFormProperties {
		SheetId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateSheetFormGroup() {
		return new FormGroup<SheetFormProperties>({
			SheetId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeAnalysisDefinitionResponse {
		AnalysisId?: string;
		Name?: string;
		Errors?: Array<AnalysisError>;
		ResourceStatus?: ResourceStatus;
		ThemeArn?: string;
		Definition?: AnalysisDefinition;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeAnalysisDefinitionResponseFormProperties {
		AnalysisId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		ResourceStatus: FormControl<ResourceStatus | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAnalysisDefinitionResponseFormGroup() {
		return new FormGroup<DescribeAnalysisDefinitionResponseFormProperties>({
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			ResourceStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The definition of an analysis. */
	export interface AnalysisDefinition {

		/** Required */
		DataSetIdentifierDeclarations: Array<DataSetIdentifierDeclaration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}

	/** The definition of an analysis. */
	export interface AnalysisDefinitionFormProperties {
	}
	export function CreateAnalysisDefinitionFormGroup() {
		return new FormGroup<AnalysisDefinitionFormProperties>({
		});

	}

	export interface DescribeAnalysisPermissionsResponse {
		AnalysisId?: string;
		AnalysisArn?: string;
		Permissions?: Array<ResourcePermission>;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeAnalysisPermissionsResponseFormProperties {
		AnalysisId: FormControl<string | null | undefined>,
		AnalysisArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeAnalysisPermissionsResponseFormGroup() {
		return new FormGroup<DescribeAnalysisPermissionsResponseFormProperties>({
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			AnalysisArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeAssetBundleExportJobResponse {
		JobStatus?: AssetBundleExportJobStatus;
		DownloadUrl?: string;
		Errors?: Array<AssetBundleExportJobError>;
		Arn?: string;
		CreatedTime?: Date;
		AssetBundleExportJobId?: string;
		AwsAccountId?: string;
		ResourceArns?: Array<string>;
		IncludeAllDependencies?: boolean | null;
		ExportFormat?: AssetBundleExportFormat;
		CloudFormationOverridePropertyConfiguration?: AssetBundleCloudFormationOverridePropertyConfiguration;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeAssetBundleExportJobResponseFormProperties {
		JobStatus: FormControl<AssetBundleExportJobStatus | null | undefined>,
		DownloadUrl: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		AssetBundleExportJobId: FormControl<string | null | undefined>,
		AwsAccountId: FormControl<string | null | undefined>,
		IncludeAllDependencies: FormControl<boolean | null | undefined>,
		ExportFormat: FormControl<AssetBundleExportFormat | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeAssetBundleExportJobResponseFormGroup() {
		return new FormGroup<DescribeAssetBundleExportJobResponseFormProperties>({
			JobStatus: new FormControl<AssetBundleExportJobStatus | null | undefined>(undefined),
			DownloadUrl: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			AssetBundleExportJobId: new FormControl<string | null | undefined>(undefined),
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			IncludeAllDependencies: new FormControl<boolean | null | undefined>(undefined),
			ExportFormat: new FormControl<AssetBundleExportFormat | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobStatus { QUEUED_FOR_IMMEDIATE_EXECUTION = 0, IN_PROGRESS = 1, SUCCESSFUL = 2, FAILED = 3 }


	/** Describes an error that occurred during an Asset Bundle export job. */
	export interface AssetBundleExportJobError {
		Arn?: string;
		Type?: string;
		Message?: string;
	}

	/** Describes an error that occurred during an Asset Bundle export job. */
	export interface AssetBundleExportJobErrorFormProperties {
		Arn: FormControl<string | null | undefined>,
		Type: FormControl<string | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobErrorFormGroup() {
		return new FormGroup<AssetBundleExportJobErrorFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<string | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportFormat { CLOUDFORMATION_JSON = 0, QUICKSIGHT_JSON = 1 }


	/** An optional collection of CloudFormation property configurations that control how the export job is generated. */
	export interface AssetBundleCloudFormationOverridePropertyConfiguration {
		ResourceIdOverrideConfiguration?: AssetBundleExportJobResourceIdOverrideConfiguration;
		VPCConnections?: Array<AssetBundleExportJobVPCConnectionOverrideProperties>;
		RefreshSchedules?: Array<AssetBundleExportJobRefreshScheduleOverrideProperties>;
		DataSources?: Array<AssetBundleExportJobDataSourceOverrideProperties>;
		DataSets?: Array<AssetBundleExportJobDataSetOverrideProperties>;
		Themes?: Array<AssetBundleExportJobThemeOverrideProperties>;
		Analyses?: Array<AssetBundleExportJobAnalysisOverrideProperties>;
		Dashboards?: Array<AssetBundleExportJobDashboardOverrideProperties>;
	}

	/** An optional collection of CloudFormation property configurations that control how the export job is generated. */
	export interface AssetBundleCloudFormationOverridePropertyConfigurationFormProperties {
	}
	export function CreateAssetBundleCloudFormationOverridePropertyConfigurationFormGroup() {
		return new FormGroup<AssetBundleCloudFormationOverridePropertyConfigurationFormProperties>({
		});

	}


	/** An optional structure that configures resource ID overrides for the export job. */
	export interface AssetBundleExportJobResourceIdOverrideConfiguration {
		PrefixForAllResources?: boolean | null;
	}

	/** An optional structure that configures resource ID overrides for the export job. */
	export interface AssetBundleExportJobResourceIdOverrideConfigurationFormProperties {
		PrefixForAllResources: FormControl<boolean | null | undefined>,
	}
	export function CreateAssetBundleExportJobResourceIdOverrideConfigurationFormGroup() {
		return new FormGroup<AssetBundleExportJobResourceIdOverrideConfigurationFormProperties>({
			PrefixForAllResources: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** Controls how a specific <code>VPCConnection</code> resource is parameterized in the outputted CloudFormation template. */
	export interface AssetBundleExportJobVPCConnectionOverrideProperties {
		Arn?: string;

		/** Required */
		Properties: Array<AssetBundleExportJobVPCConnectionPropertyToOverride>;
	}

	/** Controls how a specific <code>VPCConnection</code> resource is parameterized in the outputted CloudFormation template. */
	export interface AssetBundleExportJobVPCConnectionOverridePropertiesFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobVPCConnectionOverridePropertiesFormGroup() {
		return new FormGroup<AssetBundleExportJobVPCConnectionOverridePropertiesFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobVPCConnectionPropertyToOverride { Name = 0, DnsResolvers = 1, RoleArn = 2 }


	/** Controls how a specific <code>RefreshSchedule</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobRefreshScheduleOverrideProperties {
		Arn?: string;

		/** Required */
		Properties: Array<AssetBundleExportJobRefreshSchedulePropertyToOverride>;
	}

	/** Controls how a specific <code>RefreshSchedule</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobRefreshScheduleOverridePropertiesFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobRefreshScheduleOverridePropertiesFormGroup() {
		return new FormGroup<AssetBundleExportJobRefreshScheduleOverridePropertiesFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobRefreshSchedulePropertyToOverride { StartAfterDateTime = 0 }


	/** Controls how a specific <code>DataSource</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobDataSourceOverrideProperties {
		Arn?: string;

		/** Required */
		Properties: Array<AssetBundleExportJobDataSourcePropertyToOverride>;
	}

	/** Controls how a specific <code>DataSource</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobDataSourceOverridePropertiesFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobDataSourceOverridePropertiesFormGroup() {
		return new FormGroup<AssetBundleExportJobDataSourceOverridePropertiesFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobDataSourcePropertyToOverride { Name = 0, DisableSsl = 1, SecretArn = 2, Username = 3, Password = 4, Domain = 5, WorkGroup = 6, Host = 7, Port = 8, Database = 9, DataSetName = 10, Catalog = 11, InstanceId = 12, ClusterId = 13, ManifestFileLocation = 14, Warehouse = 15, RoleArn = 16 }


	/** Controls how a specific <code>DataSet</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobDataSetOverrideProperties {
		Arn?: string;

		/** Required */
		Properties: Array<AssetBundleExportJobDataSetPropertyToOverride>;
	}

	/** Controls how a specific <code>DataSet</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobDataSetOverridePropertiesFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobDataSetOverridePropertiesFormGroup() {
		return new FormGroup<AssetBundleExportJobDataSetOverridePropertiesFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobDataSetPropertyToOverride { Name = 0 }


	/** Controls how a specific <code>Theme</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobThemeOverrideProperties {
		Arn?: string;

		/** Required */
		Properties: Array<AssetBundleExportJobThemePropertyToOverride>;
	}

	/** Controls how a specific <code>Theme</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobThemeOverridePropertiesFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobThemeOverridePropertiesFormGroup() {
		return new FormGroup<AssetBundleExportJobThemeOverridePropertiesFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobThemePropertyToOverride { Name = 0 }


	/** Controls how a specific <code>Analysis</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobAnalysisOverrideProperties {
		Arn?: string;

		/** Required */
		Properties: Array<AssetBundleExportJobAnalysisPropertyToOverride>;
	}

	/** Controls how a specific <code>Analysis</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobAnalysisOverridePropertiesFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobAnalysisOverridePropertiesFormGroup() {
		return new FormGroup<AssetBundleExportJobAnalysisOverridePropertiesFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobAnalysisPropertyToOverride { Name = 0 }


	/** Controls how a specific <code>Dashboard</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobDashboardOverrideProperties {
		Arn?: string;

		/** Required */
		Properties: Array<AssetBundleExportJobDashboardPropertyToOverride>;
	}

	/** Controls how a specific <code>Dashboard</code> resource is parameterized in the returned CloudFormation template. */
	export interface AssetBundleExportJobDashboardOverridePropertiesFormProperties {
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleExportJobDashboardOverridePropertiesFormGroup() {
		return new FormGroup<AssetBundleExportJobDashboardOverridePropertiesFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleExportJobDashboardPropertyToOverride { Name = 0 }

	export interface DescribeAssetBundleImportJobResponse {
		JobStatus?: AssetBundleImportJobStatus;
		Errors?: Array<AssetBundleImportJobError>;
		RollbackErrors?: Array<AssetBundleImportJobError>;
		Arn?: string;
		CreatedTime?: Date;
		AssetBundleImportJobId?: string;
		AwsAccountId?: string;
		AssetBundleImportSource?: AssetBundleImportSourceDescription;
		OverrideParameters?: AssetBundleImportJobOverrideParameters;
		FailureAction?: AssetBundleImportFailureAction;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeAssetBundleImportJobResponseFormProperties {
		JobStatus: FormControl<AssetBundleImportJobStatus | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		AssetBundleImportJobId: FormControl<string | null | undefined>,
		AwsAccountId: FormControl<string | null | undefined>,
		FailureAction: FormControl<AssetBundleImportFailureAction | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeAssetBundleImportJobResponseFormGroup() {
		return new FormGroup<DescribeAssetBundleImportJobResponseFormProperties>({
			JobStatus: new FormControl<AssetBundleImportJobStatus | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			AssetBundleImportJobId: new FormControl<string | null | undefined>(undefined),
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			FailureAction: new FormControl<AssetBundleImportFailureAction | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum AssetBundleImportJobStatus { QUEUED_FOR_IMMEDIATE_EXECUTION = 0, IN_PROGRESS = 1, SUCCESSFUL = 2, FAILED = 3, FAILED_ROLLBACK_IN_PROGRESS = 4, FAILED_ROLLBACK_COMPLETED = 5, FAILED_ROLLBACK_ERROR = 6 }


	/** Describes an error that occurred within an Asset Bundle import execution. */
	export interface AssetBundleImportJobError {
		Arn?: string;
		Type?: string;
		Message?: string;
	}

	/** Describes an error that occurred within an Asset Bundle import execution. */
	export interface AssetBundleImportJobErrorFormProperties {
		Arn: FormControl<string | null | undefined>,
		Type: FormControl<string | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobErrorFormGroup() {
		return new FormGroup<AssetBundleImportJobErrorFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<string | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A description of the import source that you provide at the start of an import job. This value is set to either <code>Body</code> or <code>S3Uri</code>, depending on how the <code>StartAssetBundleImportJobRequest</code> is configured. */
	export interface AssetBundleImportSourceDescription {
		Body?: string;
		S3Uri?: string;
	}

	/** A description of the import source that you provide at the start of an import job. This value is set to either <code>Body</code> or <code>S3Uri</code>, depending on how the <code>StartAssetBundleImportJobRequest</code> is configured. */
	export interface AssetBundleImportSourceDescriptionFormProperties {
		Body: FormControl<string | null | undefined>,
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportSourceDescriptionFormGroup() {
		return new FormGroup<AssetBundleImportSourceDescriptionFormProperties>({
			Body: new FormControl<string | null | undefined>(undefined),
			S3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of overrides that modify the asset bundle resource configuration before the resource is imported. */
	export interface AssetBundleImportJobOverrideParameters {
		ResourceIdOverrideConfiguration?: AssetBundleImportJobResourceIdOverrideConfiguration;
		VPCConnections?: Array<AssetBundleImportJobVPCConnectionOverrideParameters>;
		RefreshSchedules?: Array<AssetBundleImportJobRefreshScheduleOverrideParameters>;
		DataSources?: Array<AssetBundleImportJobDataSourceOverrideParameters>;
		DataSets?: Array<AssetBundleImportJobDataSetOverrideParameters>;
		Themes?: Array<AssetBundleImportJobThemeOverrideParameters>;
		Analyses?: Array<AssetBundleImportJobAnalysisOverrideParameters>;
		Dashboards?: Array<AssetBundleImportJobDashboardOverrideParameters>;
	}

	/** A list of overrides that modify the asset bundle resource configuration before the resource is imported. */
	export interface AssetBundleImportJobOverrideParametersFormProperties {
	}
	export function CreateAssetBundleImportJobOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobOverrideParametersFormProperties>({
		});

	}


	/** An optional structure that configures resource ID overrides for the import job. */
	export interface AssetBundleImportJobResourceIdOverrideConfiguration {
		PrefixForAllResources?: string;
	}

	/** An optional structure that configures resource ID overrides for the import job. */
	export interface AssetBundleImportJobResourceIdOverrideConfigurationFormProperties {
		PrefixForAllResources: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobResourceIdOverrideConfigurationFormGroup() {
		return new FormGroup<AssetBundleImportJobResourceIdOverrideConfigurationFormProperties>({
			PrefixForAllResources: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The override parameters for a single VPC connection that is imported. */
	export interface AssetBundleImportJobVPCConnectionOverrideParameters {

		/** Required */
		VPCConnectionId: string;
		Name?: string;
		SubnetIds?: Array<string>;
		SecurityGroupIds?: Array<string>;
		DnsResolvers?: Array<string>;
		RoleArn?: string;
	}

	/** The override parameters for a single VPC connection that is imported. */
	export interface AssetBundleImportJobVPCConnectionOverrideParametersFormProperties {

		/** Required */
		VPCConnectionId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobVPCConnectionOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobVPCConnectionOverrideParametersFormProperties>({
			VPCConnectionId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A list of overrides for a specific <code>RefreshsSchedule</code> resource that is present in the asset bundle that is imported. */
	export interface AssetBundleImportJobRefreshScheduleOverrideParameters {

		/** Required */
		DataSetId: string;

		/** Required */
		ScheduleId: string;
		StartAfterDateTime?: Date;
	}

	/** A list of overrides for a specific <code>RefreshsSchedule</code> resource that is present in the asset bundle that is imported. */
	export interface AssetBundleImportJobRefreshScheduleOverrideParametersFormProperties {

		/** Required */
		DataSetId: FormControl<string | null | undefined>,

		/** Required */
		ScheduleId: FormControl<string | null | undefined>,
		StartAfterDateTime: FormControl<Date | null | undefined>,
	}
	export function CreateAssetBundleImportJobRefreshScheduleOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobRefreshScheduleOverrideParametersFormProperties>({
			DataSetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ScheduleId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StartAfterDateTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The override parameters for a single data source that is being imported. */
	export interface AssetBundleImportJobDataSourceOverrideParameters {

		/** Required */
		DataSourceId: string;
		Name?: string;

		/** The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
		DataSourceParameters?: DataSourceParameters;

		/** VPC connection properties. */
		VpcConnectionProperties?: VpcConnectionProperties;

		/** Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source. */
		SslProperties?: SslProperties;
		Credentials?: AssetBundleImportJobDataSourceCredentials;
	}

	/** The override parameters for a single data source that is being imported. */
	export interface AssetBundleImportJobDataSourceOverrideParametersFormProperties {

		/** Required */
		DataSourceId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobDataSourceOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobDataSourceOverrideParametersFormProperties>({
			DataSourceId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** VPC connection properties. */
	export interface VpcConnectionProperties {

		/** Required */
		VpcConnectionArn: string;
	}

	/** VPC connection properties. */
	export interface VpcConnectionPropertiesFormProperties {

		/** Required */
		VpcConnectionArn: FormControl<string | null | undefined>,
	}
	export function CreateVpcConnectionPropertiesFormGroup() {
		return new FormGroup<VpcConnectionPropertiesFormProperties>({
			VpcConnectionArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source. */
	export interface SslProperties {
		DisableSsl?: boolean | null;
	}

	/** Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source. */
	export interface SslPropertiesFormProperties {
		DisableSsl: FormControl<boolean | null | undefined>,
	}
	export function CreateSslPropertiesFormGroup() {
		return new FormGroup<SslPropertiesFormProperties>({
			DisableSsl: new FormControl<boolean | null | undefined>(undefined),
		});

	}


	/** The login credentials to use to import a data source resource. */
	export interface AssetBundleImportJobDataSourceCredentials {
		CredentialPair?: AssetBundleImportJobDataSourceCredentialPair;
		SecretArn?: string;
	}

	/** The login credentials to use to import a data source resource. */
	export interface AssetBundleImportJobDataSourceCredentialsFormProperties {
		SecretArn: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobDataSourceCredentialsFormGroup() {
		return new FormGroup<AssetBundleImportJobDataSourceCredentialsFormProperties>({
			SecretArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A username and password credential pair to use to import a data source resource. */
	export interface AssetBundleImportJobDataSourceCredentialPair {

		/** Required */
		Username: string;

		/** Required */
		Password: string;
	}

	/** A username and password credential pair to use to import a data source resource. */
	export interface AssetBundleImportJobDataSourceCredentialPairFormProperties {

		/** Required */
		Username: FormControl<string | null | undefined>,

		/** Required */
		Password: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobDataSourceCredentialPairFormGroup() {
		return new FormGroup<AssetBundleImportJobDataSourceCredentialPairFormProperties>({
			Username: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Password: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The override parameters for a single dataset that is being imported. */
	export interface AssetBundleImportJobDataSetOverrideParameters {

		/** Required */
		DataSetId: string;
		Name?: string;
	}

	/** The override parameters for a single dataset that is being imported. */
	export interface AssetBundleImportJobDataSetOverrideParametersFormProperties {

		/** Required */
		DataSetId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobDataSetOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobDataSetOverrideParametersFormProperties>({
			DataSetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The override parameters for a single theme that is imported. */
	export interface AssetBundleImportJobThemeOverrideParameters {

		/** Required */
		ThemeId: string;
		Name?: string;
	}

	/** The override parameters for a single theme that is imported. */
	export interface AssetBundleImportJobThemeOverrideParametersFormProperties {

		/** Required */
		ThemeId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobThemeOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobThemeOverrideParametersFormProperties>({
			ThemeId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The override parameters for a single analysis that is being imported. */
	export interface AssetBundleImportJobAnalysisOverrideParameters {

		/** Required */
		AnalysisId: string;
		Name?: string;
	}

	/** The override parameters for a single analysis that is being imported. */
	export interface AssetBundleImportJobAnalysisOverrideParametersFormProperties {

		/** Required */
		AnalysisId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobAnalysisOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobAnalysisOverrideParametersFormProperties>({
			AnalysisId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The override parameters for a single dashboard that is being imported. */
	export interface AssetBundleImportJobDashboardOverrideParameters {

		/** Required */
		DashboardId: string;
		Name?: string;
	}

	/** The override parameters for a single dashboard that is being imported. */
	export interface AssetBundleImportJobDashboardOverrideParametersFormProperties {

		/** Required */
		DashboardId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportJobDashboardOverrideParametersFormGroup() {
		return new FormGroup<AssetBundleImportJobDashboardOverrideParametersFormProperties>({
			DashboardId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AssetBundleImportFailureAction { DO_NOTHING = 0, ROLLBACK = 1 }

	export interface DescribeDashboardResponse {
		Dashboard?: Dashboard;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeDashboardResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDashboardResponseFormGroup() {
		return new FormGroup<DescribeDashboardResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dashboard. */
	export interface Dashboard {
		DashboardId?: string;
		Arn?: string;
		Name?: string;
		Version?: DashboardVersion;
		CreatedTime?: Date;
		LastPublishedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** Dashboard. */
	export interface DashboardFormProperties {
		DashboardId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastPublishedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDashboardFormGroup() {
		return new FormGroup<DashboardFormProperties>({
			DashboardId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastPublishedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** Dashboard version. */
	export interface DashboardVersion {
		CreatedTime?: Date;
		Errors?: Array<DashboardError>;
		VersionNumber?: number | null;
		Status?: ResourceStatus;
		Arn?: string;
		SourceEntityArn?: string;
		DataSetArns?: Array<string>;
		Description?: string;
		ThemeArn?: string;
		Sheets?: Array<Sheet>;
	}

	/** Dashboard version. */
	export interface DashboardVersionFormProperties {
		CreatedTime: FormControl<Date | null | undefined>,
		VersionNumber: FormControl<number | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		SourceEntityArn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateDashboardVersionFormGroup() {
		return new FormGroup<DashboardVersionFormProperties>({
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			VersionNumber: new FormControl<number | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			SourceEntityArn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dashboard error. */
	export interface DashboardError {
		Type?: AnalysisErrorType;
		Message?: string;
		ViolatedEntities?: Array<Entity>;
	}

	/** Dashboard error. */
	export interface DashboardErrorFormProperties {
		Type: FormControl<AnalysisErrorType | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateDashboardErrorFormGroup() {
		return new FormGroup<DashboardErrorFormProperties>({
			Type: new FormControl<AnalysisErrorType | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeDashboardDefinitionResponse {
		DashboardId?: string;
		Errors?: Array<DashboardError>;
		Name?: string;
		ResourceStatus?: ResourceStatus;
		ThemeArn?: string;
		Definition?: DashboardVersionDefinition;
		Status?: number | null;
		RequestId?: string;
		DashboardPublishOptions?: DashboardPublishOptions;
	}
	export interface DescribeDashboardDefinitionResponseFormProperties {
		DashboardId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		ResourceStatus: FormControl<ResourceStatus | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDashboardDefinitionResponseFormGroup() {
		return new FormGroup<DescribeDashboardDefinitionResponseFormProperties>({
			DashboardId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			ResourceStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The contents of a dashboard. */
	export interface DashboardVersionDefinition {

		/** Required */
		DataSetIdentifierDeclarations: Array<DataSetIdentifierDeclaration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}

	/** The contents of a dashboard. */
	export interface DashboardVersionDefinitionFormProperties {
	}
	export function CreateDashboardVersionDefinitionFormGroup() {
		return new FormGroup<DashboardVersionDefinitionFormProperties>({
		});

	}


	/** Dashboard publish options. */
	export interface DashboardPublishOptions {
		AdHocFilteringOption?: AdHocFilteringOption;
		ExportToCSVOption?: ExportToCSVOption;
		SheetControlsOption?: SheetControlsOption;
		VisualPublishOptions?: DashboardVisualPublishOptions;
		SheetLayoutElementMaximizationOption?: SheetLayoutElementMaximizationOption;
		VisualMenuOption?: VisualMenuOption;
		VisualAxisSortOption?: VisualAxisSortOption;
		ExportWithHiddenFieldsOption?: ExportWithHiddenFieldsOption;
		DataPointDrillUpDownOption?: DataPointDrillUpDownOption;
		DataPointMenuLabelOption?: DataPointMenuLabelOption;
		DataPointTooltipOption?: DataPointTooltipOption;
	}

	/** Dashboard publish options. */
	export interface DashboardPublishOptionsFormProperties {
	}
	export function CreateDashboardPublishOptionsFormGroup() {
		return new FormGroup<DashboardPublishOptionsFormProperties>({
		});

	}

	export interface DescribeDashboardPermissionsResponse {
		DashboardId?: string;
		DashboardArn?: string;
		Permissions?: Array<ResourcePermission>;
		Status?: number | null;
		RequestId?: string;
		LinkSharingConfiguration?: LinkSharingConfiguration;
	}
	export interface DescribeDashboardPermissionsResponseFormProperties {
		DashboardId: FormControl<string | null | undefined>,
		DashboardArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeDashboardPermissionsResponseFormGroup() {
		return new FormGroup<DescribeDashboardPermissionsResponseFormProperties>({
			DashboardId: new FormControl<string | null | undefined>(undefined),
			DashboardArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that contains the configuration of a shareable link to the dashboard. */
	export interface LinkSharingConfiguration {
		Permissions?: Array<ResourcePermission>;
	}

	/** A structure that contains the configuration of a shareable link to the dashboard. */
	export interface LinkSharingConfigurationFormProperties {
	}
	export function CreateLinkSharingConfigurationFormGroup() {
		return new FormGroup<LinkSharingConfigurationFormProperties>({
		});

	}

	export interface DescribeDashboardSnapshotJobResponse {
		AwsAccountId?: string;
		DashboardId?: string;
		SnapshotJobId?: string;
		UserConfiguration?: SnapshotUserConfigurationRedacted;
		SnapshotConfiguration?: SnapshotConfiguration;
		Arn?: string;
		JobStatus?: SnapshotJobStatus;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeDashboardSnapshotJobResponseFormProperties {
		AwsAccountId: FormControl<string | null | undefined>,
		DashboardId: FormControl<string | null | undefined>,
		SnapshotJobId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		JobStatus: FormControl<SnapshotJobStatus | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeDashboardSnapshotJobResponseFormGroup() {
		return new FormGroup<DescribeDashboardSnapshotJobResponseFormProperties>({
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			DashboardId: new FormControl<string | null | undefined>(undefined),
			SnapshotJobId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			JobStatus: new FormControl<SnapshotJobStatus | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A structure that contains information about the users that the dashboard snapshot is generated for. Sensitive user information is excluded.  */
	export interface SnapshotUserConfigurationRedacted {
		AnonymousUsers?: Array<SnapshotAnonymousUserRedacted>;
	}

	/** A structure that contains information about the users that the dashboard snapshot is generated for. Sensitive user information is excluded.  */
	export interface SnapshotUserConfigurationRedactedFormProperties {
	}
	export function CreateSnapshotUserConfigurationRedactedFormGroup() {
		return new FormGroup<SnapshotUserConfigurationRedactedFormProperties>({
		});

	}


	/** Use this structure to redact sensitive information that you provide about an anonymous user from the snapshot. */
	export interface SnapshotAnonymousUserRedacted {
		RowLevelPermissionTagKeys?: Array<string>;
	}

	/** Use this structure to redact sensitive information that you provide about an anonymous user from the snapshot. */
	export interface SnapshotAnonymousUserRedactedFormProperties {
	}
	export function CreateSnapshotAnonymousUserRedactedFormGroup() {
		return new FormGroup<SnapshotAnonymousUserRedactedFormProperties>({
		});

	}


	/** Describes the configuration of the dashboard snapshot. */
	export interface SnapshotConfiguration {

		/** Required */
		FileGroups: Array<SnapshotFileGroup>;
		DestinationConfiguration?: SnapshotDestinationConfiguration;

		/** A list of Amazon QuickSight parameters and the list's override values. */
		Parameters?: Parameters;
	}

	/** Describes the configuration of the dashboard snapshot. */
	export interface SnapshotConfigurationFormProperties {
	}
	export function CreateSnapshotConfigurationFormGroup() {
		return new FormGroup<SnapshotConfigurationFormProperties>({
		});

	}


	/** A structure that contains the information on the snapshot files. */
	export interface SnapshotFileGroup {
		Files?: Array<SnapshotFile>;
	}

	/** A structure that contains the information on the snapshot files. */
	export interface SnapshotFileGroupFormProperties {
	}
	export function CreateSnapshotFileGroupFormGroup() {
		return new FormGroup<SnapshotFileGroupFormProperties>({
		});

	}


	/** A structure that contains the information for the snapshot that you want to generate. This information is provided by you when you start a new snapshot job. */
	export interface SnapshotFile {

		/** Required */
		SheetSelections: Array<SnapshotFileSheetSelection>;

		/** Required */
		FormatType: SnapshotFileFormatType;
	}

	/** A structure that contains the information for the snapshot that you want to generate. This information is provided by you when you start a new snapshot job. */
	export interface SnapshotFileFormProperties {

		/** Required */
		FormatType: FormControl<SnapshotFileFormatType | null | undefined>,
	}
	export function CreateSnapshotFileFormGroup() {
		return new FormGroup<SnapshotFileFormProperties>({
			FormatType: new FormControl<SnapshotFileFormatType | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A structure that contains information that identifies the snapshot that needs to be generated. */
	export interface SnapshotFileSheetSelection {

		/** Required */
		SheetId: string;

		/** Required */
		SelectionScope: FilterVisualScope;
		VisualIds?: Array<string>;
	}

	/** A structure that contains information that identifies the snapshot that needs to be generated. */
	export interface SnapshotFileSheetSelectionFormProperties {

		/** Required */
		SheetId: FormControl<string | null | undefined>,

		/** Required */
		SelectionScope: FormControl<FilterVisualScope | null | undefined>,
	}
	export function CreateSnapshotFileSheetSelectionFormGroup() {
		return new FormGroup<SnapshotFileSheetSelectionFormProperties>({
			SheetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SelectionScope: new FormControl<FilterVisualScope | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum SnapshotFileFormatType { CSV = 0, PDF = 1 }


	/** A structure that contains information on the Amazon S3 destinations of the generated snapshot. */
	export interface SnapshotDestinationConfiguration {
		S3Destinations?: Array<SnapshotS3DestinationConfiguration>;
	}

	/** A structure that contains information on the Amazon S3 destinations of the generated snapshot. */
	export interface SnapshotDestinationConfigurationFormProperties {
	}
	export function CreateSnapshotDestinationConfigurationFormGroup() {
		return new FormGroup<SnapshotDestinationConfigurationFormProperties>({
		});

	}


	/** A structure that describes the Amazon S3 settings to use to save the generated dashboard snapshot. */
	export interface SnapshotS3DestinationConfiguration {
		BucketConfiguration?: S3BucketConfiguration;
	}

	/** A structure that describes the Amazon S3 settings to use to save the generated dashboard snapshot. */
	export interface SnapshotS3DestinationConfigurationFormProperties {
	}
	export function CreateSnapshotS3DestinationConfigurationFormGroup() {
		return new FormGroup<SnapshotS3DestinationConfigurationFormProperties>({
		});

	}


	/** An optional structure that contains the Amazon S3 bucket configuration that the generated snapshots are stored in. If you don't provide this information, generated snapshots are stored in the default Amazon QuickSight bucket. */
	export interface S3BucketConfiguration {

		/** Required */
		BucketName: string;

		/** Required */
		BucketPrefix: string;

		/** Required */
		BucketRegion: string;
	}

	/** An optional structure that contains the Amazon S3 bucket configuration that the generated snapshots are stored in. If you don't provide this information, generated snapshots are stored in the default Amazon QuickSight bucket. */
	export interface S3BucketConfigurationFormProperties {

		/** Required */
		BucketName: FormControl<string | null | undefined>,

		/** Required */
		BucketPrefix: FormControl<string | null | undefined>,

		/** Required */
		BucketRegion: FormControl<string | null | undefined>,
	}
	export function CreateS3BucketConfigurationFormGroup() {
		return new FormGroup<S3BucketConfigurationFormProperties>({
			BucketName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BucketPrefix: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BucketRegion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** A list of Amazon QuickSight parameters and the list's override values. */
	export interface Parameters {
		StringParameters?: Array<StringParameter>;
		IntegerParameters?: Array<IntegerParameter>;
		DecimalParameters?: Array<DecimalParameter>;
		DateTimeParameters?: Array<DateTimeParameter>;
	}

	/** A list of Amazon QuickSight parameters and the list's override values. */
	export interface ParametersFormProperties {
	}
	export function CreateParametersFormGroup() {
		return new FormGroup<ParametersFormProperties>({
		});

	}

	export enum SnapshotJobStatus { QUEUED = 0, RUNNING = 1, COMPLETED = 2, FAILED = 3 }

	export interface DescribeDashboardSnapshotJobResultResponse {
		Arn?: string;
		JobStatus?: SnapshotJobStatus;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		Result?: SnapshotJobResult;
		ErrorInfo?: SnapshotJobErrorInfo;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeDashboardSnapshotJobResultResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		JobStatus: FormControl<SnapshotJobStatus | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeDashboardSnapshotJobResultResponseFormGroup() {
		return new FormGroup<DescribeDashboardSnapshotJobResultResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			JobStatus: new FormControl<SnapshotJobStatus | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An object that provides information on the result of a snapshot job. This object provides information about the job, the job status, and the location of the generated file. */
	export interface SnapshotJobResult {
		AnonymousUsers?: Array<AnonymousUserSnapshotJobResult>;
	}

	/** An object that provides information on the result of a snapshot job. This object provides information about the job, the job status, and the location of the generated file. */
	export interface SnapshotJobResultFormProperties {
	}
	export function CreateSnapshotJobResultFormGroup() {
		return new FormGroup<SnapshotJobResultFormProperties>({
		});

	}


	/** A structure that contains the file groups that are requested for the artifact generation in a <code>StartDashboardSnapshotJob</code> API call.  */
	export interface AnonymousUserSnapshotJobResult {
		FileGroups?: Array<SnapshotJobResultFileGroup>;
	}

	/** A structure that contains the file groups that are requested for the artifact generation in a <code>StartDashboardSnapshotJob</code> API call.  */
	export interface AnonymousUserSnapshotJobResultFormProperties {
	}
	export function CreateAnonymousUserSnapshotJobResultFormGroup() {
		return new FormGroup<AnonymousUserSnapshotJobResultFormProperties>({
		});

	}


	/** A structure that contains information on the generated snapshot file groups. */
	export interface SnapshotJobResultFileGroup {
		Files?: Array<SnapshotFile>;
		S3Results?: Array<SnapshotJobS3Result>;
	}

	/** A structure that contains information on the generated snapshot file groups. */
	export interface SnapshotJobResultFileGroupFormProperties {
	}
	export function CreateSnapshotJobResultFileGroupFormGroup() {
		return new FormGroup<SnapshotJobResultFileGroupFormProperties>({
		});

	}


	/** The Amazon S3 result from the snapshot job. The result includes the <code>DestinationConfiguration</code> and the Amazon S3 Uri. If an error occured during the job, the result returns information on the error. */
	export interface SnapshotJobS3Result {
		S3DestinationConfiguration?: SnapshotS3DestinationConfiguration;
		S3Uri?: string;
		ErrorInfo?: Array<SnapshotJobResultErrorInfo>;
	}

	/** The Amazon S3 result from the snapshot job. The result includes the <code>DestinationConfiguration</code> and the Amazon S3 Uri. If an error occured during the job, the result returns information on the error. */
	export interface SnapshotJobS3ResultFormProperties {
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateSnapshotJobS3ResultFormGroup() {
		return new FormGroup<SnapshotJobS3ResultFormProperties>({
			S3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Information on the error that caused the snapshot job to fail. */
	export interface SnapshotJobResultErrorInfo {
		ErrorMessage?: string;
		ErrorType?: string;
	}

	/** Information on the error that caused the snapshot job to fail. */
	export interface SnapshotJobResultErrorInfoFormProperties {
		ErrorMessage: FormControl<string | null | undefined>,
		ErrorType: FormControl<string | null | undefined>,
	}
	export function CreateSnapshotJobResultErrorInfoFormGroup() {
		return new FormGroup<SnapshotJobResultErrorInfoFormProperties>({
			ErrorMessage: new FormControl<string | null | undefined>(undefined),
			ErrorType: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An object that contains information on the error that caused the snapshot job to fail. */
	export interface SnapshotJobErrorInfo {
		ErrorMessage?: string;
		ErrorType?: string;
	}

	/** An object that contains information on the error that caused the snapshot job to fail. */
	export interface SnapshotJobErrorInfoFormProperties {
		ErrorMessage: FormControl<string | null | undefined>,
		ErrorType: FormControl<string | null | undefined>,
	}
	export function CreateSnapshotJobErrorInfoFormGroup() {
		return new FormGroup<SnapshotJobErrorInfoFormProperties>({
			ErrorMessage: new FormControl<string | null | undefined>(undefined),
			ErrorType: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeDataSetResponse {
		DataSet?: DataSet;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeDataSetResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeDataSetResponseFormGroup() {
		return new FormGroup<DescribeDataSetResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Dataset. */
	export interface DataSet {
		Arn?: string;
		DataSetId?: string;
		Name?: string;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		PhysicalTableMap?: PhysicalTableMap;
		LogicalTableMap?: LogicalTableMap;
		OutputColumns?: Array<OutputColumn>;
		ImportMode?: DataSetImportMode;
		ConsumedSpiceCapacityInBytes?: number | null;
		ColumnGroups?: Array<ColumnGroup>;
		FieldFolders?: FieldFolderMap;
		RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
		RowLevelPermissionTagConfiguration?: RowLevelPermissionTagConfiguration;
		ColumnLevelPermissionRules?: Array<ColumnLevelPermissionRule>;
		DataSetUsageConfiguration?: DataSetUsageConfiguration;
		DatasetParameters?: Array<DatasetParameter>;
	}

	/** Dataset. */
	export interface DataSetFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSetId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		ImportMode: FormControl<DataSetImportMode | null | undefined>,
		ConsumedSpiceCapacityInBytes: FormControl<number | null | undefined>,
	}
	export function CreateDataSetFormGroup() {
		return new FormGroup<DataSetFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSetId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			ImportMode: new FormControl<DataSetImportMode | null | undefined>(undefined),
			ConsumedSpiceCapacityInBytes: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface PhysicalTableMap {
	}
	export interface PhysicalTableMapFormProperties {
	}
	export function CreatePhysicalTableMapFormGroup() {
		return new FormGroup<PhysicalTableMapFormProperties>({
		});

	}

	export interface LogicalTableMap {
	}
	export interface LogicalTableMapFormProperties {
	}
	export function CreateLogicalTableMapFormGroup() {
		return new FormGroup<LogicalTableMapFormProperties>({
		});

	}


	/** Output column. */
	export interface OutputColumn {
		Name?: string;
		Description?: string;
		Type?: ColumnDataType;
	}

	/** Output column. */
	export interface OutputColumnFormProperties {
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		Type: FormControl<ColumnDataType | null | undefined>,
	}
	export function CreateOutputColumnFormGroup() {
		return new FormGroup<OutputColumnFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<ColumnDataType | null | undefined>(undefined),
		});

	}

	export enum DataSetImportMode { SPICE = 0, DIRECT_QUERY = 1 }

	export interface FieldFolderMap {
	}
	export interface FieldFolderMapFormProperties {
	}
	export function CreateFieldFolderMapFormGroup() {
		return new FormGroup<FieldFolderMapFormProperties>({
		});

	}


	/** <p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p> */
	export interface RowLevelPermissionDataSet {
		Namespace?: string;

		/** Required */
		Arn: string;

		/** Required */
		PermissionPolicy: RowLevelPermissionPolicy;
		FormatVersion?: RowLevelPermissionFormatVersion;
		Status?: WidgetStatus;
	}

	/** <p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p> */
	export interface RowLevelPermissionDataSetFormProperties {
		Namespace: FormControl<string | null | undefined>,

		/** Required */
		Arn: FormControl<string | null | undefined>,

		/** Required */
		PermissionPolicy: FormControl<RowLevelPermissionPolicy | null | undefined>,
		FormatVersion: FormControl<RowLevelPermissionFormatVersion | null | undefined>,
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateRowLevelPermissionDataSetFormGroup() {
		return new FormGroup<RowLevelPermissionDataSetFormProperties>({
			Namespace: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			PermissionPolicy: new FormControl<RowLevelPermissionPolicy | null | undefined>(undefined, [Validators.required]),
			FormatVersion: new FormControl<RowLevelPermissionFormatVersion | null | undefined>(undefined),
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The configuration of tags on a dataset to set row-level security.  */
	export interface RowLevelPermissionTagConfiguration {
		Status?: WidgetStatus;

		/** Required */
		TagRules: Array<RowLevelPermissionTagRule>;
		TagRuleConfigurations?: Array<Array<string>>;
	}

	/** The configuration of tags on a dataset to set row-level security.  */
	export interface RowLevelPermissionTagConfigurationFormProperties {
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateRowLevelPermissionTagConfigurationFormGroup() {
		return new FormGroup<RowLevelPermissionTagConfigurationFormProperties>({
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}


	/** The usage configuration to apply to child datasets that reference this dataset as a source. */
	export interface DataSetUsageConfiguration {
		DisableUseAsDirectQuerySource?: boolean | null;
		DisableUseAsImportedSource?: boolean | null;
	}

	/** The usage configuration to apply to child datasets that reference this dataset as a source. */
	export interface DataSetUsageConfigurationFormProperties {
		DisableUseAsDirectQuerySource: FormControl<boolean | null | undefined>,
		DisableUseAsImportedSource: FormControl<boolean | null | undefined>,
	}
	export function CreateDataSetUsageConfigurationFormGroup() {
		return new FormGroup<DataSetUsageConfigurationFormProperties>({
			DisableUseAsDirectQuerySource: new FormControl<boolean | null | undefined>(undefined),
			DisableUseAsImportedSource: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface DescribeDataSetPermissionsResponse {
		DataSetArn?: string;
		DataSetId?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeDataSetPermissionsResponseFormProperties {
		DataSetArn: FormControl<string | null | undefined>,
		DataSetId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeDataSetPermissionsResponseFormGroup() {
		return new FormGroup<DescribeDataSetPermissionsResponseFormProperties>({
			DataSetArn: new FormControl<string | null | undefined>(undefined),
			DataSetId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeDataSetRefreshPropertiesResponse {
		RequestId?: string;
		Status?: number | null;
		DataSetRefreshProperties?: DataSetRefreshProperties;
	}
	export interface DescribeDataSetRefreshPropertiesResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeDataSetRefreshPropertiesResponseFormGroup() {
		return new FormGroup<DescribeDataSetRefreshPropertiesResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The refresh properties of a dataset. */
	export interface DataSetRefreshProperties {

		/** Required */
		RefreshConfiguration: RefreshConfiguration;
	}

	/** The refresh properties of a dataset. */
	export interface DataSetRefreshPropertiesFormProperties {
	}
	export function CreateDataSetRefreshPropertiesFormGroup() {
		return new FormGroup<DataSetRefreshPropertiesFormProperties>({
		});

	}


	/** The refresh configuration of a dataset. */
	export interface RefreshConfiguration {

		/** Required */
		IncrementalRefresh: IncrementalRefresh;
	}

	/** The refresh configuration of a dataset. */
	export interface RefreshConfigurationFormProperties {
	}
	export function CreateRefreshConfigurationFormGroup() {
		return new FormGroup<RefreshConfigurationFormProperties>({
		});

	}


	/** The incremental refresh configuration for a dataset. */
	export interface IncrementalRefresh {

		/** Required */
		LookbackWindow: LookbackWindow;
	}

	/** The incremental refresh configuration for a dataset. */
	export interface IncrementalRefreshFormProperties {
	}
	export function CreateIncrementalRefreshFormGroup() {
		return new FormGroup<IncrementalRefreshFormProperties>({
		});

	}


	/** The lookback window setup of an incremental refresh configuration. */
	export interface LookbackWindow {

		/** Required */
		ColumnName: string;

		/** Required */
		Size: number;

		/** Required */
		SizeUnit: LookbackWindowSizeUnit;
	}

	/** The lookback window setup of an incremental refresh configuration. */
	export interface LookbackWindowFormProperties {

		/** Required */
		ColumnName: FormControl<string | null | undefined>,

		/** Required */
		Size: FormControl<number | null | undefined>,

		/** Required */
		SizeUnit: FormControl<LookbackWindowSizeUnit | null | undefined>,
	}
	export function CreateLookbackWindowFormGroup() {
		return new FormGroup<LookbackWindowFormProperties>({
			ColumnName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Size: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			SizeUnit: new FormControl<LookbackWindowSizeUnit | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum LookbackWindowSizeUnit { HOUR = 0, DAY = 1, WEEK = 2 }

	export interface DescribeDataSourceResponse {
		DataSource?: DataSource;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeDataSourceResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeDataSourceResponseFormGroup() {
		return new FormGroup<DescribeDataSourceResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The structure of a data source. */
	export interface DataSource {
		Arn?: string;
		DataSourceId?: string;
		Name?: string;
		Type?: DataSourceType;
		Status?: ResourceStatus;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		DataSourceParameters?: DataSourceParameters;
		AlternateDataSourceParameters?: Array<DataSourceParameters>;
		VpcConnectionProperties?: VpcConnectionProperties;
		SslProperties?: SslProperties;
		ErrorInfo?: DataSourceErrorInfo;
		SecretArn?: string;
	}

	/** The structure of a data source. */
	export interface DataSourceFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSourceId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		Type: FormControl<DataSourceType | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		SecretArn: FormControl<string | null | undefined>,
	}
	export function CreateDataSourceFormGroup() {
		return new FormGroup<DataSourceFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSourceId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<DataSourceType | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			SecretArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DataSourceType { ADOBE_ANALYTICS = 0, AMAZON_ELASTICSEARCH = 1, ATHENA = 2, AURORA = 3, AURORA_POSTGRESQL = 4, AWS_IOT_ANALYTICS = 5, GITHUB = 6, JIRA = 7, MARIADB = 8, MYSQL = 9, ORACLE = 10, POSTGRESQL = 11, PRESTO = 12, REDSHIFT = 13, S3 = 14, SALESFORCE = 15, SERVICENOW = 16, SNOWFLAKE = 17, SPARK = 18, SQLSERVER = 19, TERADATA = 20, TWITTER = 21, TIMESTREAM = 22, AMAZON_OPENSEARCH = 23, EXASOL = 24, DATABRICKS = 25 }


	/** Error information for the data source creation or update. */
	export interface DataSourceErrorInfo {
		Type?: DataSourceErrorInfoType;
		Message?: string;
	}

	/** Error information for the data source creation or update. */
	export interface DataSourceErrorInfoFormProperties {
		Type: FormControl<DataSourceErrorInfoType | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateDataSourceErrorInfoFormGroup() {
		return new FormGroup<DataSourceErrorInfoFormProperties>({
			Type: new FormControl<DataSourceErrorInfoType | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DataSourceErrorInfoType { ACCESS_DENIED = 0, COPY_SOURCE_NOT_FOUND = 1, TIMEOUT = 2, ENGINE_VERSION_NOT_SUPPORTED = 3, UNKNOWN_HOST = 4, GENERIC_SQL_FAILURE = 5, CONFLICT = 6, UNKNOWN = 7 }

	export interface DescribeDataSourcePermissionsResponse {
		DataSourceArn?: string;
		DataSourceId?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeDataSourcePermissionsResponseFormProperties {
		DataSourceArn: FormControl<string | null | undefined>,
		DataSourceId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeDataSourcePermissionsResponseFormGroup() {
		return new FormGroup<DescribeDataSourcePermissionsResponseFormProperties>({
			DataSourceArn: new FormControl<string | null | undefined>(undefined),
			DataSourceId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeFolderResponse {
		Status?: number | null;
		Folder?: Folder;
		RequestId?: string;
	}
	export interface DescribeFolderResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFolderResponseFormGroup() {
		return new FormGroup<DescribeFolderResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A folder in Amazon QuickSight. */
	export interface Folder {
		FolderId?: string;
		Arn?: string;
		Name?: string;
		FolderType?: FolderType;
		FolderPath?: Array<string>;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** A folder in Amazon QuickSight. */
	export interface FolderFormProperties {
		FolderId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		FolderType: FormControl<FolderType | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateFolderFormGroup() {
		return new FormGroup<FolderFormProperties>({
			FolderId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			FolderType: new FormControl<FolderType | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export enum FolderType { SHARED = 0 }

	export interface DescribeFolderPermissionsResponse {
		Status?: number | null;
		FolderId?: string;
		Arn?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
	}
	export interface DescribeFolderPermissionsResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		FolderId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFolderPermissionsResponseFormGroup() {
		return new FormGroup<DescribeFolderPermissionsResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			FolderId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeFolderResolvedPermissionsResponse {
		Status?: number | null;
		FolderId?: string;
		Arn?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
	}
	export interface DescribeFolderResolvedPermissionsResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		FolderId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeFolderResolvedPermissionsResponseFormGroup() {
		return new FormGroup<DescribeFolderResolvedPermissionsResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			FolderId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeGroupResponse {
		Group?: Group;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeGroupResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeGroupResponseFormGroup() {
		return new FormGroup<DescribeGroupResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeGroupMembershipResponse {

		/** A member of an Amazon QuickSight group. Currently, group members must be users. Groups can't be members of another group. . */
		GroupMember?: GroupMember;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeGroupMembershipResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeGroupMembershipResponseFormGroup() {
		return new FormGroup<DescribeGroupMembershipResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeIAMPolicyAssignmentResponse {
		IAMPolicyAssignment?: IAMPolicyAssignment;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeIAMPolicyAssignmentResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeIAMPolicyAssignmentResponseFormGroup() {
		return new FormGroup<DescribeIAMPolicyAssignmentResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** An Identity and Access Management (IAM) policy assignment. */
	export interface IAMPolicyAssignment {
		AwsAccountId?: string;
		AssignmentId?: string;
		AssignmentName?: string;
		PolicyArn?: string;
		Identities?: IdentityMap;
		AssignmentStatus?: AssignmentStatus;
	}

	/** An Identity and Access Management (IAM) policy assignment. */
	export interface IAMPolicyAssignmentFormProperties {
		AwsAccountId: FormControl<string | null | undefined>,
		AssignmentId: FormControl<string | null | undefined>,
		AssignmentName: FormControl<string | null | undefined>,
		PolicyArn: FormControl<string | null | undefined>,
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,
	}
	export function CreateIAMPolicyAssignmentFormGroup() {
		return new FormGroup<IAMPolicyAssignmentFormProperties>({
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			AssignmentId: new FormControl<string | null | undefined>(undefined),
			AssignmentName: new FormControl<string | null | undefined>(undefined),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined),
		});

	}

	export interface InvalidNextTokenException {
	}
	export interface InvalidNextTokenExceptionFormProperties {
	}
	export function CreateInvalidNextTokenExceptionFormGroup() {
		return new FormGroup<InvalidNextTokenExceptionFormProperties>({
		});

	}

	export interface DescribeIngestionResponse {
		Ingestion?: Ingestion;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeIngestionResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeIngestionResponseFormGroup() {
		return new FormGroup<DescribeIngestionResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Information about the SPICE ingestion for a dataset. */
	export interface Ingestion {

		/** Required */
		Arn: string;
		IngestionId?: string;

		/** Required */
		IngestionStatus: IngestionStatus;
		ErrorInfo?: ErrorInfo;

		/** Information about rows for a data set SPICE ingestion. */
		RowInfo?: RowInfo;

		/** Information about a queued dataset SPICE ingestion. */
		QueueInfo?: QueueInfo;

		/** Required */
		CreatedTime: Date;
		IngestionTimeInSeconds?: number | null;
		IngestionSizeInBytes?: number | null;
		RequestSource?: IngestionRequestSource;
		RequestType?: IngestionRequestType;
	}

	/** Information about the SPICE ingestion for a dataset. */
	export interface IngestionFormProperties {

		/** Required */
		Arn: FormControl<string | null | undefined>,
		IngestionId: FormControl<string | null | undefined>,

		/** Required */
		IngestionStatus: FormControl<IngestionStatus | null | undefined>,

		/** Required */
		CreatedTime: FormControl<Date | null | undefined>,
		IngestionTimeInSeconds: FormControl<number | null | undefined>,
		IngestionSizeInBytes: FormControl<number | null | undefined>,
		RequestSource: FormControl<IngestionRequestSource | null | undefined>,
		RequestType: FormControl<IngestionRequestType | null | undefined>,
	}
	export function CreateIngestionFormGroup() {
		return new FormGroup<IngestionFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IngestionId: new FormControl<string | null | undefined>(undefined),
			IngestionStatus: new FormControl<IngestionStatus | null | undefined>(undefined, [Validators.required]),
			CreatedTime: new FormControl<Date | null | undefined>(undefined, [Validators.required]),
			IngestionTimeInSeconds: new FormControl<number | null | undefined>(undefined),
			IngestionSizeInBytes: new FormControl<number | null | undefined>(undefined),
			RequestSource: new FormControl<IngestionRequestSource | null | undefined>(undefined),
			RequestType: new FormControl<IngestionRequestType | null | undefined>(undefined),
		});

	}


	/** Error information for the SPICE ingestion of a dataset. */
	export interface ErrorInfo {
		Type?: IngestionErrorType;
		Message?: string;
	}

	/** Error information for the SPICE ingestion of a dataset. */
	export interface ErrorInfoFormProperties {
		Type: FormControl<IngestionErrorType | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateErrorInfoFormGroup() {
		return new FormGroup<ErrorInfoFormProperties>({
			Type: new FormControl<IngestionErrorType | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum IngestionErrorType { FAILURE_TO_ASSUME_ROLE = 0, INGESTION_SUPERSEDED = 1, INGESTION_CANCELED = 2, DATA_SET_DELETED = 3, DATA_SET_NOT_SPICE = 4, S3_UPLOADED_FILE_DELETED = 5, S3_MANIFEST_ERROR = 6, DATA_TOLERANCE_EXCEPTION = 7, SPICE_TABLE_NOT_FOUND = 8, DATA_SET_SIZE_LIMIT_EXCEEDED = 9, ROW_SIZE_LIMIT_EXCEEDED = 10, ACCOUNT_CAPACITY_LIMIT_EXCEEDED = 11, CUSTOMER_ERROR = 12, DATA_SOURCE_NOT_FOUND = 13, IAM_ROLE_NOT_AVAILABLE = 14, CONNECTION_FAILURE = 15, SQL_TABLE_NOT_FOUND = 16, PERMISSION_DENIED = 17, SSL_CERTIFICATE_VALIDATION_FAILURE = 18, OAUTH_TOKEN_FAILURE = 19, SOURCE_API_LIMIT_EXCEEDED_FAILURE = 20, PASSWORD_AUTHENTICATION_FAILURE = 21, SQL_SCHEMA_MISMATCH_ERROR = 22, INVALID_DATE_FORMAT = 23, INVALID_DATAPREP_SYNTAX = 24, SOURCE_RESOURCE_LIMIT_EXCEEDED = 25, SQL_INVALID_PARAMETER_VALUE = 26, QUERY_TIMEOUT = 27, SQL_NUMERIC_OVERFLOW = 28, UNRESOLVABLE_HOST = 29, UNROUTABLE_HOST = 30, SQL_EXCEPTION = 31, S3_FILE_INACCESSIBLE = 32, IOT_FILE_NOT_FOUND = 33, IOT_DATA_SET_FILE_EMPTY = 34, INVALID_DATA_SOURCE_CONFIG = 35, DATA_SOURCE_AUTH_FAILED = 36, DATA_SOURCE_CONNECTION_FAILED = 37, FAILURE_TO_PROCESS_JSON_FILE = 38, INTERNAL_SERVICE_ERROR = 39, REFRESH_SUPPRESSED_BY_EDIT = 40, PERMISSION_NOT_FOUND = 41, ELASTICSEARCH_CURSOR_NOT_ENABLED = 42, CURSOR_NOT_ENABLED = 43, DUPLICATE_COLUMN_NAMES_FOUND = 44 }


	/** Information about rows for a data set SPICE ingestion. */
	export interface RowInfo {
		RowsIngested?: number | null;
		RowsDropped?: number | null;
		TotalRowsInDataset?: number | null;
	}

	/** Information about rows for a data set SPICE ingestion. */
	export interface RowInfoFormProperties {
		RowsIngested: FormControl<number | null | undefined>,
		RowsDropped: FormControl<number | null | undefined>,
		TotalRowsInDataset: FormControl<number | null | undefined>,
	}
	export function CreateRowInfoFormGroup() {
		return new FormGroup<RowInfoFormProperties>({
			RowsIngested: new FormControl<number | null | undefined>(undefined),
			RowsDropped: new FormControl<number | null | undefined>(undefined),
			TotalRowsInDataset: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Information about a queued dataset SPICE ingestion. */
	export interface QueueInfo {

		/** Required */
		WaitingOnIngestion: string;

		/** Required */
		QueuedIngestion: string;
	}

	/** Information about a queued dataset SPICE ingestion. */
	export interface QueueInfoFormProperties {

		/** Required */
		WaitingOnIngestion: FormControl<string | null | undefined>,

		/** Required */
		QueuedIngestion: FormControl<string | null | undefined>,
	}
	export function CreateQueueInfoFormGroup() {
		return new FormGroup<QueueInfoFormProperties>({
			WaitingOnIngestion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			QueuedIngestion: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum IngestionRequestSource { MANUAL = 0, SCHEDULED = 1 }


	/** This defines the type of ingestion request. This is returned as part of create ingestion response. */
	export enum IngestionRequestType { INITIAL_INGESTION = 0, EDIT = 1, INCREMENTAL_REFRESH = 2, FULL_REFRESH = 3 }

	export interface DescribeIpRestrictionResponse {
		AwsAccountId?: string;
		IpRestrictionRuleMap?: IpRestrictionRuleMap;
		Enabled?: boolean | null;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeIpRestrictionResponseFormProperties {
		AwsAccountId: FormControl<string | null | undefined>,
		Enabled: FormControl<boolean | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeIpRestrictionResponseFormGroup() {
		return new FormGroup<DescribeIpRestrictionResponseFormProperties>({
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			Enabled: new FormControl<boolean | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface IpRestrictionRuleMap {
	}
	export interface IpRestrictionRuleMapFormProperties {
	}
	export function CreateIpRestrictionRuleMapFormGroup() {
		return new FormGroup<IpRestrictionRuleMapFormProperties>({
		});

	}

	export interface DescribeNamespaceResponse {
		Namespace?: NamespaceInfoV2;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeNamespaceResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeNamespaceResponseFormGroup() {
		return new FormGroup<DescribeNamespaceResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The error type. */
	export interface NamespaceInfoV2 {
		Name?: string;
		Arn?: string;
		CapacityRegion?: string;
		CreationStatus?: NamespaceStatus;
		IdentityStore?: IdentityStore;
		NamespaceError?: NamespaceError;
	}

	/** The error type. */
	export interface NamespaceInfoV2FormProperties {
		Name: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		CapacityRegion: FormControl<string | null | undefined>,
		CreationStatus: FormControl<NamespaceStatus | null | undefined>,
		IdentityStore: FormControl<IdentityStore | null | undefined>,
	}
	export function CreateNamespaceInfoV2FormGroup() {
		return new FormGroup<NamespaceInfoV2FormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			CapacityRegion: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<NamespaceStatus | null | undefined>(undefined),
			IdentityStore: new FormControl<IdentityStore | null | undefined>(undefined),
		});

	}


	/** Errors that occur during namespace creation. */
	export interface NamespaceError {
		Type?: NamespaceErrorType;
		Message?: string;
	}

	/** Errors that occur during namespace creation. */
	export interface NamespaceErrorFormProperties {
		Type: FormControl<NamespaceErrorType | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateNamespaceErrorFormGroup() {
		return new FormGroup<NamespaceErrorFormProperties>({
			Type: new FormControl<NamespaceErrorType | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NamespaceErrorType { PERMISSION_DENIED = 0, INTERNAL_SERVICE_ERROR = 1 }

	export interface DescribeRefreshScheduleResponse {
		RefreshSchedule?: RefreshSchedule;
		Status?: number | null;
		RequestId?: string;
		Arn?: string;
	}
	export interface DescribeRefreshScheduleResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateDescribeRefreshScheduleResponseFormGroup() {
		return new FormGroup<DescribeRefreshScheduleResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The refresh schedule of a dataset. */
	export interface RefreshSchedule {

		/** Required */
		ScheduleId: string;

		/** Required */
		ScheduleFrequency: RefreshFrequency;
		StartAfterDateTime?: Date;

		/** Required */
		RefreshType: IngestionType;
		Arn?: string;
	}

	/** The refresh schedule of a dataset. */
	export interface RefreshScheduleFormProperties {

		/** Required */
		ScheduleId: FormControl<string | null | undefined>,
		StartAfterDateTime: FormControl<Date | null | undefined>,

		/** Required */
		RefreshType: FormControl<IngestionType | null | undefined>,
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateRefreshScheduleFormGroup() {
		return new FormGroup<RefreshScheduleFormProperties>({
			ScheduleId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			StartAfterDateTime: new FormControl<Date | null | undefined>(undefined),
			RefreshType: new FormControl<IngestionType | null | undefined>(undefined, [Validators.required]),
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeTemplateResponse {
		Template?: Template;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeTemplateResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTemplateResponseFormGroup() {
		return new FormGroup<DescribeTemplateResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** <p>A template object. A <i>template</i> is an entity in Amazon QuickSight that encapsulates the metadata required to create an analysis and that you can use to create a dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with an analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p> <p>You can share templates across Amazon Web Services accounts by allowing users in other Amazon Web Services accounts to create a template or a dashboard from an existing template.</p> */
	export interface Template {
		Arn?: string;
		Name?: string;
		Version?: TemplateVersion;
		TemplateId?: string;
		LastUpdatedTime?: Date;
		CreatedTime?: Date;
	}

	/** <p>A template object. A <i>template</i> is an entity in Amazon QuickSight that encapsulates the metadata required to create an analysis and that you can use to create a dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with an analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p> <p>You can share templates across Amazon Web Services accounts by allowing users in other Amazon Web Services accounts to create a template or a dashboard from an existing template.</p> */
	export interface TemplateFormProperties {
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		TemplateId: FormControl<string | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateTemplateFormGroup() {
		return new FormGroup<TemplateFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			TemplateId: new FormControl<string | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** A version of a template. */
	export interface TemplateVersion {
		CreatedTime?: Date;
		Errors?: Array<TemplateError>;
		VersionNumber?: number | null;
		Status?: ResourceStatus;
		DataSetConfigurations?: Array<DataSetConfiguration>;
		Description?: string;
		SourceEntityArn?: string;
		ThemeArn?: string;
		Sheets?: Array<Sheet>;
	}

	/** A version of a template. */
	export interface TemplateVersionFormProperties {
		CreatedTime: FormControl<Date | null | undefined>,
		VersionNumber: FormControl<number | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
		Description: FormControl<string | null | undefined>,
		SourceEntityArn: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateTemplateVersionFormGroup() {
		return new FormGroup<TemplateVersionFormProperties>({
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			VersionNumber: new FormControl<number | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			SourceEntityArn: new FormControl<string | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** List of errors that occurred when the template version creation failed. */
	export interface TemplateError {
		Type?: TemplateErrorType;
		Message?: string;
		ViolatedEntities?: Array<Entity>;
	}

	/** List of errors that occurred when the template version creation failed. */
	export interface TemplateErrorFormProperties {
		Type: FormControl<TemplateErrorType | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateTemplateErrorFormGroup() {
		return new FormGroup<TemplateErrorFormProperties>({
			Type: new FormControl<TemplateErrorType | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum TemplateErrorType { SOURCE_NOT_FOUND = 0, DATA_SET_NOT_FOUND = 1, INTERNAL_FAILURE = 2, ACCESS_DENIED = 3 }

	export interface DescribeTemplateAliasResponse {
		TemplateAlias?: TemplateAlias;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeTemplateAliasResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTemplateAliasResponseFormGroup() {
		return new FormGroup<DescribeTemplateAliasResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeTemplateDefinitionResponse {
		Name?: string;
		TemplateId?: string;
		Errors?: Array<TemplateError>;
		ResourceStatus?: ResourceStatus;
		ThemeArn?: string;
		Definition?: TemplateVersionDefinition;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeTemplateDefinitionResponseFormProperties {
		Name: FormControl<string | null | undefined>,
		TemplateId: FormControl<string | null | undefined>,
		ResourceStatus: FormControl<ResourceStatus | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTemplateDefinitionResponseFormGroup() {
		return new FormGroup<DescribeTemplateDefinitionResponseFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			TemplateId: new FormControl<string | null | undefined>(undefined),
			ResourceStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The detailed definition of a template. */
	export interface TemplateVersionDefinition {

		/** Required */
		DataSetConfigurations: Array<DataSetConfiguration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}

	/** The detailed definition of a template. */
	export interface TemplateVersionDefinitionFormProperties {
	}
	export function CreateTemplateVersionDefinitionFormGroup() {
		return new FormGroup<TemplateVersionDefinitionFormProperties>({
		});

	}

	export interface DescribeTemplatePermissionsResponse {
		TemplateId?: string;
		TemplateArn?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeTemplatePermissionsResponseFormProperties {
		TemplateId: FormControl<string | null | undefined>,
		TemplateArn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeTemplatePermissionsResponseFormGroup() {
		return new FormGroup<DescribeTemplatePermissionsResponseFormProperties>({
			TemplateId: new FormControl<string | null | undefined>(undefined),
			TemplateArn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeThemeResponse {
		Theme?: Theme;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeThemeResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeThemeResponseFormGroup() {
		return new FormGroup<DescribeThemeResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Summary information about a theme. */
	export interface Theme {
		Arn?: string;
		Name?: string;
		ThemeId?: string;

		/** A version of a theme. */
		Version?: ThemeVersion;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		Type?: ThemeType;
	}

	/** Summary information about a theme. */
	export interface ThemeFormProperties {
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		ThemeId: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		Type: FormControl<ThemeType | null | undefined>,
	}
	export function CreateThemeFormGroup() {
		return new FormGroup<ThemeFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			ThemeId: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			Type: new FormControl<ThemeType | null | undefined>(undefined),
		});

	}


	/** A version of a theme. */
	export interface ThemeVersion {
		VersionNumber?: number | null;
		Arn?: string;
		Description?: string;
		BaseThemeId?: string;
		CreatedTime?: Date;
		Configuration?: ThemeConfiguration;
		Errors?: Array<ThemeError>;
		Status?: ResourceStatus;
	}

	/** A version of a theme. */
	export interface ThemeVersionFormProperties {
		VersionNumber: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		BaseThemeId: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
	}
	export function CreateThemeVersionFormGroup() {
		return new FormGroup<ThemeVersionFormProperties>({
			VersionNumber: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			BaseThemeId: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
		});

	}


	/** The theme configuration. This configuration contains all of the display properties for a theme. */
	export interface ThemeConfiguration {
		DataColorPalette?: DataColorPalette;
		UIColorPalette?: UIColorPalette;
		Sheet?: SheetStyle;

		/** Determines the typography options. */
		Typography?: Typography;
	}

	/** The theme configuration. This configuration contains all of the display properties for a theme. */
	export interface ThemeConfigurationFormProperties {
	}
	export function CreateThemeConfigurationFormGroup() {
		return new FormGroup<ThemeConfigurationFormProperties>({
		});

	}


	/** Theme error. */
	export interface ThemeError {
		Type?: ThemeErrorType;
		Message?: string;
	}

	/** Theme error. */
	export interface ThemeErrorFormProperties {
		Type: FormControl<ThemeErrorType | null | undefined>,
		Message: FormControl<string | null | undefined>,
	}
	export function CreateThemeErrorFormGroup() {
		return new FormGroup<ThemeErrorFormProperties>({
			Type: new FormControl<ThemeErrorType | null | undefined>(undefined),
			Message: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum ThemeErrorType { INTERNAL_FAILURE = 0 }

	export enum ThemeType { QUICKSIGHT = 0, CUSTOM = 1, ALL = 2 }

	export interface DescribeThemeAliasResponse {
		ThemeAlias?: ThemeAlias;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeThemeAliasResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeThemeAliasResponseFormGroup() {
		return new FormGroup<DescribeThemeAliasResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeThemePermissionsResponse {
		ThemeId?: string;
		ThemeArn?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeThemePermissionsResponseFormProperties {
		ThemeId: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeThemePermissionsResponseFormGroup() {
		return new FormGroup<DescribeThemePermissionsResponseFormProperties>({
			ThemeId: new FormControl<string | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface DescribeTopicResponse {
		Arn?: string;
		TopicId?: string;
		Topic?: TopicDetails;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeTopicResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		TopicId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeTopicResponseFormGroup() {
		return new FormGroup<DescribeTopicResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			TopicId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A structure that describes the details of a topic, such as its name, description, and associated data sets. */
	export interface TopicDetails {
		Name?: string;
		Description?: string;
		DataSets?: Array<DatasetMetadata>;
	}

	/** A structure that describes the details of a topic, such as its name, description, and associated data sets. */
	export interface TopicDetailsFormProperties {
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateTopicDetailsFormGroup() {
		return new FormGroup<TopicDetailsFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeTopicPermissionsResponse {
		TopicId?: string;
		TopicArn?: string;
		Permissions?: Array<ResourcePermission>;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeTopicPermissionsResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		TopicArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTopicPermissionsResponseFormGroup() {
		return new FormGroup<DescribeTopicPermissionsResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			TopicArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DescribeTopicRefreshResponse {
		RefreshDetails?: TopicRefreshDetails;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeTopicRefreshResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeTopicRefreshResponseFormGroup() {
		return new FormGroup<DescribeTopicRefreshResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The details about the refresh of a topic. */
	export interface TopicRefreshDetails {
		RefreshArn?: string;
		RefreshId?: string;
		RefreshStatus?: TopicRefreshStatus;
	}

	/** The details about the refresh of a topic. */
	export interface TopicRefreshDetailsFormProperties {
		RefreshArn: FormControl<string | null | undefined>,
		RefreshId: FormControl<string | null | undefined>,
		RefreshStatus: FormControl<TopicRefreshStatus | null | undefined>,
	}
	export function CreateTopicRefreshDetailsFormGroup() {
		return new FormGroup<TopicRefreshDetailsFormProperties>({
			RefreshArn: new FormControl<string | null | undefined>(undefined),
			RefreshId: new FormControl<string | null | undefined>(undefined),
			RefreshStatus: new FormControl<TopicRefreshStatus | null | undefined>(undefined),
		});

	}

	export enum TopicRefreshStatus { INITIALIZED = 0, RUNNING = 1, FAILED = 2, COMPLETED = 3, CANCELLED = 4 }

	export interface DescribeTopicRefreshScheduleResponse {
		TopicId?: string;
		TopicArn?: string;
		DatasetArn?: string;
		RefreshSchedule?: TopicRefreshSchedule;
		Status?: number | null;
		RequestId?: string;
	}
	export interface DescribeTopicRefreshScheduleResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		TopicArn: FormControl<string | null | undefined>,
		DatasetArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateDescribeTopicRefreshScheduleResponseFormGroup() {
		return new FormGroup<DescribeTopicRefreshScheduleResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			TopicArn: new FormControl<string | null | undefined>(undefined),
			DatasetArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A structure that represents a topic refresh schedule. */
	export interface TopicRefreshSchedule {

		/** Required */
		IsEnabled: boolean;

		/** Required */
		BasedOnSpiceSchedule: boolean;
		StartingAt?: Date;
		Timezone?: string;
		RepeatAt?: string;
		TopicScheduleType?: TopicScheduleType;
	}

	/** A structure that represents a topic refresh schedule. */
	export interface TopicRefreshScheduleFormProperties {

		/** Required */
		IsEnabled: FormControl<boolean | null | undefined>,

		/** Required */
		BasedOnSpiceSchedule: FormControl<boolean | null | undefined>,
		StartingAt: FormControl<Date | null | undefined>,
		Timezone: FormControl<string | null | undefined>,
		RepeatAt: FormControl<string | null | undefined>,
		TopicScheduleType: FormControl<TopicScheduleType | null | undefined>,
	}
	export function CreateTopicRefreshScheduleFormGroup() {
		return new FormGroup<TopicRefreshScheduleFormProperties>({
			IsEnabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			BasedOnSpiceSchedule: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
			StartingAt: new FormControl<Date | null | undefined>(undefined),
			Timezone: new FormControl<string | null | undefined>(undefined),
			RepeatAt: new FormControl<string | null | undefined>(undefined),
			TopicScheduleType: new FormControl<TopicScheduleType | null | undefined>(undefined),
		});

	}

	export interface DescribeUserResponse {
		User?: User;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeUserResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeUserResponseFormGroup() {
		return new FormGroup<DescribeUserResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A registered user of Amazon QuickSight.  */
	export interface User {
		Arn?: string;
		UserName?: string;
		Email?: string;
		Role?: UserRole;
		IdentityType?: IdentityType;
		Active?: boolean | null;
		PrincipalId?: string;
		CustomPermissionsName?: string;
		ExternalLoginFederationProviderType?: string;
		ExternalLoginFederationProviderUrl?: string;
		ExternalLoginId?: string;
	}

	/** A registered user of Amazon QuickSight.  */
	export interface UserFormProperties {
		Arn: FormControl<string | null | undefined>,
		UserName: FormControl<string | null | undefined>,
		Email: FormControl<string | null | undefined>,
		Role: FormControl<UserRole | null | undefined>,
		IdentityType: FormControl<IdentityType | null | undefined>,
		Active: FormControl<boolean | null | undefined>,
		PrincipalId: FormControl<string | null | undefined>,
		CustomPermissionsName: FormControl<string | null | undefined>,
		ExternalLoginFederationProviderType: FormControl<string | null | undefined>,
		ExternalLoginFederationProviderUrl: FormControl<string | null | undefined>,
		ExternalLoginId: FormControl<string | null | undefined>,
	}
	export function CreateUserFormGroup() {
		return new FormGroup<UserFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			UserName: new FormControl<string | null | undefined>(undefined),
			Email: new FormControl<string | null | undefined>(undefined),
			Role: new FormControl<UserRole | null | undefined>(undefined),
			IdentityType: new FormControl<IdentityType | null | undefined>(undefined),
			Active: new FormControl<boolean | null | undefined>(undefined),
			PrincipalId: new FormControl<string | null | undefined>(undefined),
			CustomPermissionsName: new FormControl<string | null | undefined>(undefined),
			ExternalLoginFederationProviderType: new FormControl<string | null | undefined>(undefined),
			ExternalLoginFederationProviderUrl: new FormControl<string | null | undefined>(undefined),
			ExternalLoginId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum UserRole { ADMIN = 0, AUTHOR = 1, READER = 2, RESTRICTED_AUTHOR = 3, RESTRICTED_READER = 4 }

	export enum IdentityType { IAM = 0, QUICKSIGHT = 1 }

	export interface DescribeVPCConnectionResponse {
		VPCConnection?: VPCConnection;
		RequestId?: string;
		Status?: number | null;
	}
	export interface DescribeVPCConnectionResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateDescribeVPCConnectionResponseFormGroup() {
		return new FormGroup<DescribeVPCConnectionResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The structure of a VPC connection. */
	export interface VPCConnection {
		VPCConnectionId?: string;
		Arn?: string;
		Name?: string;
		VPCId?: string;
		SecurityGroupIds?: Array<string>;
		DnsResolvers?: Array<string>;
		Status?: VPCConnectionResourceStatus;
		AvailabilityStatus?: VPCConnectionAvailabilityStatus;
		NetworkInterfaces?: Array<NetworkInterface>;
		RoleArn?: string;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** The structure of a VPC connection. */
	export interface VPCConnectionFormProperties {
		VPCConnectionId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		VPCId: FormControl<string | null | undefined>,
		Status: FormControl<VPCConnectionResourceStatus | null | undefined>,
		AvailabilityStatus: FormControl<VPCConnectionAvailabilityStatus | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateVPCConnectionFormGroup() {
		return new FormGroup<VPCConnectionFormProperties>({
			VPCConnectionId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			VPCId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<VPCConnectionResourceStatus | null | undefined>(undefined),
			AvailabilityStatus: new FormControl<VPCConnectionAvailabilityStatus | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** The structure that contains information about a network interface. */
	export interface NetworkInterface {
		SubnetId?: string;
		AvailabilityZone?: string;
		ErrorMessage?: string;
		Status?: NetworkInterfaceStatus;
		NetworkInterfaceId?: string;
	}

	/** The structure that contains information about a network interface. */
	export interface NetworkInterfaceFormProperties {
		SubnetId: FormControl<string | null | undefined>,
		AvailabilityZone: FormControl<string | null | undefined>,
		ErrorMessage: FormControl<string | null | undefined>,
		Status: FormControl<NetworkInterfaceStatus | null | undefined>,
		NetworkInterfaceId: FormControl<string | null | undefined>,
	}
	export function CreateNetworkInterfaceFormGroup() {
		return new FormGroup<NetworkInterfaceFormProperties>({
			SubnetId: new FormControl<string | null | undefined>(undefined),
			AvailabilityZone: new FormControl<string | null | undefined>(undefined),
			ErrorMessage: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<NetworkInterfaceStatus | null | undefined>(undefined),
			NetworkInterfaceId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum NetworkInterfaceStatus { CREATING = 0, AVAILABLE = 1, CREATION_FAILED = 2, UPDATING = 3, UPDATE_FAILED = 4, DELETING = 5, DELETED = 6, DELETION_FAILED = 7, DELETION_SCHEDULED = 8, ATTACHMENT_FAILED_ROLLBACK_FAILED = 9 }

	export interface GenerateEmbedUrlForAnonymousUserResponse {

		/** Required */
		EmbedUrl: string;

		/** Required */
		Status: number;

		/** Required */
		RequestId: string;

		/** Required */
		AnonymousUserArn: string;
	}
	export interface GenerateEmbedUrlForAnonymousUserResponseFormProperties {

		/** Required */
		EmbedUrl: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<number | null | undefined>,

		/** Required */
		RequestId: FormControl<string | null | undefined>,

		/** Required */
		AnonymousUserArn: FormControl<string | null | undefined>,
	}
	export function CreateGenerateEmbedUrlForAnonymousUserResponseFormGroup() {
		return new FormGroup<GenerateEmbedUrlForAnonymousUserResponseFormProperties>({
			EmbedUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			RequestId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AnonymousUserArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The key-value pair used for the row-level security tags feature. */
	export interface SessionTag {

		/** Required */
		Key: string;

		/** Required */
		Value: string;
	}

	/** The key-value pair used for the row-level security tags feature. */
	export interface SessionTagFormProperties {

		/** Required */
		Key: FormControl<string | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateSessionTagFormGroup() {
		return new FormGroup<SessionTagFormProperties>({
			Key: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the dashboard that you want to embed. */
	export interface AnonymousUserDashboardEmbeddingConfiguration {

		/** Required */
		InitialDashboardId: string;
	}

	/** Information about the dashboard that you want to embed. */
	export interface AnonymousUserDashboardEmbeddingConfigurationFormProperties {

		/** Required */
		InitialDashboardId: FormControl<string | null | undefined>,
	}
	export function CreateAnonymousUserDashboardEmbeddingConfigurationFormGroup() {
		return new FormGroup<AnonymousUserDashboardEmbeddingConfigurationFormProperties>({
			InitialDashboardId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The experience that you are embedding. You can use this object to generate a url that embeds a visual into your application. */
	export interface AnonymousUserDashboardVisualEmbeddingConfiguration {

		/** Required */
		InitialDashboardVisualId: DashboardVisualId;
	}

	/** The experience that you are embedding. You can use this object to generate a url that embeds a visual into your application. */
	export interface AnonymousUserDashboardVisualEmbeddingConfigurationFormProperties {
	}
	export function CreateAnonymousUserDashboardVisualEmbeddingConfigurationFormGroup() {
		return new FormGroup<AnonymousUserDashboardVisualEmbeddingConfigurationFormProperties>({
		});

	}


	/** <p>A structure that contains the following elements:</p> <ul> <li> <p>The <code>DashboardId</code> of the dashboard that has the visual that you want to embed.</p> </li> <li> <p>The <code>SheetId</code> of the sheet that has the visual that you want to embed.</p> </li> <li> <p>The <code>VisualId</code> of the visual that you want to embed.</p> </li> </ul> <p>The <code>DashboardId</code>, <code>SheetId</code>, and <code>VisualId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console. You can also get the <code>DashboardId</code> with a <code>ListDashboards</code> API operation.</p> */
	export interface DashboardVisualId {

		/** Required */
		DashboardId: string;

		/** Required */
		SheetId: string;

		/** Required */
		VisualId: string;
	}

	/** <p>A structure that contains the following elements:</p> <ul> <li> <p>The <code>DashboardId</code> of the dashboard that has the visual that you want to embed.</p> </li> <li> <p>The <code>SheetId</code> of the sheet that has the visual that you want to embed.</p> </li> <li> <p>The <code>VisualId</code> of the visual that you want to embed.</p> </li> </ul> <p>The <code>DashboardId</code>, <code>SheetId</code>, and <code>VisualId</code> can be found in the <code>IDs for developers</code> section of the <code>Embed visual</code> pane of the visual's on-visual menu of the Amazon QuickSight console. You can also get the <code>DashboardId</code> with a <code>ListDashboards</code> API operation.</p> */
	export interface DashboardVisualIdFormProperties {

		/** Required */
		DashboardId: FormControl<string | null | undefined>,

		/** Required */
		SheetId: FormControl<string | null | undefined>,

		/** Required */
		VisualId: FormControl<string | null | undefined>,
	}
	export function CreateDashboardVisualIdFormGroup() {
		return new FormGroup<DashboardVisualIdFormProperties>({
			DashboardId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			SheetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VisualId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The settings that you want to use with the Q search bar. */
	export interface AnonymousUserQSearchBarEmbeddingConfiguration {

		/** Required */
		InitialTopicId: string;
	}

	/** The settings that you want to use with the Q search bar. */
	export interface AnonymousUserQSearchBarEmbeddingConfigurationFormProperties {

		/** Required */
		InitialTopicId: FormControl<string | null | undefined>,
	}
	export function CreateAnonymousUserQSearchBarEmbeddingConfigurationFormGroup() {
		return new FormGroup<AnonymousUserQSearchBarEmbeddingConfigurationFormProperties>({
			InitialTopicId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface SessionLifetimeInMinutesInvalidException {
	}
	export interface SessionLifetimeInMinutesInvalidExceptionFormProperties {
	}
	export function CreateSessionLifetimeInMinutesInvalidExceptionFormGroup() {
		return new FormGroup<SessionLifetimeInMinutesInvalidExceptionFormProperties>({
		});

	}

	export interface UnsupportedPricingPlanException {
	}
	export interface UnsupportedPricingPlanExceptionFormProperties {
	}
	export function CreateUnsupportedPricingPlanExceptionFormGroup() {
		return new FormGroup<UnsupportedPricingPlanExceptionFormProperties>({
		});

	}

	export interface GenerateEmbedUrlForRegisteredUserResponse {

		/** Required */
		EmbedUrl: string;

		/** Required */
		Status: number;

		/** Required */
		RequestId: string;
	}
	export interface GenerateEmbedUrlForRegisteredUserResponseFormProperties {

		/** Required */
		EmbedUrl: FormControl<string | null | undefined>,

		/** Required */
		Status: FormControl<number | null | undefined>,

		/** Required */
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateGenerateEmbedUrlForRegisteredUserResponseFormGroup() {
		return new FormGroup<GenerateEmbedUrlForRegisteredUserResponseFormProperties>({
			EmbedUrl: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Status: new FormControl<number | null | undefined>(undefined, [Validators.required]),
			RequestId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the dashboard you want to embed. */
	export interface RegisteredUserDashboardEmbeddingConfiguration {

		/** Required */
		InitialDashboardId: string;
		FeatureConfigurations?: RegisteredUserDashboardFeatureConfigurations;
	}

	/** Information about the dashboard you want to embed. */
	export interface RegisteredUserDashboardEmbeddingConfigurationFormProperties {

		/** Required */
		InitialDashboardId: FormControl<string | null | undefined>,
	}
	export function CreateRegisteredUserDashboardEmbeddingConfigurationFormGroup() {
		return new FormGroup<RegisteredUserDashboardEmbeddingConfigurationFormProperties>({
			InitialDashboardId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The feature configuration for an embedded dashboard. */
	export interface RegisteredUserDashboardFeatureConfigurations {
		StatePersistence?: StatePersistenceConfigurations;
		Bookmarks?: BookmarksConfigurations;
	}

	/** The feature configuration for an embedded dashboard. */
	export interface RegisteredUserDashboardFeatureConfigurationsFormProperties {
	}
	export function CreateRegisteredUserDashboardFeatureConfigurationsFormGroup() {
		return new FormGroup<RegisteredUserDashboardFeatureConfigurationsFormProperties>({
		});

	}


	/** The state perssitence configuration of an embedded dashboard. */
	export interface StatePersistenceConfigurations {

		/** Required */
		Enabled: boolean;
	}

	/** The state perssitence configuration of an embedded dashboard. */
	export interface StatePersistenceConfigurationsFormProperties {

		/** Required */
		Enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateStatePersistenceConfigurationsFormGroup() {
		return new FormGroup<StatePersistenceConfigurationsFormProperties>({
			Enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The bookmarks configuration of an embedded dashboard. */
	export interface BookmarksConfigurations {

		/** Required */
		Enabled: boolean;
	}

	/** The bookmarks configuration of an embedded dashboard. */
	export interface BookmarksConfigurationsFormProperties {

		/** Required */
		Enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateBookmarksConfigurationsFormGroup() {
		return new FormGroup<BookmarksConfigurationsFormProperties>({
			Enabled: new FormControl<boolean | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Information about the Amazon QuickSight console that you want to embed. */
	export interface RegisteredUserQuickSightConsoleEmbeddingConfiguration {
		InitialPath?: string;
		FeatureConfigurations?: RegisteredUserConsoleFeatureConfigurations;
	}

	/** Information about the Amazon QuickSight console that you want to embed. */
	export interface RegisteredUserQuickSightConsoleEmbeddingConfigurationFormProperties {
		InitialPath: FormControl<string | null | undefined>,
	}
	export function CreateRegisteredUserQuickSightConsoleEmbeddingConfigurationFormGroup() {
		return new FormGroup<RegisteredUserQuickSightConsoleEmbeddingConfigurationFormProperties>({
			InitialPath: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The feature configurations of an embedded Amazon QuickSight console. */
	export interface RegisteredUserConsoleFeatureConfigurations {
		StatePersistence?: StatePersistenceConfigurations;
	}

	/** The feature configurations of an embedded Amazon QuickSight console. */
	export interface RegisteredUserConsoleFeatureConfigurationsFormProperties {
	}
	export function CreateRegisteredUserConsoleFeatureConfigurationsFormGroup() {
		return new FormGroup<RegisteredUserConsoleFeatureConfigurationsFormProperties>({
		});

	}


	/** Information about the Q search bar embedding experience. */
	export interface RegisteredUserQSearchBarEmbeddingConfiguration {
		InitialTopicId?: string;
	}

	/** Information about the Q search bar embedding experience. */
	export interface RegisteredUserQSearchBarEmbeddingConfigurationFormProperties {
		InitialTopicId: FormControl<string | null | undefined>,
	}
	export function CreateRegisteredUserQSearchBarEmbeddingConfigurationFormGroup() {
		return new FormGroup<RegisteredUserQSearchBarEmbeddingConfigurationFormProperties>({
			InitialTopicId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The experience that you are embedding. You can use this object to generate a url that embeds a visual into your application. */
	export interface RegisteredUserDashboardVisualEmbeddingConfiguration {

		/** Required */
		InitialDashboardVisualId: DashboardVisualId;
	}

	/** The experience that you are embedding. You can use this object to generate a url that embeds a visual into your application. */
	export interface RegisteredUserDashboardVisualEmbeddingConfigurationFormProperties {
	}
	export function CreateRegisteredUserDashboardVisualEmbeddingConfigurationFormGroup() {
		return new FormGroup<RegisteredUserDashboardVisualEmbeddingConfigurationFormProperties>({
		});

	}

	export interface QuickSightUserNotFoundException {
	}
	export interface QuickSightUserNotFoundExceptionFormProperties {
	}
	export function CreateQuickSightUserNotFoundExceptionFormGroup() {
		return new FormGroup<QuickSightUserNotFoundExceptionFormProperties>({
		});

	}


	/** Output returned from the <code>GetDashboardEmbedUrl</code> operation. */
	export interface GetDashboardEmbedUrlResponse {
		EmbedUrl?: string;
		Status?: number | null;
		RequestId?: string;
	}

	/** Output returned from the <code>GetDashboardEmbedUrl</code> operation. */
	export interface GetDashboardEmbedUrlResponseFormProperties {
		EmbedUrl: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateGetDashboardEmbedUrlResponseFormGroup() {
		return new FormGroup<GetDashboardEmbedUrlResponseFormProperties>({
			EmbedUrl: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface DomainNotWhitelistedException {
	}
	export interface DomainNotWhitelistedExceptionFormProperties {
	}
	export function CreateDomainNotWhitelistedExceptionFormGroup() {
		return new FormGroup<DomainNotWhitelistedExceptionFormProperties>({
		});

	}

	export interface IdentityTypeNotSupportedException {
	}
	export interface IdentityTypeNotSupportedExceptionFormProperties {
	}
	export function CreateIdentityTypeNotSupportedExceptionFormGroup() {
		return new FormGroup<IdentityTypeNotSupportedExceptionFormProperties>({
		});

	}

	export interface GetSessionEmbedUrlResponse {
		EmbedUrl?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface GetSessionEmbedUrlResponseFormProperties {
		EmbedUrl: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateGetSessionEmbedUrlResponseFormGroup() {
		return new FormGroup<GetSessionEmbedUrlResponseFormProperties>({
			EmbedUrl: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListAnalysesResponse {
		AnalysisSummaryList?: Array<AnalysisSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListAnalysesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListAnalysesResponseFormGroup() {
		return new FormGroup<ListAnalysesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The summary metadata that describes an analysis. */
	export interface AnalysisSummary {
		Arn?: string;
		AnalysisId?: string;
		Name?: string;
		Status?: ResourceStatus;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** The summary metadata that describes an analysis. */
	export interface AnalysisSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		AnalysisId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateAnalysisSummaryFormGroup() {
		return new FormGroup<AnalysisSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListAssetBundleExportJobsResponse {
		AssetBundleExportJobSummaryList?: Array<AssetBundleExportJobSummary>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListAssetBundleExportJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListAssetBundleExportJobsResponseFormGroup() {
		return new FormGroup<ListAssetBundleExportJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A summary of the export job that includes details of the job's configuration and its current status. */
	export interface AssetBundleExportJobSummary {
		JobStatus?: AssetBundleExportJobStatus;
		Arn?: string;
		CreatedTime?: Date;
		AssetBundleExportJobId?: string;
		IncludeAllDependencies?: boolean | null;
		ExportFormat?: AssetBundleExportFormat;
	}

	/** A summary of the export job that includes details of the job's configuration and its current status. */
	export interface AssetBundleExportJobSummaryFormProperties {
		JobStatus: FormControl<AssetBundleExportJobStatus | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		AssetBundleExportJobId: FormControl<string | null | undefined>,
		IncludeAllDependencies: FormControl<boolean | null | undefined>,
		ExportFormat: FormControl<AssetBundleExportFormat | null | undefined>,
	}
	export function CreateAssetBundleExportJobSummaryFormGroup() {
		return new FormGroup<AssetBundleExportJobSummaryFormProperties>({
			JobStatus: new FormControl<AssetBundleExportJobStatus | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			AssetBundleExportJobId: new FormControl<string | null | undefined>(undefined),
			IncludeAllDependencies: new FormControl<boolean | null | undefined>(undefined),
			ExportFormat: new FormControl<AssetBundleExportFormat | null | undefined>(undefined),
		});

	}

	export interface ListAssetBundleImportJobsResponse {
		AssetBundleImportJobSummaryList?: Array<AssetBundleImportJobSummary>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListAssetBundleImportJobsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListAssetBundleImportJobsResponseFormGroup() {
		return new FormGroup<ListAssetBundleImportJobsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A summary of the import job that includes details of the requested job's configuration and its current status. */
	export interface AssetBundleImportJobSummary {
		JobStatus?: AssetBundleImportJobStatus;
		Arn?: string;
		CreatedTime?: Date;
		AssetBundleImportJobId?: string;
		FailureAction?: AssetBundleImportFailureAction;
	}

	/** A summary of the import job that includes details of the requested job's configuration and its current status. */
	export interface AssetBundleImportJobSummaryFormProperties {
		JobStatus: FormControl<AssetBundleImportJobStatus | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		AssetBundleImportJobId: FormControl<string | null | undefined>,
		FailureAction: FormControl<AssetBundleImportFailureAction | null | undefined>,
	}
	export function CreateAssetBundleImportJobSummaryFormGroup() {
		return new FormGroup<AssetBundleImportJobSummaryFormProperties>({
			JobStatus: new FormControl<AssetBundleImportJobStatus | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			AssetBundleImportJobId: new FormControl<string | null | undefined>(undefined),
			FailureAction: new FormControl<AssetBundleImportFailureAction | null | undefined>(undefined),
		});

	}

	export interface ListDashboardVersionsResponse {
		DashboardVersionSummaryList?: Array<DashboardVersionSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListDashboardVersionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListDashboardVersionsResponseFormGroup() {
		return new FormGroup<ListDashboardVersionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dashboard version summary. */
	export interface DashboardVersionSummary {
		Arn?: string;
		CreatedTime?: Date;
		VersionNumber?: number | null;
		Status?: ResourceStatus;
		SourceEntityArn?: string;
		Description?: string;
	}

	/** Dashboard version summary. */
	export interface DashboardVersionSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		VersionNumber: FormControl<number | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
		SourceEntityArn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateDashboardVersionSummaryFormGroup() {
		return new FormGroup<DashboardVersionSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			VersionNumber: new FormControl<number | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
			SourceEntityArn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListDashboardsResponse {
		DashboardSummaryList?: Array<DashboardSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListDashboardsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListDashboardsResponseFormGroup() {
		return new FormGroup<ListDashboardsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dashboard summary. */
	export interface DashboardSummary {
		Arn?: string;
		DashboardId?: string;
		Name?: string;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		PublishedVersionNumber?: number | null;
		LastPublishedTime?: Date;
	}

	/** Dashboard summary. */
	export interface DashboardSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		DashboardId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		PublishedVersionNumber: FormControl<number | null | undefined>,
		LastPublishedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDashboardSummaryFormGroup() {
		return new FormGroup<DashboardSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DashboardId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			PublishedVersionNumber: new FormControl<number | null | undefined>(undefined),
			LastPublishedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListDataSetsResponse {
		DataSetSummaries?: Array<DataSetSummary>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListDataSetsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListDataSetsResponseFormGroup() {
		return new FormGroup<ListDataSetsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** Dataset summary. */
	export interface DataSetSummary {
		Arn?: string;
		DataSetId?: string;
		Name?: string;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
		ImportMode?: DataSetImportMode;
		RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
		RowLevelPermissionTagConfigurationApplied?: boolean | null;
		ColumnLevelPermissionRulesApplied?: boolean | null;
	}

	/** Dataset summary. */
	export interface DataSetSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSetId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
		ImportMode: FormControl<DataSetImportMode | null | undefined>,
		RowLevelPermissionTagConfigurationApplied: FormControl<boolean | null | undefined>,
		ColumnLevelPermissionRulesApplied: FormControl<boolean | null | undefined>,
	}
	export function CreateDataSetSummaryFormGroup() {
		return new FormGroup<DataSetSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSetId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
			ImportMode: new FormControl<DataSetImportMode | null | undefined>(undefined),
			RowLevelPermissionTagConfigurationApplied: new FormControl<boolean | null | undefined>(undefined),
			ColumnLevelPermissionRulesApplied: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface ListDataSourcesResponse {
		DataSources?: Array<DataSource>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListDataSourcesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListDataSourcesResponseFormGroup() {
		return new FormGroup<ListDataSourcesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListFolderMembersResponse {
		Status?: number | null;
		FolderMemberList?: Array<MemberIdArnPair>;
		NextToken?: string;
		RequestId?: string;
	}
	export interface ListFolderMembersResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListFolderMembersResponseFormGroup() {
		return new FormGroup<ListFolderMembersResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** An object that consists of a member Amazon Resource Name (ARN) and a member ID. */
	export interface MemberIdArnPair {
		MemberId?: string;
		MemberArn?: string;
	}

	/** An object that consists of a member Amazon Resource Name (ARN) and a member ID. */
	export interface MemberIdArnPairFormProperties {
		MemberId: FormControl<string | null | undefined>,
		MemberArn: FormControl<string | null | undefined>,
	}
	export function CreateMemberIdArnPairFormGroup() {
		return new FormGroup<MemberIdArnPairFormProperties>({
			MemberId: new FormControl<string | null | undefined>(undefined),
			MemberArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListFoldersResponse {
		Status?: number | null;
		FolderSummaryList?: Array<FolderSummary>;
		NextToken?: string;
		RequestId?: string;
	}
	export interface ListFoldersResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListFoldersResponseFormGroup() {
		return new FormGroup<ListFoldersResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of information about an existing Amazon QuickSight folder.  */
	export interface FolderSummary {
		Arn?: string;
		FolderId?: string;
		Name?: string;
		FolderType?: FolderType;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** A summary of information about an existing Amazon QuickSight folder.  */
	export interface FolderSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		FolderId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		FolderType: FormControl<FolderType | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateFolderSummaryFormGroup() {
		return new FormGroup<FolderSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			FolderId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			FolderType: new FormControl<FolderType | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListGroupMembershipsResponse {
		GroupMemberList?: Array<GroupMember>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListGroupMembershipsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListGroupMembershipsResponseFormGroup() {
		return new FormGroup<ListGroupMembershipsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListGroupsResponse {
		GroupList?: Array<Group>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListGroupsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListGroupsResponseFormGroup() {
		return new FormGroup<ListGroupsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListIAMPolicyAssignmentsResponse {
		IAMPolicyAssignments?: Array<IAMPolicyAssignmentSummary>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListIAMPolicyAssignmentsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListIAMPolicyAssignmentsResponseFormGroup() {
		return new FormGroup<ListIAMPolicyAssignmentsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** IAM policy assignment summary. */
	export interface IAMPolicyAssignmentSummary {
		AssignmentName?: string;
		AssignmentStatus?: AssignmentStatus;
	}

	/** IAM policy assignment summary. */
	export interface IAMPolicyAssignmentSummaryFormProperties {
		AssignmentName: FormControl<string | null | undefined>,
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,
	}
	export function CreateIAMPolicyAssignmentSummaryFormGroup() {
		return new FormGroup<IAMPolicyAssignmentSummaryFormProperties>({
			AssignmentName: new FormControl<string | null | undefined>(undefined),
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined),
		});

	}

	export interface ListIAMPolicyAssignmentsForUserResponse {
		ActiveAssignments?: Array<ActiveIAMPolicyAssignment>;
		RequestId?: string;
		NextToken?: string;
		Status?: number | null;
	}
	export interface ListIAMPolicyAssignmentsForUserResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListIAMPolicyAssignmentsForUserResponseFormGroup() {
		return new FormGroup<ListIAMPolicyAssignmentsForUserResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The active Identity and Access Management (IAM) policy assignment. */
	export interface ActiveIAMPolicyAssignment {
		AssignmentName?: string;
		PolicyArn?: string;
	}

	/** The active Identity and Access Management (IAM) policy assignment. */
	export interface ActiveIAMPolicyAssignmentFormProperties {
		AssignmentName: FormControl<string | null | undefined>,
		PolicyArn: FormControl<string | null | undefined>,
	}
	export function CreateActiveIAMPolicyAssignmentFormGroup() {
		return new FormGroup<ActiveIAMPolicyAssignmentFormProperties>({
			AssignmentName: new FormControl<string | null | undefined>(undefined),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListIngestionsResponse {
		Ingestions?: Array<Ingestion>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListIngestionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListIngestionsResponseFormGroup() {
		return new FormGroup<ListIngestionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListNamespacesResponse {
		Namespaces?: Array<NamespaceInfoV2>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListNamespacesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListNamespacesResponseFormGroup() {
		return new FormGroup<ListNamespacesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListRefreshSchedulesResponse {
		RefreshSchedules?: Array<string>;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListRefreshSchedulesResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListRefreshSchedulesResponseFormGroup() {
		return new FormGroup<ListRefreshSchedulesResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTagsForResourceResponse {
		Tags?: Array<Tag>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListTagsForResourceResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListTagsForResourceResponseFormGroup() {
		return new FormGroup<ListTagsForResourceResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListTemplateAliasesResponse {
		TemplateAliasList?: Array<TemplateAlias>;
		Status?: number | null;
		RequestId?: string;
		NextToken?: string;
	}
	export interface ListTemplateAliasesResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListTemplateAliasesResponseFormGroup() {
		return new FormGroup<ListTemplateAliasesResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTemplateVersionsResponse {
		TemplateVersionSummaryList?: Array<TemplateVersionSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListTemplateVersionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListTemplateVersionsResponseFormGroup() {
		return new FormGroup<ListTemplateVersionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The template version. */
	export interface TemplateVersionSummary {
		Arn?: string;
		VersionNumber?: number | null;
		CreatedTime?: Date;
		Status?: ResourceStatus;
		Description?: string;
	}

	/** The template version. */
	export interface TemplateVersionSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		VersionNumber: FormControl<number | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateTemplateVersionSummaryFormGroup() {
		return new FormGroup<TemplateVersionSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VersionNumber: new FormControl<number | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTemplatesResponse {
		TemplateSummaryList?: Array<TemplateSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListTemplatesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListTemplatesResponseFormGroup() {
		return new FormGroup<ListTemplatesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The template summary. */
	export interface TemplateSummary {
		Arn?: string;
		TemplateId?: string;
		Name?: string;
		LatestVersionNumber?: number | null;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** The template summary. */
	export interface TemplateSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		TemplateId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		LatestVersionNumber: FormControl<number | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateTemplateSummaryFormGroup() {
		return new FormGroup<TemplateSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			TemplateId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			LatestVersionNumber: new FormControl<number | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListThemeAliasesResponse {
		ThemeAliasList?: Array<ThemeAlias>;
		Status?: number | null;
		RequestId?: string;
		NextToken?: string;
	}
	export interface ListThemeAliasesResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
	}
	export function CreateListThemeAliasesResponseFormGroup() {
		return new FormGroup<ListThemeAliasesResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListThemeVersionsResponse {
		ThemeVersionSummaryList?: Array<ThemeVersionSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListThemeVersionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListThemeVersionsResponseFormGroup() {
		return new FormGroup<ListThemeVersionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The theme version. */
	export interface ThemeVersionSummary {
		VersionNumber?: number | null;
		Arn?: string;
		Description?: string;
		CreatedTime?: Date;
		Status?: ResourceStatus;
	}

	/** The theme version. */
	export interface ThemeVersionSummaryFormProperties {
		VersionNumber: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		Status: FormControl<ResourceStatus | null | undefined>,
	}
	export function CreateThemeVersionSummaryFormGroup() {
		return new FormGroup<ThemeVersionSummaryFormProperties>({
			VersionNumber: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			Status: new FormControl<ResourceStatus | null | undefined>(undefined),
		});

	}

	export interface ListThemesResponse {
		ThemeSummaryList?: Array<ThemeSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListThemesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListThemesResponseFormGroup() {
		return new FormGroup<ListThemesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** The theme summary. */
	export interface ThemeSummary {
		Arn?: string;
		Name?: string;
		ThemeId?: string;
		LatestVersionNumber?: number | null;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** The theme summary. */
	export interface ThemeSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		ThemeId: FormControl<string | null | undefined>,
		LatestVersionNumber: FormControl<number | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateThemeSummaryFormGroup() {
		return new FormGroup<ThemeSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			ThemeId: new FormControl<string | null | undefined>(undefined),
			LatestVersionNumber: new FormControl<number | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface ListTopicRefreshSchedulesResponse {
		TopicId?: string;
		TopicArn?: string;
		RefreshSchedules?: Array<TopicRefreshScheduleSummary>;
		Status?: number | null;
		RequestId?: string;
	}
	export interface ListTopicRefreshSchedulesResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		TopicArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateListTopicRefreshSchedulesResponseFormGroup() {
		return new FormGroup<ListTopicRefreshSchedulesResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			TopicArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A summary of the refresh schedule details for a dataset. */
	export interface TopicRefreshScheduleSummary {
		DatasetId?: string;
		DatasetArn?: string;
		DatasetName?: string;
		RefreshSchedule?: TopicRefreshSchedule;
	}

	/** A summary of the refresh schedule details for a dataset. */
	export interface TopicRefreshScheduleSummaryFormProperties {
		DatasetId: FormControl<string | null | undefined>,
		DatasetArn: FormControl<string | null | undefined>,
		DatasetName: FormControl<string | null | undefined>,
	}
	export function CreateTopicRefreshScheduleSummaryFormGroup() {
		return new FormGroup<TopicRefreshScheduleSummaryFormProperties>({
			DatasetId: new FormControl<string | null | undefined>(undefined),
			DatasetArn: new FormControl<string | null | undefined>(undefined),
			DatasetName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListTopicsResponse {
		TopicsSummaries?: Array<TopicSummary>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListTopicsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListTopicsResponseFormGroup() {
		return new FormGroup<ListTopicsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A topic summary. */
	export interface TopicSummary {
		Arn?: string;
		TopicId?: string;
		Name?: string;
	}

	/** A topic summary. */
	export interface TopicSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		TopicId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateTopicSummaryFormGroup() {
		return new FormGroup<TopicSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			TopicId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface ListUserGroupsResponse {
		GroupList?: Array<Group>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListUserGroupsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListUserGroupsResponseFormGroup() {
		return new FormGroup<ListUserGroupsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListUsersResponse {
		UserList?: Array<User>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListUsersResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListUsersResponseFormGroup() {
		return new FormGroup<ListUsersResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface ListVPCConnectionsResponse {
		VPCConnectionSummaries?: Array<VPCConnectionSummary>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface ListVPCConnectionsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateListVPCConnectionsResponseFormGroup() {
		return new FormGroup<ListVPCConnectionsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** The summary metadata that describes a VPC connection. */
	export interface VPCConnectionSummary {
		VPCConnectionId?: string;
		Arn?: string;
		Name?: string;
		VPCId?: string;
		SecurityGroupIds?: Array<string>;
		DnsResolvers?: Array<string>;
		Status?: VPCConnectionResourceStatus;
		AvailabilityStatus?: VPCConnectionAvailabilityStatus;
		NetworkInterfaces?: Array<NetworkInterface>;
		RoleArn?: string;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** The summary metadata that describes a VPC connection. */
	export interface VPCConnectionSummaryFormProperties {
		VPCConnectionId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		VPCId: FormControl<string | null | undefined>,
		Status: FormControl<VPCConnectionResourceStatus | null | undefined>,
		AvailabilityStatus: FormControl<VPCConnectionAvailabilityStatus | null | undefined>,
		RoleArn: FormControl<string | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateVPCConnectionSummaryFormGroup() {
		return new FormGroup<VPCConnectionSummaryFormProperties>({
			VPCConnectionId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			VPCId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<VPCConnectionResourceStatus | null | undefined>(undefined),
			AvailabilityStatus: new FormControl<VPCConnectionAvailabilityStatus | null | undefined>(undefined),
			RoleArn: new FormControl<string | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}

	export interface PutDataSetRefreshPropertiesResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface PutDataSetRefreshPropertiesResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreatePutDataSetRefreshPropertiesResponseFormGroup() {
		return new FormGroup<PutDataSetRefreshPropertiesResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface RegisterUserResponse {
		User?: User;
		UserInvitationUrl?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface RegisterUserResponseFormProperties {
		UserInvitationUrl: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateRegisterUserResponseFormGroup() {
		return new FormGroup<RegisterUserResponseFormProperties>({
			UserInvitationUrl: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface RestoreAnalysisResponse {
		Status?: number | null;
		Arn?: string;
		AnalysisId?: string;
		RequestId?: string;
	}
	export interface RestoreAnalysisResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		AnalysisId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateRestoreAnalysisResponseFormGroup() {
		return new FormGroup<RestoreAnalysisResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchAnalysesResponse {
		AnalysisSummaryList?: Array<AnalysisSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface SearchAnalysesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateSearchAnalysesResponseFormGroup() {
		return new FormGroup<SearchAnalysesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A filter that you apply when searching for one or more analyses. */
	export interface AnalysisSearchFilter {
		Operator?: FilterOperator;
		Name?: AnalysisFilterAttribute;
		Value?: string;
	}

	/** A filter that you apply when searching for one or more analyses. */
	export interface AnalysisSearchFilterFormProperties {
		Operator: FormControl<FilterOperator | null | undefined>,
		Name: FormControl<AnalysisFilterAttribute | null | undefined>,
		Value: FormControl<string | null | undefined>,
	}
	export function CreateAnalysisSearchFilterFormGroup() {
		return new FormGroup<AnalysisSearchFilterFormProperties>({
			Operator: new FormControl<FilterOperator | null | undefined>(undefined),
			Name: new FormControl<AnalysisFilterAttribute | null | undefined>(undefined),
			Value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum FilterOperator { StringEquals = 0, StringLike = 1 }

	export enum AnalysisFilterAttribute { QUICKSIGHT_USER = 0, QUICKSIGHT_VIEWER_OR_OWNER = 1, DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 2, QUICKSIGHT_OWNER = 3, DIRECT_QUICKSIGHT_OWNER = 4, DIRECT_QUICKSIGHT_SOLE_OWNER = 5, ANALYSIS_NAME = 6 }

	export interface SearchDashboardsResponse {
		DashboardSummaryList?: Array<DashboardSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface SearchDashboardsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateSearchDashboardsResponseFormGroup() {
		return new FormGroup<SearchDashboardsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A filter that you apply when searching for dashboards.  */
	export interface DashboardSearchFilter {

		/** Required */
		Operator: FilterOperator;
		Name?: DashboardFilterAttribute;
		Value?: string;
	}

	/** A filter that you apply when searching for dashboards.  */
	export interface DashboardSearchFilterFormProperties {

		/** Required */
		Operator: FormControl<FilterOperator | null | undefined>,
		Name: FormControl<DashboardFilterAttribute | null | undefined>,
		Value: FormControl<string | null | undefined>,
	}
	export function CreateDashboardSearchFilterFormGroup() {
		return new FormGroup<DashboardSearchFilterFormProperties>({
			Operator: new FormControl<FilterOperator | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<DashboardFilterAttribute | null | undefined>(undefined),
			Value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum DashboardFilterAttribute { QUICKSIGHT_USER = 0, QUICKSIGHT_VIEWER_OR_OWNER = 1, DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 2, QUICKSIGHT_OWNER = 3, DIRECT_QUICKSIGHT_OWNER = 4, DIRECT_QUICKSIGHT_SOLE_OWNER = 5, DASHBOARD_NAME = 6 }

	export interface SearchDataSetsResponse {
		DataSetSummaries?: Array<DataSetSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface SearchDataSetsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateSearchDataSetsResponseFormGroup() {
		return new FormGroup<SearchDataSetsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A filter that you apply when searching for datasets. */
	export interface DataSetSearchFilter {

		/** Required */
		Operator: FilterOperator;

		/** Required */
		Name: DataSetFilterAttribute;

		/** Required */
		Value: string;
	}

	/** A filter that you apply when searching for datasets. */
	export interface DataSetSearchFilterFormProperties {

		/** Required */
		Operator: FormControl<FilterOperator | null | undefined>,

		/** Required */
		Name: FormControl<DataSetFilterAttribute | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateDataSetSearchFilterFormGroup() {
		return new FormGroup<DataSetSearchFilterFormProperties>({
			Operator: new FormControl<FilterOperator | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<DataSetFilterAttribute | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DataSetFilterAttribute { QUICKSIGHT_VIEWER_OR_OWNER = 0, QUICKSIGHT_OWNER = 1, DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 2, DIRECT_QUICKSIGHT_OWNER = 3, DIRECT_QUICKSIGHT_SOLE_OWNER = 4, DATASET_NAME = 5 }

	export interface SearchDataSourcesResponse {
		DataSourceSummaries?: Array<DataSourceSummary>;
		NextToken?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface SearchDataSourcesResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateSearchDataSourcesResponseFormGroup() {
		return new FormGroup<SearchDataSourcesResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A <code>DataSourceSummary</code> object that returns a summary of a data source. */
	export interface DataSourceSummary {
		Arn?: string;
		DataSourceId?: string;
		Name?: string;
		Type?: DataSourceType;
		CreatedTime?: Date;
		LastUpdatedTime?: Date;
	}

	/** A <code>DataSourceSummary</code> object that returns a summary of a data source. */
	export interface DataSourceSummaryFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSourceId: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
		Type: FormControl<DataSourceType | null | undefined>,
		CreatedTime: FormControl<Date | null | undefined>,
		LastUpdatedTime: FormControl<Date | null | undefined>,
	}
	export function CreateDataSourceSummaryFormGroup() {
		return new FormGroup<DataSourceSummaryFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSourceId: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
			Type: new FormControl<DataSourceType | null | undefined>(undefined),
			CreatedTime: new FormControl<Date | null | undefined>(undefined),
			LastUpdatedTime: new FormControl<Date | null | undefined>(undefined),
		});

	}


	/** A filter that you apply when searching for data sources. */
	export interface DataSourceSearchFilter {

		/** Required */
		Operator: FilterOperator;

		/** Required */
		Name: DataSourceFilterAttribute;

		/** Required */
		Value: string;
	}

	/** A filter that you apply when searching for data sources. */
	export interface DataSourceSearchFilterFormProperties {

		/** Required */
		Operator: FormControl<FilterOperator | null | undefined>,

		/** Required */
		Name: FormControl<DataSourceFilterAttribute | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateDataSourceSearchFilterFormGroup() {
		return new FormGroup<DataSourceSearchFilterFormProperties>({
			Operator: new FormControl<FilterOperator | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<DataSourceFilterAttribute | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DataSourceFilterAttribute { DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 0, DIRECT_QUICKSIGHT_OWNER = 1, DIRECT_QUICKSIGHT_SOLE_OWNER = 2, DATASOURCE_NAME = 3 }

	export interface SearchFoldersResponse {
		Status?: number | null;
		FolderSummaryList?: Array<FolderSummary>;
		NextToken?: string;
		RequestId?: string;
	}
	export interface SearchFoldersResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateSearchFoldersResponseFormGroup() {
		return new FormGroup<SearchFoldersResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** A filter to use to search an Amazon QuickSight folder. */
	export interface FolderSearchFilter {
		Operator?: FilterOperator;
		Name?: FolderFilterAttribute;
		Value?: string;
	}

	/** A filter to use to search an Amazon QuickSight folder. */
	export interface FolderSearchFilterFormProperties {
		Operator: FormControl<FilterOperator | null | undefined>,
		Name: FormControl<FolderFilterAttribute | null | undefined>,
		Value: FormControl<string | null | undefined>,
	}
	export function CreateFolderSearchFilterFormGroup() {
		return new FormGroup<FolderSearchFilterFormProperties>({
			Operator: new FormControl<FilterOperator | null | undefined>(undefined),
			Name: new FormControl<FolderFilterAttribute | null | undefined>(undefined),
			Value: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum FolderFilterAttribute { PARENT_FOLDER_ARN = 0, DIRECT_QUICKSIGHT_OWNER = 1, DIRECT_QUICKSIGHT_SOLE_OWNER = 2, DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 3, QUICKSIGHT_OWNER = 4, QUICKSIGHT_VIEWER_OR_OWNER = 5, FOLDER_NAME = 6 }

	export interface InvalidRequestException {
	}
	export interface InvalidRequestExceptionFormProperties {
	}
	export function CreateInvalidRequestExceptionFormGroup() {
		return new FormGroup<InvalidRequestExceptionFormProperties>({
		});

	}

	export interface SearchGroupsResponse {
		GroupList?: Array<Group>;
		NextToken?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface SearchGroupsResponseFormProperties {
		NextToken: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateSearchGroupsResponseFormGroup() {
		return new FormGroup<SearchGroupsResponseFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A <code>GroupSearchFilter</code> object that you want to apply to your search. */
	export interface GroupSearchFilter {

		/** Required */
		Operator: GroupFilterOperator;

		/** Required */
		Name: GroupFilterAttribute;

		/** Required */
		Value: string;
	}

	/** A <code>GroupSearchFilter</code> object that you want to apply to your search. */
	export interface GroupSearchFilterFormProperties {

		/** Required */
		Operator: FormControl<GroupFilterOperator | null | undefined>,

		/** Required */
		Name: FormControl<GroupFilterAttribute | null | undefined>,

		/** Required */
		Value: FormControl<string | null | undefined>,
	}
	export function CreateGroupSearchFilterFormGroup() {
		return new FormGroup<GroupSearchFilterFormProperties>({
			Operator: new FormControl<GroupFilterOperator | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<GroupFilterAttribute | null | undefined>(undefined, [Validators.required]),
			Value: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum GroupFilterOperator { StartsWith = 0 }

	export enum GroupFilterAttribute { GROUP_NAME = 0 }

	export interface StartAssetBundleExportJobResponse {
		Arn?: string;
		AssetBundleExportJobId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface StartAssetBundleExportJobResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		AssetBundleExportJobId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateStartAssetBundleExportJobResponseFormGroup() {
		return new FormGroup<StartAssetBundleExportJobResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AssetBundleExportJobId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface StartAssetBundleImportJobResponse {
		Arn?: string;
		AssetBundleImportJobId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface StartAssetBundleImportJobResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		AssetBundleImportJobId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateStartAssetBundleImportJobResponseFormGroup() {
		return new FormGroup<StartAssetBundleImportJobResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AssetBundleImportJobId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface StartDashboardSnapshotJobResponse {
		Arn?: string;
		SnapshotJobId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface StartDashboardSnapshotJobResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		SnapshotJobId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateStartDashboardSnapshotJobResponseFormGroup() {
		return new FormGroup<StartDashboardSnapshotJobResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			SnapshotJobId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}


	/** A structure that contains information on the anonymous user configuration. */
	export interface SnapshotAnonymousUser {
		RowLevelPermissionTags?: Array<SessionTag>;
	}

	/** A structure that contains information on the anonymous user configuration. */
	export interface SnapshotAnonymousUserFormProperties {
	}
	export function CreateSnapshotAnonymousUserFormGroup() {
		return new FormGroup<SnapshotAnonymousUserFormProperties>({
		});

	}

	export interface TagResourceResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface TagResourceResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateTagResourceResponseFormGroup() {
		return new FormGroup<TagResourceResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UntagResourceResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface UntagResourceResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUntagResourceResponseFormGroup() {
		return new FormGroup<UntagResourceResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateAccountCustomizationResponse {
		Arn?: string;
		AwsAccountId?: string;
		Namespace?: string;
		AccountCustomization?: AccountCustomization;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateAccountCustomizationResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		AwsAccountId: FormControl<string | null | undefined>,
		Namespace: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateAccountCustomizationResponseFormGroup() {
		return new FormGroup<UpdateAccountCustomizationResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			Namespace: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateAccountSettingsResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateAccountSettingsResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateAccountSettingsResponseFormGroup() {
		return new FormGroup<UpdateAccountSettingsResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateAnalysisResponse {
		Arn?: string;
		AnalysisId?: string;
		UpdateStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateAnalysisResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		AnalysisId: FormControl<string | null | undefined>,
		UpdateStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateAnalysisResponseFormGroup() {
		return new FormGroup<UpdateAnalysisResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			UpdateStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateAnalysisPermissionsResponse {
		AnalysisArn?: string;
		AnalysisId?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateAnalysisPermissionsResponseFormProperties {
		AnalysisArn: FormControl<string | null | undefined>,
		AnalysisId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateAnalysisPermissionsResponseFormGroup() {
		return new FormGroup<UpdateAnalysisPermissionsResponseFormProperties>({
			AnalysisArn: new FormControl<string | null | undefined>(undefined),
			AnalysisId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateDashboardResponse {
		Arn?: string;
		VersionArn?: string;
		DashboardId?: string;
		CreationStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateDashboardResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		VersionArn: FormControl<string | null | undefined>,
		DashboardId: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDashboardResponseFormGroup() {
		return new FormGroup<UpdateDashboardResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VersionArn: new FormControl<string | null | undefined>(undefined),
			DashboardId: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDashboardPermissionsResponse {
		DashboardArn?: string;
		DashboardId?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
		LinkSharingConfiguration?: LinkSharingConfiguration;
	}
	export interface UpdateDashboardPermissionsResponseFormProperties {
		DashboardArn: FormControl<string | null | undefined>,
		DashboardId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateDashboardPermissionsResponseFormGroup() {
		return new FormGroup<UpdateDashboardPermissionsResponseFormProperties>({
			DashboardArn: new FormControl<string | null | undefined>(undefined),
			DashboardId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateDashboardPublishedVersionResponse {
		DashboardId?: string;
		DashboardArn?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateDashboardPublishedVersionResponseFormProperties {
		DashboardId: FormControl<string | null | undefined>,
		DashboardArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDashboardPublishedVersionResponseFormGroup() {
		return new FormGroup<UpdateDashboardPublishedVersionResponseFormProperties>({
			DashboardId: new FormControl<string | null | undefined>(undefined),
			DashboardArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSetResponse {
		Arn?: string;
		DataSetId?: string;
		IngestionArn?: string;
		IngestionId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateDataSetResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSetId: FormControl<string | null | undefined>,
		IngestionArn: FormControl<string | null | undefined>,
		IngestionId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateDataSetResponseFormGroup() {
		return new FormGroup<UpdateDataSetResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSetId: new FormControl<string | null | undefined>(undefined),
			IngestionArn: new FormControl<string | null | undefined>(undefined),
			IngestionId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSetPermissionsResponse {
		DataSetArn?: string;
		DataSetId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateDataSetPermissionsResponseFormProperties {
		DataSetArn: FormControl<string | null | undefined>,
		DataSetId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateDataSetPermissionsResponseFormGroup() {
		return new FormGroup<UpdateDataSetPermissionsResponseFormProperties>({
			DataSetArn: new FormControl<string | null | undefined>(undefined),
			DataSetId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSourceResponse {
		Arn?: string;
		DataSourceId?: string;
		UpdateStatus?: ResourceStatus;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateDataSourceResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		DataSourceId: FormControl<string | null | undefined>,
		UpdateStatus: FormControl<ResourceStatus | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateDataSourceResponseFormGroup() {
		return new FormGroup<UpdateDataSourceResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			DataSourceId: new FormControl<string | null | undefined>(undefined),
			UpdateStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSourcePermissionsResponse {
		DataSourceArn?: string;
		DataSourceId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateDataSourcePermissionsResponseFormProperties {
		DataSourceArn: FormControl<string | null | undefined>,
		DataSourceId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateDataSourcePermissionsResponseFormGroup() {
		return new FormGroup<UpdateDataSourcePermissionsResponseFormProperties>({
			DataSourceArn: new FormControl<string | null | undefined>(undefined),
			DataSourceId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateFolderResponse {
		Status?: number | null;
		Arn?: string;
		FolderId?: string;
		RequestId?: string;
	}
	export interface UpdateFolderResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		FolderId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateFolderResponseFormGroup() {
		return new FormGroup<UpdateFolderResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			FolderId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateFolderPermissionsResponse {
		Status?: number | null;
		Arn?: string;
		FolderId?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
	}
	export interface UpdateFolderPermissionsResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		FolderId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateFolderPermissionsResponseFormGroup() {
		return new FormGroup<UpdateFolderPermissionsResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			FolderId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateGroupResponse {
		Group?: Group;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateGroupResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateGroupResponseFormGroup() {
		return new FormGroup<UpdateGroupResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateIAMPolicyAssignmentResponse {
		AssignmentName?: string;
		AssignmentId?: string;
		PolicyArn?: string;
		Identities?: IdentityMap;
		AssignmentStatus?: AssignmentStatus;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateIAMPolicyAssignmentResponseFormProperties {
		AssignmentName: FormControl<string | null | undefined>,
		AssignmentId: FormControl<string | null | undefined>,
		PolicyArn: FormControl<string | null | undefined>,
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateIAMPolicyAssignmentResponseFormGroup() {
		return new FormGroup<UpdateIAMPolicyAssignmentResponseFormProperties>({
			AssignmentName: new FormControl<string | null | undefined>(undefined),
			AssignmentId: new FormControl<string | null | undefined>(undefined),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateIpRestrictionResponse {
		AwsAccountId?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateIpRestrictionResponseFormProperties {
		AwsAccountId: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateIpRestrictionResponseFormGroup() {
		return new FormGroup<UpdateIpRestrictionResponseFormProperties>({
			AwsAccountId: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdatePublicSharingSettingsResponse {
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdatePublicSharingSettingsResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdatePublicSharingSettingsResponseFormGroup() {
		return new FormGroup<UpdatePublicSharingSettingsResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateRefreshScheduleResponse {
		Status?: number | null;
		RequestId?: string;
		ScheduleId?: string;
		Arn?: string;
	}
	export interface UpdateRefreshScheduleResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		ScheduleId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateRefreshScheduleResponseFormGroup() {
		return new FormGroup<UpdateRefreshScheduleResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			ScheduleId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTemplateResponse {
		TemplateId?: string;
		Arn?: string;
		VersionArn?: string;
		CreationStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateTemplateResponseFormProperties {
		TemplateId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		VersionArn: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTemplateResponseFormGroup() {
		return new FormGroup<UpdateTemplateResponseFormProperties>({
			TemplateId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			VersionArn: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTemplateAliasResponse {
		TemplateAlias?: TemplateAlias;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateTemplateAliasResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTemplateAliasResponseFormGroup() {
		return new FormGroup<UpdateTemplateAliasResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTemplatePermissionsResponse {
		TemplateId?: string;
		TemplateArn?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateTemplatePermissionsResponseFormProperties {
		TemplateId: FormControl<string | null | undefined>,
		TemplateArn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateTemplatePermissionsResponseFormGroup() {
		return new FormGroup<UpdateTemplatePermissionsResponseFormProperties>({
			TemplateId: new FormControl<string | null | undefined>(undefined),
			TemplateArn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateThemeResponse {
		ThemeId?: string;
		Arn?: string;
		VersionArn?: string;
		CreationStatus?: ResourceStatus;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateThemeResponseFormProperties {
		ThemeId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		VersionArn: FormControl<string | null | undefined>,
		CreationStatus: FormControl<ResourceStatus | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateThemeResponseFormGroup() {
		return new FormGroup<UpdateThemeResponseFormProperties>({
			ThemeId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			VersionArn: new FormControl<string | null | undefined>(undefined),
			CreationStatus: new FormControl<ResourceStatus | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateThemeAliasResponse {
		ThemeAlias?: ThemeAlias;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateThemeAliasResponseFormProperties {
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateThemeAliasResponseFormGroup() {
		return new FormGroup<UpdateThemeAliasResponseFormProperties>({
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateThemePermissionsResponse {
		ThemeId?: string;
		ThemeArn?: string;
		Permissions?: Array<ResourcePermission>;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateThemePermissionsResponseFormProperties {
		ThemeId: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateThemePermissionsResponseFormGroup() {
		return new FormGroup<UpdateThemePermissionsResponseFormProperties>({
			ThemeId: new FormControl<string | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateTopicResponse {
		TopicId?: string;
		Arn?: string;
		RefreshArn?: string;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateTopicResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		RefreshArn: FormControl<string | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateTopicResponseFormGroup() {
		return new FormGroup<UpdateTopicResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			RefreshArn: new FormControl<string | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateTopicPermissionsResponse {
		TopicId?: string;
		TopicArn?: string;
		Permissions?: Array<ResourcePermission>;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateTopicPermissionsResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		TopicArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTopicPermissionsResponseFormGroup() {
		return new FormGroup<UpdateTopicPermissionsResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			TopicArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTopicRefreshScheduleResponse {
		TopicId?: string;
		TopicArn?: string;
		DatasetArn?: string;
		Status?: number | null;
		RequestId?: string;
	}
	export interface UpdateTopicRefreshScheduleResponseFormProperties {
		TopicId: FormControl<string | null | undefined>,
		TopicArn: FormControl<string | null | undefined>,
		DatasetArn: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTopicRefreshScheduleResponseFormGroup() {
		return new FormGroup<UpdateTopicRefreshScheduleResponseFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined),
			TopicArn: new FormControl<string | null | undefined>(undefined),
			DatasetArn: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateUserResponse {
		User?: User;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateUserResponseFormProperties {
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateUserResponseFormGroup() {
		return new FormGroup<UpdateUserResponseFormProperties>({
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface UpdateVPCConnectionResponse {
		Arn?: string;
		VPCConnectionId?: string;
		UpdateStatus?: VPCConnectionResourceStatus;
		AvailabilityStatus?: VPCConnectionAvailabilityStatus;
		RequestId?: string;
		Status?: number | null;
	}
	export interface UpdateVPCConnectionResponseFormProperties {
		Arn: FormControl<string | null | undefined>,
		VPCConnectionId: FormControl<string | null | undefined>,
		UpdateStatus: FormControl<VPCConnectionResourceStatus | null | undefined>,
		AvailabilityStatus: FormControl<VPCConnectionAvailabilityStatus | null | undefined>,
		RequestId: FormControl<string | null | undefined>,
		Status: FormControl<number | null | undefined>,
	}
	export function CreateUpdateVPCConnectionResponseFormGroup() {
		return new FormGroup<UpdateVPCConnectionResponseFormProperties>({
			Arn: new FormControl<string | null | undefined>(undefined),
			VPCConnectionId: new FormControl<string | null | undefined>(undefined),
			UpdateStatus: new FormControl<VPCConnectionResourceStatus | null | undefined>(undefined),
			AvailabilityStatus: new FormControl<VPCConnectionAvailabilityStatus | null | undefined>(undefined),
			RequestId: new FormControl<string | null | undefined>(undefined),
			Status: new FormControl<number | null | undefined>(undefined),
		});

	}

	export enum DashboardBehavior { ENABLED = 0, DISABLED = 1 }


	/** The source entity of an analysis. */
	export interface AnalysisSourceEntity {
		SourceTemplate?: AnalysisSourceTemplate;
	}

	/** The source entity of an analysis. */
	export interface AnalysisSourceEntityFormProperties {
	}
	export function CreateAnalysisSourceEntityFormGroup() {
		return new FormGroup<AnalysisSourceEntityFormProperties>({
		});

	}


	/** The type of experience you want to embed. For anonymous users, you can embed Amazon QuickSight dashboards. */
	export interface AnonymousUserEmbeddingExperienceConfiguration {
		Dashboard?: AnonymousUserDashboardEmbeddingConfiguration;
		DashboardVisual?: AnonymousUserDashboardVisualEmbeddingConfiguration;
		QSearchBar?: AnonymousUserQSearchBarEmbeddingConfiguration;
	}

	/** The type of experience you want to embed. For anonymous users, you can embed Amazon QuickSight dashboards. */
	export interface AnonymousUserEmbeddingExperienceConfigurationFormProperties {
	}
	export function CreateAnonymousUserEmbeddingExperienceConfigurationFormGroup() {
		return new FormGroup<AnonymousUserEmbeddingExperienceConfigurationFormProperties>({
		});

	}


	/** The source of the asset bundle zip file that contains the data that you want to import. The file must be in <code>QUICKSIGHT_JSON</code> format. */
	export interface AssetBundleImportSource {
		Body?: string;
		S3Uri?: string;
	}

	/** The source of the asset bundle zip file that contains the data that you want to import. The file must be in <code>QUICKSIGHT_JSON</code> format. */
	export interface AssetBundleImportSourceFormProperties {
		Body: FormControl<string | null | undefined>,
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateAssetBundleImportSourceFormGroup() {
		return new FormGroup<AssetBundleImportSourceFormProperties>({
			Body: new FormControl<string | null | undefined>(undefined),
			S3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export enum AuthenticationMethodOption { IAM_AND_QUICKSIGHT = 0, IAM_ONLY = 1, ACTIVE_DIRECTORY = 2 }

	export interface CancelIngestionRequest {
	}
	export interface CancelIngestionRequestFormProperties {
	}
	export function CreateCancelIngestionRequestFormGroup() {
		return new FormGroup<CancelIngestionRequestFormProperties>({
		});

	}

	export enum ColumnDataRole { DIMENSION = 0, MEASURE = 1 }

	export interface CreateAccountCustomizationRequest {

		/** Required */
		AccountCustomization: AccountCustomization;
		Tags?: Array<Tag>;
	}
	export interface CreateAccountCustomizationRequestFormProperties {
	}
	export function CreateCreateAccountCustomizationRequestFormGroup() {
		return new FormGroup<CreateAccountCustomizationRequestFormProperties>({
		});

	}

	export interface CreateAccountSubscriptionRequest {

		/** Required */
		Edition: Edition;

		/** Required */
		AuthenticationMethod: AuthenticationMethodOption;

		/** Required */
		AccountName: string;

		/** Required */
		NotificationEmail: string;
		ActiveDirectoryName?: string;
		Realm?: string;
		DirectoryId?: string;
		AdminGroup?: Array<string>;
		AuthorGroup?: Array<string>;
		ReaderGroup?: Array<string>;
		FirstName?: string;
		LastName?: string;
		EmailAddress?: string;
		ContactNumber?: string;
	}
	export interface CreateAccountSubscriptionRequestFormProperties {

		/** Required */
		Edition: FormControl<Edition | null | undefined>,

		/** Required */
		AuthenticationMethod: FormControl<AuthenticationMethodOption | null | undefined>,

		/** Required */
		AccountName: FormControl<string | null | undefined>,

		/** Required */
		NotificationEmail: FormControl<string | null | undefined>,
		ActiveDirectoryName: FormControl<string | null | undefined>,
		Realm: FormControl<string | null | undefined>,
		DirectoryId: FormControl<string | null | undefined>,
		FirstName: FormControl<string | null | undefined>,
		LastName: FormControl<string | null | undefined>,
		EmailAddress: FormControl<string | null | undefined>,
		ContactNumber: FormControl<string | null | undefined>,
	}
	export function CreateCreateAccountSubscriptionRequestFormGroup() {
		return new FormGroup<CreateAccountSubscriptionRequestFormProperties>({
			Edition: new FormControl<Edition | null | undefined>(undefined, [Validators.required]),
			AuthenticationMethod: new FormControl<AuthenticationMethodOption | null | undefined>(undefined, [Validators.required]),
			AccountName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NotificationEmail: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ActiveDirectoryName: new FormControl<string | null | undefined>(undefined),
			Realm: new FormControl<string | null | undefined>(undefined),
			DirectoryId: new FormControl<string | null | undefined>(undefined),
			FirstName: new FormControl<string | null | undefined>(undefined),
			LastName: new FormControl<string | null | undefined>(undefined),
			EmailAddress: new FormControl<string | null | undefined>(undefined),
			ContactNumber: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAnalysisRequest {

		/** Required */
		Name: string;
		Parameters?: Parameters;
		Permissions?: Array<ResourcePermission>;
		SourceEntity?: AnalysisSourceEntity;
		ThemeArn?: string;
		Tags?: Array<Tag>;
		Definition?: AnalysisDefinition;
	}
	export interface CreateAnalysisRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAnalysisRequestFormGroup() {
		return new FormGroup<CreateAnalysisRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}


	/** Dashboard source entity. */
	export interface DashboardSourceEntity {
		SourceTemplate?: DashboardSourceTemplate;
	}

	/** Dashboard source entity. */
	export interface DashboardSourceEntityFormProperties {
	}
	export function CreateDashboardSourceEntityFormGroup() {
		return new FormGroup<DashboardSourceEntityFormProperties>({
		});

	}

	export interface CreateDashboardRequest {

		/** Required */
		Name: string;
		Parameters?: Parameters;
		Permissions?: Array<ResourcePermission>;
		SourceEntity?: DashboardSourceEntity;
		Tags?: Array<Tag>;
		VersionDescription?: string;
		DashboardPublishOptions?: DashboardPublishOptions;
		ThemeArn?: string;
		Definition?: DashboardVersionDefinition;
	}
	export interface CreateDashboardRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		VersionDescription: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateDashboardRequestFormGroup() {
		return new FormGroup<CreateDashboardRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VersionDescription: new FormControl<string | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDataSetRequest {

		/** Required */
		DataSetId: string;

		/** Required */
		Name: string;

		/** Required */
		PhysicalTableMap: PhysicalTableMap;
		LogicalTableMap?: LogicalTableMap;

		/** Required */
		ImportMode: DataSetImportMode;
		ColumnGroups?: Array<ColumnGroup>;
		FieldFolders?: FieldFolderMap;
		Permissions?: Array<ResourcePermission>;
		RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
		RowLevelPermissionTagConfiguration?: RowLevelPermissionTagConfiguration;
		ColumnLevelPermissionRules?: Array<ColumnLevelPermissionRule>;
		Tags?: Array<Tag>;

		/** The usage configuration to apply to child datasets that reference this dataset as a source. */
		DataSetUsageConfiguration?: DataSetUsageConfiguration;
		DatasetParameters?: Array<DatasetParameter>;
	}
	export interface CreateDataSetRequestFormProperties {

		/** Required */
		DataSetId: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		ImportMode: FormControl<DataSetImportMode | null | undefined>,
	}
	export function CreateCreateDataSetRequestFormGroup() {
		return new FormGroup<CreateDataSetRequestFormProperties>({
			DataSetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImportMode: new FormControl<DataSetImportMode | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface DataSourceCredentials {
		CredentialPair?: CredentialPair;
		CopySourceArn?: string;
		SecretArn?: string;
	}

	/** Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
	export interface DataSourceCredentialsFormProperties {
		CopySourceArn: FormControl<string | null | undefined>,
		SecretArn: FormControl<string | null | undefined>,
	}
	export function CreateDataSourceCredentialsFormGroup() {
		return new FormGroup<DataSourceCredentialsFormProperties>({
			CopySourceArn: new FormControl<string | null | undefined>(undefined),
			SecretArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDataSourceRequest {

		/** Required */
		DataSourceId: string;

		/** Required */
		Name: string;

		/** Required */
		Type: DataSourceType;
		DataSourceParameters?: DataSourceParameters;
		Credentials?: DataSourceCredentials;
		Permissions?: Array<ResourcePermission>;
		VpcConnectionProperties?: VpcConnectionProperties;
		SslProperties?: SslProperties;
		Tags?: Array<Tag>;
	}
	export interface CreateDataSourceRequestFormProperties {

		/** Required */
		DataSourceId: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		Type: FormControl<DataSourceType | null | undefined>,
	}
	export function CreateCreateDataSourceRequestFormGroup() {
		return new FormGroup<CreateDataSourceRequestFormProperties>({
			DataSourceId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Type: new FormControl<DataSourceType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateFolderMembershipRequest {
	}
	export interface CreateFolderMembershipRequestFormProperties {
	}
	export function CreateCreateFolderMembershipRequestFormGroup() {
		return new FormGroup<CreateFolderMembershipRequestFormProperties>({
		});

	}

	export interface CreateFolderRequest {
		Name?: string;
		FolderType?: FolderType;
		ParentFolderArn?: string;
		Permissions?: Array<ResourcePermission>;
		Tags?: Array<Tag>;
	}
	export interface CreateFolderRequestFormProperties {
		Name: FormControl<string | null | undefined>,
		FolderType: FormControl<FolderType | null | undefined>,
		ParentFolderArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateFolderRequestFormGroup() {
		return new FormGroup<CreateFolderRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			FolderType: new FormControl<FolderType | null | undefined>(undefined),
			ParentFolderArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateGroupMembershipRequest {
	}
	export interface CreateGroupMembershipRequestFormProperties {
	}
	export function CreateCreateGroupMembershipRequestFormGroup() {
		return new FormGroup<CreateGroupMembershipRequestFormProperties>({
		});

	}


	/** The request object for this operation.  */
	export interface CreateGroupRequest {

		/** Required */
		GroupName: string;
		Description?: string;
	}

	/** The request object for this operation.  */
	export interface CreateGroupRequestFormProperties {

		/** Required */
		GroupName: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateCreateGroupRequestFormGroup() {
		return new FormGroup<CreateGroupRequestFormProperties>({
			GroupName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateIAMPolicyAssignmentRequest {

		/** Required */
		AssignmentName: string;

		/** Required */
		AssignmentStatus: AssignmentStatus;
		PolicyArn?: string;
		Identities?: IdentityMap;
	}
	export interface CreateIAMPolicyAssignmentRequestFormProperties {

		/** Required */
		AssignmentName: FormControl<string | null | undefined>,

		/** Required */
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,
		PolicyArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateIAMPolicyAssignmentRequestFormGroup() {
		return new FormGroup<CreateIAMPolicyAssignmentRequestFormProperties>({
			AssignmentName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined, [Validators.required]),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateIngestionRequest {
		IngestionType?: IngestionType;
	}
	export interface CreateIngestionRequestFormProperties {
		IngestionType: FormControl<IngestionType | null | undefined>,
	}
	export function CreateCreateIngestionRequestFormGroup() {
		return new FormGroup<CreateIngestionRequestFormProperties>({
			IngestionType: new FormControl<IngestionType | null | undefined>(undefined),
		});

	}

	export interface CreateNamespaceRequest {

		/** Required */
		Namespace: string;

		/** Required */
		IdentityStore: IdentityStore;
		Tags?: Array<Tag>;
	}
	export interface CreateNamespaceRequestFormProperties {

		/** Required */
		Namespace: FormControl<string | null | undefined>,

		/** Required */
		IdentityStore: FormControl<IdentityStore | null | undefined>,
	}
	export function CreateCreateNamespaceRequestFormGroup() {
		return new FormGroup<CreateNamespaceRequestFormProperties>({
			Namespace: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IdentityStore: new FormControl<IdentityStore | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateRefreshScheduleRequest {

		/** Required */
		Schedule: RefreshSchedule;
	}
	export interface CreateRefreshScheduleRequestFormProperties {
	}
	export function CreateCreateRefreshScheduleRequestFormGroup() {
		return new FormGroup<CreateRefreshScheduleRequestFormProperties>({
		});

	}

	export interface CreateTemplateAliasRequest {

		/** Required */
		TemplateVersionNumber: number;
	}
	export interface CreateTemplateAliasRequestFormProperties {

		/** Required */
		TemplateVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateCreateTemplateAliasRequestFormGroup() {
		return new FormGroup<CreateTemplateAliasRequestFormProperties>({
			TemplateVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** The source entity of the template. */
	export interface TemplateSourceEntity {
		SourceAnalysis?: TemplateSourceAnalysis;
		SourceTemplate?: TemplateSourceTemplate;
	}

	/** The source entity of the template. */
	export interface TemplateSourceEntityFormProperties {
	}
	export function CreateTemplateSourceEntityFormGroup() {
		return new FormGroup<TemplateSourceEntityFormProperties>({
		});

	}

	export interface CreateTemplateRequest {
		Name?: string;
		Permissions?: Array<ResourcePermission>;
		SourceEntity?: TemplateSourceEntity;
		Tags?: Array<Tag>;
		VersionDescription?: string;
		Definition?: TemplateVersionDefinition;
	}
	export interface CreateTemplateRequestFormProperties {
		Name: FormControl<string | null | undefined>,
		VersionDescription: FormControl<string | null | undefined>,
	}
	export function CreateCreateTemplateRequestFormGroup() {
		return new FormGroup<CreateTemplateRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			VersionDescription: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateThemeAliasRequest {

		/** Required */
		ThemeVersionNumber: number;
	}
	export interface CreateThemeAliasRequestFormProperties {

		/** Required */
		ThemeVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateCreateThemeAliasRequestFormGroup() {
		return new FormGroup<CreateThemeAliasRequestFormProperties>({
			ThemeVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateThemeRequest {

		/** Required */
		Name: string;

		/** Required */
		BaseThemeId: string;
		VersionDescription?: string;

		/** Required */
		Configuration: ThemeConfiguration;
		Permissions?: Array<ResourcePermission>;
		Tags?: Array<Tag>;
	}
	export interface CreateThemeRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		BaseThemeId: FormControl<string | null | undefined>,
		VersionDescription: FormControl<string | null | undefined>,
	}
	export function CreateCreateThemeRequestFormGroup() {
		return new FormGroup<CreateThemeRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			BaseThemeId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VersionDescription: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTopicRefreshScheduleRequest {

		/** Required */
		DatasetArn: string;
		DatasetName?: string;

		/** Required */
		RefreshSchedule: TopicRefreshSchedule;
	}
	export interface CreateTopicRefreshScheduleRequestFormProperties {

		/** Required */
		DatasetArn: FormControl<string | null | undefined>,
		DatasetName: FormControl<string | null | undefined>,
	}
	export function CreateCreateTopicRefreshScheduleRequestFormGroup() {
		return new FormGroup<CreateTopicRefreshScheduleRequestFormProperties>({
			DatasetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DatasetName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTopicRequest {

		/** Required */
		TopicId: string;

		/** Required */
		Topic: TopicDetails;
		Tags?: Array<Tag>;
	}
	export interface CreateTopicRequestFormProperties {

		/** Required */
		TopicId: FormControl<string | null | undefined>,
	}
	export function CreateCreateTopicRequestFormGroup() {
		return new FormGroup<CreateTopicRequestFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateVPCConnectionRequest {

		/** Required */
		VPCConnectionId: string;

		/** Required */
		Name: string;

		/** Required */
		SubnetIds: Array<string>;

		/** Required */
		SecurityGroupIds: Array<string>;
		DnsResolvers?: Array<string>;

		/** Required */
		RoleArn: string;
		Tags?: Array<Tag>;
	}
	export interface CreateVPCConnectionRequestFormProperties {

		/** Required */
		VPCConnectionId: FormControl<string | null | undefined>,

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateVPCConnectionRequestFormGroup() {
		return new FormGroup<CreateVPCConnectionRequestFormProperties>({
			VPCConnectionId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export enum DashboardErrorType { ACCESS_DENIED = 0, SOURCE_NOT_FOUND = 1, DATA_SET_NOT_FOUND = 2, INTERNAL_FAILURE = 3, PARAMETER_VALUE_INCOMPATIBLE = 4, PARAMETER_TYPE_INVALID = 5, PARAMETER_NOT_FOUND = 6, COLUMN_TYPE_MISMATCH = 7, COLUMN_GEOGRAPHIC_ROLE_MISMATCH = 8, COLUMN_REPLACEMENT_MISSING = 9 }

	export enum DatasetParameterValueType { MULTI_VALUED = 0, SINGLE_VALUED = 1 }

	export interface DeleteAccountCustomizationRequest {
	}
	export interface DeleteAccountCustomizationRequestFormProperties {
	}
	export function CreateDeleteAccountCustomizationRequestFormGroup() {
		return new FormGroup<DeleteAccountCustomizationRequestFormProperties>({
		});

	}

	export interface DeleteAccountSubscriptionRequest {
	}
	export interface DeleteAccountSubscriptionRequestFormProperties {
	}
	export function CreateDeleteAccountSubscriptionRequestFormGroup() {
		return new FormGroup<DeleteAccountSubscriptionRequestFormProperties>({
		});

	}

	export interface DeleteAnalysisRequest {
	}
	export interface DeleteAnalysisRequestFormProperties {
	}
	export function CreateDeleteAnalysisRequestFormGroup() {
		return new FormGroup<DeleteAnalysisRequestFormProperties>({
		});

	}

	export interface DeleteDashboardRequest {
	}
	export interface DeleteDashboardRequestFormProperties {
	}
	export function CreateDeleteDashboardRequestFormGroup() {
		return new FormGroup<DeleteDashboardRequestFormProperties>({
		});

	}

	export interface DeleteDataSetRefreshPropertiesRequest {
	}
	export interface DeleteDataSetRefreshPropertiesRequestFormProperties {
	}
	export function CreateDeleteDataSetRefreshPropertiesRequestFormGroup() {
		return new FormGroup<DeleteDataSetRefreshPropertiesRequestFormProperties>({
		});

	}

	export interface DeleteDataSetRequest {
	}
	export interface DeleteDataSetRequestFormProperties {
	}
	export function CreateDeleteDataSetRequestFormGroup() {
		return new FormGroup<DeleteDataSetRequestFormProperties>({
		});

	}

	export interface DeleteDataSourceRequest {
	}
	export interface DeleteDataSourceRequestFormProperties {
	}
	export function CreateDeleteDataSourceRequestFormGroup() {
		return new FormGroup<DeleteDataSourceRequestFormProperties>({
		});

	}

	export interface DeleteFolderMembershipRequest {
	}
	export interface DeleteFolderMembershipRequestFormProperties {
	}
	export function CreateDeleteFolderMembershipRequestFormGroup() {
		return new FormGroup<DeleteFolderMembershipRequestFormProperties>({
		});

	}

	export interface DeleteFolderRequest {
	}
	export interface DeleteFolderRequestFormProperties {
	}
	export function CreateDeleteFolderRequestFormGroup() {
		return new FormGroup<DeleteFolderRequestFormProperties>({
		});

	}

	export interface DeleteGroupMembershipRequest {
	}
	export interface DeleteGroupMembershipRequestFormProperties {
	}
	export function CreateDeleteGroupMembershipRequestFormGroup() {
		return new FormGroup<DeleteGroupMembershipRequestFormProperties>({
		});

	}

	export interface DeleteGroupRequest {
	}
	export interface DeleteGroupRequestFormProperties {
	}
	export function CreateDeleteGroupRequestFormGroup() {
		return new FormGroup<DeleteGroupRequestFormProperties>({
		});

	}

	export interface DeleteIAMPolicyAssignmentRequest {
	}
	export interface DeleteIAMPolicyAssignmentRequestFormProperties {
	}
	export function CreateDeleteIAMPolicyAssignmentRequestFormGroup() {
		return new FormGroup<DeleteIAMPolicyAssignmentRequestFormProperties>({
		});

	}

	export interface DeleteNamespaceRequest {
	}
	export interface DeleteNamespaceRequestFormProperties {
	}
	export function CreateDeleteNamespaceRequestFormGroup() {
		return new FormGroup<DeleteNamespaceRequestFormProperties>({
		});

	}

	export interface DeleteRefreshScheduleRequest {
	}
	export interface DeleteRefreshScheduleRequestFormProperties {
	}
	export function CreateDeleteRefreshScheduleRequestFormGroup() {
		return new FormGroup<DeleteRefreshScheduleRequestFormProperties>({
		});

	}

	export interface DeleteTemplateAliasRequest {
	}
	export interface DeleteTemplateAliasRequestFormProperties {
	}
	export function CreateDeleteTemplateAliasRequestFormGroup() {
		return new FormGroup<DeleteTemplateAliasRequestFormProperties>({
		});

	}

	export interface DeleteTemplateRequest {
	}
	export interface DeleteTemplateRequestFormProperties {
	}
	export function CreateDeleteTemplateRequestFormGroup() {
		return new FormGroup<DeleteTemplateRequestFormProperties>({
		});

	}

	export interface DeleteThemeAliasRequest {
	}
	export interface DeleteThemeAliasRequestFormProperties {
	}
	export function CreateDeleteThemeAliasRequestFormGroup() {
		return new FormGroup<DeleteThemeAliasRequestFormProperties>({
		});

	}

	export interface DeleteThemeRequest {
	}
	export interface DeleteThemeRequestFormProperties {
	}
	export function CreateDeleteThemeRequestFormGroup() {
		return new FormGroup<DeleteThemeRequestFormProperties>({
		});

	}

	export interface DeleteTopicRefreshScheduleRequest {
	}
	export interface DeleteTopicRefreshScheduleRequestFormProperties {
	}
	export function CreateDeleteTopicRefreshScheduleRequestFormGroup() {
		return new FormGroup<DeleteTopicRefreshScheduleRequestFormProperties>({
		});

	}

	export interface DeleteTopicRequest {
	}
	export interface DeleteTopicRequestFormProperties {
	}
	export function CreateDeleteTopicRequestFormGroup() {
		return new FormGroup<DeleteTopicRequestFormProperties>({
		});

	}


	/** <p/> */
	export interface DeleteUserByPrincipalIdRequest {
	}

	/** <p/> */
	export interface DeleteUserByPrincipalIdRequestFormProperties {
	}
	export function CreateDeleteUserByPrincipalIdRequestFormGroup() {
		return new FormGroup<DeleteUserByPrincipalIdRequestFormProperties>({
		});

	}

	export interface DeleteUserRequest {
	}
	export interface DeleteUserRequestFormProperties {
	}
	export function CreateDeleteUserRequestFormGroup() {
		return new FormGroup<DeleteUserRequestFormProperties>({
		});

	}

	export interface DeleteVPCConnectionRequest {
	}
	export interface DeleteVPCConnectionRequestFormProperties {
	}
	export function CreateDeleteVPCConnectionRequestFormGroup() {
		return new FormGroup<DeleteVPCConnectionRequestFormProperties>({
		});

	}

	export interface DescribeAccountCustomizationRequest {
	}
	export interface DescribeAccountCustomizationRequestFormProperties {
	}
	export function CreateDescribeAccountCustomizationRequestFormGroup() {
		return new FormGroup<DescribeAccountCustomizationRequestFormProperties>({
		});

	}

	export interface DescribeAccountSettingsRequest {
	}
	export interface DescribeAccountSettingsRequestFormProperties {
	}
	export function CreateDescribeAccountSettingsRequestFormGroup() {
		return new FormGroup<DescribeAccountSettingsRequestFormProperties>({
		});

	}

	export interface DescribeAccountSubscriptionRequest {
	}
	export interface DescribeAccountSubscriptionRequestFormProperties {
	}
	export function CreateDescribeAccountSubscriptionRequestFormGroup() {
		return new FormGroup<DescribeAccountSubscriptionRequestFormProperties>({
		});

	}

	export interface DescribeAnalysisDefinitionRequest {
	}
	export interface DescribeAnalysisDefinitionRequestFormProperties {
	}
	export function CreateDescribeAnalysisDefinitionRequestFormGroup() {
		return new FormGroup<DescribeAnalysisDefinitionRequestFormProperties>({
		});

	}

	export interface DescribeAnalysisPermissionsRequest {
	}
	export interface DescribeAnalysisPermissionsRequestFormProperties {
	}
	export function CreateDescribeAnalysisPermissionsRequestFormGroup() {
		return new FormGroup<DescribeAnalysisPermissionsRequestFormProperties>({
		});

	}

	export interface DescribeAnalysisRequest {
	}
	export interface DescribeAnalysisRequestFormProperties {
	}
	export function CreateDescribeAnalysisRequestFormGroup() {
		return new FormGroup<DescribeAnalysisRequestFormProperties>({
		});

	}

	export interface DescribeAssetBundleExportJobRequest {
	}
	export interface DescribeAssetBundleExportJobRequestFormProperties {
	}
	export function CreateDescribeAssetBundleExportJobRequestFormGroup() {
		return new FormGroup<DescribeAssetBundleExportJobRequestFormProperties>({
		});

	}

	export interface DescribeAssetBundleImportJobRequest {
	}
	export interface DescribeAssetBundleImportJobRequestFormProperties {
	}
	export function CreateDescribeAssetBundleImportJobRequestFormGroup() {
		return new FormGroup<DescribeAssetBundleImportJobRequestFormProperties>({
		});

	}

	export interface DescribeDashboardDefinitionRequest {
	}
	export interface DescribeDashboardDefinitionRequestFormProperties {
	}
	export function CreateDescribeDashboardDefinitionRequestFormGroup() {
		return new FormGroup<DescribeDashboardDefinitionRequestFormProperties>({
		});

	}

	export interface DescribeDashboardPermissionsRequest {
	}
	export interface DescribeDashboardPermissionsRequestFormProperties {
	}
	export function CreateDescribeDashboardPermissionsRequestFormGroup() {
		return new FormGroup<DescribeDashboardPermissionsRequestFormProperties>({
		});

	}

	export interface DescribeDashboardRequest {
	}
	export interface DescribeDashboardRequestFormProperties {
	}
	export function CreateDescribeDashboardRequestFormGroup() {
		return new FormGroup<DescribeDashboardRequestFormProperties>({
		});

	}

	export interface DescribeDashboardSnapshotJobRequest {
	}
	export interface DescribeDashboardSnapshotJobRequestFormProperties {
	}
	export function CreateDescribeDashboardSnapshotJobRequestFormGroup() {
		return new FormGroup<DescribeDashboardSnapshotJobRequestFormProperties>({
		});

	}

	export interface DescribeDashboardSnapshotJobResultRequest {
	}
	export interface DescribeDashboardSnapshotJobResultRequestFormProperties {
	}
	export function CreateDescribeDashboardSnapshotJobResultRequestFormGroup() {
		return new FormGroup<DescribeDashboardSnapshotJobResultRequestFormProperties>({
		});

	}

	export interface DescribeDataSetPermissionsRequest {
	}
	export interface DescribeDataSetPermissionsRequestFormProperties {
	}
	export function CreateDescribeDataSetPermissionsRequestFormGroup() {
		return new FormGroup<DescribeDataSetPermissionsRequestFormProperties>({
		});

	}

	export interface DescribeDataSetRefreshPropertiesRequest {
	}
	export interface DescribeDataSetRefreshPropertiesRequestFormProperties {
	}
	export function CreateDescribeDataSetRefreshPropertiesRequestFormGroup() {
		return new FormGroup<DescribeDataSetRefreshPropertiesRequestFormProperties>({
		});

	}

	export interface DescribeDataSetRequest {
	}
	export interface DescribeDataSetRequestFormProperties {
	}
	export function CreateDescribeDataSetRequestFormGroup() {
		return new FormGroup<DescribeDataSetRequestFormProperties>({
		});

	}

	export interface DescribeDataSourcePermissionsRequest {
	}
	export interface DescribeDataSourcePermissionsRequestFormProperties {
	}
	export function CreateDescribeDataSourcePermissionsRequestFormGroup() {
		return new FormGroup<DescribeDataSourcePermissionsRequestFormProperties>({
		});

	}

	export interface DescribeDataSourceRequest {
	}
	export interface DescribeDataSourceRequestFormProperties {
	}
	export function CreateDescribeDataSourceRequestFormGroup() {
		return new FormGroup<DescribeDataSourceRequestFormProperties>({
		});

	}

	export interface DescribeFolderPermissionsRequest {
	}
	export interface DescribeFolderPermissionsRequestFormProperties {
	}
	export function CreateDescribeFolderPermissionsRequestFormGroup() {
		return new FormGroup<DescribeFolderPermissionsRequestFormProperties>({
		});

	}

	export interface DescribeFolderRequest {
	}
	export interface DescribeFolderRequestFormProperties {
	}
	export function CreateDescribeFolderRequestFormGroup() {
		return new FormGroup<DescribeFolderRequestFormProperties>({
		});

	}

	export interface DescribeFolderResolvedPermissionsRequest {
	}
	export interface DescribeFolderResolvedPermissionsRequestFormProperties {
	}
	export function CreateDescribeFolderResolvedPermissionsRequestFormGroup() {
		return new FormGroup<DescribeFolderResolvedPermissionsRequestFormProperties>({
		});

	}

	export interface DescribeGroupMembershipRequest {
	}
	export interface DescribeGroupMembershipRequestFormProperties {
	}
	export function CreateDescribeGroupMembershipRequestFormGroup() {
		return new FormGroup<DescribeGroupMembershipRequestFormProperties>({
		});

	}

	export interface DescribeGroupRequest {
	}
	export interface DescribeGroupRequestFormProperties {
	}
	export function CreateDescribeGroupRequestFormGroup() {
		return new FormGroup<DescribeGroupRequestFormProperties>({
		});

	}

	export interface DescribeIAMPolicyAssignmentRequest {
	}
	export interface DescribeIAMPolicyAssignmentRequestFormProperties {
	}
	export function CreateDescribeIAMPolicyAssignmentRequestFormGroup() {
		return new FormGroup<DescribeIAMPolicyAssignmentRequestFormProperties>({
		});

	}

	export interface DescribeIngestionRequest {
	}
	export interface DescribeIngestionRequestFormProperties {
	}
	export function CreateDescribeIngestionRequestFormGroup() {
		return new FormGroup<DescribeIngestionRequestFormProperties>({
		});

	}

	export interface DescribeIpRestrictionRequest {
	}
	export interface DescribeIpRestrictionRequestFormProperties {
	}
	export function CreateDescribeIpRestrictionRequestFormGroup() {
		return new FormGroup<DescribeIpRestrictionRequestFormProperties>({
		});

	}

	export interface DescribeNamespaceRequest {
	}
	export interface DescribeNamespaceRequestFormProperties {
	}
	export function CreateDescribeNamespaceRequestFormGroup() {
		return new FormGroup<DescribeNamespaceRequestFormProperties>({
		});

	}

	export interface DescribeRefreshScheduleRequest {
	}
	export interface DescribeRefreshScheduleRequestFormProperties {
	}
	export function CreateDescribeRefreshScheduleRequestFormGroup() {
		return new FormGroup<DescribeRefreshScheduleRequestFormProperties>({
		});

	}

	export interface DescribeTemplateAliasRequest {
	}
	export interface DescribeTemplateAliasRequestFormProperties {
	}
	export function CreateDescribeTemplateAliasRequestFormGroup() {
		return new FormGroup<DescribeTemplateAliasRequestFormProperties>({
		});

	}

	export interface DescribeTemplateDefinitionRequest {
	}
	export interface DescribeTemplateDefinitionRequestFormProperties {
	}
	export function CreateDescribeTemplateDefinitionRequestFormGroup() {
		return new FormGroup<DescribeTemplateDefinitionRequestFormProperties>({
		});

	}

	export interface DescribeTemplatePermissionsRequest {
	}
	export interface DescribeTemplatePermissionsRequestFormProperties {
	}
	export function CreateDescribeTemplatePermissionsRequestFormGroup() {
		return new FormGroup<DescribeTemplatePermissionsRequestFormProperties>({
		});

	}

	export interface DescribeTemplateRequest {
	}
	export interface DescribeTemplateRequestFormProperties {
	}
	export function CreateDescribeTemplateRequestFormGroup() {
		return new FormGroup<DescribeTemplateRequestFormProperties>({
		});

	}

	export interface DescribeThemeAliasRequest {
	}
	export interface DescribeThemeAliasRequestFormProperties {
	}
	export function CreateDescribeThemeAliasRequestFormGroup() {
		return new FormGroup<DescribeThemeAliasRequestFormProperties>({
		});

	}

	export interface DescribeThemePermissionsRequest {
	}
	export interface DescribeThemePermissionsRequestFormProperties {
	}
	export function CreateDescribeThemePermissionsRequestFormGroup() {
		return new FormGroup<DescribeThemePermissionsRequestFormProperties>({
		});

	}

	export interface DescribeThemeRequest {
	}
	export interface DescribeThemeRequestFormProperties {
	}
	export function CreateDescribeThemeRequestFormGroup() {
		return new FormGroup<DescribeThemeRequestFormProperties>({
		});

	}

	export interface DescribeTopicPermissionsRequest {
	}
	export interface DescribeTopicPermissionsRequestFormProperties {
	}
	export function CreateDescribeTopicPermissionsRequestFormGroup() {
		return new FormGroup<DescribeTopicPermissionsRequestFormProperties>({
		});

	}

	export interface DescribeTopicRefreshRequest {
	}
	export interface DescribeTopicRefreshRequestFormProperties {
	}
	export function CreateDescribeTopicRefreshRequestFormGroup() {
		return new FormGroup<DescribeTopicRefreshRequestFormProperties>({
		});

	}

	export interface DescribeTopicRefreshScheduleRequest {
	}
	export interface DescribeTopicRefreshScheduleRequestFormProperties {
	}
	export function CreateDescribeTopicRefreshScheduleRequestFormGroup() {
		return new FormGroup<DescribeTopicRefreshScheduleRequestFormProperties>({
		});

	}

	export interface DescribeTopicRequest {
	}
	export interface DescribeTopicRequestFormProperties {
	}
	export function CreateDescribeTopicRequestFormGroup() {
		return new FormGroup<DescribeTopicRequestFormProperties>({
		});

	}

	export interface DescribeUserRequest {
	}
	export interface DescribeUserRequestFormProperties {
	}
	export function CreateDescribeUserRequestFormGroup() {
		return new FormGroup<DescribeUserRequestFormProperties>({
		});

	}

	export interface DescribeVPCConnectionRequest {
	}
	export interface DescribeVPCConnectionRequestFormProperties {
	}
	export function CreateDescribeVPCConnectionRequestFormGroup() {
		return new FormGroup<DescribeVPCConnectionRequestFormProperties>({
		});

	}

	export enum EmbeddingIdentityType { IAM = 0, QUICKSIGHT = 1, ANONYMOUS = 2 }

	export interface GenerateEmbedUrlForAnonymousUserRequest {
		SessionLifetimeInMinutes?: number | null;

		/** Required */
		Namespace: string;
		SessionTags?: Array<SessionTag>;

		/** Required */
		AuthorizedResourceArns: Array<string>;

		/** Required */
		ExperienceConfiguration: AnonymousUserEmbeddingExperienceConfiguration;
		AllowedDomains?: Array<string>;
	}
	export interface GenerateEmbedUrlForAnonymousUserRequestFormProperties {
		SessionLifetimeInMinutes: FormControl<number | null | undefined>,

		/** Required */
		Namespace: FormControl<string | null | undefined>,
	}
	export function CreateGenerateEmbedUrlForAnonymousUserRequestFormGroup() {
		return new FormGroup<GenerateEmbedUrlForAnonymousUserRequestFormProperties>({
			SessionLifetimeInMinutes: new FormControl<number | null | undefined>(undefined),
			Namespace: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}


	/** <p>The type of experience you want to embed. For registered users, you can embed Amazon QuickSight dashboards or the Amazon QuickSight console.</p> <note> <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p> </note> */
	export interface RegisteredUserEmbeddingExperienceConfiguration {
		Dashboard?: RegisteredUserDashboardEmbeddingConfiguration;
		QuickSightConsole?: RegisteredUserQuickSightConsoleEmbeddingConfiguration;
		QSearchBar?: RegisteredUserQSearchBarEmbeddingConfiguration;
		DashboardVisual?: RegisteredUserDashboardVisualEmbeddingConfiguration;
	}

	/** <p>The type of experience you want to embed. For registered users, you can embed Amazon QuickSight dashboards or the Amazon QuickSight console.</p> <note> <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p> </note> */
	export interface RegisteredUserEmbeddingExperienceConfigurationFormProperties {
	}
	export function CreateRegisteredUserEmbeddingExperienceConfigurationFormGroup() {
		return new FormGroup<RegisteredUserEmbeddingExperienceConfigurationFormProperties>({
		});

	}

	export interface GenerateEmbedUrlForRegisteredUserRequest {
		SessionLifetimeInMinutes?: number | null;

		/** Required */
		UserArn: string;

		/** Required */
		ExperienceConfiguration: RegisteredUserEmbeddingExperienceConfiguration;
		AllowedDomains?: Array<string>;
	}
	export interface GenerateEmbedUrlForRegisteredUserRequestFormProperties {
		SessionLifetimeInMinutes: FormControl<number | null | undefined>,

		/** Required */
		UserArn: FormControl<string | null | undefined>,
	}
	export function CreateGenerateEmbedUrlForRegisteredUserRequestFormGroup() {
		return new FormGroup<GenerateEmbedUrlForRegisteredUserRequestFormProperties>({
			SessionLifetimeInMinutes: new FormControl<number | null | undefined>(undefined),
			UserArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GetDashboardEmbedUrlRequest {
	}
	export interface GetDashboardEmbedUrlRequestFormProperties {
	}
	export function CreateGetDashboardEmbedUrlRequestFormGroup() {
		return new FormGroup<GetDashboardEmbedUrlRequestFormProperties>({
		});

	}

	export interface GetSessionEmbedUrlRequest {
	}
	export interface GetSessionEmbedUrlRequestFormProperties {
	}
	export function CreateGetSessionEmbedUrlRequestFormGroup() {
		return new FormGroup<GetSessionEmbedUrlRequestFormProperties>({
		});

	}

	export interface ListAnalysesRequest {
	}
	export interface ListAnalysesRequestFormProperties {
	}
	export function CreateListAnalysesRequestFormGroup() {
		return new FormGroup<ListAnalysesRequestFormProperties>({
		});

	}

	export interface ListAssetBundleExportJobsRequest {
	}
	export interface ListAssetBundleExportJobsRequestFormProperties {
	}
	export function CreateListAssetBundleExportJobsRequestFormGroup() {
		return new FormGroup<ListAssetBundleExportJobsRequestFormProperties>({
		});

	}

	export interface ListAssetBundleImportJobsRequest {
	}
	export interface ListAssetBundleImportJobsRequestFormProperties {
	}
	export function CreateListAssetBundleImportJobsRequestFormGroup() {
		return new FormGroup<ListAssetBundleImportJobsRequestFormProperties>({
		});

	}

	export interface ListDashboardVersionsRequest {
	}
	export interface ListDashboardVersionsRequestFormProperties {
	}
	export function CreateListDashboardVersionsRequestFormGroup() {
		return new FormGroup<ListDashboardVersionsRequestFormProperties>({
		});

	}

	export interface ListDashboardsRequest {
	}
	export interface ListDashboardsRequestFormProperties {
	}
	export function CreateListDashboardsRequestFormGroup() {
		return new FormGroup<ListDashboardsRequestFormProperties>({
		});

	}

	export interface ListDataSetsRequest {
	}
	export interface ListDataSetsRequestFormProperties {
	}
	export function CreateListDataSetsRequestFormGroup() {
		return new FormGroup<ListDataSetsRequestFormProperties>({
		});

	}

	export interface ListDataSourcesRequest {
	}
	export interface ListDataSourcesRequestFormProperties {
	}
	export function CreateListDataSourcesRequestFormGroup() {
		return new FormGroup<ListDataSourcesRequestFormProperties>({
		});

	}

	export interface ListFolderMembersRequest {
	}
	export interface ListFolderMembersRequestFormProperties {
	}
	export function CreateListFolderMembersRequestFormGroup() {
		return new FormGroup<ListFolderMembersRequestFormProperties>({
		});

	}

	export interface ListFoldersRequest {
	}
	export interface ListFoldersRequestFormProperties {
	}
	export function CreateListFoldersRequestFormGroup() {
		return new FormGroup<ListFoldersRequestFormProperties>({
		});

	}

	export interface ListGroupMembershipsRequest {
	}
	export interface ListGroupMembershipsRequestFormProperties {
	}
	export function CreateListGroupMembershipsRequestFormGroup() {
		return new FormGroup<ListGroupMembershipsRequestFormProperties>({
		});

	}

	export interface ListGroupsRequest {
	}
	export interface ListGroupsRequestFormProperties {
	}
	export function CreateListGroupsRequestFormGroup() {
		return new FormGroup<ListGroupsRequestFormProperties>({
		});

	}

	export interface ListIAMPolicyAssignmentsForUserRequest {
	}
	export interface ListIAMPolicyAssignmentsForUserRequestFormProperties {
	}
	export function CreateListIAMPolicyAssignmentsForUserRequestFormGroup() {
		return new FormGroup<ListIAMPolicyAssignmentsForUserRequestFormProperties>({
		});

	}

	export interface ListIAMPolicyAssignmentsRequest {
	}
	export interface ListIAMPolicyAssignmentsRequestFormProperties {
	}
	export function CreateListIAMPolicyAssignmentsRequestFormGroup() {
		return new FormGroup<ListIAMPolicyAssignmentsRequestFormProperties>({
		});

	}

	export interface ListIngestionsRequest {
	}
	export interface ListIngestionsRequestFormProperties {
	}
	export function CreateListIngestionsRequestFormGroup() {
		return new FormGroup<ListIngestionsRequestFormProperties>({
		});

	}

	export interface ListNamespacesRequest {
	}
	export interface ListNamespacesRequestFormProperties {
	}
	export function CreateListNamespacesRequestFormGroup() {
		return new FormGroup<ListNamespacesRequestFormProperties>({
		});

	}

	export interface ListRefreshSchedulesRequest {
	}
	export interface ListRefreshSchedulesRequestFormProperties {
	}
	export function CreateListRefreshSchedulesRequestFormGroup() {
		return new FormGroup<ListRefreshSchedulesRequestFormProperties>({
		});

	}

	export interface ListTagsForResourceRequest {
	}
	export interface ListTagsForResourceRequestFormProperties {
	}
	export function CreateListTagsForResourceRequestFormGroup() {
		return new FormGroup<ListTagsForResourceRequestFormProperties>({
		});

	}

	export interface ListTemplateAliasesRequest {
	}
	export interface ListTemplateAliasesRequestFormProperties {
	}
	export function CreateListTemplateAliasesRequestFormGroup() {
		return new FormGroup<ListTemplateAliasesRequestFormProperties>({
		});

	}

	export interface ListTemplateVersionsRequest {
	}
	export interface ListTemplateVersionsRequestFormProperties {
	}
	export function CreateListTemplateVersionsRequestFormGroup() {
		return new FormGroup<ListTemplateVersionsRequestFormProperties>({
		});

	}

	export interface ListTemplatesRequest {
	}
	export interface ListTemplatesRequestFormProperties {
	}
	export function CreateListTemplatesRequestFormGroup() {
		return new FormGroup<ListTemplatesRequestFormProperties>({
		});

	}

	export interface ListThemeAliasesRequest {
	}
	export interface ListThemeAliasesRequestFormProperties {
	}
	export function CreateListThemeAliasesRequestFormGroup() {
		return new FormGroup<ListThemeAliasesRequestFormProperties>({
		});

	}

	export interface ListThemeVersionsRequest {
	}
	export interface ListThemeVersionsRequestFormProperties {
	}
	export function CreateListThemeVersionsRequestFormGroup() {
		return new FormGroup<ListThemeVersionsRequestFormProperties>({
		});

	}

	export interface ListThemesRequest {
	}
	export interface ListThemesRequestFormProperties {
	}
	export function CreateListThemesRequestFormGroup() {
		return new FormGroup<ListThemesRequestFormProperties>({
		});

	}

	export interface ListTopicRefreshSchedulesRequest {
	}
	export interface ListTopicRefreshSchedulesRequestFormProperties {
	}
	export function CreateListTopicRefreshSchedulesRequestFormGroup() {
		return new FormGroup<ListTopicRefreshSchedulesRequestFormProperties>({
		});

	}

	export interface ListTopicsRequest {
	}
	export interface ListTopicsRequestFormProperties {
	}
	export function CreateListTopicsRequestFormGroup() {
		return new FormGroup<ListTopicsRequestFormProperties>({
		});

	}

	export interface ListUserGroupsRequest {
	}
	export interface ListUserGroupsRequestFormProperties {
	}
	export function CreateListUserGroupsRequestFormGroup() {
		return new FormGroup<ListUserGroupsRequestFormProperties>({
		});

	}

	export interface ListUsersRequest {
	}
	export interface ListUsersRequestFormProperties {
	}
	export function CreateListUsersRequestFormGroup() {
		return new FormGroup<ListUsersRequestFormProperties>({
		});

	}

	export interface ListVPCConnectionsRequest {
	}
	export interface ListVPCConnectionsRequestFormProperties {
	}
	export function CreateListVPCConnectionsRequestFormGroup() {
		return new FormGroup<ListVPCConnectionsRequestFormProperties>({
		});

	}

	export enum NumericFilterSelectAllOptions { FILTER_ALL_VALUES = 0 }

	export interface PutDataSetRefreshPropertiesRequest {

		/** Required */
		DataSetRefreshProperties: DataSetRefreshProperties;
	}
	export interface PutDataSetRefreshPropertiesRequestFormProperties {
	}
	export function CreatePutDataSetRefreshPropertiesRequestFormGroup() {
		return new FormGroup<PutDataSetRefreshPropertiesRequestFormProperties>({
		});

	}

	export enum ReferenceLinePatternType { SOLID = 0, DASHED = 1, DOTTED = 2 }

	export interface RegisterUserRequest {

		/** Required */
		IdentityType: IdentityType;

		/** Required */
		Email: string;

		/** Required */
		UserRole: UserRole;
		IamArn?: string;
		SessionName?: string;
		UserName?: string;
		CustomPermissionsName?: string;
		ExternalLoginFederationProviderType?: string;
		CustomFederationProviderUrl?: string;
		ExternalLoginId?: string;
	}
	export interface RegisterUserRequestFormProperties {

		/** Required */
		IdentityType: FormControl<IdentityType | null | undefined>,

		/** Required */
		Email: FormControl<string | null | undefined>,

		/** Required */
		UserRole: FormControl<UserRole | null | undefined>,
		IamArn: FormControl<string | null | undefined>,
		SessionName: FormControl<string | null | undefined>,
		UserName: FormControl<string | null | undefined>,
		CustomPermissionsName: FormControl<string | null | undefined>,
		ExternalLoginFederationProviderType: FormControl<string | null | undefined>,
		CustomFederationProviderUrl: FormControl<string | null | undefined>,
		ExternalLoginId: FormControl<string | null | undefined>,
	}
	export function CreateRegisterUserRequestFormGroup() {
		return new FormGroup<RegisterUserRequestFormProperties>({
			IdentityType: new FormControl<IdentityType | null | undefined>(undefined, [Validators.required]),
			Email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserRole: new FormControl<UserRole | null | undefined>(undefined, [Validators.required]),
			IamArn: new FormControl<string | null | undefined>(undefined),
			SessionName: new FormControl<string | null | undefined>(undefined),
			UserName: new FormControl<string | null | undefined>(undefined),
			CustomPermissionsName: new FormControl<string | null | undefined>(undefined),
			ExternalLoginFederationProviderType: new FormControl<string | null | undefined>(undefined),
			CustomFederationProviderUrl: new FormControl<string | null | undefined>(undefined),
			ExternalLoginId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface RestoreAnalysisRequest {
	}
	export interface RestoreAnalysisRequestFormProperties {
	}
	export function CreateRestoreAnalysisRequestFormGroup() {
		return new FormGroup<RestoreAnalysisRequestFormProperties>({
		});

	}

	export interface SearchAnalysesRequest {

		/** Required */
		Filters: Array<AnalysisSearchFilter>;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface SearchAnalysesRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchAnalysesRequestFormGroup() {
		return new FormGroup<SearchAnalysesRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchDashboardsRequest {

		/** Required */
		Filters: Array<DashboardSearchFilter>;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface SearchDashboardsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchDashboardsRequestFormGroup() {
		return new FormGroup<SearchDashboardsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchDataSetsRequest {

		/** Required */
		Filters: Array<DataSetSearchFilter>;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface SearchDataSetsRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchDataSetsRequestFormGroup() {
		return new FormGroup<SearchDataSetsRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchDataSourcesRequest {

		/** Required */
		Filters: Array<DataSourceSearchFilter>;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface SearchDataSourcesRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchDataSourcesRequestFormGroup() {
		return new FormGroup<SearchDataSourcesRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchFoldersRequest {

		/** Required */
		Filters: Array<FolderSearchFilter>;
		NextToken?: string;
		MaxResults?: number | null;
	}
	export interface SearchFoldersRequestFormProperties {
		NextToken: FormControl<string | null | undefined>,
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchFoldersRequestFormGroup() {
		return new FormGroup<SearchFoldersRequestFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined),
		});

	}

	export interface SearchGroupsRequest {

		/** Required */
		Filters: Array<GroupSearchFilter>;
	}
	export interface SearchGroupsRequestFormProperties {
	}
	export function CreateSearchGroupsRequestFormGroup() {
		return new FormGroup<SearchGroupsRequestFormProperties>({
		});

	}

	export enum SectionPageBreakStatus { ENABLED = 0, DISABLED = 1 }

	export enum SnapshotFileSheetSelectionScope { ALL_VISUALS = 0, SELECTED_VISUALS = 1 }


	/** A structure that contains information about the users that the dashboard snapshot is generated for. */
	export interface SnapshotUserConfiguration {
		AnonymousUsers?: Array<SnapshotAnonymousUser>;
	}

	/** A structure that contains information about the users that the dashboard snapshot is generated for. */
	export interface SnapshotUserConfigurationFormProperties {
	}
	export function CreateSnapshotUserConfigurationFormGroup() {
		return new FormGroup<SnapshotUserConfigurationFormProperties>({
		});

	}

	export interface StartAssetBundleExportJobRequest {

		/** Required */
		AssetBundleExportJobId: string;

		/** Required */
		ResourceArns: Array<string>;
		IncludeAllDependencies?: boolean | null;

		/** Required */
		ExportFormat: AssetBundleExportFormat;
		CloudFormationOverridePropertyConfiguration?: AssetBundleCloudFormationOverridePropertyConfiguration;
	}
	export interface StartAssetBundleExportJobRequestFormProperties {

		/** Required */
		AssetBundleExportJobId: FormControl<string | null | undefined>,
		IncludeAllDependencies: FormControl<boolean | null | undefined>,

		/** Required */
		ExportFormat: FormControl<AssetBundleExportFormat | null | undefined>,
	}
	export function CreateStartAssetBundleExportJobRequestFormGroup() {
		return new FormGroup<StartAssetBundleExportJobRequestFormProperties>({
			AssetBundleExportJobId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			IncludeAllDependencies: new FormControl<boolean | null | undefined>(undefined),
			ExportFormat: new FormControl<AssetBundleExportFormat | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StartAssetBundleImportJobRequest {

		/** Required */
		AssetBundleImportJobId: string;

		/** Required */
		AssetBundleImportSource: AssetBundleImportSource;
		OverrideParameters?: AssetBundleImportJobOverrideParameters;
		FailureAction?: AssetBundleImportFailureAction;
	}
	export interface StartAssetBundleImportJobRequestFormProperties {

		/** Required */
		AssetBundleImportJobId: FormControl<string | null | undefined>,
		FailureAction: FormControl<AssetBundleImportFailureAction | null | undefined>,
	}
	export function CreateStartAssetBundleImportJobRequestFormGroup() {
		return new FormGroup<StartAssetBundleImportJobRequestFormProperties>({
			AssetBundleImportJobId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			FailureAction: new FormControl<AssetBundleImportFailureAction | null | undefined>(undefined),
		});

	}

	export interface StartDashboardSnapshotJobRequest {

		/** Required */
		SnapshotJobId: string;

		/** Required */
		UserConfiguration: SnapshotUserConfiguration;

		/** Required */
		SnapshotConfiguration: SnapshotConfiguration;
	}
	export interface StartDashboardSnapshotJobRequestFormProperties {

		/** Required */
		SnapshotJobId: FormControl<string | null | undefined>,
	}
	export function CreateStartDashboardSnapshotJobRequestFormGroup() {
		return new FormGroup<StartDashboardSnapshotJobRequestFormProperties>({
			SnapshotJobId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface TagResourceRequest {

		/** Required */
		Tags: Array<Tag>;
	}
	export interface TagResourceRequestFormProperties {
	}
	export function CreateTagResourceRequestFormGroup() {
		return new FormGroup<TagResourceRequestFormProperties>({
		});

	}

	export interface UntagResourceRequest {
	}
	export interface UntagResourceRequestFormProperties {
	}
	export function CreateUntagResourceRequestFormGroup() {
		return new FormGroup<UntagResourceRequestFormProperties>({
		});

	}

	export interface UpdateAccountCustomizationRequest {

		/** Required */
		AccountCustomization: AccountCustomization;
	}
	export interface UpdateAccountCustomizationRequestFormProperties {
	}
	export function CreateUpdateAccountCustomizationRequestFormGroup() {
		return new FormGroup<UpdateAccountCustomizationRequestFormProperties>({
		});

	}

	export interface UpdateAccountSettingsRequest {

		/** Required */
		DefaultNamespace: string;
		NotificationEmail?: string;
		TerminationProtectionEnabled?: boolean | null;
	}
	export interface UpdateAccountSettingsRequestFormProperties {

		/** Required */
		DefaultNamespace: FormControl<string | null | undefined>,
		NotificationEmail: FormControl<string | null | undefined>,
		TerminationProtectionEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateAccountSettingsRequestFormGroup() {
		return new FormGroup<UpdateAccountSettingsRequestFormProperties>({
			DefaultNamespace: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NotificationEmail: new FormControl<string | null | undefined>(undefined),
			TerminationProtectionEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UpdateAnalysisPermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateAnalysisPermissionsRequestFormProperties {
	}
	export function CreateUpdateAnalysisPermissionsRequestFormGroup() {
		return new FormGroup<UpdateAnalysisPermissionsRequestFormProperties>({
		});

	}

	export interface UpdateAnalysisRequest {

		/** Required */
		Name: string;
		Parameters?: Parameters;
		SourceEntity?: AnalysisSourceEntity;
		ThemeArn?: string;
		Definition?: AnalysisDefinition;
	}
	export interface UpdateAnalysisRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateAnalysisRequestFormGroup() {
		return new FormGroup<UpdateAnalysisRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDashboardPermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
		GrantLinkPermissions?: Array<ResourcePermission>;
		RevokeLinkPermissions?: Array<ResourcePermission>;
	}
	export interface UpdateDashboardPermissionsRequestFormProperties {
	}
	export function CreateUpdateDashboardPermissionsRequestFormGroup() {
		return new FormGroup<UpdateDashboardPermissionsRequestFormProperties>({
		});

	}

	export interface UpdateDashboardPublishedVersionRequest {
	}
	export interface UpdateDashboardPublishedVersionRequestFormProperties {
	}
	export function CreateUpdateDashboardPublishedVersionRequestFormGroup() {
		return new FormGroup<UpdateDashboardPublishedVersionRequestFormProperties>({
		});

	}

	export interface UpdateDashboardRequest {

		/** Required */
		Name: string;
		SourceEntity?: DashboardSourceEntity;
		Parameters?: Parameters;
		VersionDescription?: string;
		DashboardPublishOptions?: DashboardPublishOptions;
		ThemeArn?: string;
		Definition?: DashboardVersionDefinition;
	}
	export interface UpdateDashboardRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
		VersionDescription: FormControl<string | null | undefined>,
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDashboardRequestFormGroup() {
		return new FormGroup<UpdateDashboardRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VersionDescription: new FormControl<string | null | undefined>(undefined),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSetPermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateDataSetPermissionsRequestFormProperties {
	}
	export function CreateUpdateDataSetPermissionsRequestFormGroup() {
		return new FormGroup<UpdateDataSetPermissionsRequestFormProperties>({
		});

	}

	export interface UpdateDataSetRequest {

		/** Required */
		Name: string;

		/** Required */
		PhysicalTableMap: PhysicalTableMap;
		LogicalTableMap?: LogicalTableMap;

		/** Required */
		ImportMode: DataSetImportMode;
		ColumnGroups?: Array<ColumnGroup>;
		FieldFolders?: FieldFolderMap;
		RowLevelPermissionDataSet?: RowLevelPermissionDataSet;
		RowLevelPermissionTagConfiguration?: RowLevelPermissionTagConfiguration;
		ColumnLevelPermissionRules?: Array<ColumnLevelPermissionRule>;

		/** The usage configuration to apply to child datasets that reference this dataset as a source. */
		DataSetUsageConfiguration?: DataSetUsageConfiguration;
		DatasetParameters?: Array<DatasetParameter>;
	}
	export interface UpdateDataSetRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		ImportMode: FormControl<DataSetImportMode | null | undefined>,
	}
	export function CreateUpdateDataSetRequestFormGroup() {
		return new FormGroup<UpdateDataSetRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ImportMode: new FormControl<DataSetImportMode | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateDataSourcePermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateDataSourcePermissionsRequestFormProperties {
	}
	export function CreateUpdateDataSourcePermissionsRequestFormGroup() {
		return new FormGroup<UpdateDataSourcePermissionsRequestFormProperties>({
		});

	}

	export interface UpdateDataSourceRequest {

		/** Required */
		Name: string;
		DataSourceParameters?: DataSourceParameters;
		Credentials?: DataSourceCredentials;
		VpcConnectionProperties?: VpcConnectionProperties;
		SslProperties?: SslProperties;
	}
	export interface UpdateDataSourceRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDataSourceRequestFormGroup() {
		return new FormGroup<UpdateDataSourceRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateFolderPermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateFolderPermissionsRequestFormProperties {
	}
	export function CreateUpdateFolderPermissionsRequestFormGroup() {
		return new FormGroup<UpdateFolderPermissionsRequestFormProperties>({
		});

	}

	export interface UpdateFolderRequest {

		/** Required */
		Name: string;
	}
	export interface UpdateFolderRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateUpdateFolderRequestFormGroup() {
		return new FormGroup<UpdateFolderRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateGroupRequest {
		Description?: string;
	}
	export interface UpdateGroupRequestFormProperties {
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateGroupRequestFormGroup() {
		return new FormGroup<UpdateGroupRequestFormProperties>({
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateIAMPolicyAssignmentRequest {
		AssignmentStatus?: AssignmentStatus;
		PolicyArn?: string;
		Identities?: IdentityMap;
	}
	export interface UpdateIAMPolicyAssignmentRequestFormProperties {
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,
		PolicyArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateIAMPolicyAssignmentRequestFormGroup() {
		return new FormGroup<UpdateIAMPolicyAssignmentRequestFormProperties>({
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateIpRestrictionRequest {
		IpRestrictionRuleMap?: IpRestrictionRuleMap;
		Enabled?: boolean | null;
	}
	export interface UpdateIpRestrictionRequestFormProperties {
		Enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateIpRestrictionRequestFormGroup() {
		return new FormGroup<UpdateIpRestrictionRequestFormProperties>({
			Enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UpdatePublicSharingSettingsRequest {
		PublicSharingEnabled?: boolean | null;
	}
	export interface UpdatePublicSharingSettingsRequestFormProperties {
		PublicSharingEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdatePublicSharingSettingsRequestFormGroup() {
		return new FormGroup<UpdatePublicSharingSettingsRequestFormProperties>({
			PublicSharingEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UpdateRefreshScheduleRequest {

		/** Required */
		Schedule: RefreshSchedule;
	}
	export interface UpdateRefreshScheduleRequestFormProperties {
	}
	export function CreateUpdateRefreshScheduleRequestFormGroup() {
		return new FormGroup<UpdateRefreshScheduleRequestFormProperties>({
		});

	}

	export interface UpdateTemplateAliasRequest {

		/** Required */
		TemplateVersionNumber: number;
	}
	export interface UpdateTemplateAliasRequestFormProperties {

		/** Required */
		TemplateVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateUpdateTemplateAliasRequestFormGroup() {
		return new FormGroup<UpdateTemplateAliasRequestFormProperties>({
			TemplateVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateTemplatePermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateTemplatePermissionsRequestFormProperties {
	}
	export function CreateUpdateTemplatePermissionsRequestFormGroup() {
		return new FormGroup<UpdateTemplatePermissionsRequestFormProperties>({
		});

	}

	export interface UpdateTemplateRequest {
		SourceEntity?: TemplateSourceEntity;
		VersionDescription?: string;
		Name?: string;
		Definition?: TemplateVersionDefinition;
	}
	export interface UpdateTemplateRequestFormProperties {
		VersionDescription: FormControl<string | null | undefined>,
		Name: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTemplateRequestFormGroup() {
		return new FormGroup<UpdateTemplateRequestFormProperties>({
			VersionDescription: new FormControl<string | null | undefined>(undefined),
			Name: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateThemeAliasRequest {

		/** Required */
		ThemeVersionNumber: number;
	}
	export interface UpdateThemeAliasRequestFormProperties {

		/** Required */
		ThemeVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateUpdateThemeAliasRequestFormGroup() {
		return new FormGroup<UpdateThemeAliasRequestFormProperties>({
			ThemeVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface UpdateThemePermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateThemePermissionsRequestFormProperties {
	}
	export function CreateUpdateThemePermissionsRequestFormGroup() {
		return new FormGroup<UpdateThemePermissionsRequestFormProperties>({
		});

	}

	export interface UpdateThemeRequest {
		Name?: string;

		/** Required */
		BaseThemeId: string;
		VersionDescription?: string;
		Configuration?: ThemeConfiguration;
	}
	export interface UpdateThemeRequestFormProperties {
		Name: FormControl<string | null | undefined>,

		/** Required */
		BaseThemeId: FormControl<string | null | undefined>,
		VersionDescription: FormControl<string | null | undefined>,
	}
	export function CreateUpdateThemeRequestFormGroup() {
		return new FormGroup<UpdateThemeRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			BaseThemeId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			VersionDescription: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTopicPermissionsRequest {
		GrantPermissions?: Array<ResourcePermission>;
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateTopicPermissionsRequestFormProperties {
	}
	export function CreateUpdateTopicPermissionsRequestFormGroup() {
		return new FormGroup<UpdateTopicPermissionsRequestFormProperties>({
		});

	}

	export interface UpdateTopicRefreshScheduleRequest {

		/** Required */
		RefreshSchedule: TopicRefreshSchedule;
	}
	export interface UpdateTopicRefreshScheduleRequestFormProperties {
	}
	export function CreateUpdateTopicRefreshScheduleRequestFormGroup() {
		return new FormGroup<UpdateTopicRefreshScheduleRequestFormProperties>({
		});

	}

	export interface UpdateTopicRequest {

		/** Required */
		Topic: TopicDetails;
	}
	export interface UpdateTopicRequestFormProperties {
	}
	export function CreateUpdateTopicRequestFormGroup() {
		return new FormGroup<UpdateTopicRequestFormProperties>({
		});

	}

	export interface UpdateUserRequest {

		/** Required */
		Email: string;

		/** Required */
		Role: UserRole;
		CustomPermissionsName?: string;
		UnapplyCustomPermissions?: boolean | null;
		ExternalLoginFederationProviderType?: string;
		CustomFederationProviderUrl?: string;
		ExternalLoginId?: string;
	}
	export interface UpdateUserRequestFormProperties {

		/** Required */
		Email: FormControl<string | null | undefined>,

		/** Required */
		Role: FormControl<UserRole | null | undefined>,
		CustomPermissionsName: FormControl<string | null | undefined>,
		UnapplyCustomPermissions: FormControl<boolean | null | undefined>,
		ExternalLoginFederationProviderType: FormControl<string | null | undefined>,
		CustomFederationProviderUrl: FormControl<string | null | undefined>,
		ExternalLoginId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateUserRequestFormGroup() {
		return new FormGroup<UpdateUserRequestFormProperties>({
			Email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Role: new FormControl<UserRole | null | undefined>(undefined, [Validators.required]),
			CustomPermissionsName: new FormControl<string | null | undefined>(undefined),
			UnapplyCustomPermissions: new FormControl<boolean | null | undefined>(undefined),
			ExternalLoginFederationProviderType: new FormControl<string | null | undefined>(undefined),
			CustomFederationProviderUrl: new FormControl<string | null | undefined>(undefined),
			ExternalLoginId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateVPCConnectionRequest {

		/** Required */
		Name: string;

		/** Required */
		SubnetIds: Array<string>;

		/** Required */
		SecurityGroupIds: Array<string>;
		DnsResolvers?: Array<string>;

		/** Required */
		RoleArn: string;
	}
	export interface UpdateVPCConnectionRequestFormProperties {

		/** Required */
		Name: FormControl<string | null | undefined>,

		/** Required */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateVPCConnectionRequestFormGroup() {
		return new FormGroup<UpdateVPCConnectionRequestFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	@Injectable()
	export class MyClient {
		constructor(@Inject('baseUri') private baseUri: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '') + '/', private http: HttpClient) {
		}

		/**
		 * Cancels an ongoing ingestion of data into SPICE.
		 * Delete accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID of the dataset used in the ingestion.
		 * @param {string} IngestionId An ID for the ingestion.
		 * @return {CancelIngestionResponse} Success
		 */
		CancelIngestion(AwsAccountId: string, DataSetId: string, IngestionId: string): Observable<CancelIngestionResponse> {
			return this.http.delete<CancelIngestionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/ingestions/' + (IngestionId == null ? '' : encodeURIComponent(IngestionId)), {});
		}

		/**
		 * <p>Creates and starts a new SPICE ingestion for a dataset. You can manually refresh datasets in an Enterprise edition account 32 times in a 24-hour period. You can manually refresh datasets in a Standard edition account 8 times in a 24-hour period. Each 24-hour period is measured starting 24 hours before the current date and time.</p> <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using tags?</a> in the Amazon Web Services Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>
		 * Put accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}
		 * @param {string} DataSetId The ID of the dataset used in the ingestion.
		 * @param {string} IngestionId An ID for the ingestion.
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @return {CreateIngestionResponse} Success
		 */
		CreateIngestion(DataSetId: string, IngestionId: string, AwsAccountId: string, requestBody: CreateIngestionPutBody): Observable<CreateIngestionResponse> {
			return this.http.put<CreateIngestionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/ingestions/' + (IngestionId == null ? '' : encodeURIComponent(IngestionId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes a SPICE ingestion.
		 * Get accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID of the dataset used in the ingestion.
		 * @param {string} IngestionId An ID for the ingestion.
		 * @return {DescribeIngestionResponse} Success
		 */
		DescribeIngestion(AwsAccountId: string, DataSetId: string, IngestionId: string): Observable<DescribeIngestionResponse> {
			return this.http.get<DescribeIngestionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/ingestions/' + (IngestionId == null ? '' : encodeURIComponent(IngestionId)), {});
		}

		/**
		 * <p>Creates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, you can add a custom default theme by using the <code>CreateAccountCustomization</code> or <code>UpdateAccountCustomization</code> API operation. To further customize Amazon QuickSight by removing Amazon QuickSight sample assets and videos for all new users, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html">Customizing Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i> </p> <p>You can create customizations for your Amazon Web Services account or, if you specify a namespace, for a QuickSight namespace instead. Customizations that apply to a namespace always override customizations that apply to an Amazon Web Services account. To find out which customizations apply, use the <code>DescribeAccountCustomization</code> API operation.</p> <p>Before you use the <code>CreateAccountCustomization</code> API operation to add a theme as the namespace default, make sure that you first share the theme with the namespace. If you don't share it with the namespace, the theme isn't visible to your users even if you make it the default theme. To check if the theme is shared, view the current permissions by using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeThemePermissions.html">DescribeThemePermissions</a> </code> API operation. To share the theme, grant permissions by using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateThemePermissions.html">UpdateThemePermissions</a> </code> API operation. </p>
		 * Post accounts/{AwsAccountId}/customizations
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that you want to customize Amazon QuickSight for.
		 * @param {string} namespace The Amazon QuickSight namespace that you want to add customizations to.
		 * @return {CreateAccountCustomizationResponse} Success
		 */
		CreateAccountCustomization(AwsAccountId: string, namespace: string | null | undefined, requestBody: CreateAccountCustomizationPostBody): Observable<CreateAccountCustomizationResponse> {
			return this.http.post<CreateAccountCustomizationResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/customizations&namespace=' + (namespace == null ? '' : encodeURIComponent(namespace)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes all Amazon QuickSight customizations in this Amazon Web Services Region for the specified Amazon Web Services account and Amazon QuickSight namespace.
		 * Delete accounts/{AwsAccountId}/customizations
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that you want to delete Amazon QuickSight customizations from in this Amazon Web Services Region.
		 * @param {string} namespace The Amazon QuickSight namespace that you're deleting the customizations from.
		 * @return {DeleteAccountCustomizationResponse} Success
		 */
		DeleteAccountCustomization(AwsAccountId: string, namespace: string | null | undefined): Observable<DeleteAccountCustomizationResponse> {
			return this.http.delete<DeleteAccountCustomizationResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/customizations&namespace=' + (namespace == null ? '' : encodeURIComponent(namespace)), {});
		}

		/**
		 * <p>Describes the customizations associated with the provided Amazon Web Services account and Amazon Amazon QuickSight namespace in an Amazon Web Services Region. The Amazon QuickSight console evaluates which customizations to apply by running this API operation with the <code>Resolved</code> flag included. </p> <p>To determine what customizations display when you run this command, it can help to visualize the relationship of the entities involved. </p> <ul> <li> <p> <code>Amazon Web Services account</code> - The Amazon Web Services account exists at the top of the hierarchy. It has the potential to use all of the Amazon Web Services Regions and Amazon Web Services Services. When you subscribe to Amazon QuickSight, you choose one Amazon Web Services Region to use as your home Region. That's where your free SPICE capacity is located. You can use Amazon QuickSight in any supported Amazon Web Services Region. </p> </li> <li> <p> <code>Amazon Web Services Region</code> - In each Amazon Web Services Region where you sign in to Amazon QuickSight at least once, Amazon QuickSight acts as a separate instance of the same service. If you have a user directory, it resides in us-east-1, which is the US East (N. Virginia). Generally speaking, these users have access to Amazon QuickSight in any Amazon Web Services Region, unless they are constrained to a namespace. </p> <p>To run the command in a different Amazon Web Services Region, you change your Region settings. If you're using the CLI, you can use one of the following options:</p> <ul> <li> <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html">command line options</a>. </p> </li> <li> <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">named profiles</a>. </p> </li> <li> <p>Run <code>aws configure</code> to change your default Amazon Web Services Region. Use Enter to key the same settings for your keys. For more information, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">Configuring the CLI</a>.</p> </li> </ul> </li> <li> <p> <code>Namespace</code> - A QuickSight namespace is a partition that contains users and assets (data sources, datasets, dashboards, and so on). To access assets that are in a specific namespace, users and groups must also be part of the same namespace. People who share a namespace are completely isolated from users and assets in other namespaces, even if they are in the same Amazon Web Services account and Amazon Web Services Region.</p> </li> <li> <p> <code>Applied customizations</code> - Within an Amazon Web Services Region, a set of Amazon QuickSight customizations can apply to an Amazon Web Services account or to a namespace. Settings that you apply to a namespace override settings that you apply to an Amazon Web Services account. All settings are isolated to a single Amazon Web Services Region. To apply them in other Amazon Web Services Regions, run the <code>CreateAccountCustomization</code> command in each Amazon Web Services Region where you want to apply the same customizations. </p> </li> </ul>
		 * Get accounts/{AwsAccountId}/customizations
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that you want to describe Amazon QuickSight customizations for.
		 * @param {string} namespace The Amazon QuickSight namespace that you want to describe Amazon QuickSight customizations for.
		 * @param {boolean} resolved The <code>Resolved</code> flag works with the other parameters to determine which view of Amazon QuickSight customizations is returned. You can add this flag to your command to use the same view that Amazon QuickSight uses to identify which customizations to apply to the console. Omit this flag, or set it to <code>no-resolved</code>, to reveal customizations that are configured at different levels. 
		 * @return {DescribeAccountCustomizationResponse} Success
		 */
		DescribeAccountCustomization(AwsAccountId: string, namespace: string | null | undefined, resolved: boolean | null | undefined): Observable<DescribeAccountCustomizationResponse> {
			return this.http.get<DescribeAccountCustomizationResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/customizations&namespace=' + (namespace == null ? '' : encodeURIComponent(namespace)) + '&resolved=' + resolved, {});
		}

		/**
		 * <p>Updates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, the only customization that you can use is a theme.</p> <p>You can use customizations for your Amazon Web Services account or, if you specify a namespace, for a Amazon QuickSight namespace instead. Customizations that apply to a namespace override customizations that apply to an Amazon Web Services account. To find out which customizations apply, use the <code>DescribeAccountCustomization</code> API operation. </p>
		 * Put accounts/{AwsAccountId}/customizations
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that you want to update Amazon QuickSight customizations for.
		 * @param {string} namespace The namespace that you want to update Amazon QuickSight customizations for.
		 * @return {UpdateAccountCustomizationResponse} Success
		 */
		UpdateAccountCustomization(AwsAccountId: string, namespace: string | null | undefined, requestBody: UpdateAccountCustomizationPutBody): Observable<UpdateAccountCustomizationResponse> {
			return this.http.put<UpdateAccountCustomizationResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/customizations&namespace=' + (namespace == null ? '' : encodeURIComponent(namespace)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates an Amazon QuickSight account, or subscribes to Amazon QuickSight Q.</p> <p>The Amazon Web Services Region for the account is derived from what is configured in the CLI or SDK. This operation isn't supported in the US East (Ohio) Region, South America (Sao Paulo) Region, or Asia Pacific (Singapore) Region. </p> <p>Before you use this operation, make sure that you can connect to an existing Amazon Web Services account. If you don't have an Amazon Web Services account, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/setting-up-aws-sign-up.html">Sign up for Amazon Web Services</a> in the <i>Amazon QuickSight User Guide</i>. The person who signs up for Amazon QuickSight needs to have the correct Identity and Access Management (IAM) permissions. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/iam-policy-examples.html">IAM Policy Examples for Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>If your IAM policy includes both the <code>Subscribe</code> and <code>CreateAccountSubscription</code> actions, make sure that both actions are set to <code>Allow</code>. If either action is set to <code>Deny</code>, the <code>Deny</code> action prevails and your API call fails.</p> <p>You can't pass an existing IAM role to access other Amazon Web Services services using this API operation. To pass your existing IAM role to Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html#security-create-iam-role">Passing IAM roles to Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>You can't set default resource access on the new account from the Amazon QuickSight API. Instead, add default resource access from the Amazon QuickSight console. For more information about setting default resource access to Amazon Web Services services, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scoping-policies-defaults.html">Setting default resource access to Amazon Web Services services</a> in the <i>Amazon QuickSight User Guide</i>.</p>
		 * Post account/{AwsAccountId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID of the account that you're using to create your Amazon QuickSight account.
		 * @return {CreateAccountSubscriptionResponse} Success
		 */
		CreateAccountSubscription(AwsAccountId: string, requestBody: CreateAccountSubscriptionPostBody): Observable<CreateAccountSubscriptionResponse> {
			return this.http.post<CreateAccountSubscriptionResponse>(this.baseUri + 'account/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Use the <code>DeleteAccountSubscription</code> operation to delete an Amazon QuickSight account. This operation will result in an error message if you have configured your account termination protection settings to <code>True</code>. To change this setting and delete your account, call the <code>UpdateAccountSettings</code> API and set the value of the <code>TerminationProtectionEnabled</code> parameter to <code>False</code>, then make another call to the <code>DeleteAccountSubscription</code> API.
		 * Delete account/{AwsAccountId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID of the account that you want to delete.
		 * @return {DeleteAccountSubscriptionResponse} Success
		 */
		DeleteAccountSubscription(AwsAccountId: string): Observable<DeleteAccountSubscriptionResponse> {
			return this.http.delete<DeleteAccountSubscriptionResponse>(this.baseUri + 'account/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)), {});
		}

		/**
		 * Use the DescribeAccountSubscription operation to receive a description of an Amazon QuickSight account's subscription. A successful API call returns an <code>AccountInfo</code> object that includes an account's name, subscription status, authentication type, edition, and notification email address.
		 * Get account/{AwsAccountId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID associated with your Amazon QuickSight account.
		 * @return {DescribeAccountSubscriptionResponse} Success
		 */
		DescribeAccountSubscription(AwsAccountId: string): Observable<DescribeAccountSubscriptionResponse> {
			return this.http.get<DescribeAccountSubscriptionResponse>(this.baseUri + 'account/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)), {});
		}

		/**
		 * Creates an analysis in Amazon QuickSight. Analyses can be created either from a template or from an <code>AnalysisDefinition</code>.
		 * Post accounts/{AwsAccountId}/analyses/{AnalysisId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account where you are creating an analysis.
		 * @param {string} AnalysisId The ID for the analysis that you're creating. This ID displays in the URL of the analysis.
		 * @return {CreateAnalysisResponse} Success
		 */
		CreateAnalysis(AwsAccountId: string, AnalysisId: string, requestBody: CreateAnalysisPostBody): Observable<CreateAnalysisResponse> {
			return this.http.post<CreateAnalysisResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during which you can restore the analysis. If you don't specify a recovery window value, the operation defaults to 30 days. Amazon QuickSight attaches a <code>DeletionTime</code> stamp to the response that specifies the end of the recovery window. At the end of the recovery window, Amazon QuickSight deletes the analysis permanently.</p> <p>At any time before recovery window ends, you can use the <code>RestoreAnalysis</code> API operation to remove the <code>DeletionTime</code> stamp and cancel the deletion of the analysis. The analysis remains visible in the API until it's deleted, so you can describe it but you can't make a template from it.</p> <p>An analysis that's scheduled for deletion isn't accessible in the Amazon QuickSight console. To access it in the console, restore it. Deleting an analysis doesn't delete the dashboards that you publish from it.</p>
		 * Delete accounts/{AwsAccountId}/analyses/{AnalysisId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account where you want to delete an analysis.
		 * @param {string} AnalysisId The ID of the analysis that you're deleting.
		 * @param {number} recovery_window_in_days A value that specifies the number of days that Amazon QuickSight waits before it deletes the analysis. You can't use this parameter with the <code>ForceDeleteWithoutRecovery</code> option in the same API call. The default value is 30.
		 * @param {boolean} force_delete_without_recovery This option defaults to the value <code>NoForceDeleteWithoutRecovery</code>. To immediately delete the analysis, add the <code>ForceDeleteWithoutRecovery</code> option. You can't restore an analysis after it's deleted. 
		 * @return {DeleteAnalysisResponse} Success
		 */
		DeleteAnalysis(AwsAccountId: string, AnalysisId: string, recovery_window_in_days: number | null | undefined, force_delete_without_recovery: boolean | null | undefined): Observable<DeleteAnalysisResponse> {
			return this.http.delete<DeleteAnalysisResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)) + '&recovery_window_in_days=' + recovery_window_in_days + '&force_delete_without_recovery=' + force_delete_without_recovery, {});
		}

		/**
		 * Provides a summary of the metadata for an analysis.
		 * Get accounts/{AwsAccountId}/analyses/{AnalysisId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analysis. You must be using the Amazon Web Services account that the analysis is in.
		 * @param {string} AnalysisId The ID of the analysis that you're describing. The ID is part of the URL of the analysis.
		 * @return {DescribeAnalysisResponse} Success
		 */
		DescribeAnalysis(AwsAccountId: string, AnalysisId: string): Observable<DescribeAnalysisResponse> {
			return this.http.get<DescribeAnalysisResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)), {});
		}

		/**
		 * Updates an analysis in Amazon QuickSight
		 * Put accounts/{AwsAccountId}/analyses/{AnalysisId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analysis that you're updating.
		 * @param {string} AnalysisId The ID for the analysis that you're updating. This ID displays in the URL of the analysis.
		 * @return {UpdateAnalysisResponse} Success
		 */
		UpdateAnalysis(AwsAccountId: string, AnalysisId: string, requestBody: UpdateAnalysisPutBody): Observable<UpdateAnalysisResponse> {
			return this.http.put<UpdateAnalysisResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a dashboard from either a template or directly with a <code>DashboardDefinition</code>. To first create a template, see the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a> </code> API operation.</p> <p>A dashboard is an entity in Amazon QuickSight that identifies Amazon QuickSight reports, created from analyses. You can share Amazon QuickSight dashboards. With the right permissions, you can create scheduled email reports from them. If you have the correct permissions, you can create a dashboard from a template that exists in a different Amazon Web Services account.</p>
		 * Post accounts/{AwsAccountId}/dashboards/{DashboardId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account where you want to create the dashboard.
		 * @param {string} DashboardId The ID for the dashboard, also added to the IAM policy.
		 * @return {CreateDashboardResponse} Success
		 */
		CreateDashboard(AwsAccountId: string, DashboardId: string, requestBody: CreateDashboardPostBody): Observable<CreateDashboardResponse> {
			return this.http.post<CreateDashboardResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a dashboard.
		 * Delete accounts/{AwsAccountId}/dashboards/{DashboardId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard that you're deleting.
		 * @param {string} DashboardId The ID for the dashboard.
		 * @param {number} version_number The version number of the dashboard. If the version number property is provided, only the specified version of the dashboard is deleted.
		 * @return {DeleteDashboardResponse} Success
		 */
		DeleteDashboard(AwsAccountId: string, DashboardId: string, version_number: number | null | undefined): Observable<DeleteDashboardResponse> {
			return this.http.delete<DeleteDashboardResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '&version_number=' + version_number, {});
		}

		/**
		 * Provides a summary for a dashboard.
		 * Get accounts/{AwsAccountId}/dashboards/{DashboardId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard that you're describing.
		 * @param {string} DashboardId The ID for the dashboard.
		 * @param {number} version_number The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. 
		 * @param {string} alias_name The alias name.
		 * @return {DescribeDashboardResponse} Success
		 */
		DescribeDashboard(AwsAccountId: string, DashboardId: string, version_number: number | null | undefined, alias_name: string | null | undefined): Observable<DescribeDashboardResponse> {
			return this.http.get<DescribeDashboardResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '&version_number=' + version_number + '&alias_name=' + (alias_name == null ? '' : encodeURIComponent(alias_name)), {});
		}

		/**
		 * <p>Updates a dashboard in an Amazon Web Services account.</p> <note> <p>Updating a Dashboard creates a new dashboard version but does not immediately publish the new version. You can update the published version of a dashboard by using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateDashboardPublishedVersion.html">UpdateDashboardPublishedVersion</a> </code> API operation.</p> </note>
		 * Put accounts/{AwsAccountId}/dashboards/{DashboardId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard that you're updating.
		 * @param {string} DashboardId The ID for the dashboard.
		 * @return {UpdateDashboardResponse} Success
		 */
		UpdateDashboard(AwsAccountId: string, DashboardId: string, requestBody: UpdateDashboardPutBody): Observable<UpdateDashboardResponse> {
			return this.http.put<UpdateDashboardResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a dataset. This operation doesn't support datasets that include uploaded files as a source.
		 * Post accounts/{AwsAccountId}/data-sets
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @return {CreateDataSetResponse} Success
		 */
		CreateDataSet(AwsAccountId: string, requestBody: CreateDataSetPostBody): Observable<CreateDataSetResponse> {
			return this.http.post<CreateDataSetResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Lists all of the datasets belonging to the current Amazon Web Services account in an Amazon Web Services Region.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p>
		 * Get accounts/{AwsAccountId}/data-sets
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDataSetsResponse} Success
		 */
		ListDataSets(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListDataSetsResponse> {
			return this.http.get<ListDataSetsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Creates a data source.
		 * Post accounts/{AwsAccountId}/data-sources
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @return {CreateDataSourceResponse} Success
		 */
		CreateDataSource(AwsAccountId: string, requestBody: CreateDataSourcePostBody): Observable<CreateDataSourceResponse> {
			return this.http.post<CreateDataSourceResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sources', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists data sources in current Amazon Web Services Region that belong to this Amazon Web Services account.
		 * Get accounts/{AwsAccountId}/data-sources
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDataSourcesResponse} Success
		 */
		ListDataSources(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListDataSourcesResponse> {
			return this.http.get<ListDataSourcesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sources&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Creates an empty shared folder.
		 * Post accounts/{AwsAccountId}/folders/{FolderId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account where you want to create the folder.
		 * @param {string} FolderId The ID of the folder.
		 * @return {CreateFolderResponse} Success
		 */
		CreateFolder(AwsAccountId: string, FolderId: string, requestBody: CreateFolderPostBody): Observable<CreateFolderResponse> {
			return this.http.post<CreateFolderResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes an empty folder.
		 * Delete accounts/{AwsAccountId}/folders/{FolderId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} FolderId The ID of the folder.
		 * @return {DeleteFolderResponse} Success
		 */
		DeleteFolder(AwsAccountId: string, FolderId: string): Observable<DeleteFolderResponse> {
			return this.http.delete<DeleteFolderResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)), {});
		}

		/**
		 * Describes a folder.
		 * Get accounts/{AwsAccountId}/folders/{FolderId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} FolderId The ID of the folder.
		 * @return {DescribeFolderResponse} Success
		 */
		DescribeFolder(AwsAccountId: string, FolderId: string): Observable<DescribeFolderResponse> {
			return this.http.get<DescribeFolderResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)), {});
		}

		/**
		 * Updates the name of a folder.
		 * Put accounts/{AwsAccountId}/folders/{FolderId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder to update.
		 * @param {string} FolderId The ID of the folder.
		 * @return {UpdateFolderResponse} Success
		 */
		UpdateFolder(AwsAccountId: string, FolderId: string, requestBody: UpdateFolderPutBody): Observable<UpdateFolderResponse> {
			return this.http.put<UpdateFolderResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Adds an asset, such as a dashboard, analysis, or dataset into a folder.
		 * Put accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} FolderId The ID of the folder.
		 * @param {string} MemberId The ID of the asset (the dashboard, analysis, or dataset).
		 * @param {MemberType} MemberType The type of the member, including <code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code>.
		 * @return {CreateFolderMembershipResponse} Success
		 */
		CreateFolderMembership(AwsAccountId: string, FolderId: string, MemberId: string, MemberType: MemberType): Observable<CreateFolderMembershipResponse> {
			return this.http.put<CreateFolderMembershipResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)) + '/members/' + MemberType + '/' + (MemberId == null ? '' : encodeURIComponent(MemberId)), null, {});
		}

		/**
		 * Removes an asset, such as a dashboard, analysis, or dataset, from a folder.
		 * Delete accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} FolderId The Folder ID.
		 * @param {string} MemberId The ID of the asset (the dashboard, analysis, or dataset) that you want to delete.
		 * @param {MemberType} MemberType The type of the member, including <code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code> 
		 * @return {DeleteFolderMembershipResponse} Success
		 */
		DeleteFolderMembership(AwsAccountId: string, FolderId: string, MemberId: string, MemberType: MemberType): Observable<DeleteFolderMembershipResponse> {
			return this.http.delete<DeleteFolderMembershipResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)) + '/members/' + MemberType + '/' + (MemberId == null ? '' : encodeURIComponent(MemberId)), {});
		}

		/**
		 * <p>Use the <code>CreateGroup</code> operation to create a group in Amazon QuickSight. You can create up to 10,000 groups in a namespace. If you want to create more than 10,000 groups in a namespace, contact AWS Support.</p> <p>The permissions resource is <code>arn:aws:quicksight:&lt;your-region&gt;:<i>&lt;relevant-aws-account-id&gt;</i>:group/default/<i>&lt;group-name&gt;</i> </code>.</p> <p>The response is a group object.</p>
		 * Post accounts/{AwsAccountId}/namespaces/{Namespace}/groups
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace that you want the group to be a part of.
		 * @return {CreateGroupResponse} Success
		 */
		CreateGroup(AwsAccountId: string, Namespace: string, requestBody: CreateGroupPostBody): Observable<CreateGroupResponse> {
			return this.http.post<CreateGroupResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all user groups in Amazon QuickSight.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/groups
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} next_token A pagination token that can be used in a subsequent request.
		 * @param {number} max_results The maximum number of results to return.
		 * @param {string} Namespace The namespace that you want a list of groups from.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListGroupsResponse} Success
		 */
		ListGroups(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, Namespace: string, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListGroupsResponse> {
			return this.http.get<ListGroupsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Adds an Amazon QuickSight user to an Amazon QuickSight group.
		 * Put accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}
		 * @param {string} MemberName The name of the user that you want to add to the group membership.
		 * @param {string} GroupName The name of the group that you want to add the user to.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace that you want the user to be a part of.
		 * @return {CreateGroupMembershipResponse} Success
		 */
		CreateGroupMembership(MemberName: string, GroupName: string, AwsAccountId: string, Namespace: string): Observable<CreateGroupMembershipResponse> {
			return this.http.put<CreateGroupMembershipResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups/' + (GroupName == null ? '' : encodeURIComponent(GroupName)) + '/members/' + (MemberName == null ? '' : encodeURIComponent(MemberName)), null, {});
		}

		/**
		 * Removes a user from a group so that the user is no longer a member of the group.
		 * Delete accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}
		 * @param {string} MemberName The name of the user that you want to delete from the group membership.
		 * @param {string} GroupName The name of the group that you want to delete the user from.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace of the group that you want to remove a user from.
		 * @return {DeleteGroupMembershipResponse} Success
		 */
		DeleteGroupMembership(MemberName: string, GroupName: string, AwsAccountId: string, Namespace: string): Observable<DeleteGroupMembershipResponse> {
			return this.http.delete<DeleteGroupMembershipResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups/' + (GroupName == null ? '' : encodeURIComponent(GroupName)) + '/members/' + (MemberName == null ? '' : encodeURIComponent(MemberName)), {});
		}

		/**
		 * Use the <code>DescribeGroupMembership</code> operation to determine if a user is a member of the specified group. If the user exists and is a member of the specified group, an associated <code>GroupMember</code> object is returned.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}
		 * @param {string} MemberName The user name of the user that you want to search for.
		 * @param {string} GroupName The name of the group that you want to search.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace that includes the group you are searching within.
		 * @return {DescribeGroupMembershipResponse} Success
		 */
		DescribeGroupMembership(MemberName: string, GroupName: string, AwsAccountId: string, Namespace: string): Observable<DescribeGroupMembershipResponse> {
			return this.http.get<DescribeGroupMembershipResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups/' + (GroupName == null ? '' : encodeURIComponent(GroupName)) + '/members/' + (MemberName == null ? '' : encodeURIComponent(MemberName)), {});
		}

		/**
		 * Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name (ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight. Assignment names are unique per Amazon Web Services account. To avoid overwriting rules in other namespaces, use assignment names that are unique.
		 * Post accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account where you want to assign an IAM policy to Amazon QuickSight users or groups.
		 * @param {string} Namespace The namespace that contains the assignment.
		 * @return {CreateIAMPolicyAssignmentResponse} Success
		 */
		CreateIAMPolicyAssignment(AwsAccountId: string, Namespace: string, requestBody: CreateIAMPolicyAssignmentPostBody): Observable<CreateIAMPolicyAssignmentResponse> {
			return this.http.post<CreateIAMPolicyAssignmentResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/iam-policy-assignments/', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.</p> <p>A namespace allows you to isolate the Amazon QuickSight users and groups that are registered for that namespace. Users that access the namespace can share assets only with other users or groups in the same namespace. They can't see users and groups in other namespaces. You can create a namespace after your Amazon Web Services account is subscribed to Amazon QuickSight. The namespace must be unique within the Amazon Web Services account. By default, there is a limit of 100 namespaces per Amazon Web Services account. To increase your limit, create a ticket with Amazon Web Services Support. </p>
		 * Post accounts/{AwsAccountId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that you want to create the Amazon QuickSight namespace in.
		 * @return {CreateNamespaceResponse} Success
		 */
		CreateNamespace(AwsAccountId: string, requestBody: CreateNamespacePostBody): Observable<CreateNamespaceResponse> {
			return this.http.post<CreateNamespaceResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a refresh schedule for a dataset. You can create up to 5 different schedules for a single dataset.
		 * Post accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules
		 * @param {string} DataSetId The ID of the dataset.
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @return {CreateRefreshScheduleResponse} Success
		 */
		CreateRefreshSchedule(DataSetId: string, AwsAccountId: string, requestBody: CreateRefreshSchedulePostBody): Observable<CreateRefreshScheduleResponse> {
			return this.http.post<CreateRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-schedules', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists the refresh schedules of a dataset. Each dataset can have up to 5 schedules.
		 * Get accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID of the dataset.
		 * @return {ListRefreshSchedulesResponse} Success
		 */
		ListRefreshSchedules(AwsAccountId: string, DataSetId: string): Observable<ListRefreshSchedulesResponse> {
			return this.http.get<ListRefreshSchedulesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-schedules', {});
		}

		/**
		 * Updates a refresh schedule for a dataset.
		 * Put accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules
		 * @param {string} DataSetId The ID of the dataset.
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @return {UpdateRefreshScheduleResponse} Success
		 */
		UpdateRefreshSchedule(DataSetId: string, AwsAccountId: string, requestBody: UpdateRefreshSchedulePutBody): Observable<UpdateRefreshScheduleResponse> {
			return this.http.put<UpdateRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-schedules', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a template either from a <code>TemplateDefinition</code> or from an existing Amazon QuickSight analysis or template. You can use the resulting template to create additional dashboards, templates, or analyses.</p> <p>A <i>template</i> is an entity in Amazon QuickSight that encapsulates the metadata required to create an analysis and that you can use to create s dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with the analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p>
		 * Post accounts/{AwsAccountId}/templates/{TemplateId}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. You use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} TemplateId An ID for the template that you want to create. This template is unique per Amazon Web Services Region; in each Amazon Web Services account.
		 * @return {CreateTemplateResponse} Success
		 */
		CreateTemplate(AwsAccountId: string, TemplateId: string, requestBody: CreateTemplatePostBody): Observable<CreateTemplateResponse> {
			return this.http.post<CreateTemplateResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a template.
		 * Delete accounts/{AwsAccountId}/templates/{TemplateId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template that you're deleting.
		 * @param {string} TemplateId An ID for the template you want to delete.
		 * @param {number} version_number Specifies the version of the template that you want to delete. If you don't provide a version number, <code>DeleteTemplate</code> deletes all versions of the template. 
		 * @return {DeleteTemplateResponse} Success
		 */
		DeleteTemplate(AwsAccountId: string, TemplateId: string, version_number: number | null | undefined): Observable<DeleteTemplateResponse> {
			return this.http.delete<DeleteTemplateResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '&version_number=' + version_number, {});
		}

		/**
		 * Describes a template's metadata.
		 * Get accounts/{AwsAccountId}/templates/{TemplateId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template that you're describing.
		 * @param {string} TemplateId The ID for the template.
		 * @param {number} version_number (Optional) The number for the version to describe. If a <code>VersionNumber</code> parameter value isn't provided, the latest version of the template is described.
		 * @param {string} alias_name The alias of the template that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.
		 * @return {DescribeTemplateResponse} Success
		 */
		DescribeTemplate(AwsAccountId: string, TemplateId: string, version_number: number | null | undefined, alias_name: string | null | undefined): Observable<DescribeTemplateResponse> {
			return this.http.get<DescribeTemplateResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '&version_number=' + version_number + '&alias_name=' + (alias_name == null ? '' : encodeURIComponent(alias_name)), {});
		}

		/**
		 * Updates a template from an existing Amazon QuickSight analysis or another template.
		 * Put accounts/{AwsAccountId}/templates/{TemplateId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template that you're updating.
		 * @param {string} TemplateId The ID for the template.
		 * @return {UpdateTemplateResponse} Success
		 */
		UpdateTemplate(AwsAccountId: string, TemplateId: string, requestBody: UpdateTemplatePutBody): Observable<UpdateTemplateResponse> {
			return this.http.put<UpdateTemplateResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a template alias for a template.
		 * Post accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template that you creating an alias for.
		 * @param {string} TemplateId An ID for the template.
		 * @param {string} AliasName The name that you want to give to the template alias that you're creating. Don't start the alias name with the <code>$</code> character. Alias names that start with <code>$</code> are reserved by Amazon QuickSight. 
		 * @return {CreateTemplateAliasResponse} Success
		 */
		CreateTemplateAlias(AwsAccountId: string, TemplateId: string, AliasName: string, requestBody: CreateTemplateAliasPostBody): Observable<CreateTemplateAliasResponse> {
			return this.http.post<CreateTemplateAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the item that the specified template alias points to. If you provide a specific alias, you delete the version of the template that the alias points to.
		 * Delete accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the item to delete.
		 * @param {string} TemplateId The ID for the template that the specified alias is for.
		 * @param {string} AliasName The name for the template alias. To delete a specific alias, you delete the version that the alias points to. You can specify the alias name, or specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. 
		 * @return {DeleteTemplateAliasResponse} Success
		 */
		DeleteTemplateAlias(AwsAccountId: string, TemplateId: string, AliasName: string): Observable<DeleteTemplateAliasResponse> {
			return this.http.delete<DeleteTemplateAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), {});
		}

		/**
		 * Describes the template alias for a template.
		 * Get accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template alias that you're describing.
		 * @param {string} TemplateId The ID for the template.
		 * @param {string} AliasName The name of the template alias that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.
		 * @return {DescribeTemplateAliasResponse} Success
		 */
		DescribeTemplateAlias(AwsAccountId: string, TemplateId: string, AliasName: string): Observable<DescribeTemplateAliasResponse> {
			return this.http.get<DescribeTemplateAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), {});
		}

		/**
		 * Updates the template alias of a template.
		 * Put accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template alias that you're updating.
		 * @param {string} TemplateId The ID for the template.
		 * @param {string} AliasName The alias of the template that you want to update. If you name a specific alias, you update the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.
		 * @return {UpdateTemplateAliasResponse} Success
		 */
		UpdateTemplateAlias(AwsAccountId: string, TemplateId: string, AliasName: string, requestBody: UpdateTemplateAliasPutBody): Observable<UpdateTemplateAliasResponse> {
			return this.http.put<UpdateTemplateAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Creates a theme.</p> <p>A <i>theme</i> is set of configuration options for color and layout. Themes apply to analyses and dashboards. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p>
		 * Post accounts/{AwsAccountId}/themes/{ThemeId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account where you want to store the new theme. 
		 * @param {string} ThemeId An ID for the theme that you want to create. The theme ID is unique per Amazon Web Services Region in each Amazon Web Services account.
		 * @return {CreateThemeResponse} Success
		 */
		CreateTheme(AwsAccountId: string, ThemeId: string, requestBody: CreateThemePostBody): Observable<CreateThemeResponse> {
			return this.http.post<CreateThemeResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a theme.
		 * Delete accounts/{AwsAccountId}/themes/{ThemeId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme that you're deleting.
		 * @param {string} ThemeId An ID for the theme that you want to delete.
		 * @param {number} version_number <p>The version of the theme that you want to delete. </p> <p> <b>Note:</b> If you don't provide a version number, you're using this call to <code>DeleteTheme</code> to delete all versions of the theme.</p>
		 * @return {DeleteThemeResponse} Success
		 */
		DeleteTheme(AwsAccountId: string, ThemeId: string, version_number: number | null | undefined): Observable<DeleteThemeResponse> {
			return this.http.delete<DeleteThemeResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '&version_number=' + version_number, {});
		}

		/**
		 * Describes a theme.
		 * Get accounts/{AwsAccountId}/themes/{ThemeId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme that you're describing.
		 * @param {string} ThemeId The ID for the theme.
		 * @param {number} version_number The version number for the version to describe. If a <code>VersionNumber</code> parameter value isn't provided, the latest version of the theme is described.
		 * @param {string} alias_name The alias of the theme that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the theme by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to themes.
		 * @return {DescribeThemeResponse} Success
		 */
		DescribeTheme(AwsAccountId: string, ThemeId: string, version_number: number | null | undefined, alias_name: string | null | undefined): Observable<DescribeThemeResponse> {
			return this.http.get<DescribeThemeResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '&version_number=' + version_number + '&alias_name=' + (alias_name == null ? '' : encodeURIComponent(alias_name)), {});
		}

		/**
		 * Updates a theme.
		 * Put accounts/{AwsAccountId}/themes/{ThemeId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme that you're updating.
		 * @param {string} ThemeId The ID for the theme.
		 * @return {UpdateThemeResponse} Success
		 */
		UpdateTheme(AwsAccountId: string, ThemeId: string, requestBody: UpdateThemePutBody): Observable<UpdateThemeResponse> {
			return this.http.put<UpdateThemeResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a theme alias for a theme.
		 * Post accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme for the new theme alias.
		 * @param {string} ThemeId An ID for the theme alias.
		 * @param {string} AliasName The name that you want to give to the theme alias that you are creating. The alias name can't begin with a <code>$</code>. Alias names that start with <code>$</code> are reserved by Amazon QuickSight. 
		 * @return {CreateThemeAliasResponse} Success
		 */
		CreateThemeAlias(AwsAccountId: string, ThemeId: string, AliasName: string, requestBody: CreateThemeAliasPostBody): Observable<CreateThemeAliasResponse> {
			return this.http.post<CreateThemeAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the version of the theme that the specified theme alias points to. If you provide a specific alias, you delete the version of the theme that the alias points to.
		 * Delete accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme alias to delete.
		 * @param {string} ThemeId The ID for the theme that the specified alias is for.
		 * @param {string} AliasName The unique name for the theme alias to delete.
		 * @return {DeleteThemeAliasResponse} Success
		 */
		DeleteThemeAlias(AwsAccountId: string, ThemeId: string, AliasName: string): Observable<DeleteThemeAliasResponse> {
			return this.http.delete<DeleteThemeAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), {});
		}

		/**
		 * Describes the alias for a theme.
		 * Get accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme alias that you're describing.
		 * @param {string} ThemeId The ID for the theme.
		 * @param {string} AliasName The name of the theme alias that you want to describe.
		 * @return {DescribeThemeAliasResponse} Success
		 */
		DescribeThemeAlias(AwsAccountId: string, ThemeId: string, AliasName: string): Observable<DescribeThemeAliasResponse> {
			return this.http.get<DescribeThemeAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), {});
		}

		/**
		 * Updates an alias of a theme.
		 * Put accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme alias that you're updating.
		 * @param {string} ThemeId The ID for the theme.
		 * @param {string} AliasName The name of the theme alias that you want to update.
		 * @return {UpdateThemeAliasResponse} Success
		 */
		UpdateThemeAlias(AwsAccountId: string, ThemeId: string, AliasName: string, requestBody: UpdateThemeAliasPutBody): Observable<UpdateThemeAliasResponse> {
			return this.http.put<UpdateThemeAliasResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/aliases/' + (AliasName == null ? '' : encodeURIComponent(AliasName)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Creates a new Q topic.
		 * Post accounts/{AwsAccountId}/topics
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that you want to create a topic in.
		 * @return {CreateTopicResponse} Success
		 */
		CreateTopic(AwsAccountId: string, requestBody: CreateTopicPostBody): Observable<CreateTopicResponse> {
			return this.http.post<CreateTopicResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all of the topics within an account.
		 * Get accounts/{AwsAccountId}/topics
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topics that you want to list.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTopicsResponse} Success
		 */
		ListTopics(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListTopicsResponse> {
			return this.http.get<ListTopicsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Creates a topic refresh schedule.
		 * Post accounts/{AwsAccountId}/topics/{TopicId}/schedules
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic you're creating a refresh schedule for.
		 * @param {string} TopicId The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {CreateTopicRefreshScheduleResponse} Success
		 */
		CreateTopicRefreshSchedule(AwsAccountId: string, TopicId: string, requestBody: CreateTopicRefreshSchedulePostBody): Observable<CreateTopicRefreshScheduleResponse> {
			return this.http.post<CreateTopicRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/schedules', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all of the refresh schedules for a topic.
		 * Get accounts/{AwsAccountId}/topics/{TopicId}/schedules
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic whose refresh schedule you want described.
		 * @param {string} TopicId The ID for the topic that you want to describe. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {ListTopicRefreshSchedulesResponse} Success
		 */
		ListTopicRefreshSchedules(AwsAccountId: string, TopicId: string): Observable<ListTopicRefreshSchedulesResponse> {
			return this.http.get<ListTopicRefreshSchedulesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/schedules', {});
		}

		/**
		 * Creates a new VPC connection.
		 * Post accounts/{AwsAccountId}/vpc-connections
		 * @param {string} AwsAccountId The Amazon Web Services account ID of the account where you want to create a new VPC connection.
		 * @return {CreateVPCConnectionResponse} Success
		 */
		CreateVPCConnection(AwsAccountId: string, requestBody: CreateVPCConnectionPostBody): Observable<CreateVPCConnectionResponse> {
			return this.http.post<CreateVPCConnectionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/vpc-connections', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all of the VPC connections in the current set Amazon Web Services Region of an Amazon Web Services account.
		 * Get accounts/{AwsAccountId}/vpc-connections
		 * @param {string} AwsAccountId The Amazon Web Services account ID of the account that contains the VPC connections that you want to list.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListVPCConnectionsResponse} Success
		 */
		ListVPCConnections(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListVPCConnectionsResponse> {
			return this.http.get<ListVPCConnectionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/vpc-connections&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Deletes a dataset.
		 * Delete accounts/{AwsAccountId}/data-sets/{DataSetId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DeleteDataSetResponse} Success
		 */
		DeleteDataSet(AwsAccountId: string, DataSetId: string): Observable<DeleteDataSetResponse> {
			return this.http.delete<DeleteDataSetResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)), {});
		}

		/**
		 * Describes a dataset. This operation doesn't support datasets that include uploaded files as a source.
		 * Get accounts/{AwsAccountId}/data-sets/{DataSetId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DescribeDataSetResponse} Success
		 */
		DescribeDataSet(AwsAccountId: string, DataSetId: string): Observable<DescribeDataSetResponse> {
			return this.http.get<DescribeDataSetResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)), {});
		}

		/**
		 * Updates a dataset. This operation doesn't support datasets that include uploaded files as a source. Partial updates are not supported by this operation.
		 * Put accounts/{AwsAccountId}/data-sets/{DataSetId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID for the dataset that you want to update. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {UpdateDataSetResponse} Success
		 */
		UpdateDataSet(AwsAccountId: string, DataSetId: string, requestBody: UpdateDataSetPutBody): Observable<UpdateDataSetResponse> {
			return this.http.put<UpdateDataSetResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the dataset refresh properties of the dataset.
		 * Delete accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID of the dataset.
		 * @return {DeleteDataSetRefreshPropertiesResponse} Success
		 */
		DeleteDataSetRefreshProperties(AwsAccountId: string, DataSetId: string): Observable<DeleteDataSetRefreshPropertiesResponse> {
			return this.http.delete<DeleteDataSetRefreshPropertiesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-properties', {});
		}

		/**
		 * Describes the refresh properties of a dataset.
		 * Get accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID of the dataset.
		 * @return {DescribeDataSetRefreshPropertiesResponse} Success
		 */
		DescribeDataSetRefreshProperties(AwsAccountId: string, DataSetId: string): Observable<DescribeDataSetRefreshPropertiesResponse> {
			return this.http.get<DescribeDataSetRefreshPropertiesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-properties', {});
		}

		/**
		 * Creates or updates the dataset refresh properties for the dataset.
		 * Put accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID of the dataset.
		 * @return {PutDataSetRefreshPropertiesResponse} Success
		 */
		PutDataSetRefreshProperties(AwsAccountId: string, DataSetId: string, requestBody: PutDataSetRefreshPropertiesPutBody): Observable<PutDataSetRefreshPropertiesResponse> {
			return this.http.put<PutDataSetRefreshPropertiesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-properties', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the data source permanently. This operation breaks all the datasets that reference the deleted data source.
		 * Delete accounts/{AwsAccountId}/data-sources/{DataSourceId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSourceId The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DeleteDataSourceResponse} Success
		 */
		DeleteDataSource(AwsAccountId: string, DataSourceId: string): Observable<DeleteDataSourceResponse> {
			return this.http.delete<DeleteDataSourceResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sources/' + (DataSourceId == null ? '' : encodeURIComponent(DataSourceId)), {});
		}

		/**
		 * Describes a data source.
		 * Get accounts/{AwsAccountId}/data-sources/{DataSourceId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSourceId The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DescribeDataSourceResponse} Success
		 */
		DescribeDataSource(AwsAccountId: string, DataSourceId: string): Observable<DescribeDataSourceResponse> {
			return this.http.get<DescribeDataSourceResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sources/' + (DataSourceId == null ? '' : encodeURIComponent(DataSourceId)), {});
		}

		/**
		 * Updates a data source.
		 * Put accounts/{AwsAccountId}/data-sources/{DataSourceId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSourceId The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account. 
		 * @return {UpdateDataSourceResponse} Success
		 */
		UpdateDataSource(AwsAccountId: string, DataSourceId: string, requestBody: UpdateDataSourcePutBody): Observable<UpdateDataSourceResponse> {
			return this.http.put<UpdateDataSourceResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sources/' + (DataSourceId == null ? '' : encodeURIComponent(DataSourceId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes a user group from Amazon QuickSight.
		 * Delete accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}
		 * @param {string} GroupName The name of the group that you want to delete.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace of the group that you want to delete.
		 * @return {DeleteGroupResponse} Success
		 */
		DeleteGroup(GroupName: string, AwsAccountId: string, Namespace: string): Observable<DeleteGroupResponse> {
			return this.http.delete<DeleteGroupResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups/' + (GroupName == null ? '' : encodeURIComponent(GroupName)), {});
		}

		/**
		 * Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN).
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}
		 * @param {string} GroupName The name of the group that you want to describe.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace of the group that you want described.
		 * @return {DescribeGroupResponse} Success
		 */
		DescribeGroup(GroupName: string, AwsAccountId: string, Namespace: string): Observable<DescribeGroupResponse> {
			return this.http.get<DescribeGroupResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups/' + (GroupName == null ? '' : encodeURIComponent(GroupName)), {});
		}

		/**
		 * Changes a group description.
		 * Put accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}
		 * @param {string} GroupName The name of the group that you want to update.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace of the group that you want to update.
		 * @return {UpdateGroupResponse} Success
		 */
		UpdateGroup(GroupName: string, AwsAccountId: string, Namespace: string, requestBody: UpdateGroupPutBody): Observable<UpdateGroupResponse> {
			return this.http.put<UpdateGroupResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups/' + (GroupName == null ? '' : encodeURIComponent(GroupName)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes an existing IAM policy assignment.
		 * Delete accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}
		 * @param {string} AwsAccountId The Amazon Web Services account ID where you want to delete the IAM policy assignment.
		 * @param {string} AssignmentName The name of the assignment. 
		 * @param {string} Namespace The namespace that contains the assignment.
		 * @return {DeleteIAMPolicyAssignmentResponse} Success
		 */
		DeleteIAMPolicyAssignment(AwsAccountId: string, AssignmentName: string, Namespace: string): Observable<DeleteIAMPolicyAssignmentResponse> {
			return this.http.delete<DeleteIAMPolicyAssignmentResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespace/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/iam-policy-assignments/' + (AssignmentName == null ? '' : encodeURIComponent(AssignmentName)), {});
		}

		/**
		 * Deletes a namespace and the users and groups that are associated with the namespace. This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not deleted. To delete these assets, you use the API operations for the relevant asset.
		 * Delete accounts/{AwsAccountId}/namespaces/{Namespace}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that you want to delete the Amazon QuickSight namespace from.
		 * @param {string} Namespace The namespace that you want to delete.
		 * @return {DeleteNamespaceResponse} Success
		 */
		DeleteNamespace(AwsAccountId: string, Namespace: string): Observable<DeleteNamespaceResponse> {
			return this.http.delete<DeleteNamespaceResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)), {});
		}

		/**
		 * Describes the current namespace.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the Amazon QuickSight namespace that you want to describe.
		 * @param {string} Namespace The namespace that you want to describe.
		 * @return {DescribeNamespaceResponse} Success
		 */
		DescribeNamespace(AwsAccountId: string, Namespace: string): Observable<DescribeNamespaceResponse> {
			return this.http.get<DescribeNamespaceResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)), {});
		}

		/**
		 * Deletes a refresh schedule from a dataset.
		 * Delete accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}
		 * @param {string} DataSetId The ID of the dataset.
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} ScheduleId The ID of the refresh schedule.
		 * @return {DeleteRefreshScheduleResponse} Success
		 */
		DeleteRefreshSchedule(DataSetId: string, AwsAccountId: string, ScheduleId: string): Observable<DeleteRefreshScheduleResponse> {
			return this.http.delete<DeleteRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-schedules/' + (ScheduleId == null ? '' : encodeURIComponent(ScheduleId)), {});
		}

		/**
		 * Provides a summary of a refresh schedule.
		 * Get accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID of the dataset.
		 * @param {string} ScheduleId The ID of the refresh schedule.
		 * @return {DescribeRefreshScheduleResponse} Success
		 */
		DescribeRefreshSchedule(AwsAccountId: string, DataSetId: string, ScheduleId: string): Observable<DescribeRefreshScheduleResponse> {
			return this.http.get<DescribeRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/refresh-schedules/' + (ScheduleId == null ? '' : encodeURIComponent(ScheduleId)), {});
		}

		/**
		 * Deletes a topic.
		 * Delete accounts/{AwsAccountId}/topics/{TopicId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic that you want to delete.
		 * @param {string} TopicId The ID of the topic that you want to delete. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DeleteTopicResponse} Success
		 */
		DeleteTopic(AwsAccountId: string, TopicId: string): Observable<DeleteTopicResponse> {
			return this.http.delete<DeleteTopicResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)), {});
		}

		/**
		 * Describes a topic.
		 * Get accounts/{AwsAccountId}/topics/{TopicId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} TopicId The ID of the topic that you want to describe. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DescribeTopicResponse} Success
		 */
		DescribeTopic(AwsAccountId: string, TopicId: string): Observable<DescribeTopicResponse> {
			return this.http.get<DescribeTopicResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)), {});
		}

		/**
		 * Updates a topic.
		 * Put accounts/{AwsAccountId}/topics/{TopicId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic that you want to update.
		 * @param {string} TopicId The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {UpdateTopicResponse} Success
		 */
		UpdateTopic(AwsAccountId: string, TopicId: string, requestBody: UpdateTopicPutBody): Observable<UpdateTopicResponse> {
			return this.http.put<UpdateTopicResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a topic refresh schedule.
		 * Delete accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} TopicId The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @param {string} DatasetId The ID of the dataset.
		 * @return {DeleteTopicRefreshScheduleResponse} Success
		 */
		DeleteTopicRefreshSchedule(AwsAccountId: string, TopicId: string, DatasetId: string): Observable<DeleteTopicRefreshScheduleResponse> {
			return this.http.delete<DeleteTopicRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/schedules/' + (DatasetId == null ? '' : encodeURIComponent(DatasetId)), {});
		}

		/**
		 * Deletes a topic refresh schedule.
		 * Get accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} TopicId The ID of the topic that contains the refresh schedule that you want to describe. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @param {string} DatasetId The ID of the dataset.
		 * @return {DescribeTopicRefreshScheduleResponse} Success
		 */
		DescribeTopicRefreshSchedule(AwsAccountId: string, TopicId: string, DatasetId: string): Observable<DescribeTopicRefreshScheduleResponse> {
			return this.http.get<DescribeTopicRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/schedules/' + (DatasetId == null ? '' : encodeURIComponent(DatasetId)), {});
		}

		/**
		 * Updates a topic refresh schedule.
		 * Put accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic whose refresh schedule you want to update.
		 * @param {string} TopicId The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @param {string} DatasetId The ID of the dataset.
		 * @return {UpdateTopicRefreshScheduleResponse} Success
		 */
		UpdateTopicRefreshSchedule(AwsAccountId: string, TopicId: string, DatasetId: string, requestBody: UpdateTopicRefreshSchedulePutBody): Observable<UpdateTopicRefreshScheduleResponse> {
			return this.http.put<UpdateTopicRefreshScheduleResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/schedules/' + (DatasetId == null ? '' : encodeURIComponent(DatasetId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes the Amazon QuickSight user that is associated with the identity of the IAM user or role that's making the call. The IAM user isn't deleted as a result of this call.
		 * Delete accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}
		 * @param {string} UserName The name of the user that you want to delete.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace. Currently, you should set this to <code>default</code>.
		 * @return {DeleteUserResponse} Success
		 */
		DeleteUser(UserName: string, AwsAccountId: string, Namespace: string): Observable<DeleteUserResponse> {
			return this.http.delete<DeleteUserResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/users/' + (UserName == null ? '' : encodeURIComponent(UserName)), {});
		}

		/**
		 * Returns information about a user, given the user name.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}
		 * @param {string} UserName The name of the user that you want to describe.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace. Currently, you should set this to <code>default</code>.
		 * @return {DescribeUserResponse} Success
		 */
		DescribeUser(UserName: string, AwsAccountId: string, Namespace: string): Observable<DescribeUserResponse> {
			return this.http.get<DescribeUserResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/users/' + (UserName == null ? '' : encodeURIComponent(UserName)), {});
		}

		/**
		 * Updates an Amazon QuickSight user.
		 * Put accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}
		 * @param {string} UserName The Amazon QuickSight user name that you want to update.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace. Currently, you should set this to <code>default</code>.
		 * @return {UpdateUserResponse} Success
		 */
		UpdateUser(UserName: string, AwsAccountId: string, Namespace: string, requestBody: UpdateUserPutBody): Observable<UpdateUserResponse> {
			return this.http.put<UpdateUserResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/users/' + (UserName == null ? '' : encodeURIComponent(UserName)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Deletes a user identified by its principal ID.
		 * Delete accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}
		 * @param {string} PrincipalId The principal ID of the user.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace. Currently, you should set this to <code>default</code>.
		 * @return {DeleteUserByPrincipalIdResponse} Success
		 */
		DeleteUserByPrincipalId(PrincipalId: string, AwsAccountId: string, Namespace: string): Observable<DeleteUserByPrincipalIdResponse> {
			return this.http.delete<DeleteUserByPrincipalIdResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/user-principals/' + (PrincipalId == null ? '' : encodeURIComponent(PrincipalId)), {});
		}

		/**
		 * Deletes a VPC connection.
		 * Delete accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID of the account where you want to delete a VPC connection.
		 * @param {string} VPCConnectionId The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.
		 * @return {DeleteVPCConnectionResponse} Success
		 */
		DeleteVPCConnection(AwsAccountId: string, VPCConnectionId: string): Observable<DeleteVPCConnectionResponse> {
			return this.http.delete<DeleteVPCConnectionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/vpc-connections/' + (VPCConnectionId == null ? '' : encodeURIComponent(VPCConnectionId)), {});
		}

		/**
		 * Describes a VPC connection.
		 * Get accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID of the account that contains the VPC connection that you want described.
		 * @param {string} VPCConnectionId The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.
		 * @return {DescribeVPCConnectionResponse} Success
		 */
		DescribeVPCConnection(AwsAccountId: string, VPCConnectionId: string): Observable<DescribeVPCConnectionResponse> {
			return this.http.get<DescribeVPCConnectionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/vpc-connections/' + (VPCConnectionId == null ? '' : encodeURIComponent(VPCConnectionId)), {});
		}

		/**
		 * Updates a VPC connection.
		 * Put accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}
		 * @param {string} AwsAccountId The Amazon Web Services account ID of the account that contains the VPC connection that you want to update.
		 * @param {string} VPCConnectionId The ID of the VPC connection that you're updating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.
		 * @return {UpdateVPCConnectionResponse} Success
		 */
		UpdateVPCConnection(AwsAccountId: string, VPCConnectionId: string, requestBody: UpdateVPCConnectionPutBody): Observable<UpdateVPCConnectionResponse> {
			return this.http.put<UpdateVPCConnectionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/vpc-connections/' + (VPCConnectionId == null ? '' : encodeURIComponent(VPCConnectionId)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the settings that were used when your Amazon QuickSight subscription was first created in this Amazon Web Services account.
		 * Get accounts/{AwsAccountId}/settings
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the settings that you want to list.
		 * @return {DescribeAccountSettingsResponse} Success
		 */
		DescribeAccountSettings(AwsAccountId: string): Observable<DescribeAccountSettingsResponse> {
			return this.http.get<DescribeAccountSettingsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/settings', {});
		}

		/**
		 * Updates the Amazon QuickSight settings in your Amazon Web Services account.
		 * Put accounts/{AwsAccountId}/settings
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the Amazon QuickSight settings that you want to list.
		 * @return {UpdateAccountSettingsResponse} Success
		 */
		UpdateAccountSettings(AwsAccountId: string, requestBody: UpdateAccountSettingsPutBody): Observable<UpdateAccountSettingsResponse> {
			return this.http.put<UpdateAccountSettingsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/settings', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Provides a detailed description of the definition of an analysis.</p> <note> <p>If you do not need to know details about the content of an Analysis, for instance if you are trying to check the status of a recently created or updated Analysis, use the <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeAnalysis.html"> <code>DescribeAnalysis</code> </a> instead. </p> </note>
		 * Get accounts/{AwsAccountId}/analyses/{AnalysisId}/definition
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analysis. You must be using the Amazon Web Services account that the analysis is in.
		 * @param {string} AnalysisId The ID of the analysis that you're describing. The ID is part of the URL of the analysis.
		 * @return {DescribeAnalysisDefinitionResponse} Success
		 */
		DescribeAnalysisDefinition(AwsAccountId: string, AnalysisId: string): Observable<DescribeAnalysisDefinitionResponse> {
			return this.http.get<DescribeAnalysisDefinitionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)) + '/definition', {});
		}

		/**
		 * Provides the read and write permissions for an analysis.
		 * Get accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analysis whose permissions you're describing. You must be using the Amazon Web Services account that the analysis is in.
		 * @param {string} AnalysisId The ID of the analysis whose permissions you're describing. The ID is part of the analysis URL.
		 * @return {DescribeAnalysisPermissionsResponse} Success
		 */
		DescribeAnalysisPermissions(AwsAccountId: string, AnalysisId: string): Observable<DescribeAnalysisPermissionsResponse> {
			return this.http.get<DescribeAnalysisPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)) + '/permissions', {});
		}

		/**
		 * Updates the read and write permissions for an analysis.
		 * Put accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analysis whose permissions you're updating. You must be using the Amazon Web Services account that the analysis is in.
		 * @param {string} AnalysisId The ID of the analysis whose permissions you're updating. The ID is part of the analysis URL.
		 * @return {UpdateAnalysisPermissionsResponse} Success
		 */
		UpdateAnalysisPermissions(AwsAccountId: string, AnalysisId: string, requestBody: UpdateAnalysisPermissionsPutBody): Observable<UpdateAnalysisPermissionsResponse> {
			return this.http.put<UpdateAnalysisPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Describes an existing export job.</p> <p>Poll job descriptions after a job starts to know the status of the job. When a job succeeds, a URL is provided to download the exported assets' data from. Download URLs are valid for five minutes after they are generated. You can call the <code>DescribeAssetBundleExportJob</code> API for a new download URL as needed.</p> <p>Job descriptions are available for 14 days after the job starts.</p>
		 * Get accounts/{AwsAccountId}/asset-bundle-export-jobs/{AssetBundleExportJobId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account the export job is executed in. 
		 * @param {string} AssetBundleExportJobId The ID of the job that you want described. The job ID is set when you start a new job with a <code>StartAssetBundleExportJob</code> API call.
		 * @return {DescribeAssetBundleExportJobResponse} Success
		 */
		DescribeAssetBundleExportJob(AwsAccountId: string, AssetBundleExportJobId: string): Observable<DescribeAssetBundleExportJobResponse> {
			return this.http.get<DescribeAssetBundleExportJobResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/asset-bundle-export-jobs/' + (AssetBundleExportJobId == null ? '' : encodeURIComponent(AssetBundleExportJobId)), {});
		}

		/**
		 * <p>Describes an existing import job.</p> <p>Poll job descriptions after starting a job to know when it has succeeded or failed. Job descriptions are available for 14 days after job starts.</p>
		 * Get accounts/{AwsAccountId}/asset-bundle-import-jobs/{AssetBundleImportJobId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account the import job was executed in. 
		 * @param {string} AssetBundleImportJobId The ID of the job. The job ID is set when you start a new job with a <code>StartAssetBundleImportJob</code> API call.
		 * @return {DescribeAssetBundleImportJobResponse} Success
		 */
		DescribeAssetBundleImportJob(AwsAccountId: string, AssetBundleImportJobId: string): Observable<DescribeAssetBundleImportJobResponse> {
			return this.http.get<DescribeAssetBundleImportJobResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/asset-bundle-import-jobs/' + (AssetBundleImportJobId == null ? '' : encodeURIComponent(AssetBundleImportJobId)), {});
		}

		/**
		 * <p>Provides a detailed description of the definition of a dashboard.</p> <note> <p>If you do not need to know details about the content of a dashboard, for instance if you are trying to check the status of a recently created or updated dashboard, use the <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeDashboard.html"> <code>DescribeDashboard</code> </a> instead. </p> </note>
		 * Get accounts/{AwsAccountId}/dashboards/{DashboardId}/definition
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard that you're describing.
		 * @param {string} DashboardId The ID for the dashboard.
		 * @param {number} version_number The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. 
		 * @param {string} alias_name The alias name.
		 * @return {DescribeDashboardDefinitionResponse} Success
		 */
		DescribeDashboardDefinition(AwsAccountId: string, DashboardId: string, version_number: number | null | undefined, alias_name: string | null | undefined): Observable<DescribeDashboardDefinitionResponse> {
			return this.http.get<DescribeDashboardDefinitionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/definition&version_number=' + version_number + '&alias_name=' + (alias_name == null ? '' : encodeURIComponent(alias_name)), {});
		}

		/**
		 * Describes read and write permissions for a dashboard.
		 * Get accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard that you're describing permissions for.
		 * @param {string} DashboardId The ID for the dashboard, also added to the IAM policy.
		 * @return {DescribeDashboardPermissionsResponse} Success
		 */
		DescribeDashboardPermissions(AwsAccountId: string, DashboardId: string): Observable<DescribeDashboardPermissionsResponse> {
			return this.http.get<DescribeDashboardPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/permissions', {});
		}

		/**
		 * Updates read and write permissions on a dashboard.
		 * Put accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard whose permissions you're updating.
		 * @param {string} DashboardId The ID for the dashboard.
		 * @return {UpdateDashboardPermissionsResponse} Success
		 */
		UpdateDashboardPermissions(AwsAccountId: string, DashboardId: string, requestBody: UpdateDashboardPermissionsPutBody): Observable<UpdateDashboardPermissionsResponse> {
			return this.http.put<UpdateDashboardPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Describes an existing snapshot job.</p> <p>Poll job descriptions after a job starts to know the status of the job. For information on available status codes, see <code>JobStatus</code>.</p>
		 * Get accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs/{SnapshotJobId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.
		 * @param {string} DashboardId The ID of the dashboard that you have started a snapshot job for.
		 * @param {string} SnapshotJobId The ID of the job to be described. The job ID is set when you start a new job with a <code>StartDashboardSnapshotJob</code> API call.
		 * @return {DescribeDashboardSnapshotJobResponse} Success
		 */
		DescribeDashboardSnapshotJob(AwsAccountId: string, DashboardId: string, SnapshotJobId: string): Observable<DescribeDashboardSnapshotJobResponse> {
			return this.http.get<DescribeDashboardSnapshotJobResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/snapshot-jobs/' + (SnapshotJobId == null ? '' : encodeURIComponent(SnapshotJobId)), {});
		}

		/**
		 * <p>Describes the result of an existing snapshot job that has finished running.</p> <p>A finished snapshot job will return a <code>COMPLETED</code> or <code>FAILED</code> status when you poll the job with a <code>DescribeDashboardSnapshotJob</code> API call.</p> <p>If the job has not finished running, this operation returns a message that says <code>Dashboard Snapshot Job with id &lt;SnapshotjobId&gt; has not reached a terminal state.</code>.</p>
		 * Get accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs/{SnapshotJobId}/result
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.
		 * @param {string} DashboardId The ID of the dashboard that you have started a snapshot job for.
		 * @param {string} SnapshotJobId The ID of the job to be described. The job ID is set when you start a new job with a <code>StartDashboardSnapshotJob</code> API call.
		 * @return {DescribeDashboardSnapshotJobResultResponse} Success
		 */
		DescribeDashboardSnapshotJobResult(AwsAccountId: string, DashboardId: string, SnapshotJobId: string): Observable<DescribeDashboardSnapshotJobResultResponse> {
			return this.http.get<DescribeDashboardSnapshotJobResultResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/snapshot-jobs/' + (SnapshotJobId == null ? '' : encodeURIComponent(SnapshotJobId)) + '/result', {});
		}

		/**
		 * <p>Describes the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
		 * Get accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DescribeDataSetPermissionsResponse} Success
		 */
		DescribeDataSetPermissions(AwsAccountId: string, DataSetId: string): Observable<DescribeDataSetPermissionsResponse> {
			return this.http.get<DescribeDataSetPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/permissions', {});
		}

		/**
		 * <p>Updates the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
		 * Post accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSetId The ID for the dataset whose permissions you want to update. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {UpdateDataSetPermissionsResponse} Success
		 */
		UpdateDataSetPermissions(AwsAccountId: string, DataSetId: string, requestBody: UpdateDataSetPermissionsPostBody): Observable<UpdateDataSetPermissionsResponse> {
			return this.http.post<UpdateDataSetPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the resource permissions for a data source.
		 * Get accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSourceId The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DescribeDataSourcePermissionsResponse} Success
		 */
		DescribeDataSourcePermissions(AwsAccountId: string, DataSourceId: string): Observable<DescribeDataSourcePermissionsResponse> {
			return this.http.get<DescribeDataSourcePermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sources/' + (DataSourceId == null ? '' : encodeURIComponent(DataSourceId)) + '/permissions', {});
		}

		/**
		 * Updates the permissions to a data source.
		 * Post accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} DataSourceId The ID of the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account. 
		 * @return {UpdateDataSourcePermissionsResponse} Success
		 */
		UpdateDataSourcePermissions(AwsAccountId: string, DataSourceId: string, requestBody: UpdateDataSourcePermissionsPostBody): Observable<UpdateDataSourcePermissionsResponse> {
			return this.http.post<UpdateDataSourcePermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sources/' + (DataSourceId == null ? '' : encodeURIComponent(DataSourceId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes permissions for a folder.
		 * Get accounts/{AwsAccountId}/folders/{FolderId}/permissions
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} FolderId The ID of the folder.
		 * @return {DescribeFolderPermissionsResponse} Success
		 */
		DescribeFolderPermissions(AwsAccountId: string, FolderId: string): Observable<DescribeFolderPermissionsResponse> {
			return this.http.get<DescribeFolderPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)) + '/permissions', {});
		}

		/**
		 * Updates permissions of a folder.
		 * Put accounts/{AwsAccountId}/folders/{FolderId}/permissions
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder to update.
		 * @param {string} FolderId The ID of the folder.
		 * @return {UpdateFolderPermissionsResponse} Success
		 */
		UpdateFolderPermissions(AwsAccountId: string, FolderId: string, requestBody: UpdateFolderPermissionsPutBody): Observable<UpdateFolderPermissionsResponse> {
			return this.http.put<UpdateFolderPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the folder resolved permissions. Permissions consists of both folder direct permissions and the inherited permissions from the ancestor folders.
		 * Get accounts/{AwsAccountId}/folders/{FolderId}/resolved-permissions
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} FolderId The ID of the folder.
		 * @return {DescribeFolderResolvedPermissionsResponse} Success
		 */
		DescribeFolderResolvedPermissions(AwsAccountId: string, FolderId: string): Observable<DescribeFolderResolvedPermissionsResponse> {
			return this.http.get<DescribeFolderResolvedPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)) + '/resolved-permissions', {});
		}

		/**
		 * Describes an existing IAM policy assignment, as specified by the assignment name.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the assignment that you want to describe.
		 * @param {string} AssignmentName The name of the assignment, also called a rule.
		 * @param {string} Namespace The namespace that contains the assignment.
		 * @return {DescribeIAMPolicyAssignmentResponse} Success
		 */
		DescribeIAMPolicyAssignment(AwsAccountId: string, AssignmentName: string, Namespace: string): Observable<DescribeIAMPolicyAssignmentResponse> {
			return this.http.get<DescribeIAMPolicyAssignmentResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/iam-policy-assignments/' + (AssignmentName == null ? '' : encodeURIComponent(AssignmentName)), {});
		}

		/**
		 * Updates an existing IAM policy assignment. This operation updates only the optional parameter or parameters that are specified in the request. This overwrites all of the users included in <code>Identities</code>.
		 * Put accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the IAM policy assignment. 
		 * @param {string} AssignmentName The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.
		 * @param {string} Namespace The namespace of the assignment.
		 * @return {UpdateIAMPolicyAssignmentResponse} Success
		 */
		UpdateIAMPolicyAssignment(AwsAccountId: string, AssignmentName: string, Namespace: string, requestBody: UpdateIAMPolicyAssignmentPutBody): Observable<UpdateIAMPolicyAssignmentResponse> {
			return this.http.put<UpdateIAMPolicyAssignmentResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/iam-policy-assignments/' + (AssignmentName == null ? '' : encodeURIComponent(AssignmentName)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Provides a summary and status of IP rules.
		 * Get accounts/{AwsAccountId}/ip-restriction
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the IP rules.
		 * @return {DescribeIpRestrictionResponse} Success
		 */
		DescribeIpRestriction(AwsAccountId: string): Observable<DescribeIpRestrictionResponse> {
			return this.http.get<DescribeIpRestrictionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/ip-restriction', {});
		}

		/**
		 * Updates the content and status of IP rules. To use this operation, you must provide the entire map of rules. You can use the <code>DescribeIpRestriction</code> operation to get the current rule map.
		 * Post accounts/{AwsAccountId}/ip-restriction
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the IP rules.
		 * @return {UpdateIpRestrictionResponse} Success
		 */
		UpdateIpRestriction(AwsAccountId: string, requestBody: UpdateIpRestrictionPostBody): Observable<UpdateIpRestrictionResponse> {
			return this.http.post<UpdateIpRestrictionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/ip-restriction', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Provides a detailed description of the definition of a template.</p> <note> <p>If you do not need to know details about the content of a template, for instance if you are trying to check the status of a recently created or updated template, use the <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeTemplate.html"> <code>DescribeTemplate</code> </a> instead. </p> </note>
		 * Get accounts/{AwsAccountId}/templates/{TemplateId}/definition
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template. You must be using the Amazon Web Services account that the template is in.
		 * @param {string} TemplateId The ID of the template that you're describing.
		 * @param {number} version_number The version number of the template.
		 * @param {string} alias_name The alias of the template that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.
		 * @return {DescribeTemplateDefinitionResponse} Success
		 */
		DescribeTemplateDefinition(AwsAccountId: string, TemplateId: string, version_number: number | null | undefined, alias_name: string | null | undefined): Observable<DescribeTemplateDefinitionResponse> {
			return this.http.get<DescribeTemplateDefinitionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/definition&version_number=' + version_number + '&alias_name=' + (alias_name == null ? '' : encodeURIComponent(alias_name)), {});
		}

		/**
		 * Describes read and write permissions on a template.
		 * Get accounts/{AwsAccountId}/templates/{TemplateId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template that you're describing.
		 * @param {string} TemplateId The ID for the template.
		 * @return {DescribeTemplatePermissionsResponse} Success
		 */
		DescribeTemplatePermissions(AwsAccountId: string, TemplateId: string): Observable<DescribeTemplatePermissionsResponse> {
			return this.http.get<DescribeTemplatePermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/permissions', {});
		}

		/**
		 * Updates the resource permissions for a template.
		 * Put accounts/{AwsAccountId}/templates/{TemplateId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template.
		 * @param {string} TemplateId The ID for the template.
		 * @return {UpdateTemplatePermissionsResponse} Success
		 */
		UpdateTemplatePermissions(AwsAccountId: string, TemplateId: string, requestBody: UpdateTemplatePermissionsPutBody): Observable<UpdateTemplatePermissionsResponse> {
			return this.http.put<UpdateTemplatePermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the read and write permissions for a theme.
		 * Get accounts/{AwsAccountId}/themes/{ThemeId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme that you're describing.
		 * @param {string} ThemeId The ID for the theme that you want to describe permissions for.
		 * @return {DescribeThemePermissionsResponse} Success
		 */
		DescribeThemePermissions(AwsAccountId: string, ThemeId: string): Observable<DescribeThemePermissionsResponse> {
			return this.http.get<DescribeThemePermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/permissions', {});
		}

		/**
		 * <p>Updates the resource permissions for a theme. Permissions apply to the action to grant or revoke permissions on, for example <code>"quicksight:DescribeTheme"</code>.</p> <p>Theme permissions apply in groupings. Valid groupings include the following for the three levels of permissions, which are user, owner, or no permissions: </p> <ul> <li> <p>User</p> <ul> <li> <p> <code>"quicksight:DescribeTheme"</code> </p> </li> <li> <p> <code>"quicksight:DescribeThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeAliases"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeVersions"</code> </p> </li> </ul> </li> <li> <p>Owner</p> <ul> <li> <p> <code>"quicksight:DescribeTheme"</code> </p> </li> <li> <p> <code>"quicksight:DescribeThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeAliases"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeVersions"</code> </p> </li> <li> <p> <code>"quicksight:DeleteTheme"</code> </p> </li> <li> <p> <code>"quicksight:UpdateTheme"</code> </p> </li> <li> <p> <code>"quicksight:CreateThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:DeleteThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:UpdateThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:UpdateThemePermissions"</code> </p> </li> <li> <p> <code>"quicksight:DescribeThemePermissions"</code> </p> </li> </ul> </li> <li> <p>To specify no permissions, omit the permissions list.</p> </li> </ul>
		 * Put accounts/{AwsAccountId}/themes/{ThemeId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme.
		 * @param {string} ThemeId The ID for the theme.
		 * @return {UpdateThemePermissionsResponse} Success
		 */
		UpdateThemePermissions(AwsAccountId: string, ThemeId: string, requestBody: UpdateThemePermissionsPutBody): Observable<UpdateThemePermissionsResponse> {
			return this.http.put<UpdateThemePermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the permissions of a topic.
		 * Get accounts/{AwsAccountId}/topics/{TopicId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic that you want described.
		 * @param {string} TopicId The ID of the topic that you want to describe. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {DescribeTopicPermissionsResponse} Success
		 */
		DescribeTopicPermissions(AwsAccountId: string, TopicId: string): Observable<DescribeTopicPermissionsResponse> {
			return this.http.get<DescribeTopicPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/permissions', {});
		}

		/**
		 * Updates the permissions of a topic.
		 * Put accounts/{AwsAccountId}/topics/{TopicId}/permissions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic that you want to update the permissions for.
		 * @param {string} TopicId The ID of the topic that you want to modify. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @return {UpdateTopicPermissionsResponse} Success
		 */
		UpdateTopicPermissions(AwsAccountId: string, TopicId: string, requestBody: UpdateTopicPermissionsPutBody): Observable<UpdateTopicPermissionsResponse> {
			return this.http.put<UpdateTopicPermissionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/permissions', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Describes the status of a topic refresh.
		 * Get accounts/{AwsAccountId}/topics/{TopicId}/refresh/{RefreshId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the topic whose refresh you want to describe.
		 * @param {string} TopicId The ID of the topic that you want to describe. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * @param {string} RefreshId The ID of the refresh, which is performed when the topic is created or updated.
		 * @return {DescribeTopicRefreshResponse} Success
		 */
		DescribeTopicRefresh(AwsAccountId: string, TopicId: string, RefreshId: string): Observable<DescribeTopicRefreshResponse> {
			return this.http.get<DescribeTopicRefreshResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/topics/' + (TopicId == null ? '' : encodeURIComponent(TopicId)) + '/refresh/' + (RefreshId == null ? '' : encodeURIComponent(RefreshId)), {});
		}

		/**
		 * <p>Generates an embed URL that you can use to embed an Amazon QuickSight dashboard or visual in your website, without having to register any reader users. Before you use this action, make sure that you have configured the dashboards and permissions.</p> <p>The following rules apply to the generated URL:</p> <ul> <li> <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p> </li> <li> <p>The URL validity period should not be confused with the actual session lifetime that can be customized using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForAnonymousUser.html#QS-GenerateEmbedUrlForAnonymousUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a> </code> parameter. The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p> </li> <li> <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
		 * Post accounts/{AwsAccountId}/embed-url/anonymous-user
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the dashboard that you're embedding.
		 * @return {GenerateEmbedUrlForAnonymousUserResponse} Success
		 */
		GenerateEmbedUrlForAnonymousUser(AwsAccountId: string, requestBody: GenerateEmbedUrlForAnonymousUserPostBody): Observable<GenerateEmbedUrlForAnonymousUserResponse> {
			return this.http.post<GenerateEmbedUrlForAnonymousUserResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/embed-url/anonymous-user', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Generates an embed URL that you can use to embed an Amazon QuickSight experience in your website. This action can be used for any type of user registered in an Amazon QuickSight account. Before you use this action, make sure that you have configured the relevant Amazon QuickSight resource and permissions.</p> <p>The following rules apply to the generated URL:</p> <ul> <li> <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p> </li> <li> <p>The URL validity period should not be confused with the actual session lifetime that can be customized using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForRegisteredUser.html#QS-GenerateEmbedUrlForRegisteredUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a> </code> parameter.</p> <p>The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p> </li> <li> <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
		 * Post accounts/{AwsAccountId}/embed-url/registered-user
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the dashboard that you're embedding.
		 * @return {GenerateEmbedUrlForRegisteredUserResponse} Success
		 */
		GenerateEmbedUrlForRegisteredUser(AwsAccountId: string, requestBody: GenerateEmbedUrlForRegisteredUserPostBody): Observable<GenerateEmbedUrlForRegisteredUserResponse> {
			return this.http.post<GenerateEmbedUrlForRegisteredUserResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/embed-url/registered-user', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Generates a temporary session URL and authorization code(bearer token) that you can use to embed an Amazon QuickSight read-only dashboard in your website or application. Before you use this command, make sure that you have configured the dashboards and permissions. </p> <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not from the user's browser. The following rules apply to the generated URL:</p> <ul> <li> <p>They must be used together.</p> </li> <li> <p>They can be used one time only.</p> </li> <li> <p>They are valid for 5 minutes after you run this command.</p> </li> <li> <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p> </li> <li> <p>The resulting user session is valid for 15 minutes (default) up to 10 hours (maximum). You can use the optional <code>SessionLifetimeInMinutes</code> parameter to customize session duration.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics-deprecated.html">Embedding Analytics Using GetDashboardEmbedUrl</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p>
		 * Get accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url#creds-type
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the dashboard that you're embedding.
		 * @param {string} DashboardId The ID for the dashboard, also added to the Identity and Access Management (IAM) policy.
		 * @param {EmbeddingIdentityType} creds_type The authentication method that the user uses to sign in.
		 * @param {number} session_lifetime How many minutes the session is valid. The session lifetime must be 15-600 minutes.
		 * @param {boolean} undo_redo_disabled Remove the undo/redo button on the embedded dashboard. The default is FALSE, which enables the undo/redo button.
		 * @param {boolean} reset_disabled Remove the reset button on the embedded dashboard. The default is FALSE, which enables the reset button.
		 * @param {boolean} state_persistence_enabled Adds persistence of state for the user session in an embedded dashboard. Persistence applies to the sheet and the parameter settings. These are control settings that the dashboard subscriber (Amazon QuickSight reader) chooses while viewing the dashboard. If this is set to <code>TRUE</code>, the settings are the same when the subscriber reopens the same dashboard URL. The state is stored in Amazon QuickSight, not in a browser cookie. If this is set to FALSE, the state of the user session is not persisted. The default is <code>FALSE</code>.
		 * @param {string} user_arn <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any Amazon QuickSight users in your account (readers, authors, or admins) authenticated as one of the following:</p> <ul> <li> <p>Active Directory (AD) users or group members</p> </li> <li> <p>Invited nonfederated users</p> </li> <li> <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation.</p> </li> </ul> <p>Omit this parameter for users in the third group – IAM users and IAM role-based sessions.</p>
		 * @param {string} namespace The Amazon QuickSight namespace that contains the dashboard IDs in this request. If you're not using a custom namespace, set <code>Namespace = default</code>.
		 * @param {Array<string>} additional_dashboard_ids A list of one or more dashboard IDs that you want anonymous users to have tempporary access to. Currently, the <code>IdentityType</code> parameter must be set to <code>ANONYMOUS</code> because other identity types authenticate as Amazon QuickSight or IAM users. For example, if you set "<code>--dashboard-id dash_id1 --dashboard-id dash_id2 dash_id3 identity-type ANONYMOUS</code>", the session can access all three dashboards.
		 * @return {GetDashboardEmbedUrlResponse} Success
		 */
		GetDashboardEmbedUrl(AwsAccountId: string, DashboardId: string, creds_type: EmbeddingIdentityType, session_lifetime: number | null | undefined, undo_redo_disabled: boolean | null | undefined, reset_disabled: boolean | null | undefined, state_persistence_enabled: boolean | null | undefined, user_arn: string | null | undefined, namespace: string | null | undefined, additional_dashboard_ids: Array<string> | null | undefined): Observable<GetDashboardEmbedUrlResponse> {
			return this.http.get<GetDashboardEmbedUrlResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/embed-url#creds-type&creds_type=' + creds_type + '&session_lifetime=' + session_lifetime + '&undo_redo_disabled=' + undo_redo_disabled + '&reset_disabled=' + reset_disabled + '&state_persistence_enabled=' + state_persistence_enabled + '&user_arn=' + (user_arn == null ? '' : encodeURIComponent(user_arn)) + '&namespace=' + (namespace == null ? '' : encodeURIComponent(namespace)) + '&' + additional_dashboard_ids?.map(z => `additional-dashboard-ids=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * <p>Generates a session URL and authorization code that you can use to embed the Amazon Amazon QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where you want to provide an authoring portal that allows users to create data sources, datasets, analyses, and dashboards. The users who access an embedded Amazon QuickSight console need belong to the author or admin security cohort. If you want to restrict permissions to some of these features, add a custom permissions profile to the user with the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> API operation. Use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RegisterUser.html">RegisterUser</a> </code> API operation to add a new user with a custom permission profile attached. For more information, see the following sections in the <i>Amazon QuickSight User Guide</i>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedding Analytics</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a> </p> </li> </ul>
		 * Get accounts/{AwsAccountId}/session-embed-url
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account associated with your Amazon QuickSight subscription.
		 * @param {string} entry_point <p>The URL you use to access the embedded session. The entry point URL is constrained to the following paths:</p> <ul> <li> <p> <code>/start</code> </p> </li> <li> <p> <code>/start/analyses</code> </p> </li> <li> <p> <code>/start/dashboards</code> </p> </li> <li> <p> <code>/start/favorites</code> </p> </li> <li> <p> <code>/dashboards/<i>DashboardId</i> </code> - where <code>DashboardId</code> is the actual ID key from the Amazon QuickSight console URL of the dashboard</p> </li> <li> <p> <code>/analyses/<i>AnalysisId</i> </code> - where <code>AnalysisId</code> is the actual ID key from the Amazon QuickSight console URL of the analysis</p> </li> </ul>
		 * @param {number} session_lifetime How many minutes the session is valid. The session lifetime must be 15-600 minutes.
		 * @param {string} user_arn <p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any type of Amazon QuickSight users in your account (readers, authors, or admins). They need to be authenticated as one of the following:</p> <ol> <li> <p>Active Directory (AD) users or group members</p> </li> <li> <p>Invited nonfederated users</p> </li> <li> <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation</p> </li> </ol> <p>Omit this parameter for users in the third group, IAM users and IAM role-based sessions.</p>
		 * @return {GetSessionEmbedUrlResponse} Success
		 */
		GetSessionEmbedUrl(AwsAccountId: string, entry_point: string | null | undefined, session_lifetime: number | null | undefined, user_arn: string | null | undefined): Observable<GetSessionEmbedUrlResponse> {
			return this.http.get<GetSessionEmbedUrlResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/session-embed-url&entry_point=' + (entry_point == null ? '' : encodeURIComponent(entry_point)) + '&session_lifetime=' + session_lifetime + '&user_arn=' + (user_arn == null ? '' : encodeURIComponent(user_arn)), {});
		}

		/**
		 * Lists Amazon QuickSight analyses that exist in the specified Amazon Web Services account.
		 * Get accounts/{AwsAccountId}/analyses
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analyses.
		 * @param {string} next_token A pagination token that can be used in a subsequent request.
		 * @param {number} max_results The maximum number of results to return.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAnalysesResponse} Success
		 */
		ListAnalyses(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListAnalysesResponse> {
			return this.http.get<ListAnalysesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/analyses&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all asset bundle export jobs that have been taken place in the last 14 days. Jobs created more than 14 days ago are deleted forever and are not returned. If you are using the same job ID for multiple jobs, <code>ListAssetBundleExportJobs</code> only returns the most recent job that uses the repeated job ID.
		 * Get accounts/{AwsAccountId}/asset-bundle-export-jobs
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that the export jobs were executed in. 
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAssetBundleExportJobsResponse} Success
		 */
		ListAssetBundleExportJobs(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListAssetBundleExportJobsResponse> {
			return this.http.get<ListAssetBundleExportJobsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/asset-bundle-export-jobs&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all asset bundle import jobs that have taken place in the last 14 days. Jobs created more than 14 days ago are deleted forever and are not returned. If you are using the same job ID for multiple jobs, <code>ListAssetBundleImportJobs</code> only returns the most recent job that uses the repeated job ID.
		 * Get accounts/{AwsAccountId}/asset-bundle-import-jobs
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that the import jobs were executed in.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListAssetBundleImportJobsResponse} Success
		 */
		ListAssetBundleImportJobs(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListAssetBundleImportJobsResponse> {
			return this.http.get<ListAssetBundleImportJobsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/asset-bundle-import-jobs&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all the versions of the dashboards in the Amazon QuickSight subscription.
		 * Get accounts/{AwsAccountId}/dashboards/{DashboardId}/versions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard that you're listing versions for.
		 * @param {string} DashboardId The ID for the dashboard.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDashboardVersionsResponse} Success
		 */
		ListDashboardVersions(AwsAccountId: string, DashboardId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListDashboardVersionsResponse> {
			return this.http.get<ListDashboardVersionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/versions&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists dashboards in an Amazon Web Services account.
		 * Get accounts/{AwsAccountId}/dashboards
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboards that you're listing.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListDashboardsResponse} Success
		 */
		ListDashboards(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListDashboardsResponse> {
			return this.http.get<ListDashboardsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * List all assets (<code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code>) in a folder.
		 * Get accounts/{AwsAccountId}/folders/{FolderId}/members
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} FolderId The ID of the folder.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @return {ListFolderMembersResponse} Success
		 */
		ListFolderMembers(AwsAccountId: string, FolderId: string, next_token: string | null | undefined, max_results: number | null | undefined): Observable<ListFolderMembersResponse> {
			return this.http.get<ListFolderMembersResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders/' + (FolderId == null ? '' : encodeURIComponent(FolderId)) + '/members&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results, {});
		}

		/**
		 * Lists all folders in an account.
		 * Get accounts/{AwsAccountId}/folders
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @return {ListFoldersResponse} Success
		 */
		ListFolders(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined): Observable<ListFoldersResponse> {
			return this.http.get<ListFoldersResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/folders&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results, {});
		}

		/**
		 * Lists member users in a group.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members
		 * @param {string} GroupName The name of the group that you want to see a membership list of.
		 * @param {string} next_token A pagination token that can be used in a subsequent request.
		 * @param {number} max_results The maximum number of results to return from this request.
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace of the group that you want a list of users from.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListGroupMembershipsResponse} Success
		 */
		ListGroupMemberships(GroupName: string, next_token: string | null | undefined, max_results: number | null | undefined, AwsAccountId: string, Namespace: string, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListGroupMembershipsResponse> {
			return this.http.get<ListGroupMembershipsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups/' + (GroupName == null ? '' : encodeURIComponent(GroupName)) + '/members&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists the IAM policy assignments in the current Amazon QuickSight account.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/v2/iam-policy-assignments
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains these IAM policy assignments.
		 * @param {AssignmentStatus} assignment_status The status of the assignments.
		 * @param {string} Namespace The namespace for the assignments.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListIAMPolicyAssignmentsResponse} Success
		 */
		ListIAMPolicyAssignments(AwsAccountId: string, assignment_status: AssignmentStatus | null | undefined, Namespace: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListIAMPolicyAssignmentsResponse> {
			return this.http.get<ListIAMPolicyAssignmentsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/v2/iam-policy-assignments&assignment_status=' + assignment_status + '&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all of the IAM policy assignments, including the Amazon Resource Names (ARNs), for the IAM policies assigned to the specified user and group, or groups that the user belongs to.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the assignments.
		 * @param {string} UserName The name of the user.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} Namespace The namespace of the assignment.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListIAMPolicyAssignmentsForUserResponse} Success
		 */
		ListIAMPolicyAssignmentsForUser(AwsAccountId: string, UserName: string, next_token: string | null | undefined, max_results: number | null | undefined, Namespace: string, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListIAMPolicyAssignmentsForUserResponse> {
			return this.http.get<ListIAMPolicyAssignmentsForUserResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/users/' + (UserName == null ? '' : encodeURIComponent(UserName)) + '/iam-policy-assignments&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists the history of SPICE ingestions for a dataset.
		 * Get accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions
		 * @param {string} DataSetId The ID of the dataset used in the ingestion.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListIngestionsResponse} Success
		 */
		ListIngestions(DataSetId: string, next_token: string | null | undefined, AwsAccountId: string, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListIngestionsResponse> {
			return this.http.get<ListIngestionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/data-sets/' + (DataSetId == null ? '' : encodeURIComponent(DataSetId)) + '/ingestions&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists the namespaces for the specified Amazon Web Services account. This operation doesn't list deleted namespaces.
		 * Get accounts/{AwsAccountId}/namespaces
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the Amazon QuickSight namespaces that you want to list.
		 * @param {string} next_token A unique pagination token that can be used in a subsequent request. You will receive a pagination token in the response body of a previous <code>ListNameSpaces</code> API call if there is more data that can be returned. To receive the data, make another <code>ListNamespaces</code> API call with the returned token to retrieve the next page of data. Each token is valid for 24 hours. If you try to make a <code>ListNamespaces</code> API call with an expired token, you will receive a <code>HTTP 400 InvalidNextTokenException</code> error.
		 * @param {number} max_results The maximum number of results to return.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListNamespacesResponse} Success
		 */
		ListNamespaces(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListNamespacesResponse> {
			return this.http.get<ListNamespacesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists the tags assigned to a resource.
		 * Get resources/{ResourceArn}/tags
		 * @param {string} ResourceArn The Amazon Resource Name (ARN) of the resource that you want a list of tags for.
		 * @return {ListTagsForResourceResponse} Success
		 */
		ListTagsForResource(ResourceArn: string): Observable<ListTagsForResourceResponse> {
			return this.http.get<ListTagsForResourceResponse>(this.baseUri + 'resources/' + (ResourceArn == null ? '' : encodeURIComponent(ResourceArn)) + '/tags', {});
		}

		/**
		 * <p>Assigns one or more tags (key-value pairs) to the specified Amazon QuickSight resource. </p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values. You can use the <code>TagResource</code> operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource. Amazon QuickSight supports tagging on data set, data source, dashboard, template, and topic. </p> <p>Tagging for Amazon QuickSight works in a similar way to tagging for other Amazon Web Services services, except for the following:</p> <ul> <li> <p>You can't use tags to track costs for Amazon QuickSight. This isn't possible because you can't tag the resources that Amazon QuickSight costs are based on, for example Amazon QuickSight storage capacity (SPICE), number of users, type of users, and usage metrics.</p> </li> <li> <p>Amazon QuickSight doesn't currently support the tag editor for Resource Groups.</p> </li> </ul>
		 * Post resources/{ResourceArn}/tags
		 * @param {string} ResourceArn The Amazon Resource Name (ARN) of the resource that you want to tag.
		 * @return {TagResourceResponse} Success
		 */
		TagResource(ResourceArn: string, requestBody: TagResourcePostBody): Observable<TagResourceResponse> {
			return this.http.post<TagResourceResponse>(this.baseUri + 'resources/' + (ResourceArn == null ? '' : encodeURIComponent(ResourceArn)) + '/tags', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Lists all the aliases of a template.
		 * Get accounts/{AwsAccountId}/templates/{TemplateId}/aliases
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the template aliases that you're listing.
		 * @param {string} TemplateId The ID for the template.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_result The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTemplateAliasesResponse} Success
		 */
		ListTemplateAliases(AwsAccountId: string, TemplateId: string, next_token: string | null | undefined, max_result: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListTemplateAliasesResponse> {
			return this.http.get<ListTemplateAliasesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/aliases&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_result=' + max_result + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all the versions of the templates in the current Amazon QuickSight account.
		 * Get accounts/{AwsAccountId}/templates/{TemplateId}/versions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the templates that you're listing.
		 * @param {string} TemplateId The ID for the template.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTemplateVersionsResponse} Success
		 */
		ListTemplateVersions(AwsAccountId: string, TemplateId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListTemplateVersionsResponse> {
			return this.http.get<ListTemplateVersionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates/' + (TemplateId == null ? '' : encodeURIComponent(TemplateId)) + '/versions&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all the templates in the current Amazon QuickSight account.
		 * Get accounts/{AwsAccountId}/templates
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the templates that you're listing.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_result The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListTemplatesResponse} Success
		 */
		ListTemplates(AwsAccountId: string, next_token: string | null | undefined, max_result: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListTemplatesResponse> {
			return this.http.get<ListTemplatesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/templates&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_result=' + max_result + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all the aliases of a theme.
		 * Get accounts/{AwsAccountId}/themes/{ThemeId}/aliases
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the theme aliases that you're listing.
		 * @param {string} ThemeId The ID for the theme.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_result The maximum number of results to be returned per request.
		 * @return {ListThemeAliasesResponse} Success
		 */
		ListThemeAliases(AwsAccountId: string, ThemeId: string, next_token: string | null | undefined, max_result: number | null | undefined): Observable<ListThemeAliasesResponse> {
			return this.http.get<ListThemeAliasesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/aliases&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_result=' + max_result, {});
		}

		/**
		 * Lists all the versions of the themes in the current Amazon Web Services account.
		 * Get accounts/{AwsAccountId}/themes/{ThemeId}/versions
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the themes that you're listing.
		 * @param {string} ThemeId The ID for the theme.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListThemeVersionsResponse} Success
		 */
		ListThemeVersions(AwsAccountId: string, ThemeId: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListThemeVersionsResponse> {
			return this.http.get<ListThemeVersionsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes/' + (ThemeId == null ? '' : encodeURIComponent(ThemeId)) + '/versions&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists all the themes in the current Amazon Web Services account.
		 * Get accounts/{AwsAccountId}/themes
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the themes that you're listing.
		 * @param {string} next_token The token for the next set of results, or null if there are no more results.
		 * @param {number} max_results The maximum number of results to be returned per request.
		 * @param {ThemeType} type <p>The type of themes that you want to list. Valid options include the following:</p> <ul> <li> <p> <code>ALL (default)</code>- Display all existing themes.</p> </li> <li> <p> <code>CUSTOM</code> - Display only the themes created by people using Amazon QuickSight.</p> </li> <li> <p> <code>QUICKSIGHT</code> - Display only the starting themes defined by Amazon QuickSight.</p> </li> </ul>
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListThemesResponse} Success
		 */
		ListThemes(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, type: ThemeType | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListThemesResponse> {
			return this.http.get<ListThemesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/themes&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&type=' + type + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups
		 * @param {string} UserName The Amazon QuickSight user name that you want to list group memberships for.
		 * @param {string} AwsAccountId The Amazon Web Services account ID that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace. Currently, you should set this to <code>default</code>.
		 * @param {string} next_token A pagination token that can be used in a subsequent request.
		 * @param {number} max_results The maximum number of results to return from this request.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListUserGroupsResponse} Success
		 */
		ListUserGroups(UserName: string, AwsAccountId: string, Namespace: string, next_token: string | null | undefined, max_results: number | null | undefined, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListUserGroupsResponse> {
			return this.http.get<ListUserGroupsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/users/' + (UserName == null ? '' : encodeURIComponent(UserName)) + '/groups&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Returns a list of all of the Amazon QuickSight users belonging to this account.
		 * Get accounts/{AwsAccountId}/namespaces/{Namespace}/users
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} next_token A pagination token that can be used in a subsequent request.
		 * @param {number} max_results The maximum number of results to return from this request.
		 * @param {string} Namespace The namespace. Currently, you should set this to <code>default</code>.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {ListUsersResponse} Success
		 */
		ListUsers(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, Namespace: string, MaxResults: string | null | undefined, NextToken: string | null | undefined): Observable<ListUsersResponse> {
			return this.http.get<ListUsersResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/users&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), {});
		}

		/**
		 * Creates an Amazon QuickSight user whose identity is associated with the Identity and Access Management (IAM) identity or role specified in the request. When you register a new user from the Amazon QuickSight API, Amazon QuickSight generates a registration URL. The user accesses this registration URL to create their account. Amazon QuickSight doesn't send a registration email to users who are registered from the Amazon QuickSight API. If you want new users to receive a registration email, then add those users in the Amazon QuickSight console. For more information on registering a new user in the Amazon QuickSight console, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/managing-users.html#inviting-users"> Inviting users to access Amazon QuickSight</a>.
		 * Post accounts/{AwsAccountId}/namespaces/{Namespace}/users
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the user is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} Namespace The namespace. Currently, you should set this to <code>default</code>.
		 * @return {RegisterUserResponse} Success
		 */
		RegisterUser(AwsAccountId: string, Namespace: string, requestBody: RegisterUserPostBody): Observable<RegisterUserResponse> {
			return this.http.post<RegisterUserResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/users', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Restores an analysis.
		 * Post accounts/{AwsAccountId}/restore/analyses/{AnalysisId}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analysis.
		 * @param {string} AnalysisId The ID of the analysis that you're restoring.
		 * @return {RestoreAnalysisResponse} Success
		 */
		RestoreAnalysis(AwsAccountId: string, AnalysisId: string): Observable<RestoreAnalysisResponse> {
			return this.http.post<RestoreAnalysisResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/restore/analyses/' + (AnalysisId == null ? '' : encodeURIComponent(AnalysisId)), null, {});
		}

		/**
		 * <p>Searches for analyses that belong to the user specified in the filter.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p> </note>
		 * Post accounts/{AwsAccountId}/search/analyses
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the analyses that you're searching for.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {SearchAnalysesResponse} Success
		 */
		SearchAnalyses(AwsAccountId: string, MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: SearchAnalysesPostBody): Observable<SearchAnalysesResponse> {
			return this.http.post<SearchAnalysesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/search/analyses&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Searches for dashboards that belong to a user. </p> <note> <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p> </note>
		 * Post accounts/{AwsAccountId}/search/dashboards
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the user whose dashboards you're searching for. 
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {SearchDashboardsResponse} Success
		 */
		SearchDashboards(AwsAccountId: string, MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: SearchDashboardsPostBody): Observable<SearchDashboardsResponse> {
			return this.http.post<SearchDashboardsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/search/dashboards&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Use the <code>SearchDataSets</code> operation to search for datasets that belong to an account.
		 * Post accounts/{AwsAccountId}/search/data-sets
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {SearchDataSetsResponse} Success
		 */
		SearchDataSets(AwsAccountId: string, MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: SearchDataSetsPostBody): Observable<SearchDataSetsResponse> {
			return this.http.post<SearchDataSetsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/search/data-sets&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Use the <code>SearchDataSources</code> operation to search for data sources that belong to an account.
		 * Post accounts/{AwsAccountId}/search/data-sources
		 * @param {string} AwsAccountId The Amazon Web Services account ID.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {SearchDataSourcesResponse} Success
		 */
		SearchDataSources(AwsAccountId: string, MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: SearchDataSourcesPostBody): Observable<SearchDataSourcesResponse> {
			return this.http.post<SearchDataSourcesResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/search/data-sources&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Searches the subfolders in a folder.
		 * Post accounts/{AwsAccountId}/search/folders
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that contains the folder.
		 * @return {SearchFoldersResponse} Success
		 */
		SearchFolders(AwsAccountId: string, requestBody: SearchFoldersPostBody): Observable<SearchFoldersResponse> {
			return this.http.post<SearchFoldersResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/search/folders', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Use the <code>SearchGroups</code> operation to search groups in a specified Amazon QuickSight namespace using the supplied filters.
		 * Post accounts/{AwsAccountId}/namespaces/{Namespace}/groups-search
		 * @param {string} AwsAccountId The ID for the Amazon Web Services account that the group is in. Currently, you use the ID for the Amazon Web Services account that contains your Amazon QuickSight account.
		 * @param {string} next_token A pagination token that can be used in a subsequent request.
		 * @param {number} max_results The maximum number of results to return from this request.
		 * @param {string} Namespace The namespace that you want to search.
		 * @param {string} MaxResults Pagination limit
		 * @param {string} NextToken Pagination token
		 * @return {SearchGroupsResponse} Success
		 */
		SearchGroups(AwsAccountId: string, next_token: string | null | undefined, max_results: number | null | undefined, Namespace: string, MaxResults: string | null | undefined, NextToken: string | null | undefined, requestBody: SearchGroupsPostBody): Observable<SearchGroupsResponse> {
			return this.http.post<SearchGroupsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/namespaces/' + (Namespace == null ? '' : encodeURIComponent(Namespace)) + '/groups-search&next_token=' + (next_token == null ? '' : encodeURIComponent(next_token)) + '&max_results=' + max_results + '&MaxResults=' + (MaxResults == null ? '' : encodeURIComponent(MaxResults)) + '&NextToken=' + (NextToken == null ? '' : encodeURIComponent(NextToken)), JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts an Asset Bundle export job.</p> <p>An Asset Bundle export job exports specified Amazon QuickSight assets. You can also choose to export any asset dependencies in the same job. Export jobs run asynchronously and can be polled with a <code>DescribeAssetBundleExportJob</code> API call. When a job is successfully completed, a download URL that contains the exported assets is returned. The URL is valid for 5 minutes and can be refreshed with a <code>DescribeAssetBundleExportJob</code> API call. Each Amazon QuickSight account can run up to 5 export jobs concurrently.</p> <p>The API caller must have the necessary permissions in their IAM role to access each resource before the resources can be exported.</p>
		 * Post accounts/{AwsAccountId}/asset-bundle-export-jobs/export
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account to export assets from.
		 * @return {StartAssetBundleExportJobResponse} Success
		 */
		StartAssetBundleExportJob(AwsAccountId: string, requestBody: StartAssetBundleExportJobPostBody): Observable<StartAssetBundleExportJobResponse> {
			return this.http.post<StartAssetBundleExportJobResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/asset-bundle-export-jobs/export', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts an Asset Bundle import job.</p> <p>An Asset Bundle import job imports specified Amazon QuickSight assets into an Amazon QuickSight account. You can also choose to import a naming prefix and specified configuration overrides. The assets that are contained in the bundle file that you provide are used to create or update a new or existing asset in your Amazon QuickSight account. Each Amazon QuickSight account can run up to 5 import jobs concurrently.</p> <p>The API caller must have the necessary <code>"create"</code>, <code>"describe"</code>, and <code>"update"</code> permissions in their IAM role to access each resource type that is contained in the bundle file before the resources can be imported.</p>
		 * Post accounts/{AwsAccountId}/asset-bundle-import-jobs/import
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account to import assets into. 
		 * @return {StartAssetBundleImportJobResponse} Success
		 */
		StartAssetBundleImportJob(AwsAccountId: string, requestBody: StartAssetBundleImportJobPostBody): Observable<StartAssetBundleImportJobResponse> {
			return this.http.post<StartAssetBundleImportJobResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/asset-bundle-import-jobs/import', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * <p>Starts an asynchronous job that generates a dashboard snapshot. You can request up to one paginated PDF and up to five CSVs per API call.</p> <p>Poll job descriptions with a <code>DescribeDashboardSnapshotJob</code> API call. Once the job succeeds, use the <code>DescribeDashboardSnapshotJobResult</code> API to obtain the download URIs that the job generates.</p>
		 * Post accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that the dashboard snapshot job is executed in.
		 * @param {string} DashboardId The ID of the dashboard that you want to start a snapshot job for. 
		 * @return {StartDashboardSnapshotJobResponse} Success
		 */
		StartDashboardSnapshotJob(AwsAccountId: string, DashboardId: string, requestBody: StartDashboardSnapshotJobPostBody): Observable<StartDashboardSnapshotJobResponse> {
			return this.http.post<StartDashboardSnapshotJobResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/snapshot-jobs', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}

		/**
		 * Removes a tag or tags from a resource.
		 * Delete resources/{ResourceArn}/tags#keys
		 * @param {string} ResourceArn The Amazon Resource Name (ARN) of the resource that you want to untag.
		 * @param {Array<string>} keys The keys of the key-value pairs for the resource tag or tags assigned to the resource.
		 * @return {UntagResourceResponse} Success
		 */
		UntagResource(ResourceArn: string, keys: Array<string>): Observable<UntagResourceResponse> {
			return this.http.delete<UntagResourceResponse>(this.baseUri + 'resources/' + (ResourceArn == null ? '' : encodeURIComponent(ResourceArn)) + '/tags#keys&' + keys.map(z => `keys=${encodeURIComponent(z)}`).join('&'), {});
		}

		/**
		 * Updates the published version of a dashboard.
		 * Put accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}
		 * @param {string} AwsAccountId The ID of the Amazon Web Services account that contains the dashboard that you're updating.
		 * @param {string} DashboardId The ID for the dashboard.
		 * @param {number} VersionNumber The version number of the dashboard.
		 * @return {UpdateDashboardPublishedVersionResponse} Success
		 */
		UpdateDashboardPublishedVersion(AwsAccountId: string, DashboardId: string, VersionNumber: number): Observable<UpdateDashboardPublishedVersionResponse> {
			return this.http.put<UpdateDashboardPublishedVersionResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/dashboards/' + (DashboardId == null ? '' : encodeURIComponent(DashboardId)) + '/versions/' + VersionNumber, null, {});
		}

		/**
		 * <p>Use the <code>UpdatePublicSharingSettings</code> operation to turn on or turn off the public sharing settings of an Amazon QuickSight dashboard.</p> <p>To use this operation, turn on session capacity pricing for your Amazon QuickSight account.</p> <p>Before you can turn on public sharing on your account, make sure to give public sharing permissions to an administrative user in the Identity and Access Management (IAM) console. For more information on using IAM with Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html">Using Amazon QuickSight with IAM</a> in the <i>Amazon QuickSight User Guide</i>.</p>
		 * Put accounts/{AwsAccountId}/public-sharing-settings
		 * @param {string} AwsAccountId The Amazon Web Services account ID associated with your Amazon QuickSight subscription.
		 * @return {UpdatePublicSharingSettingsResponse} Success
		 */
		UpdatePublicSharingSettings(AwsAccountId: string, requestBody: UpdatePublicSharingSettingsPutBody): Observable<UpdatePublicSharingSettingsResponse> {
			return this.http.put<UpdatePublicSharingSettingsResponse>(this.baseUri + 'accounts/' + (AwsAccountId == null ? '' : encodeURIComponent(AwsAccountId)) + '/public-sharing-settings', JSON.stringify(requestBody), { headers: { 'Content-Type': 'application/json;charset=UTF-8' } });
		}
	}

	export interface CreateIngestionPutBody {

		/** This defines the type of ingestion user wants to trigger. This is part of create ingestion request. */
		IngestionType?: IngestionType | null;
	}
	export interface CreateIngestionPutBodyFormProperties {

		/** This defines the type of ingestion user wants to trigger. This is part of create ingestion request. */
		IngestionType: FormControl<IngestionType | null | undefined>,
	}
	export function CreateCreateIngestionPutBodyFormGroup() {
		return new FormGroup<CreateIngestionPutBodyFormProperties>({
			IngestionType: new FormControl<IngestionType | null | undefined>(undefined),
		});

	}

	export interface CreateAccountCustomizationPostBody {

		/**
		 * The Amazon QuickSight customizations associated with your Amazon Web Services account or a QuickSight namespace in a specific Amazon Web Services Region.
		 * Required
		 */
		AccountCustomization: CreateAccountCustomizationPostBodyAccountCustomization;

		/**
		 * A list of the tags that you want to attach to this resource.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;
	}
	export interface CreateAccountCustomizationPostBodyFormProperties {
	}
	export function CreateCreateAccountCustomizationPostBodyFormGroup() {
		return new FormGroup<CreateAccountCustomizationPostBodyFormProperties>({
		});

	}

	export interface CreateAccountCustomizationPostBodyAccountCustomization {
		DefaultTheme?: string;
		DefaultEmailCustomizationTemplate?: string;
	}
	export interface CreateAccountCustomizationPostBodyAccountCustomizationFormProperties {
		DefaultTheme: FormControl<string | null | undefined>,
		DefaultEmailCustomizationTemplate: FormControl<string | null | undefined>,
	}
	export function CreateCreateAccountCustomizationPostBodyAccountCustomizationFormGroup() {
		return new FormGroup<CreateAccountCustomizationPostBodyAccountCustomizationFormProperties>({
			DefaultTheme: new FormControl<string | null | undefined>(undefined),
			DefaultEmailCustomizationTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateAccountCustomizationPutBody {

		/**
		 * The Amazon QuickSight customizations associated with your Amazon Web Services account or a QuickSight namespace in a specific Amazon Web Services Region.
		 * Required
		 */
		AccountCustomization: UpdateAccountCustomizationPutBodyAccountCustomization;
	}
	export interface UpdateAccountCustomizationPutBodyFormProperties {
	}
	export function CreateUpdateAccountCustomizationPutBodyFormGroup() {
		return new FormGroup<UpdateAccountCustomizationPutBodyFormProperties>({
		});

	}

	export interface UpdateAccountCustomizationPutBodyAccountCustomization {
		DefaultTheme?: string;
		DefaultEmailCustomizationTemplate?: string;
	}
	export interface UpdateAccountCustomizationPutBodyAccountCustomizationFormProperties {
		DefaultTheme: FormControl<string | null | undefined>,
		DefaultEmailCustomizationTemplate: FormControl<string | null | undefined>,
	}
	export function CreateUpdateAccountCustomizationPutBodyAccountCustomizationFormGroup() {
		return new FormGroup<UpdateAccountCustomizationPutBodyAccountCustomizationFormProperties>({
			DefaultTheme: new FormControl<string | null | undefined>(undefined),
			DefaultEmailCustomizationTemplate: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAccountSubscriptionPostBody {

		/**
		 * <p>The edition of Amazon QuickSight that you want your account to have. Currently, you can choose from <code>ENTERPRISE</code> or <code>ENTERPRISE_AND_Q</code>.</p> <p>If you choose <code>ENTERPRISE_AND_Q</code>, the following parameters are required:</p> <ul> <li> <p> <code>FirstName</code> </p> </li> <li> <p> <code>LastName</code> </p> </li> <li> <p> <code>EmailAddress</code> </p> </li> <li> <p> <code>ContactNumber</code> </p> </li> </ul>
		 * Required
		 */
		Edition: Edition;

		/**
		 * <p>The method that you want to use to authenticate your Amazon QuickSight account. Currently, the valid values for this parameter are <code>IAM_AND_QUICKSIGHT</code>, <code>IAM_ONLY</code>, and <code>ACTIVE_DIRECTORY</code>.</p> <p>If you choose <code>ACTIVE_DIRECTORY</code>, provide an <code>ActiveDirectoryName</code> and an <code>AdminGroup</code> associated with your Active Directory.</p>
		 * Required
		 */
		AuthenticationMethod: AuthenticationMethodOption;

		/**
		 * The name of your Amazon QuickSight account. This name is unique over all of Amazon Web Services, and it appears only when users sign in. You can't change <code>AccountName</code> value after the Amazon QuickSight account is created.
		 * Required
		 */
		AccountName: string;

		/**
		 * The email address that you want Amazon QuickSight to send notifications to regarding your Amazon QuickSight account or Amazon QuickSight subscription.
		 * Required
		 */
		NotificationEmail: string;

		/** The name of your Active Directory. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account. */
		ActiveDirectoryName?: string | null;

		/** The realm of the Active Directory that is associated with your Amazon QuickSight account. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account. */
		Realm?: string | null;

		/** The ID of the Active Directory that is associated with your Amazon QuickSight account. */
		DirectoryId?: string | null;

		/** The admin group associated with your Active Directory. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account. For more information about using Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with Amazon QuickSight Enterprise Edition</a> in the Amazon QuickSight User Guide. */
		AdminGroup?: Array<string>;

		/** The author group associated with your Active Directory. For more information about using Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with Amazon QuickSight Enterprise Edition</a> in the Amazon QuickSight User Guide. */
		AuthorGroup?: Array<string>;

		/** The reader group associated with your Active Direcrtory. For more information about using Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with Amazon QuickSight Enterprise Edition</a> in the <i>Amazon QuickSight User Guide</i>. */
		ReaderGroup?: Array<string>;

		/** The first name of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		FirstName?: string | null;

		/** The last name of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		LastName?: string | null;

		/** The email address of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		EmailAddress?: string | null;

		/** A 10-digit phone number for the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		ContactNumber?: string | null;
	}
	export interface CreateAccountSubscriptionPostBodyFormProperties {

		/**
		 * <p>The edition of Amazon QuickSight that you want your account to have. Currently, you can choose from <code>ENTERPRISE</code> or <code>ENTERPRISE_AND_Q</code>.</p> <p>If you choose <code>ENTERPRISE_AND_Q</code>, the following parameters are required:</p> <ul> <li> <p> <code>FirstName</code> </p> </li> <li> <p> <code>LastName</code> </p> </li> <li> <p> <code>EmailAddress</code> </p> </li> <li> <p> <code>ContactNumber</code> </p> </li> </ul>
		 * Required
		 */
		Edition: FormControl<Edition | null | undefined>,

		/**
		 * <p>The method that you want to use to authenticate your Amazon QuickSight account. Currently, the valid values for this parameter are <code>IAM_AND_QUICKSIGHT</code>, <code>IAM_ONLY</code>, and <code>ACTIVE_DIRECTORY</code>.</p> <p>If you choose <code>ACTIVE_DIRECTORY</code>, provide an <code>ActiveDirectoryName</code> and an <code>AdminGroup</code> associated with your Active Directory.</p>
		 * Required
		 */
		AuthenticationMethod: FormControl<AuthenticationMethodOption | null | undefined>,

		/**
		 * The name of your Amazon QuickSight account. This name is unique over all of Amazon Web Services, and it appears only when users sign in. You can't change <code>AccountName</code> value after the Amazon QuickSight account is created.
		 * Required
		 */
		AccountName: FormControl<string | null | undefined>,

		/**
		 * The email address that you want Amazon QuickSight to send notifications to regarding your Amazon QuickSight account or Amazon QuickSight subscription.
		 * Required
		 */
		NotificationEmail: FormControl<string | null | undefined>,

		/** The name of your Active Directory. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account. */
		ActiveDirectoryName: FormControl<string | null | undefined>,

		/** The realm of the Active Directory that is associated with your Amazon QuickSight account. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account. */
		Realm: FormControl<string | null | undefined>,

		/** The ID of the Active Directory that is associated with your Amazon QuickSight account. */
		DirectoryId: FormControl<string | null | undefined>,

		/** The first name of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		FirstName: FormControl<string | null | undefined>,

		/** The last name of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		LastName: FormControl<string | null | undefined>,

		/** The email address of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		EmailAddress: FormControl<string | null | undefined>,

		/** A 10-digit phone number for the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account. */
		ContactNumber: FormControl<string | null | undefined>,
	}
	export function CreateCreateAccountSubscriptionPostBodyFormGroup() {
		return new FormGroup<CreateAccountSubscriptionPostBodyFormProperties>({
			Edition: new FormControl<Edition | null | undefined>(undefined, [Validators.required]),
			AuthenticationMethod: new FormControl<AuthenticationMethodOption | null | undefined>(undefined, [Validators.required]),
			AccountName: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			NotificationEmail: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			ActiveDirectoryName: new FormControl<string | null | undefined>(undefined),
			Realm: new FormControl<string | null | undefined>(undefined),
			DirectoryId: new FormControl<string | null | undefined>(undefined),
			FirstName: new FormControl<string | null | undefined>(undefined),
			LastName: new FormControl<string | null | undefined>(undefined),
			EmailAddress: new FormControl<string | null | undefined>(undefined),
			ContactNumber: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAnalysisPostBody {

		/**
		 * A descriptive name for the analysis that you're creating. This name displays for the analysis in the Amazon QuickSight console.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: string;

		/** A list of Amazon QuickSight parameters and the list's override values. */
		Parameters?: CreateAnalysisPostBodyParameters;

		/**
		 * <p>A structure that describes the principals and the resource-level permissions on an analysis. You can use the <code>Permissions</code> structure to grant permissions by providing a list of Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN). </p> <p>To specify no permissions, omit <code>Permissions</code>.</p>
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		Permissions?: Array<ResourcePermission>;

		/** The source entity of an analysis. */
		SourceEntity?: CreateAnalysisPostBodySourceEntity;

		/** The ARN for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it. */
		ThemeArn?: string | null;

		/**
		 * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;

		/** The definition of an analysis. */
		Definition?: CreateAnalysisPostBodyDefinition;
	}
	export interface CreateAnalysisPostBodyFormProperties {

		/**
		 * A descriptive name for the analysis that you're creating. This name displays for the analysis in the Amazon QuickSight console.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/** The ARN for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it. */
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateAnalysisPostBodyFormGroup() {
		return new FormGroup<CreateAnalysisPostBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateAnalysisPostBodyParameters {
		StringParameters?: Array<StringParameter>;
		IntegerParameters?: Array<IntegerParameter>;
		DecimalParameters?: Array<DecimalParameter>;
		DateTimeParameters?: Array<DateTimeParameter>;
	}
	export interface CreateAnalysisPostBodyParametersFormProperties {
	}
	export function CreateCreateAnalysisPostBodyParametersFormGroup() {
		return new FormGroup<CreateAnalysisPostBodyParametersFormProperties>({
		});

	}

	export interface CreateAnalysisPostBodySourceEntity {
		SourceTemplate?: AnalysisSourceTemplate;
	}
	export interface CreateAnalysisPostBodySourceEntityFormProperties {
	}
	export function CreateCreateAnalysisPostBodySourceEntityFormGroup() {
		return new FormGroup<CreateAnalysisPostBodySourceEntityFormProperties>({
		});

	}

	export interface CreateAnalysisPostBodyDefinition {
		DataSetIdentifierDeclarations?: Array<DataSetIdentifierDeclaration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}
	export interface CreateAnalysisPostBodyDefinitionFormProperties {
	}
	export function CreateCreateAnalysisPostBodyDefinitionFormGroup() {
		return new FormGroup<CreateAnalysisPostBodyDefinitionFormProperties>({
		});

	}

	export interface UpdateAnalysisPutBody {

		/**
		 * A descriptive name for the analysis that you're updating. This name displays for the analysis in the Amazon QuickSight console.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: string;

		/** A list of Amazon QuickSight parameters and the list's override values. */
		Parameters?: UpdateAnalysisPutBodyParameters;

		/** The source entity of an analysis. */
		SourceEntity?: UpdateAnalysisPutBodySourceEntity;

		/** The Amazon Resource Name (ARN) for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it. */
		ThemeArn?: string | null;

		/** The definition of an analysis. */
		Definition?: UpdateAnalysisPutBodyDefinition;
	}
	export interface UpdateAnalysisPutBodyFormProperties {

		/**
		 * A descriptive name for the analysis that you're updating. This name displays for the analysis in the Amazon QuickSight console.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/** The Amazon Resource Name (ARN) for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it. */
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateAnalysisPutBodyFormGroup() {
		return new FormGroup<UpdateAnalysisPutBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateAnalysisPutBodyParameters {
		StringParameters?: Array<StringParameter>;
		IntegerParameters?: Array<IntegerParameter>;
		DecimalParameters?: Array<DecimalParameter>;
		DateTimeParameters?: Array<DateTimeParameter>;
	}
	export interface UpdateAnalysisPutBodyParametersFormProperties {
	}
	export function CreateUpdateAnalysisPutBodyParametersFormGroup() {
		return new FormGroup<UpdateAnalysisPutBodyParametersFormProperties>({
		});

	}

	export interface UpdateAnalysisPutBodySourceEntity {
		SourceTemplate?: AnalysisSourceTemplate;
	}
	export interface UpdateAnalysisPutBodySourceEntityFormProperties {
	}
	export function CreateUpdateAnalysisPutBodySourceEntityFormGroup() {
		return new FormGroup<UpdateAnalysisPutBodySourceEntityFormProperties>({
		});

	}

	export interface UpdateAnalysisPutBodyDefinition {
		DataSetIdentifierDeclarations?: Array<DataSetIdentifierDeclaration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}
	export interface UpdateAnalysisPutBodyDefinitionFormProperties {
	}
	export function CreateUpdateAnalysisPutBodyDefinitionFormGroup() {
		return new FormGroup<UpdateAnalysisPutBodyDefinitionFormProperties>({
		});

	}

	export interface CreateDashboardPostBody {

		/**
		 * The display name of the dashboard.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: string;

		/** A list of Amazon QuickSight parameters and the list's override values. */
		Parameters?: CreateDashboardPostBodyParameters;

		/**
		 * <p>A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN. </p> <p>To specify no permissions, omit the permissions list.</p>
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		Permissions?: Array<ResourcePermission>;

		/** Dashboard source entity. */
		SourceEntity?: CreateDashboardPostBodySourceEntity;

		/**
		 * Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;

		/**
		 * A description for the first version of the dashboard being created.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription?: string | null;

		/** Dashboard publish options. */
		DashboardPublishOptions?: CreateDashboardPostBodyDashboardPublishOptions;

		/** The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same Amazon Web Services account where you create the dashboard. */
		ThemeArn?: string | null;

		/** The contents of a dashboard. */
		Definition?: CreateDashboardPostBodyDefinition;
	}
	export interface CreateDashboardPostBodyFormProperties {

		/**
		 * The display name of the dashboard.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * A description for the first version of the dashboard being created.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription: FormControl<string | null | undefined>,

		/** The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same Amazon Web Services account where you create the dashboard. */
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateDashboardPostBodyFormGroup() {
		return new FormGroup<CreateDashboardPostBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			VersionDescription: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDashboardPostBodyParameters {
		StringParameters?: Array<StringParameter>;
		IntegerParameters?: Array<IntegerParameter>;
		DecimalParameters?: Array<DecimalParameter>;
		DateTimeParameters?: Array<DateTimeParameter>;
	}
	export interface CreateDashboardPostBodyParametersFormProperties {
	}
	export function CreateCreateDashboardPostBodyParametersFormGroup() {
		return new FormGroup<CreateDashboardPostBodyParametersFormProperties>({
		});

	}

	export interface CreateDashboardPostBodySourceEntity {
		SourceTemplate?: DashboardSourceTemplate;
	}
	export interface CreateDashboardPostBodySourceEntityFormProperties {
	}
	export function CreateCreateDashboardPostBodySourceEntityFormGroup() {
		return new FormGroup<CreateDashboardPostBodySourceEntityFormProperties>({
		});

	}

	export interface CreateDashboardPostBodyDashboardPublishOptions {
		AdHocFilteringOption?: AdHocFilteringOption;
		ExportToCSVOption?: ExportToCSVOption;
		SheetControlsOption?: SheetControlsOption;
		VisualPublishOptions?: DashboardVisualPublishOptions;
		SheetLayoutElementMaximizationOption?: SheetLayoutElementMaximizationOption;
		VisualMenuOption?: VisualMenuOption;
		VisualAxisSortOption?: VisualAxisSortOption;
		ExportWithHiddenFieldsOption?: ExportWithHiddenFieldsOption;
		DataPointDrillUpDownOption?: DataPointDrillUpDownOption;
		DataPointMenuLabelOption?: DataPointMenuLabelOption;
		DataPointTooltipOption?: DataPointTooltipOption;
	}
	export interface CreateDashboardPostBodyDashboardPublishOptionsFormProperties {
	}
	export function CreateCreateDashboardPostBodyDashboardPublishOptionsFormGroup() {
		return new FormGroup<CreateDashboardPostBodyDashboardPublishOptionsFormProperties>({
		});

	}

	export interface CreateDashboardPostBodyDefinition {
		DataSetIdentifierDeclarations?: Array<DataSetIdentifierDeclaration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}
	export interface CreateDashboardPostBodyDefinitionFormProperties {
	}
	export function CreateCreateDashboardPostBodyDefinitionFormGroup() {
		return new FormGroup<CreateDashboardPostBodyDefinitionFormProperties>({
		});

	}

	export interface UpdateDashboardPutBody {

		/**
		 * The display name of the dashboard.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: string;

		/** Dashboard source entity. */
		SourceEntity?: UpdateDashboardPutBodySourceEntity;

		/** A list of Amazon QuickSight parameters and the list's override values. */
		Parameters?: UpdateDashboardPutBodyParameters;

		/**
		 * A description for the first version of the dashboard being created.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription?: string | null;

		/** Dashboard publish options. */
		DashboardPublishOptions?: UpdateDashboardPutBodyDashboardPublishOptions;

		/** The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that was originally associated with the entity. The theme ARN must exist in the same Amazon Web Services account where you create the dashboard. */
		ThemeArn?: string | null;

		/** The contents of a dashboard. */
		Definition?: UpdateDashboardPutBodyDefinition;
	}
	export interface UpdateDashboardPutBodyFormProperties {

		/**
		 * The display name of the dashboard.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * A description for the first version of the dashboard being created.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription: FormControl<string | null | undefined>,

		/** The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that was originally associated with the entity. The theme ARN must exist in the same Amazon Web Services account where you create the dashboard. */
		ThemeArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDashboardPutBodyFormGroup() {
		return new FormGroup<UpdateDashboardPutBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			VersionDescription: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
			ThemeArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDashboardPutBodySourceEntity {
		SourceTemplate?: DashboardSourceTemplate;
	}
	export interface UpdateDashboardPutBodySourceEntityFormProperties {
	}
	export function CreateUpdateDashboardPutBodySourceEntityFormGroup() {
		return new FormGroup<UpdateDashboardPutBodySourceEntityFormProperties>({
		});

	}

	export interface UpdateDashboardPutBodyParameters {
		StringParameters?: Array<StringParameter>;
		IntegerParameters?: Array<IntegerParameter>;
		DecimalParameters?: Array<DecimalParameter>;
		DateTimeParameters?: Array<DateTimeParameter>;
	}
	export interface UpdateDashboardPutBodyParametersFormProperties {
	}
	export function CreateUpdateDashboardPutBodyParametersFormGroup() {
		return new FormGroup<UpdateDashboardPutBodyParametersFormProperties>({
		});

	}

	export interface UpdateDashboardPutBodyDashboardPublishOptions {
		AdHocFilteringOption?: AdHocFilteringOption;
		ExportToCSVOption?: ExportToCSVOption;
		SheetControlsOption?: SheetControlsOption;
		VisualPublishOptions?: DashboardVisualPublishOptions;
		SheetLayoutElementMaximizationOption?: SheetLayoutElementMaximizationOption;
		VisualMenuOption?: VisualMenuOption;
		VisualAxisSortOption?: VisualAxisSortOption;
		ExportWithHiddenFieldsOption?: ExportWithHiddenFieldsOption;
		DataPointDrillUpDownOption?: DataPointDrillUpDownOption;
		DataPointMenuLabelOption?: DataPointMenuLabelOption;
		DataPointTooltipOption?: DataPointTooltipOption;
	}
	export interface UpdateDashboardPutBodyDashboardPublishOptionsFormProperties {
	}
	export function CreateUpdateDashboardPutBodyDashboardPublishOptionsFormGroup() {
		return new FormGroup<UpdateDashboardPutBodyDashboardPublishOptionsFormProperties>({
		});

	}

	export interface UpdateDashboardPutBodyDefinition {
		DataSetIdentifierDeclarations?: Array<DataSetIdentifierDeclaration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}
	export interface UpdateDashboardPutBodyDefinitionFormProperties {
	}
	export function CreateUpdateDashboardPutBodyDefinitionFormGroup() {
		return new FormGroup<UpdateDashboardPutBodyDefinitionFormProperties>({
		});

	}

	export interface CreateDataSetPostBody {

		/**
		 * An ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * Required
		 */
		DataSetId: string;

		/**
		 * The display name for the dataset.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: string;

		/**
		 * Declares the physical tables that are available in the underlying data sources.
		 * Required
		 */
		PhysicalTableMap: {[id: string]: PhysicalTable };

		/** Configures the combination and transformation of the data from the physical tables. */
		LogicalTableMap?: {[id: string]: LogicalTable };

		/**
		 * Indicates whether you want to import the data into SPICE.
		 * Required
		 */
		ImportMode: DataSetImportMode;

		/**
		 * Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.
		 * Minimum items: 1
		 * Maximum items: 8
		 */
		ColumnGroups?: Array<ColumnGroup>;

		/** The folder that contains fields and nested subfolders for your dataset. */
		FieldFolders?: {[id: string]: FieldFolder };

		/**
		 * A list of resource permissions on the dataset.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		Permissions?: Array<ResourcePermission>;

		/** <p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p> */
		RowLevelPermissionDataSet?: CreateDataSetPostBodyRowLevelPermissionDataSet;

		/** The configuration of tags on a dataset to set row-level security. */
		RowLevelPermissionTagConfiguration?: CreateDataSetPostBodyRowLevelPermissionTagConfiguration;

		/**
		 * A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.
		 * Minimum items: 1
		 */
		ColumnLevelPermissionRules?: Array<ColumnLevelPermissionRule>;

		/**
		 * Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;

		/** The usage configuration to apply to child datasets that reference this dataset as a source. */
		DataSetUsageConfiguration?: CreateDataSetPostBodyDataSetUsageConfiguration;

		/**
		 * The parameter declarations of the dataset.
		 * Minimum items: 1
		 * Maximum items: 32
		 */
		DatasetParameters?: Array<DatasetParameter>;
	}
	export interface CreateDataSetPostBodyFormProperties {

		/**
		 * An ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * Required
		 */
		DataSetId: FormControl<string | null | undefined>,

		/**
		 * The display name for the dataset.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * Declares the physical tables that are available in the underlying data sources.
		 * Required
		 */
		PhysicalTableMap: FormControl<{[id: string]: PhysicalTable } | null | undefined>,

		/** Configures the combination and transformation of the data from the physical tables. */
		LogicalTableMap: FormControl<{[id: string]: LogicalTable } | null | undefined>,

		/**
		 * Indicates whether you want to import the data into SPICE.
		 * Required
		 */
		ImportMode: FormControl<DataSetImportMode | null | undefined>,

		/** The folder that contains fields and nested subfolders for your dataset. */
		FieldFolders: FormControl<{[id: string]: FieldFolder } | null | undefined>,
	}
	export function CreateCreateDataSetPostBodyFormGroup() {
		return new FormGroup<CreateDataSetPostBodyFormProperties>({
			DataSetId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			PhysicalTableMap: new FormControl<{[id: string]: PhysicalTable } | null | undefined>(undefined, [Validators.required]),
			LogicalTableMap: new FormControl<{[id: string]: LogicalTable } | null | undefined>(undefined),
			ImportMode: new FormControl<DataSetImportMode | null | undefined>(undefined, [Validators.required]),
			FieldFolders: new FormControl<{[id: string]: FieldFolder } | null | undefined>(undefined),
		});

	}

	export interface CreateDataSetPostBodyRowLevelPermissionDataSet {
		Namespace?: string;
		Arn?: string;
		PermissionPolicy?: RowLevelPermissionPolicy;
		FormatVersion?: RowLevelPermissionFormatVersion;
		Status?: WidgetStatus;
	}
	export interface CreateDataSetPostBodyRowLevelPermissionDataSetFormProperties {
		Namespace: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		PermissionPolicy: FormControl<RowLevelPermissionPolicy | null | undefined>,
		FormatVersion: FormControl<RowLevelPermissionFormatVersion | null | undefined>,
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateCreateDataSetPostBodyRowLevelPermissionDataSetFormGroup() {
		return new FormGroup<CreateDataSetPostBodyRowLevelPermissionDataSetFormProperties>({
			Namespace: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			PermissionPolicy: new FormControl<RowLevelPermissionPolicy | null | undefined>(undefined),
			FormatVersion: new FormControl<RowLevelPermissionFormatVersion | null | undefined>(undefined),
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}

	export interface CreateDataSetPostBodyRowLevelPermissionTagConfiguration {
		Status?: WidgetStatus;
		TagRules?: Array<RowLevelPermissionTagRule>;
		TagRuleConfigurations?: Array<Array<string>>;
	}
	export interface CreateDataSetPostBodyRowLevelPermissionTagConfigurationFormProperties {
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateCreateDataSetPostBodyRowLevelPermissionTagConfigurationFormGroup() {
		return new FormGroup<CreateDataSetPostBodyRowLevelPermissionTagConfigurationFormProperties>({
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}

	export interface CreateDataSetPostBodyDataSetUsageConfiguration {
		DisableUseAsDirectQuerySource?: boolean | null;
		DisableUseAsImportedSource?: boolean | null;
	}
	export interface CreateDataSetPostBodyDataSetUsageConfigurationFormProperties {
		DisableUseAsDirectQuerySource: FormControl<boolean | null | undefined>,
		DisableUseAsImportedSource: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateDataSetPostBodyDataSetUsageConfigurationFormGroup() {
		return new FormGroup<CreateDataSetPostBodyDataSetUsageConfigurationFormProperties>({
			DisableUseAsDirectQuerySource: new FormControl<boolean | null | undefined>(undefined),
			DisableUseAsImportedSource: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface CreateDataSourcePostBody {

		/**
		 * An ID for the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * Required
		 */
		DataSourceId: string;

		/**
		 * A display name for the data source.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: string;

		/**
		 * <p>The type of the data source. To return a list of all data sources, use <code>ListDataSources</code>.</p> <p>Use <code>AMAZON_ELASTICSEARCH</code> for Amazon OpenSearch Service.</p>
		 * Required
		 */
		Type: DataSourceType;

		/** The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
		DataSourceParameters?: CreateDataSourcePostBodyDataSourceParameters;

		/** Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
		Credentials?: CreateDataSourcePostBodyCredentials;

		/**
		 * A list of resource permissions on the data source.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		Permissions?: Array<ResourcePermission>;

		/** VPC connection properties. */
		VpcConnectionProperties?: CreateDataSourcePostBodyVpcConnectionProperties;

		/** Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source. */
		SslProperties?: CreateDataSourcePostBodySslProperties;

		/**
		 * Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;
	}
	export interface CreateDataSourcePostBodyFormProperties {

		/**
		 * An ID for the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * Required
		 */
		DataSourceId: FormControl<string | null | undefined>,

		/**
		 * A display name for the data source.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * <p>The type of the data source. To return a list of all data sources, use <code>ListDataSources</code>.</p> <p>Use <code>AMAZON_ELASTICSEARCH</code> for Amazon OpenSearch Service.</p>
		 * Required
		 */
		Type: FormControl<DataSourceType | null | undefined>,
	}
	export function CreateCreateDataSourcePostBodyFormGroup() {
		return new FormGroup<CreateDataSourcePostBodyFormProperties>({
			DataSourceId: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			Type: new FormControl<DataSourceType | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateDataSourcePostBodyDataSourceParameters {
		AmazonElasticsearchParameters?: AmazonElasticsearchParameters;
		AthenaParameters?: AthenaParameters;
		AuroraParameters?: AuroraParameters;
		AuroraPostgreSqlParameters?: AuroraPostgreSqlParameters;
		AwsIotAnalyticsParameters?: AwsIotAnalyticsParameters;
		JiraParameters?: JiraParameters;
		MariaDbParameters?: MariaDbParameters;
		MySqlParameters?: MySqlParameters;
		OracleParameters?: OracleParameters;
		PostgreSqlParameters?: PostgreSqlParameters;
		PrestoParameters?: PrestoParameters;
		RdsParameters?: RdsParameters;
		RedshiftParameters?: RedshiftParameters;
		S3Parameters?: S3Parameters;
		ServiceNowParameters?: ServiceNowParameters;
		SnowflakeParameters?: SnowflakeParameters;
		SparkParameters?: SparkParameters;
		SqlServerParameters?: SqlServerParameters;
		TeradataParameters?: TeradataParameters;
		TwitterParameters?: TwitterParameters;
		AmazonOpenSearchParameters?: AmazonOpenSearchParameters;
		ExasolParameters?: ExasolParameters;
		DatabricksParameters?: DatabricksParameters;
	}
	export interface CreateDataSourcePostBodyDataSourceParametersFormProperties {
	}
	export function CreateCreateDataSourcePostBodyDataSourceParametersFormGroup() {
		return new FormGroup<CreateDataSourcePostBodyDataSourceParametersFormProperties>({
		});

	}

	export interface CreateDataSourcePostBodyCredentials {
		CredentialPair?: CredentialPair;
		CopySourceArn?: string;
		SecretArn?: string;
	}
	export interface CreateDataSourcePostBodyCredentialsFormProperties {
		CopySourceArn: FormControl<string | null | undefined>,
		SecretArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateDataSourcePostBodyCredentialsFormGroup() {
		return new FormGroup<CreateDataSourcePostBodyCredentialsFormProperties>({
			CopySourceArn: new FormControl<string | null | undefined>(undefined),
			SecretArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDataSourcePostBodyVpcConnectionProperties {
		VpcConnectionArn?: string;
	}
	export interface CreateDataSourcePostBodyVpcConnectionPropertiesFormProperties {
		VpcConnectionArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateDataSourcePostBodyVpcConnectionPropertiesFormGroup() {
		return new FormGroup<CreateDataSourcePostBodyVpcConnectionPropertiesFormProperties>({
			VpcConnectionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateDataSourcePostBodySslProperties {
		DisableSsl?: boolean | null;
	}
	export interface CreateDataSourcePostBodySslPropertiesFormProperties {
		DisableSsl: FormControl<boolean | null | undefined>,
	}
	export function CreateCreateDataSourcePostBodySslPropertiesFormGroup() {
		return new FormGroup<CreateDataSourcePostBodySslPropertiesFormProperties>({
			DisableSsl: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface CreateFolderPostBody {

		/**
		 * The name of the folder.
		 * Max length: 200
		 * Min length: 1
		 */
		Name?: string | null;

		/** The type of folder. By default, <code>folderType</code> is <code>SHARED</code>. */
		FolderType?: FolderType | null;

		/** <p>The Amazon Resource Name (ARN) for the parent folder.</p> <p> <code>ParentFolderArn</code> can be null. An empty <code>parentFolderArn</code> creates a root-level folder.</p> */
		ParentFolderArn?: string | null;

		/**
		 * <p>A structure that describes the principals and the resource-level permissions of a folder.</p> <p>To specify no permissions, omit <code>Permissions</code>.</p>
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		Permissions?: Array<ResourcePermission>;

		/**
		 * Tags for the folder.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;
	}
	export interface CreateFolderPostBodyFormProperties {

		/**
		 * The name of the folder.
		 * Max length: 200
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/** The type of folder. By default, <code>folderType</code> is <code>SHARED</code>. */
		FolderType: FormControl<FolderType | null | undefined>,

		/** <p>The Amazon Resource Name (ARN) for the parent folder.</p> <p> <code>ParentFolderArn</code> can be null. An empty <code>parentFolderArn</code> creates a root-level folder.</p> */
		ParentFolderArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateFolderPostBodyFormGroup() {
		return new FormGroup<CreateFolderPostBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(200)]),
			FolderType: new FormControl<FolderType | null | undefined>(undefined),
			ParentFolderArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateFolderPutBody {

		/**
		 * The name of the folder.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		Name: string;
	}
	export interface UpdateFolderPutBodyFormProperties {

		/**
		 * The name of the folder.
		 * Required
		 * Max length: 200
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateUpdateFolderPutBodyFormGroup() {
		return new FormGroup<UpdateFolderPutBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(200)]),
		});

	}

	export interface CreateGroupPostBody {

		/**
		 * A name for the group that you want to create.
		 * Required
		 * Min length: 1
		 */
		GroupName: string;

		/**
		 * A description for the group that you want to create.
		 * Max length: 512
		 * Min length: 1
		 */
		Description?: string | null;
	}
	export interface CreateGroupPostBodyFormProperties {

		/**
		 * A name for the group that you want to create.
		 * Required
		 * Min length: 1
		 */
		GroupName: FormControl<string | null | undefined>,

		/**
		 * A description for the group that you want to create.
		 * Max length: 512
		 * Min length: 1
		 */
		Description: FormControl<string | null | undefined>,
	}
	export function CreateCreateGroupPostBodyFormGroup() {
		return new FormGroup<CreateGroupPostBodyFormProperties>({
			GroupName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.pattern('[\u0020-\u00FF]+')]),
			Description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
		});

	}

	export interface CreateIAMPolicyAssignmentPostBody {

		/**
		 * The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.
		 * Required
		 * Min length: 1
		 */
		AssignmentName: string;

		/**
		 * <p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>
		 * Required
		 */
		AssignmentStatus: AssignmentStatus;

		/** The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment. */
		PolicyArn?: string | null;

		/** The Amazon QuickSight users, groups, or both that you want to assign the policy to. */
		Identities?: {[id: string]: Array<string> };
	}
	export interface CreateIAMPolicyAssignmentPostBodyFormProperties {

		/**
		 * The name of the assignment, also called a rule. The name must be unique within the Amazon Web Services account.
		 * Required
		 * Min length: 1
		 */
		AssignmentName: FormControl<string | null | undefined>,

		/**
		 * <p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>
		 * Required
		 */
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,

		/** The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment. */
		PolicyArn: FormControl<string | null | undefined>,

		/** The Amazon QuickSight users, groups, or both that you want to assign the policy to. */
		Identities: FormControl<{[id: string]: Array<string> } | null | undefined>,
	}
	export function CreateCreateIAMPolicyAssignmentPostBodyFormGroup() {
		return new FormGroup<CreateIAMPolicyAssignmentPostBodyFormProperties>({
			AssignmentName: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.pattern('(?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$')]),
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined, [Validators.required]),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
			Identities: new FormControl<{[id: string]: Array<string> } | null | undefined>(undefined),
		});

	}

	export interface CreateNamespacePostBody {

		/**
		 * The name that you want to use to describe the new namespace.
		 * Required
		 * Max length: 64
		 */
		Namespace: string;

		/**
		 * Specifies the type of your user identity directory. Currently, this supports users with an identity type of <code>QUICKSIGHT</code>.
		 * Required
		 */
		IdentityStore: IdentityStore;

		/**
		 * The tags that you want to associate with the namespace that you're creating.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;
	}
	export interface CreateNamespacePostBodyFormProperties {

		/**
		 * The name that you want to use to describe the new namespace.
		 * Required
		 * Max length: 64
		 */
		Namespace: FormControl<string | null | undefined>,

		/**
		 * Specifies the type of your user identity directory. Currently, this supports users with an identity type of <code>QUICKSIGHT</code>.
		 * Required
		 */
		IdentityStore: FormControl<IdentityStore | null | undefined>,
	}
	export function CreateCreateNamespacePostBodyFormGroup() {
		return new FormGroup<CreateNamespacePostBodyFormProperties>({
			Namespace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(64), Validators.pattern('^[a-zA-Z0-9._-]*$')]),
			IdentityStore: new FormControl<IdentityStore | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface CreateRefreshSchedulePostBody {

		/**
		 * The refresh schedule of a dataset.
		 * Required
		 */
		Schedule: CreateRefreshSchedulePostBodySchedule;
	}
	export interface CreateRefreshSchedulePostBodyFormProperties {
	}
	export function CreateCreateRefreshSchedulePostBodyFormGroup() {
		return new FormGroup<CreateRefreshSchedulePostBodyFormProperties>({
		});

	}

	export interface CreateRefreshSchedulePostBodySchedule {
		ScheduleId?: string;
		ScheduleFrequency?: RefreshFrequency;
		StartAfterDateTime?: Date;
		RefreshType?: IngestionType;
		Arn?: string;
	}
	export interface CreateRefreshSchedulePostBodyScheduleFormProperties {
		ScheduleId: FormControl<string | null | undefined>,
		StartAfterDateTime: FormControl<Date | null | undefined>,
		RefreshType: FormControl<IngestionType | null | undefined>,
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateCreateRefreshSchedulePostBodyScheduleFormGroup() {
		return new FormGroup<CreateRefreshSchedulePostBodyScheduleFormProperties>({
			ScheduleId: new FormControl<string | null | undefined>(undefined),
			StartAfterDateTime: new FormControl<Date | null | undefined>(undefined),
			RefreshType: new FormControl<IngestionType | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateRefreshSchedulePutBody {

		/**
		 * The refresh schedule of a dataset.
		 * Required
		 */
		Schedule: UpdateRefreshSchedulePutBodySchedule;
	}
	export interface UpdateRefreshSchedulePutBodyFormProperties {
	}
	export function CreateUpdateRefreshSchedulePutBodyFormGroup() {
		return new FormGroup<UpdateRefreshSchedulePutBodyFormProperties>({
		});

	}

	export interface UpdateRefreshSchedulePutBodySchedule {
		ScheduleId?: string;
		ScheduleFrequency?: RefreshFrequency;
		StartAfterDateTime?: Date;
		RefreshType?: IngestionType;
		Arn?: string;
	}
	export interface UpdateRefreshSchedulePutBodyScheduleFormProperties {
		ScheduleId: FormControl<string | null | undefined>,
		StartAfterDateTime: FormControl<Date | null | undefined>,
		RefreshType: FormControl<IngestionType | null | undefined>,
		Arn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateRefreshSchedulePutBodyScheduleFormGroup() {
		return new FormGroup<UpdateRefreshSchedulePutBodyScheduleFormProperties>({
			ScheduleId: new FormControl<string | null | undefined>(undefined),
			StartAfterDateTime: new FormControl<Date | null | undefined>(undefined),
			RefreshType: new FormControl<IngestionType | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTemplatePostBody {

		/**
		 * A display name for the template.
		 * Max length: 2048
		 * Min length: 1
		 */
		Name?: string | null;

		/**
		 * A list of resource permissions to be set on the template.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		Permissions?: Array<ResourcePermission>;

		/** The source entity of the template. */
		SourceEntity?: CreateTemplatePostBodySourceEntity;

		/**
		 * Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;

		/**
		 * A description of the current template version being created. This API operation creates the first version of the template. Every time <code>UpdateTemplate</code> is called, a new version is created. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription?: string | null;

		/** The detailed definition of a template. */
		Definition?: CreateTemplatePostBodyDefinition;
	}
	export interface CreateTemplatePostBodyFormProperties {

		/**
		 * A display name for the template.
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * A description of the current template version being created. This API operation creates the first version of the template. Every time <code>UpdateTemplate</code> is called, a new version is created. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription: FormControl<string | null | undefined>,
	}
	export function CreateCreateTemplatePostBodyFormGroup() {
		return new FormGroup<CreateTemplatePostBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(2048)]),
			VersionDescription: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
		});

	}

	export interface CreateTemplatePostBodySourceEntity {
		SourceAnalysis?: TemplateSourceAnalysis;
		SourceTemplate?: TemplateSourceTemplate;
	}
	export interface CreateTemplatePostBodySourceEntityFormProperties {
	}
	export function CreateCreateTemplatePostBodySourceEntityFormGroup() {
		return new FormGroup<CreateTemplatePostBodySourceEntityFormProperties>({
		});

	}

	export interface CreateTemplatePostBodyDefinition {
		DataSetConfigurations?: Array<DataSetConfiguration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}
	export interface CreateTemplatePostBodyDefinitionFormProperties {
	}
	export function CreateCreateTemplatePostBodyDefinitionFormGroup() {
		return new FormGroup<CreateTemplatePostBodyDefinitionFormProperties>({
		});

	}

	export interface UpdateTemplatePutBody {

		/** The source entity of the template. */
		SourceEntity?: UpdateTemplatePutBodySourceEntity;

		/**
		 * A description of the current template version that is being updated. Every time you call <code>UpdateTemplate</code>, you create a new version of the template. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription?: string | null;

		/**
		 * The name for the template.
		 * Max length: 2048
		 * Min length: 1
		 */
		Name?: string | null;

		/** The detailed definition of a template. */
		Definition?: UpdateTemplatePutBodyDefinition;
	}
	export interface UpdateTemplatePutBodyFormProperties {

		/**
		 * A description of the current template version that is being updated. Every time you call <code>UpdateTemplate</code>, you create a new version of the template. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription: FormControl<string | null | undefined>,

		/**
		 * The name for the template.
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTemplatePutBodyFormGroup() {
		return new FormGroup<UpdateTemplatePutBodyFormProperties>({
			VersionDescription: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(2048)]),
		});

	}

	export interface UpdateTemplatePutBodySourceEntity {
		SourceAnalysis?: TemplateSourceAnalysis;
		SourceTemplate?: TemplateSourceTemplate;
	}
	export interface UpdateTemplatePutBodySourceEntityFormProperties {
	}
	export function CreateUpdateTemplatePutBodySourceEntityFormGroup() {
		return new FormGroup<UpdateTemplatePutBodySourceEntityFormProperties>({
		});

	}

	export interface UpdateTemplatePutBodyDefinition {
		DataSetConfigurations?: Array<DataSetConfiguration>;
		Sheets?: Array<SheetDefinition>;
		CalculatedFields?: Array<CalculatedField>;
		ParameterDeclarations?: Array<ParameterDeclaration>;
		FilterGroups?: Array<FilterGroup>;
		ColumnConfigurations?: Array<ColumnConfiguration>;

		/** The configuration for default analysis settings. */
		AnalysisDefaults?: AnalysisDefaults;
	}
	export interface UpdateTemplatePutBodyDefinitionFormProperties {
	}
	export function CreateUpdateTemplatePutBodyDefinitionFormGroup() {
		return new FormGroup<UpdateTemplatePutBodyDefinitionFormProperties>({
		});

	}

	export interface CreateTemplateAliasPostBody {

		/**
		 * The version number of the template.
		 * Required
		 * Minimum: 1
		 */
		TemplateVersionNumber: number;
	}
	export interface CreateTemplateAliasPostBodyFormProperties {

		/**
		 * The version number of the template.
		 * Required
		 * Minimum: 1
		 */
		TemplateVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateCreateTemplateAliasPostBodyFormGroup() {
		return new FormGroup<CreateTemplateAliasPostBodyFormProperties>({
			TemplateVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
		});

	}

	export interface UpdateTemplateAliasPutBody {

		/**
		 * The version number of the template.
		 * Required
		 * Minimum: 1
		 */
		TemplateVersionNumber: number;
	}
	export interface UpdateTemplateAliasPutBodyFormProperties {

		/**
		 * The version number of the template.
		 * Required
		 * Minimum: 1
		 */
		TemplateVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateUpdateTemplateAliasPutBodyFormGroup() {
		return new FormGroup<UpdateTemplateAliasPutBodyFormProperties>({
			TemplateVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
		});

	}

	export interface CreateThemePostBody {

		/**
		 * A display name for the theme.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: string;

		/**
		 * The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use <code>ListThemes</code> or choose <b>Themes</b> from within an analysis.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		BaseThemeId: string;

		/**
		 * A description of the first version of the theme that you're creating. Every time <code>UpdateTheme</code> is called, a new version is created. Each version of the theme has a description of the version in the <code>VersionDescription</code> field.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription?: string | null;

		/**
		 * The theme configuration. This configuration contains all of the display properties for a theme.
		 * Required
		 */
		Configuration: CreateThemePostBodyConfiguration;

		/**
		 * A valid grouping of resource permissions to apply to the new theme.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		Permissions?: Array<ResourcePermission>;

		/**
		 * A map of the key-value pairs for the resource tag or tags that you want to add to the resource.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;
	}
	export interface CreateThemePostBodyFormProperties {

		/**
		 * A display name for the theme.
		 * Required
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use <code>ListThemes</code> or choose <b>Themes</b> from within an analysis.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		BaseThemeId: FormControl<string | null | undefined>,

		/**
		 * A description of the first version of the theme that you're creating. Every time <code>UpdateTheme</code> is called, a new version is created. Each version of the theme has a description of the version in the <code>VersionDescription</code> field.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription: FormControl<string | null | undefined>,
	}
	export function CreateCreateThemePostBodyFormGroup() {
		return new FormGroup<CreateThemePostBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(2048)]),
			BaseThemeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(512), Validators.pattern('[\w\-]+')]),
			VersionDescription: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
		});

	}

	export interface CreateThemePostBodyConfiguration {
		DataColorPalette?: DataColorPalette;
		UIColorPalette?: UIColorPalette;
		Sheet?: SheetStyle;

		/** Determines the typography options. */
		Typography?: Typography;
	}
	export interface CreateThemePostBodyConfigurationFormProperties {
	}
	export function CreateCreateThemePostBodyConfigurationFormGroup() {
		return new FormGroup<CreateThemePostBodyConfigurationFormProperties>({
		});

	}

	export interface UpdateThemePutBody {

		/**
		 * The name for the theme.
		 * Max length: 2048
		 * Min length: 1
		 */
		Name?: string | null;

		/**
		 * The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		BaseThemeId: string;

		/**
		 * A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription?: string | null;

		/** The theme configuration. This configuration contains all of the display properties for a theme. */
		Configuration?: UpdateThemePutBodyConfiguration;
	}
	export interface UpdateThemePutBodyFormProperties {

		/**
		 * The name for the theme.
		 * Max length: 2048
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		BaseThemeId: FormControl<string | null | undefined>,

		/**
		 * A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.
		 * Max length: 512
		 * Min length: 1
		 */
		VersionDescription: FormControl<string | null | undefined>,
	}
	export function CreateUpdateThemePutBodyFormGroup() {
		return new FormGroup<UpdateThemePutBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(2048)]),
			BaseThemeId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(512), Validators.pattern('[\w\-]+')]),
			VersionDescription: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
		});

	}

	export interface UpdateThemePutBodyConfiguration {
		DataColorPalette?: DataColorPalette;
		UIColorPalette?: UIColorPalette;
		Sheet?: SheetStyle;

		/** Determines the typography options. */
		Typography?: Typography;
	}
	export interface UpdateThemePutBodyConfigurationFormProperties {
	}
	export function CreateUpdateThemePutBodyConfigurationFormGroup() {
		return new FormGroup<UpdateThemePutBodyConfigurationFormProperties>({
		});

	}

	export interface CreateThemeAliasPostBody {

		/**
		 * The version number of the theme.
		 * Required
		 * Minimum: 1
		 */
		ThemeVersionNumber: number;
	}
	export interface CreateThemeAliasPostBodyFormProperties {

		/**
		 * The version number of the theme.
		 * Required
		 * Minimum: 1
		 */
		ThemeVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateCreateThemeAliasPostBodyFormGroup() {
		return new FormGroup<CreateThemeAliasPostBodyFormProperties>({
			ThemeVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
		});

	}

	export interface UpdateThemeAliasPutBody {

		/**
		 * The version number of the theme that the alias should reference.
		 * Required
		 * Minimum: 1
		 */
		ThemeVersionNumber: number;
	}
	export interface UpdateThemeAliasPutBodyFormProperties {

		/**
		 * The version number of the theme that the alias should reference.
		 * Required
		 * Minimum: 1
		 */
		ThemeVersionNumber: FormControl<number | null | undefined>,
	}
	export function CreateUpdateThemeAliasPutBodyFormGroup() {
		return new FormGroup<UpdateThemeAliasPutBodyFormProperties>({
			ThemeVersionNumber: new FormControl<number | null | undefined>(undefined, [Validators.required, Validators.min(1)]),
		});

	}

	export interface CreateTopicPostBody {

		/**
		 * The ID for the topic that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * Required
		 * Max length: 256
		 */
		TopicId: string;

		/**
		 * A structure that describes the details of a topic, such as its name, description, and associated data sets.
		 * Required
		 */
		Topic: CreateTopicPostBodyTopic;

		/**
		 * Contains a map of the key-value pairs for the resource tag or tags that are assigned to the dataset.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;
	}
	export interface CreateTopicPostBodyFormProperties {

		/**
		 * The ID for the topic that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.
		 * Required
		 * Max length: 256
		 */
		TopicId: FormControl<string | null | undefined>,
	}
	export function CreateCreateTopicPostBodyFormGroup() {
		return new FormGroup<CreateTopicPostBodyFormProperties>({
			TopicId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(256), Validators.pattern('^[A-Za-z0-9-_.\\+]*$')]),
		});

	}

	export interface CreateTopicPostBodyTopic {
		Name?: string;
		Description?: string;
		DataSets?: Array<DatasetMetadata>;
	}
	export interface CreateTopicPostBodyTopicFormProperties {
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateCreateTopicPostBodyTopicFormGroup() {
		return new FormGroup<CreateTopicPostBodyTopicFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTopicRefreshSchedulePostBody {

		/**
		 * The Amazon Resource Name (ARN) of the dataset.
		 * Required
		 */
		DatasetArn: string;

		/** The name of the dataset. */
		DatasetName?: string | null;

		/**
		 * A structure that represents a topic refresh schedule.
		 * Required
		 */
		RefreshSchedule: CreateTopicRefreshSchedulePostBodyRefreshSchedule;
	}
	export interface CreateTopicRefreshSchedulePostBodyFormProperties {

		/**
		 * The Amazon Resource Name (ARN) of the dataset.
		 * Required
		 */
		DatasetArn: FormControl<string | null | undefined>,

		/** The name of the dataset. */
		DatasetName: FormControl<string | null | undefined>,
	}
	export function CreateCreateTopicRefreshSchedulePostBodyFormGroup() {
		return new FormGroup<CreateTopicRefreshSchedulePostBodyFormProperties>({
			DatasetArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			DatasetName: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface CreateTopicRefreshSchedulePostBodyRefreshSchedule {
		IsEnabled?: boolean | null;
		BasedOnSpiceSchedule?: boolean | null;
		StartingAt?: Date;
		Timezone?: string;
		RepeatAt?: string;
		TopicScheduleType?: TopicScheduleType;
	}
	export interface CreateTopicRefreshSchedulePostBodyRefreshScheduleFormProperties {
		IsEnabled: FormControl<boolean | null | undefined>,
		BasedOnSpiceSchedule: FormControl<boolean | null | undefined>,
		StartingAt: FormControl<Date | null | undefined>,
		Timezone: FormControl<string | null | undefined>,
		RepeatAt: FormControl<string | null | undefined>,
		TopicScheduleType: FormControl<TopicScheduleType | null | undefined>,
	}
	export function CreateCreateTopicRefreshSchedulePostBodyRefreshScheduleFormGroup() {
		return new FormGroup<CreateTopicRefreshSchedulePostBodyRefreshScheduleFormProperties>({
			IsEnabled: new FormControl<boolean | null | undefined>(undefined),
			BasedOnSpiceSchedule: new FormControl<boolean | null | undefined>(undefined),
			StartingAt: new FormControl<Date | null | undefined>(undefined),
			Timezone: new FormControl<string | null | undefined>(undefined),
			RepeatAt: new FormControl<string | null | undefined>(undefined),
			TopicScheduleType: new FormControl<TopicScheduleType | null | undefined>(undefined),
		});

	}

	export interface CreateVPCConnectionPostBody {

		/**
		 * The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.
		 * Required
		 * Max length: 1000
		 * Min length: 1
		 */
		VPCConnectionId: string;

		/**
		 * The display name for the VPC connection.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: string;

		/**
		 * A list of subnet IDs for the VPC connection.
		 * Required
		 * Minimum items: 2
		 * Maximum items: 15
		 */
		SubnetIds: Array<string>;

		/**
		 * A list of security group IDs for the VPC connection.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 16
		 */
		SecurityGroupIds: Array<string>;

		/**
		 * A list of IP addresses of DNS resolver endpoints for the VPC connection.
		 * Maximum items: 15
		 */
		DnsResolvers?: Array<string>;

		/**
		 * The IAM role to associate with the VPC connection.
		 * Required
		 * Max length: 2048
		 * Min length: 20
		 */
		RoleArn: string;

		/**
		 * A map of the key-value pairs for the resource tag or tags assigned to the VPC connection.
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags?: Array<Tag>;
	}
	export interface CreateVPCConnectionPostBodyFormProperties {

		/**
		 * The ID of the VPC connection that you're creating. This ID is a unique identifier for each Amazon Web Services Region in an Amazon Web Services account.
		 * Required
		 * Max length: 1000
		 * Min length: 1
		 */
		VPCConnectionId: FormControl<string | null | undefined>,

		/**
		 * The display name for the VPC connection.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * The IAM role to associate with the VPC connection.
		 * Required
		 * Max length: 2048
		 * Min length: 20
		 */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateCreateVPCConnectionPostBodyFormGroup() {
		return new FormGroup<CreateVPCConnectionPostBodyFormProperties>({
			VPCConnectionId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(1000), Validators.pattern('[\w\-]+')]),
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(2048)]),
		});

	}

	export interface UpdateDataSetPutBody {

		/**
		 * The display name for the dataset.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: string;

		/**
		 * Declares the physical tables that are available in the underlying data sources.
		 * Required
		 */
		PhysicalTableMap: {[id: string]: PhysicalTable };

		/** Configures the combination and transformation of the data from the physical tables. */
		LogicalTableMap?: {[id: string]: LogicalTable };

		/**
		 * Indicates whether you want to import the data into SPICE.
		 * Required
		 */
		ImportMode: DataSetImportMode;

		/**
		 * Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.
		 * Minimum items: 1
		 * Maximum items: 8
		 */
		ColumnGroups?: Array<ColumnGroup>;

		/** The folder that contains fields and nested subfolders for your dataset. */
		FieldFolders?: {[id: string]: FieldFolder };

		/** <p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p> */
		RowLevelPermissionDataSet?: UpdateDataSetPutBodyRowLevelPermissionDataSet;

		/** The configuration of tags on a dataset to set row-level security. */
		RowLevelPermissionTagConfiguration?: UpdateDataSetPutBodyRowLevelPermissionTagConfiguration;

		/**
		 * A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.
		 * Minimum items: 1
		 */
		ColumnLevelPermissionRules?: Array<ColumnLevelPermissionRule>;

		/** The usage configuration to apply to child datasets that reference this dataset as a source. */
		DataSetUsageConfiguration?: UpdateDataSetPutBodyDataSetUsageConfiguration;

		/**
		 * The parameter declarations of the dataset.
		 * Minimum items: 1
		 * Maximum items: 32
		 */
		DatasetParameters?: Array<DatasetParameter>;
	}
	export interface UpdateDataSetPutBodyFormProperties {

		/**
		 * The display name for the dataset.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * Declares the physical tables that are available in the underlying data sources.
		 * Required
		 */
		PhysicalTableMap: FormControl<{[id: string]: PhysicalTable } | null | undefined>,

		/** Configures the combination and transformation of the data from the physical tables. */
		LogicalTableMap: FormControl<{[id: string]: LogicalTable } | null | undefined>,

		/**
		 * Indicates whether you want to import the data into SPICE.
		 * Required
		 */
		ImportMode: FormControl<DataSetImportMode | null | undefined>,

		/** The folder that contains fields and nested subfolders for your dataset. */
		FieldFolders: FormControl<{[id: string]: FieldFolder } | null | undefined>,
	}
	export function CreateUpdateDataSetPutBodyFormGroup() {
		return new FormGroup<UpdateDataSetPutBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			PhysicalTableMap: new FormControl<{[id: string]: PhysicalTable } | null | undefined>(undefined, [Validators.required]),
			LogicalTableMap: new FormControl<{[id: string]: LogicalTable } | null | undefined>(undefined),
			ImportMode: new FormControl<DataSetImportMode | null | undefined>(undefined, [Validators.required]),
			FieldFolders: new FormControl<{[id: string]: FieldFolder } | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSetPutBodyRowLevelPermissionDataSet {
		Namespace?: string;
		Arn?: string;
		PermissionPolicy?: RowLevelPermissionPolicy;
		FormatVersion?: RowLevelPermissionFormatVersion;
		Status?: WidgetStatus;
	}
	export interface UpdateDataSetPutBodyRowLevelPermissionDataSetFormProperties {
		Namespace: FormControl<string | null | undefined>,
		Arn: FormControl<string | null | undefined>,
		PermissionPolicy: FormControl<RowLevelPermissionPolicy | null | undefined>,
		FormatVersion: FormControl<RowLevelPermissionFormatVersion | null | undefined>,
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateUpdateDataSetPutBodyRowLevelPermissionDataSetFormGroup() {
		return new FormGroup<UpdateDataSetPutBodyRowLevelPermissionDataSetFormProperties>({
			Namespace: new FormControl<string | null | undefined>(undefined),
			Arn: new FormControl<string | null | undefined>(undefined),
			PermissionPolicy: new FormControl<RowLevelPermissionPolicy | null | undefined>(undefined),
			FormatVersion: new FormControl<RowLevelPermissionFormatVersion | null | undefined>(undefined),
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSetPutBodyRowLevelPermissionTagConfiguration {
		Status?: WidgetStatus;
		TagRules?: Array<RowLevelPermissionTagRule>;
		TagRuleConfigurations?: Array<Array<string>>;
	}
	export interface UpdateDataSetPutBodyRowLevelPermissionTagConfigurationFormProperties {
		Status: FormControl<WidgetStatus | null | undefined>,
	}
	export function CreateUpdateDataSetPutBodyRowLevelPermissionTagConfigurationFormGroup() {
		return new FormGroup<UpdateDataSetPutBodyRowLevelPermissionTagConfigurationFormProperties>({
			Status: new FormControl<WidgetStatus | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSetPutBodyDataSetUsageConfiguration {
		DisableUseAsDirectQuerySource?: boolean | null;
		DisableUseAsImportedSource?: boolean | null;
	}
	export interface UpdateDataSetPutBodyDataSetUsageConfigurationFormProperties {
		DisableUseAsDirectQuerySource: FormControl<boolean | null | undefined>,
		DisableUseAsImportedSource: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateDataSetPutBodyDataSetUsageConfigurationFormGroup() {
		return new FormGroup<UpdateDataSetPutBodyDataSetUsageConfigurationFormProperties>({
			DisableUseAsDirectQuerySource: new FormControl<boolean | null | undefined>(undefined),
			DisableUseAsImportedSource: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface PutDataSetRefreshPropertiesPutBody {

		/**
		 * The refresh properties of a dataset.
		 * Required
		 */
		DataSetRefreshProperties: PutDataSetRefreshPropertiesPutBodyDataSetRefreshProperties;
	}
	export interface PutDataSetRefreshPropertiesPutBodyFormProperties {
	}
	export function CreatePutDataSetRefreshPropertiesPutBodyFormGroup() {
		return new FormGroup<PutDataSetRefreshPropertiesPutBodyFormProperties>({
		});

	}

	export interface PutDataSetRefreshPropertiesPutBodyDataSetRefreshProperties {
		RefreshConfiguration?: RefreshConfiguration;
	}
	export interface PutDataSetRefreshPropertiesPutBodyDataSetRefreshPropertiesFormProperties {
	}
	export function CreatePutDataSetRefreshPropertiesPutBodyDataSetRefreshPropertiesFormGroup() {
		return new FormGroup<PutDataSetRefreshPropertiesPutBodyDataSetRefreshPropertiesFormProperties>({
		});

	}

	export interface UpdateDataSourcePutBody {

		/**
		 * A display name for the data source.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: string;

		/** The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
		DataSourceParameters?: UpdateDataSourcePutBodyDataSourceParameters;

		/** Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null. */
		Credentials?: UpdateDataSourcePutBodyCredentials;

		/** VPC connection properties. */
		VpcConnectionProperties?: UpdateDataSourcePutBodyVpcConnectionProperties;

		/** Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source. */
		SslProperties?: UpdateDataSourcePutBodySslProperties;
	}
	export interface UpdateDataSourcePutBodyFormProperties {

		/**
		 * A display name for the data source.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDataSourcePutBodyFormGroup() {
		return new FormGroup<UpdateDataSourcePutBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
		});

	}

	export interface UpdateDataSourcePutBodyDataSourceParameters {
		AmazonElasticsearchParameters?: AmazonElasticsearchParameters;
		AthenaParameters?: AthenaParameters;
		AuroraParameters?: AuroraParameters;
		AuroraPostgreSqlParameters?: AuroraPostgreSqlParameters;
		AwsIotAnalyticsParameters?: AwsIotAnalyticsParameters;
		JiraParameters?: JiraParameters;
		MariaDbParameters?: MariaDbParameters;
		MySqlParameters?: MySqlParameters;
		OracleParameters?: OracleParameters;
		PostgreSqlParameters?: PostgreSqlParameters;
		PrestoParameters?: PrestoParameters;
		RdsParameters?: RdsParameters;
		RedshiftParameters?: RedshiftParameters;
		S3Parameters?: S3Parameters;
		ServiceNowParameters?: ServiceNowParameters;
		SnowflakeParameters?: SnowflakeParameters;
		SparkParameters?: SparkParameters;
		SqlServerParameters?: SqlServerParameters;
		TeradataParameters?: TeradataParameters;
		TwitterParameters?: TwitterParameters;
		AmazonOpenSearchParameters?: AmazonOpenSearchParameters;
		ExasolParameters?: ExasolParameters;
		DatabricksParameters?: DatabricksParameters;
	}
	export interface UpdateDataSourcePutBodyDataSourceParametersFormProperties {
	}
	export function CreateUpdateDataSourcePutBodyDataSourceParametersFormGroup() {
		return new FormGroup<UpdateDataSourcePutBodyDataSourceParametersFormProperties>({
		});

	}

	export interface UpdateDataSourcePutBodyCredentials {
		CredentialPair?: CredentialPair;
		CopySourceArn?: string;
		SecretArn?: string;
	}
	export interface UpdateDataSourcePutBodyCredentialsFormProperties {
		CopySourceArn: FormControl<string | null | undefined>,
		SecretArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDataSourcePutBodyCredentialsFormGroup() {
		return new FormGroup<UpdateDataSourcePutBodyCredentialsFormProperties>({
			CopySourceArn: new FormControl<string | null | undefined>(undefined),
			SecretArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSourcePutBodyVpcConnectionProperties {
		VpcConnectionArn?: string;
	}
	export interface UpdateDataSourcePutBodyVpcConnectionPropertiesFormProperties {
		VpcConnectionArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateDataSourcePutBodyVpcConnectionPropertiesFormGroup() {
		return new FormGroup<UpdateDataSourcePutBodyVpcConnectionPropertiesFormProperties>({
			VpcConnectionArn: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateDataSourcePutBodySslProperties {
		DisableSsl?: boolean | null;
	}
	export interface UpdateDataSourcePutBodySslPropertiesFormProperties {
		DisableSsl: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateDataSourcePutBodySslPropertiesFormGroup() {
		return new FormGroup<UpdateDataSourcePutBodySslPropertiesFormProperties>({
			DisableSsl: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UpdateGroupPutBody {

		/**
		 * The description for the group that you want to update.
		 * Max length: 512
		 * Min length: 1
		 */
		Description?: string | null;
	}
	export interface UpdateGroupPutBodyFormProperties {

		/**
		 * The description for the group that you want to update.
		 * Max length: 512
		 * Min length: 1
		 */
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateGroupPutBodyFormGroup() {
		return new FormGroup<UpdateGroupPutBodyFormProperties>({
			Description: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(512)]),
		});

	}

	export interface UpdateTopicPutBody {

		/**
		 * A structure that describes the details of a topic, such as its name, description, and associated data sets.
		 * Required
		 */
		Topic: UpdateTopicPutBodyTopic;
	}
	export interface UpdateTopicPutBodyFormProperties {
	}
	export function CreateUpdateTopicPutBodyFormGroup() {
		return new FormGroup<UpdateTopicPutBodyFormProperties>({
		});

	}

	export interface UpdateTopicPutBodyTopic {
		Name?: string;
		Description?: string;
		DataSets?: Array<DatasetMetadata>;
	}
	export interface UpdateTopicPutBodyTopicFormProperties {
		Name: FormControl<string | null | undefined>,
		Description: FormControl<string | null | undefined>,
	}
	export function CreateUpdateTopicPutBodyTopicFormGroup() {
		return new FormGroup<UpdateTopicPutBodyTopicFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined),
			Description: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateTopicRefreshSchedulePutBody {

		/**
		 * A structure that represents a topic refresh schedule.
		 * Required
		 */
		RefreshSchedule: UpdateTopicRefreshSchedulePutBodyRefreshSchedule;
	}
	export interface UpdateTopicRefreshSchedulePutBodyFormProperties {
	}
	export function CreateUpdateTopicRefreshSchedulePutBodyFormGroup() {
		return new FormGroup<UpdateTopicRefreshSchedulePutBodyFormProperties>({
		});

	}

	export interface UpdateTopicRefreshSchedulePutBodyRefreshSchedule {
		IsEnabled?: boolean | null;
		BasedOnSpiceSchedule?: boolean | null;
		StartingAt?: Date;
		Timezone?: string;
		RepeatAt?: string;
		TopicScheduleType?: TopicScheduleType;
	}
	export interface UpdateTopicRefreshSchedulePutBodyRefreshScheduleFormProperties {
		IsEnabled: FormControl<boolean | null | undefined>,
		BasedOnSpiceSchedule: FormControl<boolean | null | undefined>,
		StartingAt: FormControl<Date | null | undefined>,
		Timezone: FormControl<string | null | undefined>,
		RepeatAt: FormControl<string | null | undefined>,
		TopicScheduleType: FormControl<TopicScheduleType | null | undefined>,
	}
	export function CreateUpdateTopicRefreshSchedulePutBodyRefreshScheduleFormGroup() {
		return new FormGroup<UpdateTopicRefreshSchedulePutBodyRefreshScheduleFormProperties>({
			IsEnabled: new FormControl<boolean | null | undefined>(undefined),
			BasedOnSpiceSchedule: new FormControl<boolean | null | undefined>(undefined),
			StartingAt: new FormControl<Date | null | undefined>(undefined),
			Timezone: new FormControl<string | null | undefined>(undefined),
			RepeatAt: new FormControl<string | null | undefined>(undefined),
			TopicScheduleType: new FormControl<TopicScheduleType | null | undefined>(undefined),
		});

	}

	export interface UpdateUserPutBody {

		/**
		 * The email address of the user that you want to update.
		 * Required
		 */
		Email: string;

		/**
		 * <p>The Amazon QuickSight role of the user. The role can be one of the following default security cohorts:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> </ul> <p>The name of the Amazon QuickSight role is invisible to the user except for the console screens dealing with permissions.</p>
		 * Required
		 */
		Role: UserRole;

		/**
		 * <p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user. </p> <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p> <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
		 * Max length: 64
		 * Min length: 1
		 */
		CustomPermissionsName?: string | null;

		/** A flag that you use to indicate that you want to remove all custom permissions from this user. Using this parameter resets the user to the state it was in before a custom permissions profile was applied. This parameter defaults to NULL and it doesn't accept any other value. */
		UnapplyCustomPermissions?: boolean | null;

		/** <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p> <ul> <li> <p> <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p> </li> <li> <p> <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p> </li> <li> <p> <code>NONE</code>: This clears all the previously saved external login information for a user. Use the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeUser.html">DescribeUser</a> </code> API operation to check the external login information.</p> </li> </ul> */
		ExternalLoginFederationProviderType?: string | null;

		/** The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>. */
		CustomFederationProviderUrl?: string | null;

		/** The identity ID for a user in the external login provider. */
		ExternalLoginId?: string | null;
	}
	export interface UpdateUserPutBodyFormProperties {

		/**
		 * The email address of the user that you want to update.
		 * Required
		 */
		Email: FormControl<string | null | undefined>,

		/**
		 * <p>The Amazon QuickSight role of the user. The role can be one of the following default security cohorts:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> </ul> <p>The name of the Amazon QuickSight role is invisible to the user except for the console screens dealing with permissions.</p>
		 * Required
		 */
		Role: FormControl<UserRole | null | undefined>,

		/**
		 * <p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user. </p> <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p> <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
		 * Max length: 64
		 * Min length: 1
		 */
		CustomPermissionsName: FormControl<string | null | undefined>,

		/** A flag that you use to indicate that you want to remove all custom permissions from this user. Using this parameter resets the user to the state it was in before a custom permissions profile was applied. This parameter defaults to NULL and it doesn't accept any other value. */
		UnapplyCustomPermissions: FormControl<boolean | null | undefined>,

		/** <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p> <ul> <li> <p> <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p> </li> <li> <p> <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p> </li> <li> <p> <code>NONE</code>: This clears all the previously saved external login information for a user. Use the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeUser.html">DescribeUser</a> </code> API operation to check the external login information.</p> </li> </ul> */
		ExternalLoginFederationProviderType: FormControl<string | null | undefined>,

		/** The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>. */
		CustomFederationProviderUrl: FormControl<string | null | undefined>,

		/** The identity ID for a user in the external login provider. */
		ExternalLoginId: FormControl<string | null | undefined>,
	}
	export function CreateUpdateUserPutBodyFormGroup() {
		return new FormGroup<UpdateUserPutBodyFormProperties>({
			Email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			Role: new FormControl<UserRole | null | undefined>(undefined, [Validators.required]),
			CustomPermissionsName: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(64), Validators.pattern('^[a-zA-Z0-9+=,.@_-]+$')]),
			UnapplyCustomPermissions: new FormControl<boolean | null | undefined>(undefined),
			ExternalLoginFederationProviderType: new FormControl<string | null | undefined>(undefined),
			CustomFederationProviderUrl: new FormControl<string | null | undefined>(undefined),
			ExternalLoginId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface UpdateVPCConnectionPutBody {

		/**
		 * The display name for the VPC connection.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: string;

		/**
		 * A list of subnet IDs for the VPC connection.
		 * Required
		 * Minimum items: 2
		 * Maximum items: 15
		 */
		SubnetIds: Array<string>;

		/**
		 * A list of security group IDs for the VPC connection.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 16
		 */
		SecurityGroupIds: Array<string>;

		/**
		 * A list of IP addresses of DNS resolver endpoints for the VPC connection.
		 * Maximum items: 15
		 */
		DnsResolvers?: Array<string>;

		/**
		 * An IAM role associated with the VPC connection.
		 * Required
		 * Max length: 2048
		 * Min length: 20
		 */
		RoleArn: string;
	}
	export interface UpdateVPCConnectionPutBodyFormProperties {

		/**
		 * The display name for the VPC connection.
		 * Required
		 * Max length: 128
		 * Min length: 1
		 */
		Name: FormControl<string | null | undefined>,

		/**
		 * An IAM role associated with the VPC connection.
		 * Required
		 * Max length: 2048
		 * Min length: 20
		 */
		RoleArn: FormControl<string | null | undefined>,
	}
	export function CreateUpdateVPCConnectionPutBodyFormGroup() {
		return new FormGroup<UpdateVPCConnectionPutBodyFormProperties>({
			Name: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(128)]),
			RoleArn: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(20), Validators.maxLength(2048)]),
		});

	}

	export interface UpdateAccountSettingsPutBody {

		/**
		 * The default namespace for this Amazon Web Services account. Currently, the default is <code>default</code>. IAM users that register for the first time with Amazon QuickSight provide an email address that becomes associated with the default namespace.
		 * Required
		 * Max length: 64
		 */
		DefaultNamespace: string;

		/** The email address that you want Amazon QuickSight to send notifications to regarding your Amazon Web Services account or Amazon QuickSight subscription. */
		NotificationEmail?: string | null;

		/** A boolean value that determines whether or not an Amazon QuickSight account can be deleted. A <code>True</code> value doesn't allow the account to be deleted and results in an error message if a user tries to make a <code>DeleteAccountSubscription</code> request. A <code>False</code> value will allow the account to be deleted. */
		TerminationProtectionEnabled?: boolean | null;
	}
	export interface UpdateAccountSettingsPutBodyFormProperties {

		/**
		 * The default namespace for this Amazon Web Services account. Currently, the default is <code>default</code>. IAM users that register for the first time with Amazon QuickSight provide an email address that becomes associated with the default namespace.
		 * Required
		 * Max length: 64
		 */
		DefaultNamespace: FormControl<string | null | undefined>,

		/** The email address that you want Amazon QuickSight to send notifications to regarding your Amazon Web Services account or Amazon QuickSight subscription. */
		NotificationEmail: FormControl<string | null | undefined>,

		/** A boolean value that determines whether or not an Amazon QuickSight account can be deleted. A <code>True</code> value doesn't allow the account to be deleted and results in an error message if a user tries to make a <code>DeleteAccountSubscription</code> request. A <code>False</code> value will allow the account to be deleted. */
		TerminationProtectionEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateAccountSettingsPutBodyFormGroup() {
		return new FormGroup<UpdateAccountSettingsPutBodyFormProperties>({
			DefaultNamespace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(64), Validators.pattern('^[a-zA-Z0-9._-]*$')]),
			NotificationEmail: new FormControl<string | null | undefined>(undefined),
			TerminationProtectionEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UpdateAnalysisPermissionsPutBody {

		/**
		 * A structure that describes the permissions to add and the principal to add them to.
		 * Maximum items: 100
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * A structure that describes the permissions to remove and the principal to remove them from.
		 * Maximum items: 100
		 */
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateAnalysisPermissionsPutBodyFormProperties {
	}
	export function CreateUpdateAnalysisPermissionsPutBodyFormGroup() {
		return new FormGroup<UpdateAnalysisPermissionsPutBodyFormProperties>({
		});

	}

	export interface UpdateDashboardPermissionsPutBody {

		/**
		 * The permissions that you want to grant on this resource.
		 * Maximum items: 100
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * The permissions that you want to revoke from this resource.
		 * Maximum items: 100
		 */
		RevokePermissions?: Array<ResourcePermission>;

		/**
		 * Grants link permissions to all users in a defined namespace.
		 * Maximum items: 2
		 */
		GrantLinkPermissions?: Array<ResourcePermission>;

		/**
		 * Revokes link permissions from all users in a defined namespace.
		 * Maximum items: 2
		 */
		RevokeLinkPermissions?: Array<ResourcePermission>;
	}
	export interface UpdateDashboardPermissionsPutBodyFormProperties {
	}
	export function CreateUpdateDashboardPermissionsPutBodyFormGroup() {
		return new FormGroup<UpdateDashboardPermissionsPutBodyFormProperties>({
		});

	}

	export interface UpdateDataSetPermissionsPostBody {

		/**
		 * The resource permissions that you want to grant to the dataset.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * The resource permissions that you want to revoke from the dataset.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateDataSetPermissionsPostBodyFormProperties {
	}
	export function CreateUpdateDataSetPermissionsPostBodyFormGroup() {
		return new FormGroup<UpdateDataSetPermissionsPostBodyFormProperties>({
		});

	}

	export interface UpdateDataSourcePermissionsPostBody {

		/**
		 * A list of resource permissions that you want to grant on the data source.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * A list of resource permissions that you want to revoke on the data source.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateDataSourcePermissionsPostBodyFormProperties {
	}
	export function CreateUpdateDataSourcePermissionsPostBodyFormGroup() {
		return new FormGroup<UpdateDataSourcePermissionsPostBodyFormProperties>({
		});

	}

	export interface UpdateFolderPermissionsPutBody {

		/**
		 * The permissions that you want to grant on a resource.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * The permissions that you want to revoke from a resource.
		 * Minimum items: 1
		 * Maximum items: 64
		 */
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateFolderPermissionsPutBodyFormProperties {
	}
	export function CreateUpdateFolderPermissionsPutBodyFormGroup() {
		return new FormGroup<UpdateFolderPermissionsPutBodyFormProperties>({
		});

	}

	export interface UpdateIAMPolicyAssignmentPutBody {

		/** <p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul> */
		AssignmentStatus?: AssignmentStatus | null;

		/** The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment. */
		PolicyArn?: string | null;

		/** The Amazon QuickSight users, groups, or both that you want to assign the policy to. */
		Identities?: {[id: string]: Array<string> };
	}
	export interface UpdateIAMPolicyAssignmentPutBodyFormProperties {

		/** <p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul> */
		AssignmentStatus: FormControl<AssignmentStatus | null | undefined>,

		/** The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment. */
		PolicyArn: FormControl<string | null | undefined>,

		/** The Amazon QuickSight users, groups, or both that you want to assign the policy to. */
		Identities: FormControl<{[id: string]: Array<string> } | null | undefined>,
	}
	export function CreateUpdateIAMPolicyAssignmentPutBodyFormGroup() {
		return new FormGroup<UpdateIAMPolicyAssignmentPutBodyFormProperties>({
			AssignmentStatus: new FormControl<AssignmentStatus | null | undefined>(undefined),
			PolicyArn: new FormControl<string | null | undefined>(undefined),
			Identities: new FormControl<{[id: string]: Array<string> } | null | undefined>(undefined),
		});

	}

	export interface UpdateIpRestrictionPostBody {

		/** A map that describes the updated IP rules with CIDR ranges and descriptions. */
		IpRestrictionRuleMap?: {[id: string]: string };

		/** A value that specifies whether IP rules are turned on. */
		Enabled?: boolean | null;
	}
	export interface UpdateIpRestrictionPostBodyFormProperties {

		/** A map that describes the updated IP rules with CIDR ranges and descriptions. */
		IpRestrictionRuleMap: FormControl<{[id: string]: string } | null | undefined>,

		/** A value that specifies whether IP rules are turned on. */
		Enabled: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdateIpRestrictionPostBodyFormGroup() {
		return new FormGroup<UpdateIpRestrictionPostBodyFormProperties>({
			IpRestrictionRuleMap: new FormControl<{[id: string]: string } | null | undefined>(undefined),
			Enabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

	export interface UpdateTemplatePermissionsPutBody {

		/**
		 * A list of resource permissions to be granted on the template.
		 * Maximum items: 100
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * A list of resource permissions to be revoked from the template.
		 * Maximum items: 100
		 */
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateTemplatePermissionsPutBodyFormProperties {
	}
	export function CreateUpdateTemplatePermissionsPutBodyFormGroup() {
		return new FormGroup<UpdateTemplatePermissionsPutBodyFormProperties>({
		});

	}

	export interface UpdateThemePermissionsPutBody {

		/**
		 * A list of resource permissions to be granted for the theme.
		 * Maximum items: 100
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * A list of resource permissions to be revoked from the theme.
		 * Maximum items: 100
		 */
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateThemePermissionsPutBodyFormProperties {
	}
	export function CreateUpdateThemePermissionsPutBodyFormGroup() {
		return new FormGroup<UpdateThemePermissionsPutBodyFormProperties>({
		});

	}

	export interface UpdateTopicPermissionsPutBody {

		/**
		 * The resource permissions that you want to grant to the topic.
		 * Maximum items: 100
		 */
		GrantPermissions?: Array<ResourcePermission>;

		/**
		 * The resource permissions that you want to revoke from the topic.
		 * Maximum items: 100
		 */
		RevokePermissions?: Array<ResourcePermission>;
	}
	export interface UpdateTopicPermissionsPutBodyFormProperties {
	}
	export function CreateUpdateTopicPermissionsPutBodyFormGroup() {
		return new FormGroup<UpdateTopicPermissionsPutBodyFormProperties>({
		});

	}

	export interface GenerateEmbedUrlForAnonymousUserPostBody {

		/**
		 * How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.
		 * Minimum: 15
		 * Maximum: 600
		 */
		SessionLifetimeInMinutes?: number | null;

		/**
		 * The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.
		 * Required
		 * Max length: 64
		 */
		Namespace: string;

		/**
		 * <p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p> <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>
		 * Minimum items: 1
		 * Maximum items: 50
		 */
		SessionTags?: Array<SessionTag>;

		/**
		 * The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.
		 * Required
		 */
		AuthorizedResourceArns: Array<string>;

		/**
		 * The type of experience you want to embed. For anonymous users, you can embed Amazon QuickSight dashboards.
		 * Required
		 */
		ExperienceConfiguration: GenerateEmbedUrlForAnonymousUserPostBodyExperienceConfiguration;

		/** <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p> <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p> */
		AllowedDomains?: Array<string>;
	}
	export interface GenerateEmbedUrlForAnonymousUserPostBodyFormProperties {

		/**
		 * How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.
		 * Minimum: 15
		 * Maximum: 600
		 */
		SessionLifetimeInMinutes: FormControl<number | null | undefined>,

		/**
		 * The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.
		 * Required
		 * Max length: 64
		 */
		Namespace: FormControl<string | null | undefined>,
	}
	export function CreateGenerateEmbedUrlForAnonymousUserPostBodyFormGroup() {
		return new FormGroup<GenerateEmbedUrlForAnonymousUserPostBodyFormProperties>({
			SessionLifetimeInMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(15), Validators.max(600)]),
			Namespace: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.maxLength(64), Validators.pattern('^[a-zA-Z0-9._-]*$')]),
		});

	}

	export interface GenerateEmbedUrlForAnonymousUserPostBodyExperienceConfiguration {
		Dashboard?: AnonymousUserDashboardEmbeddingConfiguration;
		DashboardVisual?: AnonymousUserDashboardVisualEmbeddingConfiguration;
		QSearchBar?: AnonymousUserQSearchBarEmbeddingConfiguration;
	}
	export interface GenerateEmbedUrlForAnonymousUserPostBodyExperienceConfigurationFormProperties {
	}
	export function CreateGenerateEmbedUrlForAnonymousUserPostBodyExperienceConfigurationFormGroup() {
		return new FormGroup<GenerateEmbedUrlForAnonymousUserPostBodyExperienceConfigurationFormProperties>({
		});

	}

	export interface GenerateEmbedUrlForRegisteredUserPostBody {

		/**
		 * How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.
		 * Minimum: 15
		 * Maximum: 600
		 */
		SessionLifetimeInMinutes?: number | null;

		/**
		 * The Amazon Resource Name for the registered user.
		 * Required
		 */
		UserArn: string;

		/**
		 * <p>The type of experience you want to embed. For registered users, you can embed Amazon QuickSight dashboards or the Amazon QuickSight console.</p> <note> <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p> </note>
		 * Required
		 */
		ExperienceConfiguration: GenerateEmbedUrlForRegisteredUserPostBodyExperienceConfiguration;

		/** <p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p> <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p> */
		AllowedDomains?: Array<string>;
	}
	export interface GenerateEmbedUrlForRegisteredUserPostBodyFormProperties {

		/**
		 * How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.
		 * Minimum: 15
		 * Maximum: 600
		 */
		SessionLifetimeInMinutes: FormControl<number | null | undefined>,

		/**
		 * The Amazon Resource Name for the registered user.
		 * Required
		 */
		UserArn: FormControl<string | null | undefined>,
	}
	export function CreateGenerateEmbedUrlForRegisteredUserPostBodyFormGroup() {
		return new FormGroup<GenerateEmbedUrlForRegisteredUserPostBodyFormProperties>({
			SessionLifetimeInMinutes: new FormControl<number | null | undefined>(undefined, [Validators.min(15), Validators.max(600)]),
			UserArn: new FormControl<string | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface GenerateEmbedUrlForRegisteredUserPostBodyExperienceConfiguration {
		Dashboard?: RegisteredUserDashboardEmbeddingConfiguration;
		QuickSightConsole?: RegisteredUserQuickSightConsoleEmbeddingConfiguration;
		QSearchBar?: RegisteredUserQSearchBarEmbeddingConfiguration;
		DashboardVisual?: RegisteredUserDashboardVisualEmbeddingConfiguration;
	}
	export interface GenerateEmbedUrlForRegisteredUserPostBodyExperienceConfigurationFormProperties {
	}
	export function CreateGenerateEmbedUrlForRegisteredUserPostBodyExperienceConfigurationFormGroup() {
		return new FormGroup<GenerateEmbedUrlForRegisteredUserPostBodyExperienceConfigurationFormProperties>({
		});

	}

	export interface TagResourcePostBody {

		/**
		 * Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 200
		 */
		Tags: Array<Tag>;
	}
	export interface TagResourcePostBodyFormProperties {
	}
	export function CreateTagResourcePostBodyFormGroup() {
		return new FormGroup<TagResourcePostBodyFormProperties>({
		});

	}

	export interface RegisterUserPostBody {

		/**
		 * <p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p> <ul> <li> <p> <code>IAM</code>: A user whose identity maps to an existing IAM user or role. </p> </li> <li> <p> <code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight. </p> </li> </ul>
		 * Required
		 */
		IdentityType: IdentityType;

		/**
		 * The email address of the user that you want to register.
		 * Required
		 */
		Email: string;

		/**
		 * <p>The Amazon QuickSight role for the user. The user role can be one of the following:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> <li> <p> <code>RESTRICTED_READER</code>: This role isn't currently available for use.</p> </li> <li> <p> <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p> </li> </ul>
		 * Required
		 */
		UserRole: UserRole;

		/** The ARN of the IAM user or role that you are registering with Amazon QuickSight. */
		IamArn?: string | null;

		/**
		 * You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href="https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html"> <code>assume-role</code> </a> in the <i>CLI Reference.</i>
		 * Max length: 64
		 * Min length: 2
		 */
		SessionName?: string | null;

		/**
		 * The Amazon QuickSight user name that you want to create for the user you are registering.
		 * Min length: 1
		 */
		UserName?: string | null;

		/**
		 * <p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>To add custom permissions to an existing user, use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> instead.</p> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user. </p> <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p> <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
		 * Max length: 64
		 * Min length: 1
		 */
		CustomPermissionsName?: string | null;

		/** <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p> <ul> <li> <p> <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p> </li> <li> <p> <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p> </li> </ul> */
		ExternalLoginFederationProviderType?: string | null;

		/** The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>. */
		CustomFederationProviderUrl?: string | null;

		/** The identity ID for a user in the external login provider. */
		ExternalLoginId?: string | null;
	}
	export interface RegisterUserPostBodyFormProperties {

		/**
		 * <p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p> <ul> <li> <p> <code>IAM</code>: A user whose identity maps to an existing IAM user or role. </p> </li> <li> <p> <code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight. </p> </li> </ul>
		 * Required
		 */
		IdentityType: FormControl<IdentityType | null | undefined>,

		/**
		 * The email address of the user that you want to register.
		 * Required
		 */
		Email: FormControl<string | null | undefined>,

		/**
		 * <p>The Amazon QuickSight role for the user. The user role can be one of the following:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> <li> <p> <code>RESTRICTED_READER</code>: This role isn't currently available for use.</p> </li> <li> <p> <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p> </li> </ul>
		 * Required
		 */
		UserRole: FormControl<UserRole | null | undefined>,

		/** The ARN of the IAM user or role that you are registering with Amazon QuickSight. */
		IamArn: FormControl<string | null | undefined>,

		/**
		 * You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href="https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html"> <code>assume-role</code> </a> in the <i>CLI Reference.</i>
		 * Max length: 64
		 * Min length: 2
		 */
		SessionName: FormControl<string | null | undefined>,

		/**
		 * The Amazon QuickSight user name that you want to create for the user you are registering.
		 * Min length: 1
		 */
		UserName: FormControl<string | null | undefined>,

		/**
		 * <p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>To add custom permissions to an existing user, use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> instead.</p> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user. </p> <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p> <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>
		 * Max length: 64
		 * Min length: 1
		 */
		CustomPermissionsName: FormControl<string | null | undefined>,

		/** <p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p> <ul> <li> <p> <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p> </li> <li> <p> <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p> </li> </ul> */
		ExternalLoginFederationProviderType: FormControl<string | null | undefined>,

		/** The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>. */
		CustomFederationProviderUrl: FormControl<string | null | undefined>,

		/** The identity ID for a user in the external login provider. */
		ExternalLoginId: FormControl<string | null | undefined>,
	}
	export function CreateRegisterUserPostBodyFormGroup() {
		return new FormGroup<RegisterUserPostBodyFormProperties>({
			IdentityType: new FormControl<IdentityType | null | undefined>(undefined, [Validators.required]),
			Email: new FormControl<string | null | undefined>(undefined, [Validators.required]),
			UserRole: new FormControl<UserRole | null | undefined>(undefined, [Validators.required]),
			IamArn: new FormControl<string | null | undefined>(undefined),
			SessionName: new FormControl<string | null | undefined>(undefined, [Validators.minLength(2), Validators.maxLength(64), Validators.pattern('[\w+=.@-]*')]),
			UserName: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.pattern('[\u0020-\u00FF]+')]),
			CustomPermissionsName: new FormControl<string | null | undefined>(undefined, [Validators.minLength(1), Validators.maxLength(64), Validators.pattern('^[a-zA-Z0-9+=,.@_-]+$')]),
			ExternalLoginFederationProviderType: new FormControl<string | null | undefined>(undefined),
			CustomFederationProviderUrl: new FormControl<string | null | undefined>(undefined),
			ExternalLoginId: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface SearchAnalysesPostBody {

		/**
		 * The structure for the search filters that you want to apply to your search.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 1
		 */
		Filters: Array<AnalysisSearchFilter>;

		/** A pagination token that can be used in a subsequent request. */
		NextToken?: string | null;

		/**
		 * The maximum number of results to return.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults?: number | null;
	}
	export interface SearchAnalysesPostBodyFormProperties {

		/** A pagination token that can be used in a subsequent request. */
		NextToken: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to return.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchAnalysesPostBodyFormGroup() {
		return new FormGroup<SearchAnalysesPostBodyFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}

	export interface SearchDashboardsPostBody {

		/**
		 * The filters to apply to the search. Currently, you can search only by user name, for example, <code>"Filters": [ { "Name": "QUICKSIGHT_USER", "Operator": "StringEquals", "Value": "arn:aws:quicksight:us-east-1:1:user/default/UserName1" } ]</code>
		 * Required
		 * Minimum items: 1
		 * Maximum items: 1
		 */
		Filters: Array<DashboardSearchFilter>;

		/** The token for the next set of results, or null if there are no more results. */
		NextToken?: string | null;

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults?: number | null;
	}
	export interface SearchDashboardsPostBodyFormProperties {

		/** The token for the next set of results, or null if there are no more results. */
		NextToken: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchDashboardsPostBodyFormGroup() {
		return new FormGroup<SearchDashboardsPostBodyFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}

	export interface SearchDataSetsPostBody {

		/**
		 * The filters to apply to the search.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 1
		 */
		Filters: Array<DataSetSearchFilter>;

		/** A pagination token that can be used in a subsequent request. */
		NextToken?: string | null;

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults?: number | null;
	}
	export interface SearchDataSetsPostBodyFormProperties {

		/** A pagination token that can be used in a subsequent request. */
		NextToken: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchDataSetsPostBodyFormGroup() {
		return new FormGroup<SearchDataSetsPostBodyFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}

	export interface SearchDataSourcesPostBody {

		/**
		 * The filters to apply to the search.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 1
		 */
		Filters: Array<DataSourceSearchFilter>;

		/** A pagination token that can be used in a subsequent request. */
		NextToken?: string | null;

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults?: number | null;
	}
	export interface SearchDataSourcesPostBodyFormProperties {

		/** A pagination token that can be used in a subsequent request. */
		NextToken: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchDataSourcesPostBodyFormGroup() {
		return new FormGroup<SearchDataSourcesPostBodyFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}

	export interface SearchFoldersPostBody {

		/**
		 * The filters to apply to the search. Currently, you can search only by the parent folder ARN. For example, <code>"Filters": [ { "Name": "PARENT_FOLDER_ARN", "Operator": "StringEquals", "Value": "arn:aws:quicksight:us-east-1:1:folder/folderId" } ]</code>.
		 * Required
		 * Maximum items: 100
		 */
		Filters: Array<FolderSearchFilter>;

		/** The token for the next set of results, or null if there are no more results. */
		NextToken?: string | null;

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults?: number | null;
	}
	export interface SearchFoldersPostBodyFormProperties {

		/** The token for the next set of results, or null if there are no more results. */
		NextToken: FormControl<string | null | undefined>,

		/**
		 * The maximum number of results to be returned per request.
		 * Minimum: 1
		 * Maximum: 100
		 */
		MaxResults: FormControl<number | null | undefined>,
	}
	export function CreateSearchFoldersPostBodyFormGroup() {
		return new FormGroup<SearchFoldersPostBodyFormProperties>({
			NextToken: new FormControl<string | null | undefined>(undefined),
			MaxResults: new FormControl<number | null | undefined>(undefined, [Validators.min(1), Validators.max(100)]),
		});

	}

	export interface SearchGroupsPostBody {

		/**
		 * The structure for the search filters that you want to apply to your search.
		 * Required
		 * Minimum items: 1
		 * Maximum items: 1
		 */
		Filters: Array<GroupSearchFilter>;
	}
	export interface SearchGroupsPostBodyFormProperties {
	}
	export function CreateSearchGroupsPostBodyFormGroup() {
		return new FormGroup<SearchGroupsPostBodyFormProperties>({
		});

	}

	export interface StartAssetBundleExportJobPostBody {

		/**
		 * The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		AssetBundleExportJobId: string;

		/**
		 * <p>An array of resource ARNs to export. The following resources are supported.</p> <ul> <li> <p> <code>Analysis</code> </p> </li> <li> <p> <code>Dashboard</code> </p> </li> <li> <p> <code>DataSet</code> </p> </li> <li> <p> <code>DataSource</code> </p> </li> <li> <p> <code>RefreshSchedule</code> </p> </li> <li> <p> <code>Theme</code> </p> </li> <li> <p> <code>VPCConnection</code> </p> </li> </ul> <p>The API caller must have the necessary permissions in their IAM role to access each resource before the resources can be exported.</p>
		 * Required
		 * Minimum items: 1
		 * Maximum items: 100
		 */
		ResourceArns: Array<string>;

		/** A Boolean that determines whether all dependencies of each resource ARN are recursively exported with the job. For example, say you provided a Dashboard ARN to the <code>ResourceArns</code> parameter. If you set <code>IncludeAllDependencies</code> to <code>TRUE</code>, any theme, dataset, and data source resource that is a dependency of the dashboard is also exported. */
		IncludeAllDependencies?: boolean | null;

		/**
		 * The export data format.
		 * Required
		 */
		ExportFormat: AssetBundleExportFormat;

		/** An optional collection of CloudFormation property configurations that control how the export job is generated. */
		CloudFormationOverridePropertyConfiguration?: StartAssetBundleExportJobPostBodyCloudFormationOverridePropertyConfiguration;
	}
	export interface StartAssetBundleExportJobPostBodyFormProperties {

		/**
		 * The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		AssetBundleExportJobId: FormControl<string | null | undefined>,

		/** A Boolean that determines whether all dependencies of each resource ARN are recursively exported with the job. For example, say you provided a Dashboard ARN to the <code>ResourceArns</code> parameter. If you set <code>IncludeAllDependencies</code> to <code>TRUE</code>, any theme, dataset, and data source resource that is a dependency of the dashboard is also exported. */
		IncludeAllDependencies: FormControl<boolean | null | undefined>,

		/**
		 * The export data format.
		 * Required
		 */
		ExportFormat: FormControl<AssetBundleExportFormat | null | undefined>,
	}
	export function CreateStartAssetBundleExportJobPostBodyFormGroup() {
		return new FormGroup<StartAssetBundleExportJobPostBodyFormProperties>({
			AssetBundleExportJobId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(512), Validators.pattern('[\w\-]+')]),
			IncludeAllDependencies: new FormControl<boolean | null | undefined>(undefined),
			ExportFormat: new FormControl<AssetBundleExportFormat | null | undefined>(undefined, [Validators.required]),
		});

	}

	export interface StartAssetBundleExportJobPostBodyCloudFormationOverridePropertyConfiguration {
		ResourceIdOverrideConfiguration?: AssetBundleExportJobResourceIdOverrideConfiguration;
		VPCConnections?: Array<AssetBundleExportJobVPCConnectionOverrideProperties>;
		RefreshSchedules?: Array<AssetBundleExportJobRefreshScheduleOverrideProperties>;
		DataSources?: Array<AssetBundleExportJobDataSourceOverrideProperties>;
		DataSets?: Array<AssetBundleExportJobDataSetOverrideProperties>;
		Themes?: Array<AssetBundleExportJobThemeOverrideProperties>;
		Analyses?: Array<AssetBundleExportJobAnalysisOverrideProperties>;
		Dashboards?: Array<AssetBundleExportJobDashboardOverrideProperties>;
	}
	export interface StartAssetBundleExportJobPostBodyCloudFormationOverridePropertyConfigurationFormProperties {
	}
	export function CreateStartAssetBundleExportJobPostBodyCloudFormationOverridePropertyConfigurationFormGroup() {
		return new FormGroup<StartAssetBundleExportJobPostBodyCloudFormationOverridePropertyConfigurationFormProperties>({
		});

	}

	export interface StartAssetBundleImportJobPostBody {

		/**
		 * The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		AssetBundleImportJobId: string;

		/**
		 * The source of the asset bundle zip file that contains the data that you want to import. The file must be in <code>QUICKSIGHT_JSON</code> format.
		 * Required
		 */
		AssetBundleImportSource: StartAssetBundleImportJobPostBodyAssetBundleImportSource;

		/** A list of overrides that modify the asset bundle resource configuration before the resource is imported. */
		OverrideParameters?: StartAssetBundleImportJobPostBodyOverrideParameters;

		/** <p>The failure action for the import job.</p> <p>If you choose <code>ROLLBACK</code>, failed import jobs will attempt to undo any asset changes caused by the failed job.</p> <p>If you choose <code>DO_NOTHING</code>, failed import jobs will not attempt to roll back any asset changes caused by the failed job, possibly keeping the Amazon QuickSight account in an inconsistent state.</p> */
		FailureAction?: AssetBundleImportFailureAction | null;
	}
	export interface StartAssetBundleImportJobPostBodyFormProperties {

		/**
		 * The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		AssetBundleImportJobId: FormControl<string | null | undefined>,

		/** <p>The failure action for the import job.</p> <p>If you choose <code>ROLLBACK</code>, failed import jobs will attempt to undo any asset changes caused by the failed job.</p> <p>If you choose <code>DO_NOTHING</code>, failed import jobs will not attempt to roll back any asset changes caused by the failed job, possibly keeping the Amazon QuickSight account in an inconsistent state.</p> */
		FailureAction: FormControl<AssetBundleImportFailureAction | null | undefined>,
	}
	export function CreateStartAssetBundleImportJobPostBodyFormGroup() {
		return new FormGroup<StartAssetBundleImportJobPostBodyFormProperties>({
			AssetBundleImportJobId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(512), Validators.pattern('[\w\-]+')]),
			FailureAction: new FormControl<AssetBundleImportFailureAction | null | undefined>(undefined),
		});

	}

	export interface StartAssetBundleImportJobPostBodyAssetBundleImportSource {
		Body?: string;
		S3Uri?: string;
	}
	export interface StartAssetBundleImportJobPostBodyAssetBundleImportSourceFormProperties {
		Body: FormControl<string | null | undefined>,
		S3Uri: FormControl<string | null | undefined>,
	}
	export function CreateStartAssetBundleImportJobPostBodyAssetBundleImportSourceFormGroup() {
		return new FormGroup<StartAssetBundleImportJobPostBodyAssetBundleImportSourceFormProperties>({
			Body: new FormControl<string | null | undefined>(undefined),
			S3Uri: new FormControl<string | null | undefined>(undefined),
		});

	}

	export interface StartAssetBundleImportJobPostBodyOverrideParameters {
		ResourceIdOverrideConfiguration?: AssetBundleImportJobResourceIdOverrideConfiguration;
		VPCConnections?: Array<AssetBundleImportJobVPCConnectionOverrideParameters>;
		RefreshSchedules?: Array<AssetBundleImportJobRefreshScheduleOverrideParameters>;
		DataSources?: Array<AssetBundleImportJobDataSourceOverrideParameters>;
		DataSets?: Array<AssetBundleImportJobDataSetOverrideParameters>;
		Themes?: Array<AssetBundleImportJobThemeOverrideParameters>;
		Analyses?: Array<AssetBundleImportJobAnalysisOverrideParameters>;
		Dashboards?: Array<AssetBundleImportJobDashboardOverrideParameters>;
	}
	export interface StartAssetBundleImportJobPostBodyOverrideParametersFormProperties {
	}
	export function CreateStartAssetBundleImportJobPostBodyOverrideParametersFormGroup() {
		return new FormGroup<StartAssetBundleImportJobPostBodyOverrideParametersFormProperties>({
		});

	}

	export interface StartDashboardSnapshotJobPostBody {

		/**
		 * An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		SnapshotJobId: string;

		/**
		 * A structure that contains information about the users that the dashboard snapshot is generated for.
		 * Required
		 */
		UserConfiguration: StartDashboardSnapshotJobPostBodyUserConfiguration;

		/**
		 * Describes the configuration of the dashboard snapshot.
		 * Required
		 */
		SnapshotConfiguration: StartDashboardSnapshotJobPostBodySnapshotConfiguration;
	}
	export interface StartDashboardSnapshotJobPostBodyFormProperties {

		/**
		 * An ID for the dashboard snapshot job. This ID is unique to the dashboard while the job is running. This ID can be used to poll the status of a job with a <code>DescribeDashboardSnapshotJob</code> while the job runs. You can reuse this ID for another job 24 hours after the current job is completed.
		 * Required
		 * Max length: 512
		 * Min length: 1
		 */
		SnapshotJobId: FormControl<string | null | undefined>,
	}
	export function CreateStartDashboardSnapshotJobPostBodyFormGroup() {
		return new FormGroup<StartDashboardSnapshotJobPostBodyFormProperties>({
			SnapshotJobId: new FormControl<string | null | undefined>(undefined, [Validators.required, Validators.minLength(1), Validators.maxLength(512), Validators.pattern('[\w\-]+')]),
		});

	}

	export interface StartDashboardSnapshotJobPostBodyUserConfiguration {
		AnonymousUsers?: Array<SnapshotAnonymousUser>;
	}
	export interface StartDashboardSnapshotJobPostBodyUserConfigurationFormProperties {
	}
	export function CreateStartDashboardSnapshotJobPostBodyUserConfigurationFormGroup() {
		return new FormGroup<StartDashboardSnapshotJobPostBodyUserConfigurationFormProperties>({
		});

	}

	export interface StartDashboardSnapshotJobPostBodySnapshotConfiguration {
		FileGroups?: Array<SnapshotFileGroup>;
		DestinationConfiguration?: SnapshotDestinationConfiguration;

		/** A list of Amazon QuickSight parameters and the list's override values. */
		Parameters?: Parameters;
	}
	export interface StartDashboardSnapshotJobPostBodySnapshotConfigurationFormProperties {
	}
	export function CreateStartDashboardSnapshotJobPostBodySnapshotConfigurationFormGroup() {
		return new FormGroup<StartDashboardSnapshotJobPostBodySnapshotConfigurationFormProperties>({
		});

	}

	export interface UpdatePublicSharingSettingsPutBody {

		/** A Boolean value that indicates whether public sharing is turned on for an Amazon QuickSight account. */
		PublicSharingEnabled?: boolean | null;
	}
	export interface UpdatePublicSharingSettingsPutBodyFormProperties {

		/** A Boolean value that indicates whether public sharing is turned on for an Amazon QuickSight account. */
		PublicSharingEnabled: FormControl<boolean | null | undefined>,
	}
	export function CreateUpdatePublicSharingSettingsPutBodyFormGroup() {
		return new FormGroup<UpdatePublicSharingSettingsPutBodyFormProperties>({
			PublicSharingEnabled: new FormControl<boolean | null | undefined>(undefined),
		});

	}

}

